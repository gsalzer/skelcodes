{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/CurveSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"./interface/curve/ICurvePool.sol\\\";\\r\\nimport \\\"./interface/curve/ICurveRegistry.sol\\\";\\r\\nimport \\\"./SwapBase.sol\\\";\\r\\nimport \\\"./OracleBase.sol\\\";\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ncontract CurveSwap is SwapBase {\\r\\n\\r\\n  uint256 public ONE = 10**PRECISION_DECIMALS;\\r\\n\\r\\n  OracleBase oracleBase;\\r\\n\\r\\n  ICurveRegistry public curveRegistry;\\r\\n\\r\\n  //Below are addresses of LP tokens for which it is known that the get_underlying functions of Curve Registry do not work because of errors in the Curve contract.\\r\\n  //The exceptions are split. In the first exception the get_underlying_coins is called with get_balances.\\r\\n  //In the second exception get_coins and get_balances are called.\\r\\n  address[] public curveExceptionList0 = [\\r\\n  0xFd2a8fA60Abd58Efe3EeE34dd494cD491dC14900,\\r\\n  0x02d341CcB60fAaf662bC0554d13778015d1b285C\\r\\n  ];\\r\\n  address[] public curveExceptionList1 = [\\r\\n  0x49849C98ae39Fff122806C06791Fa73784FB3675,\\r\\n  0x075b1bb99792c9E1041bA13afEf80C91a1e70fB3,\\r\\n  0xaA17A236F2bAdc98DDc0Cf999AbB47D47Fc0A6Cf\\r\\n  ];\\r\\n\\r\\n  address public ETH  = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n  address public baseCurrency = address(0);\\r\\n\\r\\n  modifier validException(address exception){\\r\\n    (bool check0, bool check1) = checkCurveException(exception);\\r\\n    require(check0 || check1, \\\"Not an exception\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  event CurveExceptionAdded(address newException, uint256 exceptionList);\\r\\n  event CurveExceptionRemoved(address oldException, uint256 exceptionList);\\r\\n\\r\\n  constructor(address _factoryAddress, address _baseCurrency, address _oracleBase ) SwapBase(_factoryAddress) public {\\r\\n    baseCurrency = _baseCurrency;\\r\\n    oracleBase = OracleBase(_oracleBase);\\r\\n  }\\r\\n\\r\\n  function initializeFactory() internal virtual override {\\r\\n    curveRegistry =  ICurveRegistry(factoryAddress);\\r\\n  }\\r\\n\\r\\n  /// @dev Check what token is pool of this Swap\\r\\n  function isPool(address token) public virtual override view returns(bool){\\r\\n    address pool = curveRegistry.get_pool_from_lp_token(token);\\r\\n    bool check = (pool != address(0))? true:false;\\r\\n    return check;\\r\\n  }\\r\\n\\r\\n  /// @dev Get underlying tokens and amounts\\r\\n  function getUnderlying(address token) public virtual override view returns (address[] memory, uint256[] memory){\\r\\n    address pool = curveRegistry.get_pool_from_lp_token(token);\\r\\n    (bool exception0, bool exception1) = checkCurveException(token);\\r\\n    address[8] memory tokens;\\r\\n    address[] memory returnTokens = new address[](8);\\r\\n    uint256[8] memory reserves;\\r\\n    if (exception0) {\\r\\n      tokens = curveRegistry.get_underlying_coins(pool);\\r\\n      reserves = curveRegistry.get_balances(pool);\\r\\n    } else if (exception1) {\\r\\n      tokens = curveRegistry.get_coins(pool);\\r\\n      reserves = curveRegistry.get_balances(pool);\\r\\n    } else {\\r\\n      tokens = curveRegistry.get_underlying_coins(pool);\\r\\n      reserves = curveRegistry.get_underlying_balances(pool);\\r\\n    }\\r\\n\\r\\n    //Some pools work with ETH instead of WETH. For further calculations and functionality this is changed to WETH address.\\r\\n    uint256[8] memory decimals;\\r\\n    uint256 i;\\r\\n    uint256 totalSupply = IERC20(token).totalSupply();\\r\\n    uint256 supplyDecimals = ERC20(token).decimals();\\r\\n    uint256[] memory amounts = new uint256[](8);\\r\\n    for (i=0;i<tokens.length;i++) {\\r\\n      returnTokens[i] = tokens[i];\\r\\n      if (tokens[i] == address(0)){\\r\\n        break;\\r\\n      } else if (tokens[i]==ETH){\\r\\n        decimals[i] = 18;\\r\\n        tokens[i] = baseCurrency;\\r\\n        returnTokens[i] = baseCurrency;\\r\\n      } else {\\r\\n        decimals[i] = ERC20(tokens[i]).decimals();\\r\\n      }\\r\\n\\r\\n      amounts[i] = reserves[i]*10**(supplyDecimals-decimals[i]+PRECISION_DECIMALS)/totalSupply;\\r\\n      //Curve has errors in their registry, where amounts are stored with the wrong number of decimals\\r\\n      //This steps accounts for this. In general there will never be more than 1 of any underlying token\\r\\n      //per curve LP token. If it is more, the decimals are corrected.\\r\\n      if (amounts[i] > ONE) {\\r\\n        amounts[i] = amounts[i]*10**(decimals[i]-18);\\r\\n      }\\r\\n    }\\r\\n    return (returnTokens, amounts);\\r\\n  }\\r\\n\\r\\n  /// @dev Gives a pool with largest liquidity for a given token and a given tokenset (either keyTokens or pricingTokens)\\r\\n  //Gives the Curve pool with largest liquidity for a given token and a given tokenset (either keyTokens or pricingTokens)\\r\\n  //Curve can have multiple pools for a given pair. Research showed that the largest pool is always given as first instance, so only the first needs to be called.\\r\\n  //In Curve USD based tokens are often pooled with 3Pool. In this case liquidity is the same with USDC, DAI and USDT. When liquidity is found with USDC\\r\\n  //the loop is stopped, as no larger liquidity will be found with any other asset and this reduces calls.\\r\\n  function getLargestPool(address token, address[] memory tokenList) public virtual override view returns (address, address, uint256){\\r\\n    uint256 largestPoolSize = 0;\\r\\n    address largestPoolAddress;\\r\\n    address largestKeyToken;\\r\\n    uint256 poolSize;\\r\\n    uint256 i;\\r\\n    for (i=0;i<tokenList.length;i++) {\\r\\n      address poolAddress = curveRegistry.find_pool_for_coins(token, tokenList[i],0);\\r\\n      if (poolAddress == address(0)) {\\r\\n        continue;\\r\\n      }\\r\\n      address lpToken = curveRegistry.get_lp_token(poolAddress);\\r\\n      (bool exception0,) = checkCurveException(lpToken);\\r\\n      if (exception0) {\\r\\n        continue;\\r\\n      }\\r\\n      poolSize = getBalance(token, tokenList[i], poolAddress);\\r\\n      if (poolSize > largestPoolSize) {\\r\\n        largestPoolSize = poolSize;\\r\\n        largestKeyToken = tokenList[i];\\r\\n        largestPoolAddress = poolAddress;\\r\\n        if (largestKeyToken == oracleBase.definedOutputToken()) {\\r\\n            return (largestKeyToken, largestPoolAddress, largestPoolSize);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    return (largestKeyToken, largestPoolAddress, largestPoolSize);\\r\\n  }\\r\\n\\r\\n  /// @dev Gives the balance of a given token in a given pool.\\r\\n  function getBalance(address tokenFrom, address tokenTo, address pool) internal view returns (uint256){\\r\\n    uint256 balance;\\r\\n    (int128 indexFrom,,bool underlying) = curveRegistry.get_coin_indices(pool, tokenFrom, tokenTo);\\r\\n    uint256[8] memory balances;\\r\\n    if (underlying) {\\r\\n      balances = curveRegistry.get_underlying_balances(pool);\\r\\n      uint256 decimals = ERC20(tokenFrom).decimals();\\r\\n      balance = balances[uint256(indexFrom)];\\r\\n      if (balance > 10**(decimals+10)) {\\r\\n        balance = balance*10**(decimals-18);\\r\\n      }\\r\\n    } else {\\r\\n      balances = curveRegistry.get_balances(pool);\\r\\n      balance = balances[uint256(indexFrom)];\\r\\n    }\\r\\n    return balance;\\r\\n  }\\r\\n\\r\\n  /// @dev Generic function giving the price of a given token vs another given token\\r\\n  function getPriceVsToken(address token0, address token1, address poolAddress) public virtual override view returns (uint256) {\\r\\n    ICurvePool pool = ICurvePool(poolAddress);\\r\\n    (int128 indexFrom, int128 indexTo, bool underlying) = curveRegistry.get_coin_indices(poolAddress, token0, token1);\\r\\n    uint256 decimals0 = ERC20(token0).decimals();\\r\\n    uint256 decimals1 = ERC20(token1).decimals();\\r\\n    //Accuracy is impacted when one of the tokens has low decimals.\\r\\n    //This addition does not impact the outcome of computation, other than increased accuracy.\\r\\n    if (decimals0 < 4 || decimals1 < 4) {\\r\\n      decimals0 = decimals0 + 4;\\r\\n      decimals1 = decimals1 + 4;\\r\\n    }\\r\\n    uint256 amount1;\\r\\n    uint256 price;\\r\\n    if (underlying) {\\r\\n      amount1 = pool.get_dy_underlying(indexFrom, indexTo, 10**decimals0);\\r\\n      price = amount1*10**(PRECISION_DECIMALS-decimals1);\\r\\n    } else {\\r\\n      amount1 = pool.get_dy(indexFrom, indexTo, 10**decimals0);\\r\\n      price = amount1*10**(PRECISION_DECIMALS-decimals1);\\r\\n    }\\r\\n    return price;\\r\\n  }\\r\\n\\r\\n /* function addCurveException(address newException, uint256 exceptionList) external {\\r\\n    (bool check0, bool check1) = checkCurveException(newException);\\r\\n    require(check0==false && check1 == false, \\\"Already an exception\\\");\\r\\n    require(exceptionList <= 1, 'Only accepts 0 or 1');\\r\\n    if (exceptionList == 0) {\\r\\n      curveExceptionList0.push(newException);\\r\\n    } else {\\r\\n      curveExceptionList1.push(newException);\\r\\n    }\\r\\n    emit CurveExceptionAdded(newException, exceptionList);\\r\\n  }\\r\\n  function removeCurveException(address exception) external onlyGovernance validException(exception) {\\r\\n    (bool check0,) = checkCurveException(exception);\\r\\n    uint256 i;\\r\\n    uint256 j;\\r\\n    uint256 list;\\r\\n    if (check0) {\\r\\n      list = 0;\\r\\n      for (i=0;i<curveExceptionList0.length;i++) {\\r\\n        if (exception == curveExceptionList0[i]){\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n      while (i<curveExceptionList0.length-1) {\\r\\n        curveExceptionList0[i] = curveExceptionList0[i+1];\\r\\n        i++;\\r\\n      }\\r\\n      curveExceptionList0.pop();\\r\\n    } else {\\r\\n      list = 1;\\r\\n      for (j=0;j<curveExceptionList1.length;j++) {\\r\\n        if (exception == curveExceptionList1[j]){\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n      while (j<curveExceptionList1.length-1) {\\r\\n        curveExceptionList1[j] = curveExceptionList1[j+1];\\r\\n        j++;\\r\\n      }\\r\\n      curveExceptionList1.pop();\\r\\n    }\\r\\n    emit CurveExceptionRemoved(exception, list);\\r\\n  }*/\\r\\n  /// @dev Check address for the Curve exception lists.\\r\\n  function checkCurveException(address token) internal view returns (bool, bool) {\\r\\n    uint256 i;\\r\\n    for (i=0;i<curveExceptionList0.length;i++) {\\r\\n      if (token == curveExceptionList0[i]) {\\r\\n        return (true, false);\\r\\n      }\\r\\n    }\\r\\n    for (i=0;i<curveExceptionList1.length;i++) {\\r\\n      if (token == curveExceptionList1[i]) {\\r\\n        return (false, true);\\r\\n      }\\r\\n    }\\r\\n    return (false, false);\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.16;\\r\\n\\r\\ncontract Governable {\\r\\n\\r\\n  address public governance;\\r\\n\\r\\n  constructor(address _governance) public {\\r\\n    setGovernance(_governance);\\r\\n  }\\r\\n\\r\\n  modifier onlyGovernance() {\\r\\n    // pass check while governance might not initialized (i.e. in proxy)\\r\\n    require((governance==address(0)) || (msg.sender==governance), \\\"Not governance\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function setGovernance(address _governance) public onlyGovernance {\\r\\n    require(_governance != address(0), \\\"new governance shouldn't be empty\\\");\\r\\n    governance = _governance;\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/OracleBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\r\\n\\r\\nimport \\\"./Governable.sol\\\";\\r\\nimport \\\"./SwapBase.sol\\\";\\r\\n\\r\\nimport \\\"./UniSwap.sol\\\";\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ncontract OracleBase is Governable, Initializable  {\\r\\n\\r\\n  using SafeERC20 for IERC20;\\r\\n  using Address for address;\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  uint256 public constant PRECISION_DECIMALS = 18;\\r\\n  uint256 public constant ONE = 10**PRECISION_DECIMALS;\\r\\n\\r\\n  //The defined output token is the unit in which prices of input tokens are given.\\r\\n  bytes32 internal constant _DEFINED_OUTPUT_TOKEN_SLOT = bytes32(uint256(keccak256(\\\"eip1967.OracleBase.definedOutputToken\\\")) - 1);\\r\\n\\r\\n  //Key tokens are used to find liquidity for any given token on Uni, Sushi and Curve.\\r\\n  address[] public keyTokens;\\r\\n\\r\\n  //Pricing tokens are Key tokens with good liquidity with the defined output token on Uniswap.\\r\\n  address[] public pricingTokens;\\r\\n\\r\\n  mapping(address => address) replacementTokens;\\r\\n\\r\\n  //Swap platforms addresses\\r\\n  address[] public swaps;\\r\\n\\r\\n  modifier validKeyToken(address keyToken){\\r\\n      require(checkKeyToken(keyToken), \\\"Not a Key Token\\\");\\r\\n      _;\\r\\n  }\\r\\n  modifier validPricingToken(address pricingToken){\\r\\n      require(checkPricingToken(pricingToken), \\\"Not a Pricing Token\\\");\\r\\n      _;\\r\\n  }\\r\\n  modifier validSwap(address swap){\\r\\n      require(checkSwap(swap), \\\"Not a Swap\\\");\\r\\n      _;\\r\\n  }\\r\\n\\r\\n  event RegistryChanged(address newRegistry, address oldRegistry);\\r\\n  event KeyTokenAdded(address newKeyToken);\\r\\n  event PricingTokenAdded(address newPricingToken);\\r\\n  event SwapAdded(address newSwap);\\r\\n  event KeyTokenRemoved(address keyToken);\\r\\n  event PricingTokenRemoved(address pricingToken);\\r\\n  event SwapRemoved(address newSwap);\\r\\n  event DefinedOutputChanged(address newOutputToken, address oldOutputToken);\\r\\n\\r\\n  constructor(address[] memory _keyTokens, address[] memory _pricingTokens, address _outputToken)\\r\\n  public Governable(msg.sender) {\\r\\n    initialize( _keyTokens, _pricingTokens, _outputToken);\\r\\n  }\\r\\n\\r\\n  function initialize(address[] memory _keyTokens, address[] memory _pricingTokens, address _outputToken)\\r\\n  public initializer {\\r\\n    Governable.setGovernance(msg.sender);\\r\\n\\r\\n    addKeyTokens(_keyTokens);\\r\\n    addPricingTokens(_pricingTokens);\\r\\n    changeDefinedOutput(_outputToken);\\r\\n    // after contract deploy you have to set swaps\\r\\n  }\\r\\n\\r\\n  function addSwap(address newSwap) public onlyGovernance {\\r\\n    require(!checkSwap(newSwap), \\\"Already a swap\\\");\\r\\n    swaps.push(newSwap);\\r\\n    emit SwapAdded(newSwap);\\r\\n  }\\r\\n\\r\\n  function addSwaps(address[] memory newSwaps) public onlyGovernance {\\r\\n    for(uint i=0; i<newSwaps.length; i++) {\\r\\n      if (!checkSwap(newSwaps[i])) addSwap(newSwaps[i]);\\r\\n    }\\r\\n  }\\r\\n  function setSwaps(address[] memory newSwaps) external onlyGovernance {\\r\\n    delete swaps;\\r\\n    addSwaps(newSwaps);\\r\\n  }\\r\\n\\r\\n  function addKeyToken(address newToken) public onlyGovernance {\\r\\n    require(!checkKeyToken(newToken), \\\"Already a key token\\\");\\r\\n    keyTokens.push(newToken);\\r\\n    emit KeyTokenAdded(newToken);\\r\\n  }\\r\\n\\r\\n  function addKeyTokens(address[] memory newTokens) public onlyGovernance {\\r\\n    for(uint i=0; i<newTokens.length; i++) {\\r\\n      if (!checkKeyToken(newTokens[i])) addKeyToken(newTokens[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function addPricingToken(address newToken) public onlyGovernance validKeyToken(newToken) {\\r\\n    require(!checkPricingToken(newToken), \\\"Already a pricing token\\\");\\r\\n    pricingTokens.push(newToken);\\r\\n    emit PricingTokenAdded(newToken);\\r\\n  }\\r\\n\\r\\n  function addPricingTokens(address[] memory newTokens) public onlyGovernance {\\r\\n    for(uint i=0; i<newTokens.length; i++) {\\r\\n      if (!checkPricingToken(newTokens[i])) addPricingToken(newTokens[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function removeAddressFromArray(address adr, address[] storage array) internal {\\r\\n    uint i;\\r\\n    for (i=0; i<array.length; i++) {\\r\\n      if (adr == array[i]) break;\\r\\n    }\\r\\n\\r\\n    while (i<array.length-1) {\\r\\n      array[i] = array[i+1];\\r\\n      i++;\\r\\n    }\\r\\n    array.pop();\\r\\n  }\\r\\n\\r\\n  function removeKeyToken(address keyToken) external onlyGovernance validKeyToken(keyToken) {\\r\\n    removeAddressFromArray(keyToken, keyTokens);\\r\\n    emit KeyTokenRemoved(keyToken);\\r\\n\\r\\n    if (checkPricingToken(keyToken)) {\\r\\n      removePricingToken(keyToken);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function removePricingToken(address pricingToken) public onlyGovernance validPricingToken(pricingToken) {\\r\\n    removeAddressFromArray(pricingToken, pricingTokens );\\r\\n    emit PricingTokenRemoved(pricingToken);\\r\\n  }\\r\\n\\r\\n  function removeSwap(address swap) public onlyGovernance validSwap(swap) {\\r\\n    removeAddressFromArray(swap, swaps);\\r\\n    emit SwapRemoved(swap);\\r\\n  }\\r\\n\\r\\n  function definedOutputToken() public view returns (address value) {\\r\\n    bytes32 slot = _DEFINED_OUTPUT_TOKEN_SLOT;\\r\\n    assembly {\\r\\n      value := sload(slot)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function changeDefinedOutput(address newOutputToken) public onlyGovernance validKeyToken(newOutputToken) {\\r\\n    require(newOutputToken != address(0), \\\"zero address\\\");\\r\\n    address oldOutputToken = definedOutputToken();\\r\\n    bytes32 slot = _DEFINED_OUTPUT_TOKEN_SLOT;\\r\\n    assembly {\\r\\n      sstore(slot, newOutputToken)\\r\\n    }\\r\\n    emit DefinedOutputChanged(newOutputToken, oldOutputToken);\\r\\n  }\\r\\n\\r\\n  function modifyReplacementTokens(address _inputToken, address _replacementToken) external onlyGovernance {\\r\\n    replacementTokens[_inputToken] = _replacementToken;\\r\\n  }\\r\\n\\r\\n  //Main function of the contract. Gives the price of a given token in the defined output token.\\r\\n  //The contract allows for input tokens to be LP tokens from Uniswap, Sushiswap, Curve and 1Inch.\\r\\n  //In case of LP token, the underlying tokens will be found and valued to get the price.\\r\\n  function getPrice(address token) external view returns (uint256) {\\r\\n    if (token == definedOutputToken())\\r\\n      return (ONE);\\r\\n\\r\\n    // if the token exists in the mapping, we'll swap it for the replacement\\r\\n    // example btcb/renbtc pool -> btcb\\r\\n    if (replacementTokens[token] != address(0)) {\\r\\n      token = replacementTokens[token];\\r\\n    }\\r\\n\\r\\n    uint256 tokenPrice;\\r\\n    uint256 tokenValue;\\r\\n    uint256 price = 0;\\r\\n    uint256 i;\\r\\n    address swap = getSwapForPool(token);\\r\\n    if (swap!=address(0)) {\\r\\n      (address[] memory tokens, uint256[] memory amounts) = SwapBase(swap).getUnderlying(token);\\r\\n      for (i=0;i<tokens.length;i++) {\\r\\n        if (tokens[i] == address(0)) break;\\r\\n        tokenPrice = computePrice(tokens[i]);\\r\\n        if (tokenPrice == 0) return 0;\\r\\n        tokenValue = tokenPrice *amounts[i]/ONE;\\r\\n        price += tokenValue;\\r\\n      }\\r\\n      return price;\\r\\n    } else {\\r\\n      return computePrice(token);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getSwapForPool(address token) public view returns(address) {\\r\\n    for (uint i=0; i<swaps.length; i++ ) {\\r\\n      if (SwapBase(swaps[i]).isPool(token)) {\\r\\n        return swaps[i];\\r\\n      }\\r\\n    }\\r\\n    return address(0);\\r\\n  }\\r\\n\\r\\n  //General function to compute the price of a token vs the defined output token.\\r\\n  function computePrice(address token) public view returns (uint256) {\\r\\n    uint256 price;\\r\\n    if (token == definedOutputToken()) {\\r\\n      price = ONE;\\r\\n    } else if (token == address(0)) {\\r\\n      price = 0;\\r\\n    } else {\\r\\n      (address swap, address keyToken, address pool) = getLargestPool(token,keyTokens);\\r\\n      uint256 priceVsKeyToken;\\r\\n      uint256 keyTokenPrice;\\r\\n      if (keyToken == address(0)) {\\r\\n        price = 0;\\r\\n      } else {\\r\\n        priceVsKeyToken = SwapBase(swap).getPriceVsToken(token,keyToken,pool);\\r\\n        keyTokenPrice = getKeyTokenPrice(keyToken);\\r\\n        price = priceVsKeyToken*keyTokenPrice/ONE;\\r\\n      }\\r\\n    }\\r\\n    return (price);\\r\\n  }\\r\\n\\r\\n  //Checks the results of the different largest pool functions and returns the largest.\\r\\n  function getLargestPool(address token) public view returns (address, address, address) {\\r\\n    return getLargestPool(token, keyTokens);\\r\\n  }\\r\\n\\r\\n  function getLargestPool(address token, address[] memory keyTokenList) public view returns (address, address, address) {\\r\\n    address largestKeyToken = address(0);\\r\\n    address largestPool = address(0);\\r\\n    uint largestPoolSize = 0;\\r\\n    SwapBase largestSwap;\\r\\n    for (uint i=0;i<swaps.length;i++) {\\r\\n      SwapBase swap = SwapBase(swaps[i]);\\r\\n      (address swapLargestKeyToken, address swapLargestPool, uint swapLargestPoolSize) = swap.getLargestPool(token, keyTokenList);\\r\\n      if (swapLargestPoolSize>largestPoolSize) {\\r\\n        largestSwap = swap;\\r\\n        largestKeyToken = swapLargestKeyToken;\\r\\n        largestPool = swapLargestPool;\\r\\n        largestPoolSize = swapLargestPoolSize;\\r\\n      }\\r\\n    }\\r\\n    return (address(largestSwap), largestKeyToken, largestPool);\\r\\n  }\\r\\n\\r\\n  //Gives the price of a given keyToken.\\r\\n  function getKeyTokenPrice(address token) internal view returns (uint256) {\\r\\n    bool isPricingToken = checkPricingToken(token);\\r\\n    uint256 price;\\r\\n    uint256 priceVsPricingToken;\\r\\n    if (token == definedOutputToken()) {\\r\\n      price = ONE;\\r\\n    } else if (isPricingToken) {\\r\\n      price = SwapBase(swaps[0]).getPriceVsToken(token, definedOutputToken(), address(0)); // first swap is used\\r\\n      // as at original contract was used\\r\\n      // mainnet: UniSwap OracleMainnet_old.sol:641\\r\\n      // bsc: Pancake OracleBSC_old.sol:449\\r\\n    } else {\\r\\n      uint256 pricingTokenPrice;\\r\\n      (address swap, address pricingToken, address pricingPool) = getLargestPool(token,pricingTokens);\\r\\n      priceVsPricingToken = SwapBase(swap).getPriceVsToken(token, pricingToken, pricingPool);\\r\\n//      pricingTokenPrice = (pricingToken == definedOutputToken())? ONE : SwapBase(swap).getPriceVsToken(pricingToken,definedOutputToken(),pricingPool);\\r\\n      // Like in original contract we use UniSwap - it must be first swap at the list (swaps[0])\\r\\n      // See OracleMainnet_old.js:634, OracleBSC_old.sol:458\\r\\n      //TODO improve this part?\\r\\n      pricingTokenPrice = (pricingToken == definedOutputToken())? ONE : SwapBase(swaps[0]).getPriceVsToken(pricingToken,definedOutputToken(),pricingPool);\\r\\n      price = priceVsPricingToken*pricingTokenPrice/ONE;\\r\\n    }\\r\\n    return price;\\r\\n  }\\r\\n\\r\\n  //Checks if a given token is in the keyTokens list.\\r\\n  function addressInArray(address adr, address[] storage array) internal view returns (bool) {\\r\\n    for (uint i=0; i<array.length; i++)\\r\\n      if (adr == array[i]) return true;\\r\\n\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  //Checks if a given token is in the pricingTokens list.\\r\\n  function checkPricingToken(address token) public view returns (bool) {\\r\\n    return addressInArray(token, pricingTokens);\\r\\n  }\\r\\n\\r\\n  //Checks if a given token is in the keyTokens list.\\r\\n  function checkKeyToken(address token) public view returns (bool) {\\r\\n    return addressInArray(token, keyTokens);\\r\\n  }\\r\\n\\r\\n  //Checks if a given token is in the swaps list.\\r\\n  function checkSwap(address swap) public view returns (bool) {\\r\\n    return addressInArray(swap, swaps);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/SwapBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nabstract contract SwapBase {\\r\\n\\r\\n  using Address for address;\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  uint256 public constant PRECISION_DECIMALS = 18;\\r\\n\\r\\n  address factoryAddress;\\r\\n\\r\\n  constructor(address _factoryAddress) public {\\r\\n    require(_factoryAddress!=address(0), \\\"Factory must be set\\\");\\r\\n    factoryAddress = _factoryAddress;\\r\\n    initializeFactory();\\r\\n  }\\r\\n\\r\\n  function initializeFactory() internal virtual;\\r\\n\\r\\n  /// @dev Check what token is pool of this Swap\\r\\n  function isPool(address token) public virtual view returns(bool);\\r\\n\\r\\n  /// @dev Get underlying tokens and amounts\\r\\n  function getUnderlying(address token) public virtual view returns (address[] memory, uint256[] memory);\\r\\n\\r\\n  /// @dev Gives a pool with largest liquidity for a given token and a given tokenset (either keyTokens or pricingTokens)\\r\\n  function getLargestPool(address token, address[] memory tokenList) public virtual view returns (address, address, uint256);\\r\\n  // return (largestKeyToken, largestPoolAddress, largestPoolSize);\\r\\n\\r\\n  /// @dev Generic function giving the price of a given token vs another given token\\r\\n  function getPriceVsToken(address token0, address token1, address poolAddress) public virtual view returns (uint256) ;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/UniSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"./interface/uniswap/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./interface/uniswap/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./SwapBase.sol\\\";\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ncontract UniSwap is SwapBase {\\r\\n\\r\\n  IUniswapV2Factory uniswapFactory;\\r\\n\\r\\n  constructor(address _factoryAddress) SwapBase(_factoryAddress) public {\\r\\n\\r\\n  }\\r\\n\\r\\n  function initializeFactory() internal virtual override {\\r\\n    uniswapFactory = IUniswapV2Factory(factoryAddress);\\r\\n  }\\r\\n\\r\\n  function checkFactory(IUniswapV2Pair pair, address compareFactory) internal view returns (bool) {\\r\\n    bool check;\\r\\n    try pair.factory{gas: 3000}() returns (address factory) {\\r\\n      check = (factory == compareFactory);\\r\\n    } catch {\\r\\n      check = false;\\r\\n    }\\r\\n    return check;\\r\\n  }\\r\\n\\r\\n  /// @dev Check what token is pool of this Swap\\r\\n  function isPool(address token) public virtual override view returns(bool){\\r\\n    IUniswapV2Pair pair = IUniswapV2Pair(token);\\r\\n    return checkFactory(pair, factoryAddress);\\r\\n  }\\r\\n\\r\\n  /// @dev Get underlying tokens and amounts\\r\\n  function getUnderlying(address token) public virtual override view returns (address[] memory, uint256[] memory){\\r\\n    IUniswapV2Pair pair = IUniswapV2Pair(token);\\r\\n    address[] memory tokens  = new address[](2);\\r\\n    uint256[] memory amounts = new uint256[](2);\\r\\n    tokens[0] = pair.token0();\\r\\n    tokens[1] = pair.token1();\\r\\n    uint256 token0Decimals = ERC20(tokens[0]).decimals();\\r\\n    uint256 token1Decimals = ERC20(tokens[1]).decimals();\\r\\n    uint256 supplyDecimals = ERC20(token).decimals();\\r\\n    (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\\r\\n    uint256 totalSupply = pair.totalSupply();\\r\\n    if (reserve0 == 0 || reserve1 == 0 || totalSupply == 0) {\\r\\n      amounts[0] = 0;\\r\\n      amounts[1] = 0;\\r\\n      return (tokens, amounts);\\r\\n    }\\r\\n    amounts[0] = reserve0*10**(supplyDecimals-token0Decimals+PRECISION_DECIMALS)/totalSupply;\\r\\n    amounts[1] = reserve1*10**(supplyDecimals-token1Decimals+PRECISION_DECIMALS)/totalSupply;\\r\\n    return (tokens, amounts);\\r\\n  }\\r\\n\\r\\n  /// @dev Returns pool size\\r\\n  function getPoolSize(address pairAddress, address token) internal view returns(uint256){\\r\\n    IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\\r\\n    address token0 = pair.token0();\\r\\n    (uint112 poolSize0, uint112 poolSize1,) = pair.getReserves();\\r\\n    uint256 poolSize = (token==token0)? poolSize0:poolSize1;\\r\\n    return poolSize;\\r\\n  }\\r\\n\\r\\n  /// @dev Gives a pool with largest liquidity for a given token and a given tokenset (either keyTokens or pricingTokens)\\r\\n  function getLargestPool(address token, address[] memory tokenList) public virtual override view returns (address, address, uint256){\\r\\n    uint256 largestPoolSize = 0;\\r\\n    address largestKeyToken;\\r\\n    address largestPool;\\r\\n    uint256 poolSize;\\r\\n    uint256 i;\\r\\n    for (i=0;i<tokenList.length;i++) {\\r\\n      address poolAddress = uniswapFactory.getPair(token,tokenList[i]);\\r\\n      poolSize = poolAddress !=address(0) ? getPoolSize(poolAddress, token) : 0;\\r\\n      if (poolSize > largestPoolSize) {\\r\\n        largestKeyToken = tokenList[i];\\r\\n        largestPool = poolAddress;\\r\\n        largestPoolSize = poolSize;\\r\\n      }\\r\\n    }\\r\\n    return (largestKeyToken, largestPool, largestPoolSize);\\r\\n  }\\r\\n\\r\\n  /// @dev Generic function giving the price of a given token vs another given token\\r\\n  function getPriceVsToken(address token0, address token1, address /*poolAddress*/) public virtual override view returns (uint256){\\r\\n    address pairAddress = uniswapFactory.getPair(token0,token1);\\r\\n    IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\\r\\n    (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\\r\\n    uint256 token0Decimals = ERC20(token0).decimals();\\r\\n    uint256 token1Decimals = ERC20(token1).decimals();\\r\\n    uint256 price;\\r\\n    if (token0 == pair.token0()) {\\r\\n      price = (reserve1*10**(token0Decimals-token1Decimals+PRECISION_DECIMALS))/reserve0;\\r\\n    } else {\\r\\n      price = (reserve0*10**(token0Decimals-token1Decimals+PRECISION_DECIMALS))/reserve1;\\r\\n    }\\r\\n    return price;\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/curve/ICurvePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ICurvePool {\\r\\n  function get_dy (int128 i, int128 j, uint256 dx) external view returns (uint256);\\r\\n  function get_dy_underlying (int128 i, int128 j, uint256 dx) external view returns (uint256);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/curve/ICurveRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ICurveRegistry {\\r\\n  function get_coins(address _pool) external view returns (address[8] memory);\\r\\n  function get_underlying_coins(address _pool) external view returns (address[8] memory);\\r\\n  function get_balances(address _pool) external view returns (uint256[8] memory);\\r\\n  function get_underlying_balances(address _pool) external view returns (uint256[8] memory);\\r\\n  function get_pool_from_lp_token(address _lp_token) external view returns (address);\\r\\n  function get_lp_token(address _pool) external view returns (address);\\r\\n  function pool_count() external view returns (uint256);\\r\\n  function pool_list(uint256) external view returns (address);\\r\\n  function get_decimals(address _pool) external view returns (uint256[8] memory);\\r\\n  function get_underlying_decimals(address _pool) external view returns (uint256[8] memory);\\r\\n  function get_coin_indices(address _pool, address _from, address _to) external view returns (int128, int128, bool);\\r\\n  function find_pool_for_coins(address _from, address _to, uint256 i) external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/uniswap/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n  function allPairs(uint) external view returns (address pair);\\r\\n  function allPairsLength() external view returns (uint);\\r\\n\\r\\n  function feeTo() external view returns (address);\\r\\n  function feeToSetter() external view returns (address);\\r\\n\\r\\n  function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\"\r\n    },\r\n    \"contracts/interface/uniswap/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n *Submitted for verification at Etherscan.io on 2020-05-05\\r\\n*/\\r\\n\\r\\n// File: contracts/interfaces/IUniswapV2Pair.sol\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_baseCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleBase\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newException\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exceptionList\",\"type\":\"uint256\"}],\"name\":\"CurveExceptionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldException\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exceptionList\",\"type\":\"uint256\"}],\"name\":\"CurveExceptionRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseCurrency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"curveExceptionList0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"curveExceptionList1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveRegistry\",\"outputs\":[{\"internalType\":\"contract ICurveRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"}],\"name\":\"getLargestPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"getPriceVsToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getUnderlying\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CurveSwap","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"0000000000000000000000007d86446ddb609ed0f5f8684acf30380a356b2b4c000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000001358c91d5b25d3edac2b7b26a619163d78f1717d","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}