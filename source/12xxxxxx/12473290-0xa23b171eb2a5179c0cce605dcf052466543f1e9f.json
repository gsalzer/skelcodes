{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/flashloan/Instapool/main.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { Helper } from \\\"./helpers.sol\\\";\\n\\nimport { \\n    IndexInterface,\\n    ListInterface,\\n    TokenInterface,\\n    Account,\\n    Actions,\\n    Types,\\n    ISoloMargin,\\n    ICallee,\\n    DSAInterface\\n} from \\\"./interfaces.sol\\\";\\n\\nimport { DydxFlashloanBase } from \\\"./dydxBase.sol\\\";\\n\\ncontract DydxFlashloaner is Helper, ICallee, DydxFlashloanBase {\\n    using SafeERC20 for IERC20;\\n\\n\\n    event LogFlashLoan(\\n        address indexed dsa,\\n        address token,\\n        uint256 amount,\\n        uint route\\n    );\\n\\n    event LogWhitelistSig(bytes4 indexed sig, bool whitelist);\\n\\n    /**\\n    * @dev Check if sig is whitelisted\\n    * @param _sig bytes4\\n    */\\n    function checkWhitelisted(bytes4 _sig) public view returns(bool) {\\n        return whitelistedSigs[_sig];\\n    }\\n    \\n\\n    /**\\n    * @dev Whitelists / Blacklists a given sig\\n    * @param _sigs list of sigs\\n    * @param _whitelist list of bools indicate whitelist/blacklist\\n    */\\n\\n    function whitelistSigs(bytes4[] memory _sigs, bool[] memory _whitelist) public isMaster {\\n        require(_sigs.length == _whitelist.length, \\\"arr-lengths-unequal\\\");\\n        for (uint i = 0; i < _sigs.length; i++) {\\n            require(!whitelistedSigs[_sigs[i]], \\\"already-enabled\\\");\\n            whitelistedSigs[_sigs[i]] = _whitelist[i];\\n            emit LogWhitelistSig(_sigs[i], _whitelist[i]);\\n        }\\n    }\\n\\n    \\n    function callFunction(\\n        address sender,\\n        Account.Info memory account,\\n        bytes memory data\\n    ) public override {\\n        require(sender == address(this), \\\"not-same-sender\\\");\\n        require(msg.sender == soloAddr, \\\"not-solo-dydx-sender\\\");\\n        CastData memory cd;\\n        (cd.dsa, cd.route, cd.token, cd.amount, cd.callData) = abi.decode(\\n            data,\\n            (address, uint256, address, uint256, bytes)\\n        );\\n\\n        bool isWeth = cd.route != 0 || cd.token == ethAddr;\\n        if (isWeth) {\\n            wethContract.withdraw(wethContract.balanceOf(address(this)));\\n        }\\n\\n        selectBorrow(cd.route, cd.token, cd.amount);\\n\\n        if (cd.token == ethAddr) {\\n            payable(cd.dsa).transfer(cd.amount);\\n        } else {\\n            IERC20(cd.token).safeTransfer(cd.dsa, cd.amount);\\n        }\\n\\n\\n        Address.functionCall(cd.dsa, cd.callData, \\\"DSA-flashloan-fallback-failed\\\");\\n\\n        selectPayback(cd.route, cd.token);\\n\\n        if (isWeth) {\\n            wethContract.deposit{value: address(this).balance}();\\n        }\\n    }\\n\\n    function routeDydx(address token, uint256 amount, bytes memory data) internal {\\n        uint256 _amount = amount;\\n\\n        uint256 route = 0;\\n        address _token;\\n        if (token == daiAddr) {\\n            uint256 dydxDaiAmt = daiContract.balanceOf(soloAddr);\\n            if (amount > dydxDaiAmt) {\\n                uint256 dydxWEthAmt = wethContract.balanceOf(soloAddr);\\n                route = 1;\\n                _amount = sub(dydxWEthAmt, 10000);\\n                _token = wethAddr;\\n            } else {\\n                _token = token;\\n            }\\n        } else if (token != ethAddr && token != usdcAddr) {\\n            uint256 dydxWEthAmt = wethContract.balanceOf(soloAddr);\\n            route = 2;\\n            _amount = sub(dydxWEthAmt, 10000);\\n            _token = wethAddr;\\n        } else {\\n            _token = token == ethAddr ? wethAddr : token;\\n        }\\n        \\n        IERC20 _tokenContract = IERC20(_token);\\n        uint256 _marketId = _getMarketIdFromTokenAddress(soloAddr, _token);\\n\\n        _tokenContract.approve(soloAddr, _amount + 2);\\n\\n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\\n\\n        operations[0] = _getWithdrawAction(_marketId, _amount);\\n        operations[1] = _getCallAction(encodeDsaCastData(msg.sender, route, token, amount, data));\\n        operations[2] = _getDepositAction(_marketId, _amount + 2);\\n\\n        Account.Info[] memory accountInfos = new Account.Info[](1);\\n        accountInfos[0] = _getAccountInfo();\\n\\n        uint256 initialBal = add(_tokenContract.balanceOf(address(this)), address(this).balance);\\n\\n        solo.operate(accountInfos, operations);\\n\\n        uint256 finalBal = add(_tokenContract.balanceOf(address(this)), address(this).balance);\\n\\n        if (_token == wethAddr) {\\n            uint256 _dif = wmul(_amount, 10000000000); // Taking margin of 0.00000001%\\n            require(sub(initialBal, finalBal) <= _dif, \\\"eth-amount-paid-less\\\");\\n        } else {\\n            uint256 _decimals = TokenInterface(token).decimals();\\n            uint _dif = wmul(convertTo18(_amount, _decimals), 200000000000); // Taking margin of 0.0000002%\\n            require(convertTo18(sub(initialBal, finalBal), _decimals) <= _dif, \\\"token-amount-paid-less\\\");\\n        }\\n            \\n        emit LogFlashLoan(\\n            msg.sender,\\n            token,\\n            amount,\\n            route\\n        );\\n\\n    }\\n\\n    function initiateFlashLoan(\\t\\n        address token,\\t\\n        uint256 amount,\\t\\n        bytes calldata data\\t\\n    ) external isDSA isWhitelisted(data) {\\t\\n        routeDydx(token, amount, data);\\t\\n    }\\n}\\n\\ncontract InstaPoolV2Implementation is DydxFlashloaner {\\n    function initialize(\\n        uint256 _vaultId,\\n        address _makerConnect,\\n        address _aaveV2Connect\\n    ) public {\\n        require(vaultId == 0 && makerConnect == address(0) && aaveV2Connect == address(0), \\\"already-Initialized\\\");\\n        wethContract.approve(wethAddr, uint256(-1));\\n        vaultId = _vaultId;\\n        makerConnect = _makerConnect;\\n        aaveV2Connect = _aaveV2Connect;\\n    }\\n\\n    receive() external payable {}\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/flashloan/Instapool/helpers.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { \\n    IndexInterface,\\n    ListInterface,\\n    TokenInterface,\\n    Account,\\n    Actions,\\n    Types,\\n    ISoloMargin\\n} from \\\"./interfaces.sol\\\";\\n\\nimport { DSMath } from \\\"../../common/math.sol\\\";\\n\\nimport {Variables} from \\\"./variables.sol\\\";\\n\\n\\ncontract Setup is Variables {\\n    IndexInterface public constant instaIndex = IndexInterface(0x2971AdFa57b20E5a416aE5a708A8655A9c74f723);\\n    ListInterface public constant instaList = ListInterface(0x4c8a1BEb8a87765788946D6B19C6C6355194AbEb);\\n\\n    address public constant soloAddr = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\\n    address public constant wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address public constant ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address public constant daiAddr = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address public constant usdcAddr = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    \\n    TokenInterface constant wethContract = TokenInterface(wethAddr);\\n    TokenInterface constant daiContract = TokenInterface(daiAddr);\\n    TokenInterface constant usdcContract = TokenInterface(usdcAddr);\\n    ISoloMargin constant solo = ISoloMargin(soloAddr);\\n\\n    /**\\n    * @dev modifier to check if msg.sender is a master \\n    */\\n    modifier isMaster() {\\n        require(msg.sender == instaIndex.master(), \\\"not-master\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Converts the encoded data to sig.\\n    * @param data encoded data\\n    */\\n    function convertDataToSig(bytes memory data) internal pure returns(bytes4 sig) {\\n        bytes memory _data = data;\\n        assembly {\\n            sig := mload(add(_data, 32))\\n        } \\n    }\\n\\n    /**\\n    * @dev modifier to check if data's sig is whitelisted\\n    */\\n    modifier isWhitelisted(bytes memory _data) {\\n        require(whitelistedSigs[convertDataToSig(_data)], \\\"sig-not-whitelisted\\\");\\n        _;\\n    }\\n\\n    /**\\n     * FOR SECURITY PURPOSE\\n     * only Smart DEFI Account can access the liquidity pool contract\\n     */\\n    modifier isDSA {\\n        uint64 id = instaList.accountID(msg.sender);\\n        require(id != 0, \\\"not-dsa-id\\\");\\n        _;\\n    }\\n\\n    struct CastData {\\n        address dsa;\\n        uint route;\\n        address token;\\n        uint256 amount;\\n        bytes callData;\\n    }\\n}\\n\\ncontract Helper is Setup, DSMath {\\n    function convertTo18(uint256 _amt, uint _dec) internal pure returns (uint256 amt) {\\n        amt = mul(_amt, 10 ** (18 - _dec));\\n    }\\n\\n    function encodeDsaCastData(\\n        address dsa,\\n        uint route,\\n        address token,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal pure returns (bytes memory _data) {\\n        _data = abi.encode(dsa, route, token, amount, data);\\n    }\\n\\n    function spell(address _target, bytes memory _data) internal {\\n        require(_target != address(0), \\\"target-invalid\\\");\\n        assembly {\\n        let succeeded := delegatecall(gas(), _target, add(_data, 0x20), mload(_data), 0, 0)\\n        switch iszero(succeeded)\\n            case 1 {\\n                let size := returndatasize()\\n                returndatacopy(0x00, 0x00, size)\\n                revert(0x00, size)\\n            }\\n        }\\n    }\\n\\n    function masterSpell(address _target, bytes calldata _data) external isMaster {\\n        spell(_target, _data);\\n    }\\n\\n    function selectBorrow(uint256 route, address token, uint256 amt) internal {\\n        if (route == 0) {\\n            return;\\n        } else if (route == 1) {\\n            bytes memory _dataOne = abi.encodeWithSignature(\\\"deposit(uint256,uint256)\\\", vaultId, uint256(-1));\\n            bytes memory _dataTwo = abi.encodeWithSignature(\\\"borrow(uint256,uint256)\\\", vaultId, amt);\\n            spell(makerConnect, _dataOne);\\n            spell(makerConnect, _dataTwo);\\n        } else if (route == 2) {\\n            bytes memory _dataOne = abi.encodeWithSignature(\\\"deposit(address,uint256)\\\", ethAddr, uint256(-1));\\n            bytes memory _dataTwo = abi.encodeWithSignature(\\\"borrow(address,uint256,uint256)\\\", token, amt, 2);\\n            spell(aaveV2Connect, _dataOne);\\n            spell(aaveV2Connect, _dataTwo);\\n        } else {\\n            revert(\\\"route-not-found\\\");\\n        }\\n    }\\n\\n    function selectPayback(uint256 route, address token) internal {\\n        if (route == 0) {\\n            return;\\n        } else if (route == 1) {\\n            bytes memory _dataOne = abi.encodeWithSignature(\\\"payback(uint256,uint256)\\\", vaultId, uint256(-1));\\n            bytes memory _dataTwo = abi.encodeWithSignature(\\\"withdraw(uint256,uint256)\\\", vaultId, uint256(-1));\\n            spell(makerConnect, _dataOne);\\n            spell(makerConnect, _dataTwo);\\n        } else if (route == 2) {\\n            bytes memory _dataOne = abi.encodeWithSignature(\\\"payback(address,uint256,uint256)\\\", token, uint256(-1), 2);\\n            bytes memory _dataTwo = abi.encodeWithSignature(\\\"withdraw(address,uint256)\\\", ethAddr, uint256(-1));\\n            spell(aaveV2Connect, _dataOne);\\n            spell(aaveV2Connect, _dataTwo);\\n        } else {\\n            revert(\\\"route-not-found\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/flashloan/Instapool/interfaces.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface DSAInterface {\\n    function flashCallback(\\n        address sender,\\n        address token,\\n        uint256 amount,\\n        string[] calldata _targetNames,\\n        bytes[] calldata _datas,\\n        address _origin\\n    ) external;\\n}\\n\\ninterface IndexInterface {\\n    function master() external view returns (address);\\n}\\n\\ninterface ListInterface {\\n    function accountID(address) external view returns (uint64);\\n}\\n\\ninterface TokenInterface {\\n    function approve(address, uint256) external;\\n\\n    function transfer(address, uint256) external;\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function decimals() external view returns (uint256);\\n}\\n\\ninterface Account {\\n    struct Info {\\n        address owner; // The address that owns the account\\n        uint256 number; // A nonce that allows a single address to control many accounts\\n    }\\n}\\n\\ninterface Actions {\\n    enum ActionType {\\n        Deposit, // supply tokens\\n        Withdraw, // borrow tokens\\n        Transfer, // transfer balance between accounts\\n        Buy, // buy an amount of some token (publicly)\\n        Sell, // sell an amount of some token (publicly)\\n        Trade, // trade tokens against another account\\n        Liquidate, // liquidate an undercollateralized or expiring account\\n        Vaporize, // use excess tokens to zero-out a completely negative account\\n        Call // send arbitrary data to an address\\n    }\\n\\n    struct ActionArgs {\\n        ActionType actionType;\\n        uint256 accountId;\\n        Types.AssetAmount amount;\\n        uint256 primaryMarketId;\\n        uint256 secondaryMarketId;\\n        address otherAddress;\\n        uint256 otherAccountId;\\n        bytes data;\\n    }\\n\\n    struct DepositArgs {\\n        Types.AssetAmount amount;\\n        Account.Info account;\\n        uint256 market;\\n        address from;\\n    }\\n\\n    struct WithdrawArgs {\\n        Types.AssetAmount amount;\\n        Account.Info account;\\n        uint256 market;\\n        address to;\\n    }\\n\\n    struct CallArgs {\\n        Account.Info account;\\n        address callee;\\n        bytes data;\\n    }\\n}\\n\\ninterface Types {\\n    enum AssetDenomination {\\n        Wei, // the amount is denominated in wei\\n        Par // the amount is denominated in par\\n    }\\n\\n    enum AssetReference {\\n        Delta, // the amount is given as a delta from the current value\\n        Target // the amount is given as an exact number to end up at\\n    }\\n\\n    struct AssetAmount {\\n        bool sign; // true if positive\\n        AssetDenomination denomination;\\n        AssetReference ref;\\n        uint256 value;\\n    }\\n\\n    struct Wei {\\n        bool sign; // true if positive\\n        uint256 value;\\n    }\\n}\\n\\ninterface ISoloMargin {\\n    struct OperatorArg {\\n        address operator;\\n        bool trusted;\\n    }\\n\\n    function getMarketTokenAddress(uint256 marketId)\\n        external\\n        view\\n        returns (address);\\n\\n    function getNumMarkets() external view returns (uint256);\\n\\n    function operate(\\n        Account.Info[] calldata accounts,\\n        Actions.ActionArgs[] calldata actions\\n    ) external;\\n\\n    function getAccountWei(Account.Info calldata account, uint256 marketId)\\n        external\\n        view\\n        returns (Types.Wei memory);\\n}\\n\\n/**\\n * @title ICallee\\n * @author dYdX\\n *\\n * Interface that Callees for Solo must implement in order to ingest data.\\n */\\ninterface ICallee {\\n    // ============ Public Functions ============\\n\\n    /**\\n     * Allows users to send this contract arbitrary data.\\n     *\\n     * @param  sender       The msg.sender to Solo\\n     * @param  accountInfo  The account from which the data is being sent\\n     * @param  data         Arbitrary data given by the sender\\n     */\\n    function callFunction(\\n        address sender,\\n        Account.Info calldata accountInfo,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/flashloan/Instapool/dydxBase.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport { Account, Actions, Types, ISoloMargin } from \\\"./interfaces.sol\\\";\\n\\ncontract DydxFlashloanBase {\\n    function _getMarketIdFromTokenAddress(address _solo, address token)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        ISoloMargin solo = ISoloMargin(_solo);\\n\\n        uint256 numMarkets = solo.getNumMarkets();\\n\\n        address curToken;\\n        for (uint256 i = 0; i < numMarkets; i++) {\\n            curToken = solo.getMarketTokenAddress(i);\\n\\n            if (curToken == token) {\\n                return i;\\n            }\\n        }\\n\\n        revert(\\\"No marketId found for provided token\\\");\\n    }\\n\\n    function _getAccountInfo() internal view returns (Account.Info memory) {\\n        return Account.Info({owner: address(this), number: 1});\\n    }\\n\\n    function _getWithdrawAction(uint marketId, uint256 amount)\\n        internal\\n        view\\n        returns (Actions.ActionArgs memory)\\n    {\\n        return\\n            Actions.ActionArgs({\\n                actionType: Actions.ActionType.Withdraw,\\n                accountId: 0,\\n                amount: Types.AssetAmount({\\n                    sign: false,\\n                    denomination: Types.AssetDenomination.Wei,\\n                    ref: Types.AssetReference.Delta,\\n                    value: amount\\n                }),\\n                primaryMarketId: marketId,\\n                secondaryMarketId: 0,\\n                otherAddress: address(this),\\n                otherAccountId: 0,\\n                data: \\\"\\\"\\n            });\\n    }\\n\\n    function _getCallAction(bytes memory data)\\n        internal\\n        view\\n        returns (Actions.ActionArgs memory)\\n    {\\n        return\\n            Actions.ActionArgs({\\n                actionType: Actions.ActionType.Call,\\n                accountId: 0,\\n                amount: Types.AssetAmount({\\n                    sign: false,\\n                    denomination: Types.AssetDenomination.Wei,\\n                    ref: Types.AssetReference.Delta,\\n                    value: 0\\n                }),\\n                primaryMarketId: 0,\\n                secondaryMarketId: 0,\\n                otherAddress: address(this),\\n                otherAccountId: 0,\\n                data: data\\n            });\\n    }\\n\\n    function _getDepositAction(uint marketId, uint256 amount)\\n        internal\\n        view\\n        returns (Actions.ActionArgs memory)\\n    {\\n        return\\n            Actions.ActionArgs({\\n                actionType: Actions.ActionType.Deposit,\\n                accountId: 0,\\n                amount: Types.AssetAmount({\\n                    sign: true,\\n                    denomination: Types.AssetDenomination.Wei,\\n                    ref: Types.AssetReference.Delta,\\n                    value: amount\\n                }),\\n                primaryMarketId: marketId,\\n                secondaryMarketId: 0,\\n                otherAddress: address(this),\\n                otherAccountId: 0,\\n                data: \\\"\\\"\\n            });\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/math.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract DSMath {\\n    uint constant WAD = 10 ** 18;\\n    uint constant RAY = 10 ** 27;\\n\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        z = SafeMath.add(x, y);\\n    }\\n\\n    function sub(uint x, uint y) internal virtual pure returns (uint z) {\\n        z = SafeMath.sub(x, y);\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        z = SafeMath.mul(x, y);\\n    }\\n\\n    function div(uint x, uint y) internal pure returns (uint z) {\\n        z = SafeMath.div(x, y);\\n    }\\n\\n    function wmul(uint x, uint y) internal pure returns (uint z) {\\n        z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\\n    }\\n\\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\\n    }\\n\\n    function rmul(uint x, uint y) internal pure returns (uint z) {\\n        z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    function toInt(uint x) internal pure returns (int y) {\\n        y = int(x);\\n        require(y >= 0, \\\"int-overflow\\\");\\n    }\\n\\n    function toRad(uint wad) internal pure returns (uint rad) {\\n        rad = mul(wad, 10 ** 27);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/flashloan/Instapool/variables.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\ncontract Variables {\\n    // Maker connector\\n    address public makerConnect;\\n\\n    // AaveV2 connector\\n    address public aaveV2Connect;\\n\\n    // Maker ETH-A Vault ID\\n    uint256 public vaultId;\\n\\n    // Whitelisted Sigs;\\n    mapping (bytes4 => bool) public whitelistedSigs;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dsa\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"route\",\"type\":\"uint256\"}],\"name\":\"LogFlashLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelist\",\"type\":\"bool\"}],\"name\":\"LogWhitelistSig\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"aaveV2Connect\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"internalType\":\"struct Account.Info\",\"name\":\"account\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_sig\",\"type\":\"bytes4\"}],\"name\":\"checkWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_makerConnect\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveV2Connect\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initiateFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instaIndex\",\"outputs\":[{\"internalType\":\"contract IndexInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instaList\",\"outputs\":[{\"internalType\":\"contract ListInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makerConnect\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"masterSpell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soloAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"_sigs\",\"type\":\"bytes4[]\"},{\"internalType\":\"bool[]\",\"name\":\"_whitelist\",\"type\":\"bool[]\"}],\"name\":\"whitelistSigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"whitelistedSigs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"InstaPoolV2Implementation","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}