{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.3.0 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.1.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/libs/TransferHelper.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/ICoFiXVaultForStaking.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev This interface defines methods for CoFiXVaultForStaking\r\ninterface ICoFiXVaultForStaking {\r\n\r\n    /// @dev Modify configuration\r\n    /// @param cofiUnit CoFi mining unit\r\n    function setConfig(uint cofiUnit) external;\r\n\r\n    /// @dev Get configuration\r\n    /// @return cofiUnit CoFi mining unit\r\n    function getConfig() external view returns (uint cofiUnit);\r\n\r\n    /// @dev Initialize ore drawing weight\r\n    /// @param xtokens xtoken array\r\n    /// @param weights weight array\r\n    function batchSetPoolWeight(address[] calldata xtokens, uint[] calldata weights) external;\r\n\r\n    /// @dev Get total staked amount of xtoken\r\n    /// @param xtoken xtoken address (or CNode address)\r\n    /// @return totalStaked Total lock volume of target xtoken\r\n    /// @return cofiPerBlock Mining speed, cofi per block\r\n    function getChannelInfo(address xtoken) external view returns (uint totalStaked, uint cofiPerBlock);\r\n\r\n    /// @dev Get staked amount of target address\r\n    /// @param xtoken xtoken address (or CNode address)\r\n    /// @param addr Target address\r\n    /// @return Staked amount of target address\r\n    function balanceOf(address xtoken, address addr) external view returns (uint);\r\n\r\n    /// @dev Get the number of CoFi to be collected by the target address on the designated transaction pair lock\r\n    /// @param xtoken xtoken address (or CNode address)\r\n    /// @param addr Target address\r\n    /// @return The number of CoFi to be collected by the target address on the designated transaction lock\r\n    function earned(address xtoken, address addr) external view returns (uint);\r\n\r\n    /// @dev Stake xtoken to earn CoFi, this method is only for CoFiXRouter\r\n    /// @param xtoken xtoken address (or CNode address)\r\n    /// @param to Target address\r\n    /// @param amount Stake amount\r\n    function routerStake(address xtoken, address to, uint amount) external;\r\n    \r\n    /// @dev Stake xtoken to earn CoFi\r\n    /// @param xtoken xtoken address (or CNode address)\r\n    /// @param amount Stake amount\r\n    function stake(address xtoken, uint amount) external;\r\n\r\n    /// @dev Withdraw xtoken, and claim earned CoFi\r\n    /// @param xtoken xtoken address (or CNode address)\r\n    /// @param amount Withdraw amount\r\n    function withdraw(address xtoken, uint amount) external;\r\n\r\n    /// @dev Claim CoFi\r\n    /// @param xtoken xtoken address (or CNode address)\r\n    function getReward(address xtoken) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/ICoFiXRouter.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev This interface defines methods for CoFiXRouter\r\ninterface ICoFiXRouter {\r\n\r\n    /// @dev Register trade pair\r\n    /// @param token0 pair-token0. 0 address means eth\r\n    /// @param token1 pair-token1. 0 address means eth\r\n    /// @param pool Pool for the trade pair\r\n    function registerPair(address token0, address token1, address pool) external;\r\n\r\n    /// @dev Get pool address for trade pair\r\n    /// @param token0 pair-token0. 0 address means eth\r\n    /// @param token1 pair-token1. 0 address means eth\r\n    /// @return pool Pool for the trade pair\r\n    function pairFor(address token0, address token1) external view returns (address pool);\r\n\r\n    /// @dev Register routing path\r\n    /// @param src Src token address\r\n    /// @param dest Dest token address\r\n    /// @param path Routing path\r\n    function registerRouterPath(address src, address dest, address[] calldata path) external;\r\n\r\n    /// @dev Get routing path from src token address to dest token address\r\n    /// @param src Src token address\r\n    /// @param dest Dest token address\r\n    /// @return path If success, return the routing path, \r\n    /// each address in the array represents the token address experienced during the trading\r\n    function getRouterPath(address src, address dest) external view returns (address[] memory path);\r\n\r\n    /// @dev Maker add liquidity to pool, get pool token (mint XToken to maker) \r\n    /// (notice: msg.value = amountETH + oracle fee)\r\n    /// @param  pool The address of pool\r\n    /// @param  token The address of ERC20 Token\r\n    /// @param  amountETH The amount of ETH added to pool. (When pool is AnchorPool, amountETH is 0)\r\n    /// @param  amountToken The amount of Token added to pool\r\n    /// @param  liquidityMin The minimum liquidity maker wanted\r\n    /// @param  to The target address receiving the liquidity pool (XToken)\r\n    /// @param  deadline The deadline of this request\r\n    /// @return xtoken The liquidity share token address obtained\r\n    /// @return liquidity The real liquidity or XToken minted from pool\r\n    function addLiquidity(\r\n        address pool,\r\n        address token,\r\n        uint amountETH,\r\n        uint amountToken,\r\n        uint liquidityMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (address xtoken, uint liquidity);\r\n\r\n    /// @dev Maker add liquidity to pool, get pool token (mint XToken) and stake automatically \r\n    /// (notice: msg.value = amountETH + oracle fee)\r\n    /// @param  pool The address of pool\r\n    /// @param  token The address of ERC20 Token\r\n    /// @param  amountETH The amount of ETH added to pool. (When pool is AnchorPool, amountETH is 0)\r\n    /// @param  amountToken The amount of Token added to pool\r\n    /// @param  liquidityMin The minimum liquidity maker wanted\r\n    /// @param  to The target address receiving the liquidity pool (XToken)\r\n    /// @param  deadline The deadline of this request\r\n    /// @return xtoken The liquidity share token address obtained\r\n    /// @return liquidity The real liquidity or XToken minted from pool\r\n    function addLiquidityAndStake(\r\n        address pool,\r\n        address token,\r\n        uint amountETH,\r\n        uint amountToken,\r\n        uint liquidityMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (address xtoken, uint liquidity);\r\n\r\n    /// @dev Maker remove liquidity from pool to get ERC20 Token and ETH back (maker burn XToken) \r\n    /// (notice: msg.value = oracle fee)\r\n    /// @param  pool The address of pool\r\n    /// @param  token The address of ERC20 Token\r\n    /// @param  liquidity The amount of liquidity (XToken) sent to pool, or the liquidity to remove\r\n    /// @param  amountETHMin The minimum amount of ETH wanted to get from pool\r\n    /// @param  to The target address receiving the Token\r\n    /// @param  deadline The deadline of this request\r\n    /// @return amountETH The real amount of ETH transferred from the pool\r\n    /// @return amountToken The real amount of Token transferred from the pool\r\n    function removeLiquidityGetTokenAndETH(\r\n        address pool,\r\n        address token,\r\n        uint liquidity,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountETH, uint amountToken);\r\n\r\n    /// @dev Swap exact tokens for tokens\r\n    /// @param  path Routing path. If you need to exchange through multi-level routes, you need to write down all \r\n    /// token addresses (ETH address is represented by 0) of the exchange path\r\n    /// @param  amountIn The exact amount of Token a trader want to swap into pool\r\n    /// @param  amountOutMin The minimum amount of ETH a trader want to swap out of pool\r\n    /// @param  to The target address receiving the ETH\r\n    /// @param  rewardTo The target address receiving the CoFi Token as rewards\r\n    /// @param  deadline The deadline of this request\r\n    /// @return amountOut The real amount of Token transferred out of pool\r\n    function swapExactTokensForTokens(\r\n        address[] calldata path,\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address to,\r\n        address rewardTo,\r\n        uint deadline\r\n    ) external payable returns (uint amountOut);\r\n\r\n    /// @dev Acquire the transaction mining share of the target XToken\r\n    /// @param xtoken The destination XToken address\r\n    /// @return Target XToken's transaction mining share\r\n    function getTradeReward(address xtoken) external view returns (uint);\r\n}\r\n\r\n\r\n// File contracts/interfaces/ICoFiXDAO.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev This interface defines the DAO methods\r\ninterface ICoFiXDAO {\r\n\r\n    /// @dev Application Flag Changed event\r\n    /// @param addr DAO application contract address\r\n    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    event ApplicationChanged(address addr, uint flag);\r\n    \r\n    /// @dev Configuration structure of CoFiXDAO contract\r\n    struct Config {\r\n        // Redeem status, 1 means normal\r\n        uint8 status;\r\n\r\n        // The number of CoFi redeem per block. 100\r\n        uint16 cofiPerBlock;\r\n\r\n        // The maximum number of CoFi in a single redeem. 30000\r\n        uint32 cofiLimit;\r\n\r\n        // Price deviation limit, beyond this upper limit stop redeem (10000 based). 1000\r\n        uint16 priceDeviationLimit;\r\n    }\r\n\r\n    /// @dev Modify configuration\r\n    /// @param config Configuration object\r\n    function setConfig(Config calldata config) external;\r\n\r\n    /// @dev Get configuration\r\n    /// @return Configuration object\r\n    function getConfig() external view returns (Config memory);\r\n\r\n    /// @dev Set DAO application\r\n    /// @param addr DAO application contract address\r\n    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    function setApplication(address addr, uint flag) external;\r\n\r\n    /// @dev Check DAO application flag\r\n    /// @param addr DAO application contract address\r\n    /// @return Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    function checkApplication(address addr) external view returns (uint);\r\n\r\n    /// @dev Set the exchange relationship between the token and the price of the anchored target currency.\r\n    /// For example, set USDC to anchor usdt, because USDC is 18 decimal places and usdt is 6 decimal places. \r\n    /// so exchange = 1e6 * 1 ether / 1e18 = 1e6\r\n    /// @param token Address of origin token\r\n    /// @param target Address of target anchor token\r\n    /// @param exchange Exchange rate of token and target\r\n    function setTokenExchange(address token, address target, uint exchange) external;\r\n\r\n    /// @dev Get the exchange relationship between the token and the price of the anchored target currency.\r\n    /// For example, set USDC to anchor usdt, because USDC is 18 decimal places and usdt is 6 decimal places. \r\n    /// so exchange = 1e6 * 1 ether / 1e18 = 1e6\r\n    /// @param token Address of origin token\r\n    /// @return target Address of target anchor token\r\n    /// @return exchange Exchange rate of token and target\r\n    function getTokenExchange(address token) external view returns (address target, uint exchange);\r\n\r\n    /// @dev Add reward\r\n    /// @param pool Destination pool\r\n    function addETHReward(address pool) external payable;\r\n\r\n    /// @dev The function returns eth rewards of specified pool\r\n    /// @param pool Destination pool\r\n    function totalETHRewards(address pool) external view returns (uint);\r\n\r\n    /// @dev Settlement\r\n    /// @param pool Destination pool. Indicates which pool to pay with\r\n    /// @param tokenAddress Token address of receiving funds (0 means ETH)\r\n    /// @param to Address to receive\r\n    /// @param value Amount to receive\r\n    function settle(address pool, address tokenAddress, address to, uint value) external payable;\r\n\r\n    /// @dev Redeem CoFi for ethers\r\n    /// @notice Eth fee will be charged\r\n    /// @param amount The amount of CoFi\r\n    /// @param payback As the charging fee may change, it is suggested that the caller pay more fees, \r\n    /// and the excess fees will be returned through this address\r\n    function redeem(uint amount, address payback) external payable;\r\n\r\n    /// @dev Redeem CoFi for Token\r\n    /// @notice Eth fee will be charged\r\n    /// @param token The target token\r\n    /// @param amount The amount of CoFi\r\n    /// @param payback As the charging fee may change, it is suggested that the caller pay more fees, \r\n    /// and the excess fees will be returned through this address\r\n    function redeemToken(address token, uint amount, address payback) external payable;\r\n\r\n    /// @dev Get the current amount available for repurchase\r\n    function quotaOf() external view returns (uint);\r\n}\r\n\r\n\r\n// File contracts/interfaces/ICoFiXMapping.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev The interface defines methods for CoFiX builtin contract address mapping\r\ninterface ICoFiXMapping {\r\n\r\n    /// @dev Set the built-in contract address of the system\r\n    /// @param cofiToken Address of CoFi token contract\r\n    /// @param cofiNode Address of CoFi Node contract\r\n    /// @param cofixDAO ICoFiXDAO implementation contract address\r\n    /// @param cofixRouter ICoFiXRouter implementation contract address for CoFiX\r\n    /// @param cofixController ICoFiXController implementation contract address\r\n    /// @param cofixVaultForStaking ICoFiXVaultForStaking implementation contract address\r\n    function setBuiltinAddress(\r\n        address cofiToken,\r\n        address cofiNode,\r\n        address cofixDAO,\r\n        address cofixRouter,\r\n        address cofixController,\r\n        address cofixVaultForStaking\r\n    ) external;\r\n\r\n    /// @dev Get the built-in contract address of the system\r\n    /// @return cofiToken Address of CoFi token contract\r\n    /// @return cofiNode Address of CoFi Node contract\r\n    /// @return cofixDAO ICoFiXDAO implementation contract address\r\n    /// @return cofixRouter ICoFiXRouter implementation contract address for CoFiX\r\n    /// @return cofixController ICoFiXController implementation contract address\r\n    function getBuiltinAddress() external view returns (\r\n        address cofiToken,\r\n        address cofiNode,\r\n        address cofixDAO,\r\n        address cofixRouter,\r\n        address cofixController,\r\n        address cofixVaultForStaking\r\n    );\r\n\r\n    /// @dev Get address of CoFi token contract\r\n    /// @return Address of CoFi Node token contract\r\n    function getCoFiTokenAddress() external view returns (address);\r\n\r\n    /// @dev Get address of CoFi Node contract\r\n    /// @return Address of CoFi Node contract\r\n    function getCoFiNodeAddress() external view returns (address);\r\n\r\n    /// @dev Get ICoFiXDAO implementation contract address\r\n    /// @return ICoFiXDAO implementation contract address\r\n    function getCoFiXDAOAddress() external view returns (address);\r\n\r\n    /// @dev Get ICoFiXRouter implementation contract address for CoFiX\r\n    /// @return ICoFiXRouter implementation contract address for CoFiX\r\n    function getCoFiXRouterAddress() external view returns (address);\r\n\r\n    /// @dev Get ICoFiXController implementation contract address\r\n    /// @return ICoFiXController implementation contract address\r\n    function getCoFiXControllerAddress() external view returns (address);\r\n\r\n    /// @dev Get ICoFiXVaultForStaking implementation contract address\r\n    /// @return ICoFiXVaultForStaking implementation contract address\r\n    function getCoFiXVaultForStakingAddress() external view returns (address);\r\n\r\n    /// @dev Registered address. The address registered here is the address accepted by CoFiX system\r\n    /// @param key The key\r\n    /// @param addr Destination address. 0 means to delete the registration information\r\n    function registerAddress(string calldata key, address addr) external;\r\n\r\n    /// @dev Get registered address\r\n    /// @param key The key\r\n    /// @return Destination address. 0 means empty\r\n    function checkAddress(string calldata key) external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/interfaces/ICoFiXGovernance.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev This interface defines the governance methods\r\ninterface ICoFiXGovernance is ICoFiXMapping {\r\n\r\n    /// @dev Set governance authority\r\n    /// @param addr Destination address\r\n    /// @param flag Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function setGovernance(address addr, uint flag) external;\r\n\r\n    /// @dev Get governance rights\r\n    /// @param addr Destination address\r\n    /// @return Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function getGovernance(address addr) external view returns (uint);\r\n\r\n    /// @dev Check whether the target address has governance rights for the given target\r\n    /// @param addr Destination address\r\n    /// @param flag Permission weight. The permission of the target address must be greater than this weight \r\n    /// to pass the check\r\n    /// @return True indicates permission\r\n    function checkGovernance(address addr, uint flag) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/CoFiXBase.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n// Router contract to interact with each CoFiXPair, no owner or governance\r\n/// @dev Base contract of CoFiX\r\ncontract CoFiXBase {\r\n\r\n    // Address of CoFiToken contract\r\n    address constant COFI_TOKEN_ADDRESS = 0x1a23a6BfBAdB59fa563008c0fB7cf96dfCF34Ea1;\r\n\r\n    // Address of CoFiNode contract\r\n    address constant CNODE_TOKEN_ADDRESS = 0x558201DC4741efc11031Cdc3BC1bC728C23bF512;\r\n\r\n    // Genesis block number of CoFi\r\n    // CoFiToken contract is created at block height 11040156. However, because the mining algorithm of CoFiX1.0\r\n    // is different from that at present, a new mining algorithm is adopted from CoFiX2.1. The new algorithm\r\n    // includes the attenuation logic according to the block. Therefore, it is necessary to trace the block\r\n    // where the CoFi begins to decay. According to the circulation when CoFi2.0 is online, the new mining\r\n    // algorithm is used to deduce and convert the CoFi, and the new algorithm is used to mine the CoFiX2.1\r\n    // on-line flow, the actual block is 11040688\r\n    uint constant COFI_GENESIS_BLOCK = 11040688;\r\n\r\n    /// @dev ICoFiXGovernance implementation contract address\r\n    address public _governance;\r\n\r\n    /// @dev To support open-zeppelin/upgrades\r\n    /// @param governance ICoFiXGovernance implementation contract address\r\n    function initialize(address governance) virtual public {\r\n        require(_governance == address(0), \"CoFiX:!initialize\");\r\n        _governance = governance;\r\n    }\r\n\r\n    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call \r\n    ///      super.update(newGovernance) when overriding, and override method without onlyGovernance\r\n    /// @param newGovernance ICoFiXGovernance implementation contract address\r\n    function update(address newGovernance) public virtual {\r\n\r\n        address governance = _governance;\r\n        require(governance == msg.sender || ICoFiXGovernance(governance).checkGovernance(msg.sender, 0), \"CoFiX:!gov\");\r\n        _governance = newGovernance;\r\n    }\r\n\r\n    /// @dev Migrate funds from current contract to CoFiXDAO\r\n    /// @param tokenAddress Destination token address.(0 means eth)\r\n    /// @param value Migrate amount\r\n    function migrate(address tokenAddress, uint value) external onlyGovernance {\r\n\r\n        address to = ICoFiXGovernance(_governance).getCoFiXDAOAddress();\r\n        if (tokenAddress == address(0)) {\r\n            ICoFiXDAO(to).addETHReward { value: value } (address(0));\r\n        } else {\r\n            TransferHelper.safeTransfer(tokenAddress, to, value);\r\n        }\r\n    }\r\n\r\n    //---------modifier------------\r\n\r\n    modifier onlyGovernance() {\r\n        require(ICoFiXGovernance(_governance).checkGovernance(msg.sender, 0), \"CoFiX:!gov\");\r\n        _;\r\n    }\r\n\r\n    modifier noContract() {\r\n        require(msg.sender == tx.origin, \"CoFiX:!contract\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.1.0\r\n\r\n// MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.1.0\r\n\r\n// MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.1.0\r\n\r\n// MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The defaut value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n// File contracts/CoFiToken.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n// CoFiToken with Governance. It offers possibilities to adopt off-chain gasless governance infra.\r\ncontract CoFiToken is ERC20(\"CoFi Token\", \"CoFi\") {\r\n\r\n    address public governance;\r\n    mapping (address => bool) public minters;\r\n\r\n    // Copied and modified from SUSHI code:\r\n    // https://github.com/sushiswap/sushiswap/blob/master/contracts/SushiToken.sol\r\n    // Which is copied and modified from YAM code and COMPOUND:\r\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\r\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\r\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\r\n\r\n    /// @dev A record of each accounts delegate\r\n    mapping (address => address) internal _delegates;\r\n\r\n    /// @notice A checkpoint for marking number of votes from a given block\r\n    struct Checkpoint {\r\n        uint32 fromBlock;\r\n        uint votes;\r\n    }\r\n\r\n    /// @notice A record of votes checkpoints for each account, by index\r\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\r\n\r\n    /// @notice The number of checkpoints for each account\r\n    mapping (address => uint32) public numCheckpoints;\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint chainId,address verifyingContract)\");\r\n\r\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint nonce,uint expiry)\");\r\n\r\n    /// @notice A record of states for signing / validating signatures\r\n    mapping (address => uint) public nonces;\r\n\r\n      /// @notice An event thats emitted when an account changes its delegate\r\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n\r\n    /// @notice An event thats emitted when a delegate account's vote balance changes\r\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n\r\n    /// @dev An event thats emitted when a new governance account is set\r\n    /// @param  _new The new governance address\r\n    event NewGovernance(address _new);\r\n\r\n    /// @dev An event thats emitted when a new minter account is added\r\n    /// @param  _minter The new minter address added\r\n    event MinterAdded(address _minter);\r\n\r\n    /// @dev An event thats emitted when a minter account is removed\r\n    /// @param  _minter The minter address removed\r\n    event MinterRemoved(address _minter);\r\n\r\n    modifier onlyGovernance() {\r\n        require(msg.sender == governance, \"CoFi: !governance\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        governance = msg.sender;\r\n    }\r\n\r\n    function setGovernance(address _new) external onlyGovernance {\r\n        require(_new != address(0), \"CoFi: zero addr\");\r\n        require(_new != governance, \"CoFi: same addr\");\r\n        governance = _new;\r\n        emit NewGovernance(_new);\r\n    }\r\n\r\n    function addMinter(address _minter) external onlyGovernance {\r\n        minters[_minter] = true;\r\n        emit MinterAdded(_minter);\r\n    }\r\n\r\n    function removeMinter(address _minter) external onlyGovernance {\r\n        minters[_minter] = false;\r\n        emit MinterRemoved(_minter);\r\n    }\r\n\r\n    /// @notice mint is used to distribute CoFi token to users, minters are CoFi mining pools\r\n    function mint(address _to, uint _amount) external {\r\n        require(minters[msg.sender], \"CoFi: !minter\");\r\n        _mint(_to, _amount);\r\n        _moveDelegates(address(0), _delegates[_to], _amount);\r\n    }\r\n\r\n    /// @notice SUSHI has a vote governance bug in its token implementation, CoFi fixed it here\r\n    /// read https://blog.peckshield.com/2020/09/08/sushi/\r\n    function transfer(address _recipient, uint _amount) public override returns (bool) {\r\n        super.transfer(_recipient, _amount);\r\n        _moveDelegates(_delegates[msg.sender], _delegates[_recipient], _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice override original transferFrom to fix vote issue\r\n    function transferFrom(address _sender, address _recipient, uint _amount) public override returns (bool) {\r\n        super.transferFrom(_sender, _recipient, _amount);\r\n        _moveDelegates(_delegates[_sender], _delegates[_recipient], _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Delegate votes from `msg.sender` to `delegatee`\r\n     * @param delegator The address to get delegatee for\r\n     */\r\n    function delegates(address delegator)\r\n        external\r\n        view\r\n        returns (address)\r\n    {\r\n        return _delegates[delegator];\r\n    }\r\n\r\n   /**\r\n    * @notice Delegate votes from `msg.sender` to `delegatee`\r\n    * @param delegatee The address to delegate votes to\r\n    */\r\n    function delegate(address delegatee) external {\r\n        return _delegate(msg.sender, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates votes from signatory to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     * @param nonce The contract state required to match the signature\r\n     * @param expiry The time at which to expire the signature\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function delegateBySig(\r\n        address delegatee,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    )\r\n        external\r\n    {\r\n        bytes32 domainSeparator = keccak256(\r\n            abi.encode(\r\n                DOMAIN_TYPEHASH,\r\n                keccak256(bytes(name())),\r\n                getChainId(),\r\n                address(this)\r\n            )\r\n        );\r\n\r\n        bytes32 structHash = keccak256(\r\n            abi.encode(\r\n                DELEGATION_TYPEHASH,\r\n                delegatee,\r\n                nonce,\r\n                expiry\r\n            )\r\n        );\r\n\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                domainSeparator,\r\n                structHash\r\n            )\r\n        );\r\n\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(signatory != address(0), \"CoFi::delegateBySig: invalid signature\");\r\n        require(nonce == nonces[signatory]++, \"CoFi::delegateBySig: invalid nonce\");\r\n        require(block.timestamp <= expiry, \"CoFi::delegateBySig: signature expired\");\r\n        return _delegate(signatory, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current votes balance for `account`\r\n     * @param account The address to get votes balance\r\n     * @return The number of current votes for `account`\r\n     */\r\n    function getCurrentVotes(address account)\r\n        external\r\n        view\r\n        returns (uint)\r\n    {\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the prior number of votes for an account as of a block number\r\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n     * @param account The address of the account to check\r\n     * @param blockNumber The block number to get the vote balance at\r\n     * @return The number of votes the account had as of the given block\r\n     */\r\n    function getPriorVotes(address account, uint blockNumber)\r\n        external\r\n        view\r\n        returns (uint)\r\n    {\r\n        require(blockNumber < block.number, \"CoFi::getPriorVotes: not yet determined\");\r\n\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        if (nCheckpoints == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // First check most recent balance\r\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\r\n            return checkpoints[account][nCheckpoints - 1].votes;\r\n        }\r\n\r\n        // Next check implicit zero balance\r\n        if (checkpoints[account][0].fromBlock > blockNumber) {\r\n            return 0;\r\n        }\r\n\r\n        uint32 lower = 0;\r\n        uint32 upper = nCheckpoints - 1;\r\n        while (upper > lower) {\r\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n            Checkpoint memory cp = checkpoints[account][center];\r\n            if (cp.fromBlock == blockNumber) {\r\n                return cp.votes;\r\n            } else if (cp.fromBlock < blockNumber) {\r\n                lower = center;\r\n            } else {\r\n                upper = center - 1;\r\n            }\r\n        }\r\n        return checkpoints[account][lower].votes;\r\n    }\r\n\r\n    function _delegate(address delegator, address delegatee)\r\n        internal\r\n    {\r\n        address currentDelegate = _delegates[delegator];\r\n        uint delegatorBalance = balanceOf(delegator); // balance of underlying CoFis (not scaled);\r\n        _delegates[delegator] = delegatee;\r\n\r\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n\r\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\r\n    }\r\n\r\n    function _moveDelegates(address srcRep, address dstRep, uint amount) internal {\r\n        if (srcRep != dstRep && amount > 0) {\r\n            if (srcRep != address(0)) {\r\n                // decrease old representative\r\n                uint32 srcRepNum = numCheckpoints[srcRep];\r\n                uint srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\r\n                uint srcRepNew = srcRepOld - (amount);\r\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n            }\r\n\r\n            if (dstRep != address(0)) {\r\n                // increase new representative\r\n                uint32 dstRepNum = numCheckpoints[dstRep];\r\n                uint dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\r\n                uint dstRepNew = dstRepOld + (amount);\r\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _writeCheckpoint(\r\n        address delegatee,\r\n        uint32 nCheckpoints,\r\n        uint oldVotes,\r\n        uint newVotes\r\n    )\r\n        internal\r\n    {\r\n        uint32 blockNumber = safe32(block.number, \"CoFi::_writeCheckpoint: block number exceeds 32 bits\");\r\n\r\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\r\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n        } else {\r\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\r\n            numCheckpoints[delegatee] = nCheckpoints + 1;\r\n        }\r\n\r\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n    }\r\n\r\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\r\n    function getChainId() internal view returns (uint) {\r\n        uint chainId;\r\n        assembly { chainId := chainid() }\r\n        return chainId;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/CoFiXVaultForStaking.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev Stake xtoken or CNode, earn CoFi\r\ncontract CoFiXVaultForStaking is CoFiXBase, ICoFiXVaultForStaking {\r\n\r\n    /// @dev Account information\r\n    struct Account {\r\n        // Staked of current account\r\n        uint160 balance;\r\n        // Token dividend value mark of the unit that the account has received\r\n        uint96 rewardCursor;\r\n    }\r\n    \r\n    /// @dev Stake channel information\r\n    struct StakeChannel{\r\n\r\n        // Mining amount weight\r\n        uint cofiWeight;\r\n        // Total staked amount\r\n        uint totalStaked;\r\n\r\n        // xtoken global sign\r\n        // Total ore drawing mark of settled transaction\r\n        uint128 tradeReward;\r\n        // Total settled ore output mark\r\n        //uint128 totalReward;\r\n        // The dividend mark that the settled company token can receive\r\n        uint96 rewardPerToken;\r\n        // Settlement block mark\r\n        uint32 blockCursor;\r\n\r\n        // Accounts\r\n        // address=>balance\r\n        mapping(address=>Account) accounts;\r\n    }\r\n    \r\n    // // CoFi mining speed weight base\r\n    // uint constant COFI_WEIGHT_BASE = 1e9;\r\n\r\n    // CoFi mining unit\r\n    uint _cofiUnit;\r\n\r\n    // Address of CoFiXRouter\r\n    address _cofixRouter;\r\n    \r\n    // staking通道信息xtoken=>StakeChannel\r\n    mapping(address=>StakeChannel) _channels;\r\n    \r\n    /// @dev Create CoFiXVaultForStaking\r\n    constructor () {\r\n    }\r\n\r\n    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call \r\n    ///      super.update(newGovernance) when overriding, and override method without onlyGovernance\r\n    /// @param newGovernance ICoFiXGovernance implementation contract address\r\n    function update(address newGovernance) public override {\r\n        super.update(newGovernance);\r\n        _cofixRouter = ICoFiXGovernance(newGovernance).getCoFiXRouterAddress();\r\n    }\r\n\r\n    modifier onlyRouter() {\r\n        require(msg.sender == _cofixRouter, \"CoFiXPair: Only for CoFiXRouter\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Modify configuration\r\n    /// @param cofiUnit CoFi mining unit\r\n    function setConfig(uint cofiUnit) external override onlyGovernance {\r\n        _cofiUnit = cofiUnit;\r\n    }\r\n\r\n    /// @dev Get configuration\r\n    /// @return cofiUnit CoFi mining unit\r\n    function getConfig() external view override returns (uint cofiUnit) {\r\n        return _cofiUnit;\r\n    }\r\n\r\n    /// @dev Initialize ore drawing weight\r\n    /// @param xtokens xtoken array\r\n    /// @param weights weight array\r\n    function batchSetPoolWeight(address[] calldata xtokens, uint[] calldata weights) external override onlyGovernance {\r\n        uint cnt = xtokens.length;\r\n        require(cnt == weights.length, \"CoFiXVaultForStaking: mismatch len\");\r\n        for (uint i = 0; i < cnt; ++i) {\r\n            address xtoken = xtokens[i];\r\n            require(xtoken != address(0), \"CoFiXVaultForStaking: invalid xtoken\");\r\n            StakeChannel storage channel = _channels[xtoken] ;\r\n            _updateReward(xtoken, channel);\r\n            channel.cofiWeight = weights[i];\r\n        }\r\n    }\r\n\r\n    /// @dev Get stake channel information\r\n    /// @param xtoken xtoken address (or CNode address)\r\n    /// @return totalStaked Total lock volume of target xtoken\r\n    /// @return cofiPerBlock Mining speed, cofi per block\r\n    function getChannelInfo(address xtoken) external view override returns (uint totalStaked, uint cofiPerBlock) {\r\n        StakeChannel storage channel = _channels[xtoken];\r\n        return (channel.totalStaked, uint(channel.cofiWeight) * _cofiUnit);\r\n    }\r\n\r\n    /// @dev Get staked amount of target address\r\n    /// @param xtoken xtoken address (or CNode address)\r\n    /// @param addr Target address\r\n    /// @return Staked amount of target address\r\n    function balanceOf(address xtoken, address addr) external view override returns (uint) {\r\n        return uint(_channels[xtoken].accounts[addr].balance);\r\n    }\r\n\r\n    /// @dev Get the number of CoFi to be collected by the target address on the designated transaction pair lock\r\n    /// @param xtoken xtoken address (or CNode address)\r\n    /// @param addr Target address\r\n    /// @return The number of CoFi to be collected by the target address on the designated transaction lock\r\n    function earned(address xtoken, address addr) public view override returns (uint) {\r\n        // Load staking channel\r\n        StakeChannel storage channel = _channels[xtoken];\r\n        // Call _calcReward() to calculate new reward\r\n        uint newReward = _calcReward(channel);\r\n        \r\n        // Load account\r\n        Account memory account = channel.accounts[addr];\r\n        uint balance = uint(account.balance);\r\n        // Load total amount of staked\r\n        uint totalStaked = channel.totalStaked;\r\n        if (xtoken == CNODE_TOKEN_ADDRESS) {\r\n            // Get the cumulative share of the trading ore output of the corresponding track\r\n            newReward += ICoFiXRouter(_cofixRouter).getTradeReward(xtoken) - uint(channel.tradeReward);\r\n            // Since there are no decimal places in CNode, in order to unify the accuracy, when calculating \r\n            // the dividend of CNode unit token, the quantity is multiplied by 1 ether\r\n            //balance *= 1 ether;\r\n            //totalStaked *= 1 ether;\r\n        }\r\n\r\n        // Unit token dividend\r\n        uint rewardPerToken = _decodeFloat(channel.rewardPerToken);\r\n        if (totalStaked > 0) {\r\n            rewardPerToken += newReward * 1 ether / totalStaked;\r\n        }\r\n        \r\n        return (rewardPerToken - _decodeFloat(account.rewardCursor)) * balance / 1 ether;\r\n    }\r\n\r\n    /// @dev Stake xtoken to earn CoFi, this method is only for CoFiXRouter\r\n    /// @param xtoken xtoken address (or CNode address)\r\n    /// @param to Target address\r\n    /// @param amount Stake amount\r\n    function routerStake(address xtoken, address to, uint amount) external override onlyRouter {\r\n        // Load stake channel\r\n        StakeChannel storage channel = _channels[xtoken];\r\n        // Settle reward for account\r\n        Account memory account = _getReward(xtoken, channel, to);\r\n\r\n        // Update totalStaked\r\n        channel.totalStaked += amount;\r\n\r\n        // Update stake balance of account\r\n        account.balance = uint160(uint(account.balance) + amount);\r\n        channel.accounts[to] = account;\r\n    }\r\n\r\n    /// @dev Stake xtoken to earn CoFi\r\n    /// @param xtoken xtoken address (or CNode address)\r\n    /// @param amount Stake amount\r\n    function stake(address xtoken, uint amount) external override {\r\n        // Load stake channel\r\n        StakeChannel storage channel = _channels[xtoken];\r\n        // Settle reward for account\r\n        Account memory account = _getReward(xtoken, channel, msg.sender);\r\n\r\n        // Transfer xtoken from msg.sender to this\r\n        TransferHelper.safeTransferFrom(xtoken, msg.sender, address(this), amount);\r\n        // Update totalStaked\r\n        channel.totalStaked += amount;\r\n\r\n        // Update stake balance of account\r\n        account.balance = uint160(uint(account.balance) + amount);\r\n        channel.accounts[msg.sender] = account;\r\n    }\r\n\r\n    /// @dev Withdraw xtoken, and claim earned CoFi\r\n    /// @param xtoken xtoken address (or CNode address)\r\n    /// @param amount Withdraw amount\r\n    function withdraw(address xtoken, uint amount) external override {\r\n        // Load stake channel\r\n        StakeChannel storage channel = _channels[xtoken];\r\n        // Settle reward for account\r\n        Account memory account = _getReward(xtoken, channel, msg.sender);\r\n\r\n        // Update totalStaked\r\n        channel.totalStaked -= amount;\r\n        // Update stake balance of account\r\n        account.balance = uint160(uint(account.balance) - amount);\r\n        channel.accounts[msg.sender] = account;\r\n\r\n        // Transfer xtoken to msg.sender\r\n        TransferHelper.safeTransfer(xtoken, msg.sender, amount);\r\n    }\r\n\r\n    /// @dev Claim CoFi\r\n    /// @param xtoken xtoken address (or CNode address)\r\n    function getReward(address xtoken) external override {\r\n        StakeChannel storage channel = _channels[xtoken];\r\n        channel.accounts[msg.sender] = _getReward(xtoken, channel, msg.sender);\r\n    }\r\n\r\n    // Calculate reward, and settle the target account\r\n    function _getReward(\r\n        address xtoken, \r\n        StakeChannel storage channel, \r\n        address to\r\n    ) private returns (Account memory account) {\r\n        // Load account\r\n        account = channel.accounts[to];\r\n        // Update the global dividend information and get the new unit token dividend amount\r\n        uint rewardPerToken = _updateReward(xtoken, channel);\r\n        \r\n        // Calculate reward for account\r\n        uint balance = uint(account.balance);\r\n        // if (xtoken == CNODE_TOKEN_ADDRESS) {\r\n        //     //balance *= 1 ether;\r\n        // }\r\n        uint reward = (rewardPerToken - _decodeFloat(account.rewardCursor)) * balance / 1 ether;\r\n        \r\n        // Update sign of account\r\n        account.rewardCursor = _encodeFloat(rewardPerToken);\r\n        //channel.accounts[to] = account;\r\n\r\n        // Transfer CoFi to account\r\n        if (reward > 0) {\r\n            CoFiToken(COFI_TOKEN_ADDRESS).mint(to, reward);\r\n        }\r\n    }\r\n\r\n    // Update the global dividend information and return the new unit token dividend amount\r\n    function _updateReward(address xtoken, StakeChannel storage channel) private returns (uint rewardPerToken) {\r\n        // Call _calcReward() to calculate new reward\r\n        uint newReward = _calcReward(channel);\r\n\r\n        // Load total amount of staked\r\n        uint totalStaked = channel.totalStaked;\r\n        if (xtoken == CNODE_TOKEN_ADDRESS) {\r\n            // Obtain the cumulative share of the trading ore output of the corresponding channel\r\n            uint tradeReward = ICoFiXRouter(_cofixRouter).getTradeReward(xtoken);\r\n            newReward += tradeReward - uint(channel.tradeReward);\r\n            channel.tradeReward = uint128(tradeReward);\r\n            // Since there are no decimal places in CNode, in order to unify the accuracy, \r\n            // when calculating the dividend of CNode unit token, the quantity is multiplied by 1 ether\r\n            //totalStaked *= 1 ether;\r\n        }\r\n        \r\n        rewardPerToken = _decodeFloat(channel.rewardPerToken);\r\n        if (totalStaked > 0) {\r\n            rewardPerToken += newReward * 1 ether / totalStaked;\r\n        }\r\n\r\n        // Update the dividend value of unit share\r\n        channel.rewardPerToken = _encodeFloat(rewardPerToken);\r\n        // Update settled block number\r\n        channel.blockCursor = uint32(block.number);\r\n    }\r\n\r\n    // Calculate new reward\r\n    function _calcReward(StakeChannel storage channel) private view returns (uint newReward) {\r\n        newReward =\r\n            (block.number - uint(channel.blockCursor)) \r\n            * _reduction(block.number - COFI_GENESIS_BLOCK) \r\n            * _cofiUnit\r\n            * channel.cofiWeight\r\n            / 400 ;\r\n    }\r\n\r\n    /// @dev Calculate dividend data\r\n    /// @param xtoken xtoken address (or CNode address)\r\n    /// @return newReward Amount added since last settlement\r\n    /// @return rewardPerToken New number of unit token dividends\r\n    function calcReward(address xtoken) public view returns (\r\n        uint newReward, \r\n        uint rewardPerToken\r\n    ) {\r\n        // Load staking channel\r\n        StakeChannel storage channel = _channels[xtoken];\r\n        // Call _calcReward() to calculate new reward\r\n        newReward = _calcReward(channel);\r\n\r\n        // Load total amount of staked\r\n        uint totalStaked = channel.totalStaked;\r\n        if (xtoken == CNODE_TOKEN_ADDRESS) {\r\n            // Get the cumulative share of the trading ore output of the corresponding track\r\n            newReward += ICoFiXRouter(_cofixRouter).getTradeReward(xtoken) - uint(channel.tradeReward);\r\n            //totalStaked *= 1 ether;\r\n        }\r\n\r\n        rewardPerToken = _decodeFloat(channel.rewardPerToken);\r\n        if (totalStaked > 0) {\r\n            rewardPerToken += newReward * 1 ether / totalStaked;\r\n        }\r\n    }\r\n\r\n    // CoFi ore drawing attenuation interval. 2400000 blocks, about one year\r\n    uint constant COFI_REDUCTION_SPAN = 2400000;\r\n    // The decay limit of CoFi ore drawing becomes stable after exceeding this interval. 24 million blocks, about 4 years\r\n    uint constant COFI_REDUCTION_LIMIT = 9600000; // COFI_REDUCTION_SPAN * 4;\r\n    // Attenuation gradient array, each attenuation step value occupies 16 bits. The attenuation value is an integer\r\n    uint constant COFI_REDUCTION_STEPS = 0x280035004300530068008300A300CC010001400190;\r\n        // 0\r\n        // | (uint(400 / uint(1)) << (16 * 0))\r\n        // | (uint(400 * 8 / uint(10)) << (16 * 1))\r\n        // | (uint(400 * 8 * 8 / uint(10 * 10)) << (16 * 2))\r\n        // | (uint(400 * 8 * 8 * 8 / uint(10 * 10 * 10)) << (16 * 3))\r\n        // | (uint(400 * 8 * 8 * 8 * 8 / uint(10 * 10 * 10 * 10)) << (16 * 4))\r\n        // | (uint(400 * 8 * 8 * 8 * 8 * 8 / uint(10 * 10 * 10 * 10 * 10)) << (16 * 5))\r\n        // | (uint(400 * 8 * 8 * 8 * 8 * 8 * 8 / uint(10 * 10 * 10 * 10 * 10 * 10)) << (16 * 6))\r\n        // | (uint(400 * 8 * 8 * 8 * 8 * 8 * 8 * 8 / uint(10 * 10 * 10 * 10 * 10 * 10 * 10)) << (16 * 7))\r\n        // | (uint(400 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 / uint(10 * 10 * 10 * 10 * 10 * 10 * 10 * 10)) << (16 * 8))\r\n        // | (uint(400 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 / uint(10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10)) << (16 * 9))\r\n        // //| (uint(400 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 / uint(10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10)) << (16 * 10));\r\n        // | (uint(40) << (16 * 10));\r\n\r\n    // Calculation of attenuation gradient\r\n    function _reduction(uint delta) private pure returns (uint) {\r\n        \r\n        if (delta < COFI_REDUCTION_LIMIT) {\r\n            return (COFI_REDUCTION_STEPS >> ((delta / COFI_REDUCTION_SPAN) << 4)) & 0xFFFF;\r\n        }\r\n        return (COFI_REDUCTION_STEPS >> 64) & 0xFFFF;\r\n    }\r\n\r\n    /// @dev Encode the uint value as a floating-point representation in the form of fraction * 16 ^ exponent\r\n    /// @param value Destination uint value\r\n    /// @return float format\r\n    function _encodeFloat(uint value) private pure returns (uint96) {\r\n\r\n        uint exponent = 0; \r\n        while (value > 0x3FFFFFFFFFFFFFFFFFFFFFF) {\r\n            value >>= 4;\r\n            ++exponent;\r\n        }\r\n        return uint96((value << 6) | exponent);\r\n    }\r\n\r\n    /// @dev Decode the floating-point representation of fraction * 16 ^ exponent to uint\r\n    /// @param floatValue fraction value\r\n    /// @return decode format\r\n    function _decodeFloat(uint96 floatValue) private pure returns (uint) {\r\n        return (uint(floatValue) >> 6) << ((uint(floatValue) & 0x3F) << 2);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xtoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"xtokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"batchSetPoolWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xtoken\",\"type\":\"address\"}],\"name\":\"calcReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xtoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xtoken\",\"type\":\"address\"}],\"name\":\"getChannelInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cofiPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cofiUnit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xtoken\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xtoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"routerStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cofiUnit\",\"type\":\"uint256\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xtoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xtoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CoFiXVaultForStaking","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"888888","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://67c146ec1afd756c54f125c783c5b6a1591f1868edb9a923625b3a0ab2f71ccd"}]}