{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.2.1 https://hardhat.org\r\n\r\n// File contracts/interfaces/IERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IPoolFactory.sol\r\n\r\npragma solidity >=0.7.1;\r\n\r\ninterface IPoolFactory {\r\n    function getTier() external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/libraries/Ownable.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n// File contracts/libraries/ReentrancyGuard.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/SafeMath.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\r\n// Subject to the MIT license.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction underflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/Pausable.sol\r\n\r\npragma solidity >=0.7.1;\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused, \"CONTRACT_PAUSED\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused, \"CONTRACT_NOT_PAUSED\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/cryptography/ECDSA.sol@v3.4.1\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        return recover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\r\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0), \"ECDSA: invalid signature\");\r\n\r\n        return signer;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * replicates the behavior of the\r\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\r\n     * JSON-RPC method.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/extensions/RedKiteWhitelist.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n// Signature Verification\r\n/// @title RedKite Whitelists - Implement off-chain whitelist and on-chain verification\r\n/// @author Thang Nguyen Quy <thang.nguyen5@sotatek.com>\r\n\r\ncontract RedKiteWhitelist {\r\n    // Using Openzeppelin ECDSA cryptography library\r\n    function getMessageHash(\r\n        address _candidate,\r\n        uint256 _maxAmount,\r\n        uint256 _minAmount\r\n    ) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(_candidate, _maxAmount, _minAmount));\r\n    }\r\n\r\n    function getClaimMessageHash(\r\n        address _candidate,\r\n        uint256 _amount\r\n    ) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(_candidate, _amount));\r\n    }\r\n\r\n    // Verify signature function\r\n    function verify(\r\n        address _signer,\r\n        address _candidate,\r\n        uint256 _maxAmount,\r\n        uint256 _minAmount,\r\n        bytes memory signature\r\n    ) public pure returns (bool) {\r\n        bytes32 messageHash = getMessageHash(_candidate, _maxAmount, _minAmount);\r\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\r\n\r\n        return getSignerAddress(ethSignedMessageHash, signature) == _signer;\r\n    }\r\n\r\n    // Verify signature function\r\n    function verifyClaimToken(\r\n        address _signer,\r\n        address _candidate,\r\n        uint256 _amount,\r\n        bytes memory signature\r\n    ) public pure returns (bool) {\r\n        bytes32 messageHash = getClaimMessageHash(_candidate, _amount);\r\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\r\n\r\n        return getSignerAddress(ethSignedMessageHash, signature) == _signer;\r\n    }\r\n\r\n    function getSignerAddress(bytes32 _messageHash, bytes memory _signature) public pure returns(address signer) {\r\n        return ECDSA.recover(_messageHash, _signature);\r\n    }\r\n\r\n    // Split signature to r, s, v\r\n    function splitSignature(bytes memory _signature)\r\n        public\r\n        pure\r\n        returns (\r\n            bytes32 r,\r\n            bytes32 s,\r\n            uint8 v\r\n        )\r\n    {\r\n        require(_signature.length == 65, \"invalid signature length\");\r\n\r\n        assembly {\r\n            r := mload(add(_signature, 32))\r\n            s := mload(add(_signature, 64))\r\n            v := byte(0, mload(add(_signature, 96)))\r\n        }\r\n    }\r\n\r\n    function getEthSignedMessageHash(bytes32 _messageHash)\r\n        public\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return ECDSA.toEthSignedMessageHash(_messageHash);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/presale-pool/PreSalePool.sol\r\n\r\npragma solidity ^0.7.1;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PreSalePool is Ownable, ReentrancyGuard, Pausable, RedKiteWhitelist {\r\n    using SafeMath for uint256;\r\n\r\n    struct OfferedCurrency {\r\n        uint256 decimals;\r\n        uint256 rate;\r\n    }\r\n\r\n    // The token being sold\r\n    IERC20 public token;\r\n\r\n    // The address of factory contract\r\n    address public factory;\r\n\r\n    // The address of signer account\r\n    address public signer;\r\n\r\n    // Address where funds are collected\r\n    address public fundingWallet;\r\n\r\n    // Timestamps when token started to sell\r\n    uint256 public openTime = block.timestamp;\r\n\r\n    // Timestamps when token stopped to sell\r\n    uint256 public closeTime;\r\n\r\n    // Amount of wei raised\r\n    uint256 public weiRaised = 0;\r\n\r\n    // Amount of token sold\r\n    uint256 public tokenSold = 0;\r\n\r\n    // Amount of token sold\r\n    uint256 public totalUnclaimed = 0;\r\n\r\n    // Number of token user purchased\r\n    mapping(address => uint256) public userPurchased;\r\n\r\n    // Number of token user claimed\r\n    mapping(address => uint256) public userClaimed;\r\n\r\n    // Number of token user purchased\r\n    mapping(address => mapping (address => uint)) public investedAmountOf;\r\n\r\n    // Get offered currencies\r\n    mapping(address => OfferedCurrency) public offeredCurrencies;\r\n\r\n    // Pool extensions\r\n    bool public useWhitelist;\r\n\r\n    // -----------------------------------------\r\n    // Lauchpad Starter's event\r\n    // -----------------------------------------\r\n    event PresalePoolCreated(\r\n        address token,\r\n        uint256 openTime,\r\n        uint256 closeTime,\r\n        address offeredCurrency,\r\n        uint256 offeredCurrencyDecimals,\r\n        uint256 offeredCurrencyRate,\r\n        address wallet,\r\n        address owner\r\n    );\r\n    event TokenPurchaseByEther(\r\n        address indexed purchaser,\r\n        address indexed beneficiary,\r\n        uint256 value,\r\n        uint256 amount\r\n    );\r\n    event TokenPurchaseByToken(\r\n        address indexed purchaser,\r\n        address indexed beneficiary,\r\n        address token,\r\n        uint256 value,\r\n        uint256 amount\r\n    );\r\n\r\n    event TokenClaimed(address user, uint256 amount);\r\n    event RefundedIcoToken(address wallet, uint256 amount);\r\n    event PoolStatsChanged();\r\n\r\n    // -----------------------------------------\r\n    // Constructor\r\n    // -----------------------------------------\r\n    constructor() {\r\n        factory = msg.sender;\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // Red Kite external interface\r\n    // -----------------------------------------\r\n\r\n    /**\r\n     * @dev fallback function\r\n     */\r\n    fallback() external {\r\n        revert();\r\n    }\r\n\r\n    /**\r\n     * @dev fallback function\r\n     */\r\n    receive() external payable {\r\n        revert();\r\n    }\r\n\r\n    /**\r\n     * @param _token Address of the token being sold\r\n     * @param _duration Duration of ICO Pool\r\n     * @param _openTime When ICO Started\r\n     * @param _offeredCurrency Address of offered token\r\n     * @param _offeredCurrencyDecimals Decimals of offered token\r\n     * @param _offeredRate Number of currency token units a buyer gets\r\n     * @param _wallet Address where collected funds will be forwarded to\r\n     * @param _signer Address where collected funds will be forwarded to\r\n     */\r\n    function initialize(\r\n        address _token,\r\n        uint256 _duration,\r\n        uint256 _openTime,\r\n        address _offeredCurrency,\r\n        uint256 _offeredRate,\r\n        uint256 _offeredCurrencyDecimals,\r\n        address _wallet,\r\n        address _signer\r\n    ) external {\r\n        require(msg.sender == factory, \"POOL::UNAUTHORIZED\");\r\n\r\n        token = IERC20(_token);\r\n        openTime = _openTime;\r\n        closeTime = _openTime.add(_duration);\r\n        fundingWallet = _wallet;\r\n        owner = tx.origin;\r\n        paused = false;\r\n        signer = _signer;\r\n\r\n        offeredCurrencies[_offeredCurrency] = OfferedCurrency({\r\n            rate: _offeredRate,\r\n            decimals: _offeredCurrencyDecimals\r\n        });\r\n\r\n        emit PresalePoolCreated(\r\n            _token,\r\n            _openTime,\r\n            closeTime,\r\n            _offeredCurrency,\r\n            _offeredCurrencyDecimals,\r\n            _offeredRate,\r\n            _wallet,\r\n            owner\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the conversion rate when user buy by offered token\r\n     * @return Returns only a fixed number of rate.\r\n     */\r\n    function getOfferedCurrencyRate(address _token) public view returns (uint256) {\r\n        return offeredCurrencies[_token].rate;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the conversion rate decimals when user buy by offered token\r\n     * @return Returns only a fixed number of decimals.\r\n     */\r\n    function getOfferedCurrencyDecimals(address _token) public view returns (uint256) {\r\n        return offeredCurrencies[_token].decimals;\r\n    }\r\n\r\n    /**\r\n     * @notice Return the available tokens for purchase\r\n     * @return availableTokens Number of total available\r\n     */\r\n    function getAvailableTokensForSale() public view returns (uint256 availableTokens) {\r\n        return token.balanceOf(address(this)).add(totalUnclaimed).sub(tokenSold);\r\n    }\r\n\r\n    /**\r\n     * @notice Owner can set the offered token conversion rate. Receiver tokens = tradeTokens * tokenRate / 10 ** etherConversionRateDecimals\r\n     * @param _rate Fixed number of ether rate\r\n     * @param _decimals Fixed number of ether rate decimals\r\n     */\r\n    function setOfferedCurrencyRateAndDecimals(address _token, uint256 _rate, uint256 _decimals)\r\n        external\r\n        onlyOwner\r\n    {\r\n        offeredCurrencies[_token].rate = _rate;\r\n        offeredCurrencies[_token].decimals = _decimals;\r\n        emit PoolStatsChanged();\r\n    }\r\n\r\n    /**\r\n     * @notice Owner can set the offered token conversion rate. Receiver tokens = tradeTokens * tokenRate / 10 ** etherConversionRateDecimals\r\n     * @param _rate Fixed number of rate\r\n     */\r\n    function setOfferedCurrencyRate(address _token, uint256 _rate) external onlyOwner {\r\n        require(offeredCurrencies[_token].rate != _rate, \"POOL::RATE_INVALID\");\r\n        offeredCurrencies[_token].rate = _rate;\r\n        emit PoolStatsChanged();\r\n    }\r\n\r\n    /**\r\n     * @notice Owner can set the offered token conversion rate. Receiver tokens = tradeTokens * tokenRate / 10 ** etherConversionRateDecimals\r\n     * @param _newSigner Address of new signer\r\n     */\r\n    function setNewSigner(address _newSigner) external onlyOwner {\r\n        require(signer != _newSigner, \"POOL::SIGNER_INVALID\");\r\n        signer = _newSigner;\r\n    }\r\n\r\n    /**\r\n     * @notice Owner can set the offered token conversion rate. Receiver tokens = tradeTokens * tokenRate / 10 ** etherConversionRateDecimals\r\n     * @param _decimals Fixed number of decimals\r\n     */\r\n    function setOfferedCurrencyDecimals(address _token, uint256 _decimals) external onlyOwner {\r\n        require(offeredCurrencies[_token].decimals != _decimals, \"POOL::RATE_INVALID\");\r\n        offeredCurrencies[_token].decimals = _decimals;\r\n        emit PoolStatsChanged();\r\n    }\r\n\r\n    /**\r\n     * @notice Owner can set the close time (time in seconds). User can buy before close time.\r\n     * @param _closeTime Value in uint256 determine when we stop user to by tokens\r\n     */\r\n    function setCloseTime(uint256 _closeTime) external onlyOwner() {\r\n        require(_closeTime >= block.timestamp, \"POOL::INVALID_TIME\");\r\n        closeTime = _closeTime;\r\n        emit PoolStatsChanged();\r\n    }\r\n\r\n    /**\r\n     * @notice Owner can set the open time (time in seconds). User can buy after open time.\r\n     * @param _openTime Value in uint256 determine when we allow user to by tokens\r\n     */\r\n    function setOpenTime(uint256 _openTime) external onlyOwner() {\r\n        openTime = _openTime;\r\n        emit PoolStatsChanged();\r\n    }\r\n\r\n    /**\r\n     * @notice Owner can set extentions.\r\n     * @param _whitelist Value in bool. True if using whitelist\r\n     */\r\n    function setPoolExtentions(bool _whitelist) external onlyOwner() {\r\n        useWhitelist = _whitelist;\r\n        emit PoolStatsChanged();\r\n    }\r\n\r\n    function buyTokenByEtherWithPermission(\r\n        address _beneficiary,\r\n        address _candidate,\r\n        uint256 _maxAmount,\r\n        uint256 _minAmount,\r\n        bytes memory _signature\r\n    ) public payable whenNotPaused nonReentrant {\r\n        uint256 weiAmount = msg.value;\r\n\r\n        require(offeredCurrencies[address(0)].rate != 0, \"POOL::PURCHASE_METHOD_NOT_ALLOWED\");\r\n\r\n        _preValidatePurchase(_beneficiary, weiAmount);\r\n\r\n        require(_validPurchase(), \"POOL::ENDED\");\r\n        require(_verifyWhitelist(_candidate, _maxAmount, _minAmount, _signature));\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = _getOfferedCurrencyToTokenAmount(address(0), weiAmount);\r\n        require(getAvailableTokensForSale() >= tokens, \"POOL::NOT_ENOUGHT_TOKENS_FOR_SALE\");\r\n        require(tokens >= _minAmount || userPurchased[_candidate].add(tokens) >= _minAmount, \"POOL::MIN_AMOUNT_UNREACHED\");\r\n        require(userPurchased[_candidate].add(tokens) <= _maxAmount, \"POOL::PURCHASE_AMOUNT_EXCEED_ALLOWANCE\");\r\n\r\n        _forwardFunds(weiAmount);\r\n\r\n        _updatePurchasingState(weiAmount, tokens);\r\n\r\n        investedAmountOf[address(0)][_candidate] = investedAmountOf[address(0)][_candidate].add(weiAmount);\r\n\r\n        emit TokenPurchaseByEther(msg.sender, _beneficiary, weiAmount, tokens);\r\n    }\r\n\r\n    function buyTokenByTokenWithPermission(\r\n        address _beneficiary,\r\n        address _token,\r\n        uint256 _amount,\r\n        address _candidate,\r\n        uint256 _maxAmount,\r\n        uint256 _minAmount,\r\n        bytes memory _signature\r\n    ) public whenNotPaused nonReentrant {\r\n        require(offeredCurrencies[_token].rate != 0, \"POOL::PURCHASE_METHOD_NOT_ALLOWED\");\r\n        require(_validPurchase(), \"POOL::ENDED\");\r\n        require(_verifyWhitelist(_candidate, _maxAmount, _minAmount, _signature));\r\n\r\n        _verifyAllowance(msg.sender, _token, _amount);\r\n\r\n        _preValidatePurchase(_beneficiary, _amount);\r\n\r\n        uint256 tokens = _getOfferedCurrencyToTokenAmount(_token, _amount);\r\n        require(getAvailableTokensForSale() >= tokens, \"POOL::NOT_ENOUGHT_TOKENS_FOR_SALE\");\r\n        require(tokens >= _minAmount || userPurchased[_candidate].add(tokens) >= _minAmount, \"POOL::MIN_AMOUNT_UNREACHED\");\r\n        require(userPurchased[_candidate].add(tokens) <= _maxAmount, \"POOL:PURCHASE_AMOUNT_EXCEED_ALLOWANCE\");\r\n\r\n        _forwardTokenFunds(_token, _amount);\r\n\r\n        _updatePurchasingState(_amount, tokens);\r\n\r\n        investedAmountOf[_token][_candidate] = investedAmountOf[address(0)][_candidate].add(_amount);\r\n\r\n        emit TokenPurchaseByToken(\r\n            msg.sender,\r\n            _beneficiary,\r\n            _token,\r\n            _amount,\r\n            tokens\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Return true if pool has ended\r\n     * @dev User cannot purchase / trade tokens when isFinalized == true\r\n     * @return true if the ICO Ended.\r\n     */\r\n    function isFinalized() public view returns (bool) {\r\n        return block.timestamp >= closeTime;\r\n    }\r\n\r\n    /**\r\n     * @notice Owner can receive their remaining tokens when ICO Ended\r\n     * @dev  Can refund remainning token if the ico ended\r\n     * @param _wallet Address wallet who receive the remainning tokens when Ico end\r\n     */\r\n    function refundRemainingTokens(address _wallet)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(isFinalized(), \"POOL::ICO_NOT_ENDED\");\r\n        require(token.balanceOf(address(this)) > 0, \"POOL::EMPTY_BALANCE\");\r\n\r\n        uint256 remainingTokens = getAvailableTokensForSale();\r\n        _deliverTokens(_wallet, remainingTokens);\r\n        emit RefundedIcoToken(_wallet, remainingTokens);\r\n    }\r\n\r\n    /**\r\n     * @notice User can receive their tokens when pool finished\r\n     */\r\n    function claimTokens(address _candidate, uint256 _amount, bytes memory _signature) public {\r\n        require(_verifyClaimToken(_candidate, _amount, _signature), \"POOL::NOT_ALLOW_TO_CLAIM\");\r\n        require(isFinalized(), \"POOL::NOT_FINALLIZED\");\r\n\r\n        uint256 claimAmount = userPurchased[_candidate].sub(userClaimed[_candidate]);\r\n\r\n        if (claimAmount > _amount) {\r\n            claimAmount = _amount;\r\n        }\r\n\r\n        userClaimed[_candidate] = userClaimed[_candidate].add(claimAmount);\r\n\r\n        _deliverTokens(msg.sender, claimAmount);\r\n        \r\n        totalUnclaimed = totalUnclaimed.sub(claimAmount);\r\n\r\n        emit TokenClaimed(msg.sender, claimAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\r\n     * @param _beneficiary Address performing the token purchase\r\n     * @param _weiAmount Value in wei involved in the purchase\r\n     */\r\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount)\r\n        internal\r\n        pure\r\n    {\r\n        require(_beneficiary != address(0), \"POOL::INVALID_BENEFICIARY\");\r\n        require(_weiAmount != 0, \"POOL::INVALID_WEI_AMOUNT\");\r\n    }\r\n\r\n    /**\r\n     * @dev Override to extend the way in which ether is converted to tokens.\r\n     * @param _amount Value in wei to be converted into tokens\r\n     * @return Number of tokens that can be purchased with the specified _weiAmount\r\n     */\r\n    function _getOfferedCurrencyToTokenAmount(address _token, uint256 _amount)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 rate = getOfferedCurrencyRate(_token);\r\n        uint256 decimals = getOfferedCurrencyDecimals(_token);\r\n        return _amount.mul(rate).div(10**decimals);\r\n    }\r\n\r\n    /**\r\n     * @dev Source of tokens. Transfer / mint\r\n     * @param _beneficiary Address performing the token purchase\r\n     * @param _tokenAmount Number of tokens to be emitted\r\n     */\r\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount)\r\n        internal\r\n    {\r\n        token.transfer(_beneficiary, _tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Determines how ETH is stored/forwarded on purchases.\r\n     */\r\n    function _forwardFunds(uint256 _value) internal {\r\n        address payable wallet = address(uint160(fundingWallet));\r\n        (bool success, ) = wallet.call{value: _value}(\"\");\r\n        require(success, \"POOL::WALLET_TRANSFER_FAILED\");\r\n    }\r\n\r\n    /**\r\n     * @dev Determines how Token is stored/forwarded on purchases.\r\n     */\r\n    function _forwardTokenFunds(address _token, uint256 _amount) internal {\r\n        IERC20(_token).transferFrom(msg.sender, fundingWallet, _amount);\r\n    }\r\n\r\n    /**\r\n     * @param _tokens Value of sold tokens\r\n     * @param _weiAmount Value in wei involved in the purchase\r\n     */\r\n    function _updatePurchasingState(uint256 _weiAmount, uint256 _tokens)\r\n        internal\r\n    {\r\n        weiRaised = weiRaised.add(_weiAmount);\r\n        tokenSold = tokenSold.add(_tokens);\r\n        userPurchased[msg.sender] = userPurchased[msg.sender].add(_tokens);\r\n        totalUnclaimed = totalUnclaimed.add(_tokens);\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    function _validPurchase() internal view returns (bool) {\r\n        bool withinPeriod =\r\n            block.timestamp >= openTime && block.timestamp <= closeTime;\r\n        return withinPeriod;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer eth to an address\r\n     * @param _to Address receiving the eth\r\n     * @param _amount Amount of wei to transfer\r\n     */\r\n    function _transfer(address _to, uint256 _amount) private {\r\n        address payable payableAddress = address(uint160(_to));\r\n        (bool success, ) = payableAddress.call{value: _amount}(\"\");\r\n        require(success, \"POOL::TRANSFER_FEE_FAILED\");\r\n    }\r\n\r\n    /**\r\n     * @dev Verify allowance of purchase\r\n     * @param _user Address of buyer\r\n     * @param _token token address of purchasing token\r\n     * @param _amount Amount of token to buy pool token\r\n     */\r\n    function _verifyAllowance(\r\n        address _user,\r\n        address _token,\r\n        uint256 _amount\r\n    ) private view {\r\n        IERC20 tradeToken = IERC20(_token);\r\n        uint256 allowance = tradeToken.allowance(_user, address(this));\r\n        require(allowance >= _amount, \"POOL::TOKEN_NOT_APPROVED\");\r\n    }\r\n\r\n    /**\r\n     * @dev Verify permission of purchase\r\n     * @param _candidate Address of buyer\r\n     * @param _maxAmount max token can buy\r\n     * @param _minAmount min token can buy\r\n     * @param _signature Signature of signers\r\n     */\r\n    function _verifyWhitelist(\r\n        address _candidate,\r\n        uint256 _maxAmount,\r\n        uint256 _minAmount,\r\n        bytes memory _signature\r\n    ) private view returns (bool) {\r\n        require(msg.sender == _candidate, \"POOL::WRONG_CANDIDATE\");\r\n        \r\n        if (useWhitelist) {\r\n            return (verify(signer, _candidate, _maxAmount, _minAmount, _signature));\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Verify permission of purchase\r\n     * @param _candidate Address of buyer\r\n     * @param _amount claimable amount\r\n     * @param _signature Signature of signers\r\n     */\r\n    function _verifyClaimToken(\r\n        address _candidate,\r\n        uint256 _amount,\r\n        bytes memory _signature\r\n    ) private view returns (bool) {\r\n        require(msg.sender == _candidate, \"POOL::WRONG_CANDIDATE\");\r\n        \r\n        return (verifyClaimToken(signer, _candidate, _amount, _signature));\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PoolStatsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"closeTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"offeredCurrency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offeredCurrencyDecimals\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offeredCurrencyRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"PresalePoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundedIcoToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchaseByEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchaseByToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"buyTokenByEtherWithPermission\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"buyTokenByTokenWithPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableTokensForSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getClaimMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"}],\"name\":\"getEthSignedMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getOfferedCurrencyDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getOfferedCurrencyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"getSignerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_openTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_offeredCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_offeredRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offeredCurrencyDecimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"offeredCurrencies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"refundRemainingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_closeTime\",\"type\":\"uint256\"}],\"name\":\"setCloseTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSigner\",\"type\":\"address\"}],\"name\":\"setNewSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"setOfferedCurrencyDecimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setOfferedCurrencyRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"setOfferedCurrencyRateAndDecimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_openTime\",\"type\":\"uint256\"}],\"name\":\"setOpenTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_whitelist\",\"type\":\"bool\"}],\"name\":\"setPoolExtentions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"splitSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnclaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPurchased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verifyClaimToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PreSalePool","CompilerVersion":"v0.7.1+commit.f4a555be","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c96f6e0812ef8ac6672bd39252257aee123249e53f47e0cf0886f458e31ef75b"}]}