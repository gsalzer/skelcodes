{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.8.6;\r\n\r\ncontract IcyRegister\r\n\r\n{\r\n    address private owner;\r\n    \r\n    uint256 private registerPrice;\r\n    mapping (address => bool) private userToRegistered;\r\n    \r\n    constructor()\r\n    {\r\n        owner = msg.sender;   \r\n        registerPrice = 0.01 ether;\r\n    }\r\n    \r\n    //////////\r\n    // Getters\r\n    \r\n    function getRegisterPrice() external view returns(uint256)\r\n    {\r\n        return(registerPrice);\r\n    }\r\n\r\n    function getOwner() external view returns(address)\r\n    {\r\n        return(owner);\r\n    }\r\n    \r\n    function isAddressRegistered(address _account) external view returns(bool)\r\n    {\r\n        return(userToRegistered[_account]);\r\n    }\r\n    \r\n    //////////\r\n    // Setters\r\n    function setOwner(address _owner) external\r\n    {\r\n        require(msg.sender == owner, \"Function only callable by owner!\");\r\n    \r\n        owner = _owner;    \r\n    }\r\n    \r\n    function setRegisterPrice(uint256 _registerPrice) external\r\n    {\r\n        require(msg.sender == owner, \"Function only callable by owner!\");\r\n        \r\n        registerPrice = _registerPrice;\r\n    }\r\n    \r\n    /////////////////////\r\n    // Register functions\r\n    receive() external payable\r\n    {\r\n        register();\r\n    }\r\n    \r\n    function register() public payable\r\n    {\r\n        require(!userToRegistered[msg.sender], \"Address already registered!\");\r\n        require(msg.value >= registerPrice);\r\n        \r\n        userToRegistered[msg.sender] = true;\r\n    }\r\n    \r\n    /////////////////\r\n    // Withdraw Ether\r\n    function withdraw(uint256 _amount, address _receiver) external\r\n    {   \r\n        require(msg.sender == owner, \"Function only callable by owner!\");\r\n        \r\n        payable(_receiver).transfer(_amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegisterPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAddressRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_registerPrice\",\"type\":\"uint256\"}],\"name\":\"setRegisterPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"IcyRegister","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0fc320a2e8cd8bd1912219805aa2003f1442da0fbf446ded15d6b8f2f2d0bff9"}]}