{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./Pool.sol\\\";\\nimport \\\"./IPoolFactory.sol\\\";\\n\\ncontract PoolFactory is Initializable, OwnableUpgradeable, IPoolFactory {\\n    using SafeERC20 for IERC20;\\n\\n    // Base tokesn for whitelisting\\n    IERC20 public baseToken;\\n    uint256 public baseAmount;\\n\\n    event PoolRegistered(uint256 poolId, address manager);\\n    event PoolApproved(uint256 poolId);\\n\\n    struct PoolInfo {\\n        IERC20 token;\\n        uint256 tokenTarget;\\n        uint256 ratio;\\n        address weiToken;\\n        uint256 minWei;\\n        uint256 maxWei;\\n        Pool.PoolType poolType;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 claimTime;\\n        string meta;\\n        address manager;\\n    }\\n\\n    uint256 public poolsCount;\\n\\n    PoolInfo[] public poolInfos;\\n\\n    mapping(address => bool) public isAdmin;\\n\\n    mapping(uint256 => address) public pools;\\n    mapping(address => bool) public isPool;\\n    mapping(uint256 => bool) public isApproved;\\n    mapping(uint256 => bool) public isCreated;\\n\\n    // fee\\n    address public feeRecipient;\\n    uint256 public feePercent; // 20: 2%\\n\\n    function initialize(\\n        IERC20 _baseToken,\\n        uint256 _baseAmount,\\n        address _feeRecipient,\\n        uint256 _feePercent\\n    ) external initializer {\\n        OwnableUpgradeable.__Ownable_init();\\n        baseToken = _baseToken;\\n        baseAmount = _baseAmount;\\n        feePercent = _feePercent;\\n        feeRecipient = _feeRecipient;\\n\\n        isAdmin[msg.sender] = true;\\n    }\\n\\n    function updateFeeInfo(address _feeRecipient, uint256 _feePercent)\\n        external\\n        onlyOwner\\n    {\\n        feePercent = _feePercent;\\n        feeRecipient = _feeRecipient;\\n    }\\n\\n    function updateBaseInfo(IERC20 _baseToken, uint256 _baseAmount)\\n        external\\n        onlyOwner\\n    {\\n        require(_baseAmount > 0, \\\"BaseAmount should be greater than 0!\\\");\\n        baseToken = _baseToken;\\n        baseAmount = _baseAmount;\\n    }\\n\\n    function getFeeInfo() external view override returns (address, uint256) {\\n        return (feeRecipient, feePercent);\\n    }\\n\\n    function getBaseInfo() external view override returns (IERC20, uint256) {\\n        return (baseToken, baseAmount);\\n    }\\n\\n    function addAdmins(address[] calldata addrs) external onlyOwner {\\n        for (uint256 i = 0; i < addrs.length; i = i + 1) {\\n            isAdmin[addrs[i]] = true;\\n        }\\n    }\\n\\n    function removeAdmins(address[] calldata addrs) external onlyOwner {\\n        for (uint256 i = 0; i < addrs.length; i = i + 1) {\\n            isAdmin[addrs[i]] = false;\\n        }\\n    }\\n\\n    function registerPool(\\n        IERC20 _token,\\n        uint256 _tokenTarget,\\n        uint256 _ratio,\\n        address _weiToken,\\n        uint256 _minWei,\\n        uint256 _maxWei,\\n        Pool.PoolType _poolType,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        uint256 _claimTime,\\n        string memory _meta,\\n        address manager\\n    ) external onlyOwner {\\n        require(_tokenTarget > 0, \\\"Token target can't be zero!\\\");\\n        require(_ratio > 0, \\\"ratio can't be zero!\\\");\\n        require(_minWei > 0, \\\"minWei can't be zero!\\\");\\n        require(_maxWei > 0, \\\"maxWei can't be zero!\\\");\\n        require(_minWei < _maxWei, \\\"minWei should be less than maxWei\\\");\\n        require(_startTime > block.timestamp, \\\"You can't set past time!\\\");\\n        require(\\n            _startTime < _endTime,\\n            \\\"EndTime can't be earlier than startTime\\\"\\n        );\\n        require(\\n            _endTime < _claimTime,\\n            \\\"ClaimTime can't be earlier than endTime\\\"\\n        );\\n        require(\\n            address(_token) != address(0),\\n            \\\"zero address provided for token\\\"\\n        );\\n        require(\\n            manager != address(0),\\n            \\\"zero address provided for manager address\\\"\\n        );\\n\\n        uint256 createdPoolId = poolInfos.length;\\n\\n        poolInfos.push(\\n            PoolInfo(\\n                _token,\\n                _tokenTarget,\\n                _ratio,\\n                _weiToken,\\n                _minWei,\\n                _maxWei,\\n                _poolType,\\n                _startTime,\\n                _endTime,\\n                _claimTime,\\n                _meta,\\n                manager\\n            )\\n        );\\n\\n        emit PoolRegistered(createdPoolId, manager);\\n    }\\n\\n    function approvePool(uint256 poolId) external onlyAdmin {\\n        require(poolId < poolInfos.length, \\\"Invalid PoolId\\\");\\n        require(!isApproved[poolId], \\\"Pool is already verified\\\");\\n\\n        isApproved[poolId] = true;\\n\\n        emit PoolApproved(poolId);\\n    }\\n\\n    function createPool(uint256 poolId) external returns (address) {\\n        require(poolId < poolInfos.length, \\\"Invalid PoolId\\\");\\n        require(isApproved[poolId], \\\"Pool is not approved yet\\\");\\n        require(!isCreated[poolId], \\\"Already created for this registration\\\");\\n\\n        PoolInfo storage poolInfo = poolInfos[poolId];\\n\\n        require(msg.sender == poolInfo.manager, \\\"You're not the pool manager\\\");\\n\\n        Pool pool = new Pool(\\n            address(this),\\n            poolInfo.token,\\n            poolInfo.tokenTarget,\\n            poolInfo.weiToken,\\n            poolInfo.ratio,\\n            poolInfo.minWei,\\n            poolInfo.maxWei,\\n            poolId\\n        );\\n\\n        pool.setBaseData(\\n            poolInfo.poolType,\\n            poolInfo.startTime,\\n            poolInfo.endTime,\\n            poolInfo.claimTime,\\n            poolInfo.meta\\n        );\\n\\n        poolInfo.token.safeTransferFrom(\\n            msg.sender,\\n            address(pool),\\n            poolInfo.tokenTarget\\n        );\\n\\n        pools[poolId] = address(pool);\\n        isPool[address(pool)] = true;\\n        isCreated[poolId] = true;\\n\\n        pool.transferOwnership(msg.sender);\\n\\n        poolsCount = poolsCount + 1;\\n\\n        emit PoolCreated(poolId, address(pool), msg.sender);\\n\\n        return address(pool);\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(isAdmin[msg.sender], \\\"You're not an admin!\\\");\\n\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./IPoolFactory.sol\\\";\\n\\ncontract Pool is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    enum PoolType {\\n        Private,\\n        Public\\n    }\\n\\n    mapping(address => bool) public whitelistedAddresses;\\n\\n    IERC20 public token; // address of token\\n    uint256 public tokenTarget; // total allocation of token\\n    uint256 public poolId;\\n\\n    address public weiToken;\\n\\n    uint256 public ratio;\\n\\n    uint256 public startTime;\\n    uint256 public endTime;\\n    uint256 public claimTime;\\n\\n    uint256 public minWei; // min amount per wallet can purchase\\n    uint256 public maxWei; // max amount per wallet can purchase\\n\\n    PoolType public poolType;\\n\\n    string public meta;\\n\\n    uint256 public totalOwed; // weiRaised * ratio\\n    mapping(address => uint256) public claimable;\\n    uint256 public weiRaised; // gathered ETH\\n\\n    address public factory;\\n\\n    event PoolInitialized(\\n        address token,\\n        address weiToken,\\n        uint256 tokenTarget,\\n        uint256 ratio,\\n        uint256 minWei,\\n        uint256 maxWei,\\n        uint256 poolId\\n    );\\n\\n    event PoolBaseDataInitialized(\\n        Pool.PoolType poolType,\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256 claimTime,\\n        string meta,\\n        uint256 poolId\\n    );\\n\\n    event MetaDataChanged(string meta, uint256 poolId);\\n\\n    event PoolProgressChanged(\\n        address buyer,\\n        uint256 amount,\\n        uint256 totalOwed,\\n        uint256 weiRaised,\\n        uint256 poolId\\n    );\\n\\n    constructor(\\n        address _factory,\\n        IERC20 _token,\\n        uint256 _tokenTarget,\\n        address _weiToken,\\n        uint256 _ratio,\\n        uint256 _minWei,\\n        uint256 _maxWei,\\n        uint256 _poolId\\n    ) {\\n        require(\\n            _factory != address(0),\\n            \\\"zero address provided for factory address\\\"\\n        );\\n        require(\\n            address(_token) != address(0),\\n            \\\"zero address provided for token address\\\"\\n        );\\n\\n        poolId = _poolId;\\n        token = _token;\\n        tokenTarget = _tokenTarget;\\n        weiToken = _weiToken;\\n        ratio = _ratio;\\n        minWei = _minWei;\\n        maxWei = _maxWei;\\n\\n        factory = _factory;\\n\\n        emit PoolInitialized(\\n            address(token),\\n            weiToken,\\n            tokenTarget,\\n            ratio,\\n            minWei,\\n            maxWei,\\n            poolId\\n        );\\n    }\\n\\n    function setBaseData(\\n        PoolType _poolType,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        uint256 _claimTime,\\n        string memory _meta\\n    ) external onlyOwner {\\n        require(startTime == uint256(0), \\\"BaseData is already set!\\\");\\n        poolType = _poolType;\\n        meta = _meta;\\n        startTime = _startTime;\\n        endTime = _endTime;\\n        claimTime = _claimTime;\\n\\n        emit PoolBaseDataInitialized(\\n            poolType,\\n            startTime,\\n            endTime,\\n            claimTime,\\n            meta,\\n            poolId\\n        );\\n    }\\n\\n    function setMeta(string memory _meta) external onlyOwner {\\n        require(\\n            startTime == 0 || block.timestamp < startTime,\\n            \\\"Pool already started!\\\"\\n        );\\n        meta = _meta;\\n\\n        emit MetaDataChanged(meta, poolId);\\n    }\\n\\n    function addWhitelistedAddress(address _address) external onlyOwner {\\n        whitelistedAddresses[_address] = true;\\n    }\\n\\n    function addMultipleWhitelistedAddresses(address[] calldata _addresses)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < _addresses.length; i++) {\\n            whitelistedAddresses[_addresses[i]] = true;\\n        }\\n    }\\n\\n    function removeWhitelistedAddress(address _address) external onlyOwner {\\n        whitelistedAddresses[_address] = false;\\n    }\\n\\n    function claimableAmount(address user) external view returns (uint256) {\\n        return claimable[user] * ratio;\\n    }\\n\\n    function withdrawToken() external onlyOwner {\\n        require(block.timestamp > endTime, \\\"Pool has not yet ended\\\");\\n        token.safeTransfer(\\n            msg.sender,\\n            token.balanceOf(address(this)) - totalOwed\\n        );\\n    }\\n\\n    function withdrawWei(uint256 amount) public payable onlyOwner nonReentrant {\\n        require(block.timestamp > endTime, \\\"Pool has not yet ended\\\");\\n        require(weiToken == address(0), \\\"It's not eth-buy pool!\\\");\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Can't withdraw more than you have.\\\"\\n        );\\n        (address feeRecipient, uint256 feePercent) = IPoolFactory(factory)\\n        .getFeeInfo();\\n        uint256 fee = (amount * feePercent) / 1000;\\n        uint256 restAmount = amount - fee;\\n        payable(feeRecipient).sendValue(fee);\\n        payable(msg.sender).sendValue(restAmount);\\n    }\\n\\n    function withdrawWeiToken(uint256 amount) external onlyOwner {\\n        require(block.timestamp > endTime, \\\"Pool has not yet ended\\\");\\n        require(weiToken != address(0), \\\"It's not token-buy pool!\\\");\\n        require(\\n            IERC20(weiToken).balanceOf(address(this)) >= amount,\\n            \\\"Can't withdraw more than you have.\\\"\\n        );\\n        (address feeRecipient, uint256 feePercent) = IPoolFactory(factory)\\n        .getFeeInfo();\\n        uint256 fee = (amount * feePercent) / 1000;\\n        uint256 restAmount = amount - fee;\\n        IERC20(weiToken).safeTransfer(feeRecipient, fee);\\n        IERC20(weiToken).safeTransfer(msg.sender, restAmount);\\n    }\\n\\n    function claim() external {\\n        require(\\n            block.timestamp > claimTime && claimTime != 0,\\n            \\\"claiming not allowed yet\\\"\\n        );\\n        require(claimable[msg.sender] > 0, \\\"nothing to claim\\\");\\n\\n        uint256 amount = claimable[msg.sender] * ratio;\\n\\n        claimable[msg.sender] = 0;\\n        totalOwed -= amount;\\n\\n        token.safeTransfer(msg.sender, amount);\\n    }\\n\\n    function checkBeforeBuy() private view {\\n        require(\\n            startTime != 0 && block.timestamp > startTime,\\n            \\\"Pool has not yet started\\\"\\n        );\\n        require(\\n            endTime != 0 && block.timestamp < endTime,\\n            \\\"Pool already ended\\\"\\n        );\\n\\n        if (poolType == PoolType.Private) {\\n            require(\\n                whitelistedAddresses[msg.sender],\\n                \\\"you are not whitelisted\\\"\\n            );\\n        } else if (poolType == PoolType.Public) {\\n            (IERC20 baseToken, uint256 baseAmount) = IPoolFactory(factory)\\n            .getBaseInfo();\\n            require(\\n                baseToken.balanceOf(msg.sender) >= baseAmount,\\n                \\\"You don't have enough base TOKEN!\\\"\\n            );\\n        }\\n    }\\n\\n    function buyWithEth() public payable {\\n        require(weiToken == address(0), \\\"It's not eth-buy pool!\\\");\\n        checkBeforeBuy();\\n        require(msg.value >= minWei, \\\"amount too low\\\");\\n        uint256 amount = msg.value * ratio;\\n        require(\\n            totalOwed + amount <= token.balanceOf(address(this)),\\n            \\\"sold out\\\"\\n        );\\n\\n        require(\\n            claimable[msg.sender] + msg.value <= maxWei,\\n            \\\"maximum purchase cap hit\\\"\\n        );\\n\\n        claimable[msg.sender] += msg.value;\\n        totalOwed += amount;\\n        weiRaised += msg.value;\\n\\n        emit PoolProgressChanged(\\n            msg.sender,\\n            msg.value,\\n            totalOwed,\\n            weiRaised,\\n            poolId\\n        );\\n    }\\n\\n    function buy(uint256 weiAmount) public {\\n        require(weiToken != address(0), \\\"It's not token-buy pool!\\\");\\n        checkBeforeBuy();\\n        require(weiAmount >= minWei, \\\"amount too low\\\");\\n\\n        uint256 amount = weiAmount * ratio;\\n        require(\\n            totalOwed + amount <= token.balanceOf(address(this)),\\n            \\\"sold out\\\"\\n        );\\n\\n        require(\\n            claimable[msg.sender] + weiAmount <= maxWei,\\n            \\\"maximum purchase cap hit\\\"\\n        );\\n\\n        IERC20(weiToken).safeTransferFrom(msg.sender, address(this), weiAmount);\\n\\n        claimable[msg.sender] = claimable[msg.sender] + weiAmount;\\n        totalOwed += amount;\\n        weiRaised += weiAmount;\\n\\n        emit PoolProgressChanged(\\n            msg.sender,\\n            weiAmount,\\n            totalOwed,\\n            weiRaised,\\n            poolId\\n        );\\n    }\\n\\n    fallback() external payable {\\n        buyWithEth();\\n    }\\n\\n    receive() external payable {\\n        buyWithEth();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IPoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPoolFactory {\\n    event PoolCreated(\\n        uint256 indexed poolId,\\n        address indexed addr,\\n        address indexed creator\\n    );\\n\\n    function getFeeInfo() external view returns (address, uint256);\\n\\n    function getBaseInfo() external view returns (IERC20, uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"PoolApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"addAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"approvePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfos\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenTarget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"weiToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWei\",\"type\":\"uint256\"},{\"internalType\":\"enum Pool.PoolType\",\"name\":\"poolType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"meta\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenTarget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_weiToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxWei\",\"type\":\"uint256\"},{\"internalType\":\"enum Pool.PoolType\",\"name\":\"_poolType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_meta\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"registerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"removeAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseAmount\",\"type\":\"uint256\"}],\"name\":\"updateBaseInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"updateFeeInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PoolFactory","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}