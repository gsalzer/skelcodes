{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance \\u003e= amount, \\u0027Address: insufficient balance\\u0027);\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}(\\u0027\\u0027);\\n    require(success, \\u0027Address: unable to send value, recipient may have reverted\\u0027);\\n  }\\n}\\n\"},\"BaseParaSwapAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\u0027./SafeMath.sol\\u0027;\\nimport {IERC20} from \\u0027./IERC20.sol\\u0027;\\nimport {IERC20Detailed} from \\u0027./IERC20Detailed.sol\\u0027;\\nimport {SafeERC20} from \\u0027./SafeERC20.sol\\u0027;\\nimport {Ownable} from \\u0027./Ownable.sol\\u0027;\\nimport {ILendingPoolAddressesProvider} from \\u0027./ILendingPoolAddressesProvider.sol\\u0027;\\nimport {DataTypes} from \\u0027./DataTypes.sol\\u0027;\\nimport {IPriceOracleGetter} from \\u0027./IPriceOracleGetter.sol\\u0027;\\nimport {IERC20WithPermit} from \\u0027./IERC20WithPermit.sol\\u0027;\\nimport {FlashLoanReceiverBase} from \\u0027./FlashLoanReceiverBase.sol\\u0027;\\n\\n/**\\n * @title BaseParaSwapAdapter\\n * @notice Utility functions for adapters using ParaSwap\\n * @author Jason Raymond Bell\\n */\\nabstract contract BaseParaSwapAdapter is FlashLoanReceiverBase, Ownable {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  struct PermitSignature {\\n    uint256 amount;\\n    uint256 deadline;\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n\\n  // Max slippage percent allowed\\n  uint256 public constant MAX_SLIPPAGE_PERCENT = 3000; // 30%\\n\\n  IPriceOracleGetter public immutable ORACLE;\\n\\n  event Swapped(address indexed fromAsset, address indexed toAsset, uint256 fromAmount, uint256 receivedAmount);\\n\\n  constructor(\\n    ILendingPoolAddressesProvider addressesProvider\\n  ) public FlashLoanReceiverBase(addressesProvider) {\\n    ORACLE = IPriceOracleGetter(addressesProvider.getPriceOracle());\\n  }\\n\\n  /**\\n   * @dev Get the price of the asset from the oracle denominated in eth\\n   * @param asset address\\n   * @return eth price for the asset\\n   */\\n  function _getPrice(address asset) internal view returns (uint256) {\\n    return ORACLE.getAssetPrice(asset);\\n  }\\n\\n  /**\\n   * @dev Get the decimals of an asset\\n   * @return number of decimals of the asset\\n   */\\n  function _getDecimals(address asset) internal view returns (uint256) {\\n    return IERC20Detailed(asset).decimals();\\n  }\\n\\n  /**\\n   * @dev Get the aToken associated to the asset\\n   * @return address of the aToken\\n   */\\n  function _getReserveData(address asset) internal view returns (DataTypes.ReserveData memory) {\\n    return LENDING_POOL.getReserveData(asset);\\n  }\\n\\n  /**\\n   * @dev Pull the ATokens from the user\\n   * @param reserve address of the asset\\n   * @param reserveAToken address of the aToken of the reserve\\n   * @param user address\\n   * @param amount of tokens to be transferred to the contract\\n   * @param permitSignature struct containing the permit signature\\n   */\\n  function _pullAToken(\\n    address reserve,\\n    address reserveAToken,\\n    address user,\\n    uint256 amount,\\n    PermitSignature memory permitSignature\\n  ) internal {\\n    if (_usePermit(permitSignature)) {\\n      IERC20WithPermit(reserveAToken).permit(\\n        user,\\n        address(this),\\n        permitSignature.amount,\\n        permitSignature.deadline,\\n        permitSignature.v,\\n        permitSignature.r,\\n        permitSignature.s\\n      );\\n    }\\n\\n    // transfer from user to adapter\\n    IERC20(reserveAToken).safeTransferFrom(user, address(this), amount);\\n\\n    // withdraw reserve\\n    LENDING_POOL.withdraw(reserve, amount, address(this));\\n  }\\n\\n  /**\\n   * @dev Tells if the permit method should be called by inspecting if there is a valid signature.\\n   * If signature params are set to 0, then permit won\\u0027t be called.\\n   * @param signature struct containing the permit signature\\n   * @return whether or not permit should be called\\n   */\\n  function _usePermit(PermitSignature memory signature) internal pure returns (bool) {\\n    return\\n      !(uint256(signature.deadline) == uint256(signature.v) \\u0026\\u0026 uint256(signature.deadline) == 0);\\n  }\\n\\n  /**\\n   * @dev Emergency rescue for token stucked on this contract, as failsafe mechanism\\n   * - Funds should never remain in this contract more time than during transactions\\n   * - Only callable by the owner\\n   */\\n  function rescueTokens(IERC20 token) external onlyOwner {\\n    token.transfer(owner(), token.balanceOf(address(this)));\\n  }\\n}\\n\"},\"BaseParaSwapSellAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {BaseParaSwapAdapter} from \\u0027./BaseParaSwapAdapter.sol\\u0027;\\nimport {PercentageMath} from \\u0027./PercentageMath.sol\\u0027;\\nimport {IParaSwapAugustus} from \\u0027./IParaSwapAugustus.sol\\u0027;\\nimport {ILendingPoolAddressesProvider} from \\u0027./ILendingPoolAddressesProvider.sol\\u0027;\\nimport {IERC20} from \\u0027./IERC20.sol\\u0027;\\n\\n/**\\n * @title BaseParaSwapSellAdapter\\n * @notice Implements the logic for selling tokens on ParaSwap\\n * @author Jason Raymond Bell\\n */\\nabstract contract BaseParaSwapSellAdapter is BaseParaSwapAdapter {\\n  using PercentageMath for uint256;\\n\\n  constructor(\\n    ILendingPoolAddressesProvider addressesProvider\\n  ) public BaseParaSwapAdapter(addressesProvider) {\\n  }\\n\\n  /**\\n   * @dev Swaps a token for another using ParaSwap\\n   * @param fromAmountOffset Offset of fromAmount in Augustus calldata if it should be overwritten, otherwise 0\\n   * @param swapCalldata Calldata for ParaSwap\\u0027s AugustusSwapper contract\\n   * @param augustus Address of ParaSwap\\u0027s AugustusSwapper contract\\n   * @param assetToSwapFrom Address of the asset to be swapped from\\n   * @param assetToSwapTo Address of the asset to be swapped to\\n   * @param amountToSwap Amount to be swapped\\n   * @param minAmountToReceive Minimum amount to be received from the swap\\n   * @return amountReceived The amount received from the swap\\n   */\\n  function _sellOnParaSwap(\\n    uint256 fromAmountOffset,\\n    bytes memory swapCalldata,\\n    address augustus,\\n    address assetToSwapFrom,\\n    address assetToSwapTo,\\n    uint256 amountToSwap,\\n    uint256 minAmountToReceive\\n  ) internal returns (uint256 amountReceived) {\\n    {\\n      uint256 fromAssetDecimals = _getDecimals(assetToSwapFrom);\\n      uint256 toAssetDecimals = _getDecimals(assetToSwapTo);\\n\\n      uint256 fromAssetPrice = _getPrice(assetToSwapFrom);\\n      uint256 toAssetPrice = _getPrice(assetToSwapTo);\\n\\n      uint256 expectedMinAmountOut =\\n        amountToSwap\\n          .mul(fromAssetPrice.mul(10**toAssetDecimals))\\n          .div(toAssetPrice.mul(10**fromAssetDecimals))\\n          .percentMul(PercentageMath.PERCENTAGE_FACTOR - MAX_SLIPPAGE_PERCENT);\\n\\n      require(expectedMinAmountOut \\u003c= minAmountToReceive, \\u0027MIN_AMOUNT_EXCEEDS_MAX_SLIPPAGE\\u0027);\\n    }\\n\\n    uint256 balanceBeforeAssetFrom = IERC20(assetToSwapFrom).balanceOf(address(this));\\n    require(balanceBeforeAssetFrom \\u003e= amountToSwap, \\u0027INSUFFICIENT_BALANCE_BEFORE_SWAP\\u0027);\\n    uint256 balanceBeforeAssetTo = IERC20(assetToSwapTo).balanceOf(address(this));\\n\\n    address tokenTransferProxy = IParaSwapAugustus(augustus).getTokenTransferProxy();\\n    IERC20(assetToSwapFrom).safeApprove(tokenTransferProxy, 0);\\n    IERC20(assetToSwapFrom).safeApprove(tokenTransferProxy, amountToSwap);\\n\\n    if (fromAmountOffset != 0) {\\n      require(fromAmountOffset \\u003e= 4 \\u0026\\u0026\\n        fromAmountOffset \\u003c= swapCalldata.length.sub(32),\\n        \\u0027FROM_AMOUNT_OFFSET_OUT_OF_RANGE\\u0027);\\n      assembly {\\n        mstore(add(swapCalldata, add(fromAmountOffset, 32)), amountToSwap)\\n      }\\n    }\\n    (bool success,) = augustus.call(swapCalldata);\\n    if (!success) {\\n      // Copy revert reason from call\\n      assembly {\\n        returndatacopy(0, 0, returndatasize())\\n        revert(0, returndatasize())\\n      }\\n    }\\n    require(IERC20(assetToSwapFrom).balanceOf(address(this)) == balanceBeforeAssetFrom - amountToSwap, \\u0027WRONG_BALANCE_AFTER_SWAP\\u0027);\\n    amountReceived = IERC20(assetToSwapTo).balanceOf(address(this)).sub(balanceBeforeAssetTo);\\n    require(amountReceived \\u003e= minAmountToReceive, \\u0027INSUFFICIENT_AMOUNT_RECEIVED\\u0027);\\n\\n    emit Swapped(assetToSwapFrom, assetToSwapTo, amountToSwap, amountReceived);\\n  }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\"},\"DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\nlibrary DataTypes {\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n}\\n\"},\"Errors.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @title Errors library\\n * @author Aave\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (AToken, VariableDebtToken and StableDebtToken)\\n *  - AT = AToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - LP = LendingPool\\n *  - LPAPR = LendingPoolAddressesProviderRegistry\\n *  - LPC = LendingPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - LPCM = LendingPoolCollateralManager\\n *  - P = Pausable\\n */\\nlibrary Errors {\\n  //common errors\\n  string public constant CALLER_NOT_POOL_ADMIN = \\u002733\\u0027; // \\u0027The caller must be the pool admin\\u0027\\n  string public constant BORROW_ALLOWANCE_NOT_ENOUGH = \\u002759\\u0027; // User borrows on behalf, but allowance are too small\\n\\n  //contract specific errors\\n  string public constant VL_INVALID_AMOUNT = \\u00271\\u0027; // \\u0027Amount must be greater than 0\\u0027\\n  string public constant VL_NO_ACTIVE_RESERVE = \\u00272\\u0027; // \\u0027Action requires an active reserve\\u0027\\n  string public constant VL_RESERVE_FROZEN = \\u00273\\u0027; // \\u0027Action cannot be performed because the reserve is frozen\\u0027\\n  string public constant VL_CURRENT_AVAILABLE_LIQUIDITY_NOT_ENOUGH = \\u00274\\u0027; // \\u0027The current liquidity is not enough\\u0027\\n  string public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = \\u00275\\u0027; // \\u0027User cannot withdraw more than the available balance\\u0027\\n  string public constant VL_TRANSFER_NOT_ALLOWED = \\u00276\\u0027; // \\u0027Transfer cannot be allowed.\\u0027\\n  string public constant VL_BORROWING_NOT_ENABLED = \\u00277\\u0027; // \\u0027Borrowing is not enabled\\u0027\\n  string public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = \\u00278\\u0027; // \\u0027Invalid interest rate mode selected\\u0027\\n  string public constant VL_COLLATERAL_BALANCE_IS_0 = \\u00279\\u0027; // \\u0027The collateral balance is 0\\u0027\\n  string public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = \\u002710\\u0027; // \\u0027Health factor is lesser than the liquidation threshold\\u0027\\n  string public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = \\u002711\\u0027; // \\u0027There is not enough collateral to cover a new borrow\\u0027\\n  string public constant VL_STABLE_BORROWING_NOT_ENABLED = \\u002712\\u0027; // stable borrowing not enabled\\n  string public constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = \\u002713\\u0027; // collateral is (mostly) the same currency that is being borrowed\\n  string public constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = \\u002714\\u0027; // \\u0027The requested amount is greater than the max loan size in stable rate mode\\n  string public constant VL_NO_DEBT_OF_SELECTED_TYPE = \\u002715\\u0027; // \\u0027for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt\\u0027\\n  string public constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = \\u002716\\u0027; // \\u0027To repay on behalf of an user an explicit amount to repay is needed\\u0027\\n  string public constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = \\u002717\\u0027; // \\u0027User does not have a stable rate loan in progress on this reserve\\u0027\\n  string public constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = \\u002718\\u0027; // \\u0027User does not have a variable rate loan in progress on this reserve\\u0027\\n  string public constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = \\u002719\\u0027; // \\u0027The underlying balance needs to be greater than 0\\u0027\\n  string public constant VL_DEPOSIT_ALREADY_IN_USE = \\u002720\\u0027; // \\u0027User deposit is already being used as collateral\\u0027\\n  string public constant LP_NOT_ENOUGH_STABLE_BORROW_BALANCE = \\u002721\\u0027; // \\u0027User does not have any stable rate loan for this reserve\\u0027\\n  string public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = \\u002722\\u0027; // \\u0027Interest rate rebalance conditions were not met\\u0027\\n  string public constant LP_LIQUIDATION_CALL_FAILED = \\u002723\\u0027; // \\u0027Liquidation call failed\\u0027\\n  string public constant LP_NOT_ENOUGH_LIQUIDITY_TO_BORROW = \\u002724\\u0027; // \\u0027There is not enough liquidity available to borrow\\u0027\\n  string public constant LP_REQUESTED_AMOUNT_TOO_SMALL = \\u002725\\u0027; // \\u0027The requested amount is too small for a FlashLoan.\\u0027\\n  string public constant LP_INCONSISTENT_PROTOCOL_ACTUAL_BALANCE = \\u002726\\u0027; // \\u0027The actual balance of the protocol is inconsistent\\u0027\\n  string public constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = \\u002727\\u0027; // \\u0027The caller of the function is not the lending pool configurator\\u0027\\n  string public constant LP_INCONSISTENT_FLASHLOAN_PARAMS = \\u002728\\u0027;\\n  string public constant CT_CALLER_MUST_BE_LENDING_POOL = \\u002729\\u0027; // \\u0027The caller of this function must be a lending pool\\u0027\\n  string public constant CT_CANNOT_GIVE_ALLOWANCE_TO_HIMSELF = \\u002730\\u0027; // \\u0027User cannot give allowance to himself\\u0027\\n  string public constant CT_TRANSFER_AMOUNT_NOT_GT_0 = \\u002731\\u0027; // \\u0027Transferred amount needs to be greater than zero\\u0027\\n  string public constant RL_RESERVE_ALREADY_INITIALIZED = \\u002732\\u0027; // \\u0027Reserve has already been initialized\\u0027\\n  string public constant LPC_RESERVE_LIQUIDITY_NOT_0 = \\u002734\\u0027; // \\u0027The liquidity of the reserve needs to be 0\\u0027\\n  string public constant LPC_INVALID_ATOKEN_POOL_ADDRESS = \\u002735\\u0027; // \\u0027The liquidity of the reserve needs to be 0\\u0027\\n  string public constant LPC_INVALID_STABLE_DEBT_TOKEN_POOL_ADDRESS = \\u002736\\u0027; // \\u0027The liquidity of the reserve needs to be 0\\u0027\\n  string public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_POOL_ADDRESS = \\u002737\\u0027; // \\u0027The liquidity of the reserve needs to be 0\\u0027\\n  string public constant LPC_INVALID_STABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = \\u002738\\u0027; // \\u0027The liquidity of the reserve needs to be 0\\u0027\\n  string public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = \\u002739\\u0027; // \\u0027The liquidity of the reserve needs to be 0\\u0027\\n  string public constant LPC_INVALID_ADDRESSES_PROVIDER_ID = \\u002740\\u0027; // \\u0027The liquidity of the reserve needs to be 0\\u0027\\n  string public constant LPC_INVALID_CONFIGURATION = \\u002775\\u0027; // \\u0027Invalid risk parameters for the reserve\\u0027\\n  string public constant LPC_CALLER_NOT_EMERGENCY_ADMIN = \\u002776\\u0027; // \\u0027The caller must be the emergency admin\\u0027\\n  string public constant LPAPR_PROVIDER_NOT_REGISTERED = \\u002741\\u0027; // \\u0027Provider is not registered\\u0027\\n  string public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = \\u002742\\u0027; // \\u0027Health factor is not below the threshold\\u0027\\n  string public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = \\u002743\\u0027; // \\u0027The collateral chosen cannot be liquidated\\u0027\\n  string public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = \\u002744\\u0027; // \\u0027User did not borrow the specified currency\\u0027\\n  string public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = \\u002745\\u0027; // \\\"There isn\\u0027t enough liquidity available to liquidate\\\"\\n  string public constant LPCM_NO_ERRORS = \\u002746\\u0027; // \\u0027No errors\\u0027\\n  string public constant LP_INVALID_FLASHLOAN_MODE = \\u002747\\u0027; //Invalid flashloan mode selected\\n  string public constant MATH_MULTIPLICATION_OVERFLOW = \\u002748\\u0027;\\n  string public constant MATH_ADDITION_OVERFLOW = \\u002749\\u0027;\\n  string public constant MATH_DIVISION_BY_ZERO = \\u002750\\u0027;\\n  string public constant RL_LIQUIDITY_INDEX_OVERFLOW = \\u002751\\u0027; //  Liquidity index overflows uint128\\n  string public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = \\u002752\\u0027; //  Variable borrow index overflows uint128\\n  string public constant RL_LIQUIDITY_RATE_OVERFLOW = \\u002753\\u0027; //  Liquidity rate overflows uint128\\n  string public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = \\u002754\\u0027; //  Variable borrow rate overflows uint128\\n  string public constant RL_STABLE_BORROW_RATE_OVERFLOW = \\u002755\\u0027; //  Stable borrow rate overflows uint128\\n  string public constant CT_INVALID_MINT_AMOUNT = \\u002756\\u0027; //invalid amount to mint\\n  string public constant LP_FAILED_REPAY_WITH_COLLATERAL = \\u002757\\u0027;\\n  string public constant CT_INVALID_BURN_AMOUNT = \\u002758\\u0027; //invalid amount to burn\\n  string public constant LP_FAILED_COLLATERAL_SWAP = \\u002760\\u0027;\\n  string public constant LP_INVALID_EQUAL_ASSETS_TO_SWAP = \\u002761\\u0027;\\n  string public constant LP_REENTRANCY_NOT_ALLOWED = \\u002762\\u0027;\\n  string public constant LP_CALLER_MUST_BE_AN_ATOKEN = \\u002763\\u0027;\\n  string public constant LP_IS_PAUSED = \\u002764\\u0027; // \\u0027Pool is paused\\u0027\\n  string public constant LP_NO_MORE_RESERVES_ALLOWED = \\u002765\\u0027;\\n  string public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = \\u002766\\u0027;\\n  string public constant RC_INVALID_LTV = \\u002767\\u0027;\\n  string public constant RC_INVALID_LIQ_THRESHOLD = \\u002768\\u0027;\\n  string public constant RC_INVALID_LIQ_BONUS = \\u002769\\u0027;\\n  string public constant RC_INVALID_DECIMALS = \\u002770\\u0027;\\n  string public constant RC_INVALID_RESERVE_FACTOR = \\u002771\\u0027;\\n  string public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = \\u002772\\u0027;\\n  string public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = \\u002773\\u0027;\\n  string public constant LP_INCONSISTENT_PARAMS_LENGTH = \\u002774\\u0027;\\n  string public constant UL_INVALID_INDEX = \\u002777\\u0027;\\n  string public constant LP_NOT_CONTRACT = \\u002778\\u0027;\\n  string public constant SDT_STABLE_DEBT_OVERFLOW = \\u002779\\u0027;\\n  string public constant SDT_BURN_EXCEEDS_BALANCE = \\u002780\\u0027;\\n\\n  enum CollateralManagerErrors {\\n    NO_ERROR,\\n    NO_COLLATERAL_AVAILABLE,\\n    COLLATERAL_CANNOT_BE_LIQUIDATED,\\n    CURRRENCY_NOT_BORROWED,\\n    HEALTH_FACTOR_ABOVE_THRESHOLD,\\n    NOT_ENOUGH_LIQUIDITY,\\n    NO_ACTIVE_RESERVE,\\n    HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD,\\n    INVALID_EQUAL_ASSETS_TO_SWAP,\\n    FROZEN_RESERVE\\n  }\\n}\\n\"},\"FlashLoanReceiverBase.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\nimport {SafeMath} from \\u0027./SafeMath.sol\\u0027;\\nimport {IERC20} from \\u0027./IERC20.sol\\u0027;\\nimport {SafeERC20} from \\u0027./SafeERC20.sol\\u0027;\\nimport {IFlashLoanReceiver} from \\u0027./IFlashLoanReceiver.sol\\u0027;\\nimport {ILendingPoolAddressesProvider} from \\u0027./ILendingPoolAddressesProvider.sol\\u0027;\\nimport {ILendingPool} from \\u0027./ILendingPool.sol\\u0027;\\n\\nabstract contract FlashLoanReceiverBase is IFlashLoanReceiver {\\n  using SafeERC20 for IERC20;\\n  using SafeMath for uint256;\\n\\n  ILendingPoolAddressesProvider public immutable override ADDRESSES_PROVIDER;\\n  ILendingPool public immutable override LENDING_POOL;\\n\\n  constructor(ILendingPoolAddressesProvider provider) public {\\n    ADDRESSES_PROVIDER = provider;\\n    LENDING_POOL = ILendingPool(provider.getLendingPool());\\n  }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\nimport {IERC20} from \\u0027./IERC20.sol\\u0027;\\n\\ninterface IERC20Detailed is IERC20 {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n}\\n\"},\"IERC20WithPermit.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\nimport {IERC20} from \\u0027./IERC20.sol\\u0027;\\n\\ninterface IERC20WithPermit is IERC20 {\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n}\\n\"},\"IFlashLoanReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\nimport {ILendingPoolAddressesProvider} from \\u0027./ILendingPoolAddressesProvider.sol\\u0027;\\nimport {ILendingPool} from \\u0027./ILendingPool.sol\\u0027;\\n\\n/**\\n * @title IFlashLoanReceiver interface\\n * @notice Interface for the Aave fee IFlashLoanReceiver.\\n * @author Aave\\n * @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract\\n **/\\ninterface IFlashLoanReceiver {\\n  function executeOperation(\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata premiums,\\n    address initiator,\\n    bytes calldata params\\n  ) external returns (bool);\\n\\n  function ADDRESSES_PROVIDER() external view returns (ILendingPoolAddressesProvider);\\n\\n  function LENDING_POOL() external view returns (ILendingPool);\\n}\\n\"},\"ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from \\u0027./ILendingPoolAddressesProvider.sol\\u0027;\\nimport {DataTypes} from \\u0027./DataTypes.sol\\u0027;\\n\\ninterface ILendingPool {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the deposit\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n   * @param amount The amount deposited\\n   * @param referral The referral code used\\n   **/\\n  event Deposit(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to Address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed\\n   * @param referral The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint256 borrowRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address indexed initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    uint256 premium,\\n    uint16 referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when the pause is triggered.\\n   */\\n  event Paused();\\n\\n  /**\\n   * @dev Emitted when the pause is lifted.\\n   */\\n  event Unpaused();\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n   * LendingPoolCollateral manager using a DELEGATECALL\\n   * This allows to have the events in the generated ABI for LendingPool.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n   * gets added to the LendingPool ABI\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The new liquidity rate\\n   * @param stableBorrowRate The new stable borrow rate\\n   * @param variableBorrowRate The new variable borrow rate\\n   * @param liquidityIndex The new liquidity index\\n   * @param variableBorrowIndex The new variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 rateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n  /**\\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n   *        borrowed at a stable rate and depositors are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n   * @param asset The address of the underlying asset deposited\\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n   * For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts amounts being flash-borrowed\\n   * @param modes Types of the debt to open if the flash loan is not returned:\\n   *   0 -\\u003e Don\\u0027t open any debt, just revert if funds can\\u0027t be transferred from the receiver\\n   *   1 -\\u003e Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -\\u003e Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata modes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralETH the total collateral in ETH of the user\\n   * @return totalDebtETH the total debt in ETH of the user\\n   * @return availableBorrowsETH the borrowing power left of the user\\n   * @return currentLiquidationThreshold the liquidation threshold of the user\\n   * @return ltv the loan to value of the user\\n   * @return healthFactor the current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralETH,\\n      uint256 totalDebtETH,\\n      uint256 availableBorrowsETH,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  function initReserve(\\n    address reserve,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\\n    external;\\n\\n  function setConfiguration(address reserve, uint256 configuration) external;\\n\\n  /**\\n   * @dev Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve\\u0027s normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromAfter,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  function getReservesList() external view returns (address[] memory);\\n\\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n  function setPause(bool val) external;\\n\\n  function paused() external view returns (bool);\\n}\\n\"},\"ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n  event MarketIdSet(string newMarketId);\\n  event LendingPoolUpdated(address indexed newAddress);\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n  event PriceOracleUpdated(address indexed newAddress);\\n  event LendingRateOracleUpdated(address indexed newAddress);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n  function getMarketId() external view returns (string memory);\\n\\n  function setMarketId(string calldata marketId) external;\\n\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function setLendingPoolImpl(address pool) external;\\n\\n  function getLendingPoolConfigurator() external view returns (address);\\n\\n  function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n  function getLendingPoolCollateralManager() external view returns (address);\\n\\n  function setLendingPoolCollateralManager(address manager) external;\\n\\n  function getPoolAdmin() external view returns (address);\\n\\n  function setPoolAdmin(address admin) external;\\n\\n  function getEmergencyAdmin() external view returns (address);\\n\\n  function setEmergencyAdmin(address admin) external;\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function setPriceOracle(address priceOracle) external;\\n\\n  function getLendingRateOracle() external view returns (address);\\n\\n  function setLendingRateOracle(address lendingRateOracle) external;\\n}\\n\"},\"IParaSwapAugustus.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IParaSwapAugustus {\\n  function getTokenTransferProxy() external view returns (address);\\n}\\n\"},\"IPriceOracleGetter.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @title IPriceOracleGetter interface\\n * @notice Interface for the Aave price oracle.\\n **/\\n\\ninterface IPriceOracleGetter {\\n  /**\\n   * @dev returns the asset price in ETH\\n   * @param asset the address of the asset\\n   * @return the ETH price of the asset\\n   **/\\n  function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\u0027./Context.sol\\u0027;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor() internal {\\n    address msgSender = _msgSender();\\n    _owner = msgSender;\\n    emit OwnershipTransferred(address(0), msgSender);\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_owner == _msgSender(), \\u0027Ownable: caller is not the owner\\u0027);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    emit OwnershipTransferred(_owner, address(0));\\n    _owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(newOwner != address(0), \\u0027Ownable: new owner is the zero address\\u0027);\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\\n\"},\"ParaSwapLiquiditySwapAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {BaseParaSwapSellAdapter} from \\u0027./BaseParaSwapSellAdapter.sol\\u0027;\\nimport {ILendingPoolAddressesProvider} from \\u0027./ILendingPoolAddressesProvider.sol\\u0027;\\nimport {IERC20} from \\u0027./IERC20.sol\\u0027;\\n\\n/**\\n * @title ParaSwapLiquiditySwapAdapter\\n * @notice Adapter to swap liquidity using ParaSwap.\\n * @author Jason Raymond Bell\\n */\\ncontract ParaSwapLiquiditySwapAdapter is BaseParaSwapSellAdapter {\\n  constructor(\\n    ILendingPoolAddressesProvider addressesProvider\\n  ) public BaseParaSwapSellAdapter(addressesProvider) {}\\n\\n  /**\\n   * @dev Swaps the received reserve amount from the flash loan into the asset specified in the params.\\n   * The received funds from the swap are then deposited into the protocol on behalf of the user.\\n   * The user should give this contract allowance to pull the ATokens in order to withdraw the underlying asset and repay the flash loan.\\n   * @param assets Address of the underlying asset to be swapped from\\n   * @param amounts Amount of the flash loan i.e. maximum amount to swap\\n   * @param premiums Fee of the flash loan\\n   * @param initiator Account that initiated the flash loan\\n   * @param params Additional variadic field to include extra params. Expected parameters:\\n   *   address assetToSwapTo Address of the underlying asset to be swapped to and deposited\\n   *   uint256 minAmountToReceive Min amount to be received from the swap\\n   *   uint256 swapAllBalanceOffset Set to offset of fromAmount in Augustus calldata if wanting to swap all balance, otherwise 0\\n   *   bytes swapCalldata Calldata for ParaSwap\\u0027s AugustusSwapper contract\\n   *   address augustus Address of ParaSwap\\u0027s AugustusSwapper contract\\n   *   PermitSignature permitParams Struct containing the permit signatures, set to all zeroes if not used\\n   */\\n  function executeOperation(\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata premiums,\\n    address initiator,\\n    bytes calldata params\\n  ) external override returns (bool) {\\n    require(msg.sender == address(LENDING_POOL), \\u0027CALLER_MUST_BE_LENDING_POOL\\u0027);\\n    require(assets.length == 1, \\u0027FLASHLOAN_MULTIPLE_ASSETS_NOT_SUPPORTED\\u0027);\\n\\n    uint256 flashLoanAmount = amounts[0];\\n    uint256 premium = premiums[0];\\n    address initiatorLocal = initiator;\\n    address assetToSwapFrom = assets[0];\\n    (\\n      address assetToSwapTo,\\n      uint256 minAmountToReceive,\\n      uint256 swapAllBalanceOffset,\\n      bytes memory swapCalldata,\\n      address augustus,\\n      PermitSignature memory permitParams\\n    ) = abi.decode(params, (address, uint256, uint256, bytes, address, PermitSignature));\\n\\n    _swapLiquidity(\\n      swapAllBalanceOffset,\\n      swapCalldata,\\n      augustus,\\n      permitParams,\\n      flashLoanAmount,\\n      premium,\\n      initiatorLocal,\\n      assetToSwapFrom,\\n      assetToSwapTo,\\n      minAmountToReceive\\n    );\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Swaps an amount of an asset to another and deposits the new asset amount on behalf of the user without using a flash loan.\\n   * This method can be used when the temporary transfer of the collateral asset to this contract does not affect the user position.\\n   * The user should give this contract allowance to pull the ATokens in order to withdraw the underlying asset and perform the swap.\\n   * @param assetToSwapFrom Address of the underlying asset to be swapped from\\n   * @param assetToSwapTo Address of the underlying asset to be swapped to and deposited\\n   * @param amountToSwap Amount to be swapped, or maximum amount when swapping all balance\\n   * @param minAmountToReceive Minimum amount to be received from the swap\\n   * @param swapAllBalanceOffset Set to offset of fromAmount in Augustus calldata if wanting to swap all balance, otherwise 0\\n   * @param swapCalldata Calldata for ParaSwap\\u0027s AugustusSwapper contract\\n   * @param augustus Address of ParaSwap\\u0027s AugustusSwapper contract\\n   * @param permitParams Struct containing the permit signatures, set to all zeroes if not used\\n   */\\n  function swapAndDeposit(\\n    address assetToSwapFrom,\\n    address assetToSwapTo,\\n    uint256 amountToSwap,\\n    uint256 minAmountToReceive,\\n    uint256 swapAllBalanceOffset,\\n    bytes calldata swapCalldata,\\n    address augustus,\\n    PermitSignature calldata permitParams\\n  ) external {\\n    address aToken = _getReserveData(assetToSwapFrom).aTokenAddress;\\n\\n    if (swapAllBalanceOffset != 0) {\\n      uint256 balance = IERC20(aToken).balanceOf(msg.sender);\\n      require(balance \\u003c= amountToSwap, \\u0027INSUFFICIENT_AMOUNT_TO_SWAP\\u0027);\\n      amountToSwap = balance;\\n    }\\n\\n    _pullAToken(\\n      assetToSwapFrom,\\n      aToken,\\n      msg.sender,\\n      amountToSwap,\\n      permitParams\\n    );\\n\\n    uint256 amountReceived = _sellOnParaSwap(\\n      swapAllBalanceOffset,\\n      swapCalldata,\\n      augustus,\\n      assetToSwapFrom,\\n      assetToSwapTo,\\n      amountToSwap,\\n      minAmountToReceive\\n    );\\n\\n    IERC20(assetToSwapTo).safeApprove(address(LENDING_POOL), 0);\\n    IERC20(assetToSwapTo).safeApprove(address(LENDING_POOL), amountReceived);\\n    LENDING_POOL.deposit(assetToSwapTo, amountReceived, msg.sender, 0);\\n  }\\n\\n  /**\\n   * @dev Swaps an amount of an asset to another and deposits the funds on behalf of the initiator.\\n   * @param swapAllBalanceOffset Set to offset of fromAmount in Augustus calldata if wanting to swap all balance, otherwise 0\\n   * @param swapCalldata Calldata for ParaSwap\\u0027s AugustusSwapper contract\\n   * @param augustus Address of ParaSwap\\u0027s AugustusSwapper contract\\n   * @param permitParams Struct containing the permit signatures, set to all zeroes if not used\\n   * @param flashLoanAmount Amount of the flash loan i.e. maximum amount to swap\\n   * @param premium Fee of the flash loan\\n   * @param initiator Account that initiated the flash loan\\n   * @param assetToSwapFrom Address of the underyling asset to be swapped from\\n   * @param assetToSwapTo Address of the underlying asset to be swapped to and deposited\\n   * @param minAmountToReceive Min amount to be received from the swap\\n   */\\n  function _swapLiquidity (\\n    uint256 swapAllBalanceOffset,\\n    bytes memory swapCalldata,\\n    address augustus,\\n    PermitSignature memory permitParams,\\n    uint256 flashLoanAmount,\\n    uint256 premium,\\n    address initiator,\\n    address assetToSwapFrom,\\n    address assetToSwapTo,\\n    uint256 minAmountToReceive\\n  ) internal {\\n    address aToken = _getReserveData(assetToSwapFrom).aTokenAddress;\\n    uint256 amountToSwap = flashLoanAmount;\\n\\n    uint256 balance = IERC20(aToken).balanceOf(initiator);\\n    if (swapAllBalanceOffset != 0) {\\n      uint256 balanceToSwap = balance.sub(premium);\\n      require(balanceToSwap \\u003c= amountToSwap, \\u0027INSUFFICIENT_AMOUNT_TO_SWAP\\u0027);\\n      amountToSwap = balanceToSwap;\\n    } else {\\n      require(balance \\u003e= amountToSwap.add(premium), \\u0027INSUFFICIENT_ATOKEN_BALANCE\\u0027);\\n    }\\n\\n    uint256 amountReceived = _sellOnParaSwap(\\n      swapAllBalanceOffset,\\n      swapCalldata,\\n      augustus,\\n      assetToSwapFrom,\\n      assetToSwapTo,\\n      amountToSwap,\\n      minAmountToReceive\\n    );\\n\\n    IERC20(assetToSwapTo).safeApprove(address(LENDING_POOL), 0);\\n    IERC20(assetToSwapTo).safeApprove(address(LENDING_POOL), amountReceived);\\n    LENDING_POOL.deposit(assetToSwapTo, amountReceived, initiator, 0);\\n\\n    _pullAToken(\\n      assetToSwapFrom,\\n      aToken,\\n      initiator,\\n      amountToSwap.add(premium),\\n      permitParams\\n    );\\n\\n    // Repay flash loan\\n    IERC20(assetToSwapFrom).safeApprove(address(LENDING_POOL), 0);\\n    IERC20(assetToSwapFrom).safeApprove(address(LENDING_POOL), flashLoanAmount.add(premium));\\n  }\\n}\\n\"},\"PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\nimport {Errors} from \\u0027./Errors.sol\\u0027;\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded half up\\n **/\\n\\nlibrary PercentageMath {\\n  uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n  uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\n\\n  /**\\n   * @dev Executes a percentage multiplication\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The percentage of value\\n   **/\\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    if (value == 0 || percentage == 0) {\\n      return 0;\\n    }\\n\\n    require(\\n      value \\u003c= (type(uint256).max - HALF_PERCENT) / percentage,\\n      Errors.MATH_MULTIPLICATION_OVERFLOW\\n    );\\n\\n    return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\\n  }\\n\\n  /**\\n   * @dev Executes a percentage division\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The value divided the percentage\\n   **/\\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    require(percentage != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfPercentage = percentage / 2;\\n\\n    require(\\n      value \\u003c= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR,\\n      Errors.MATH_MULTIPLICATION_OVERFLOW\\n    );\\n\\n    return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\n  }\\n}\\n\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport {IERC20} from \\u0027./IERC20.sol\\u0027;\\nimport {SafeMath} from \\u0027./SafeMath.sol\\u0027;\\nimport {Address} from \\u0027./Address.sol\\u0027;\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\u0027SafeERC20: approve from non-zero to non-zero allowance\\u0027\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), \\u0027SafeERC20: call to non-contract\\u0027);\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, \\u0027SafeERC20: low-level call failed\\u0027);\\n\\n    if (returndata.length \\u003e 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), \\u0027SafeERC20: ERC20 operation did not succeed\\u0027);\\n    }\\n  }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity\\u0027s `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c \\u003e= a, \\u0027SafeMath: addition overflow\\u0027);\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity\\u0027s `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, \\u0027SafeMath: subtraction overflow\\u0027);\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity\\u0027s `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b \\u003c= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity\\u0027s `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n    // benefit is lost if \\u0027b\\u0027 is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\u0027SafeMath: multiplication overflow\\u0027);\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, \\u0027SafeMath: division by zero\\u0027);\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b \\u003e 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, \\u0027SafeMath: modulo by zero\\u0027);\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"addressesProvider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LENDING_POOL\",\"outputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SLIPPAGE_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE\",\"outputs\":[{\"internalType\":\"contract IPriceOracleGetter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetToSwapFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetToSwapTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountToReceive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapAllBalanceOffset\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"swapCalldata\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"augustus\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct BaseParaSwapAdapter.PermitSignature\",\"name\":\"permitParams\",\"type\":\"tuple\"}],\"name\":\"swapAndDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ParaSwapLiquiditySwapAdapter","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b53c1a33016b2dc2ff3653530bff1848a515c8c5","EVMVersion":"istanbul","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://81fc1e59295a092d340f07694112d1726b15eac28aaaddf76c5215d25db99fe0"}]}