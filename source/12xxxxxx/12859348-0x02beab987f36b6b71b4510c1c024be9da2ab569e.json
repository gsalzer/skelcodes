{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.7;\r\n\r\ncontract GebAuth {\r\n    // --- Authorization ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"GebAuth/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n\r\n    constructor () public {\r\n        authorizedAccounts[msg.sender] = 1;\r\n        emit AddAuthorization(msg.sender);\r\n    }\r\n}\r\n\r\nabstract contract RateSetterLike {\r\n    function modifyParameters(bytes32, address) virtual external;\r\n}\r\ncontract MinimalRateSetterOverlay is GebAuth {\r\n    address        public pCalculator;\r\n    address        public piCalculator;\r\n\r\n    RateSetterLike public rateSetter;\r\n\r\n    constructor(address rateSetter_, address pCalculator_, address piCalculator_) public {\r\n        require(rateSetter_ != address(0), \"MinimalRateSetterOverlay/null-address\");\r\n        require(both(pCalculator_ != address(0), piCalculator_ != address(0)), \"MinimalRateSetterOverlay/null-calculators\");\r\n\r\n        rateSetter   = RateSetterLike(rateSetter_);\r\n        pCalculator  = pCalculator_;\r\n        piCalculator = piCalculator_;\r\n    }\r\n\r\n    // --- Boolean Logic ---\r\n    function both(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := and(x, y)}\r\n    }\r\n    function either(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := or(x, y)}\r\n    }\r\n\r\n    /*\r\n    * @notify Change address params\r\n    * @param parameter The name of the parameter to change\r\n    * @param data The new address for the orcl\r\n    */\r\n    function modifyParameters(bytes32 parameter, address data) external isAuthorized {\r\n        if (parameter == \"orcl\") {\r\n          rateSetter.modifyParameters(parameter, data);\r\n        } else if (parameter == \"pidCalculator\") {\r\n          require(either(data == pCalculator, data == piCalculator), \"MinimalRateSetterOverlay/invalid-calculator-address\");\r\n          rateSetter.modifyParameters(parameter, data);\r\n        } else revert(\"MinimalRateSetterOverlay/modify-forbidden-param\");\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rateSetter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pCalculator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"piCalculator_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pCalculator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"piCalculator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateSetter\",\"outputs\":[{\"internalType\":\"contract RateSetterLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MinimalRateSetterOverlay","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007acfc14dbf2decd1c9213db32ae7784626daeb480000000000000000000000000564aecea06a74caa67a4c4c37087851eef56c290000000000000000000000000564aecea06a74caa67a4c4c37087851eef56c29","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://35b19213e3c8d76bfdaa2a356b6b460633f90be813c16777565f4f633040de4f"}]}