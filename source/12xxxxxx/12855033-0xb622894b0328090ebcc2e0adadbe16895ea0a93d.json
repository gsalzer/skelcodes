{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of Vegion Token.\r\n * @author Vegion Team\r\n */\r\ncontract VegionToken is Context, IERC20, IERC20Metadata, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => uint256) private _freezes;\r\n    mapping(address => bool) private _addressExists;\r\n    mapping(uint256 => address) private _addresses;\r\n    uint256 private _addressCount = 0;\r\n    address private _addressDev;\r\n    address private _addressAd;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private _totalBurn;\r\n    uint256 private _burnStop;\r\n\r\n    string private _name = \"VegionToken\";\r\n    string private _symbol = \"VT\";\r\n\r\n    mapping(address => bool) private _addressNoAirdrop;\r\n    mapping(address => uint256) private _addressAirdrop;\r\n    uint256 private _totalAirdrop = 0;\r\n    uint256 private _totalVt = 0;\r\n\r\n    uint256 private _adBatchEnd = 0;\r\n    uint256 private _adBatchLast = 0;\r\n    uint256 private _adBatchTotal = 0;\r\n    uint256 private _adBatchVtTotal = 0;\r\n\r\n    mapping(address => bool) private _admins;\r\n\r\n    /**\r\n     * @dev constructor\r\n     */\r\n    constructor(address addressDev, address addressAd) {\r\n        require(addressDev != address(0), \"constructor: dev address error\");\r\n        require(addressAd != address(0), \"constructor: airdrop address error\");\r\n        require(\r\n            addressDev != addressAd,\r\n            \"constructor: dev and airdrop not same\"\r\n        );\r\n        _totalSupply = 100_000_000 * 10**decimals();\r\n        _totalBurn = 0;\r\n        _burnStop = 2_100_000 * 10**decimals();\r\n        // owner\r\n        _addressExists[_msgSender()] = true;\r\n        _addresses[_addressCount++] = _msgSender();\r\n        // dev\r\n        if (!_addressExists[addressDev]) {\r\n            _addressExists[addressDev] = true;\r\n            _addresses[_addressCount++] = addressDev;\r\n        }\r\n        _addressDev = addressDev;\r\n        // airdrop\r\n        if (!_addressExists[addressAd]) {\r\n            _addressExists[addressAd] = true;\r\n            _addresses[_addressCount++] = addressAd;\r\n        }\r\n        _addressAd = addressAd;\r\n\r\n        _admins[_msgSender()] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 8;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev totalBurn.\r\n     */\r\n    function totalBurn() public view virtual returns (uint256) {\r\n        return _totalBurn;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transferBurn(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"transferFrom: transfer amount exceeds allowance\"\r\n        );\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        _transfer(sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"decreaseAllowance: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev burn\r\n     */\r\n    function burn(uint256 amount) public virtual returns (bool) {\r\n        _burn(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev get address count\r\n     */\r\n    function addressCount() public view onlyAdmin returns (uint256) {\r\n        return _addressCount;\r\n    }\r\n\r\n    /**\r\n     * @dev check if address exist\r\n     */\r\n    function isAddressExist(address target)\r\n        public\r\n        view\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        return _addressExists[target];\r\n    }\r\n\r\n    /**\r\n     * @dev total airdrop vt\r\n     */\r\n    function totalAirdrop() public view onlyAdmin returns (uint256) {\r\n        return _totalAirdrop;\r\n    }\r\n\r\n    /**\r\n     * @dev total address vt\r\n     */\r\n    function totalVt() public view onlyAdmin returns (uint256) {\r\n        return _totalVt;\r\n    }\r\n\r\n    /**\r\n     * airdrop\r\n     */\r\n    function airdrop(address recipient, uint256 amount)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        require(\r\n            recipient != address(0),\r\n            \"airdrop: airdrop to the zero address\"\r\n        );\r\n\r\n        // if recipient not exist\r\n        if (!_addressExists[recipient]) {\r\n            _addressExists[recipient] = true;\r\n            _addresses[_addressCount++] = recipient;\r\n        }\r\n        _balances[recipient] += amount;\r\n        _totalVt += amount;\r\n        emit Transfer(address(0), recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * airdrops\r\n     */\r\n    function airdrops(address[] memory recipients, uint256[] memory amounts)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        require(\r\n            recipients.length == amounts.length,\r\n            \"airdrops: length not equal\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            if (recipients[i] != address(0)) {\r\n                airdrop(recipients[i], amounts[i]);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * airdropAll\r\n     */\r\n    function airdropAll() public onlyAdmin returns (bool) {\r\n        _airdrop(0, _addressCount, _totalAirdrop, _totalVt);\r\n        _totalAirdrop = 0;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * airdrop batch\r\n     */\r\n    function airdropBatch(uint256 count) public onlyAdmin returns (bool) {\r\n        if (_adBatchTotal <= 0) {\r\n            require(\r\n                _totalAirdrop > 0,\r\n                \"airdropBatch: airdrop total should bigger than zero\"\r\n            );\r\n            _adBatchTotal = _totalAirdrop;\r\n            _adBatchVtTotal = _totalVt;\r\n            _adBatchEnd = _addressCount;\r\n            _adBatchLast = 0;\r\n\r\n            _totalAirdrop = 0;\r\n        }\r\n\r\n        uint256 end = _adBatchLast + count >= _adBatchEnd\r\n            ? _adBatchEnd\r\n            : _adBatchLast + count;\r\n\r\n        _airdrop(_adBatchLast, end, _adBatchTotal, _adBatchVtTotal);\r\n\r\n        if (end >= _adBatchEnd) {\r\n            _adBatchTotal = 0;\r\n            _adBatchVtTotal = 0;\r\n            _adBatchEnd = 0;\r\n            _adBatchLast = 0;\r\n        } else {\r\n            _adBatchLast = end;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * address can get airdrop or not\r\n     */\r\n    function isAddressNoAirdrop(address target)\r\n        public\r\n        view\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        return _addressNoAirdrop[target];\r\n    }\r\n\r\n    /**\r\n     * address airdrop\r\n     */\r\n    function addressAirdrop() public view returns (uint256) {\r\n        return _addressAirdrop[_msgSender()];\r\n    }\r\n\r\n    /**\r\n     * receive airdrop\r\n     */\r\n    function receiveAirdrop() public returns (bool) {\r\n        require(\r\n            _addressAirdrop[_msgSender()] > 0,\r\n            \"receiveAirdrop: no wait receive airdrop vt\"\r\n        );\r\n        uint256 waitReceive = _addressAirdrop[_msgSender()];\r\n        require(\r\n            _balances[_addressAd] >= waitReceive,\r\n            \"receiveAirdrop: not enough airdrop vt\"\r\n        );\r\n        _balances[_msgSender()] += waitReceive;\r\n        _addressAirdrop[_msgSender()] = 0;\r\n        _balances[_addressAd] -= waitReceive;\r\n        _totalVt += waitReceive;\r\n        emit Transfer(_addressAd, _msgSender(), waitReceive);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * setNoAirdrop for target address\r\n     */\r\n    function setNoAirdrop(address target, bool noAirdrop)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        require(\r\n            _addressNoAirdrop[target] != noAirdrop,\r\n            \"setNoAirdrop: same setting.\"\r\n        );\r\n        _addressNoAirdrop[target] = noAirdrop;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * freeze\r\n     */\r\n    function freeze(address target, uint256 amount)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        require(_balances[target] >= amount, \"freeze: freeze amount error\");\r\n\r\n        _balances[target] -= amount;\r\n        _freezes[target] += amount;\r\n        _totalVt -= amount;\r\n        emit Freeze(target, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * unfreeze\r\n     */\r\n    function unfreeze(address target, uint256 amount)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        require(_freezes[target] >= amount, \"unfreeze: unfreeze amount error\");\r\n\r\n        _balances[target] += amount;\r\n        _freezes[target] -= amount;\r\n        _totalVt += amount;\r\n        emit Unfreeze(target, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-freezeOf}.\r\n     */\r\n    function freezeOf(address account) public view returns (uint256) {\r\n        return _freezes[account];\r\n    }\r\n\r\n    /**\r\n     * @dev get dev\r\n     */\r\n    function getAddressDev() public view onlyAdmin returns (address) {\r\n        return _addressDev;\r\n    }\r\n\r\n    /**\r\n     * @dev set new dev\r\n     */\r\n    function transferDev(address newDev) public onlyAdmin returns (bool) {\r\n        require(newDev != address(0), \"transferDev: new address zero\");\r\n        if (!_addressExists[newDev]) {\r\n            _addressExists[newDev] = true;\r\n            _addresses[_addressCount++] = newDev;\r\n        }\r\n        uint256 amount = _balances[_addressDev];\r\n        address oldDev = _addressDev;\r\n        _balances[newDev] = amount;\r\n        _balances[oldDev] = 0;\r\n        _addressDev = newDev;\r\n\r\n        emit Transfer(oldDev, newDev, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev get ad\r\n     */\r\n    function getAddressAd() public view onlyAdmin returns (address) {\r\n        return _addressAd;\r\n    }\r\n\r\n    /**\r\n     * @dev set new ad\r\n     */\r\n    function transferAd(address newAd) public onlyAdmin returns (bool) {\r\n        require(newAd != address(0), \"transferAd: new address zero\");\r\n        if (!_addressExists[newAd]) {\r\n            _addressExists[newAd] = true;\r\n            _addresses[_addressCount++] = newAd;\r\n        }\r\n        uint256 amount = _balances[_addressAd];\r\n        address oldAd = _addressAd;\r\n        _balances[newAd] = amount;\r\n        _balances[oldAd] = 0;\r\n        _addressAd = newAd;\r\n\r\n        emit Transfer(oldAd, newAd, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev admin modifier\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(_admins[_msgSender()], \"onlyAdmin: caller is not the admin\");\r\n        _;\r\n    }\r\n\r\n    function addAdmin(address admin) public onlyOwner {\r\n        require(admin != address(0), \"addAdmin: admin is not zero\");\r\n        require(!_admins[admin], \"addAdmin: admin is already admin\");\r\n        _admins[admin] = true;\r\n    }\r\n\r\n    function removeAdmin(address admin) public onlyOwner {\r\n        require(admin != address(0), \"removeAdmin: admin is not zero\");\r\n        require(_admins[admin], \"removeAdmin: admin is not admin\");\r\n        _admins[admin] = false;\r\n    }\r\n\r\n    function isAdmin(address admin) public view onlyOwner returns (bool) {\r\n        return _admins[admin];\r\n    }\r\n\r\n    function _airdrop(\r\n        uint256 start,\r\n        uint256 end,\r\n        uint256 adTotal,\r\n        uint256 vtTotal\r\n    ) internal {\r\n        require(end > start, \"_airdrop: end should bigger than start\");\r\n        require(adTotal > 0, \"_airdrop: airdrop total should bigger than zero\");\r\n        require(vtTotal > 0, \"_airdrop: vt total should bigger than zero\");\r\n\r\n        for (uint256 i = start; i < end; i++) {\r\n            address addr = _addresses[i];\r\n            uint256 balance = _balances[addr];\r\n            if (balance > 0 && addr != _addressAd) {\r\n                uint256 airdropVt = (adTotal * balance) / vtTotal;\r\n                if (_addressNoAirdrop[addr]) {\r\n                    _totalSupply -= airdropVt;\r\n                    _totalBurn += airdropVt;\r\n                    emit Transfer(_addressAd, address(0), airdropVt);\r\n                } else {\r\n                    _addressAirdrop[addr] += airdropVt;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(\r\n            sender != address(0),\r\n            \"_transfer: transfer from the zero address\"\r\n        );\r\n        require(\r\n            recipient != address(0),\r\n            \"_transfer: transfer to the zero address\"\r\n        );\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(\r\n            senderBalance >= amount,\r\n            \"_transfer: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n\r\n        // if recipient not exist\r\n        if (!_addressExists[recipient]) {\r\n            _addressExists[recipient] = true;\r\n            _addresses[_addressCount++] = recipient;\r\n        }\r\n\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     */\r\n    function _transferBurn(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(\r\n            sender != address(0),\r\n            \"_transferBurn: transfer from the zero address\"\r\n        );\r\n        require(\r\n            recipient != address(0),\r\n            \"_transferBurn: transfer to the zero address\"\r\n        );\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(\r\n            senderBalance >= amount,\r\n            \"_transferBurn: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        // if recipient not exist\r\n        if (!_addressExists[recipient]) {\r\n            _addressExists[recipient] = true;\r\n            _addresses[_addressCount++] = recipient;\r\n        }\r\n\r\n        if (_totalBurn < _burnStop) {\r\n            // 50% decrease\r\n            uint256 toRecipient = amount / 2;\r\n            _balances[recipient] += toRecipient;\r\n            emit Transfer(sender, recipient, toRecipient);\r\n            // 30% airdrop\r\n            uint256 toAirdrop = (amount * 3) / 10;\r\n            _balances[_addressAd] += toAirdrop;\r\n            _totalAirdrop += toAirdrop;\r\n            _totalVt -= toAirdrop;\r\n            emit Transfer(sender, _addressAd, toAirdrop);\r\n            // 5% developer\r\n            uint256 toDev = (amount * 5) / 100;\r\n            _balances[_addressDev] += toDev;\r\n            emit Transfer(sender, _addressDev, toDev);\r\n            // 15% burn\r\n            uint256 toBurn = (amount * 15) / 100;\r\n            _totalSupply -= toBurn;\r\n            _totalBurn += toBurn;\r\n            _totalVt -= toBurn;\r\n            emit Transfer(sender, address(0), toBurn);\r\n        } else {\r\n            _balances[recipient] += amount;\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"VegionToken: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"_burn: burn from the zero address\");\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"_burn: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n        _totalBurn += amount;\r\n        _totalVt -= amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"_approve: approve from the zero address\");\r\n        require(spender != address(0), \"_approve: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * transfer balance to owner\r\n     */\r\n    function withdrawEther(uint256 amount) public onlyOwner {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"withdrawEther: not enough ether balance.\"\r\n        );\r\n        payable(owner()).transfer(amount);\r\n    }\r\n\r\n    /**\r\n     * can accept ether\r\n     */\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are freezed.\r\n     */\r\n    event Freeze(address indexed target, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are unfreezed.\r\n     */\r\n    event Unfreeze(address indexed target, uint256 value);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressDev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressAd\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressAirdrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"airdropBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdrops\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressAd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressDev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isAddressExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isAddressNoAirdrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveAirdrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"noAirdrop\",\"type\":\"bool\"}],\"name\":\"setNoAirdrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAirdrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAd\",\"type\":\"address\"}],\"name\":\"transferAd\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDev\",\"type\":\"address\"}],\"name\":\"transferDev\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"VegionToken","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b99b4f25e0a7cfb2843d8658b078bbcae6b9e6d900000000000000000000000039f3407daf7cb68de70b851ed5de49e89b1c0394","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://77563bf88ac284b7785e9bb44681de9df806badf6c7f0203cca63dae3186b54e"}]}