{"status":"1","message":"OK","result":[{"SourceCode":"// File @openzeppelin/contracts/math/Math.sol@v2.5.1\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v2.5.1\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v2.5.1\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/ERC20Detailed.sol@v2.5.1\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v2.5.1\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/SafeERC20.sol@v2.5.1\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/base/interface/uniswap/IUniswapV2Router01.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n// File contracts/base/interface/uniswap/IUniswapV2Router02.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/base/interface/IStrategy.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface IStrategy {\r\n    \r\n    function unsalvagableTokens(address tokens) external view returns (bool);\r\n    \r\n    function governance() external view returns (address);\r\n    function controller() external view returns (address);\r\n    function underlying() external view returns (address);\r\n    function vault() external view returns (address);\r\n\r\n    function withdrawAllToVault() external;\r\n    function withdrawToVault(uint256 amount) external;\r\n\r\n    function investedUnderlyingBalance() external view returns (uint256); // itsNotMuch()\r\n\r\n    // should only be called by controller\r\n    function salvage(address recipient, address token, uint256 amount) external;\r\n\r\n    function doHardWork() external;\r\n    function depositArbCheck() external view returns(bool);\r\n}\r\n\r\n\r\n// File contracts/base/interface/IRewardPool.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n// Unifying the interface with the Synthetix Reward Pool\r\ninterface IRewardPool {\r\n  function rewardToken() external view returns (address);\r\n  function lpToken() external view returns (address);\r\n  function duration() external view returns (uint256);\r\n\r\n  function periodFinish() external view returns (uint256);\r\n  function rewardRate() external view returns (uint256);\r\n  function rewardPerTokenStored() external view returns (uint256);\r\n\r\n  function stake(uint256 amountWei) external;\r\n\r\n  // `balanceOf` would give the amount staked.\r\n  // As this is 1 to 1, this is also the holder's share\r\n  function balanceOf(address holder) external view returns (uint256);\r\n  // total shares & total lpTokens staked\r\n  function totalSupply() external view returns(uint256);\r\n\r\n  function withdraw(uint256 amountWei) external;\r\n  function exit() external;\r\n\r\n  // get claimed rewards\r\n  function earned(address holder) external view returns (uint256);\r\n\r\n  // claim rewards\r\n  function getReward() external;\r\n\r\n  // notify\r\n  function notifyRewardAmount(uint256 _amount) external;\r\n}\r\n\r\n\r\n// File contracts/base/interface/IVault.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface IVault {\r\n\r\n    function initializeVault(\r\n      address _storage,\r\n      address _underlying,\r\n      uint256 _toInvestNumerator,\r\n      uint256 _toInvestDenominator\r\n    ) external ;\r\n\r\n    function balanceOf(address) external view returns (uint256);\r\n\r\n    function underlyingBalanceInVault() external view returns (uint256);\r\n    function underlyingBalanceWithInvestment() external view returns (uint256);\r\n\r\n    // function store() external view returns (address);\r\n    function governance() external view returns (address);\r\n    function controller() external view returns (address);\r\n    function underlying() external view returns (address);\r\n    function strategy() external view returns (address);\r\n\r\n    function setStrategy(address _strategy) external;\r\n    function announceStrategyUpdate(address _strategy) external;\r\n    function setVaultFractionToInvest(uint256 numerator, uint256 denominator) external;\r\n\r\n    function deposit(uint256 amountWei) external;\r\n    function depositFor(uint256 amountWei, address holder) external;\r\n\r\n    function withdrawAll() external;\r\n    function withdraw(uint256 numberOfShares) external;\r\n    function getPricePerFullShare() external view returns (uint256);\r\n\r\n    function underlyingBalanceWithInvestmentForHolder(address holder) view external returns (uint256);\r\n\r\n    // hard work should be callable only by the controller (by the hard worker) or by governance\r\n    function doHardWork() external;\r\n}\r\n\r\n\r\n// File @openzeppelin/upgrades/contracts/Initializable.sol@v2.8.0\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n\r\n// File contracts/base/upgradability/BaseUpgradeableStrategyStorage.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ncontract BaseUpgradeableStrategyStorage {\r\n\r\n  bytes32 internal constant _UNDERLYING_SLOT = 0xa1709211eeccf8f4ad5b6700d52a1a9525b5f5ae1e9e5f9e5a0c2fc23c86e530;\r\n  bytes32 internal constant _VAULT_SLOT = 0xefd7c7d9ef1040fc87e7ad11fe15f86e1d11e1df03c6d7c87f7e1f4041f08d41;\r\n\r\n  bytes32 internal constant _REWARD_TOKEN_SLOT = 0xdae0aafd977983cb1e78d8f638900ff361dc3c48c43118ca1dd77d1af3f47bbf;\r\n  bytes32 internal constant _REWARD_POOL_SLOT = 0x3d9bb16e77837e25cada0cf894835418b38e8e18fbec6cfd192eb344bebfa6b8;\r\n  bytes32 internal constant _SELL_FLOOR_SLOT = 0xc403216a7704d160f6a3b5c3b149a1226a6080f0a5dd27b27d9ba9c022fa0afc;\r\n  bytes32 internal constant _SELL_SLOT = 0x656de32df98753b07482576beb0d00a6b949ebf84c066c765f54f26725221bb6;\r\n  bytes32 internal constant _PAUSED_INVESTING_SLOT = 0xa07a20a2d463a602c2b891eb35f244624d9068572811f63d0e094072fb54591a;\r\n\r\n  bytes32 internal constant _PROFIT_SHARING_NUMERATOR_SLOT = 0xe3ee74fb7893020b457d8071ed1ef76ace2bf4903abd7b24d3ce312e9c72c029;\r\n  bytes32 internal constant _PROFIT_SHARING_DENOMINATOR_SLOT = 0x0286fd414602b432a8c80a0125e9a25de9bba96da9d5068c832ff73f09208a3b;\r\n\r\n  bytes32 internal constant _NEXT_IMPLEMENTATION_SLOT = 0x29f7fcd4fe2517c1963807a1ec27b0e45e67c60a874d5eeac7a0b1ab1bb84447;\r\n  bytes32 internal constant _NEXT_IMPLEMENTATION_TIMESTAMP_SLOT = 0x414c5263b05428f1be1bfa98e25407cc78dd031d0d3cd2a2e3d63b488804f22e;\r\n  bytes32 internal constant _NEXT_IMPLEMENTATION_DELAY_SLOT = 0x82b330ca72bcd6db11a26f10ce47ebcfe574a9c646bccbc6f1cd4478eae16b31;\r\n\r\n  bytes32 internal constant _REWARD_CLAIMABLE_SLOT = 0xbc7c0d42a71b75c3129b337a259c346200f901408f273707402da4b51db3b8e7;\r\n  bytes32 internal constant _MULTISIG_SLOT = 0x3e9de78b54c338efbc04e3a091b87dc7efb5d7024738302c548fc59fba1c34e6;\r\n\r\n  constructor() public {\r\n    assert(_UNDERLYING_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.underlying\")) - 1));\r\n    assert(_VAULT_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.vault\")) - 1));\r\n    assert(_REWARD_TOKEN_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.rewardToken\")) - 1));\r\n    assert(_REWARD_POOL_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.rewardPool\")) - 1));\r\n    assert(_SELL_FLOOR_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.sellFloor\")) - 1));\r\n    assert(_SELL_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.sell\")) - 1));\r\n    assert(_PAUSED_INVESTING_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.pausedInvesting\")) - 1));\r\n\r\n    assert(_PROFIT_SHARING_NUMERATOR_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.profitSharingNumerator\")) - 1));\r\n    assert(_PROFIT_SHARING_DENOMINATOR_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.profitSharingDenominator\")) - 1));\r\n\r\n    assert(_NEXT_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.nextImplementation\")) - 1));\r\n    assert(_NEXT_IMPLEMENTATION_TIMESTAMP_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.nextImplementationTimestamp\")) - 1));\r\n    assert(_NEXT_IMPLEMENTATION_DELAY_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.nextImplementationDelay\")) - 1));\r\n\r\n    assert(_REWARD_CLAIMABLE_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.rewardClaimable\")) - 1));\r\n    assert(_MULTISIG_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.multiSig\")) - 1));\r\n  }\r\n\r\n  function _setUnderlying(address _address) internal {\r\n    setAddress(_UNDERLYING_SLOT, _address);\r\n  }\r\n\r\n  function underlying() public view returns (address) {\r\n    return getAddress(_UNDERLYING_SLOT);\r\n  }\r\n\r\n  function _setRewardPool(address _address) internal {\r\n    setAddress(_REWARD_POOL_SLOT, _address);\r\n  }\r\n\r\n  function rewardPool() public view returns (address) {\r\n    return getAddress(_REWARD_POOL_SLOT);\r\n  }\r\n\r\n  function _setRewardToken(address _address) internal {\r\n    setAddress(_REWARD_TOKEN_SLOT, _address);\r\n  }\r\n\r\n  function rewardToken() public view returns (address) {\r\n    return getAddress(_REWARD_TOKEN_SLOT);\r\n  }\r\n\r\n  function _setVault(address _address) internal {\r\n    setAddress(_VAULT_SLOT, _address);\r\n  }\r\n\r\n  function vault() public view returns (address) {\r\n    return getAddress(_VAULT_SLOT);\r\n  }\r\n\r\n  // a flag for disabling selling for simplified emergency exit\r\n  function _setSell(bool _value) internal {\r\n    setBoolean(_SELL_SLOT, _value);\r\n  }\r\n\r\n  function sell() public view returns (bool) {\r\n    return getBoolean(_SELL_SLOT);\r\n  }\r\n\r\n  function _setPausedInvesting(bool _value) internal {\r\n    setBoolean(_PAUSED_INVESTING_SLOT, _value);\r\n  }\r\n\r\n  function pausedInvesting() public view returns (bool) {\r\n    return getBoolean(_PAUSED_INVESTING_SLOT);\r\n  }\r\n\r\n  function _setSellFloor(uint256 _value) internal {\r\n    setUint256(_SELL_FLOOR_SLOT, _value);\r\n  }\r\n\r\n  function sellFloor() public view returns (uint256) {\r\n    return getUint256(_SELL_FLOOR_SLOT);\r\n  }\r\n\r\n  function _setProfitSharingNumerator(uint256 _value) internal {\r\n    setUint256(_PROFIT_SHARING_NUMERATOR_SLOT, _value);\r\n  }\r\n\r\n  function profitSharingNumerator() public view returns (uint256) {\r\n    return getUint256(_PROFIT_SHARING_NUMERATOR_SLOT);\r\n  }\r\n\r\n  function _setProfitSharingDenominator(uint256 _value) internal {\r\n    setUint256(_PROFIT_SHARING_DENOMINATOR_SLOT, _value);\r\n  }\r\n\r\n  function profitSharingDenominator() public view returns (uint256) {\r\n    return getUint256(_PROFIT_SHARING_DENOMINATOR_SLOT);\r\n  }\r\n\r\n  function allowedRewardClaimable() public view returns (bool) {\r\n    return getBoolean(_REWARD_CLAIMABLE_SLOT);\r\n  }\r\n\r\n  function _setRewardClaimable(bool _value) internal {\r\n    setBoolean(_REWARD_CLAIMABLE_SLOT, _value);\r\n  }\r\n\r\n  function multiSig() public view returns(address) {\r\n    return getAddress(_MULTISIG_SLOT);\r\n  }\r\n\r\n  function _setMultiSig(address _address) internal {\r\n    setAddress(_MULTISIG_SLOT, _address);\r\n  }\r\n\r\n  // upgradeability\r\n\r\n  function _setNextImplementation(address _address) internal {\r\n    setAddress(_NEXT_IMPLEMENTATION_SLOT, _address);\r\n  }\r\n\r\n  function nextImplementation() public view returns (address) {\r\n    return getAddress(_NEXT_IMPLEMENTATION_SLOT);\r\n  }\r\n\r\n  function _setNextImplementationTimestamp(uint256 _value) internal {\r\n    setUint256(_NEXT_IMPLEMENTATION_TIMESTAMP_SLOT, _value);\r\n  }\r\n\r\n  function nextImplementationTimestamp() public view returns (uint256) {\r\n    return getUint256(_NEXT_IMPLEMENTATION_TIMESTAMP_SLOT);\r\n  }\r\n\r\n  function _setNextImplementationDelay(uint256 _value) internal {\r\n    setUint256(_NEXT_IMPLEMENTATION_DELAY_SLOT, _value);\r\n  }\r\n\r\n  function nextImplementationDelay() public view returns (uint256) {\r\n    return getUint256(_NEXT_IMPLEMENTATION_DELAY_SLOT);\r\n  }\r\n\r\n  function setBoolean(bytes32 slot, bool _value) internal {\r\n    setUint256(slot, _value ? 1 : 0);\r\n  }\r\n\r\n  function getBoolean(bytes32 slot) internal view returns (bool) {\r\n    return (getUint256(slot) == 1);\r\n  }\r\n\r\n  function setAddress(bytes32 slot, address _address) internal {\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      sstore(slot, _address)\r\n    }\r\n  }\r\n\r\n  function setUint256(bytes32 slot, uint256 _value) internal {\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      sstore(slot, _value)\r\n    }\r\n  }\r\n\r\n  function getAddress(bytes32 slot) internal view returns (address str) {\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      str := sload(slot)\r\n    }\r\n  }\r\n\r\n  function getUint256(bytes32 slot) internal view returns (uint256 str) {\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      str := sload(slot)\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// File contracts/base/inheritance/Storage.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ncontract Storage {\r\n\r\n  address public governance;\r\n  address public controller;\r\n\r\n  constructor() public {\r\n    governance = msg.sender;\r\n  }\r\n\r\n  modifier onlyGovernance() {\r\n    require(isGovernance(msg.sender), \"Not governance\");\r\n    _;\r\n  }\r\n\r\n  function setGovernance(address _governance) public onlyGovernance {\r\n    require(_governance != address(0), \"new governance shouldn't be empty\");\r\n    governance = _governance;\r\n  }\r\n\r\n  function setController(address _controller) public onlyGovernance {\r\n    require(_controller != address(0), \"new controller shouldn't be empty\");\r\n    controller = _controller;\r\n  }\r\n\r\n  function isGovernance(address account) public view returns (bool) {\r\n    return account == governance;\r\n  }\r\n\r\n  function isController(address account) public view returns (bool) {\r\n    return account == controller;\r\n  }\r\n}\r\n\r\n\r\n// File contracts/base/inheritance/GovernableInit.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n// A clone of Governable supporting the Initializable interface and pattern\r\ncontract GovernableInit is Initializable {\r\n\r\n  bytes32 internal constant _STORAGE_SLOT = 0xa7ec62784904ff31cbcc32d09932a58e7f1e4476e1d041995b37c917990b16dc;\r\n\r\n  modifier onlyGovernance() {\r\n    require(Storage(_storage()).isGovernance(msg.sender), \"Not governance\");\r\n    _;\r\n  }\r\n\r\n  constructor() public {\r\n    assert(_STORAGE_SLOT == bytes32(uint256(keccak256(\"eip1967.governableInit.storage\")) - 1));\r\n  }\r\n\r\n  function initialize(address _store) public initializer {\r\n    _setStorage(_store);\r\n  }\r\n\r\n  function _setStorage(address newStorage) private {\r\n    bytes32 slot = _STORAGE_SLOT;\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      sstore(slot, newStorage)\r\n    }\r\n  }\r\n\r\n  function setStorage(address _store) public onlyGovernance {\r\n    require(_store != address(0), \"new storage shouldn't be empty\");\r\n    _setStorage(_store);\r\n  }\r\n\r\n  function _storage() internal view returns (address str) {\r\n    bytes32 slot = _STORAGE_SLOT;\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      str := sload(slot)\r\n    }\r\n  }\r\n\r\n  function governance() public view returns (address) {\r\n    return Storage(_storage()).governance();\r\n  }\r\n}\r\n\r\n\r\n// File contracts/base/inheritance/ControllableInit.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n// A clone of Governable supporting the Initializable interface and pattern\r\ncontract ControllableInit is GovernableInit {\r\n\r\n  constructor() public {\r\n  }\r\n\r\n  function initialize(address _storage) public initializer {\r\n    GovernableInit.initialize(_storage);\r\n  }\r\n\r\n  modifier onlyController() {\r\n    require(Storage(_storage()).isController(msg.sender), \"Not a controller\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyControllerOrGovernance(){\r\n    require((Storage(_storage()).isController(msg.sender) || Storage(_storage()).isGovernance(msg.sender)),\r\n      \"The caller must be controller or governance\");\r\n    _;\r\n  }\r\n\r\n  function controller() public view returns (address) {\r\n    return Storage(_storage()).controller();\r\n  }\r\n}\r\n\r\n\r\n// File contracts/base/interface/IController.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface IController {\r\n\r\n    event SharePriceChangeLog(\r\n      address indexed vault,\r\n      address indexed strategy,\r\n      uint256 oldSharePrice,\r\n      uint256 newSharePrice,\r\n      uint256 timestamp\r\n    );\r\n\r\n    // [Grey list]\r\n    // An EOA can safely interact with the system no matter what.\r\n    // If you're using Metamask, you're using an EOA.\r\n    // Only smart contracts may be affected by this grey list.\r\n    //\r\n    // This contract will not be able to ban any EOA from the system\r\n    // even if an EOA is being added to the greyList, he/she will still be able\r\n    // to interact with the whole system as if nothing happened.\r\n    // Only smart contracts will be affected by being added to the greyList.\r\n    // This grey list is only used in Vault.sol, see the code there for reference\r\n    function greyList(address _target) external view returns(bool);\r\n\r\n    function addVaultAndStrategy(address _vault, address _strategy) external;\r\n    function doHardWork(address _vault) external;\r\n    function hasVault(address _vault) external returns(bool);\r\n\r\n    function salvage(address _token, uint256 amount) external;\r\n    function salvageStrategy(address _strategy, address _token, uint256 amount) external;\r\n\r\n    function notifyFee(address _underlying, uint256 fee) external;\r\n    function profitSharingNumerator() external view returns (uint256);\r\n    function profitSharingDenominator() external view returns (uint256);\r\n\r\n    function feeRewardForwarder() external view returns(address);\r\n    function setFeeRewardForwarder(address _value) external;\r\n\r\n    function addHardWorker(address _worker) external;\r\n}\r\n\r\n\r\n// File contracts/base/interface/IFeeRewardForwarderV6.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface IFeeRewardForwarderV6 {\r\n    function poolNotifyFixedTarget(address _token, uint256 _amount) external;\r\n\r\n    function notifyFeeAndBuybackAmounts(uint256 _feeAmount, address _pool, uint256 _buybackAmount) external;\r\n    function notifyFeeAndBuybackAmounts(address _token, uint256 _feeAmount, address _pool, uint256 _buybackAmount) external;\r\n    function profitSharingPool() external view returns (address);\r\n    function configureLiquidation(address[] calldata _path, bytes32[] calldata _dexes) external;\r\n}\r\n\r\n\r\n// File contracts/base/upgradability/BaseUpgradeableStrategyClaimable.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BaseUpgradeableStrategyClaimable is Initializable, ControllableInit, BaseUpgradeableStrategyStorage {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  event ProfitsNotCollected(bool sell, bool floor);\r\n  event ProfitLogInReward(uint256 profitAmount, uint256 feeAmount, uint256 timestamp);\r\n  event ProfitAndBuybackLog(uint256 profitAmount, uint256 feeAmount, uint256 timestamp);\r\n\r\n  modifier restricted() {\r\n    require(msg.sender == vault() || msg.sender == controller()\r\n      || msg.sender == governance(),\r\n      \"The sender has to be the controller, governance, or vault\");\r\n    _;\r\n  }\r\n\r\n  // This is only used in `investAllUnderlying()`\r\n  // The user can still freely withdraw from the strategy\r\n  modifier onlyNotPausedInvesting() {\r\n    require(!pausedInvesting(), \"Action blocked as the strategy is in emergency state\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyMultiSigOrGovernance() {\r\n    require(msg.sender == multiSig() || msg.sender == governance(), \"The sender has to be multiSig or governance\");\r\n    _;\r\n  }\r\n\r\n  constructor() public BaseUpgradeableStrategyStorage() {\r\n  }\r\n\r\n  function initialize(\r\n    address _storage,\r\n    address _underlying,\r\n    address _vault,\r\n    address _rewardPool,\r\n    address _rewardToken,\r\n    uint256 _profitSharingNumerator,\r\n    uint256 _profitSharingDenominator,\r\n    bool _sell,\r\n    uint256 _sellFloor,\r\n    uint256 _implementationChangeDelay\r\n  ) public initializer {\r\n    ControllableInit.initialize(\r\n      _storage\r\n    );\r\n    _setUnderlying(_underlying);\r\n    _setVault(_vault);\r\n    _setRewardPool(_rewardPool);\r\n    _setRewardToken(_rewardToken);\r\n    _setProfitSharingNumerator(_profitSharingNumerator);\r\n    _setProfitSharingDenominator(_profitSharingDenominator);\r\n\r\n    _setSell(_sell);\r\n    _setSellFloor(_sellFloor);\r\n    _setNextImplementationDelay(_implementationChangeDelay);\r\n    _setPausedInvesting(false);\r\n    _setMultiSig(0xF49440C1F012d041802b25A73e5B0B9166a75c02);\r\n  }\r\n\r\n  /**\r\n  * Schedules an upgrade for this vault's proxy.\r\n  */\r\n  function scheduleUpgrade(address impl) public onlyGovernance {\r\n    _setNextImplementation(impl);\r\n    _setNextImplementationTimestamp(block.timestamp.add(nextImplementationDelay()));\r\n  }\r\n\r\n  function _finalizeUpgrade() internal {\r\n    _setNextImplementation(address(0));\r\n    _setNextImplementationTimestamp(0);\r\n  }\r\n\r\n  function shouldUpgrade() external view returns (bool, address) {\r\n    return (\r\n      nextImplementationTimestamp() != 0\r\n        && block.timestamp > nextImplementationTimestamp()\r\n        && nextImplementation() != address(0),\r\n      nextImplementation()\r\n    );\r\n  }\r\n\r\n  // change multiSig\r\n  function setMultiSig(address _address) public onlyGovernance {\r\n    _setMultiSig(_address);\r\n  }\r\n\r\n  // reward claiming by multiSig\r\n  function claimReward() public onlyMultiSigOrGovernance {\r\n    require(allowedRewardClaimable(), \"reward claimable is not allowed\");\r\n    _getReward();\r\n    uint256 rewardBalance = IERC20(rewardToken()).balanceOf(address(this));\r\n    IERC20(rewardToken()).safeTransfer(msg.sender, rewardBalance);\r\n  }\r\n\r\n  function setRewardClaimable(bool flag) public onlyGovernance {\r\n    _setRewardClaimable(flag);\r\n  }\r\n\r\n  // If there are multiple reward tokens, they should all be liquidated to\r\n  // rewardToken.\r\n  function _getReward() internal;\r\n\r\n  // reward notification\r\n\r\n  function notifyProfitInRewardToken(uint256 _rewardBalance) internal {\r\n    if( _rewardBalance > 0 ){\r\n      uint256 feeAmount = _rewardBalance.mul(profitSharingNumerator()).div(profitSharingDenominator());\r\n      emit ProfitLogInReward(_rewardBalance, feeAmount, block.timestamp);\r\n      IERC20(rewardToken()).safeApprove(controller(), 0);\r\n      IERC20(rewardToken()).safeApprove(controller(), feeAmount);\r\n\r\n      IController(controller()).notifyFee(\r\n        rewardToken(),\r\n        feeAmount\r\n      );\r\n    } else {\r\n      emit ProfitLogInReward(0, 0, block.timestamp);\r\n    }\r\n  }\r\n\r\n  function notifyProfitAndBuybackInRewardToken(uint256 _rewardBalance, address pool, uint256 _buybackRatio) internal {\r\n    if( _rewardBalance > 0 ){\r\n      uint256 feeAmount = _rewardBalance.mul(profitSharingNumerator()).div(profitSharingDenominator());\r\n      uint256 buybackAmount = _rewardBalance.sub(feeAmount).mul(_buybackRatio).div(10000);\r\n\r\n      address forwarder = IController(controller()).feeRewardForwarder();\r\n      emit ProfitAndBuybackLog(_rewardBalance, feeAmount, block.timestamp);\r\n\r\n      IERC20(rewardToken()).safeApprove(forwarder, 0);\r\n      IERC20(rewardToken()).safeApprove(forwarder, _rewardBalance);\r\n\r\n      IFeeRewardForwarderV6(forwarder).notifyFeeAndBuybackAmounts(\r\n        rewardToken(),\r\n        feeAmount,\r\n        pool,\r\n        buybackAmount\r\n      );\r\n    } else {\r\n      emit ProfitAndBuybackLog(0, 0, block.timestamp);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// File contracts/base/sushi-base/interfaces/IMasterChef.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface IMasterChef {\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n    function withdraw(uint256 _pid, uint256 _amount) external;\r\n    function emergencyWithdraw(uint256 _pid) external;\r\n    function userInfo(uint256 _pid, address _user) external view returns (uint256 amount, uint256 rewardDebt);\r\n    function poolInfo(uint256 _pid) external view returns (address lpToken, uint256, uint256, uint256);\r\n    function massUpdatePools() external;\r\n}\r\n\r\n\r\n// File contracts/base/interface/uniswap/IUniswapV2Pair.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n *Submitted for verification at Etherscan.io on 2020-05-05\r\n*/\r\n\r\n// File: contracts/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n// File contracts/base/sushi-base/MasterChefStrategyWithBuyback.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MasterChefStrategyWithBuyback is IStrategy, BaseUpgradeableStrategyClaimable {\r\n\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  address public constant uniswapRouterV2 = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n  address public constant sushiswapRouterV2 = address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\r\n\r\n  // additional storage slots (on top of BaseUpgradeableStrategy ones) are defined here\r\n  bytes32 internal constant _POOLID_SLOT = 0x3fd729bfa2e28b7806b03a6e014729f59477b530f995be4d51defc9dad94810b;\r\n  bytes32 internal constant _USE_UNI_SLOT = 0x1132c1de5e5b6f1c4c7726265ddcf1f4ae2a9ecf258a0002de174248ecbf2c7a;\r\n  bytes32 internal constant _IS_LP_ASSET_SLOT = 0xc2f3dabf55b1bdda20d5cf5fcba9ba765dfc7c9dbaf28674ce46d43d60d58768;\r\n  bytes32 internal constant _DISTRIBUTION_POOL = 0xffff3ca4ef6be91c73d8650479019ed5238e272f1f8a0190b85eb7dae6fd4b6b;\r\n  bytes32 internal constant _BUYBACK_RATIO = 0xec0174f2065dc3fa83d1e3b1944c6e3f68d25ad5cfc7af4559379936de9ba927;\r\n\r\n  // this would be reset on each upgrade\r\n  mapping (address => address[]) public uniswapRoutes;\r\n\r\n  constructor() public BaseUpgradeableStrategyClaimable() {\r\n    assert(_POOLID_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.poolId\")) - 1));\r\n    assert(_USE_UNI_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.useUni\")) - 1));\r\n    assert(_IS_LP_ASSET_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.isLpAsset\")) - 1));\r\n    assert(_DISTRIBUTION_POOL == bytes32(uint256(keccak256(\"eip1967.strategyStorage.distributionPool\")) - 1));\r\n    assert(_BUYBACK_RATIO == bytes32(uint256(keccak256(\"eip1967.strategyStorage.buybackRatio\")) - 1));\r\n  }\r\n\r\n  function initializeBaseStrategy(\r\n    address _storage,\r\n    address _underlying,\r\n    address _vault,\r\n    address _rewardPool,\r\n    address _rewardToken,\r\n    uint256 _poolID,\r\n    bool _isLpAsset,\r\n    bool _useUni,\r\n    address _distributionPool,\r\n    uint256 _buybackRatio\r\n  ) public initializer {\r\n\r\n    BaseUpgradeableStrategyClaimable.initialize(\r\n      _storage,\r\n      _underlying,\r\n      _vault,\r\n      _rewardPool,\r\n      _rewardToken,\r\n      300, // profit sharing numerator\r\n      1000, // profit sharing denominator\r\n      true, // sell\r\n      1e18, // sell floor\r\n      12 hours // implementation change delay\r\n    );\r\n\r\n    require(IRewardPool(_distributionPool).lpToken() == _vault, \"Incompatible pool\");\r\n    require(_buybackRatio <= 10000, \"Buyback ratio too high\");\r\n\r\n    address _lpt;\r\n    (_lpt,,,) = IMasterChef(rewardPool()).poolInfo(_poolID);\r\n    require(_lpt == underlying(), \"Pool Info does not match underlying\");\r\n    _setPoolId(_poolID);\r\n\r\n    if (_isLpAsset) {\r\n      address uniLPComponentToken0 = IUniswapV2Pair(underlying()).token0();\r\n      address uniLPComponentToken1 = IUniswapV2Pair(underlying()).token1();\r\n\r\n      // these would be required to be initialized separately by governance\r\n      uniswapRoutes[uniLPComponentToken0] = new address[](0);\r\n      uniswapRoutes[uniLPComponentToken1] = new address[](0);\r\n    } else {\r\n      uniswapRoutes[underlying()] = new address[](0);\r\n    }\r\n\r\n    setBoolean(_USE_UNI_SLOT, _useUni);\r\n    setBoolean(_IS_LP_ASSET_SLOT, _isLpAsset);\r\n\r\n    setAddress(_DISTRIBUTION_POOL, _distributionPool);\r\n    setUint256(_BUYBACK_RATIO, _buybackRatio);\r\n  }\r\n\r\n  function depositArbCheck() public view returns(bool) {\r\n    return true;\r\n  }\r\n\r\n  function rewardPoolBalance() internal view returns (uint256 bal) {\r\n      (bal,) = IMasterChef(rewardPool()).userInfo(poolId(), address(this));\r\n  }\r\n\r\n  function exitRewardPool() internal {\r\n      uint256 bal = rewardPoolBalance();\r\n      if (bal != 0) {\r\n          IMasterChef(rewardPool()).withdraw(poolId(), bal);\r\n      }\r\n  }\r\n\r\n  function emergencyExitRewardPool() internal {\r\n      uint256 bal = rewardPoolBalance();\r\n      if (bal != 0) {\r\n          IMasterChef(rewardPool()).emergencyWithdraw(poolId());\r\n      }\r\n  }\r\n\r\n  function unsalvagableTokens(address token) public view returns (bool) {\r\n    return (token == rewardToken() || token == underlying());\r\n  }\r\n\r\n  function enterRewardPool() internal {\r\n    uint256 entireBalance = IERC20(underlying()).balanceOf(address(this));\r\n    IERC20(underlying()).safeApprove(rewardPool(), 0);\r\n    IERC20(underlying()).safeApprove(rewardPool(), entireBalance);\r\n    IMasterChef(rewardPool()).deposit(poolId(), entireBalance);\r\n  }\r\n\r\n  /*\r\n  *   In case there are some issues discovered about the pool or underlying asset\r\n  *   Governance can exit the pool properly\r\n  *   The function is only used for emergency to exit the pool\r\n  */\r\n  function emergencyExit() public onlyGovernance {\r\n    emergencyExitRewardPool();\r\n    _setPausedInvesting(true);\r\n  }\r\n\r\n  /*\r\n  *   Resumes the ability to invest into the underlying reward pools\r\n  */\r\n\r\n  function continueInvesting() public onlyGovernance {\r\n    _setPausedInvesting(false);\r\n  }\r\n\r\n  function setBuybackRatio(uint256 _newRatio) public onlyGovernance {\r\n    setUint256(_BUYBACK_RATIO, _newRatio);\r\n  }\r\n\r\n  function setLiquidationPath(address _token, address [] memory _route) public onlyGovernance {\r\n    uniswapRoutes[_token] = _route;\r\n  }\r\n\r\n  // We assume that all the tradings can be done on Uniswap\r\n  function _liquidateReward() internal {\r\n    uint256 rewardBalance = IERC20(rewardToken()).balanceOf(address(this));\r\n    if (!sell() || rewardBalance < sellFloor()) {\r\n      // Profits can be disabled for possible simplified and rapid exit\r\n      emit ProfitsNotCollected(sell(), rewardBalance < sellFloor());\r\n      return;\r\n    }\r\n\r\n    notifyProfitAndBuybackInRewardToken(\r\n      rewardBalance,\r\n      distributionPool(),\r\n      buybackRatio()\r\n    );\r\n\r\n    uint256 remainingRewardBalance = IERC20(rewardToken()).balanceOf(address(this));\r\n\r\n    if (remainingRewardBalance == 0) {\r\n      return;\r\n    }\r\n\r\n    address routerV2;\r\n    if(useUni()) {\r\n      routerV2 = uniswapRouterV2;\r\n    } else {\r\n      routerV2 = sushiswapRouterV2;\r\n    }\r\n\r\n    // allow Uniswap to sell our reward\r\n    IERC20(rewardToken()).safeApprove(routerV2, 0);\r\n    IERC20(rewardToken()).safeApprove(routerV2, remainingRewardBalance);\r\n\r\n    // we can accept 1 as minimum because this is called only by a trusted role\r\n    uint256 amountOutMin = 1;\r\n\r\n    if (isLpAsset()) {\r\n      address uniLPComponentToken0 = IUniswapV2Pair(underlying()).token0();\r\n      address uniLPComponentToken1 = IUniswapV2Pair(underlying()).token1();\r\n\r\n      uint256 toToken0 = remainingRewardBalance.div(2);\r\n      uint256 toToken1 = remainingRewardBalance.sub(toToken0);\r\n\r\n      uint256 token0Amount;\r\n\r\n      if (uniswapRoutes[uniLPComponentToken0].length > 1) {\r\n        // if we need to liquidate the token0\r\n        IUniswapV2Router02(routerV2).swapExactTokensForTokens(\r\n          toToken0,\r\n          amountOutMin,\r\n          uniswapRoutes[uniLPComponentToken0],\r\n          address(this),\r\n          block.timestamp\r\n        );\r\n        token0Amount = IERC20(uniLPComponentToken0).balanceOf(address(this));\r\n      } else {\r\n        // otherwise we assme token0 is the reward token itself\r\n        token0Amount = toToken0;\r\n      }\r\n\r\n      uint256 token1Amount;\r\n\r\n      if (uniswapRoutes[uniLPComponentToken1].length > 1) {\r\n        // sell reward token to token1\r\n        IUniswapV2Router02(routerV2).swapExactTokensForTokens(\r\n          toToken1,\r\n          amountOutMin,\r\n          uniswapRoutes[uniLPComponentToken1],\r\n          address(this),\r\n          block.timestamp\r\n        );\r\n        token1Amount = IERC20(uniLPComponentToken1).balanceOf(address(this));\r\n      } else {\r\n        token1Amount = toToken1;\r\n      }\r\n\r\n      // provide token1 and token2 to SUSHI\r\n      IERC20(uniLPComponentToken0).safeApprove(routerV2, 0);\r\n      IERC20(uniLPComponentToken0).safeApprove(routerV2, token0Amount);\r\n\r\n      IERC20(uniLPComponentToken1).safeApprove(routerV2, 0);\r\n      IERC20(uniLPComponentToken1).safeApprove(routerV2, token1Amount);\r\n\r\n      // we provide liquidity to sushi\r\n      uint256 liquidity;\r\n      (,,liquidity) = IUniswapV2Router02(routerV2).addLiquidity(\r\n        uniLPComponentToken0,\r\n        uniLPComponentToken1,\r\n        token0Amount,\r\n        token1Amount,\r\n        1,  // we are willing to take whatever the pair gives us\r\n        1,  // we are willing to take whatever the pair gives us\r\n        address(this),\r\n        block.timestamp\r\n      );\r\n    } else {\r\n      IUniswapV2Router02(routerV2).swapExactTokensForTokens(\r\n        remainingRewardBalance,\r\n        amountOutMin,\r\n        uniswapRoutes[underlying()],\r\n        address(this),\r\n        block.timestamp\r\n      );\r\n    }\r\n  }\r\n\r\n  /*\r\n  *   Stakes everything the strategy holds into the reward pool\r\n  */\r\n  function investAllUnderlying() internal onlyNotPausedInvesting {\r\n    // this check is needed, because most of the SNX reward pools will revert if\r\n    // you try to stake(0).\r\n    if(IERC20(underlying()).balanceOf(address(this)) > 0) {\r\n      enterRewardPool();\r\n    }\r\n  }\r\n\r\n  /*\r\n  *   Withdraws all the asset to the vault\r\n  */\r\n  function withdrawAllToVault() public restricted {\r\n    if (address(rewardPool()) != address(0)) {\r\n      exitRewardPool();\r\n    }\r\n    _liquidateReward();\r\n    IERC20(underlying()).safeTransfer(vault(), IERC20(underlying()).balanceOf(address(this)));\r\n  }\r\n\r\n  /*\r\n  *   Withdraws all the asset to the vault\r\n  */\r\n  function withdrawToVault(uint256 amount) public restricted {\r\n    // Typically there wouldn't be any amount here\r\n    // however, it is possible because of the emergencyExit\r\n    uint256 entireBalance = IERC20(underlying()).balanceOf(address(this));\r\n\r\n    if(amount > entireBalance){\r\n      // While we have the check above, we still using SafeMath below\r\n      // for the peace of mind (in case something gets changed in between)\r\n      uint256 needToWithdraw = amount.sub(entireBalance);\r\n      uint256 toWithdraw = Math.min(rewardPoolBalance(), needToWithdraw);\r\n      IMasterChef(rewardPool()).withdraw(poolId(), toWithdraw);\r\n    }\r\n\r\n    IERC20(underlying()).safeTransfer(vault(), amount);\r\n  }\r\n\r\n  /*\r\n  *   Note that we currently do not have a mechanism here to include the\r\n  *   amount of reward that is accrued.\r\n  */\r\n  function investedUnderlyingBalance() external view returns (uint256) {\r\n    if (rewardPool() == address(0)) {\r\n      return IERC20(underlying()).balanceOf(address(this));\r\n    }\r\n    // Adding the amount locked in the reward pool and the amount that is somehow in this contract\r\n    // both are in the units of \"underlying\"\r\n    // The second part is needed because there is the emergency exit mechanism\r\n    // which would break the assumption that all the funds are always inside of the reward pool\r\n    return rewardPoolBalance().add(IERC20(underlying()).balanceOf(address(this)));\r\n  }\r\n\r\n  /*\r\n  *   Governance or Controller can claim coins that are somehow transferred into the contract\r\n  *   Note that they cannot come in take away coins that are used and defined in the strategy itself\r\n  */\r\n  function salvage(address recipient, address token, uint256 amount) external onlyControllerOrGovernance {\r\n     // To make sure that governance cannot come in and take away the coins\r\n    require(!unsalvagableTokens(token), \"token is defined as not salvagable\");\r\n    IERC20(token).safeTransfer(recipient, amount);\r\n  }\r\n\r\n  /*\r\n  *   Get the reward, sell it in exchange for underlying, invest what you got.\r\n  *   It's not much, but it's honest work.\r\n  *\r\n  *   Note that although `onlyNotPausedInvesting` is not added here,\r\n  *   calling `investAllUnderlying()` affectively blocks the usage of `doHardWork`\r\n  *   when the investing is being paused by governance.\r\n  */\r\n  function doHardWork() external onlyNotPausedInvesting restricted {\r\n    exitRewardPool();\r\n    _liquidateReward();\r\n    investAllUnderlying();\r\n  }\r\n\r\n  function _getReward() internal {\r\n    exitRewardPool();\r\n    investAllUnderlying();\r\n  }\r\n\r\n  /**\r\n  * Can completely disable claiming UNI rewards and selling. Good for emergency withdraw in the\r\n  * simplest possible way.\r\n  */\r\n  function setSell(bool s) public onlyGovernance {\r\n    _setSell(s);\r\n  }\r\n\r\n  /**\r\n  * Sets the minimum amount of CRV needed to trigger a sale.\r\n  */\r\n  function setSellFloor(uint256 floor) public onlyGovernance {\r\n    _setSellFloor(floor);\r\n  }\r\n\r\n  // masterchef rewards pool ID\r\n  function _setPoolId(uint256 _value) internal {\r\n    setUint256(_POOLID_SLOT, _value);\r\n  }\r\n\r\n  function poolId() public view returns (uint256) {\r\n    return getUint256(_POOLID_SLOT);\r\n  }\r\n\r\n  function setUseUni(bool _value) public onlyGovernance {\r\n    setBoolean(_USE_UNI_SLOT, _value);\r\n  }\r\n\r\n  function useUni() public view returns (bool) {\r\n    return getBoolean(_USE_UNI_SLOT);\r\n  }\r\n\r\n  function isLpAsset() public view returns (bool) {\r\n    return getBoolean(_IS_LP_ASSET_SLOT);\r\n  }\r\n\r\n  function distributionPool() public view returns (address) {\r\n    return getAddress(_DISTRIBUTION_POOL);\r\n  }\r\n\r\n  function buybackRatio() public view returns (uint256) {\r\n    return getUint256(_BUYBACK_RATIO);\r\n  }\r\n\r\n  function finalizeUpgrade() external onlyGovernance {\r\n    _finalizeUpgrade();\r\n    // reset the liquidation paths\r\n    // they need to be re-set manually\r\n    if (isLpAsset()) {\r\n      uniswapRoutes[IUniswapV2Pair(underlying()).token0()] = new address[](0);\r\n      uniswapRoutes[IUniswapV2Pair(underlying()).token1()] = new address[](0);\r\n    } else {\r\n      uniswapRoutes[underlying()] = new address[](0);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// File contracts/strategies/nft20/NFT20Strategy_MCAT.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ncontract NFT20Strategy_MCAT is MasterChefStrategyWithBuyback {\r\n\r\n  address public mcat_eth_unused; // just a differentiator for the bytecode\r\n  address public constant mcatEthLp = address(0x31C507636a4cAB752A8A069B865099924BD5F1a9);\r\n  address public constant masterChef = address(0x193b775aF4BF9E11656cA48724A710359446BF52);\r\n  address public constant muse = address(0xB6Ca7399B4F9CA56FC27cBfF44F4d2e4Eef1fc81);\r\n  address public constant weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n  address public constant mcat = address(0xf961A1Fa7C781Ecd23689fE1d0B7f3B6cBB2f972);\r\n\r\n  constructor() public {}\r\n\r\n  function initializeStrategy(\r\n    address _storage,\r\n    address _vault,\r\n    address _distributionPool\r\n  ) public initializer {\r\n    uint256 poolId = 9;\r\n    MasterChefStrategyWithBuyback.initializeBaseStrategy(\r\n      _storage,\r\n      mcatEthLp,\r\n      _vault,\r\n      masterChef,\r\n      muse,\r\n      poolId,\r\n      true, // is LP asset\r\n      true, // use Uniswap\r\n      _distributionPool,\r\n      0\r\n    );\r\n    uniswapRoutes[weth] = [muse, weth]; // swaps to weth\r\n    uniswapRoutes[mcat] = [muse, weth, mcat];\r\n    setSell(true);\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProfitAndBuybackLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProfitLogInReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sell\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"floor\",\"type\":\"bool\"}],\"name\":\"ProfitsNotCollected\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowedRewardClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buybackRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"continueInvesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositArbCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doHardWork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_profitSharingNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_profitSharingDenominator\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_sell\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_sellFloor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_implementationChangeDelay\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLpAsset\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_useUni\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_distributionPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buybackRatio\",\"type\":\"uint256\"}],\"name\":\"initializeBaseStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributionPool\",\"type\":\"address\"}],\"name\":\"initializeStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investedUnderlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLpAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masterChef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mcat\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mcatEthLp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mcat_eth_unused\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiSig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"muse\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextImplementationDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextImplementationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pausedInvesting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitSharingDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitSharingNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"salvage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"scheduleUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellFloor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRatio\",\"type\":\"uint256\"}],\"name\":\"setBuybackRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_route\",\"type\":\"address[]\"}],\"name\":\"setLiquidationPath\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setMultiSig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setRewardClaimable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"s\",\"type\":\"bool\"}],\"name\":\"setSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"floor\",\"type\":\"uint256\"}],\"name\":\"setSellFloor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_store\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setUseUni\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shouldUpgrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sushiswapRouterV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapRouterV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniswapRoutes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"unsalvagableTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"useUni\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAllToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NFT20Strategy_MCAT","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e5cc78dfedc610f7c0ed0b204676a5335ce85a18bb90be68718481a264f36df8"}]}