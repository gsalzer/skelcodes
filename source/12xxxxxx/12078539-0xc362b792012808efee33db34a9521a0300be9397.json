{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-v3-or-later\npragma solidity 0.8.1;\n\n// computes square roots using the babylonian method\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\nlibrary Babylonian {\n    // credit for this implementation goes to\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\n    function sqrt(uint256 x) internal pure returns (uint256) {\n        if (x == 0) return 0;\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\n        // however that code costs significantly more gas\n        uint256 xx = x;\n        uint256 r = 1;\n        if (xx >= 0x100000000000000000000000000000000) {\n            xx >>= 128;\n            r <<= 64;\n        }\n        if (xx >= 0x10000000000000000) {\n            xx >>= 64;\n            r <<= 32;\n        }\n        if (xx >= 0x100000000) {\n            xx >>= 32;\n            r <<= 16;\n        }\n        if (xx >= 0x10000) {\n            xx >>= 16;\n            r <<= 8;\n        }\n        if (xx >= 0x100) {\n            xx >>= 8;\n            r <<= 4;\n        }\n        if (xx >= 0x10) {\n            xx >>= 4;\n            r <<= 2;\n        }\n        if (xx >= 0x8) {\n            r <<= 1;\n        }\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1; // Seven iterations should be enough\n        uint256 r1 = x / r;\n        return (r < r1 ? r : r1);\n    }\n}\n\n// for sushi masterchef\nstruct UserInfo {\n    uint256 amount;     // How many LP tokens the user has provided.\n    uint256 rewardDebt; // Reward debt. See explanation below.\n}\n\ninterface MasterChef {\n    function userInfo(uint256 onsenID, address user) external view returns (UserInfo memory);\n}\n\ninterface StakingPool {\n    function balanceOf(address account) external view returns (uint256);\n}\n\ninterface Pair {\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function totalSupply() external view returns (uint);\n}\n\ncontract MPHVotingWeightWrapper {\n    address public constant mph = 0x8888801aF4d980682e47f1A9036e589479e835C5;\n    StakingPool public constant mphStaking = StakingPool(0x98df8D9E56b51e4Ea8AA9b57F8A5Df7A044234e1);\n    StakingPool public constant uniLPStaking = StakingPool(0xd48Df82a6371A9e0083FbfC0DF3AF641b8E21E44);\n    StakingPool public constant yflLPStaking = StakingPool(0x0E6FA9f95a428F185752b60D38c62184854bB9e1);\n    MasterChef public constant masterChef = MasterChef(0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd);\n    uint256 public constant onsenID = 92;\n    Pair public constant uniPair = Pair(0x4D96369002fc5b9687ee924d458A7E5bAa5df34E);\n    Pair public constant sushiPair = Pair(0xB2C29e311916a346304f83AA44527092D5bd4f0F);\n    Pair public constant yflPair = Pair(0x40F1068495Ba9921d6C18cF1aC25f718dF8cE69D);\n    \n    string public constant symbol = \"vMPH\";\n    uint8 public constant decimals = 9; // sqrt(10**18) = 10**9\n\n    function balanceOf(address account) external view returns (uint256 votes) {\n        // MPH in staking pool\n        votes += mphStaking.balanceOf(account);\n        \n        // MPH in LP staking pools\n        votes += _getMPHInPair(uniPair, uniLPStaking.balanceOf(account));\n        votes += _getMPHInPair(sushiPair, masterChef.userInfo(onsenID, account).amount);\n        votes += _getMPHInPair(yflPair, yflLPStaking.balanceOf(account));\n        \n        // take square root as voting weight\n        votes = Babylonian.sqrt(votes);\n    }\n    \n    function _getMPHInPair(Pair pair, uint256 balance) internal view returns (uint256) {\n        uint256 totalSupply = pair.totalSupply();\n        if (totalSupply == 0) {\n            return 0;\n        }\n        (uint reserve0, uint reserve1,) = pair.getReserves();\n        address token0 = pair.token0();\n        address token1 = pair.token1();\n        if (token0 == mph) {\n            // MPH is token0\n            return balance * reserve0 / totalSupply;\n        } else if (token1 == mph) {\n            // MPH is token1\n            return balance * reserve1 / totalSupply;\n        } else {\n            // wrong LP token?\n            return 0;\n        }\n    }\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChef\",\"outputs\":[{\"internalType\":\"contract MasterChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mph\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mphStaking\",\"outputs\":[{\"internalType\":\"contract StakingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onsenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiPair\",\"outputs\":[{\"internalType\":\"contract Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniLPStaking\",\"outputs\":[{\"internalType\":\"contract StakingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniPair\",\"outputs\":[{\"internalType\":\"contract Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yflLPStaking\",\"outputs\":[{\"internalType\":\"contract StakingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yflPair\",\"outputs\":[{\"internalType\":\"contract Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MPHVotingWeightWrapper","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}