{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n\r\n███████╗███╗░░░███╗░█████╗░████████╗██████╗░██╗██╗░░██╗\r\n██╔════╝████╗░████║██╔══██╗╚══██╔══╝██╔══██╗██║╚██╗██╔╝\r\n█████╗░░██╔████╔██║███████║░░░██║░░░██████╔╝██║░╚███╔╝░\r\n██╔══╝░░██║╚██╔╝██║██╔══██║░░░██║░░░██╔══██╗██║░██╔██╗░\r\n███████╗██║░╚═╝░██║██║░░██║░░░██║░░░██║░░██║██║██╔╝╚██╗\r\n╚══════╝╚═╝░░░░░╚═╝╚═╝░░╚═╝░░░╚═╝░░░╚═╝░░╚═╝╚═╝╚═╝░░╚═╝\r\n\r\nhttps://t.me/ethereumatrix\r\nhttps://ethereumatrix.com/\r\nhttps://twitter.com/ethereumatrix\r\nhttps://www.reddit.com/r/EthereuMatrix/\r\n\r\nToken Information\r\n1. Total 1,000,000,000,000\r\n2. 7% buy-back tax\r\n3. Auto buy-back after each sell when buy-back mode is turned on \r\n4. Dev will turn on buy-back mode when price is low, and turn it off when price is high\r\n5. Fair launch on Ethereum\r\n6. Anti-robot protection\r\n7. 0.5% initial buy limit in the first 5 minutes\r\n8. 3% marketing fee and team fee\r\n9. No presale\r\n10. No team tokens\r\n11. Contract renounced on launch\r\n12. LP locked on launch\r\n*/\r\n// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ncontract EthereuMatrix is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string private constant _name = \"EthereuMatrix\";\r\n    string private constant _symbol = \"eMTX\";\r\n    uint8 private constant _decimals = 9;\r\n    address public immutable deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    mapping(address => uint256) private _owned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n\r\n    uint256 private constant _total = 1_000_000_000_000 * 10**9;\r\n    \r\n    uint256 private _teamFee = 3;\r\n    uint256 private _buybackFee = 7;\r\n\r\n    // Bot detection\r\n    mapping(address => bool) private bots;\r\n    mapping(address => uint256) private cooldown;\r\n    \r\n    address payable private _teamCOOAddr;//\r\n    address payable private _teamMktAddress1;// market\r\n    address payable private _teamMktAddress2;// \r\n    address payable private _teamMktAddress3;\r\n    address payable private _teamCTOAddr;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n    bool private cooldownEnabled = false;\r\n    uint256 private _maxTxAmount = _total;\r\n    uint256 public launchBlock;\r\n\r\n    event MaxTxAmountUpdated(uint256 amount_);\r\n    event BuyBack(uint256 amount_);\r\n\r\n    uint256 _buybackpercent = 3;//default is 3%;\r\n    bool _buybackEnabled = false;\r\n    uint256 _buybackThresold = 0;\r\n    \r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    modifier checkPermission() {\r\n        require(_teamCTOAddr == _msgSender() || owner() == _msgSender(), \"permission denied.\");\r\n        _;\r\n    }\r\n\r\n    constructor(address payable cooAddr, \r\n                address payable mktAddr1,\r\n                address payable mktAddr2,\r\n                address payable mktAddr3,\r\n                address payable ctoAddr) {\r\n\r\n        _teamCOOAddr = cooAddr;\r\n        _teamMktAddress1 = mktAddr1;\r\n        _teamMktAddress2 = mktAddr2;\r\n        _teamMktAddress3 = mktAddr3;\r\n        _teamCTOAddr = ctoAddr;\r\n        \r\n        _owned[address(this)] = _total;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_teamCOOAddr] = true;\r\n        _isExcludedFromFee[_teamMktAddress1] = true;\r\n        _isExcludedFromFee[_teamMktAddress2] = true;\r\n        _isExcludedFromFee[_teamMktAddress3] = true;\r\n        _isExcludedFromFee[_teamCTOAddr] = true;\r\n\r\n        emit Transfer(address(0), address(this), _total);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _total;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _owned[account];\r\n    }\r\n\r\n    function isBot(address account) public view returns (bool) {\r\n        return bots[account];\r\n    }\r\n\r\n    function isBuybackEnabled() public view returns (bool) {\r\n        return _buybackEnabled;\r\n    }\r\n\r\n    function buybackThreshold() public view returns (uint256) {\r\n        return _buybackThresold;\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function setCooldownEnabled(bool onoff) external checkPermission() {\r\n        cooldownEnabled = onoff;\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        _teamFee = 0;\r\n        _buybackFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _teamFee = 3;\r\n        _buybackFee = 7;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0));\r\n        require(to != address(0));\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (from != owner() && to != owner()) {\r\n            if (cooldownEnabled) {\r\n                if (\r\n                    from != address(this) &&\r\n                    to != address(this) &&\r\n                    from != address(uniswapV2Router) &&\r\n                    to != address(uniswapV2Router)\r\n                ) {\r\n                    require(\r\n                        _msgSender() == address(uniswapV2Router) ||\r\n                            _msgSender() == uniswapV2Pair,\r\n                        \"ERR: Uniswap only\"\r\n                    );\r\n                }\r\n            }\r\n            require(amount <= _maxTxAmount);\r\n            require(!bots[from] && !bots[to] && !bots[msg.sender]);\r\n\r\n            if (\r\n                from == uniswapV2Pair &&\r\n                to != address(uniswapV2Router) &&\r\n                !_isExcludedFromFee[to] &&\r\n                cooldownEnabled\r\n            ) {\r\n                require(cooldown[to] < block.timestamp);\r\n                cooldown[to] = block.timestamp + (60 seconds);\r\n            }\r\n\r\n            if (block.number <= launchBlock + 2 && !_isExcludedFromFee[to]) {\r\n                if (from != uniswapV2Pair && from != address(uniswapV2Router)) {\r\n                    bots[from] = true;\r\n                } else if (to != uniswapV2Pair && to != address(uniswapV2Router)) {\r\n                    bots[to] = true;\r\n                }\r\n            }\r\n\r\n            uint256  contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && from != uniswapV2Pair && swapEnabled) {\r\n                uint256 oldBalance = address(this).balance;\r\n                swapTokensForEth(contractTokenBalance);\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance, oldBalance);\r\n                }\r\n\r\n                if (to == uniswapV2Pair && _buybackEnabled && amount > _buybackThresold) {\r\n                    buybackToken();\r\n                }\r\n            }\r\n        }\r\n        bool takeFee = true;\r\n\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n        \r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) removeAllFee();\r\n        _transferStandard(sender, recipient, amount);\r\n        if (!takeFee) restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        uint256 fee = _teamFee + _buybackFee;\r\n        uint256 totalFee = amount.mul(fee).div(100);\r\n        uint256 received = amount.sub(totalFee);\r\n\r\n        _owned[sender] = _owned[sender].sub(amount);\r\n        _owned[recipient] = _owned[recipient].add(received);\r\n        _owned[address(this)] = _owned[address(this)].add(totalFee);\r\n\r\n        if(totalFee != 0){\r\n            emit Transfer(sender, address(this), totalFee);\r\n        }\r\n        emit Transfer(sender, recipient, received);\r\n    }\r\n\r\n    function buybackToken() private lockTheSwap {\r\n        uint256 ethbalance = address(this).balance;\r\n        if(ethbalance == 0){\r\n            return;\r\n        }\r\n        \r\n        uint256 amount = ethbalance.mul(_buybackpercent).div(100);\r\n\r\n        if(amount == 0 ){ //< 0.0001 ether){\r\n            return;\r\n        }\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = address(this);\r\n\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n            0, // accept any amount of Tokens\r\n            path,\r\n            deadAddress,\r\n            block.timestamp.add(300)\r\n        );\r\n    \r\n        emit BuyBack(amount);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount, uint256 oldAmount) private {\r\n        \r\n        uint256 feeAmount = amount.sub(oldAmount);\r\n\r\n        uint256 totalPercent = _teamFee.add(_buybackFee);\r\n\r\n        uint256 teamEth = feeAmount.mul(_teamFee).div(totalPercent);\r\n\r\n        uint256 share = teamEth.div(5);\r\n        uint256 remain = teamEth.sub(share.mul(4));\r\n\r\n        _teamCOOAddr.transfer(share);\r\n        _teamMktAddress1.transfer(share);\r\n        _teamMktAddress2.transfer(share);\r\n        _teamMktAddress3.transfer(share);\r\n        _teamCTOAddr.transfer(remain);\r\n    }\r\n\r\n\r\n    function sendETHToFeeRemain(uint256 amount) private {\r\n        uint256 share = amount.div(5);\r\n        uint256 remain = amount.sub(share.mul(4));\r\n\r\n        _teamCOOAddr.transfer(share);\r\n        _teamMktAddress1.transfer(share);\r\n        _teamMktAddress2.transfer(share);\r\n        _teamMktAddress3.transfer(share);\r\n        _teamCTOAddr.transfer(remain);\r\n    }\r\n\r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen, \"trading is already open\");\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _approve(address(this), address(uniswapV2Router), _total);\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        \r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n\r\n        IERC20(uniswapV2Pair).approve(\r\n            address(uniswapV2Router),\r\n            type(uint256).max\r\n        );\r\n\r\n        swapEnabled = true;\r\n        cooldownEnabled = true;\r\n        _maxTxAmount = 5_000_000_000 * 10**9;\r\n        launchBlock = block.number;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function manualswap() public checkPermission() {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 oldBalance = address(this).balance;\r\n        swapTokensForEth(contractBalance);\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendETHToFee(contractETHBalance, oldBalance);\r\n    }\r\n\r\n    function manualSend() public checkPermission() {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendETHToFeeRemain(contractETHBalance);\r\n    }\r\n\r\n    function setMaxTxPercent(uint256 maxTxPercent) external checkPermission() {\r\n        require(maxTxPercent > 0);\r\n        _maxTxAmount = _total.mul(maxTxPercent).div(1000);\r\n        emit MaxTxAmountUpdated(_maxTxAmount);\r\n    }\r\n    \r\n    function setBuybackPercent(uint256 percent_) external checkPermission() {\r\n        require(percent_ > 0);\r\n        _buybackpercent = percent_;\r\n    }\r\n    function setBuybackThreshold(uint256 thresold_) external checkPermission() {\r\n        require(thresold_ > 0);\r\n        _buybackThresold = thresold_;\r\n    }\r\n\r\n    function setBuybackEnabled(bool enabled) external checkPermission() {\r\n        _buybackEnabled = enabled;\r\n    }\r\n\r\n    function setBots(address[] memory bots_) public checkPermission() {\r\n        for (uint256 i = 0; i < bots_.length; i++) {\r\n            bots[bots_[i]] = true;\r\n        }\r\n    }\r\n\r\n    function delBot(address addr) public checkPermission() {\r\n        bots[addr] = false;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"cooAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"mktAddr1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"mktAddr2\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"mktAddr3\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"ctoAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"BuyBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"delBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBuybackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"setBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setBuybackEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent_\",\"type\":\"uint256\"}],\"name\":\"setBuybackPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"thresold_\",\"type\":\"uint256\"}],\"name\":\"setBuybackThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"setCooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"EthereuMatrix","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002fdb9c4730769ff558454a92e22b4db2e6feb01c0000000000000000000000002dc566819f9ce6850cdff9140e2b31b5f5270dc1000000000000000000000000d3507fa246dbe645cbd09192d3182f47cf361c470000000000000000000000005883196c2993f1fc3a78a013a48a68faa58cdab00000000000000000000000008c653bc5f6111193e3d7a0f5fff2ab99aade83a0","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3b1259d561cbdfcb1c9932a57225345dedb043ee9732eed993bd0214aedce8e6"}]}