{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n// Global Enums and Structs\r\n\r\n\r\n\r\nstruct StrategyParams {\r\n    uint256 performanceFee;\r\n    uint256 activation;\r\n    uint256 debtRatio;\r\n    uint256 minDebtPerHarvest;\r\n    uint256 maxDebtPerHarvest;\r\n    uint256 lastReport;\r\n    uint256 totalDebt;\r\n    uint256 totalGain;\r\n    uint256 totalLoss;\r\n}\r\n\r\n// Part: Booster\r\n\r\ninterface Booster {\r\n    struct PoolInfo {\r\n        address lptoken;\r\n        address token;\r\n        address gauge;\r\n        address crvRewards;\r\n        address stash;\r\n        bool shutdown;\r\n    }\r\n    function poolInfo(uint256) external view returns(address,address,address,address,address, bool);\r\n\r\n    // deposit lp tokens and stake\r\n    function deposit(uint256 _pid, uint256 _amount, bool _stake) external returns(bool);\r\n\r\n    // deposit all lp tokens and stake\r\n    function depositAll(uint256 _pid, bool _stake) external returns(bool);\r\n\r\n    // withdraw lp tokens\r\n    function withdraw(uint256 _pid, uint256 _amount) external returns(bool);\r\n\r\n    // withdraw all lp tokens\r\n    function withdrawAll(uint256 _pid) external returns(bool);\r\n\r\n    // claim crv + extra rewards\r\n    function earmarkRewards(uint256 _pid) external returns(bool);\r\n\r\n    // claim  rewards on stash (msg.sender == stash)\r\n    function claimRewards(uint256 _pid, address _gauge) external returns(bool);\r\n\r\n    // delegate address votes on dao (needs to be voteDelegate)\r\n    function vote(uint256 _voteId, address _votingAddress, bool _support) external returns(bool);\r\n    function voteGaugeWeight(address[] calldata _gauge, uint256[] calldata _weight ) external returns(bool);\r\n\r\n}\r\n\r\n// Part: ICurveFi\r\n\r\ninterface ICurveFi {\r\n    function add_liquidity(\r\n        uint256[2] calldata amounts,\r\n        uint256 min_mint_amount,\r\n        bool _use_underlying\r\n    ) external payable returns (uint256);\r\n\r\n    function add_liquidity(\r\n        uint256[3] calldata amounts,\r\n        uint256 min_mint_amount,\r\n        bool _use_underlying\r\n    ) external payable returns (uint256);\r\n\r\n    function add_liquidity(\r\n        uint256[4] calldata amounts,\r\n        uint256 min_mint_amount,\r\n        bool _use_underlying\r\n    ) external payable returns (uint256);\r\n\r\n    function add_liquidity(\r\n        uint256[2] calldata amounts,\r\n        uint256 min_mint_amount\r\n    ) external payable;\r\n\r\n    function add_liquidity(\r\n        uint256[3] calldata amounts,\r\n        uint256 min_mint_amount\r\n    ) external payable;\r\n\r\n    function add_liquidity(\r\n        uint256[4] calldata amounts,\r\n        uint256 min_mint_amount\r\n    ) external payable;\r\n\r\n    // crv.finance: Curve.fi Factory USD Metapool v2\r\n    function add_liquidity(\r\n        address pool,\r\n        uint256[4] calldata amounts,\r\n        uint256 min_mint_amount\r\n    ) external;\r\n\r\n    function exchange(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx,\r\n        uint256 min_dy\r\n    ) external;\r\n\r\n    function exchange_underlying(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx,\r\n        uint256 min_dy\r\n    ) external;\r\n\r\n    function get_dy(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx\r\n    ) external view returns (uint256);\r\n\r\n    function balances(int128) external view returns (uint256);\r\n\r\n    function get_virtual_price() external view returns (uint256);\r\n}\r\n\r\n// Part: IERC20Metadata\r\n\r\ninterface IERC20Metadata {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// Part: Math\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/Address\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/IERC20\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/SafeMath\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Part: Rewards\r\n\r\ninterface Rewards{\r\n    function pid() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function earned(address account) external view returns (uint256);\r\n\r\n    function extraRewardsLength() external view returns (uint256);\r\n    function extraRewards(uint256) external view returns (address);\r\n    function rewardPerToken() external view returns (uint256);\r\n    function rewardPerTokenStored() external view returns (uint256);\r\n    function rewardRate() external view returns (uint256);\r\n    function rewardToken() external view returns (address);\r\n    function rewards(address) external view returns (uint256);\r\n    function userRewardPerTokenPaid(address) external view returns (uint256);\r\n    function stakingToken() external view returns (address);\r\n\r\n    function stake(uint256) external returns (bool);\r\n    function stakeAll() external returns (bool);\r\n    function stakeFor(address, uint256) external returns (bool);\r\n\r\n    function withdraw(uint256 amount, bool claim) external returns (bool);\r\n    function withdrawAll(bool claim) external returns (bool);\r\n    function withdrawAndUnwrap(uint256 amount, bool claim) external returns(bool);\r\n    function withdrawAllAndUnwrap(bool claim) external;\r\n\r\n    function getReward() external returns(bool);\r\n    function getReward(address _account, bool _claimExtras) external returns(bool);\r\n\r\n    function donate(uint256 _amount) external returns(bool);\r\n}\r\n\r\n// Part: Uni\r\n\r\ninterface Uni {\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    /* Uniswap V3 */\r\n    struct ExactInputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n    }\r\n\r\n    function exactInput(\r\n        ExactInputParams calldata params\r\n    ) external payable returns (uint256 amountOut);\r\n\r\n    function quoteExactInput(\r\n        bytes calldata path,\r\n        uint256 amountIn\r\n    ) external view returns (uint256 amountOut);\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/SafeERC20\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// Part: iearn-finance/yearn-vaults@0.3.5/VaultAPI\r\n\r\ninterface VaultAPI is IERC20 {\r\n    function name() external view returns (string calldata);\r\n\r\n    function symbol() external view returns (string calldata);\r\n\r\n    function decimals() external view returns (uint256);\r\n\r\n    function apiVersion() external pure returns (string memory);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount,\r\n        uint256 expiry,\r\n        bytes calldata signature\r\n    ) external returns (bool);\r\n\r\n    // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\r\n    function deposit() external returns (uint256);\r\n\r\n    function deposit(uint256 amount) external returns (uint256);\r\n\r\n    function deposit(uint256 amount, address recipient) external returns (uint256);\r\n\r\n    // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\r\n    function withdraw() external returns (uint256);\r\n\r\n    function withdraw(uint256 maxShares) external returns (uint256);\r\n\r\n    function withdraw(uint256 maxShares, address recipient) external returns (uint256);\r\n\r\n    function token() external view returns (address);\r\n\r\n    function strategies(address _strategy) external view returns (StrategyParams memory);\r\n\r\n    function pricePerShare() external view returns (uint256);\r\n\r\n    function totalAssets() external view returns (uint256);\r\n\r\n    function depositLimit() external view returns (uint256);\r\n\r\n    function maxAvailableShares() external view returns (uint256);\r\n\r\n    /**\r\n     * View how much the Vault would increase this Strategy's borrow limit,\r\n     * based on its present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your Strategy.\r\n     */\r\n    function creditAvailable() external view returns (uint256);\r\n\r\n    /**\r\n     * View how much the Vault would like to pull back from the Strategy,\r\n     * based on its present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your Strategy.\r\n     */\r\n    function debtOutstanding() external view returns (uint256);\r\n\r\n    /**\r\n     * View how much the Vault expect this Strategy to return at the current\r\n     * block, based on its present performance (since its last report). Can be\r\n     * used to determine expectedReturn in your Strategy.\r\n     */\r\n    function expectedReturn() external view returns (uint256);\r\n\r\n    /**\r\n     * This is the main contact point where the Strategy interacts with the\r\n     * Vault. It is critical that this call is handled as intended by the\r\n     * Strategy. Therefore, this function will be called by BaseStrategy to\r\n     * make sure the integration is correct.\r\n     */\r\n    function report(\r\n        uint256 _gain,\r\n        uint256 _loss,\r\n        uint256 _debtPayment\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * This function should only be used in the scenario where the Strategy is\r\n     * being retired but no migration of the positions are possible, or in the\r\n     * extreme scenario that the Strategy needs to be put into \"Emergency Exit\"\r\n     * mode in order for it to exit as quickly as possible. The latter scenario\r\n     * could be for any reason that is considered \"critical\" that the Strategy\r\n     * exits its position as fast as possible, such as a sudden change in\r\n     * market conditions leading to losses, or an imminent failure in an\r\n     * external dependency.\r\n     */\r\n    function revokeStrategy() external;\r\n\r\n    /**\r\n     * View the governance address of the Vault to assert privileged functions\r\n     * can only be called by governance. The Strategy serves the Vault, so it\r\n     * is subject to governance defined by the Vault.\r\n     */\r\n    function governance() external view returns (address);\r\n\r\n    /**\r\n     * View the management address of the Vault to assert privileged functions\r\n     * can only be called by management. The Strategy serves the Vault, so it\r\n     * is subject to management defined by the Vault.\r\n     */\r\n    function management() external view returns (address);\r\n\r\n    /**\r\n     * View the guardian address of the Vault to assert privileged functions\r\n     * can only be called by guardian. The Strategy serves the Vault, so it\r\n     * is subject to guardian defined by the Vault.\r\n     */\r\n    function guardian() external view returns (address);\r\n}\r\n\r\n// Part: iearn-finance/yearn-vaults@0.3.5/BaseStrategy\r\n\r\n/**\r\n * @title Yearn Base Strategy\r\n * @author yearn.finance\r\n * @notice\r\n *  BaseStrategy implements all of the required functionality to interoperate\r\n *  closely with the Vault contract. This contract should be inherited and the\r\n *  abstract methods implemented to adapt the Strategy to the particular needs\r\n *  it has to create a return.\r\n *\r\n *  Of special interest is the relationship between `harvest()` and\r\n *  `vault.report()'. `harvest()` may be called simply because enough time has\r\n *  elapsed since the last report, and not because any funds need to be moved\r\n *  or positions adjusted. This is critical so that the Vault may maintain an\r\n *  accurate picture of the Strategy's performance. See  `vault.report()`,\r\n *  `harvest()`, and `harvestTrigger()` for further details.\r\n */\r\nabstract contract BaseStrategy {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    string public metadataURI;\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to track which version of `StrategyAPI` this Strategy\r\n     *  implements.\r\n     * @dev The Strategy's version must match the Vault's `API_VERSION`.\r\n     * @return A string which holds the current API version of this contract.\r\n     */\r\n    function apiVersion() public pure returns (string memory) {\r\n        return \"0.3.5\";\r\n    }\r\n\r\n    /**\r\n     * @notice This Strategy's name.\r\n     * @dev\r\n     *  You can use this field to manage the \"version\" of this Strategy, e.g.\r\n     *  `StrategySomethingOrOtherV1`. However, \"API Version\" is managed by\r\n     *  `apiVersion()` function above.\r\n     * @return This Strategy's name.\r\n     */\r\n    function name() external virtual view returns (string memory);\r\n\r\n    /**\r\n     * @notice\r\n     *  The amount (priced in want) of the total assets managed by this strategy should not count\r\n     *  towards Yearn's TVL calculations.\r\n     * @dev\r\n     *  You can override this field to set it to a non-zero value if some of the assets of this\r\n     *  Strategy is somehow delegated inside another part of of Yearn's ecosystem e.g. another Vault.\r\n     *  Note that this value must be strictly less than or equal to the amount provided by\r\n     *  `estimatedTotalAssets()` below, as the TVL calc will be total assets minus delegated assets.\r\n     *  Also note that this value is used to determine the total assets under management by this\r\n     *  strategy, for the purposes of computing the management fee in `Vault`\r\n     * @return\r\n     *  The amount of assets this strategy manages that should not be included in Yearn's Total Value\r\n     *  Locked (TVL) calculation across it's ecosystem.\r\n     */\r\n    function delegatedAssets() external virtual view returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    VaultAPI public vault;\r\n    address public strategist;\r\n    address public rewards;\r\n    address public keeper;\r\n\r\n    IERC20 public want;\r\n\r\n    // So indexers can keep track of this\r\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\r\n\r\n    event UpdatedStrategist(address newStrategist);\r\n\r\n    event UpdatedKeeper(address newKeeper);\r\n\r\n    event UpdatedRewards(address rewards);\r\n\r\n    event UpdatedMinReportDelay(uint256 delay);\r\n\r\n    event UpdatedMaxReportDelay(uint256 delay);\r\n\r\n    event UpdatedProfitFactor(uint256 profitFactor);\r\n\r\n    event UpdatedDebtThreshold(uint256 debtThreshold);\r\n\r\n    event EmergencyExitEnabled();\r\n\r\n    event UpdatedMetadataURI(string metadataURI);\r\n\r\n    // The minimum number of seconds between harvest calls. See\r\n    // `setMinReportDelay()` for more details.\r\n    uint256 public minReportDelay;\r\n\r\n    // The maximum number of seconds between harvest calls. See\r\n    // `setMaxReportDelay()` for more details.\r\n    uint256 public maxReportDelay;\r\n\r\n    // The minimum multiple that `callCost` must be above the credit/profit to\r\n    // be \"justifiable\". See `setProfitFactor()` for more details.\r\n    uint256 public profitFactor;\r\n\r\n    // Use this to adjust the threshold at which running a debt causes a\r\n    // harvest trigger. See `setDebtThreshold()` for more details.\r\n    uint256 public debtThreshold;\r\n\r\n    // See note on `setEmergencyExit()`.\r\n    bool public emergencyExit;\r\n\r\n    // modifiers\r\n    modifier onlyAuthorized() {\r\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyStrategist() {\r\n        require(msg.sender == strategist, \"!strategist\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovernance() {\r\n        require(msg.sender == governance(), \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyKeepers() {\r\n        require(\r\n            msg.sender == keeper ||\r\n                msg.sender == strategist ||\r\n                msg.sender == governance() ||\r\n                msg.sender == vault.guardian() ||\r\n                msg.sender == vault.management(),\r\n            \"!authorized\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(address _vault) public {\r\n        _initialize(_vault, msg.sender, msg.sender, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Initializes the Strategy, this is called only once, when the\r\n     *  contract is deployed.\r\n     * @dev `_vault` should implement `VaultAPI`.\r\n     * @param _vault The address of the Vault responsible for this Strategy.\r\n     */\r\n    function _initialize(\r\n        address _vault,\r\n        address _strategist,\r\n        address _rewards,\r\n        address _keeper\r\n    ) internal {\r\n        require(address(want) == address(0), \"Strategy already initialized\");\r\n\r\n        vault = VaultAPI(_vault);\r\n        want = IERC20(vault.token());\r\n        want.safeApprove(_vault, uint256(-1)); // Give Vault unlimited access (might save gas)\r\n        strategist = _strategist;\r\n        rewards = _rewards;\r\n        keeper = _keeper;\r\n\r\n        // initialize variables\r\n        minReportDelay = 0;\r\n        maxReportDelay = 86400;\r\n        profitFactor = 100;\r\n        debtThreshold = 0;\r\n\r\n        vault.approve(rewards, uint256(-1)); // Allow rewards to be pulled\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `strategist`.\r\n     *\r\n     *  This may only be called by governance or the existing strategist.\r\n     * @param _strategist The new address to assign as `strategist`.\r\n     */\r\n    function setStrategist(address _strategist) external onlyAuthorized {\r\n        require(_strategist != address(0));\r\n        strategist = _strategist;\r\n        emit UpdatedStrategist(_strategist);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `keeper`.\r\n     *\r\n     *  `keeper` is the only address that may call `tend()` or `harvest()`,\r\n     *  other than `governance()` or `strategist`. However, unlike\r\n     *  `governance()` or `strategist`, `keeper` may *only* call `tend()`\r\n     *  and `harvest()`, and no other authorized functions, following the\r\n     *  principle of least privilege.\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _keeper The new address to assign as `keeper`.\r\n     */\r\n    function setKeeper(address _keeper) external onlyAuthorized {\r\n        require(_keeper != address(0));\r\n        keeper = _keeper;\r\n        emit UpdatedKeeper(_keeper);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `rewards`. EOA or smart contract which has the permission\r\n     *  to pull rewards from the vault.\r\n     *\r\n     *  This may only be called by the strategist.\r\n     * @param _rewards The address to use for pulling rewards.\r\n     */\r\n    function setRewards(address _rewards) external onlyStrategist {\r\n        require(_rewards != address(0));\r\n        vault.approve(rewards, 0);\r\n        rewards = _rewards;\r\n        vault.approve(rewards, uint256(-1));\r\n        emit UpdatedRewards(_rewards);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `minReportDelay`. `minReportDelay` is the minimum number\r\n     *  of blocks that should pass for `harvest()` to be called.\r\n     *\r\n     *  For external keepers (such as the Keep3r network), this is the minimum\r\n     *  time between jobs to wait. (see `harvestTrigger()`\r\n     *  for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _delay The minimum number of seconds to wait between harvests.\r\n     */\r\n    function setMinReportDelay(uint256 _delay) external onlyAuthorized {\r\n        minReportDelay = _delay;\r\n        emit UpdatedMinReportDelay(_delay);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `maxReportDelay`. `maxReportDelay` is the maximum number\r\n     *  of blocks that should pass for `harvest()` to be called.\r\n     *\r\n     *  For external keepers (such as the Keep3r network), this is the maximum\r\n     *  time between jobs to wait. (see `harvestTrigger()`\r\n     *  for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _delay The maximum number of seconds to wait between harvests.\r\n     */\r\n    function setMaxReportDelay(uint256 _delay) external onlyAuthorized {\r\n        maxReportDelay = _delay;\r\n        emit UpdatedMaxReportDelay(_delay);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `profitFactor`. `profitFactor` is used to determine\r\n     *  if it's worthwhile to harvest, given gas costs. (See `harvestTrigger()`\r\n     *  for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _profitFactor A ratio to multiply anticipated\r\n     * `harvest()` gas cost against.\r\n     */\r\n    function setProfitFactor(uint256 _profitFactor) external onlyAuthorized {\r\n        profitFactor = _profitFactor;\r\n        emit UpdatedProfitFactor(_profitFactor);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Sets how far the Strategy can go into loss without a harvest and report\r\n     *  being required.\r\n     *\r\n     *  By default this is 0, meaning any losses would cause a harvest which\r\n     *  will subsequently report the loss to the Vault for tracking. (See\r\n     *  `harvestTrigger()` for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _debtThreshold How big of a loss this Strategy may carry without\r\n     * being required to report to the Vault.\r\n     */\r\n    function setDebtThreshold(uint256 _debtThreshold) external onlyAuthorized {\r\n        debtThreshold = _debtThreshold;\r\n        emit UpdatedDebtThreshold(_debtThreshold);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `metadataURI`. `metadataURI` is used to store the URI\r\n     * of the file describing the strategy.\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _metadataURI The URI that describe the strategy.\r\n     */\r\n    function setMetadataURI(string calldata _metadataURI) external onlyAuthorized {\r\n        metadataURI = _metadataURI;\r\n        emit UpdatedMetadataURI(_metadataURI);\r\n    }\r\n\r\n    /**\r\n     * Resolve governance address from Vault contract, used to make assertions\r\n     * on protected functions in the Strategy.\r\n     */\r\n    function governance() internal view returns (address) {\r\n        return vault.governance();\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide an accurate estimate for the total amount of assets\r\n     *  (principle + return) that this Strategy is currently managing,\r\n     *  denominated in terms of `want` tokens.\r\n     *\r\n     *  This total should be \"realizable\" e.g. the total value that could\r\n     *  *actually* be obtained from this Strategy if it were to divest its\r\n     *  entire position based on current on-chain conditions.\r\n     * @dev\r\n     *  Care must be taken in using this function, since it relies on external\r\n     *  systems, which could be manipulated by the attacker to give an inflated\r\n     *  (or reduced) value produced by this function, based on current on-chain\r\n     *  conditions (e.g. this function is possible to influence through\r\n     *  flashloan attacks, oracle manipulations, or other DeFi attack\r\n     *  mechanisms).\r\n     *\r\n     *  It is up to governance to use this function to correctly order this\r\n     *  Strategy relative to its peers in the withdrawal queue to minimize\r\n     *  losses for the Vault based on sudden withdrawals. This value should be\r\n     *  higher than the total debt of the Strategy and higher than its expected\r\n     *  value to be \"safe\".\r\n     * @return The estimated total assets in this Strategy.\r\n     */\r\n    function estimatedTotalAssets() public virtual view returns (uint256);\r\n\r\n    /*\r\n     * @notice\r\n     *  Provide an indication of whether this strategy is currently \"active\"\r\n     *  in that it is managing an active position, or will manage a position in\r\n     *  the future. This should correlate to `harvest()` activity, so that Harvest\r\n     *  events can be tracked externally by indexing agents.\r\n     * @return True if the strategy is actively managing a position.\r\n     */\r\n    function isActive() public view returns (bool) {\r\n        return vault.strategies(address(this)).debtRatio > 0 || estimatedTotalAssets() > 0;\r\n    }\r\n\r\n    /**\r\n     * Perform any Strategy unwinding or other calls necessary to capture the\r\n     * \"free return\" this Strategy has generated since the last time its core\r\n     * position(s) were adjusted. Examples include unwrapping extra rewards.\r\n     * This call is only used during \"normal operation\" of a Strategy, and\r\n     * should be optimized to minimize losses as much as possible.\r\n     *\r\n     * This method returns any realized profits and/or realized losses\r\n     * incurred, and should return the total amounts of profits/losses/debt\r\n     * payments (in `want` tokens) for the Vault's accounting (e.g.\r\n     * `want.balanceOf(this) >= _debtPayment + _profit - _loss`).\r\n     *\r\n     * `_debtOutstanding` will be 0 if the Strategy is not past the configured\r\n     * debt limit, otherwise its value will be how far past the debt limit\r\n     * the Strategy is. The Strategy's debt limit is configured in the Vault.\r\n     *\r\n     * NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`.\r\n     *       It is okay for it to be less than `_debtOutstanding`, as that\r\n     *       should only used as a guide for how much is left to pay back.\r\n     *       Payments should be made to minimize loss from slippage, debt,\r\n     *       withdrawal fees, etc.\r\n     *\r\n     * See `vault.debtOutstanding()`.\r\n     */\r\n    function prepareReturn(uint256 _debtOutstanding)\r\n        internal\r\n        virtual\r\n        returns (\r\n            uint256 _profit,\r\n            uint256 _loss,\r\n            uint256 _debtPayment\r\n        );\r\n\r\n    /**\r\n     * Perform any adjustments to the core position(s) of this Strategy given\r\n     * what change the Vault made in the \"investable capital\" available to the\r\n     * Strategy. Note that all \"free capital\" in the Strategy after the report\r\n     * was made is available for reinvestment. Also note that this number\r\n     * could be 0, and you should handle that scenario accordingly.\r\n     *\r\n     * See comments regarding `_debtOutstanding` on `prepareReturn()`.\r\n     */\r\n    function adjustPosition(uint256 _debtOutstanding) internal virtual;\r\n\r\n    /**\r\n     * Liquidate up to `_amountNeeded` of `want` of this strategy's positions,\r\n     * irregardless of slippage. Any excess will be re-invested with `adjustPosition()`.\r\n     * This function should return the amount of `want` tokens made available by the\r\n     * liquidation. If there is a difference between them, `_loss` indicates whether the\r\n     * difference is due to a realized loss, or if there is some other sitution at play\r\n     * (e.g. locked funds) where the amount made available is less than what is needed.\r\n     * This function is used during emergency exit instead of `prepareReturn()` to\r\n     * liquidate all of the Strategy's positions back to the Vault.\r\n     *\r\n     * NOTE: The invariant `_liquidatedAmount + _loss <= _amountNeeded` should always be maintained\r\n     */\r\n    function liquidatePosition(uint256 _amountNeeded) internal virtual returns (uint256 _liquidatedAmount, uint256 _loss);\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide a signal to the keeper that `tend()` should be called. The\r\n     *  keeper will provide the estimated gas cost that they would pay to call\r\n     *  `tend()`, and this function should use that estimate to make a\r\n     *  determination if calling it is \"worth it\" for the keeper. This is not\r\n     *  the only consideration into issuing this trigger, for example if the\r\n     *  position would be negatively affected if `tend()` is not called\r\n     *  shortly, then this can return `true` even if the keeper might be\r\n     *  \"at a loss\" (keepers are always reimbursed by Yearn).\r\n     * @dev\r\n     *  `callCost` must be priced in terms of `want`.\r\n     *\r\n     *  This call and `harvestTrigger()` should never return `true` at the same\r\n     *  time.\r\n     * @param callCost The keeper's estimated cast cost to call `tend()`.\r\n     * @return `true` if `tend()` should be called, `false` otherwise.\r\n     */\r\n    function tendTrigger(uint256 callCost) public virtual view returns (bool) {\r\n        // We usually don't need tend, but if there are positions that need\r\n        // active maintainence, overriding this function is how you would\r\n        // signal for that.\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Adjust the Strategy's position. The purpose of tending isn't to\r\n     *  realize gains, but to maximize yield by reinvesting any returns.\r\n     *\r\n     *  See comments on `adjustPosition()`.\r\n     *\r\n     *  This may only be called by governance, the strategist, or the keeper.\r\n     */\r\n    function tend() external onlyKeepers {\r\n        // Don't take profits with this call, but adjust for better gains\r\n        adjustPosition(vault.debtOutstanding());\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide a signal to the keeper that `harvest()` should be called. The\r\n     *  keeper will provide the estimated gas cost that they would pay to call\r\n     *  `harvest()`, and this function should use that estimate to make a\r\n     *  determination if calling it is \"worth it\" for the keeper. This is not\r\n     *  the only consideration into issuing this trigger, for example if the\r\n     *  position would be negatively affected if `harvest()` is not called\r\n     *  shortly, then this can return `true` even if the keeper might be \"at a\r\n     *  loss\" (keepers are always reimbursed by Yearn).\r\n     * @dev\r\n     *  `callCost` must be priced in terms of `want`.\r\n     *\r\n     *  This call and `tendTrigger` should never return `true` at the\r\n     *  same time.\r\n     *\r\n     *  See `min/maxReportDelay`, `profitFactor`, `debtThreshold` to adjust the\r\n     *  strategist-controlled parameters that will influence whether this call\r\n     *  returns `true` or not. These parameters will be used in conjunction\r\n     *  with the parameters reported to the Vault (see `params`) to determine\r\n     *  if calling `harvest()` is merited.\r\n     *\r\n     *  It is expected that an external system will check `harvestTrigger()`.\r\n     *  This could be a script run off a desktop or cloud bot (e.g.\r\n     *  https://github.com/iearn-finance/yearn-vaults/blob/master/scripts/keep.py),\r\n     *  or via an integration with the Keep3r network (e.g.\r\n     *  https://github.com/Macarse/GenericKeep3rV2/blob/master/contracts/keep3r/GenericKeep3rV2.sol).\r\n     * @param callCost The keeper's estimated cast cost to call `harvest()`.\r\n     * @return `true` if `harvest()` should be called, `false` otherwise.\r\n     */\r\n    function harvestTrigger(uint256 callCost) public virtual view returns (bool) {\r\n        StrategyParams memory params = vault.strategies(address(this));\r\n\r\n        // Should not trigger if Strategy is not activated\r\n        if (params.activation == 0) return false;\r\n\r\n        // Should not trigger if we haven't waited long enough since previous harvest\r\n        if (block.timestamp.sub(params.lastReport) < minReportDelay) return false;\r\n\r\n        // Should trigger if hasn't been called in a while\r\n        if (block.timestamp.sub(params.lastReport) >= maxReportDelay) return true;\r\n\r\n        // If some amount is owed, pay it back\r\n        // NOTE: Since debt is based on deposits, it makes sense to guard against large\r\n        //       changes to the value from triggering a harvest directly through user\r\n        //       behavior. This should ensure reasonable resistance to manipulation\r\n        //       from user-initiated withdrawals as the outstanding debt fluctuates.\r\n        uint256 outstanding = vault.debtOutstanding();\r\n        if (outstanding > debtThreshold) return true;\r\n\r\n        // Check for profits and losses\r\n        uint256 total = estimatedTotalAssets();\r\n        // Trigger if we have a loss to report\r\n        if (total.add(debtThreshold) < params.totalDebt) return true;\r\n\r\n        uint256 profit = 0;\r\n        if (total > params.totalDebt) profit = total.sub(params.totalDebt); // We've earned a profit!\r\n\r\n        // Otherwise, only trigger if it \"makes sense\" economically (gas cost\r\n        // is <N% of value moved)\r\n        uint256 credit = vault.creditAvailable();\r\n        return (profitFactor.mul(callCost) < credit.add(profit));\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Harvests the Strategy, recognizing any profits or losses and adjusting\r\n     *  the Strategy's position.\r\n     *\r\n     *  In the rare case the Strategy is in emergency shutdown, this will exit\r\n     *  the Strategy's position.\r\n     *\r\n     *  This may only be called by governance, the strategist, or the keeper.\r\n     * @dev\r\n     *  When `harvest()` is called, the Strategy reports to the Vault (via\r\n     *  `vault.report()`), so in some cases `harvest()` must be called in order\r\n     *  to take in profits, to borrow newly available funds from the Vault, or\r\n     *  otherwise adjust its position. In other cases `harvest()` must be\r\n     *  called to report to the Vault on the Strategy's position, especially if\r\n     *  any losses have occurred.\r\n     */\r\n    function harvest() external onlyKeepers {\r\n        uint256 profit = 0;\r\n        uint256 loss = 0;\r\n        uint256 debtOutstanding = vault.debtOutstanding();\r\n        uint256 debtPayment = 0;\r\n        if (emergencyExit) {\r\n            // Free up as much capital as possible\r\n            uint256 totalAssets = estimatedTotalAssets();\r\n            // NOTE: use the larger of total assets or debt outstanding to book losses properly\r\n            (debtPayment, loss) = liquidatePosition(totalAssets > debtOutstanding ? totalAssets : debtOutstanding);\r\n            // NOTE: take up any remainder here as profit\r\n            if (debtPayment > debtOutstanding) {\r\n                profit = debtPayment.sub(debtOutstanding);\r\n                debtPayment = debtOutstanding;\r\n            }\r\n        } else {\r\n            // Free up returns for Vault to pull\r\n            (profit, loss, debtPayment) = prepareReturn(debtOutstanding);\r\n        }\r\n\r\n        // Allow Vault to take up to the \"harvested\" balance of this contract,\r\n        // which is the amount it has earned since the last time it reported to\r\n        // the Vault.\r\n        debtOutstanding = vault.report(profit, loss, debtPayment);\r\n\r\n        // Check if free returns are left, and re-invest them\r\n        adjustPosition(debtOutstanding);\r\n\r\n        emit Harvested(profit, loss, debtPayment, debtOutstanding);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Withdraws `_amountNeeded` to `vault`.\r\n     *\r\n     *  This may only be called by the Vault.\r\n     * @param _amountNeeded How much `want` to withdraw.\r\n     * @return _loss Any realized losses\r\n     */\r\n    function withdraw(uint256 _amountNeeded) external returns (uint256 _loss) {\r\n        require(msg.sender == address(vault), \"!vault\");\r\n        // Liquidate as much as possible to `want`, up to `_amountNeeded`\r\n        uint256 amountFreed;\r\n        (amountFreed, _loss) = liquidatePosition(_amountNeeded);\r\n        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\r\n        want.safeTransfer(msg.sender, amountFreed);\r\n        // NOTE: Reinvest anything leftover on next `tend`/`harvest`\r\n    }\r\n\r\n    /**\r\n     * Do anything necessary to prepare this Strategy for migration, such as\r\n     * transferring any reserve or LP tokens, CDPs, or other tokens or stores of\r\n     * value.\r\n     */\r\n    function prepareMigration(address _newStrategy) internal virtual;\r\n\r\n    /**\r\n     * @notice\r\n     *  Transfers all `want` from this Strategy to `_newStrategy`.\r\n     *\r\n     *  This may only be called by governance or the Vault.\r\n     * @dev\r\n     *  The new Strategy's Vault must be the same as this Strategy's Vault.\r\n     * @param _newStrategy The Strategy to migrate to.\r\n     */\r\n    function migrate(address _newStrategy) external {\r\n        require(msg.sender == address(vault) || msg.sender == governance());\r\n        require(BaseStrategy(_newStrategy).vault() == vault);\r\n        prepareMigration(_newStrategy);\r\n        want.safeTransfer(_newStrategy, want.balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Activates emergency exit. Once activated, the Strategy will exit its\r\n     *  position upon the next harvest, depositing all funds into the Vault as\r\n     *  quickly as is reasonable given on-chain conditions.\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @dev\r\n     *  See `vault.setEmergencyShutdown()` and `harvest()` for further details.\r\n     */\r\n    function setEmergencyExit() external onlyAuthorized {\r\n        emergencyExit = true;\r\n        vault.revokeStrategy();\r\n\r\n        emit EmergencyExitEnabled();\r\n    }\r\n\r\n    /**\r\n     * Override this to add all tokens/tokenized positions this contract\r\n     * manages on a *persistent* basis (e.g. not just for swapping back to\r\n     * want ephemerally).\r\n     *\r\n     * NOTE: Do *not* include `want`, already included in `sweep` below.\r\n     *\r\n     * Example:\r\n     *\r\n     *    function protectedTokens() internal override view returns (address[] memory) {\r\n     *      address[] memory protected = new address[](3);\r\n     *      protected[0] = tokenA;\r\n     *      protected[1] = tokenB;\r\n     *      protected[2] = tokenC;\r\n     *      return protected;\r\n     *    }\r\n     */\r\n    function protectedTokens() internal virtual view returns (address[] memory);\r\n\r\n    /**\r\n     * @notice\r\n     *  Removes tokens from this Strategy that are not the type of tokens\r\n     *  managed by this Strategy. This may be used in case of accidentally\r\n     *  sending the wrong kind of token to this Strategy.\r\n     *\r\n     *  Tokens will be sent to `governance()`.\r\n     *\r\n     *  This will fail if an attempt is made to sweep `want`, or any tokens\r\n     *  that are protected by this Strategy.\r\n     *\r\n     *  This may only be called by governance.\r\n     * @dev\r\n     *  Implement `protectedTokens()` to specify any additional tokens that\r\n     *  should be protected from sweeping in addition to `want`.\r\n     * @param _token The token to transfer out of this vault.\r\n     */\r\n    function sweep(address _token) external onlyGovernance {\r\n        require(_token != address(want), \"!want\");\r\n        require(_token != address(vault), \"!shares\");\r\n\r\n        address[] memory _protectedTokens = protectedTokens();\r\n        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], \"!protected\");\r\n\r\n        IERC20(_token).safeTransfer(governance(), IERC20(_token).balanceOf(address(this)));\r\n    }\r\n}\r\n\r\n// Part: ConvexStable\r\n\r\nabstract contract ConvexStable is BaseStrategy {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    address public constant voter = address(0xF147b8125d2ef93FB6965Db97D6746952a133934);\r\n    address public constant booster = address(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\r\n\r\n    address public constant cvx = address(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\r\n    address public constant crv = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\r\n    address public constant weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    address public constant dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    address public constant usdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    address public constant usdt = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n\r\n    // address public constant quoter = address(0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6);\r\n    // address public constant uniswapv3 = address(0xE592427A0AEce92De3Edee1F18E0157C05861564);\r\n    address public constant uniswap = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address public constant sushiswap = address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\r\n\r\n    uint256 public constant DENOMINATOR = 10000;\r\n\r\n    bool public isClaimRewards;\r\n    bool public isClaimExtras;\r\n    uint256 public id;\r\n    address public rewardContract;\r\n    address public curve;\r\n\r\n    address[] public dex;\r\n    uint256 public keepCRV;\r\n\r\n    constructor(address _vault) public BaseStrategy(_vault) {\r\n        minReportDelay = 12 hours;\r\n        maxReportDelay = 3 days;\r\n        profitFactor = 1000;\r\n        debtThreshold = 1e24;\r\n        keepCRV = 1000;\r\n    }\r\n\r\n    function _approveBasic() internal {\r\n        want.approve(booster, 0);\r\n        want.approve(booster, type(uint256).max);\r\n        IERC20(dai).safeApprove(curve, 0);\r\n        IERC20(dai).safeApprove(curve, type(uint256).max);\r\n        IERC20(usdc).safeApprove(curve, 0);\r\n        IERC20(usdc).safeApprove(curve, type(uint256).max);\r\n        IERC20(usdt).safeApprove(curve, 0);\r\n        IERC20(usdt).safeApprove(curve, type(uint256).max);\r\n    }\r\n\r\n    function _approveDex() internal virtual {\r\n        IERC20(crv).approve(dex[0], 0);\r\n        IERC20(crv).approve(dex[0], type(uint256).max);\r\n        IERC20(cvx).approve(dex[1], 0);\r\n        IERC20(cvx).approve(dex[1], type(uint256).max);\r\n    }\r\n\r\n    function approveAll() external onlyAuthorized {\r\n        _approveBasic();\r\n        _approveDex();\r\n    }\r\n\r\n    function setKeepCRV(uint256 _keepCRV) external onlyAuthorized {\r\n        keepCRV = _keepCRV;\r\n    }\r\n\r\n    function switchDex(uint256 _id, address _dex) external onlyAuthorized {\r\n        dex[_id] = _dex;\r\n        _approveDex();\r\n    }\r\n\r\n    function setIsClaimRewards(bool _isClaimRewards) external onlyAuthorized {\r\n        isClaimRewards = _isClaimRewards;\r\n    }\r\n\r\n    function setIsClaimExtras(bool _isClaimExtras) external onlyAuthorized {\r\n        isClaimExtras = _isClaimExtras;\r\n    }\r\n\r\n    function withdrawToConvexDepositTokens() external onlyAuthorized {\r\n        uint256 staked = Rewards(rewardContract).balanceOf(address(this));\r\n        Rewards(rewardContract).withdraw(staked, isClaimRewards);\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return string(abi.encodePacked(\"Convex\", IERC20Metadata(address(want)).symbol()));\r\n    }\r\n\r\n    function balanceOfWant() public view returns (uint256) {\r\n        return want.balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOfPool() public view returns (uint256) {\r\n        return Rewards(rewardContract).balanceOf(address(this));\r\n    }\r\n\r\n    function estimatedTotalAssets() public view override returns (uint256) {\r\n        return balanceOfWant().add(balanceOfPool());\r\n    }\r\n\r\n    function adjustPosition(uint256 _debtOutstanding) internal override {\r\n        if (emergencyExit) return;\r\n        uint256 _want = want.balanceOf(address(this));\r\n        if (_want > 0) {\r\n            Booster(booster).deposit(id, _want, true);\r\n        }\r\n    }\r\n\r\n    function _withdrawSome(uint256 _amount) internal returns (uint256) {\r\n        _amount = Math.min(_amount, balanceOfPool());\r\n        uint _before = balanceOfWant();\r\n        Rewards(rewardContract).withdrawAndUnwrap(_amount, false);\r\n        return balanceOfWant().sub(_before);\r\n    }\r\n\r\n    function liquidatePosition(uint256 _amountNeeded)\r\n        internal\r\n        override\r\n        returns (uint256 _liquidatedAmount, uint256 _loss)\r\n    {\r\n        uint256 _balance = balanceOfWant();\r\n        if (_balance < _amountNeeded) {\r\n            _liquidatedAmount = _withdrawSome(_amountNeeded.sub(_balance));\r\n            _liquidatedAmount = _liquidatedAmount.add(_balance);\r\n            _loss = _amountNeeded.sub(_liquidatedAmount); // this should be 0. o/w there must be an error\r\n        }\r\n        else {\r\n            _liquidatedAmount = _amountNeeded;\r\n        }\r\n    }\r\n\r\n    function prepareMigration(address _newStrategy) internal override {\r\n        Rewards(rewardContract).withdrawAllAndUnwrap(isClaimRewards);\r\n        _migrateRewards(_newStrategy);\r\n    }\r\n\r\n    function _migrateRewards(address _newStrategy) internal virtual {\r\n        IERC20(crv).safeTransfer(_newStrategy, IERC20(crv).balanceOf(address(this)));\r\n        IERC20(cvx).safeTransfer(_newStrategy, IERC20(cvx).balanceOf(address(this)));\r\n    }\r\n\r\n    function _adjustCRV(uint256 _crv) internal returns (uint256) {\r\n        uint256 _keepCRV = _crv.mul(keepCRV).div(DENOMINATOR);\r\n        if (_keepCRV > 0) IERC20(crv).safeTransfer(voter, _keepCRV);\r\n        return _crv.sub(_keepCRV);\r\n    }\r\n\r\n    function _claimableBasicInETH() internal view returns (uint256) {\r\n        uint256 _crv = Rewards(rewardContract).earned(address(this));\r\n\r\n        // calculations pulled directly from CVX's contract for minting CVX per CRV claimed\r\n        uint256 totalCliffs = 1000;\r\n        uint256 maxSupply = 1e8 * 1e18; // 100m\r\n        uint256 reductionPerCliff = 1e5 * 1e18; // 100k\r\n        uint256 supply = IERC20(cvx).totalSupply();\r\n        uint256 _cvx;\r\n\r\n        uint256 cliff = supply.div(reductionPerCliff);\r\n        // mint if below total cliffs\r\n        if (cliff < totalCliffs) {\r\n            // for reduction% take inverse of current cliff\r\n            uint256 reduction = totalCliffs.sub(cliff);\r\n            // reduce\r\n            _cvx = _crv.mul(reduction).div(totalCliffs);\r\n\r\n            // supply cap check\r\n            uint256 amtTillMax = maxSupply.sub(supply);\r\n            if (_cvx > amtTillMax) {\r\n                _cvx = amtTillMax;\r\n            }\r\n        }\r\n\r\n        uint256 crvValue;\r\n        if (_crv > 0) {\r\n            address[] memory path = new address[](2);\r\n            path[0] = crv;\r\n            path[1] = weth;\r\n            uint256[] memory crvSwap = Uni(dex[0]).getAmountsOut(_crv, path);\r\n            crvValue = crvSwap[1];\r\n        }\r\n\r\n        uint256 cvxValue;\r\n        if (_cvx > 0) {\r\n            address[] memory path = new address[](2);\r\n            path[0] = cvx;\r\n            path[1] = weth;\r\n            uint256[] memory cvxSwap = Uni(dex[1]).getAmountsOut(_cvx, path);\r\n            cvxValue = cvxSwap[1];\r\n        }\r\n\r\n        return crvValue.add(cvxValue);\r\n    }\r\n\r\n    function _claimableInETH() internal virtual view returns (uint256 _claimable) {\r\n        _claimable = _claimableBasicInETH();\r\n    }\r\n\r\n    // NOTE: Can override `tendTrigger` and `harvestTrigger` if necessary\r\n    function harvestTrigger(uint256 callCost) public override view returns (bool) {\r\n        StrategyParams memory params = vault.strategies(address(this));\r\n\r\n        if (params.activation == 0) return false;\r\n\r\n        if (block.timestamp.sub(params.lastReport) < minReportDelay) return false;\r\n\r\n        if (block.timestamp.sub(params.lastReport) >= maxReportDelay) return true;\r\n\r\n        uint256 outstanding = vault.debtOutstanding();\r\n        if (outstanding > debtThreshold) return true;\r\n\r\n        uint256 total = estimatedTotalAssets();\r\n        if (total.add(debtThreshold) < params.totalDebt) return true;\r\n\r\n        return (profitFactor.mul(callCost) < _claimableInETH());\r\n    }\r\n}\r\n\r\n// File: susd.sol\r\n\r\ncontract Strategy is ConvexStable {\r\n    address public constant snx = address(0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F);\r\n    address[] public pathTarget;\r\n\r\n    constructor(address _vault) public ConvexStable(_vault) {\r\n        curve = address(0xA5407eAE9Ba41422680e2e00537571bcC53efBfD);\r\n        id = 4;\r\n        isClaimRewards = true; // default is true, turn off in emergency\r\n        isClaimExtras = true; // add this if there are extra rewards\r\n\r\n        (address _lp,,,address _reward,,) = Booster(booster).poolInfo(id);\r\n        require(_lp == address(want), \"constructor: incorrect lp token\");\r\n        rewardContract = _reward;\r\n\r\n        _approveBasic();\r\n        pathTarget = new address[](3);\r\n        _setPathTarget(0, 0); // crv path target\r\n        _setPathTarget(1, 0); // cvx path target\r\n        _setPathTarget(2, 0); // snx path target\r\n\r\n        dex = new address[](3);\r\n        dex[0] = sushiswap; // crv\r\n        dex[1] = sushiswap; // cvx\r\n        dex[2] = sushiswap; // snx\r\n        _approveDex();\r\n    }\r\n\r\n    // >>> approve other rewards on dex\r\n    function _approveDex() internal override {\r\n        super._approveDex();\r\n        IERC20(snx).approve(dex[2], 0);\r\n        IERC20(snx).approve(dex[2], type(uint256).max);\r\n    }\r\n\r\n    // >>> include other rewards\r\n    function _migrateRewards(address _newStrategy) internal override {\r\n        super._migrateRewards(_newStrategy);\r\n        IERC20(snx).safeTransfer(_newStrategy, IERC20(snx).balanceOf(address(this)));\r\n    }\r\n\r\n    // >>> include all other rewards in eth besides _claimableBasicInETH()\r\n    function _claimableInETH() internal override view returns (uint256 _claimable) {\r\n        _claimable = super._claimableInETH();\r\n\r\n        uint256 _snx = IERC20(snx).balanceOf(address(this));\r\n        if (_snx > 0) {\r\n            address[] memory path = new address[](2);\r\n            path[0] = snx;\r\n            path[1] = weth;\r\n            uint256[] memory swap = Uni(dex[2]).getAmountsOut(_snx, path);\r\n            _claimable = _claimable.add(swap[1]);\r\n        }\r\n    }\r\n\r\n    function _setPathTarget(uint _tokenId, uint _id) internal {\r\n        if (_id == 0) { \r\n            pathTarget[_tokenId] = dai;\r\n        }\r\n        else if (_id == 1) {\r\n            pathTarget[_tokenId] = usdc;\r\n        }\r\n        else {\r\n            pathTarget[_tokenId] = usdt;\r\n        }\r\n    }\r\n\r\n    function setPathTarget(uint _tokenId, uint _id) external onlyAuthorized {\r\n        _setPathTarget(_tokenId, _id);\r\n    }\r\n\r\n    function prepareReturn(uint256 _debtOutstanding)\r\n        internal\r\n        override\r\n        returns (\r\n            uint256 _profit,\r\n            uint256 _loss,\r\n            uint256 _debtPayment\r\n        )\r\n    {\r\n        uint before = balanceOfWant();\r\n        Rewards(rewardContract).getReward(address(this), isClaimExtras);\r\n        uint256 _crv = IERC20(crv).balanceOf(address(this));\r\n        if (_crv > 0) {\r\n            _crv = _adjustCRV(_crv);\r\n\r\n            address[] memory path = new address[](3);\r\n            path[0] = crv;\r\n            path[1] = weth;\r\n            path[2] = pathTarget[0];\r\n\r\n            Uni(dex[0]).swapExactTokensForTokens(_crv, uint256(0), path, address(this), now);\r\n        }\r\n        uint256 _cvx = IERC20(cvx).balanceOf(address(this));\r\n        if (_cvx > 0) {\r\n            address[] memory path = new address[](3);\r\n            path[0] = cvx;\r\n            path[1] = weth;\r\n            path[2] = pathTarget[1];\r\n\r\n            Uni(dex[1]).swapExactTokensForTokens(_cvx, uint256(0), path, address(this), now);\r\n        }\r\n        uint256 _snx = IERC20(snx).balanceOf(address(this));\r\n        if (_snx > 0) {\r\n            address[] memory path = new address[](3);\r\n            path[0] = snx;\r\n            path[1] = weth;\r\n            path[2] = pathTarget[2];\r\n\r\n            Uni(dex[2]).swapExactTokensForTokens(_snx, uint256(0), path, address(this), now);\r\n        }\r\n        uint256 _dai = IERC20(dai).balanceOf(address(this));\r\n        uint256 _usdc = IERC20(usdc).balanceOf(address(this));\r\n        uint256 _usdt = IERC20(usdt).balanceOf(address(this));\r\n        if (_dai > 0 || _usdc > 0 || _usdt > 0) {\r\n            ICurveFi(curve).add_liquidity([_dai, _usdc, _usdt, 0], 0);\r\n        }\r\n        _profit = want.balanceOf(address(this)).sub(before);\r\n\r\n        uint _total = estimatedTotalAssets();\r\n        uint _debt = vault.strategies(address(this)).totalDebt;\r\n        if(_total < _debt) {\r\n            _loss = _debt - _total;\r\n            _profit = 0;\r\n        }\r\n\r\n        if (_debtOutstanding > 0) {\r\n            _withdrawSome(_debtOutstanding);\r\n            _debtPayment = Math.min(_debtOutstanding, balanceOfWant().sub(_profit));\r\n        }\r\n    }\r\n\r\n    function protectedTokens()\r\n        internal\r\n        view\r\n        override\r\n        returns (address[] memory)\r\n    {\r\n        address[] memory protected = new address[](3);\r\n        protected[0] = crv;\r\n        protected[1] = cvx;\r\n        protected[2] = snx;\r\n        return protected;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyExitEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtOutstanding\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtThreshold\",\"type\":\"uint256\"}],\"name\":\"UpdatedDebtThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"UpdatedKeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxReportDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"UpdatedMetadataURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"UpdatedMinReportDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitFactor\",\"type\":\"uint256\"}],\"name\":\"UpdatedProfitFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"}],\"name\":\"UpdatedRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStrategist\",\"type\":\"address\"}],\"name\":\"UpdatedStrategist\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apiVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"booster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegatedAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedTotalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callCost\",\"type\":\"uint256\"}],\"name\":\"harvestTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClaimExtras\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClaimRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepCRV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReportDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReportDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pathTarget\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtThreshold\",\"type\":\"uint256\"}],\"name\":\"setDebtThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isClaimExtras\",\"type\":\"bool\"}],\"name\":\"setIsClaimExtras\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isClaimRewards\",\"type\":\"bool\"}],\"name\":\"setIsClaimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_keepCRV\",\"type\":\"uint256\"}],\"name\":\"setKeepCRV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setMaxReportDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"}],\"name\":\"setMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setMinReportDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"setPathTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profitFactor\",\"type\":\"uint256\"}],\"name\":\"setProfitFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiswap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dex\",\"type\":\"address\"}],\"name\":\"switchDex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callCost\",\"type\":\"uint256\"}],\"name\":\"tendTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract VaultAPI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountNeeded\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToConvexDepositTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Strategy","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005a770dbd3ee6baf2802d29a901ef11501c44797a","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8e815aa582d71b1f041422851547c84547ed5e80e8d6c5393cf3d7cfc61b5f9e"}]}