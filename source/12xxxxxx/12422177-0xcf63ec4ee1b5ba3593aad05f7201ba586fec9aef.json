{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.2;\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract CommissionsStudio {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    enum CommissionStatus { queued, accepted, removed  }\r\n    \r\n    struct Creator {\r\n        uint newQueueId;\r\n        mapping (uint => Queue) queues;\r\n    }\r\n    \r\n    struct Queue {\r\n        uint minBid;\r\n        uint newCommissionId;\r\n        mapping (uint => Commission) commissions;\r\n    }\r\n    \r\n    struct Commission {\r\n        address payable recipient;\r\n        uint bid;\r\n        CommissionStatus status;\r\n    }\r\n\r\n    address payable public admin; // the recipient of all fees\r\n    uint public fee; // stored as basis points\r\n    \r\n    mapping(address => Creator) public creators;\r\n        \r\n    bool public callStarted; // ensures no re-entrancy can occur\r\n\r\n    modifier callNotStarted () {\r\n      require(!callStarted);\r\n      callStarted = true;\r\n      _;\r\n      callStarted = false;\r\n    }\r\n    \r\n    modifier onlyAdmin () {\r\n        require(msg.sender == admin, \"not the admin\");\r\n        _;\r\n    }\r\n    \r\n    modifier isValidQueue (address _creator, uint _queueId) {\r\n        require(_queueId < creators[_creator].newQueueId, \"queue not valid\");\r\n        _;\r\n    }\r\n    \r\n    modifier isValidCommission (address _creator, uint _queueId, uint _commissionId) {\r\n        require(_commissionId < creators[_creator].queues[_queueId].newCommissionId, \"commission not valid\");\r\n        _;\r\n    }\r\n    \r\n    constructor(address payable _admin, uint _fee) {\r\n        admin = _admin;\r\n        fee = _fee;\r\n    }\r\n     \r\n    function updateAdmin (address payable _newAdmin)\r\n    public\r\n    callNotStarted\r\n    onlyAdmin\r\n    {\r\n        admin = _newAdmin;\r\n        emit AdminUpdated(_newAdmin);\r\n    }\r\n    \r\n    function updateFee (uint _newFee)\r\n    public\r\n    callNotStarted\r\n    onlyAdmin\r\n    {\r\n        fee = _newFee;\r\n        emit FeeUpdated(_newFee);\r\n    }\r\n    \r\n    function registerQueue(uint _minBid, string memory _queueHash) \r\n    public\r\n    callNotStarted\r\n    {        \r\n        Queue storage newQueue = creators[msg.sender].queues[creators[msg.sender].newQueueId];\r\n        newQueue.minBid = _minBid;\r\n        \r\n        emit QueueRegistered(msg.sender, creators[msg.sender].newQueueId, _minBid, _queueHash);\r\n        creators[msg.sender].newQueueId++;\r\n    }\r\n    \r\n    function updateQueueMinBid(uint _queueId, uint _newMinBid)\r\n    public\r\n    callNotStarted\r\n    isValidQueue(msg.sender, _queueId)\r\n    {\r\n        Queue storage queue = creators[msg.sender].queues[_queueId];        \r\n        queue.minBid = _newMinBid;\r\n        \r\n        emit MinBidUpdated(msg.sender, _queueId, _newMinBid);\r\n    }\r\n    \r\n    function commission (address _creator, uint _queueId, string memory _hash)\r\n    public\r\n    payable\r\n    callNotStarted\r\n    isValidQueue(_creator, _queueId)\r\n    {\r\n        Queue storage queue = creators[_creator].queues[_queueId];        \r\n        require(msg.value >= queue.minBid, \"bid below minimum for this queue\"); // must send the proper amount of into the bid\r\n        \r\n        // Next, initialize the new commission\r\n        Commission storage newCommission = queue.commissions[queue.newCommissionId];\r\n        newCommission.recipient = payable(msg.sender);\r\n        newCommission.bid = msg.value;\r\n        newCommission.status = CommissionStatus.queued;\r\n                      \r\n        emit NewCommission(_creator, _queueId, queue.newCommissionId, _hash);\r\n        \r\n        queue.newCommissionId++;\r\n    }\r\n    \r\n    function rescindCommission (address _creator, uint _queueId, uint _commissionId) \r\n    public\r\n    callNotStarted\r\n    isValidQueue(_creator, _queueId)\r\n    {\r\n        Queue storage queue = creators[_creator].queues[_queueId];        \r\n        require(_commissionId < queue.newCommissionId, \"commission not valid\"); // must be a valid previously instantiated commission\r\n        Commission storage selectedCommission = queue.commissions[_commissionId];\r\n        require(msg.sender == selectedCommission.recipient, \"commission not yours\"); // may only be performed by the person who commissioned it\r\n        require(selectedCommission.status == CommissionStatus.queued, \"commission not in queue\"); // the commission must still be queued\r\n      \r\n        // we mark it as removed and return the individual their bid\r\n        selectedCommission.status = CommissionStatus.removed;\r\n        selectedCommission.recipient.transfer(selectedCommission.bid);\r\n        \r\n        emit CommissionRescinded(_creator, _queueId, _commissionId);\r\n    }\r\n    \r\n    function increaseCommissionBid (address _creator, uint _queueId, uint _commissionId)\r\n    public\r\n    payable\r\n    callNotStarted\r\n    isValidQueue(_creator, _queueId)\r\n    {\r\n        Queue storage queue = creators[_creator].queues[_queueId];        \r\n        require(_commissionId < queue.newCommissionId, \"commission not valid\"); // must be a valid previously instantiated commission\r\n        Commission storage selectedCommission = queue.commissions[_commissionId];\r\n        require(msg.sender == selectedCommission.recipient, \"commission not yours\"); // may only be performed by the person who commissioned it\r\n        require(selectedCommission.status == CommissionStatus.queued, \"commission not in queue\"); // the commission must still be queued\r\n\r\n        // then we update the commission's bid\r\n        selectedCommission.bid = msg.value + selectedCommission.bid;\r\n        \r\n        emit CommissionBidUpdated(_creator, _queueId, _commissionId, selectedCommission.bid);\r\n    }\r\n    \r\n    function processCommissions(uint _queueId, uint[] memory _commissionIds)\r\n    public\r\n    callNotStarted\r\n    isValidQueue(msg.sender, _queueId)\r\n    {\r\n        Queue storage queue = creators[msg.sender].queues[_queueId];        \r\n        for (uint i = 0; i < _commissionIds.length; i++){\r\n            require(_commissionIds[i] < queue.newCommissionId, \"commission not valid\"); // must be a valid previously instantiated commission\r\n            Commission storage selectedCommission = queue.commissions[_commissionIds[i]];\r\n            require(selectedCommission.status == CommissionStatus.queued, \"commission not in queue\");  \r\n            \r\n            uint feePaid = (selectedCommission.bid * fee) / 10000;\r\n            admin.transfer(feePaid);\r\n            \r\n            selectedCommission.status = CommissionStatus.accepted; // first, we change the status of the commission to accepted\r\n            payable(msg.sender).transfer(selectedCommission.bid - feePaid); // next we accept the payment for the commission\r\n            \r\n            emit CommissionProcessed(msg.sender, _queueId, _commissionIds[i]);\r\n        }\r\n    }\r\n    \r\n    function getCreator(address _creator)\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        return creators[_creator].newQueueId;\r\n    }\r\n    \r\n    function getQueue(address _creator, uint _queueId)\r\n    public\r\n    view\r\n    returns (uint, uint)\r\n    {\r\n        return ( creators[_creator].queues[_queueId].minBid, creators[_creator].queues[_queueId].newCommissionId );\r\n    }\r\n    \r\n    function getCommission(address _creator, uint _queueId, uint _commissionId)\r\n    public\r\n    view\r\n    returns (Commission memory)\r\n    {\r\n        return creators[_creator].queues[_queueId].commissions[_commissionId];\r\n    }\r\n    \r\n    event AdminUpdated(address _newAdmin);\r\n    event FeeUpdated(uint _newFee);\r\n    event MinBidUpdated(address _creator, uint _queueId, uint _newMinBid);\r\n    event QueueRegistered(address _creator, uint _queueId, uint _minBid, string _hash);\r\n    event NewCommission(address _creator, uint _queueId, uint _commissionId, string _hash);\r\n    event CommissionBidUpdated(address _creator, uint _queueId, uint _commissionId, uint _newBid);\r\n    event CommissionRescinded(address _creator, uint _queueId, uint _commissionId);\r\n    event CommissionProcessed(address _creator, uint _queueId, uint _commissionId);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"AdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_queueId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_commissionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBid\",\"type\":\"uint256\"}],\"name\":\"CommissionBidUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_queueId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_commissionId\",\"type\":\"uint256\"}],\"name\":\"CommissionProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_queueId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_commissionId\",\"type\":\"uint256\"}],\"name\":\"CommissionRescinded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"FeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_queueId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMinBid\",\"type\":\"uint256\"}],\"name\":\"MinBidUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_queueId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_commissionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"NewCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_queueId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minBid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"QueueRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_queueId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"commission\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"creators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newQueueId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_queueId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commissionId\",\"type\":\"uint256\"}],\"name\":\"getCommission\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"enum CommissionsStudio.CommissionStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct CommissionsStudio.Commission\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getCreator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_queueId\",\"type\":\"uint256\"}],\"name\":\"getQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_queueId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commissionId\",\"type\":\"uint256\"}],\"name\":\"increaseCommissionBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_queueId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_commissionIds\",\"type\":\"uint256[]\"}],\"name\":\"processCommissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_queueHash\",\"type\":\"string\"}],\"name\":\"registerQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_queueId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commissionId\",\"type\":\"uint256\"}],\"name\":\"rescindCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"updateAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_queueId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMinBid\",\"type\":\"uint256\"}],\"name\":\"updateQueueMinBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CommissionsStudio","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000fd51058c98e810f9d182104e8b41551a3a020af30000000000000000000000000000000000000000000000000000000000000258","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9b2019bd8d2faa6660a94102b9a72790d3471b6a098dabb435aadd3cfd23b313"}]}