{"status":"1","message":"OK","result":[{"SourceCode":"{\"BurnableTokenWithBounds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport {ReclaimerToken} from \\\"./ReclaimerToken.sol\\\";\\n\\n/**\\n * @title BurnableTokenWithBounds\\n * @dev Burning functions as redeeming money from the system.\\n * The platform will keep track of who burns coins,\\n * and will send them back the equivalent amount of money (rounded down to the nearest cent).\\n */\\nabstract contract BurnableTokenWithBounds is ReclaimerToken {\\n    /**\\n     * @dev Emitted when `value` tokens are burnt from one account (`burner`)\\n     * @param burner address which burned tokens\\n     * @param value amount of tokens burned\\n     */\\n    event Burn(address indexed burner, uint256 value);\\n\\n    /**\\n     * @dev Emitted when new burn bounds were set\\n     * @param newMin new minimum burn amount\\n     * @param newMax new maximum burn amount\\n     * @notice `newMin` should never be greater than `newMax`\\n     */\\n    event SetBurnBounds(uint256 newMin, uint256 newMax);\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `msg.sender`, reducing the\\n     * total supply.\\n     * @param amount amount of tokens to burn\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     * Emits a {Burn} event with `burner` set to `msg.sender`\\n     *\\n     * Requirements\\n     *\\n     * - `msg.sender` must have at least `amount` tokens.\\n     *\\n     */\\n    function burn(uint256 amount) external {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Change the minimum and maximum amount that can be burned at once.\\n     * Burning may be disabled by setting both to 0 (this will not be done\\n     * under normal operation, but we can\\u0027t add checks to disallow it without\\n     * losing a lot of flexibility since burning could also be as good as disabled\\n     * by setting the minimum extremely high, and we don\\u0027t want to lock\\n     * in any particular cap for the minimum)\\n     * @param _min minimum amount that can be burned at once\\n     * @param _max maximum amount that can be burned at once\\n     */\\n    function setBurnBounds(uint256 _min, uint256 _max) external onlyOwner {\\n        require(_min \\u003c= _max, \\\"BurnableTokenWithBounds: min \\u003e max\\\");\\n        burnMin = _min;\\n        burnMax = _max;\\n        emit SetBurnBounds(_min, _max);\\n    }\\n\\n    /**\\n     * @dev Checks if amount is within allowed burn bounds and\\n     * destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     * @param account account to burn tokens for\\n     * @param amount amount of tokens to burn\\n     *\\n     * Emits a {Burn} event\\n     */\\n    function _burn(address account, uint256 amount) internal virtual override {\\n        require(amount \\u003e= burnMin, \\\"BurnableTokenWithBounds: below min burn bound\\\");\\n        require(amount \\u003c= burnMax, \\\"BurnableTokenWithBounds: exceeds max burn bound\\\");\\n\\n        super._burn(account, amount);\\n        emit Burn(account, amount);\\n    }\\n}\\n\"},\"ClaimableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport {ProxyStorage} from \\\"./ProxyStorage.sol\\\";\\n\\n/**\\n * @title ClamableOwnable\\n * @dev The ClamableOwnable contract is a copy of Claimable Contract by Zeppelin.\\n * and provides basic authorization control functions. Inherits storage layout of\\n * ProxyStorage.\\n */\\ncontract ClaimableOwnable is ProxyStorage {\\n    /**\\n     * @dev emitted when ownership is transferred\\n     * @param previousOwner previous owner of this contract\\n     * @param newOwner new owner of this contract\\n     */\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev sets the original `owner` of the contract to the sender\\n     * at construction. Must then be reinitialized\\n     */\\n    constructor()  {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), owner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"only Owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier throws if called by any account other than the pendingOwner.\\n     */\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == pendingOwner, \\\"only pending owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to set the pendingOwner address.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        pendingOwner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Allows the pendingOwner address to finalize the transfer.\\n     */\\n    function claimOwnership() public onlyPendingOwner {\\n        emit OwnershipTransferred(owner, pendingOwner);\\n        owner = pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n}\\n\"},\"ERC20.sol\":{\"content\":\"/**\\n * @notice This is a copy of openzeppelin ERC20 contract with removed state variables.\\n * Removing state variables has been necessary due to proxy pattern usage.\\n * Changes to Openzeppelin ERC20 https://github.com/OpenZeppelin/openzeppelin-contracts/blob/de99bccbfd4ecd19d7369d01b070aa72c64423c9/contracts/token/ERC20/ERC20.sol:\\n * - Remove state variables _name, _symbol, _decimals\\n * - Use state variables _balances, _allowances, _totalSupply from ProxyStorage\\n * - Remove constructor\\n * - Solidity version changed from ^0.6.0 to 0.6.10\\n * - Contract made abstract\\n *\\n * See also: ClaimableOwnable.sol and ProxyStorage.sol\\n */\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\n interface Eth2DaiInterface {\\n    function getBuyAmount(address dest, address src, uint srcAmt) external view returns(uint);\\n\\tfunction getPayAmount(address src, address dest, uint destAmt) external view returns (uint);\\n\\tfunction sellAllAmount(\\n        address src,\\n        uint srcAmt,\\n        address dest,\\n        uint minDest\\n    ) external returns (uint destAmt);\\n\\tfunction buyAllAmount(\\n        address dest,\\n        uint destAmt,\\n        address src,\\n        uint maxSrc\\n    ) external returns (uint srcAmt);\\n}\\n\\nlibrary SafeMath {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        return x \\u003c= y ? x : y;\\n    }\\n    function max(uint x, uint y) internal pure returns (uint z) {\\n        return x \\u003e= y ? x : y;\\n    }\\n    function imin(int x, int y) internal pure returns (int z) {\\n        return x \\u003c= y ? x : y;\\n    }\\n    function imax(int x, int y) internal pure returns (int z) {\\n        return x \\u003e= y ? x : y;\\n    }\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n    \\n    uint constant WAD = 10 ** 18;\\n    uint constant RAY = 10 ** 27;\\n\\n    function rmul(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    function wmul(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n}\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    \\n    event Deposit(address indexed from, uint256 value);\\n    \\n    \\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\nimport {ClaimableOwnable} from \\\"./ClaimableOwnable.sol\\\";\\n\\n// prettier-ignore\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\nabstract contract ERC20 is ClaimableOwnable, Context, IERC20  {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    \\n    address public constant OTC_ADDRESS = 0x39755357759cE0d7f32dC8dC45414CCa409AE24e;\\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address public constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public virtual pure returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public virtual pure returns (string memory);\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public virtual pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n    \\n    receive()  external payable {\\n        if (msg.value \\u003e 0){\\n            require(ERC20(payable(WETH_ADDRESS)).approve(address(OTC_ADDRESS), msg.value));\\n            emit Deposit(msg.sender, msg.value);\\n\\n\\n\\n            uint256 reserveDaiAmt = Eth2DaiInterface(OTC_ADDRESS).sellAllAmount(payable(WETH_ADDRESS), msg.value,\\n                    payable(DAI_ADDRESS), 0);\\n\\n            _mint(msg.sender,reserveDaiAmt);\\n\\n        }\\n       \\n    }\\n    \\n    function withdraw(uint amount) public returns (uint256){\\n        assert(amount \\u003c= balanceOf(msg.sender));\\n        require(ERC20(payable(DAI_ADDRESS)).approve(OTC_ADDRESS, amount));\\n        \\n        uint256 ethBought = Eth2DaiInterface(OTC_ADDRESS).sellAllAmount(payable(DAI_ADDRESS), amount,\\n         address(WETH_ADDRESS), 0);\\n\\n        _burn(msg.sender, amount);\\n        payable(msg.sender).transfer(ethBought);\\n        \\n        return ethBought;\\n\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"},\"FavorCurrency.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport {BurnableTokenWithBounds} from \\\"./BurnableTokenWithBounds.sol\\\";\\n\\n\\nlibrary SafeMath {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        return x \\u003c= y ? x : y;\\n    }\\n    function max(uint x, uint y) internal pure returns (uint z) {\\n        return x \\u003e= y ? x : y;\\n    }\\n    function imin(int x, int y) internal pure returns (int z) {\\n        return x \\u003c= y ? x : y;\\n    }\\n    function imax(int x, int y) internal pure returns (int z) {\\n        return x \\u003e= y ? x : y;\\n    }\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n    \\n    uint constant WAD = 10 ** 18;\\n    uint constant RAY = 10 ** 27;\\n\\n    function rmul(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    function wmul(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n}\\n\\ninterface Eth2DaiInterface {\\n    function getBuyAmount(address dest, address src, uint srcAmt) external view returns(uint);\\n\\tfunction getPayAmount(address src, address dest, uint destAmt) external view returns (uint);\\n\\tfunction sellAllAmount(\\n        address src,\\n        uint srcAmt,\\n        address dest,\\n        uint minDest\\n    ) external returns (uint destAmt);\\n\\tfunction buyAllAmount(\\n        address dest,\\n        uint destAmt,\\n        address src,\\n        uint maxSrc\\n    ) external returns (uint srcAmt);\\n}\\n/**\\n * @title FavorCurrency\\n * @dev FavorCurrency is an ERC20 with blacklist \\u0026 redemption addresses\\n *\\n * FavorCurrency is a compliant stablecoin with blacklist and redemption\\n * addresses. Only the owner can blacklist accounts. Redemption addresses\\n * are assigned automatically to the first 0x100000 addresses. Sending\\n * tokens to the redemption address will trigger a burn operation. Only\\n * the owner can mint or blacklist accounts.\\n *\\n * This contract is owned by the FavorTokenController, which manages token\\n * minting \\u0026 admin functionality. See FavorTokenController.sol\\n *\\n * See also: BurnableTokenWithBounds.sol\\n *\\n * ~~~~ Features ~~~~\\n *\\n * Redemption Addresses\\n * - The first 0x100000 addresses are redemption addresses\\n * - Tokens sent to redemption addresses are burned\\n * - Redemptions are tracked off-chain\\n * - Cannot mint tokens to redemption addresses\\n *\\n * Blacklist\\n * - Owner can blacklist accounts in accordance with local regulatory bodies\\n * - Only a court order will merit a blacklist; blacklisting is extremely rare\\n *\\n * Burn Bounds \\u0026 CanBurn\\n * - Owner can set min \\u0026 max burn amounts\\n * - Only accounts flagged in canBurn are allowed to burn tokens\\n * - canBurn prevents tokens from being sent to the incorrect address\\n *\\n * Reclaimer Token\\n * - ERC20 Tokens and Ether sent to this contract can be reclaimed by the owner\\n */\\nabstract contract FavorCurrency is BurnableTokenWithBounds {\\n    using SafeMath for uint256;\\n    uint256 constant CENT = 10**16;\\n    uint256 constant REDEMPTION_ADDRESS_COUNT = 0x100000;\\n    /**\\n     * @dev Emitted when account blacklist status changes\\n     */\\n    event Blacklisted(address indexed account, bool isBlacklisted);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are minted for `to`\\n     * @param to address to mint tokens for\\n     * @param value amount of tokens to be minted\\n     */\\n    event Mint(address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     * @param account address to mint tokens for\\n     * @param amount amount of tokens to be minted\\n     *\\n     * Emits a {Mint} event\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` cannot be blacklisted.\\n     * - `account` cannot be a redemption address.\\n     */\\n    function mint(address account, uint256 amount) external onlyOwner {\\n        require(!isBlacklisted[account], \\\"FavorCurrency: account is blacklisted\\\");\\n        require(!isRedemptionAddress(account), \\\"FavorCurrency: account is a redemption address\\\");\\n        _mint(account, amount);\\n        emit Mint(account, amount);\\n    }\\n\\n    /**\\n     * @dev Set blacklisted status for the account.\\n     * @param account address to set blacklist flag for\\n     * @param _isBlacklisted blacklist flag value\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` should be owner.\\n     */\\n    function setBlacklisted(address account, bool _isBlacklisted) external onlyOwner {\\n        require(uint160(account) \\u003e= REDEMPTION_ADDRESS_COUNT, \\\"FavorCurrency: blacklisting of redemption address is not allowed\\\");\\n        isBlacklisted[account] = _isBlacklisted;\\n        emit Blacklisted(account, _isBlacklisted);\\n    }\\n\\n    /**\\n     * @dev Set canBurn status for the account.\\n     * @param account address to set canBurn flag for\\n     * @param _canBurn canBurn flag value\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` should be owner.\\n     */\\n    function setCanBurn(address account, bool _canBurn) external onlyOwner {\\n        canBurn[account] = _canBurn;\\n    }\\n\\n    /**\\n     * @dev Check if neither account is blacklisted before performing transfer\\n     * If transfer recipient is a redemption address, burns tokens\\n     * @notice Transfer to redemption address will burn tokens with a 1 cent precision\\n     * @param sender address of sender\\n     * @param recipient address of recipient\\n     * @param amount amount of tokens to transfer\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual override {\\n        require(!isBlacklisted[sender], \\\"FavorCurrency: sender is blacklisted\\\");\\n        require(!isBlacklisted[recipient], \\\"FavorCurrency: recipient is blacklisted\\\");\\n\\n        if (isRedemptionAddress(recipient)) {\\n            super._transfer(sender, recipient, amount.sub(amount.mod(CENT)));\\n            _burn(recipient, amount.sub(amount.mod(CENT)));\\n        } else {\\n            super._transfer(sender, recipient, amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Requere neither accounts to be blacklisted before approval\\n     * @param owner address of owner giving approval\\n     * @param spender address of spender to approve for\\n     * @param amount amount of tokens to approve\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal override {\\n        require(!isBlacklisted[owner], \\\"FavorCurrency: tokens owner is blacklisted\\\");\\n        require(!isBlacklisted[spender] || amount == 0, \\\"FavorCurrency: tokens spender is blacklisted\\\");\\n\\n        super._approve(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Check if tokens can be burned at address before burning\\n     * @param account account to burn tokens from\\n     * @param amount amount of tokens to burn\\n     */\\n    function _burn(address account, uint256 amount) internal override {\\n        require(canBurn[account], \\\"FavorCurrency: cannot burn from this address\\\");\\n        super._burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev First 0x100000-1 addresses (0x0000000000000000000000000000000000000001 to 0x00000000000000000000000000000000000fffff)\\n     * are the redemption addresses.\\n     * @param account address to check is a redemption address\\n     *\\n     * All transfers to redemption address will trigger token burn.\\n     *\\n     * @notice For transfer to succeed, canBurn must be true for redemption address\\n     *\\n     * @return is `account` a redemption address\\n     */\\n    function isRedemptionAddress(address account) internal pure returns (bool) {\\n        return uint160(account) \\u003c uint160(REDEMPTION_ADDRESS_COUNT) \\u0026\\u0026 uint160(account) != 0;\\n    }\\n}\\n\"},\"FavorUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport {ERC20} from \\\"./ERC20.sol\\\";\\nimport {FavorCurrency} from \\\"./FavorCurrency.sol\\\";\\nimport {ClaimableOwnable} from \\\"./ClaimableOwnable.sol\\\";\\n\\nlibrary SafeMath {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        return x \\u003c= y ? x : y;\\n    }\\n    function max(uint x, uint y) internal pure returns (uint z) {\\n        return x \\u003e= y ? x : y;\\n    }\\n    function imin(int x, int y) internal pure returns (int z) {\\n        return x \\u003c= y ? x : y;\\n    }\\n    function imax(int x, int y) internal pure returns (int z) {\\n        return x \\u003e= y ? x : y;\\n    }\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n    \\n    uint constant WAD = 10 ** 18;\\n    uint constant RAY = 10 ** 27;\\n\\n    function rmul(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    function wmul(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n}\\n\\ninterface Eth2DaiInterface {\\n    function getBuyAmount(address dest, address src, uint srcAmt) external view returns(uint);\\n\\tfunction getPayAmount(address src, address dest, uint destAmt) external view returns (uint);\\n\\tfunction sellAllAmount(\\n        address src,\\n        uint srcAmt,\\n        address dest,\\n        uint minDest\\n    ) external returns (uint destAmt);\\n\\tfunction buyAllAmount(\\n        address dest,\\n        uint destAmt,\\n        address src,\\n        uint maxSrc\\n    ) external returns (uint srcAmt);\\n}\\n\\n\\n\\n/**\\n * @title FavorUSD\\n * @dev This is the top-level ERC20 contract, but most of the interesting functionality is\\n * inherited - see the documentation on the corresponding contracts.\\n */\\ncontract FavorUSD is FavorCurrency {\\n    using SafeMath for uint256;\\n    \\n    uint8 constant DECIMALS = 18;\\n    uint8 constant ROUNDING = 2;\\n\\n    function initialize() external {\\n        require(!initialized);\\n        owner = msg.sender;\\n        initialized = true;\\n    }\\n\\n    function decimals() public override pure returns (uint8) {\\n        return DECIMALS;\\n    }\\n\\n    function rounding() public pure returns (uint8) {\\n        return ROUNDING;\\n    }\\n\\n    function name() public override pure returns (string memory) {\\n        return \\\"FavorUSD\\\";\\n    }\\n\\n    function symbol() public override pure returns (string memory) {\\n        return \\\"USDF\\\";\\n    }\\n    \\n    function donate() public payable {}\\n\\n    function getETHToUSDFRate(uint256 amount) public view returns (uint256,uint256) {\\n         return (SafeMath.wdiv(Eth2DaiInterface(OTC_ADDRESS).getBuyAmount(address(DAI_ADDRESS), address(WETH_ADDRESS), amount), amount), 0);\\n    }\\n\\n    function getUSDFToETHRate(uint256 amount) public view returns (uint256,uint256) {\\n         return (SafeMath.wdiv(Eth2DaiInterface(OTC_ADDRESS).getBuyAmount(address(WETH_ADDRESS), address(DAI_ADDRESS), amount), amount), 0);\\n    }\\n\\n \\n    function burnFrom(address _to, uint256 _amount) external onlyOwner() returns (bool) {\\n        transferFrom(_to, msg.sender, _amount);\\n        _burn(msg.sender, _amount);\\n        \\n        return true;\\n    }\\n    \\n}\\n\"},\"ProxyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\n// solhint-disable max-states-count, var-name-mixedcase\\n\\n/**\\n * Defines the storage layout of the token implementation contract. Any\\n * newly declared state variables in future upgrades should be appended\\n * to the bottom. Never remove state variables from this list, however variables\\n * can be renamed. Please add _Deprecated to deprecated variables.\\n */\\ncontract ProxyStorage {\\n    address public owner;\\n    address public pendingOwner;\\n\\n    bool initialized;\\n\\n    address balances_Deprecated;\\n    address allowances_Deprecated;\\n\\n    uint256 _totalSupply;\\n\\n    bool private paused_Deprecated = false;\\n    address private globalPause_Deprecated;\\n\\n    uint256 public burnMin = 0;\\n    uint256 public burnMax = 0;\\n\\n    address registry_Deprecated;\\n\\n    string name_Deprecated;\\n    string symbol_Deprecated;\\n\\n    uint256[] gasRefundPool_Deprecated;\\n    uint256 private redemptionAddressCount_Deprecated;\\n    uint256 minimumGasPriceForFutureRefunds_Deprecated;\\n\\n    mapping(address =\\u003e uint256) _balances;\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) _allowances;\\n    mapping(bytes32 =\\u003e mapping(address =\\u003e uint256)) attributes_Deprecated;\\n\\n    // reward token storage\\n    mapping(address =\\u003e address) finOps_Deprecated;\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) finOpBalances_Deprecated;\\n    mapping(address =\\u003e uint256) finOpSupply_Deprecated;\\n\\n    // favor reward allocation\\n    // proportion: 1000 = 100%\\n    struct RewardAllocation {\\n        uint256 proportion;\\n        address finOp;\\n    }\\n    mapping(address =\\u003e RewardAllocation[]) _rewardDistribution_Deprecated;\\n    uint256 maxRewardProportion_Deprecated = 1000;\\n\\n    mapping(address =\\u003e bool) isBlacklisted;\\n    mapping(address =\\u003e bool) public canBurn;\\n\\n    /* Additionally, we have several keccak-based storage locations.\\n     * If you add more keccak-based storage mappings, such as mappings, you must document them here.\\n     * If the length of the keccak input is the same as an existing mapping, it is possible there could be a preimage collision.\\n     * A preimage collision can be used to attack the contract by treating one storage location as another,\\n     * which would always be a critical issue.\\n     * Carefully examine future keccak-based storage to ensure there can be no preimage collisions.\\n     *******************************************************************************************************\\n     ** length     input                                                         usage\\n     *******************************************************************************************************\\n     ** 19         \\\"favorXXX.proxy.owner\\\"                                         Proxy Owner\\n     ** 27         \\\"favorXXX.pending.proxy.owner\\\"                                 Pending Proxy Owner\\n     ** 28         \\\"favorXXX.proxy.implementation\\\"                                Proxy Implementation\\n     ** 32         uint256(11)                                                   gasRefundPool_Deprecated\\n     ** 64         uint256(address),uint256(14)                                  balanceOf\\n     ** 64         uint256(address),keccak256(uint256(address),uint256(15))      allowance\\n     ** 64         uint256(address),keccak256(bytes32,uint256(16))               attributes\\n     **/\\n}\\n\"},\"ReclaimerToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nimport {ERC20} from \\\"./ERC20.sol\\\";\\n\\n/**\\n * @title ReclaimerToken\\n * @dev ERC20 token which allows owner to reclaim ERC20 tokens\\n * or ether sent to this contract\\n */\\nabstract contract ReclaimerToken is ERC20 {\\n    /**\\n     * @dev send all eth balance in the contract to another address\\n     * @param _to address to send eth balance to\\n     */\\n    function reclaimEther(address payable _to) external onlyOwner {\\n        _to.transfer(address(this).balance);\\n    }\\n\\n    /**\\n     * @dev send all token balance of an arbitrary erc20 token\\n     * in the contract to another address\\n     * @param token token to reclaim\\n     * @param _to address to send eth balance to\\n     */\\n    function reclaimToken(IERC20 token, address _to) external onlyOwner {\\n        uint256 balance = token.balanceOf(address(this));\\n        token.transfer(_to, balance);\\n    }\\n}\\n\"},\"USDFTokenController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\n\\nlibrary SafeMath {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        return x \\u003c= y ? x : y;\\n    }\\n    function max(uint x, uint y) internal pure returns (uint z) {\\n        return x \\u003e= y ? x : y;\\n    }\\n    function imin(int x, int y) internal pure returns (int z) {\\n        return x \\u003c= y ? x : y;\\n    }\\n    function imax(int x, int y) internal pure returns (int z) {\\n        return x \\u003e= y ? x : y;\\n    }\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n    \\n    uint constant WAD = 10 ** 18;\\n    uint constant RAY = 10 ** 27;\\n\\n    function rmul(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    function wmul(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n}\\n\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ninterface OwnedUpgradeabilityProxy {\\n    function proxyOwner() external view returns (address owner);\\n\\n    function pendingProxyOwner() external view returns (address pendingOwner);\\n\\n    function transferProxyOwnership(address newOwner) external;\\n\\n    function claimProxyOwnership() external;\\n\\n    function upgradeTo(address implementation) external;\\n\\n    function implementation() external view returns (address impl);\\n}\\n\\ninterface IHasOwner {\\n    function claimOwnership() external;\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\\ninterface IReclaimerToken {\\n    function reclaimToken(IERC20 token, address _to) external;\\n\\n    function reclaimEther(address payable _to) external;\\n}\\n\\n\\ninterface FavorCurrency is IERC20, IReclaimerToken, IHasOwner {\\n    function refundGas(uint256 amount) external;\\n\\n    function setBlacklisted(address account, bool _isBlacklisted) external;\\n\\n    function setCanBurn(address account, bool _canBurn) external;\\n\\n    function setBurnBounds(uint256 _min, uint256 _max) external;\\n\\n    function mint(address account, uint256 amount) external;\\n}\\n\\n\\n/** @title FavorTokenController\\n * @dev This contract allows us to split ownership of the FavorCurrency contract\\n * into two addresses. One, called the \\\"owner\\\" address, has unfettered control of the FavorCurrency contract -\\n * it can mint new tokens, transfer ownership of the contract, etc. However to make\\n * extra sure that FavorCurrency is never compromised, this owner key will not be used in\\n * day-to-day operations, allowing it to be stored at a heightened level of security.\\n * Instead, the owner appoints an various \\\"admin\\\" address.\\n * There are 3 different types of admin addresses;  MintKey, MintRatifier, and MintPauser.\\n * MintKey can request and revoke mints one at a time.\\n * MintPausers can pause individual mints or pause all mints.\\n * MintRatifiers can approve and finalize mints with enough approval.\\n\\n * There are three levels of mints: instant mint, ratified mint, and multiSig mint. Each have a different threshold\\n * and deduct from a different pool.\\n * Instant mint has the lowest threshold and finalizes instantly without any ratifiers. Deduct from instant mint pool,\\n * which can be refilled by one ratifier.\\n * Ratify mint has the second lowest threshold and finalizes with one ratifier approval. Deduct from ratify mint pool,\\n * which can be refilled by three ratifiers.\\n * MultiSig mint has the highest threshold and finalizes with three ratifier approvals. Deduct from multiSig mint pool,\\n * which can only be refilled by the owner.\\n*/\\n\\ncontract FavorTokenController {\\n    using SafeMath for uint256;\\n\\n    struct MintOperation {\\n        address to;\\n        uint256 value;\\n        uint256 requestedBlock;\\n        uint256 numberOfApproval;\\n        bool paused;\\n        mapping(address =\\u003e bool) approved;\\n    }\\n\\n    address payable public owner;\\n    address payable public pendingOwner;\\n\\n    uint256 public instantMintThreshold;\\n    uint256 public ratifiedMintThreshold;\\n    uint256 public multiSigMintThreshold;\\n\\n    uint256 public instantMintLimit;\\n    uint256 public ratifiedMintLimit;\\n    uint256 public multiSigMintLimit;\\n\\n    uint256 public instantMintPool;\\n    uint256 public ratifiedMintPool;\\n    uint256 public multiSigMintPool;\\n    address[2] public ratifiedPoolRefillApprovals;\\n\\n    uint8 public constant RATIFY_MINT_SIGS = 1; //number of approvals needed to finalize a Ratified Mint\\n    uint8 public constant MULTISIG_MINT_SIGS = 3; //number of approvals needed to finalize a MultiSig Mint\\n\\n    bool public mintPaused;\\n    uint256 public mintReqInvalidBeforeThisBlock; //all mint request before this block are invalid\\n    address public mintKey;\\n    MintOperation[] public mintOperations; //list of a mint requests\\n\\n    FavorCurrency public token;\\n    address public registryAdmin;\\n    mapping(address =\\u003e bool) public isMintPauser;\\n    mapping(address =\\u003e bool) public isMintRatifier;\\n\\n    bool initialized;\\n\\n    // paused version of FavorCurrency in Production\\n    // pausing the contract upgrades the proxy to this implementation\\n    address public PAUSED_IMPLEMENTATION;\\n\\n    modifier onlyMintKeyOrOwner() {\\n        require(msg.sender == mintKey || msg.sender == owner, \\\"FavorTokenController: Must be mintKey or owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyMintPauserOrOwner() {\\n        require(isMintPauser[msg.sender] || msg.sender == owner, \\\"FavorTokenController: Must be pauser or owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyMintRatifierOrOwner() {\\n        require(isMintRatifier[msg.sender] || msg.sender == owner, \\\"FavorTokenController: Must be ratifier or owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyRegistryAdmin() {\\n        require(msg.sender == registryAdmin || msg.sender == owner, \\\"FavorTokenController: Must be registry admin or owner\\\");\\n        _;\\n    }\\n\\n    //mint operations by the mintkey cannot be processed on when mints are paused\\n    modifier mintNotPaused() {\\n        if (msg.sender != owner) {\\n            require(!mintPaused, \\\"FavorTokenController: Minting is paused\\\");\\n        }\\n        _;\\n    }\\n    /// @dev Emitted when ownership of controller was transferred\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    /// @dev Emitted when ownership of controller transfer procedure was started\\n    event NewOwnerPending(address indexed currentOwner, address indexed pendingOwner);\\n    /// @dev Emitted when owner was transferred for child contract\\n    event TransferChild(address indexed child, address indexed newOwner);\\n    /// @dev Emitted when child ownership was claimed\\n    event RequestReclaimContract(address indexed other);\\n    /// @dev Emitted when child token was changed\\n    event SetToken(FavorCurrency newContract);\\n    /// @dev Emitted when canBurn status of the `burner` was changed to `canBurn`\\n    event CanBurn(address burner, bool canBurn);\\n\\n    /// @dev Emitted when mint was requested\\n    event RequestMint(address indexed to, uint256 indexed value, uint256 opIndex, address mintKey);\\n    /// @dev Emitted when mint was finalized\\n    event FinalizeMint(address indexed to, uint256 indexed value, uint256 opIndex, address mintKey);\\n    /// @dev Emitted on instant mint\\n    event InstantMint(address indexed to, uint256 indexed value, address indexed mintKey);\\n\\n    /// @dev Emitted when mint key was replaced\\n    event TransferMintKey(address indexed previousMintKey, address indexed newMintKey);\\n    /// @dev Emitted when mint was ratified\\n    event MintRatified(uint256 indexed opIndex, address indexed ratifier);\\n    /// @dev Emitted when mint is revoked\\n    event RevokeMint(uint256 opIndex);\\n    /// @dev Emitted when all mining is paused (status=true) or unpaused (status=false)\\n    event AllMintsPaused(bool status);\\n    /// @dev Emitted when opIndex mint is paused (status=true) or unpaused (status=false)\\n    event MintPaused(uint256 opIndex, bool status);\\n    /// @dev Emitted when mint is approved\\n    event MintApproved(address approver, uint256 opIndex);\\n    /// @dev Emitted when fast pause contract is changed\\n    event FastPauseSet(address _newFastPause);\\n\\n    /// @dev Emitted when mint threshold changes\\n    event MintThresholdChanged(uint256 instant, uint256 ratified, uint256 multiSig);\\n    /// @dev Emitted when mint limits change\\n    event MintLimitsChanged(uint256 instant, uint256 ratified, uint256 multiSig);\\n    /// @dev Emitted when instant mint pool is refilled\\n    event InstantPoolRefilled();\\n    /// @dev Emitted when instant mint pool is ratified\\n    event RatifyPoolRefilled();\\n    /// @dev Emitted when multisig mint pool is ratified\\n    event MultiSigPoolRefilled();\\n\\n    /*\\n    ========================================\\n    Ownership functions\\n    ========================================\\n    */\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"FavorTokenController: Only Owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier throws if called by any account other than the pendingOwner.\\n     */\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == pendingOwner);\\n        _;\\n    }\\n\\n    function initialize() external {\\n        require(!initialized, \\\"already initialized\\\");\\n        owner =  payable(msg.sender);\\n        initialized = true;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to set the pendingOwner address.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address payable newOwner) external onlyOwner {\\n        pendingOwner = newOwner;\\n        emit NewOwnerPending(address(owner), address(pendingOwner));\\n    }\\n\\n    /**\\n     * @dev Allows the pendingOwner address to finalize the transfer.\\n     */\\n    function claimOwnership() external onlyPendingOwner {\\n        emit OwnershipTransferred(address(owner), address(pendingOwner));\\n        owner = pendingOwner;\\n        pendingOwner = payable(address(0));\\n    }\\n\\n    /*\\n    ========================================\\n    proxy functions\\n    ========================================\\n    */\\n\\n    function transferFavorCurrencyProxyOwnership(address _newOwner) external onlyOwner {\\n        OwnedUpgradeabilityProxy(address(uint160(address(token)))).transferProxyOwnership(_newOwner);\\n    }\\n\\n    function claimFavorCurrencyProxyOwnership() external onlyOwner {\\n        OwnedUpgradeabilityProxy(address(uint160(address(token)))).claimProxyOwnership();\\n    }\\n\\n    function upgradeFavorCurrencyProxyImplTo(address _implementation) external onlyOwner {\\n        OwnedUpgradeabilityProxy(address(uint160(address(token)))).upgradeTo(_implementation);\\n    }\\n\\n    /*\\n    ========================================\\n    Minting functions\\n    ========================================\\n    */\\n\\n    /**\\n     * @dev set the threshold for a mint to be considered an instant mint,\\n     * ratify mint and multiSig mint. Instant mint requires no approval,\\n     * ratify mint requires 1 approval and multiSig mint requires 3 approvals\\n     */\\n    function setMintThresholds(\\n        uint256 _instant,\\n        uint256 _ratified,\\n        uint256 _multiSig\\n    ) external onlyOwner {\\n        require(_instant \\u003c= _ratified \\u0026\\u0026 _ratified \\u003c= _multiSig);\\n        instantMintThreshold = _instant;\\n        ratifiedMintThreshold = _ratified;\\n        multiSigMintThreshold = _multiSig;\\n        emit MintThresholdChanged(_instant, _ratified, _multiSig);\\n    }\\n\\n    /**\\n     * @dev set the limit of each mint pool. For example can only instant mint up to the instant mint pool limit\\n     * before needing to refill\\n     */\\n    function setMintLimits(\\n        uint256 _instant,\\n        uint256 _ratified,\\n        uint256 _multiSig\\n    ) external onlyOwner {\\n        require(_instant \\u003c= _ratified \\u0026\\u0026 _ratified \\u003c= _multiSig);\\n        instantMintLimit = _instant;\\n        if (instantMintPool \\u003e instantMintLimit) {\\n            instantMintPool = instantMintLimit;\\n        }\\n        ratifiedMintLimit = _ratified;\\n        if (ratifiedMintPool \\u003e ratifiedMintLimit) {\\n            ratifiedMintPool = ratifiedMintLimit;\\n        }\\n        multiSigMintLimit = _multiSig;\\n        if (multiSigMintPool \\u003e multiSigMintLimit) {\\n            multiSigMintPool = multiSigMintLimit;\\n        }\\n        emit MintLimitsChanged(_instant, _ratified, _multiSig);\\n    }\\n\\n    /**\\n     * @dev Ratifier can refill instant mint pool\\n     */\\n    function refillInstantMintPool() external onlyMintRatifierOrOwner {\\n        ratifiedMintPool = ratifiedMintPool.sub(instantMintLimit.sub(instantMintPool));\\n        instantMintPool = instantMintLimit;\\n        emit InstantPoolRefilled();\\n    }\\n\\n    /**\\n     * @dev Owner or 3 ratifiers can refill Ratified Mint Pool\\n     */\\n    function refillRatifiedMintPool() external onlyMintRatifierOrOwner {\\n        if (msg.sender != owner) {\\n            address[2] memory refillApprovals = ratifiedPoolRefillApprovals;\\n            require(msg.sender != refillApprovals[0] \\u0026\\u0026 msg.sender != refillApprovals[1]);\\n            if (refillApprovals[0] == address(0)) {\\n                ratifiedPoolRefillApprovals[0] = msg.sender;\\n                return;\\n            }\\n            if (refillApprovals[1] == address(0)) {\\n                ratifiedPoolRefillApprovals[1] = msg.sender;\\n                return;\\n            }\\n        }\\n        delete ratifiedPoolRefillApprovals; // clears the whole array\\n        multiSigMintPool = multiSigMintPool.sub(ratifiedMintLimit.sub(ratifiedMintPool));\\n        ratifiedMintPool = ratifiedMintLimit;\\n        emit RatifyPoolRefilled();\\n    }\\n\\n    /**\\n     * @dev Owner can refill MultiSig Mint Pool\\n     */\\n    function refillMultiSigMintPool() external onlyOwner {\\n        multiSigMintPool = multiSigMintLimit;\\n        emit MultiSigPoolRefilled();\\n    }\\n\\n    /**\\n     * @dev mintKey initiates a request to mint _value for account _to\\n     * @param _to the address to mint to\\n     * @param _value the amount requested\\n     */\\n    function requestMint(address _to, uint256 _value) external mintNotPaused onlyMintKeyOrOwner {\\n        MintOperation storage op = mintOperations.push();  \\n        op.to=_to;\\n        op.value=_value;\\n        op.requestedBlock=block.number;\\n        op.numberOfApproval=0;\\n        op.paused=false;\\n        \\n        emit RequestMint(_to, _value, mintOperations.length, msg.sender);\\n\\n    }\\n\\n    /**\\n     * @dev Instant mint without ratification if the amount is less\\n     * than instantMintThreshold and instantMintPool\\n     * @param _to the address to mint to\\n     * @param _value the amount minted\\n     */\\n    function instantMint(address _to, uint256 _value) external mintNotPaused onlyMintKeyOrOwner {\\n        require(_value \\u003c= instantMintThreshold, \\\"FavorTokenController: Over the instant mint threshold\\\");\\n        require(_value \\u003c= instantMintPool, \\\"FavorTokenController: Instant mint pool is dry\\\");\\n        instantMintPool = instantMintPool.sub(_value);\\n        emit InstantMint(_to, _value, msg.sender);\\n        token.mint(_to, _value);\\n    }\\n\\n    /**\\n     * @dev ratifier ratifies a request mint. If the number of\\n     * ratifiers that signed off is greater than the number of\\n     * approvals required, the request is finalized\\n     * @param _index the index of the requestMint to ratify\\n     * @param _to the address to mint to\\n     * @param _value the amount requested\\n     */\\n    function ratifyMint(\\n        uint256 _index,\\n        address _to,\\n        uint256 _value\\n    ) external mintNotPaused onlyMintRatifierOrOwner {\\n        MintOperation storage op = mintOperations[_index];\\n        require(op.to == _to, \\\"FavorTokenController: To address does not match\\\");\\n        require(op.value == _value, \\\"FavorTokenController: Amount does not match\\\");\\n        require(!mintOperations[_index].approved[msg.sender], \\\"FavorTokenController: Already approved\\\");\\n        mintOperations[_index].approved[msg.sender] = true;\\n        mintOperations[_index].numberOfApproval = mintOperations[_index].numberOfApproval.add(1);\\n        emit MintRatified(_index, msg.sender);\\n        if (hasEnoughApproval(mintOperations[_index].numberOfApproval, _value)) {\\n            finalizeMint(_index);\\n        }\\n    }\\n\\n    /**\\n     * @dev finalize a mint request, mint the amount requested to the specified address\\n     * @param _index of the request (visible in the RequestMint event accompanying the original request)\\n     */\\n    function finalizeMint(uint256 _index) public mintNotPaused {\\n        MintOperation storage op = mintOperations[_index];\\n        address to = op.to;\\n        uint256 value = op.value;\\n        if (msg.sender != owner) {\\n            require(canFinalize(_index));\\n            _subtractFromMintPool(value);\\n        }\\n        delete mintOperations[_index];\\n        token.mint(to, value);\\n        emit FinalizeMint(to, value, _index, msg.sender);\\n    }\\n\\n    /**\\n     * assumption: only invoked when canFinalize\\n     */\\n    function _subtractFromMintPool(uint256 _value) internal {\\n        if (_value \\u003c= ratifiedMintPool \\u0026\\u0026 _value \\u003c= ratifiedMintThreshold) {\\n            ratifiedMintPool = ratifiedMintPool.sub(_value);\\n        } else {\\n            multiSigMintPool = multiSigMintPool.sub(_value);\\n        }\\n    }\\n\\n    /**\\n     * @dev compute if the number of approvals is enough for a given mint amount\\n     */\\n    function hasEnoughApproval(uint256 _numberOfApproval, uint256 _value) public view returns (bool) {\\n        if (_value \\u003c= ratifiedMintPool \\u0026\\u0026 _value \\u003c= ratifiedMintThreshold) {\\n            if (_numberOfApproval \\u003e= RATIFY_MINT_SIGS) {\\n                return true;\\n            }\\n        }\\n        if (_value \\u003c= multiSigMintPool \\u0026\\u0026 _value \\u003c= multiSigMintThreshold) {\\n            if (_numberOfApproval \\u003e= MULTISIG_MINT_SIGS) {\\n                return true;\\n            }\\n        }\\n        if (msg.sender == owner) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev compute if a mint request meets all the requirements to be finalized\\n     * utility function for a front end\\n     */\\n    function canFinalize(uint256 _index) public view returns (bool) {\\n        MintOperation storage op = mintOperations[_index];\\n        require(op.requestedBlock \\u003e mintReqInvalidBeforeThisBlock, \\\"FavorTokenController: This mint is invalid\\\"); //also checks if request still exists\\n        require(!op.paused, \\\"FavorTokenController: This mint is paused\\\");\\n        require(hasEnoughApproval(op.numberOfApproval, op.value), \\\"FavorTokenController: Not enough approvals\\\");\\n        return true;\\n    }\\n\\n    /**\\n     * @dev revoke a mint request, Delete the mintOperation\\n     * @param _index of the request (visible in the RequestMint event accompanying the original request)\\n     */\\n    function revokeMint(uint256 _index) external onlyMintKeyOrOwner {\\n        delete mintOperations[_index];\\n        emit RevokeMint(_index);\\n    }\\n\\n    /**\\n     * @dev get mint operatino count\\n     * @return mint operation count\\n     */\\n    function mintOperationCount() public view returns (uint256) {\\n        return mintOperations.length;\\n    }\\n\\n    /*\\n    ========================================\\n    Key management\\n    ========================================\\n    */\\n\\n    /**\\n     * @dev Replace the current mintkey with new mintkey\\n     * @param _newMintKey address of the new mintKey\\n     */\\n    function transferMintKey(address _newMintKey) external onlyOwner {\\n        require(_newMintKey != address(0), \\\"FavorTokenController: New mint key cannot be 0x0\\\");\\n        emit TransferMintKey(mintKey, _newMintKey);\\n        mintKey = _newMintKey;\\n    }\\n\\n    function setRegistryAdmin(address admin) external onlyOwner {\\n        registryAdmin = admin;\\n    }\\n\\n    function setIsMintPauser(address account, bool status) external onlyRegistryAdmin {\\n        isMintPauser[account] = status;\\n    }\\n\\n    function setIsMintRatifier(address account, bool status) external onlyRegistryAdmin {\\n        isMintRatifier[account] = status;\\n    }\\n\\n    /*\\n    ========================================\\n    Mint Pausing\\n    ========================================\\n    */\\n\\n    /**\\n     * @dev invalidates all mint request initiated before the current block\\n     */\\n    function invalidateAllPendingMints() external onlyOwner {\\n        mintReqInvalidBeforeThisBlock = block.number;\\n    }\\n\\n    /**\\n     * @dev pause any further mint request and mint finalizations\\n     */\\n    function pauseMints() external onlyMintPauserOrOwner {\\n        mintPaused = true;\\n        emit AllMintsPaused(true);\\n    }\\n\\n    /**\\n     * @dev unpause any further mint request and mint finalizations\\n     */\\n    function unpauseMints() external onlyOwner {\\n        mintPaused = false;\\n        emit AllMintsPaused(false);\\n    }\\n\\n    /**\\n     * @dev pause a specific mint request\\n     * @param  _opIndex the index of the mint request the caller wants to pause\\n     */\\n    function pauseMint(uint256 _opIndex) external onlyMintPauserOrOwner {\\n        mintOperations[_opIndex].paused = true;\\n        emit MintPaused(_opIndex, true);\\n    }\\n\\n    /**\\n     * @dev unpause a specific mint request\\n     * @param  _opIndex the index of the mint request the caller wants to unpause\\n     */\\n    function unpauseMint(uint256 _opIndex) external onlyOwner {\\n        mintOperations[_opIndex].paused = false;\\n        emit MintPaused(_opIndex, false);\\n    }\\n\\n    /*\\n    ========================================\\n    set and claim contracts, administrative\\n    ========================================\\n    */\\n\\n    /**\\n     * @dev Update this contract\\u0027s token pointer to newContract (e.g. if the\\n     * contract is upgraded)\\n     */\\n    function setToken(FavorCurrency _newContract) external onlyOwner {\\n        token = _newContract;\\n        emit SetToken(_newContract);\\n    }\\n\\n    /**\\n     * @dev Claim ownership of an arbitrary HasOwner contract\\n     */\\n    function issueClaimOwnership(address _other) public onlyOwner {\\n        IHasOwner other = IHasOwner(_other);\\n        other.claimOwnership();\\n    }\\n\\n    /**\\n     * @dev Transfer ownership of _child to _newOwner.\\n     * Can be used e.g. to upgrade this FavorTokenController contract.\\n     * @param _child contract thatfavorTokenController currently Owns\\n     * @param _newOwner new owner/pending owner of _child\\n     */\\n    function transferChild(IHasOwner _child, address _newOwner) external onlyOwner {\\n        _child.transferOwnership(_newOwner);\\n        emit TransferChild(address(_child), _newOwner);\\n    }\\n\\n    /**\\n     * @dev send all ether in token address to the owner offavorTokenController\\n     */\\n    function requestReclaimEther() external onlyOwner {\\n        token.reclaimEther(owner);\\n    }\\n\\n    /**\\n     * @dev transfer all tokens of a particular type in token address to the\\n     * owner offavorTokenController\\n     * @param _token token address of the token to transfer\\n     */\\n    function requestReclaimToken(IERC20 _token) external onlyOwner {\\n        token.reclaimToken(_token, owner);\\n    }\\n\\n    /**\\n     * @dev pause all pausable actions on FavorCurrency, mints/burn/transfer/approve\\n     */\\n    function pauseToken() external virtual onlyOwner {\\n        OwnedUpgradeabilityProxy(address(uint160(address(token)))).upgradeTo(PAUSED_IMPLEMENTATION);\\n    }\\n\\n    /**\\n     * @dev Change the minimum and maximum amounts that FavorCurrency users can\\n     * burn to newMin and newMax\\n     * @param _min minimum amount user can burn at a time\\n     * @param _max maximum amount user can burn at a time\\n     */\\n    function setBurnBounds(uint256 _min, uint256 _max) external onlyOwner {\\n        token.setBurnBounds(_min, _max);\\n    }\\n\\n    /**\\n     * @dev Owner can send ether balance in contract address\\n     * @param _to address to which the funds will be send to\\n     */\\n    function reclaimEther(address payable _to) external onlyOwner {\\n        _to.transfer(address(this).balance);\\n    }\\n\\n    /**\\n     * @dev Owner can send erc20 token balance in contract address\\n     * @param _token address of the token to send\\n     * @param _to address to which the funds will be send to\\n     */\\n    function reclaimToken(IERC20 _token, address _to) external onlyOwner {\\n        uint256 balance = _token.balanceOf(address(this));\\n        _token.transfer(_to, balance);\\n    }\\n\\n    /**\\n     * @dev Owner can allow address to burn tokens\\n     * @param burner address of the token that can burn\\n     * @param canBurn true if account is allowed to burn, false otherwise\\n     */\\n    function setCanBurn(address burner, bool canBurn) external onlyRegistryAdmin {\\n        token.setCanBurn(burner, canBurn);\\n        emit CanBurn(burner, canBurn);\\n    }\\n\\n    /**\\n     * @dev Set blacklisted status for the account.\\n     * @param account address to set blacklist flag for\\n     * @param isBlacklisted blacklist flag value\\n     */\\n    function setBlacklisted(address account, bool isBlacklisted) external onlyRegistryAdmin {\\n        token.setBlacklisted(account, isBlacklisted);\\n    }\\n}\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBlacklisted\",\"type\":\"bool\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"SetBurnBounds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OTC_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getETHToUSDFRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getUSDFToETHRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"reclaimEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rounding\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isBlacklisted\",\"type\":\"bool\"}],\"name\":\"setBlacklisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setBurnBounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_canBurn\",\"type\":\"bool\"}],\"name\":\"setCanBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"FavorUSD","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9c3ee2cc0ef33c58b8a36edc136a736258dcd95798220cb1c61f9fbba6b9f1a1"}]}