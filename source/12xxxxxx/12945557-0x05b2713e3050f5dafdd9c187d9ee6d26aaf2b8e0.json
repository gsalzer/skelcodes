{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n/*\r\n * Copyright Â© 2020 reflect.finance. ALL RIGHTS RESERVED.\r\n */\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns(uint);\r\n\r\n  function balanceOf(address account) external view returns(uint);\r\n\r\n  function transfer(address recipient, uint amount) external returns(bool);\r\n\r\n  function allowance(address owner, address spender) external view returns(uint);\r\n\r\n  function approve(address spender, uint amount) external returns(bool);\r\n\r\n  function transferFrom(address sender, address recipient, uint amount) external returns(bool);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\nlibrary Address {\r\n  function isContract(address account) internal view returns(bool) {\r\n    bytes32 codehash;\r\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly { codehash:= extcodehash(account) }\r\n    return (codehash != 0x0 && codehash != accountHash);\r\n  }\r\n}\r\n\r\ncontract Context {\r\n  constructor() internal {}\r\n  // solhint-disable-previous-line no-empty-blocks\r\n  function _msgSender() internal view returns(address payable) {\r\n    return msg.sender;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function add(uint a, uint b) internal pure returns(uint) {\r\n    uint c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns(uint) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  function sub(uint a, uint b, string memory errorMessage) internal pure returns(uint) {\r\n    require(b <= a, errorMessage);\r\n    uint c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mul(uint a, uint b) internal pure returns(uint) {\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n\r\n    uint c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns(uint) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  function div(uint a, uint b, string memory errorMessage) internal pure returns(uint) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint c = a / b;\r\n\r\n    return c;\r\n  }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external;\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () public{\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Catoshi is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals = 18;\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => uint256) private _balances;\r\n    \r\n    mapping (uint256 => bool) private nonceProcessed;\r\n    uint256 _nonce = 0;\r\n    \r\n    mapping (address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n   \r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _supply = 42 * 10**6 * 10**18; // total supply of the catoshi token\r\n    uint256 private _totalSupply = 0; \r\n    uint256 private _tTotal;\r\n    uint256 private _rTotal;\r\n    uint256 private _tFeeTotal;\r\n    uint256 private _bridgeFee = 2;\r\n    uint256 private _processedFees = 100000000000;\r\n    bool private isBridgingEnabled;\r\n    address public _bridgeAddress = address(0xd070544810510865114Ad5A0b6a821A5BD2E7C49);\r\n    address public _bridgeFeesAddress = address(0xD378dBeD86689D0dBA19Ca2bab322B6f23765288);\r\n    address public _swapContractAddress;\r\n    \r\n     \r\n     address private _uni = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // uniswapV2Router on mainnet\r\n     IUniswapV2Router02 private uniswapV2Router = IUniswapV2Router02(_uni);\r\n     address private uniswapV2Pair;\r\n     \r\n    // TODO: change this out with the final charity wallet address\r\n    address private _charityWallet = 0xc16FCEED92f1cA3398C50df46532E33Ce513B420;\r\n    address system;\r\n\r\n    // Max transfer size per wallet\r\n    uint256 private  _MAX_TX_SIZE;\r\n\r\n    uint private curTime;\r\n\r\n    event SwapRequest(\r\n        address to,\r\n        uint256 amount,\r\n        uint256 nonce\r\n    );\r\n\r\n    modifier onlySystem() {\r\n        require(system == _msgSender(), \"Ownable: caller is not the system\");\r\n        _;\r\n    }\r\n\r\n    \r\n    constructor (string memory cats_name, string memory cats_symbol,address _system)  public {\r\n        \r\n        uint256 burnSupply = _supply.div(100).mul(50);  // initial burn supply from total supply, 50%\r\n\r\n        // subtract burn supply from total supply\r\n        _tTotal = _supply.sub(burnSupply);\r\n\r\n        // reflection total from burnt total supply.\r\n        _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n        _rOwned[_msgSender()] = _rTotal; // reflection token owned\r\n\r\n        _MAX_TX_SIZE = _tTotal.div(100).div(100).mul(25);  // 0.25 percent of totalsupply, max transfer per wallet\r\n\r\n        _name = cats_name; _symbol = cats_symbol;\r\n        \r\n        curTime = now;\r\n\r\n        system = _system;\r\n        \r\n        isBridgingEnabled = false;\r\n        \r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\r\n            .createPair(address(this), uniswapV2Router.WETH());\r\n\r\n        emit Transfer(address(0), _msgSender(), _supply); // total supply to contract creator\r\n        emit Transfer(_msgSender(), address(0), burnSupply); // initial burn 50% token from contract creator\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function isExcluded(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function setSystem(address _system) external onlyOwner {\r\n        system = _system;\r\n    }\r\n    \r\n    function getUniswapV2Router() external view returns(address) {\r\n        return address(uniswapV2Router);\r\n    }\r\n    \r\n    function setUniswapV2Router(address _uniswapV2Router) external onlyOwner {\r\n        uniswapV2Router = IUniswapV2Router02(_uniswapV2Router);\r\n    }\r\n    \r\n    function setBridgeFeesAddress(address bridgeFeesAddress) external onlyOwner {\r\n        _bridgeFeesAddress = bridgeFeesAddress;\r\n    }\r\n    \r\n    function setSwapContractAddress (address swapContractAddress) external onlyOwner {\r\n        _swapContractAddress = swapContractAddress;\r\n    }\r\n    \r\n    function setProcessedFees(uint256 processedFees) external onlyOwner {\r\n        _processedFees = processedFees;\r\n    }\r\n    \r\n    function getProcessedFees() external view returns (uint256){\r\n        return _processedFees;\r\n    }\r\n     \r\n    function setBridgingStatus(bool isEnabled) external onlyOwner {\r\n        isBridgingEnabled = isEnabled;\r\n    }\r\n    function getBridgingStatus() external view returns (bool) {\r\n        return isBridgingEnabled;\r\n    }\r\n\r\n   \r\n\r\n\r\n\r\n\r\n    // for another burn like 3.7 million or some more\r\n    function burnOf(uint256 tAmount) public {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n\r\n        // subtract additional burn from total supply\r\n        _tTotal = _tTotal.sub(tAmount);\r\n\r\n        // subtract additional burn from reflection supply\r\n        _rTotal = _rTotal.sub(rAmount);\r\n\r\n        emit Transfer(_msgSender(), address(0), tAmount);\r\n    }\r\n\r\n    function reflect(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n        (uint256 rAmount,,,,,,) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rTotal = _rTotal.sub(rAmount);\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,,,,,) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (,uint256 rTransferAmount,,,,,) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeAccount(address account) external onlyOwner() {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeAccount(address account) external onlyOwner() {\r\n        require(_isExcluded[account], \"Account is already included\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function getMinute(uint timestamp) public pure returns (uint8) {\r\n        return uint8((timestamp / 60) % 60);\r\n    }\r\n    \r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n        if(_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\r\n    }\r\n    \r\n    function swapTokensForEth(uint256 tokenAmount) private  {\r\n            // generate the uniswap pair path of token -> weth\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = uniswapV2Router.WETH();\r\n\r\n            _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n            // make the swap\r\n            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0, // accept any amount of ETH\r\n                path,\r\n                _charityWallet,\r\n                block.timestamp\r\n            );\r\n        }\r\n        \r\n    // function sendETHToCharity(uint256 amount) private {\r\n    //     payable(_charityWallet).transfer(amount);\r\n    // }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private  {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        uint diffTime = now - curTime; \r\n        // bot protection max 0.25% of total supply per transaction\r\n        if(getMinute(diffTime) < 15 ){\r\n            if(sender != owner() && recipient != owner())\r\n                require(amount <= _MAX_TX_SIZE, \"Transfer amount exceeds the mxTxAmount.\");\r\n        }\r\n        \r\n        bool useRFI;\r\n        if(recipient == uniswapV2Pair || msg.sender == _swapContractAddress) {\r\n            useRFI = false;\r\n        }\r\n        else {\r\n            useRFI = true;\r\n        }\r\n        \r\n        _transferTokens(sender,recipient,amount,useRFI);\r\n        \r\n       \r\n    }\r\n    \r\n    function _transferTokens(address sender, address recipient, uint256 amount, bool useRFI) internal{\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount, useRFI);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount, useRFI);\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount, useRFI);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount, useRFI);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount, useRFI);\r\n        }\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount, bool useRFI) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 burnFee, uint256 charityFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\r\n    \r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\r\n        if(useRFI == false) {\r\n            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\r\n            emit Transfer(sender,recipient,tAmount);\r\n            return;\r\n        }\r\n        \r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n\r\n\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rBurnFee = burnFee.mul(currentRate);\r\n\r\n        \r\n       \r\n        _takeLiquidity(charityFee);\r\n        swapTokensForEth(balanceOf(address(this)));\r\n        // sendETHToCharity(address(this).balance);\r\n            \r\n        \r\n        \r\n        _reflectFee(rFee, tFee);\r\n\r\n        _tTotal = _tTotal.sub(burnFee); // subtract 2% burn from total supply\r\n        _rTotal = _rTotal.sub(rBurnFee); // subtract 2% burn from reflection supply\r\n        \r\n        \r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n        emit Transfer(_msgSender(), address(0), burnFee);\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount, bool useRFI) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 burnFee, uint256 charityFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\r\n\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        \r\n         if(useRFI == false) {\r\n            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\r\n            _tOwned[recipient] = _tOwned[recipient].add(tAmount);\r\n\r\n            emit Transfer(sender,recipient,tAmount);\r\n            return;\r\n        }\r\n\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);     \r\n\r\n\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rBurnFee = burnFee.mul(currentRate);\r\n        \r\n        _takeLiquidity(charityFee);\r\n        swapTokensForEth(balanceOf(address(this)));\r\n        \r\n        _reflectFee(rFee, tFee);\r\n\r\n\r\n        _tTotal = _tTotal.sub(burnFee); // subtract 2% burn from total supply\r\n        _rTotal = _rTotal.sub(rBurnFee); // subtract 2% burn from reflection supply\r\n        \r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n        emit Transfer(_msgSender(), address(0), burnFee);\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount, bool useRFI) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 burnFee, uint256 charityFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\r\n\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        \r\n        if(useRFI == false) {\r\n            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\r\n\r\n            emit Transfer(sender,recipient,tAmount);\r\n            return;\r\n        }\r\n\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);  \r\n\r\n\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rBurnFee = burnFee.mul(currentRate);\r\n        \r\n        _takeLiquidity(charityFee);\r\n        swapTokensForEth(balanceOf(address(this)));\r\n        \r\n        _reflectFee(rFee, tFee);\r\n\r\n        _tTotal = _tTotal.sub(burnFee); // subtract 2% burn from total supply\r\n        _rTotal = _rTotal.sub(rBurnFee); // subtract 2% burn from reflection supply\r\n\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n        emit Transfer(_msgSender(), address(0), burnFee);\r\n    }\r\n\r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount, bool useRFI) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 burnFee, uint256 charityFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\r\n\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        \r\n        if(useRFI == false) {\r\n            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\r\n            _tOwned[recipient] = _tOwned[recipient].add(tAmount);\r\n\r\n            emit Transfer(sender,recipient,tAmount);\r\n            return;\r\n        }\r\n\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);       \r\n\r\n\r\n        uint256 currentRate = _getRate();\r\n        uint256 rBurnFee = burnFee.mul(currentRate);\r\n        \r\n        _takeLiquidity(charityFee);\r\n        swapTokensForEth(balanceOf(address(this)));\r\n\r\n        _reflectFee(rFee, tFee);\r\n\r\n        _tTotal = _tTotal.sub(burnFee); // subtract 2% burn from total supply\r\n        _rTotal = _rTotal.sub(rBurnFee); // subtract 2% burn from reflection supply\r\n        \r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n        emit Transfer(_msgSender(), address(0), burnFee);\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 burnFee, uint256 charityFee) = _getTValues(tAmount);\r\n\r\n        uint256 currentRate =  _getRate();\r\n\r\n        uint256 amount = tAmount;\r\n\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(amount, tFee, burnFee, charityFee, currentRate);\r\n        \r\n        return (rAmount, rTransferAmount, rFee, burnFee, charityFee, tTransferAmount, tFee);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount) private pure returns (uint256, uint256, uint256, uint256) {\r\n        uint256 tFee = tAmount.div(100).mul(3); // 3% reflection fee to token holders\r\n\r\n        uint256 burnFee = tAmount.div(100).mul(2); // 2% tax to burn\r\n\r\n        uint256 charityFee = tAmount.div(100).mul(1); // 1% to charity wallet address\r\n\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(burnFee).sub(charityFee);\r\n\r\n        return (tTransferAmount, tFee, burnFee, charityFee);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 burnFee, uint256 charityFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rBurnFee = burnFee.mul(currentRate);\r\n        uint256 rCharityFee = charityFee.mul(currentRate);\r\n        \r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rBurnFee).sub(rCharityFee);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() public view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() public view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;      \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n     /**\r\n   * @dev Function to set bridegebase address\r\n   * @param add Address for bridgebase smart contract.\r\n   */\r\n  function setBridgeAddress(address add) public onlyOwner returns(bool){\r\n    require(add != address(0),\"Invalid Address\");\r\n    _bridgeAddress = add;\r\n    return true;\r\n  }\r\n\r\n     /**\r\n   * @dev Function for setting mint fee by owner\r\n   * @param bridgeFee Mint Fee\r\n   */\r\n  function setSwapFee(uint256 bridgeFee) public onlyOwner returns(bool){\r\n    _bridgeFee = bridgeFee;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function for getting rewards percentage by owner\r\n   */\r\n  function getSwapFee() public view returns(uint256){\r\n    return _bridgeFee;\r\n  }\r\n  \r\n  function getSwapStatus(uint256 nonce) view external returns(bool) {\r\n      return nonceProcessed[nonce];\r\n  }\r\n\r\n    function swap (uint256 amount) external payable{\r\n        require(isBridgingEnabled, \"bridging is disabled\");\r\n        require(msg.value>= _processedFees, \"Insufficient processed fees\");\r\n        _nonce = _nonce.add(uint256(1));\r\n        _transferTokens(_msgSender(),_bridgeAddress,amount,false);\r\n        emit SwapRequest(_msgSender(),amount,_nonce);\r\n    }\r\n\r\n    function feeCalculation(uint256 amount) public view returns(uint256) { \r\n       uint256 _amountAfterFee = (amount-(amount.mul(_bridgeFee)/1000));\r\n        return _amountAfterFee;\r\n    }  \r\n\r\n    function swapBack (address to, uint256 amount, uint256 nonce) external onlySystem{\r\n        require(!nonceProcessed[nonce], \"Swap is already proceeds\");\r\n        nonceProcessed[nonce] = true;\r\n        uint256 temp = feeCalculation(amount);\r\n        uint256 fees = amount.sub(temp);\r\n        _transferTokens(_bridgeAddress,to,temp,false);\r\n        _transferTokens(_bridgeAddress,_bridgeFeesAddress,fees,false);\r\n\r\n    }  \r\n    \r\n    function withdrawETH(uint256 amount, address receiver) external onlyOwner {\r\n        require(amount <= address(this).balance,\"amount exceeds contract balance\");\r\n        payable(receiver).transfer(amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"cats_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cats_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_system\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"SwapRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_bridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_bridgeFeesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getCurrentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"burnOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"feeCalculation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBridgingStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getMinute\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProcessedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"getSwapStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapV2Router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"reflect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setBridgeAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeFeesAddress\",\"type\":\"address\"}],\"name\":\"setBridgeFeesAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"setBridgingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"processedFees\",\"type\":\"uint256\"}],\"name\":\"setProcessedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapContractAddress\",\"type\":\"address\"}],\"name\":\"setSwapContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bridgeFee\",\"type\":\"uint256\"}],\"name\":\"setSwapFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_system\",\"type\":\"address\"}],\"name\":\"setSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"}],\"name\":\"setUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"swapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Catoshi","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000d234f8a93a94c2b40fe7c9f8e6771d4f38a100b200000000000000000000000000000000000000000000000000000000000000074361746f7368690000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064341545376320000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9d0b6372919bc8b40b976e32bb7ea0d05437a0a524db5c8f2372ecf1082f339d"}]}