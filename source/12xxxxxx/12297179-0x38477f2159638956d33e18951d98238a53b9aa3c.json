{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IOracle {\r\n    function getPriceUsdcRecommended(address tokenAddress)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\ninterface IVault {\r\n    function pricePerShare() external view returns (uint256);\r\n\r\n    function getPricePerFullShare() external view returns (uint256);\r\n\r\n    function token() external view returns (address);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract CalculationsYearnVaults {\r\n    address public oracleAddress;\r\n    IOracle private oracle;\r\n\r\n    constructor(address _oracleAddress) {\r\n        oracleAddress = _oracleAddress;\r\n        oracle = IOracle(_oracleAddress);\r\n    }\r\n\r\n    function isYearnV1Vault(address tokenAddress) public view returns (bool) {\r\n        IVault vault = IVault(tokenAddress);\r\n        try vault.getPricePerFullShare() returns (uint256 pricePerShare) {\r\n            return true;\r\n        } catch {}\r\n        return false;\r\n    }\r\n\r\n    function isYearnV2Vault(address tokenAddress) public view returns (bool) {\r\n        IVault vault = IVault(tokenAddress);\r\n        try vault.pricePerShare() returns (uint256 pricePerShare) {\r\n            return true;\r\n        } catch {}\r\n        return false;\r\n    }\r\n\r\n    function isYearnVault(address tokenAddress) public view returns (bool) {\r\n        return isYearnV1Vault(tokenAddress) || isYearnV2Vault(tokenAddress);\r\n    }\r\n\r\n    function getPriceYearnVault(address tokenAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // v1 vaults use getPricePerFullShare scaled to 18 decimals\r\n        // v2 vaults use pricePerShare scaled to underlying token decimals\r\n        IVault vault = IVault(tokenAddress);\r\n        if (isYearnVault(tokenAddress) == false) {\r\n            revert(\"CalculationsYearnVaults: Token is not a yearn vault\");\r\n        }\r\n        address underlyingTokenAddress = vault.token();\r\n        uint256 underlyingTokenPrice =\r\n            oracle.getPriceUsdcRecommended(underlyingTokenAddress);\r\n        if (isYearnV1Vault(tokenAddress)) {\r\n            uint256 sharePrice = vault.getPricePerFullShare();\r\n            return (underlyingTokenPrice * sharePrice) / 10**18;\r\n        } else if (isYearnV2Vault(tokenAddress)) {\r\n            uint256 sharePrice = vault.pricePerShare();\r\n            uint8 tokenDecimals = IERC20(underlyingTokenAddress).decimals();\r\n            return (underlyingTokenPrice * sharePrice) / 10**tokenDecimals;\r\n        }\r\n        revert();\r\n    }\r\n\r\n    function getPriceUsdc(address tokenAddress) public view returns (uint256) {\r\n        return getPriceYearnVault(tokenAddress);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getPriceUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getPriceYearnVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"isYearnV1Vault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"isYearnV2Vault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"isYearnVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CalculationsYearnVaults","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000083d95e0d5f402511db06817aff3f9ea88224b030","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://65449ef25371cda84e3be7e7b4d38bc7999f6d6dbac99ba882a43a0002984b44"}]}