{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.0.8 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v3.4.1\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v3.4.1\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.4.1\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.4.1\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v3.4.1\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/SafeERC20.sol@v3.4.1\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/HubCommon.sol\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\nabstract contract AuthHub is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n    // controller 合约地址\r\n    address public controller;\r\n    // 冶理地址\r\n    address public governance;\r\n    //自动触发收益匹配\r\n    bool public paused = false; \r\n\r\n    constructor() public {\r\n        governance = msg.sender;\r\n    }\r\n\r\n    modifier notPause() {\r\n        require(paused == false, \"Mining has been suspended\");\r\n        _;\r\n    }\r\n\r\n    function checkGovernance() virtual public view {\r\n        require(msg.sender == owner() || msg.sender == governance, 'not allow');\r\n    }\r\n\r\n    function checkController() public view {\r\n        require(governance != address(0) && controller != address(0), 'not allow');\r\n        require( msg.sender == governance || msg.sender == controller, 'not allow');\r\n    }\r\n\r\n    // 设置权限控制合约\r\n    function setGovernance(address _governance) public {\r\n        require(address(0) != _governance, \"governance address is zero\");\r\n        checkGovernance();\r\n        governance = _governance;\r\n    }\r\n\r\n    function setController(address _controller) public {\r\n        require(_controller != address(0), \"controller is the zero address\");\r\n        checkGovernance();\r\n        controller = _controller;\r\n    }\r\n\r\n    function setPause() public  {\r\n        require(msg.sender == owner() || msg.sender == governance, 'not allow');\r\n        paused = !paused;\r\n    }\r\n\r\n    // 提现转任意erc20\r\n    function inCaseTokensGetStuck(address account, address _token, uint _amount) public  {\r\n        require(address(0) != account, \"account address is zero\");\r\n        checkGovernance();\r\n        IERC20(_token).safeTransfer(account, _amount);\r\n    }\r\n}\r\n\r\n// Info of each user.\r\nstruct UserInfo {\r\n    // 用户本金\r\n    uint256 amount;     \r\n    // 用户负债\r\n    uint256 mdxDebt; \r\n    // cow负债\r\n    uint cowDebt;\r\n    //用户最大收益 0 不限制\r\n    uint256 mdxProfit;\r\n    uint256 cowProfit;\r\n    //用户未提收益\r\n    uint256 mdxReward;\r\n    uint256 cowReward;\r\n}\r\n\r\n// 每个池子的信息\r\nstruct PoolInfo {\r\n    // 用户质押币种\r\n    IERC20 token;     \r\n    // 上一次结算收益的块高    \r\n    uint256 lastRewardBlock;  \r\n    // 上一次结算的用户总收益占比\r\n    uint256 accMdxPerShare;  \r\n    // 上一次结算累计的mdx收益\r\n    uint256 accMdxShare;\r\n    // 所有用户质押总数量\r\n    uint256 totalAmount;    \r\n    // 所有用户质押总数量上限，0表示不限\r\n    uint256 totalAmountLimit; \r\n    //cow 收益数据\r\n    uint256 accCowPerShare;\r\n    // cow累计收益\r\n    uint256 accCowShare;\r\n    //每个块奖励cow\r\n    uint256 blockCowReward;\r\n    //每个块奖励mdx\r\n    uint256 blockMdxReward;\r\n    // 预留备付金\r\n    uint256 earnLowerlimit;\r\n}\r\n\r\ninterface IERC20Full is IERC20 {\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IHubPoolExtend {\r\n    function deposit(uint _pid, uint _amount, address user) external;\r\n    function withdraw(uint _pid, uint _amount, address user) external returns (uint);\r\n    function emergencyWithdraw(uint _pid, uint _amount, address user) external returns (uint);\r\n}\r\n\r\ninterface IStrategy {\r\n    function balanceOf() external view returns (uint);\r\n    function balanceOfToken(address token) external view returns (uint);\r\n    function paused() external returns(bool);\r\n    function want() external view returns (address, address);\r\n    function contain(address) external view returns (bool);\r\n    function deposit() external;\r\n    function withdraw(address, uint) external returns (uint);\r\n    function withdrawAll() external returns (uint);\r\n    function withdrawMDXReward() external returns (uint, uint);\r\n    function governance()external view returns (address) ;\r\n    function owner()external view returns (address) ;\r\n    function pid()external view returns (uint);\r\n    function strategyName() external view returns (string memory) ;\r\n    function burnNFTToken() external;\r\n    function mitNFTToken(uint24 fee, int24 tickLower, int24 tickUpper) external;\r\n    function mitNFTTokenWithPriceA(uint24 fee, uint priceLower, uint priceUpper) external;\r\n    function getAmount() external view returns (uint128, uint, uint);\r\n    function historyRewardA() external view returns (uint);\r\n    function historyRewardB() external view returns (uint);\r\n    function getPool() external view returns (address);\r\n    function positionManager() external view returns (address);\r\n}\r\n\r\n\r\ninterface IHubPool {\r\n    function earn(address token) external;\r\n    function poolLength() external view returns (uint256);\r\n    function poolInfo(uint index) view external returns (PoolInfo memory);\r\n    function TokenOfPid(address token) view external returns (uint);\r\n    function controller() view external returns (address);\r\n    function governance() view external returns (address) ;\r\n    function owner()external view returns (address) ;\r\n    function getPoolId(address token) external view returns (uint256) ;\r\n    function pending(uint256 _pid, address _user) external view returns (uint256, uint256);\r\n    function pendingCow(uint256 _pid, address _user) external view returns (uint256);\r\n    function getMdxBlockReward(address token) external view returns (uint256);\r\n    function userInfo(uint pid, address user) external view returns (UserInfo memory);\r\n    function withdraw(address token, uint amount) external ;\r\n    function deposit(address token, uint amount) external ;\r\n    function available(address token) view external returns (uint);\r\n    function withdrawAll(address token) external;\r\n    function depositAll(address token) external;\r\n    function withdrawWithPid(uint256 pid, uint256 amount) external;\r\n    function getApy(address token) external view returns (uint256);\r\n    function getCowApy(address token) external view returns (uint256);\r\n    function userTotalCowProfit() external view returns (uint256);\r\n    function userTotalProfit() external view returns (uint256);\r\n    function getBlockReward (uint pid) external view returns (uint256, uint256);\r\n}\r\n\r\ninterface IController {\r\n    // 释放投资本金，用于提现 \r\n    function withdrawLp(address token, uint _amount) external;\r\n    // 触发投资\r\n    function earn(address token) external;\r\n    // 触发发收益\r\n    function withdrawPending(address token, address user, uint256 userPending, uint256 govPending) external;\r\n    // 获取策略\r\n    function strategyLength() external view returns (uint) ;\r\n    function strategieList(uint id) external view returns (address) ;\r\n    function governance() external view returns (address) ;\r\n    function mdxToken() external view returns (address) ;\r\n    function owner() external view returns (address) ;\r\n    function vaults() external view returns (address) ;\r\n    function rewardAccount() external view returns (address) ;\r\n    function sid(address _strategy) external view returns (uint);\r\n}\r\n\r\n\r\n// File contracts/HubPool.sol\r\n\r\npragma solidity 0.6.12;\r\ncontract HubPool is AuthHub {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    modifier checkToken(address token) {\r\n         require(token != address(0) && address(poolInfo[TokenOfPid[token]].token) == token, \"token not exists\");\r\n        _;\r\n    }\r\n\r\n    // 池子信息列表\r\n    PoolInfo[] public poolInfo;\r\n    // token对应的 poolInfo索引\r\n    mapping(address => uint256) public TokenOfPid;\r\n    // 每个池子的用户数量\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n\r\n    // 扩展合约，预留\r\n    address public hupPoolExtend;\r\n\r\n    constructor() public {\r\n        controller = address(0x4613e2eD453EbC8b7A03B071C5CE7Cb092499D6C);\r\n        governance =address(0x601e4b30bD70B78DC28dE9e663Dc8D2dC8323C87);\r\n    }\r\n\r\n    // 设置扩展合约\r\n    function setHupPoolExtend(address _hupPoolExtend) external  {\r\n        checkGovernance();\r\n        hupPoolExtend = _hupPoolExtend;\r\n    }\r\n\r\n    function poolLength() public view returns (uint256) {\r\n        return poolInfo.length;\r\n    } \r\n\r\n    function getPoolInfo(address token) internal view checkToken(token) returns(PoolInfo storage) {\r\n        return poolInfo[TokenOfPid[token]];\r\n    }\r\n\r\n    function getPoolId(address token) public view checkToken(token) returns (uint256){\r\n        return TokenOfPid[token];\r\n    } \r\n\r\n    function getBlockReward (uint pid) public view returns (uint256, uint256) {\r\n        return (poolInfo[pid].blockMdxReward, poolInfo[pid].blockCowReward);\r\n    }\r\n\r\n    function setTotalAmountLimit(address token, uint256 _limit) public  {\r\n        checkGovernance();\r\n        PoolInfo storage pool = getPoolInfo(token);\r\n        pool.totalAmountLimit = _limit;\r\n    }\r\n\r\n    // 更新cow用户收益率\r\n    function setCowBlockReward(address token, uint256 _reward, bool _withUpdate) public {\r\n        checkGovernance();\r\n        PoolInfo storage pool = getPoolInfo(token);\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        pool.blockCowReward = _reward;\r\n    }\r\n\r\n    // 更新cow用户收益率\r\n    function setMdxBlockReward(address token, uint256 _reward, bool _withUpdate) public {\r\n        checkGovernance();\r\n        PoolInfo storage pool = getPoolInfo(token);\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        pool.blockMdxReward = _reward;\r\n    }\r\n\r\n    // 设置单个用户分成比例\r\n    function setUserProfit(address token, address _user, bool _mdxProfit, bool _cowProfit) public {\r\n        checkGovernance();\r\n        uint _pid = getPoolId(token);\r\n        \r\n        updatePool(_pid);\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n\r\n        if(_mdxProfit){\r\n            //开启用户收益\r\n            user.mdxProfit = 0;\r\n        }else{\r\n            // 关闭用户收益\r\n            PoolInfo storage pool = poolInfo[_pid];\r\n            user.mdxProfit = pool.accMdxPerShare;\r\n        }\r\n\r\n        if(_cowProfit){\r\n            //开启用户收益\r\n            user.cowProfit = 0;\r\n        }else{\r\n            // 关闭用户收益\r\n            PoolInfo storage pool = poolInfo[_pid];\r\n            user.cowProfit = pool.accCowPerShare;\r\n        }\r\n    }\r\n\r\n    // 设置单个用户分成比例\r\n    function setUserAllProfit(address _user, bool _mdxProfit, bool _cowProfit) public {\r\n        checkGovernance();\r\n        for(uint _pid=0; _pid < poolInfo.length; _pid++){\r\n            PoolInfo storage pool = poolInfo[_pid];\r\n            setUserProfit(address(pool.token), _user, _mdxProfit, _cowProfit);\r\n        }\r\n    }\r\n\r\n    function setEarnLowerlimit(address token, uint256 _earnLowerlimit) public  {\r\n        checkGovernance();\r\n        PoolInfo storage pool = getPoolInfo(token);\r\n        pool.earnLowerlimit = _earnLowerlimit;\r\n    }\r\n\r\n    // 给controller授权\r\n    function approveCtr(address token) public {\r\n        // 授权\r\n        IERC20(token).safeApprove(controller, uint256(0));\r\n        IERC20(token).safeApprove(controller, uint256(-1));\r\n    } \r\n\r\n    // 添加token到池子，不能重复添加同一个token, 重复添加将会导致用户收益错乱\r\n    function add(IERC20 _token, uint256, uint256 _earnLowerlimit, uint256, bool _withUpdate) public  {\r\n        require(address(_token) != address(0), \"token is the zero address\");\r\n        checkGovernance();\r\n\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        \r\n        poolInfo.push(PoolInfo({\r\n            token : _token, \r\n            lastRewardBlock : block.number,\r\n            accMdxPerShare : 0,\r\n            accMdxShare : 0,\r\n            totalAmount : 0,\r\n            totalAmountLimit : 0,\r\n            accCowPerShare : 0,\r\n            accCowShare : 0,\r\n            blockMdxReward : 0,\r\n            blockCowReward : 0,\r\n            earnLowerlimit : _earnLowerlimit\r\n        }));\r\n        TokenOfPid[address(_token)] = poolLength() - 1;\r\n    }\r\n\r\n    // 结算所有币种的收益\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n\r\n    // 用户总收益\r\n    uint256 public userTotalProfit;\r\n    // 用户已发放收益\r\n    uint256 public userTotalSendProfit;\r\n\r\n    // 用户总cow收益\r\n    uint256 public userTotalCowProfit;\r\n    // 用户已发放cow收益\r\n    uint256 public userTotalSendCowProfit;\r\n\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n        updatePoolInfo(pool);\r\n        updateCowInfo(pool);\r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n\r\n    // 结算单个币种的收益\r\n    function updatePoolInfo(PoolInfo storage pool) internal {\r\n        if(pool.blockMdxReward <= 0 || pool.totalAmount == 0){\r\n            return;\r\n        }\r\n\r\n        uint256 blockReward = pool.blockMdxReward.mul(block.number.sub(pool.lastRewardBlock));\r\n        // 所有池子用户总收益\r\n        userTotalProfit = userTotalProfit.add(blockReward);\r\n        // 单池子用户总收益\r\n        pool.accMdxShare = pool.accMdxShare.add(blockReward);\r\n        // 每个质押量 获取收益\r\n        pool.accMdxPerShare = blockReward.mul(1e18).div(pool.totalAmount).add(pool.accMdxPerShare);\r\n    }\r\n\r\n    //结算cow\r\n    function updateCowInfo(PoolInfo storage pool) internal {\r\n        if(pool.blockCowReward <= 0 || pool.totalAmount == 0){\r\n            return;\r\n        }\r\n\r\n        uint256 blockReward = pool.blockCowReward.mul(block.number.sub(pool.lastRewardBlock));\r\n        // 所有池子用户总收益\r\n        userTotalCowProfit = userTotalCowProfit.add(blockReward);\r\n        // 单池子用户总收益\r\n        pool.accCowShare = pool.accCowShare.add(blockReward);\r\n        // 每个质押量 获取收益\r\n        pool.accCowPerShare = blockReward.mul(1e18).div(pool.totalAmount).add(pool.accCowPerShare);\r\n    }\r\n\r\n    // 查询用户收益，返回用户收益,本金\r\n    function pending(uint256 _pid, address _user) public view returns (uint256, uint256) {\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (user.amount == 0 || pool.totalAmount == 0 ) {\r\n            return (0, 0);\r\n        } \r\n\r\n        // 增量收益\r\n        uint256 blockReward = pool.blockMdxReward.mul(block.number.sub(pool.lastRewardBlock));\r\n        uint256 reward = countPending(pool, user, blockReward.mul(1e18).div(pool.totalAmount));\r\n        return (reward, user.amount);\r\n    }\r\n\r\n    // 查询用户收益，返回用户收益,本金\r\n    function pendingCow(uint256 _pid, address _user) public view returns (uint256) {\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (user.amount == 0 || pool.totalAmount == 0 ) {\r\n            return 0;\r\n        }\r\n\r\n        // 增量收益\r\n        uint256 blockReward = pool.blockCowReward.mul(block.number.sub(pool.lastRewardBlock));\r\n        return countCowPending(pool, user, blockReward.mul(1e18).div(pool.totalAmount));\r\n    }\r\n\r\n    // 计算用户的cow收益\r\n    function countCowPending(PoolInfo storage pool, UserInfo storage user, uint blockReward) internal view returns (uint) {\r\n        uint256 accCowPerShare;\r\n        if(user.cowProfit > 0){\r\n            //用户已禁止收益\r\n            accCowPerShare = user.cowProfit;\r\n        }else{\r\n            accCowPerShare = pool.accCowPerShare.add(blockReward);\r\n        }\r\n\r\n        uint pendingCowAmount = 0;\r\n        uint256 totalDebt =  user.amount.mul(accCowPerShare).div(1e18);\r\n        if(totalDebt > user.cowDebt){\r\n            pendingCowAmount = totalDebt.sub(user.cowDebt);\r\n        }\r\n        return pendingCowAmount.add(user.cowReward);\r\n    }\r\n\r\n    // 计算用户的mdx收益\r\n    function countPending(PoolInfo storage pool, UserInfo storage user, uint blockReward) internal view returns (uint) {\r\n        uint256 accMdxPerShare;\r\n        if(user.mdxProfit > 0) {\r\n            //用户已禁止收益\r\n            accMdxPerShare = user.mdxProfit;\r\n        }else{\r\n            // 每个质押量 获取收益\r\n            accMdxPerShare = pool.accMdxPerShare.add(blockReward);\r\n        }\r\n\r\n        uint pendingAmount = 0;\r\n        uint256 totalDebt =  user.amount.mul(accMdxPerShare).div(1e18);\r\n        if(totalDebt > user.mdxDebt){\r\n            pendingAmount = totalDebt.sub(user.mdxDebt);\r\n        }\r\n        return pendingAmount.add(user.mdxReward);\r\n    }\r\n\r\n    // 用户充值，当amount为0 时只是提取用户收益\r\n    function depositWithPid(uint256 _pid, uint256 _amount) public notPause {\r\n        require(_amount >= 0, \"deposit: not good\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\r\n        if(pool.totalAmountLimit > 0 ){\r\n            //限制投资总量\r\n            require(pool.totalAmountLimit >= (pool.totalAmount.add(_amount)), \"deposit amount limit\");\r\n        }\r\n\r\n        updatePool(_pid);\r\n        if(hupPoolExtend != address(0)){\r\n            IHubPoolExtend(hupPoolExtend).deposit(_pid, _amount, msg.sender);\r\n        }\r\n\r\n        // 先结算用户先前的投资\r\n        if (user.amount > 0) {\r\n            // 给用户发放收益与平台分润\r\n            uint256 pendingAmount = countPending(pool, user, uint(0));\r\n            uint256 pendingCowAmount = countCowPending(pool, user, uint(0));\r\n\r\n            // 记录未提收益\r\n            //safeMdxTransfer(address(pool.token), msg.sender, pendingAmount, pendingCowAmount);\r\n            user.mdxReward = pendingAmount;\r\n            user.cowReward = pendingCowAmount;\r\n        }\r\n\r\n        // 执行扣用户的token\r\n        if (_amount > 0) {\r\n            uint256 beforeToken = pool.token.balanceOf(address(this));\r\n            pool.token.safeTransferFrom(msg.sender, address(this), _amount);\r\n            uint256 afterToken = pool.token.balanceOf(address(this));\r\n            _amount = afterToken.sub(beforeToken);\r\n\r\n            if(_amount > 0) {\r\n                user.amount = user.amount.add(_amount);\r\n                pool.totalAmount = pool.totalAmount.add(_amount);\r\n            }\r\n        }\r\n\r\n        // 重新触发投资\r\n        earn(address(pool.token));\r\n\r\n        // 更新用户负债\r\n        user.cowDebt = user.amount.mul(pool.accCowPerShare).div(1e18);\r\n        user.mdxDebt = user.amount.mul(pool.accMdxPerShare).div(1e18);\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // 提现本金，默认触发提现收益，传0只提现收益\r\n    function withdrawWithPid(uint256 _pid, uint256 _amount) public notPause {\r\n        require(_amount >= 0, \"withdraw: not good\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount >= _amount, \"withdraw: Insufficient balance\");\r\n        updatePool(_pid);\r\n\r\n        uint256 transferAmount = _amount;\r\n        if(hupPoolExtend != address(0)){\r\n            transferAmount = IHubPoolExtend(hupPoolExtend).withdraw(_pid, _amount, msg.sender);\r\n        }\r\n\r\n        if(user.amount > 0){\r\n            // 给用户发放收益与平台分润\r\n            uint256 pendingAmount = countPending(pool, user, uint(0));\r\n            uint256 pendingCowAmount = countCowPending(pool, user, uint(0));\r\n            user.mdxReward = 0;\r\n            user.cowReward = 0;\r\n            safeMdxTransfer(address(pool.token), msg.sender, pendingAmount, pendingCowAmount);\r\n        }\r\n\r\n        // 提现本金\r\n        if (_amount > 0) {\r\n            uint256 poolBalance = pool.token.balanceOf(address(this));\r\n            if(poolBalance < _amount) {\r\n                // 当前合约余额不足，调用上游释放投资\r\n                IController(controller).withdrawLp(address(pool.token), _amount.sub(poolBalance));\r\n                poolBalance = pool.token.balanceOf(address(this));\r\n                //上游资金不足 需要对冲\r\n                require(poolBalance >= _amount, \"withdraw: need hedge\");\r\n            }\r\n\r\n            user.amount = user.amount.sub(_amount);\r\n            pool.totalAmount = pool.totalAmount.sub(_amount);\r\n            pool.token.safeTransfer(msg.sender, transferAmount);\r\n        }\r\n\r\n        // 重新触发投资\r\n        earn(address(pool.token));\r\n\r\n        // 更新用户负债\r\n        user.cowDebt = user.amount.mul(pool.accCowPerShare).div(1e18);\r\n        user.mdxDebt = user.amount.mul(pool.accMdxPerShare).div(1e18);\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // 用户紧急提现，放弃收益\r\n    function emergencyWithdraw(uint256 _pid) public notPause {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        uint256 amount = user.amount;\r\n        uint256 transferAmount = amount;\r\n\r\n        if(hupPoolExtend != address(0)){\r\n            transferAmount = IHubPoolExtend(hupPoolExtend).emergencyWithdraw(_pid, amount, msg.sender);\r\n        }\r\n\r\n        uint256 poolBalance = pool.token.balanceOf(address(this));\r\n        if(poolBalance < amount){\r\n            // 当前合约余额不足，调用上游释放投资\r\n            IController(controller).withdrawLp(address(pool.token), amount.sub(poolBalance));\r\n\r\n            poolBalance = pool.token.balanceOf(address(this));\r\n            // 上游资金不足 需要对冲\r\n            require(poolBalance >= amount, \"withdraw: need hedge\");\r\n        }\r\n\r\n        user.amount = 0;\r\n        user.mdxDebt = 0;\r\n        user.cowDebt = 0;\r\n        user.mdxReward = 0;\r\n        user.cowReward = 0;\r\n\r\n        pool.token.safeTransfer(msg.sender, transferAmount);\r\n        pool.totalAmount = pool.totalAmount.sub(amount);\r\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\r\n    }\r\n\r\n    // 给用户发放收益与平台分润\r\n    function safeMdxTransfer(address _token, address _to, uint256 _userPendingAmount, uint256 _userCowPendingAmount) private {\r\n        if(_userPendingAmount > 0 || _userCowPendingAmount > 0) {\r\n            userTotalSendProfit = userTotalSendProfit.add(_userPendingAmount);\r\n            userTotalSendCowProfit = userTotalSendCowProfit.add(_userCowPendingAmount);\r\n            IController(controller).withdrawPending(_token, _to, _userPendingAmount, _userCowPendingAmount);\r\n        }\r\n    }\r\n\r\n    // 获取token累计的mdx收益，调用controller获取\r\n    function getMdxBlockReward(address token) public view returns (uint256) {\r\n        PoolInfo storage pool = getPoolInfo(token);\r\n        return pool.accMdxShare;\r\n    }\r\n\r\n    // 触发投资，调用controller获取\r\n    function earn(address token) public {\r\n        approveCtr(token);\r\n        IController(controller).earn(token);\r\n    }\r\n    \r\n    // 计算用于投资的金额\r\n    function available(address token) public view returns (uint256) {\r\n        PoolInfo storage pool = getPoolInfo(token);\r\n        uint b = pool.token.balanceOf(address(this)); \r\n        if(pool.earnLowerlimit >= b){\r\n            return uint(0);\r\n        }\r\n        return b;\r\n    }\r\n\r\n    /*********************** 封装给web3j调用的接口 ********************/\r\n    // 查询币种对应年化收益率\r\n    function getApy(address token) external view returns (uint256) {\r\n        PoolInfo storage pool = getPoolInfo(token);\r\n        //计算年化利率万分比，按10秒一个块算 *86400*365/10\r\n        return pool.blockMdxReward.mul(10000).mul(3153600).div(pool.totalAmount.add(1));\r\n    }\r\n\r\n    // 查询币种对应年化收益率\r\n    function getCowApy(address token) external view returns (uint256) {\r\n        PoolInfo storage pool = getPoolInfo(token);\r\n        //计算年化利率万分比，按10秒一个块算 *86400*365/10\r\n        return pool.blockCowReward.mul(10000).mul(3153600).div(pool.totalAmount.add(1));\r\n    }\r\n\r\n    // 查询用户已收益\r\n    function earned(address token, address userAddress) external view returns (uint256) {\r\n        (uint256 reward,) = pending(getPoolId(token), userAddress);\r\n        return reward;\r\n    }\r\n\r\n    // 查询用户已存入资金\r\n    function getDepositAsset(address token, address userAddress) external view returns (uint256) {\r\n        UserInfo storage user = userInfo[getPoolId(token)][userAddress];\r\n        return user.amount;\r\n    }\r\n\r\n    // 用户存入操作\r\n    function deposit(address token, uint256 _amount) external {\r\n        uint _pid = getPoolId(token);\r\n        return depositWithPid(_pid, _amount);\r\n    }\r\n\r\n    // 用户存所有\r\n    function depositAll(address token) external {\r\n        uint _pid = getPoolId(token);\r\n        return depositWithPid(_pid, IERC20(token).balanceOf(msg.sender));\r\n    }\r\n\r\n    // 用户提现操作\r\n    function withdraw(address token, uint256 _amount) external {\r\n        uint _pid = getPoolId(token);\r\n        return withdrawWithPid(_pid, _amount);\r\n    }\r\n\r\n    // 用户提现所有\r\n    function withdrawAll(address token) external {\r\n        uint _pid = getPoolId(token);\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        return withdrawWithPid(_pid, user.amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TokenOfPid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earnLowerlimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"approveCtr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkController\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkGovernance\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositWithPid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getApy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getBlockReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getCowApy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getDepositAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getMdxBlockReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hupPoolExtend\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingCow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accMdxPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accMdxShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accCowPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accCowShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockCowReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockMdxReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnLowerlimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"setCowBlockReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_earnLowerlimit\",\"type\":\"uint256\"}],\"name\":\"setEarnLowerlimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hupPoolExtend\",\"type\":\"address\"}],\"name\":\"setHupPoolExtend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"setMdxBlockReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setTotalAmountLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_mdxProfit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_cowProfit\",\"type\":\"bool\"}],\"name\":\"setUserAllProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_mdxProfit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_cowProfit\",\"type\":\"bool\"}],\"name\":\"setUserProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mdxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cowDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mdxProfit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cowProfit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mdxReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cowReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userTotalCowProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userTotalProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userTotalSendCowProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userTotalSendProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawWithPid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HubPool","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9194bf3c55a4e30dd28be8c655c4441ba2158f0601b4634f116f816b5198b5b1"}]}