{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.2;\r\n\r\ninterface IERC20 {\r\n    function allowance(address spender, address owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n}\r\n\r\ninterface IUniqueAddressesHelper {\r\n    function uniqueAddresses(address[] memory)\r\n        external\r\n        view\r\n        returns (address[] memory);\r\n}\r\n\r\ncontract PairsHelper {\r\n    address public owner;\r\n    address public wethAddress;\r\n    address public uniqueAddressesHelperAddress;\r\n    IUniqueAddressesHelper uniqueAddressesHelper;\r\n\r\n    constructor(address _wethAddress, address _uniqueAddressesHelperAddress) {\r\n        uniqueAddressesHelperAddress = _uniqueAddressesHelperAddress;\r\n        uniqueAddressesHelper = IUniqueAddressesHelper(\r\n            uniqueAddressesHelperAddress\r\n        );\r\n        wethAddress = _wethAddress;\r\n    }\r\n\r\n    function pairsLength(address factoryAddress) public view returns (uint256) {\r\n        return IUniswapV2Factory(factoryAddress).allPairsLength();\r\n    }\r\n\r\n    function pagesLength(\r\n        address factoryAddress,\r\n        uint256 pageSize,\r\n        uint256 offset\r\n    ) public view returns (uint256) {\r\n        uint256 _pairsLength = pairsLength(factoryAddress);\r\n        uint256 _pagesLength = (_pairsLength - offset) / pageSize;\r\n        return _pagesLength + 1;\r\n    }\r\n\r\n    function pagesLength(address factoryAddress, uint256 pageSize)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 _pairsLength = pairsLength(factoryAddress);\r\n        uint256 _pagesLength = _pairsLength / pageSize;\r\n        return _pagesLength + 1;\r\n    }\r\n\r\n    function pairsAddresses(\r\n        address factoryAddress,\r\n        uint256 pageSize,\r\n        uint256 pageNbr,\r\n        uint256 offset\r\n    ) public view returns (address[] memory) {\r\n        uint256 _pairsLength = pairsLength(factoryAddress);\r\n        uint256 startIdx = (pageNbr * pageSize) + offset;\r\n        uint256 endIdx = startIdx + pageSize;\r\n        if (endIdx > _pairsLength - 1) {\r\n            endIdx = _pairsLength - 1;\r\n        }\r\n        address[] memory _pairsAddresses = new address[](_pairsLength);\r\n        uint256 pairIdx;\r\n        for (; pairIdx + startIdx <= endIdx; pairIdx++) {\r\n            address pairAddress =\r\n                IUniswapV2Factory(factoryAddress).allPairs(pairIdx + startIdx);\r\n            _pairsAddresses[pairIdx] = pairAddress;\r\n        }\r\n        bytes memory pairsAddressesEncoded = abi.encode(_pairsAddresses);\r\n        assembly {\r\n            mstore(add(pairsAddressesEncoded, 0x40), pairIdx)\r\n        }\r\n        _pairsAddresses = abi.decode(pairsAddressesEncoded, (address[]));\r\n        return _pairsAddresses;\r\n    }\r\n\r\n    function tokensAddresses(\r\n        address factoryAddress,\r\n        uint256 pageSize,\r\n        uint256 pageNbr,\r\n        uint256 offset\r\n    ) public view returns (address[] memory) {\r\n        address[] memory _pairsAddresses =\r\n            pairsAddresses(factoryAddress, pageSize, pageNbr, offset);\r\n        uint256 _pairsLength = _pairsAddresses.length;\r\n        uint256 maxTokensLength = (_pairsLength * 2) + 1;\r\n        address[] memory _tokensAddresses = new address[](maxTokensLength);\r\n\r\n        if (_pairsLength == 0) {\r\n            return new address[](0);\r\n        }\r\n        _tokensAddresses[0] = wethAddress;\r\n        uint256 tokenIdx = 1;\r\n        for (uint256 pairIdx = 0; pairIdx < _pairsLength; pairIdx++) {\r\n            address pairAddress = _pairsAddresses[pairIdx];\r\n            IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\r\n            address token0Address = pair.token0();\r\n            address token1Address = pair.token1();\r\n            if (token0Address != wethAddress) {\r\n                _tokensAddresses[tokenIdx] = token0Address;\r\n                tokenIdx++;\r\n            }\r\n            if (token1Address != wethAddress) {\r\n                _tokensAddresses[tokenIdx] = token1Address;\r\n                tokenIdx++;\r\n            }\r\n        }\r\n        bytes memory tokensAddressesEncoded = abi.encode(_tokensAddresses);\r\n        assembly {\r\n            mstore(add(tokensAddressesEncoded, 0x40), tokenIdx)\r\n        }\r\n        _tokensAddresses = uniqueAddressesHelper.uniqueAddresses(\r\n            abi.decode(tokensAddressesEncoded, (address[]))\r\n        );\r\n        return _tokensAddresses;\r\n    }\r\n\r\n    function tokensAddresses(\r\n        address factoryAddress,\r\n        uint256 pageSize,\r\n        uint256 pageNbr\r\n    ) public view returns (address[] memory) {\r\n        return tokensAddresses(factoryAddress, pageSize, pageNbr, 0);\r\n    }\r\n\r\n    function tokensAddresses(address factoryAddress)\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        uint256 _pairsLength = pairsLength(factoryAddress);\r\n        return tokensAddresses(factoryAddress, _pairsLength, 0, 0);\r\n    }\r\n\r\n    function pairsAddresses(\r\n        address factoryAddress,\r\n        uint256 pageSize,\r\n        uint256 pageNbr\r\n    ) public view returns (address[] memory) {\r\n        return pairsAddresses(factoryAddress, pageSize, pageNbr, 0);\r\n    }\r\n\r\n    function pairsAddresses(address factoryAddress)\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        uint256 _pairsLength = pairsLength(factoryAddress);\r\n        return pairsAddresses(factoryAddress, _pairsLength, 0, 0);\r\n    }\r\n\r\n    function updateSlot(bytes32 slot, bytes32 value) external {\r\n        require(msg.sender == owner);\r\n        assembly {\r\n            sstore(slot, value)\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniqueAddressesHelperAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"pagesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"pagesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"}],\"name\":\"pairsAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageNbr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"pairsAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageNbr\",\"type\":\"uint256\"}],\"name\":\"pairsAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"}],\"name\":\"pairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"}],\"name\":\"tokensAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageNbr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"tokensAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageNbr\",\"type\":\"uint256\"}],\"name\":\"tokensAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniqueAddressesHelperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"updateSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PairsHelper","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000c3a0bef4a47ba579cbba510ae2c59d9b9bf9467c","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://08f10b3e36fa989819215f03c32363dfbded398ccb9d35a4dd12776f0d70e5c2"}]}