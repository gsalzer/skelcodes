{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CentaurFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport './libraries/Ownable.sol';\\r\\nimport './interfaces/ICentaurFactory.sol';\\r\\nimport './interfaces/ICentaurPool.sol';\\r\\nimport './interfaces/ICentaurRouter.sol';\\r\\nimport './interfaces/ICloneFactory.sol';\\r\\nimport './CentaurSettlement.sol';\\r\\nimport './CentaurRouter.sol';\\r\\nimport './CentaurPool.sol';\\r\\n\\r\\ncontract CentaurFactory is ICentaurFactory, Ownable {\\r\\n\\tuint public override poolFee;\\r\\n\\r\\n    address public override poolLogic;\\r\\n\\taddress public override cloneFactory;\\r\\n    address public override settlement;\\r\\n    address payable public override router;\\r\\n\\r\\n    // Base token => Pool\\r\\n    mapping(address => address) public override getPool;\\r\\n    address[] public override allPools;\\r\\n\\r\\n    event PoolCreated(address indexed baseToken, address pool, uint);\\r\\n\\r\\n    constructor(address _poolLogic, address _cloneFactory, address _WETH) public {\\r\\n        poolLogic = _poolLogic;\\r\\n        cloneFactory = _cloneFactory;\\r\\n\\r\\n        // Deploy CentaurSettlement\\r\\n        CentaurSettlement settlementContract = new CentaurSettlement(address(this), 3 minutes);\\r\\n        settlement = address(settlementContract);\\r\\n\\r\\n\\r\\n        // Deploy CentaurRouter\\r\\n        CentaurRouter routerContract = new CentaurRouter(address(this), _WETH);\\r\\n        router = address(routerContract);\\r\\n\\r\\n        // Default poolFee = 0.2%\\r\\n        poolFee = 200000000000000000;\\r\\n    }\\r\\n\\r\\n    function allPoolsLength() external override view returns (uint) {\\r\\n        return allPools.length;\\r\\n    }\\r\\n\\r\\n    function isValidPool(address _pool) external view override returns (bool) {\\r\\n        for (uint i = 0; i < allPools.length; i++) {\\r\\n            if (allPools[i] == _pool) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function createPool(address _baseToken, address _oracle, uint _liquidityParameter) external onlyOwner override returns (address pool) {\\r\\n    \\trequire(_baseToken != address(0) && _oracle != address(0), 'CentaurSwap: ZERO_ADDRESS');\\r\\n    \\trequire(getPool[_baseToken] == address(0), 'CentaurSwap: POOL_EXISTS');\\r\\n\\r\\n    \\tpool = ICloneFactory(cloneFactory).createClone(poolLogic);\\r\\n    \\tICentaurPool(pool).init(\\r\\n            address(this),\\r\\n            _baseToken,\\r\\n            _oracle,\\r\\n            _liquidityParameter\\r\\n        );\\r\\n\\r\\n    \\tgetPool[_baseToken] = pool;\\r\\n        allPools.push(pool);\\r\\n\\r\\n        emit PoolCreated(_baseToken, pool, allPools.length);\\r\\n    }\\r\\n\\r\\n    function addPool(address _pool) external onlyOwner override {\\r\\n        address baseToken = ICentaurPool(_pool).baseToken();\\r\\n        require(baseToken != address(0), 'CentaurSwap: ZERO_ADDRESS');\\r\\n        require(getPool[baseToken] == address(0), 'CentaurSwap: POOL_EXISTS');\\r\\n\\r\\n        getPool[baseToken] = _pool;\\r\\n        allPools.push(_pool);\\r\\n    }\\r\\n\\r\\n    function removePool(address _pool) external onlyOwner override {\\r\\n        address baseToken = ICentaurPool(_pool).baseToken();\\r\\n        require(baseToken != address(0), 'CentaurSwap: ZERO_ADDRESS');\\r\\n        require(getPool[baseToken] != address(0), 'CentaurSwap: POOL_NOT_FOUND');\\r\\n\\r\\n        getPool[baseToken] = address(0);\\r\\n        for (uint i = 0; i < allPools.length; i++) {\\r\\n            if (allPools[i] == _pool) {\\r\\n                allPools[i] = allPools[allPools.length - 1];\\r\\n                allPools.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Pool Functions\\r\\n    function setPoolTradeEnabled(address _pool, bool _tradeEnabled) public onlyOwner override {\\r\\n        ICentaurPool(_pool).setTradeEnabled(_tradeEnabled);\\r\\n    }\\r\\n\\r\\n    function setPoolDepositEnabled(address _pool, bool _depositEnabled) public onlyOwner override {\\r\\n        ICentaurPool(_pool).setDepositEnabled(_depositEnabled);\\r\\n    }\\r\\n\\r\\n    function setPoolWithdrawEnabled(address _pool, bool _withdrawEnabled) public onlyOwner override {\\r\\n        ICentaurPool(_pool).setWithdrawEnabled(_withdrawEnabled);\\r\\n    }\\r\\n\\r\\n    function setPoolLiquidityParameter(address _pool, uint _liquidityParameter) public onlyOwner override {\\r\\n        ICentaurPool(_pool).setLiquidityParameter(_liquidityParameter);\\r\\n    }\\r\\n\\r\\n    function setAllPoolsTradeEnabled(bool _tradeEnabled) external onlyOwner override {\\r\\n        for (uint i = 0; i < allPools.length; i++) {\\r\\n            setPoolTradeEnabled(allPools[i], _tradeEnabled);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setAllPoolsDepositEnabled(bool _depositEnabled) external onlyOwner override {\\r\\n        for (uint i = 0; i < allPools.length; i++) {\\r\\n            setPoolDepositEnabled(allPools[i], _depositEnabled);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setAllPoolsWithdrawEnabled(bool _withdrawEnabled) external onlyOwner override {\\r\\n        for (uint i = 0; i < allPools.length; i++) {\\r\\n            setPoolWithdrawEnabled(allPools[i], _withdrawEnabled);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function emergencyWithdrawFromPool(address _pool, address _token, uint _amount, address _to) external onlyOwner override {\\r\\n        ICentaurPool(_pool).emergencyWithdraw(_token, _amount, _to);\\r\\n    }\\r\\n\\r\\n    // Router Functions\\r\\n    function setRouterOnlyEOAEnabled(bool _onlyEOAEnabled) external onlyOwner override {\\r\\n        CentaurRouter(router).setOnlyEOAEnabled(_onlyEOAEnabled);\\r\\n    }\\r\\n\\r\\n    function setRouterContractWhitelist(address _address, bool _whitelist) external onlyOwner override {\\r\\n        if (_whitelist) {\\r\\n            CentaurRouter(router).addContractToWhitelist(_address);\\r\\n        } else {\\r\\n            CentaurRouter(router).removeContractFromWhitelist(_address);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Settlement Functions\\r\\n    function setSettlementDuration(uint _duration) external onlyOwner override {\\r\\n        CentaurSettlement(settlement).setSettlementDuration(_duration);\\r\\n    }\\r\\n\\r\\n    // Helper Functions\\r\\n    function setPoolFee(uint _poolFee) external onlyOwner override {\\r\\n        poolFee = _poolFee;\\r\\n    }\\r\\n\\r\\n    function setPoolLogic(address _poolLogic) external onlyOwner override {\\r\\n        poolLogic = _poolLogic;\\r\\n    }\\r\\n\\r\\n    function setCloneFactory(address _cloneFactory) external onlyOwner override {\\r\\n        cloneFactory = _cloneFactory;\\r\\n    }\\r\\n\\r\\n    function setSettlement(address _settlement) external onlyOwner override {\\r\\n        settlement = _settlement;\\r\\n    }\\r\\n\\r\\n    function setRouter(address payable _router) external onlyOwner override {\\r\\n        router = _router;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/libraries/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ICentaurFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ICentaurFactory {\\r\\n    event PoolCreated(address indexed token, address pool, uint);\\r\\n\\r\\n    function poolFee() external view returns (uint);\\r\\n\\r\\n    function poolLogic() external view returns (address);\\r\\n    function cloneFactory() external view returns (address);\\r\\n    function settlement() external view returns (address);\\r\\n    function router() external view returns (address payable);\\r\\n\\r\\n    function getPool(address token) external view returns (address pool);\\r\\n    function allPools(uint) external view returns (address pool);\\r\\n    function allPoolsLength() external view returns (uint);\\r\\n    function isValidPool(address pool) external view returns (bool);\\r\\n\\r\\n    function createPool(address token, address oracle, uint poolUtilizationPercentage) external returns (address pool);\\r\\n    function addPool(address pool) external;\\r\\n    function removePool(address pool) external;\\r\\n\\r\\n    function setPoolLiquidityParameter(address, uint) external;\\r\\n    function setPoolTradeEnabled(address, bool) external;\\r\\n    function setPoolDepositEnabled(address, bool) external;\\r\\n    function setPoolWithdrawEnabled(address, bool) external;\\r\\n    function setAllPoolsTradeEnabled(bool) external;\\r\\n    function setAllPoolsDepositEnabled(bool) external;\\r\\n    function setAllPoolsWithdrawEnabled(bool) external;\\r\\n    function emergencyWithdrawFromPool(address, address, uint, address) external;\\r\\n\\r\\n    function setRouterOnlyEOAEnabled(bool) external;\\r\\n    function setRouterContractWhitelist(address, bool) external;\\r\\n\\r\\n    function setSettlementDuration(uint) external;\\r\\n\\r\\n    function setPoolFee(uint) external;\\r\\n    function setPoolLogic(address) external;\\r\\n    function setCloneFactory(address) external;\\r\\n    function setSettlement(address) external;\\r\\n    function setRouter(address payable) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ICentaurPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ICentaurPool {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    event Mint(address indexed sender, uint amount);\\r\\n    event Burn(address indexed sender, uint amount, address indexed to);\\r\\n    event AmountIn(address indexed sender, uint amount);\\r\\n    event AmountOut(address indexed sender, uint amount, address indexed to);\\r\\n    event EmergencyWithdraw(uint256 _timestamp, address indexed _token, uint256 _amount, address indexed _to);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n    function settlement() external view returns (address);\\r\\n    function baseToken() external view returns (address);\\r\\n    function baseTokenDecimals() external view returns (uint);\\r\\n    function oracle() external view returns (address);\\r\\n    function oracleDecimals() external view returns (uint);\\r\\n    function baseTokenTargetAmount() external view returns (uint);\\r\\n    function baseTokenBalance() external view returns (uint);\\r\\n    function liquidityParameter() external view returns (uint);\\r\\n\\r\\n    function init(address, address, address, uint) external;\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount);\\r\\n\\r\\n    function swapTo(address _sender, address _fromToken, uint _amountIn, uint _value, address _receiver) external returns (uint maxAmount);\\r\\n    function swapFrom(address _sender) external returns (uint amount, uint value);\\r\\n    function swapSettle(address _sender) external returns (uint);\\r\\n\\r\\n    function getOraclePrice() external view returns (uint price);\\r\\n    function getAmountOutFromValue(uint _value) external view returns (uint amount);\\r\\n    function getValueFromAmountIn(uint _amount) external view returns (uint value);\\r\\n    function getAmountInFromValue(uint _value) external view returns (uint amount);\\r\\n    function getValueFromAmountOut(uint _amount) external view returns (uint value);\\r\\n\\r\\n    function setFactory(address) external;\\r\\n    function setTradeEnabled(bool) external;\\r\\n    function setDepositEnabled(bool) external;\\r\\n    function setWithdrawEnabled(bool) external;\\r\\n    function setLiquidityParameter(uint) external;\\r\\n    function emergencyWithdraw(address, uint, address) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICentaurRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\ninterface ICentaurRouter {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    function onlyEOAEnabled() external pure returns (bool);\\r\\n    function whitelistContracts(address _address) external view returns (bool);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address _baseToken,\\r\\n        uint _amount,\\r\\n        address _to,\\r\\n        uint _minLiquidity,\\r\\n        uint _deadline\\r\\n    ) external returns (uint amount, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address _baseToken,\\r\\n        uint _liquidity,\\r\\n        address _to,\\r\\n        uint _minAmount,\\r\\n        uint _deadline\\r\\n    ) external returns (uint amount);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        address _fromToken,\\r\\n        uint _amountIn,\\r\\n        address _toToken,\\r\\n        uint _amountOutMin,\\r\\n        address to,\\r\\n        uint _deadline\\r\\n    ) external;\\r\\n    function swapTokensForExactTokens(\\r\\n        address _fromToken,\\r\\n        uint _amountInMax,\\r\\n        address _toToken,\\r\\n        uint _amountOut,\\r\\n        address _to,\\r\\n        uint _deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapSettle(address _sender, address _pool) external returns (uint amount);\\r\\n    function swapSettleMultiple(address _sender, address[] memory _pools) external;\\r\\n\\r\\n    function validatePools(address _fromToken, address _toToken) external view returns (address inputTokenPool, address outputTokenPool);\\r\\n    function getAmountOut(address _fromToken, address _toToken, uint _amountIn) external view returns (uint amountOut);\\r\\n    function getAmountIn(address _fromToken, address _toToken, uint _amountOut) external view returns (uint amountIn);\\r\\n\\r\\n    function setFactory(address) external;\\r\\n    function setOnlyEOAEnabled(bool) external;\\r\\n    function addContractToWhitelist(address) external;\\r\\n    function removeContractFromWhitelist(address) external;\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICloneFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\ninterface ICloneFactory {\\r\\n    function createClone(address target) external returns (address result);\\r\\n}\"\r\n    },\r\n    \"contracts/CentaurSettlement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport './libraries/SafeMath.sol';\\r\\nimport './interfaces/ICentaurFactory.sol';\\r\\nimport './interfaces/ICentaurPool.sol';\\r\\nimport './interfaces/ICentaurSettlement.sol';\\r\\n\\r\\ncontract CentaurSettlement is ICentaurSettlement {\\r\\n\\r\\n\\tusing SafeMath for uint;\\r\\n\\r\\n\\tbytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n\\r\\n\\taddress public override factory;\\r\\n\\tuint public override settlementDuration;\\r\\n\\r\\n\\t// User address -> Token address -> Settlement\\r\\n\\tmapping(address => mapping (address => Settlement)) pendingSettlement;\\r\\n\\r\\n\\tmodifier onlyFactory() {\\r\\n        require(msg.sender == factory, 'CentaurSwap: ONLY_FACTORY_ALLOWED');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\tconstructor (address _factory, uint _settlementDuration) public {\\r\\n\\t\\tfactory = _factory;\\r\\n\\t\\tsettlementDuration = _settlementDuration;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _safeTransfer(address token, address to, uint value) private {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'CentaurSwap: TRANSFER_FAILED');\\r\\n    }\\r\\n\\r\\n\\tfunction addSettlement(\\r\\n\\t\\taddress _sender,\\r\\n\\t\\tSettlement memory _pendingSettlement\\r\\n\\t) external override {\\r\\n\\t\\trequire(ICentaurFactory(factory).isValidPool(_pendingSettlement.fPool), 'CentaurSwap: POOL_NOT_FOUND');\\r\\n\\t\\trequire(ICentaurFactory(factory).isValidPool(_pendingSettlement.tPool), 'CentaurSwap: POOL_NOT_FOUND');\\r\\n\\r\\n\\t\\trequire(msg.sender == _pendingSettlement.tPool, 'CentaurSwap: INVALID_POOL');\\r\\n\\r\\n\\t\\trequire(pendingSettlement[_sender][_pendingSettlement.fPool].settlementTimestamp == 0, 'CentaurSwap: SETTLEMENT_EXISTS');\\r\\n\\t\\trequire(pendingSettlement[_sender][_pendingSettlement.tPool].settlementTimestamp == 0, 'CentaurSwap: SETTLEMENT_EXISTS');\\r\\n\\r\\n\\t\\tpendingSettlement[_sender][_pendingSettlement.fPool] = _pendingSettlement;\\r\\n\\t\\tpendingSettlement[_sender][_pendingSettlement.tPool] = _pendingSettlement;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction removeSettlement(\\r\\n\\t\\taddress _sender,\\r\\n\\t\\taddress _fPool,\\r\\n\\t\\taddress _tPool\\r\\n\\t) external override {\\r\\n\\t\\trequire(msg.sender == _tPool, 'CentaurSwap: INVALID_POOL');\\r\\n\\r\\n\\t\\trequire(pendingSettlement[_sender][_fPool].settlementTimestamp != 0, 'CentaurSwap: SETTLEMENT_DOES_NOT_EXISTS');\\r\\n\\t\\trequire(pendingSettlement[_sender][_tPool].settlementTimestamp != 0, 'CentaurSwap: SETTLEMENT_DOES_NOT_EXISTS');\\r\\n\\r\\n\\t\\trequire(block.timestamp >= pendingSettlement[_sender][_fPool].settlementTimestamp, 'CentaurSwap: SETTLEMENT_PENDING');\\r\\n\\r\\n\\t\\t_safeTransfer(ICentaurPool(_tPool).baseToken(), _tPool, pendingSettlement[_sender][_fPool].maxAmountOut);\\r\\n\\r\\n\\t\\tdelete pendingSettlement[_sender][_fPool];\\r\\n\\t\\tdelete pendingSettlement[_sender][_tPool];\\r\\n\\t}\\r\\n\\r\\n\\tfunction getPendingSettlement(address _sender, address _pool) external override view returns (Settlement memory) {\\r\\n\\t\\treturn pendingSettlement[_sender][_pool];\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction hasPendingSettlement(address _sender, address _pool) external override view returns (bool) {\\r\\n\\t\\treturn (pendingSettlement[_sender][_pool].settlementTimestamp != 0);\\r\\n\\t}\\r\\n\\r\\n\\t// Helper Functions\\r\\n\\tfunction setSettlementDuration(uint _settlementDuration) onlyFactory external override {\\r\\n\\t\\tsettlementDuration = _settlementDuration;\\r\\n\\t}\\r\\n}\"\r\n    },\r\n    \"contracts/CentaurRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport './libraries/SafeMath.sol';\\r\\nimport './libraries/TransferHelper.sol';\\r\\nimport './interfaces/IERC20.sol';\\r\\nimport './interfaces/IWETH.sol';\\r\\nimport './interfaces/ICentaurFactory.sol';\\r\\nimport './interfaces/ICentaurPool.sol';\\r\\nimport './interfaces/ICentaurRouter.sol';\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\ncontract CentaurRouter is ICentaurRouter {\\r\\n\\tusing SafeMath for uint;\\r\\n\\r\\n\\taddress public override factory;\\r\\n    address public immutable override WETH;\\r\\n    bool public override onlyEOAEnabled;\\r\\n    mapping(address => bool) public override whitelistContracts;\\r\\n\\r\\n    modifier ensure(uint deadline) {\\r\\n        require(deadline >= block.timestamp, 'CentaurSwap: EXPIRED');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyEOA(address _address) {\\r\\n        if (onlyEOAEnabled) {\\r\\n            require((!Address.isContract(_address) || whitelistContracts[_address]), 'CentaurSwap: ONLY_EOA_ALLOWED');\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyFactory() {\\r\\n        require(msg.sender == factory, 'CentaurSwap: ONLY_FACTORY_ALLOWED');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _factory, address _WETH) public {\\r\\n        factory = _factory;\\r\\n        WETH = _WETH;\\r\\n        onlyEOAEnabled = true;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\\r\\n    }\\r\\n\\r\\n    // **** ADD LIQUIDITY ****\\r\\n    function _addLiquidity(\\r\\n        address _baseToken,\\r\\n        uint _amount,\\r\\n        uint _minLiquidity\\r\\n    ) internal view virtual returns (uint liquidity) {\\r\\n\\t\\tICentaurPool pool = ICentaurPool(ICentaurFactory(factory).getPool(_baseToken));\\r\\n\\r\\n        uint _totalSupply = pool.totalSupply();\\r\\n        uint _baseTokenTargetAmount = pool.baseTokenTargetAmount();\\r\\n        liquidity = _amount;\\r\\n\\r\\n        if (_totalSupply == 0) {\\r\\n            liquidity = _amount.add(_baseTokenTargetAmount);\\r\\n        } else {\\r\\n            liquidity = _amount.mul(_totalSupply).div(_baseTokenTargetAmount);\\r\\n        }\\r\\n\\r\\n    \\trequire(liquidity > _minLiquidity, 'CentaurSwap: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n    }\\r\\n\\r\\n    function addLiquidity(\\r\\n        address _baseToken,\\r\\n        uint _amount,\\r\\n        address _to,\\r\\n        uint _minLiquidity,\\r\\n        uint _deadline\\r\\n    ) external virtual override ensure(_deadline) onlyEOA(msg.sender) returns (uint amount, uint liquidity) {\\r\\n        address pool = ICentaurFactory(factory).getPool(_baseToken);\\r\\n        require(pool != address(0), 'CentaurSwap: POOL_NOT_FOUND');\\r\\n\\r\\n        (liquidity) = _addLiquidity(_baseToken, _amount, _minLiquidity);\\r\\n        \\r\\n        TransferHelper.safeTransferFrom(_baseToken, msg.sender, pool, _amount);\\r\\n        liquidity = ICentaurPool(pool).mint(_to);\\r\\n        require(liquidity > _minLiquidity, 'CentaurSwap: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n\\r\\n        return (_amount, liquidity);\\r\\n    }\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address _baseToken,\\r\\n        uint _liquidity,\\r\\n        address _to,\\r\\n        uint _minAmount,\\r\\n        uint _deadline\\r\\n    ) public virtual override ensure(_deadline) onlyEOA(msg.sender) returns (uint amount) {\\r\\n        address pool = ICentaurFactory(factory).getPool(_baseToken);\\r\\n        require(pool != address(0), 'CentaurSwap: POOL_NOT_FOUND');\\r\\n\\r\\n        ICentaurPool(pool).transferFrom(msg.sender, pool, _liquidity); // send liquidity to pool\\r\\n        amount = ICentaurPool(pool).burn(_to);\\r\\n        require(amount > _minAmount, 'CentaurSwap: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        address _fromToken,\\r\\n        uint _amountIn,\\r\\n        address _toToken,\\r\\n        uint _amountOutMin,\\r\\n        address _to,\\r\\n        uint _deadline\\r\\n    ) external virtual override ensure(_deadline) onlyEOA(msg.sender) {\\r\\n        require(getAmountOut(_fromToken, _toToken, _amountIn) >= _amountOutMin, 'CentaurSwap: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n        \\r\\n        (address inputTokenPool, address outputTokenPool) = validatePools(_fromToken, _toToken);\\r\\n\\r\\n        TransferHelper.safeTransferFrom(_fromToken, msg.sender, inputTokenPool, _amountIn);\\r\\n\\r\\n        (uint finalAmountIn, uint value) = ICentaurPool(inputTokenPool).swapFrom(msg.sender);\\r\\n        ICentaurPool(outputTokenPool).swapTo(msg.sender, _fromToken, finalAmountIn, value, _to);\\r\\n    }\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        address _fromToken,\\r\\n        uint _amountInMax,\\r\\n        address _toToken,\\r\\n        uint _amountOut,\\r\\n        address _to,\\r\\n        uint _deadline\\r\\n    ) external virtual override ensure(_deadline) onlyEOA(msg.sender) {\\r\\n        uint amountIn = getAmountIn(_fromToken, _toToken, _amountOut);\\r\\n        require(amountIn <= _amountInMax, 'CentaurSwap: EXCESSIVE_INPUT_AMOUNT');\\r\\n        \\r\\n        (address inputTokenPool, address outputTokenPool) = validatePools(_fromToken, _toToken);\\r\\n\\r\\n        TransferHelper.safeTransferFrom(_fromToken, msg.sender, inputTokenPool, amountIn);\\r\\n\\r\\n        (uint finalAmountIn, uint value) = ICentaurPool(inputTokenPool).swapFrom(msg.sender);\\r\\n        ICentaurPool(outputTokenPool).swapTo(msg.sender, _fromToken, finalAmountIn, value, _to);\\r\\n    }\\r\\n\\r\\n    function swapSettle(address _sender, address _pool) external virtual override returns (uint amount) {\\r\\n        amount = ICentaurPool(_pool).swapSettle(_sender);\\r\\n    }\\r\\n\\r\\n    function swapSettleMultiple(address _sender, address[] memory _pools) external virtual override {\\r\\n        for(uint i = 0; i < _pools.length; i++) {\\r\\n            ICentaurPool(_pools[i]).swapSettle(_sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function validatePools(address _fromToken, address _toToken) public view virtual override returns (address inputTokenPool, address outputTokenPool) {\\r\\n        inputTokenPool = ICentaurFactory(factory).getPool(_fromToken);\\r\\n        require(inputTokenPool != address(0), 'CentaurSwap: POOL_NOT_FOUND');\\r\\n\\r\\n        outputTokenPool = ICentaurFactory(factory).getPool(_toToken);\\r\\n        require(outputTokenPool != address(0), 'CentaurSwap: POOL_NOT_FOUND');\\r\\n\\r\\n        return (inputTokenPool, outputTokenPool);\\r\\n    } \\r\\n\\r\\n    function getAmountOut(\\r\\n        address _fromToken,\\r\\n        address _toToken,\\r\\n        uint _amountIn\\r\\n    ) public view virtual override returns (uint amountOut) {\\r\\n        uint poolFee = ICentaurFactory(factory).poolFee();\\r\\n        uint value = ICentaurPool(ICentaurFactory(factory).getPool(_fromToken)).getValueFromAmountIn(_amountIn);\\r\\n        uint amountOutBeforeFees = ICentaurPool(ICentaurFactory(factory).getPool(_toToken)).getAmountOutFromValue(value);\\r\\n        amountOut = (amountOutBeforeFees).mul(uint(100 ether).sub(poolFee)).div(100 ether);\\r\\n    }\\r\\n\\r\\n    function getAmountIn(\\r\\n        address _fromToken,\\r\\n        address _toToken,\\r\\n        uint _amountOut\\r\\n    ) public view virtual override returns (uint amountIn) {\\r\\n        uint poolFee = ICentaurFactory(factory).poolFee();\\r\\n        uint amountOut = _amountOut.mul(100 ether).div(uint(100 ether).sub(poolFee));\\r\\n        uint value = ICentaurPool(ICentaurFactory(factory).getPool(_toToken)).getValueFromAmountOut(amountOut);\\r\\n        amountIn = ICentaurPool(ICentaurFactory(factory).getPool(_fromToken)).getAmountInFromValue(value);\\r\\n    }\\r\\n\\r\\n    // Helper functions\\r\\n    function setFactory(address _factory) external virtual override onlyFactory {\\r\\n        factory = _factory;\\r\\n    }\\r\\n\\r\\n    function setOnlyEOAEnabled(bool _onlyEOAEnabled) external virtual override onlyFactory {\\r\\n        onlyEOAEnabled = _onlyEOAEnabled;\\r\\n    }\\r\\n\\r\\n    function addContractToWhitelist(address _address) external virtual override onlyFactory {\\r\\n        require(Address.isContract(_address), 'CentaurSwap: NOT_CONTRACT');\\r\\n        whitelistContracts[_address] = true;\\r\\n    }\\r\\n\\r\\n    function removeContractFromWhitelist(address _address) external virtual override onlyFactory {\\r\\n        whitelistContracts[_address] = false;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/CentaurPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport './CentaurLPToken.sol';\\r\\nimport './libraries/Initializable.sol';\\r\\nimport './libraries/SafeMath.sol';\\r\\nimport './libraries/CentaurMath.sol';\\r\\nimport './interfaces/IERC20.sol';\\r\\nimport './interfaces/ICentaurFactory.sol';\\r\\nimport './interfaces/ICentaurPool.sol';\\r\\nimport './interfaces/ICentaurSettlement.sol';\\r\\nimport './interfaces/IOracle.sol';\\r\\n\\r\\ncontract CentaurPool is Initializable, CentaurLPToken {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n\\r\\n    address public factory;\\r\\n    address public baseToken;\\r\\n    uint public baseTokenDecimals;\\r\\n    address public oracle;\\r\\n    uint public oracleDecimals;\\r\\n\\r\\n    uint public baseTokenTargetAmount;\\r\\n    uint public baseTokenBalance;\\r\\n\\r\\n    uint public liquidityParameter;\\r\\n\\r\\n    bool public tradeEnabled;\\r\\n    bool public depositEnabled;\\r\\n    bool public withdrawEnabled;\\r\\n\\r\\n    uint private unlocked;\\r\\n    modifier lock() {\\r\\n        require(unlocked == 1, 'CentaurSwap: LOCKED');\\r\\n        unlocked = 0;\\r\\n        _;\\r\\n        unlocked = 1;\\r\\n    }\\r\\n\\r\\n    modifier tradeAllowed() {\\r\\n        require(tradeEnabled, \\\"CentaurSwap: TRADE_NOT_ALLOWED\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier depositAllowed() {\\r\\n        require(depositEnabled, \\\"CentaurSwap: DEPOSIT_NOT_ALLOWED\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier withdrawAllowed() {\\r\\n        require(withdrawEnabled, \\\"CentaurSwap: WITHDRAW_NOT_ALLOWED\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyRouter() {\\r\\n        require(msg.sender == ICentaurFactory(factory).router(), 'CentaurSwap: ONLY_ROUTER_ALLOWED');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyFactory() {\\r\\n        require(msg.sender == factory, 'CentaurSwap: ONLY_FACTORY_ALLOWED');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event Mint(address indexed sender, uint amount);\\r\\n    event Burn(address indexed sender, uint amount, address indexed to);\\r\\n    event AmountIn(address indexed sender, uint amount);\\r\\n    event AmountOut(address indexed sender, uint amount, address indexed to);\\r\\n    event EmergencyWithdraw(uint256 _timestamp, address indexed _token, uint256 _amount, address indexed _to);\\r\\n\\r\\n    function init(address _factory, address _baseToken, address _oracle, uint _liquidityParameter) external initializer {\\r\\n        factory = _factory;\\r\\n        baseToken = _baseToken;\\r\\n        baseTokenDecimals = IERC20(baseToken).decimals();\\r\\n        oracle = _oracle;\\r\\n        oracleDecimals = IOracle(oracle).decimals();\\r\\n\\r\\n        tradeEnabled = false;\\r\\n        depositEnabled = false;\\r\\n        withdrawEnabled = false;\\r\\n\\r\\n        liquidityParameter = _liquidityParameter;\\r\\n\\r\\n        symbol = string(abi.encodePacked(\\\"CS-\\\", IERC20(baseToken).symbol()));\\r\\n\\r\\n        unlocked = 1;\\r\\n    }\\r\\n\\r\\n    function _safeTransfer(address token, address to, uint value) private {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'CentaurSwap: TRANSFER_FAILED');\\r\\n    }\\r\\n\\r\\n    function mint(address to) external lock onlyRouter depositAllowed returns (uint liquidity) {\\r\\n        uint balance = IERC20(baseToken).balanceOf(address(this));\\r\\n        uint amount = balance.sub(baseTokenBalance);\\r\\n\\r\\n        if (totalSupply == 0) {\\r\\n            liquidity = amount.add(baseTokenTargetAmount);\\r\\n        } else {\\r\\n            liquidity = amount.mul(totalSupply).div(baseTokenTargetAmount);\\r\\n        }\\r\\n\\r\\n        require(liquidity > 0, 'CentaurSwap: INSUFFICIENT_LIQUIDITY_MINTED');\\r\\n        _mint(to, liquidity);\\r\\n\\r\\n        baseTokenBalance = baseTokenBalance.add(amount);\\r\\n        baseTokenTargetAmount = baseTokenTargetAmount.add(amount);\\r\\n\\r\\n        emit Mint(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function burn(address to) external lock onlyRouter withdrawAllowed returns (uint amount) {\\r\\n        uint liquidity = balanceOf[address(this)];\\r\\n\\r\\n        amount = liquidity.mul(baseTokenTargetAmount).div(totalSupply);\\r\\n\\r\\n        require(amount > 0, 'CentaurSwap: INSUFFICIENT_LIQUIDITY_BURNED');\\r\\n\\r\\n        require(baseTokenBalance > amount, 'CentaurSwap: INSUFFICIENT_LIQUIDITY');\\r\\n\\r\\n        _burn(address(this), liquidity);\\r\\n        _safeTransfer(baseToken, to, amount);\\r\\n\\r\\n        baseTokenBalance = baseTokenBalance.sub(amount);\\r\\n        baseTokenTargetAmount = baseTokenTargetAmount.sub(amount);\\r\\n\\r\\n        emit Burn(msg.sender, amount, to);\\r\\n    }\\r\\n\\r\\n    function swapTo(address _sender, address _fromToken, uint _amountIn, uint _value, address _receiver) external lock onlyRouter tradeAllowed returns (uint maxAmount) {\\r\\n        require(_fromToken != baseToken, 'CentaurSwap: INVALID_POOL');\\r\\n\\r\\n        address pool = ICentaurFactory(factory).getPool(_fromToken);\\r\\n        require(pool != address(0), 'CentaurSwap: POOL_NOT_FOUND');\\r\\n\\r\\n        // Check if has pendingSettlement\\r\\n        address settlement = ICentaurFactory(factory).settlement();\\r\\n        require(!ICentaurSettlement(settlement).hasPendingSettlement(_sender, address(this)), 'CentaurSwap: PENDING_SETTLEMENT');\\r\\n        \\r\\n        // maxAmount because amount might be lesser during settlement. (If amount is more, excess is given back to pool)\\r\\n        maxAmount = getAmountOutFromValue(_value);\\r\\n\\r\\n        ICentaurSettlement.Settlement memory pendingSettlement = ICentaurSettlement.Settlement(\\r\\n                pool,\\r\\n                _amountIn,\\r\\n                ICentaurPool(pool).baseTokenTargetAmount(),\\r\\n                (ICentaurPool(pool).baseTokenBalance()).sub(_amountIn),\\r\\n                ICentaurPool(pool).liquidityParameter(),\\r\\n                address(this), \\r\\n                maxAmount,\\r\\n                baseTokenTargetAmount,\\r\\n                baseTokenBalance,\\r\\n                liquidityParameter,\\r\\n                _receiver,\\r\\n                block.timestamp.add(ICentaurSettlement(settlement).settlementDuration())\\r\\n            );\\r\\n\\r\\n        // Subtract maxAmount from baseTokenBalance first, difference (if any) will be added back during settlement\\r\\n        baseTokenBalance = baseTokenBalance.sub(maxAmount);\\r\\n\\r\\n        // Add to pending settlement\\r\\n        ICentaurSettlement(settlement).addSettlement(_sender, pendingSettlement);\\r\\n\\r\\n        // Transfer amount to settlement for escrow\\r\\n        _safeTransfer(baseToken, settlement, maxAmount);\\r\\n\\r\\n        return maxAmount;\\r\\n    }\\r\\n\\r\\n    function swapFrom(address _sender) external lock onlyRouter tradeAllowed returns (uint amount, uint value) {\\r\\n        uint balance = IERC20(baseToken).balanceOf(address(this));\\r\\n\\r\\n        require(balance > baseTokenBalance, 'CentaurSwap: INSUFFICIENT_SWAP_AMOUNT');\\r\\n\\r\\n        // Check if has pendingSettlement\\r\\n        address settlement = ICentaurFactory(factory).settlement();\\r\\n        require(!ICentaurSettlement(settlement).hasPendingSettlement(_sender, address(this)), 'CentaurSwap: PENDING_SETTLEMENT');\\r\\n\\r\\n        amount = balance.sub(baseTokenBalance);\\r\\n        value = getValueFromAmountIn(amount);\\r\\n\\r\\n        baseTokenBalance = balance;\\r\\n\\r\\n        emit AmountIn(_sender, amount);\\r\\n\\r\\n        return (amount, value);\\r\\n    }\\r\\n\\r\\n    function swapSettle(address _sender) external lock returns (uint) {\\r\\n        address settlement = ICentaurFactory(factory).settlement();\\r\\n        ICentaurSettlement.Settlement memory pendingSettlement = ICentaurSettlement(settlement).getPendingSettlement(_sender, address(this));\\r\\n\\r\\n        require (pendingSettlement.settlementTimestamp != 0, 'CentaurSwap: NO_PENDING_SETTLEMENT');\\r\\n        require (pendingSettlement.tPool == address(this), 'CentaurSwap: WRONG_POOL_SETTLEMENT');\\r\\n        require (block.timestamp >= pendingSettlement.settlementTimestamp, 'CentaurSwap: SETTLEMENT_STILL_PENDING');\\r\\n\\r\\n        uint newfPoolOraclePrice = ICentaurPool(pendingSettlement.fPool).getOraclePrice();\\r\\n        uint newtPoolOraclePrice = getOraclePrice();\\r\\n\\r\\n        uint newValue = CentaurMath.getValueFromAmountIn(pendingSettlement.amountIn, newfPoolOraclePrice, ICentaurPool(pendingSettlement.fPool).baseTokenDecimals(), pendingSettlement.fPoolBaseTokenTargetAmount, pendingSettlement.fPoolBaseTokenBalance, pendingSettlement.fPoolLiquidityParameter);\\r\\n        uint newAmount = CentaurMath.getAmountOutFromValue(newValue, newtPoolOraclePrice, baseTokenDecimals, pendingSettlement.tPoolBaseTokenTargetAmount, pendingSettlement.tPoolBaseTokenBalance, pendingSettlement.tPoolLiquidityParameter);\\r\\n\\r\\n        uint poolFee = ICentaurFactory(factory).poolFee();\\r\\n\\r\\n        // Remove settlement and receive escrowed amount\\r\\n        ICentaurSettlement(settlement).removeSettlement(_sender, pendingSettlement.fPool, pendingSettlement.tPool);\\r\\n\\r\\n        if (newAmount > pendingSettlement.maxAmountOut) {\\r\\n\\r\\n            uint fee = (pendingSettlement.maxAmountOut).mul(poolFee).div(100 ether);\\r\\n            uint amountOut = pendingSettlement.maxAmountOut.sub(fee);\\r\\n\\r\\n            _safeTransfer(baseToken, pendingSettlement.receiver, amountOut);\\r\\n            emit AmountOut(_sender, amountOut, pendingSettlement.receiver);\\r\\n\\r\\n            baseTokenBalance = baseTokenBalance.add(fee);\\r\\n            baseTokenTargetAmount = baseTokenTargetAmount.add(fee);\\r\\n\\r\\n            return amountOut;\\r\\n        } else {\\r\\n            uint fee = (newAmount).mul(poolFee).div(100 ether);\\r\\n            uint amountOut = newAmount.sub(fee);\\r\\n\\r\\n            _safeTransfer(baseToken, pendingSettlement.receiver, amountOut);\\r\\n            emit AmountOut(_sender, amountOut, pendingSettlement.receiver);\\r\\n\\r\\n            // Difference added back to baseTokenBalance\\r\\n            uint difference = (pendingSettlement.maxAmountOut).sub(amountOut);\\r\\n            baseTokenBalance = baseTokenBalance.add(difference);\\r\\n\\r\\n            // TX fee goes back into pool for liquidity providers\\r\\n            baseTokenTargetAmount = baseTokenTargetAmount.add(difference);\\r\\n\\r\\n            return newAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getOraclePrice() public view returns (uint price) {\\r\\n        (, int answer,,,) = IOracle(oracle).latestRoundData();\\r\\n\\r\\n        // Returns price in 18 decimals\\r\\n        price = uint(answer).mul(10 ** uint(18).sub(oracleDecimals));\\r\\n    }\\r\\n\\r\\n    // Swap Exact Tokens For Tokens (getAmountOut)\\r\\n    function getAmountOutFromValue(uint _value) public view returns (uint amount) {\\r\\n        amount = CentaurMath.getAmountOutFromValue(_value, getOraclePrice(), baseTokenDecimals,  baseTokenTargetAmount, baseTokenBalance, liquidityParameter);\\r\\n    \\r\\n        require(baseTokenBalance > amount, \\\"CentaurSwap: INSUFFICIENT_LIQUIDITY\\\");\\r\\n    }\\r\\n\\r\\n    function getValueFromAmountIn(uint _amount) public view returns (uint value) {\\r\\n        value = CentaurMath.getValueFromAmountIn(_amount, getOraclePrice(), baseTokenDecimals, baseTokenTargetAmount, baseTokenBalance, liquidityParameter);\\r\\n    }\\r\\n\\r\\n    // Swap Tokens For Exact Tokens (getAmountIn)\\r\\n    function getAmountInFromValue(uint _value) public view returns (uint amount) {\\r\\n        amount = CentaurMath.getAmountInFromValue(_value, getOraclePrice(), baseTokenDecimals,  baseTokenTargetAmount, baseTokenBalance, liquidityParameter);\\r\\n    }\\r\\n\\r\\n    function getValueFromAmountOut(uint _amount) public view returns (uint value) {\\r\\n        require(baseTokenBalance > _amount, \\\"CentaurSwap: INSUFFICIENT_LIQUIDITY\\\");\\r\\n\\r\\n        value = CentaurMath.getValueFromAmountOut(_amount, getOraclePrice(), baseTokenDecimals, baseTokenTargetAmount, baseTokenBalance, liquidityParameter);\\r\\n    }\\r\\n\\r\\n    // Helper functions\\r\\n    function setFactory(address _factory) external onlyFactory {\\r\\n        factory = _factory;\\r\\n    }\\r\\n\\r\\n    function setTradeEnabled(bool _tradeEnabled) external onlyFactory {\\r\\n        tradeEnabled = _tradeEnabled;\\r\\n    }\\r\\n\\r\\n    function setDepositEnabled(bool _depositEnabled) external onlyFactory {\\r\\n        depositEnabled = _depositEnabled;\\r\\n    }\\r\\n\\r\\n    function setWithdrawEnabled(bool _withdrawEnabled) external onlyFactory {\\r\\n        withdrawEnabled = _withdrawEnabled;\\r\\n    }\\r\\n\\r\\n    function setLiquidityParameter(uint _liquidityParameter) external onlyFactory {\\r\\n        liquidityParameter = _liquidityParameter;\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw(address _token, uint _amount, address _to) external onlyFactory {\\r\\n        _safeTransfer(_token, _to, _amount);\\r\\n\\r\\n        emit EmergencyWithdraw(block.timestamp, _token, _amount, _to);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/libraries/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ICentaurSettlement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface ICentaurSettlement {\\r\\n    // event SettlementAdded(address indexed sender, address indexed _fromToken, uint _amountIn, address indexed _toToken, uint _amountOut);\\r\\n    // event SettlementRemoved(address indexed sender, address indexed _fromToken, address indexed _toToken);\\r\\n    struct Settlement {\\r\\n        address fPool;\\r\\n        uint amountIn;\\r\\n        uint fPoolBaseTokenTargetAmount;\\r\\n        uint fPoolBaseTokenBalance;\\r\\n        uint fPoolLiquidityParameter;\\r\\n        address tPool;\\r\\n        uint maxAmountOut;\\r\\n        uint tPoolBaseTokenTargetAmount;\\r\\n        uint tPoolBaseTokenBalance;\\r\\n        uint tPoolLiquidityParameter;\\r\\n        address receiver;\\r\\n        uint settlementTimestamp;\\r\\n    }\\r\\n\\r\\n    function factory() external pure returns (address);\\r\\n    function settlementDuration() external pure returns (uint);\\r\\n\\r\\n    function addSettlement(\\r\\n        address _sender,\\r\\n        Settlement memory _pendingSettlement\\r\\n    ) external;\\r\\n    function removeSettlement(address _sender, address _fPool, address _tPool) external;\\r\\n    \\r\\n    function getPendingSettlement(address _sender, address _pool) external view returns (Settlement memory);\\r\\n    function hasPendingSettlement(address _sender, address _pool) external view returns (bool);\\r\\n\\r\\n    function setSettlementDuration(uint) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\r\\nlibrary TransferHelper {\\r\\n    function safeApprove(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransfer(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint value) internal {\\r\\n        (bool success,) = to.call{value:value}(new bytes(0));\\r\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    function symbol() external pure returns (string memory);\\r\\n    /**\\r\\n     * @dev Returns the token decimal.\\r\\n     */\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function withdraw(uint) external;\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/CentaurLPToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport './libraries/SafeMath.sol';\\r\\n\\r\\ncontract CentaurLPToken {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    string public constant name = 'CentaurSwap LP Token';\\r\\n    string public symbol;\\r\\n    uint8 public constant decimals = 18;\\r\\n    uint  public totalSupply;\\r\\n    mapping(address => uint) public balanceOf;\\r\\n    mapping(address => mapping(address => uint)) public allowance;\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function _mint(address to, uint value) internal {\\r\\n        totalSupply = totalSupply.add(value);\\r\\n        balanceOf[to] = balanceOf[to].add(value);\\r\\n        emit Transfer(address(0), to, value);\\r\\n    }\\r\\n\\r\\n    function _burn(address from, uint value) internal {\\r\\n        balanceOf[from] = balanceOf[from].sub(value);\\r\\n        totalSupply = totalSupply.sub(value);\\r\\n        emit Transfer(from, address(0), value);\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint value) private {\\r\\n        allowance[owner][spender] = value;\\r\\n        emit Approval(owner, spender, value);\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint value) private {\\r\\n        balanceOf[from] = balanceOf[from].sub(value);\\r\\n        balanceOf[to] = balanceOf[to].add(value);\\r\\n        emit Transfer(from, to, value);\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool) {\\r\\n        _approve(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint value) external returns (bool) {\\r\\n        _transfer(msg.sender, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool) {\\r\\n        if (allowance[from][msg.sender] != uint(-1)) {\\r\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\r\\n        }\\r\\n        _transfer(from, to, value);\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n// solhint-disable-next-line compiler-version\\r\\npragma solidity >=0.4.24 <0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\r\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\r\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\r\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\r\\n * \\r\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\r\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\r\\n * \\r\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\r\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\r\\n */\\r\\nabstract contract Initializable {\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract has been initialized.\\r\\n     */\\r\\n    bool private _initialized;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract is in the process of being initialized.\\r\\n     */\\r\\n    bool private _initializing;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\r\\n     */\\r\\n    modifier initializer() {\\r\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\r\\n\\r\\n        bool isTopLevelCall = !_initializing;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = true;\\r\\n            _initialized = true;\\r\\n        }\\r\\n\\r\\n        _;\\r\\n\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns true if and only if the function is running in the constructor\\r\\n    function _isConstructor() private view returns (bool) {\\r\\n        // extcodesize checks the size of the code stored in an address, and\\r\\n        // address returns the current address. Since the code is still not\\r\\n        // deployed when running a constructor, any checks on its code size will\\r\\n        // yield zero, making it an effective way to detect if a contract is\\r\\n        // under construction or not.\\r\\n        address self = address(this);\\r\\n        uint256 cs;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { cs := extcodesize(self) }\\r\\n        return cs == 0;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/CentaurMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport { SafeMath } from \\\"./SafeMath.sol\\\";\\r\\nimport { ABDKMathQuad } from './ABDKMathQuad.sol';\\r\\n\\r\\nlibrary CentaurMath {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    bytes16 constant ONE_ETHER_QUAD = 0x403ABC16D674EC800000000000000000;\\r\\n\\r\\n    // Helper Functions\\r\\n    function getAmountOutFromValue(uint _value, uint _P, uint _tokenDecimals, uint _baseTokenTargetAmount, uint _baseTokenBalance, uint _liquidityParameter) external pure returns (uint amount) {\\r\\n        bytes16 DECIMAL_QUAD = ABDKMathQuad.fromUInt(10 ** _tokenDecimals);\\r\\n\\r\\n        bytes16 value_quad = ABDKMathQuad.div(ABDKMathQuad.fromUInt(_value), DECIMAL_QUAD);\\r\\n        bytes16 P_quad = ABDKMathQuad.div(ABDKMathQuad.fromUInt(_P), ONE_ETHER_QUAD);\\r\\n        bytes16 baseTokenTargetAmount_quad = ABDKMathQuad.div(ABDKMathQuad.fromUInt(_baseTokenTargetAmount), DECIMAL_QUAD);\\r\\n        bytes16 baseTokenBalance_quad = ABDKMathQuad.div(ABDKMathQuad.fromUInt(_baseTokenBalance), DECIMAL_QUAD);\\r\\n        bytes16 k_quad = ABDKMathQuad.div(ABDKMathQuad.fromUInt(_liquidityParameter), DECIMAL_QUAD);\\r\\n\\r\\n        bytes16 X2 = ABDKMathQuad.sub(baseTokenBalance_quad, baseTokenTargetAmount_quad);\\r\\n        bytes16 X1 = _solveEquationForAmountOut(\\r\\n            value_quad,\\r\\n            X2,\\r\\n            k_quad,\\r\\n            P_quad\\r\\n        );\\r\\n\\r\\n        bytes16 amountOut = ABDKMathQuad.sub(X2, X1);\\r\\n        amount = ABDKMathQuad.toUInt(ABDKMathQuad.mul(amountOut, ONE_ETHER_QUAD));\\r\\n    }\\r\\n\\r\\n    function getValueFromAmountIn(uint _amount, uint _P, uint _tokenDecimals, uint _baseTokenTargetAmount, uint _baseTokenBalance, uint _liquidityParameter) external pure returns (uint value) {\\r\\n        bytes16 DECIMAL_QUAD = ABDKMathQuad.fromUInt(10 ** _tokenDecimals);\\r\\n\\r\\n        bytes16 amount_quad = ABDKMathQuad.div(ABDKMathQuad.fromUInt(_amount), DECIMAL_QUAD);\\r\\n        bytes16 P_quad = ABDKMathQuad.div(ABDKMathQuad.fromUInt(_P), ONE_ETHER_QUAD);\\r\\n        bytes16 baseTokenTargetAmount_quad = ABDKMathQuad.div(ABDKMathQuad.fromUInt(_baseTokenTargetAmount), DECIMAL_QUAD);\\r\\n        bytes16 baseTokenBalance_quad = ABDKMathQuad.div(ABDKMathQuad.fromUInt(_baseTokenBalance), DECIMAL_QUAD);\\r\\n        bytes16 k_quad = ABDKMathQuad.div(ABDKMathQuad.fromUInt(_liquidityParameter), DECIMAL_QUAD);\\r\\n\\r\\n        bytes16 X1 = ABDKMathQuad.sub(baseTokenBalance_quad, baseTokenTargetAmount_quad);\\r\\n        bytes16 X2 = ABDKMathQuad.add(X1, amount_quad);\\r\\n\\r\\n        value = _solveForIntegral(\\r\\n            X1,\\r\\n            X2,\\r\\n            k_quad,\\r\\n            P_quad\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getAmountInFromValue(uint _value, uint _P, uint _tokenDecimals, uint _baseTokenTargetAmount, uint _baseTokenBalance, uint _liquidityParameter) external pure returns (uint amount) {\\r\\n        bytes16 DECIMAL_QUAD = ABDKMathQuad.fromUInt(10 ** _tokenDecimals);\\r\\n\\r\\n        bytes16 value_quad = ABDKMathQuad.div(ABDKMathQuad.fromUInt(_value), DECIMAL_QUAD);\\r\\n        bytes16 P_quad = ABDKMathQuad.div(ABDKMathQuad.fromUInt(_P), ONE_ETHER_QUAD);\\r\\n        bytes16 baseTokenTargetAmount_quad = ABDKMathQuad.div(ABDKMathQuad.fromUInt(_baseTokenTargetAmount), DECIMAL_QUAD);\\r\\n        bytes16 baseTokenBalance_quad = ABDKMathQuad.div(ABDKMathQuad.fromUInt(_baseTokenBalance), DECIMAL_QUAD);\\r\\n        bytes16 k_quad = ABDKMathQuad.div(ABDKMathQuad.fromUInt(_liquidityParameter), DECIMAL_QUAD);\\r\\n\\r\\n        bytes16 X1 = ABDKMathQuad.sub(baseTokenBalance_quad, baseTokenTargetAmount_quad);\\r\\n        bytes16 X2 = _solveEquationForAmountIn(\\r\\n            value_quad,\\r\\n            X1,\\r\\n            k_quad,\\r\\n            P_quad\\r\\n        );\\r\\n\\r\\n        bytes16 amountOut = ABDKMathQuad.sub(X2, X1);\\r\\n        amount = ABDKMathQuad.toUInt(ABDKMathQuad.mul(amountOut, ONE_ETHER_QUAD));\\r\\n    }\\r\\n\\r\\n    function getValueFromAmountOut(uint _amount, uint _P, uint _tokenDecimals, uint _baseTokenTargetAmount, uint _baseTokenBalance, uint _liquidityParameter) external pure returns (uint value) {\\r\\n        bytes16 DECIMAL_QUAD = ABDKMathQuad.fromUInt(10 ** _tokenDecimals);\\r\\n\\r\\n        bytes16 amount_quad = ABDKMathQuad.div(ABDKMathQuad.fromUInt(_amount), DECIMAL_QUAD);\\r\\n        bytes16 P_quad = ABDKMathQuad.div(ABDKMathQuad.fromUInt(_P), ONE_ETHER_QUAD);\\r\\n        bytes16 baseTokenTargetAmount_quad = ABDKMathQuad.div(ABDKMathQuad.fromUInt(_baseTokenTargetAmount), DECIMAL_QUAD);\\r\\n        bytes16 baseTokenBalance_quad = ABDKMathQuad.div(ABDKMathQuad.fromUInt(_baseTokenBalance), DECIMAL_QUAD);\\r\\n        bytes16 k_quad = ABDKMathQuad.div(ABDKMathQuad.fromUInt(_liquidityParameter), DECIMAL_QUAD);\\r\\n\\r\\n        bytes16 X2 = ABDKMathQuad.sub(baseTokenBalance_quad, baseTokenTargetAmount_quad);\\r\\n        bytes16 X1 = ABDKMathQuad.sub(X2, amount_quad);\\r\\n\\r\\n        value = _solveForIntegral(\\r\\n            X1,\\r\\n            X2,\\r\\n            k_quad,\\r\\n            P_quad\\r\\n        );\\r\\n    }\\r\\n    // Core Functions\\r\\n    \\r\\n    // Solve for Delta\\r\\n    function _solveForIntegral (\\r\\n        bytes16 X1, \\r\\n        bytes16 X2, \\r\\n        bytes16 k,\\r\\n        bytes16 P\\r\\n    ) internal pure returns (uint256) {\\r\\n        bytes16 multiplier = ABDKMathQuad.mul(k, P);\\r\\n\\r\\n        bytes16 NLog_X2 = ABDKMathQuad.ln(ABDKMathQuad.add(X2, k));\\r\\n        bytes16 NLog_X1 = ABDKMathQuad.ln(ABDKMathQuad.add(X1, k));\\r\\n\\r\\n        bytes16 delta = ABDKMathQuad.mul(multiplier, ABDKMathQuad.sub(NLog_X2, NLog_X1));\\r\\n\\r\\n        return ABDKMathQuad.toUInt(ABDKMathQuad.mul(delta, ONE_ETHER_QUAD));\\r\\n    }\\r\\n\\r\\n    // Solve for amountOut\\r\\n    // Given X2, solve for X1\\r\\n    function _solveEquationForAmountOut (\\r\\n        bytes16 delta,\\r\\n        bytes16 X2,\\r\\n        bytes16 k,\\r\\n        bytes16 P\\r\\n    ) internal pure returns (bytes16 X1) {\\r\\n        bytes16 NLog_X2 = ABDKMathQuad.ln(ABDKMathQuad.add(X2, k));\\r\\n        bytes16 deltaOverTotal = ABDKMathQuad.div(delta, ABDKMathQuad.mul(k, P));\\r\\n\\r\\n        bytes16 ePower = ABDKMathQuad.exp(ABDKMathQuad.sub(NLog_X2, deltaOverTotal));\\r\\n\\r\\n        X1 = ABDKMathQuad.sub(ePower, k);\\r\\n    }\\r\\n\\r\\n    // Solve for amountOut\\r\\n    // Given X1, solve for X2\\r\\n    function _solveEquationForAmountIn (\\r\\n        bytes16 delta,\\r\\n        bytes16 X1,\\r\\n        bytes16 k,\\r\\n        bytes16 P\\r\\n    ) internal pure returns (bytes16 X2) {\\r\\n        bytes16 NLog_X1 = ABDKMathQuad.ln(ABDKMathQuad.add(X1, k));\\r\\n        bytes16 deltaOverTotal = ABDKMathQuad.div(delta, ABDKMathQuad.mul(k, P));\\r\\n\\r\\n        bytes16 ePower = ABDKMathQuad.exp(ABDKMathQuad.add(deltaOverTotal, NLog_X1));\\r\\n\\r\\n        X2 = ABDKMathQuad.sub(ePower, k);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\ninterface IOracle {\\r\\n\\tfunction decimals() external view returns (uint8);\\r\\n\\tfunction description() external view returns (string memory);\\r\\n\\tfunction version() external view returns (uint256);\\r\\n\\r\\n\\t// getRoundData and latestRoundData should both raise \\\"No data present\\\"\\r\\n\\t// if they do not have data to report, instead of returning unset values\\r\\n\\t// which could be misinterpreted as actual reported values.\\r\\n\\tfunction getRoundData(uint80 _roundId)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (\\r\\n\\t\\t  uint80 roundId,\\r\\n\\t\\t  int256 answer,\\r\\n\\t\\t  uint256 startedAt,\\r\\n\\t\\t  uint256 updatedAt,\\r\\n\\t\\t  uint80 answeredInRound\\r\\n\\t);\\r\\n\\t\\t\\r\\n\\tfunction latestRoundData()\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (\\r\\n\\t\\t  uint80 roundId,\\r\\n\\t\\t  int256 answer,\\r\\n\\t\\t  uint256 startedAt,\\r\\n\\t\\t  uint256 updatedAt,\\r\\n\\t\\t  uint80 answeredInRound\\r\\n\\t);\\r\\n}\"\r\n    },\r\n    \"contracts/libraries/ABDKMathQuad.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\r\\n/*\\r\\n * ABDK Math Quad Smart Contract Library.  Copyright © 2019 by ABDK Consulting.\\r\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\r\\n */\\r\\npragma solidity ^0.5.0 || ^0.6.0 || ^0.7.0;\\r\\n\\r\\n/**\\r\\n * Smart contract library of mathematical functions operating with IEEE 754\\r\\n * quadruple-precision binary floating-point numbers (quadruple precision\\r\\n * numbers).  As long as quadruple precision numbers are 16-bytes long, they are\\r\\n * represented by bytes16 type.\\r\\n */\\r\\nlibrary ABDKMathQuad {\\r\\n  /*\\r\\n   * 0.\\r\\n   */\\r\\n  bytes16 private constant POSITIVE_ZERO = 0x00000000000000000000000000000000;\\r\\n\\r\\n  /*\\r\\n   * -0.\\r\\n   */\\r\\n  bytes16 private constant NEGATIVE_ZERO = 0x80000000000000000000000000000000;\\r\\n\\r\\n  /*\\r\\n   * +Infinity.\\r\\n   */\\r\\n  bytes16 private constant POSITIVE_INFINITY = 0x7FFF0000000000000000000000000000;\\r\\n\\r\\n  /*\\r\\n   * -Infinity.\\r\\n   */\\r\\n  bytes16 private constant NEGATIVE_INFINITY = 0xFFFF0000000000000000000000000000;\\r\\n\\r\\n  /*\\r\\n   * Canonical NaN value.\\r\\n   */\\r\\n  bytes16 private constant NaN = 0x7FFF8000000000000000000000000000;\\r\\n\\r\\n  /**\\r\\n   * Convert signed 256-bit integer number into quadruple precision number.\\r\\n   *\\r\\n   * @param x signed 256-bit integer number\\r\\n   * @return quadruple precision number\\r\\n   */\\r\\n  function fromInt (int256 x) internal pure returns (bytes16) {\\r\\n    if (x == 0) return bytes16 (0);\\r\\n    else {\\r\\n      // We rely on overflow behavior here\\r\\n      uint256 result = uint256 (x > 0 ? x : -x);\\r\\n\\r\\n      uint256 msb = msb (result);\\r\\n      if (msb < 112) result <<= 112 - msb;\\r\\n      else if (msb > 112) result >>= msb - 112;\\r\\n\\r\\n      result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16383 + msb << 112;\\r\\n      if (x < 0) result |= 0x80000000000000000000000000000000;\\r\\n\\r\\n      return bytes16 (uint128 (result));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert quadruple precision number into signed 256-bit integer number\\r\\n   * rounding towards zero.  Revert on overflow.\\r\\n   *\\r\\n   * @param x quadruple precision number\\r\\n   * @return signed 256-bit integer number\\r\\n   */\\r\\n  function toInt (bytes16 x) internal pure returns (int256) {\\r\\n    uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\r\\n\\r\\n    require (exponent <= 16638); // Overflow\\r\\n    if (exponent < 16383) return 0; // Underflow\\r\\n\\r\\n    uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\\r\\n      0x10000000000000000000000000000;\\r\\n\\r\\n    if (exponent < 16495) result >>= 16495 - exponent;\\r\\n    else if (exponent > 16495) result <<= exponent - 16495;\\r\\n\\r\\n    if (uint128 (x) >= 0x80000000000000000000000000000000) { // Negative\\r\\n      require (result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\\r\\n      return -int256 (result); // We rely on overflow behavior here\\r\\n    } else {\\r\\n      require (result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n      return int256 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert unsigned 256-bit integer number into quadruple precision number.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @return quadruple precision number\\r\\n   */\\r\\n  function fromUInt (uint256 x) internal pure returns (bytes16) {\\r\\n    if (x == 0) return bytes16 (0);\\r\\n    else {\\r\\n      uint256 result = x;\\r\\n\\r\\n      uint256 msb = msb (result);\\r\\n      if (msb < 112) result <<= 112 - msb;\\r\\n      else if (msb > 112) result >>= msb - 112;\\r\\n\\r\\n      result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16383 + msb << 112;\\r\\n\\r\\n      return bytes16 (uint128 (result));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert quadruple precision number into unsigned 256-bit integer number\\r\\n   * rounding towards zero.  Revert on underflow.  Note, that negative floating\\r\\n   * point numbers in range (-1.0 .. 0.0) may be converted to unsigned integer\\r\\n   * without error, because they are rounded to zero.\\r\\n   *\\r\\n   * @param x quadruple precision number\\r\\n   * @return unsigned 256-bit integer number\\r\\n   */\\r\\n  function toUInt (bytes16 x) internal pure returns (uint256) {\\r\\n    uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\r\\n\\r\\n    if (exponent < 16383) return 0; // Underflow\\r\\n\\r\\n    require (uint128 (x) < 0x80000000000000000000000000000000); // Negative\\r\\n\\r\\n    require (exponent <= 16638); // Overflow\\r\\n    uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\\r\\n      0x10000000000000000000000000000;\\r\\n\\r\\n    if (exponent < 16495) result >>= 16495 - exponent;\\r\\n    else if (exponent > 16495) result <<= exponent - 16495;\\r\\n\\r\\n    return result;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 128.128 bit fixed point number into quadruple precision\\r\\n   * number.\\r\\n   *\\r\\n   * @param x signed 128.128 bit fixed point number\\r\\n   * @return quadruple precision number\\r\\n   */\\r\\n  function from128x128 (int256 x) internal pure returns (bytes16) {\\r\\n    if (x == 0) return bytes16 (0);\\r\\n    else {\\r\\n      // We rely on overflow behavior here\\r\\n      uint256 result = uint256 (x > 0 ? x : -x);\\r\\n\\r\\n      uint256 msb = msb (result);\\r\\n      if (msb < 112) result <<= 112 - msb;\\r\\n      else if (msb > 112) result >>= msb - 112;\\r\\n\\r\\n      result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16255 + msb << 112;\\r\\n      if (x < 0) result |= 0x80000000000000000000000000000000;\\r\\n\\r\\n      return bytes16 (uint128 (result));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert quadruple precision number into signed 128.128 bit fixed point\\r\\n   * number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x quadruple precision number\\r\\n   * @return signed 128.128 bit fixed point number\\r\\n   */\\r\\n  function to128x128 (bytes16 x) internal pure returns (int256) {\\r\\n    uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\r\\n\\r\\n    require (exponent <= 16510); // Overflow\\r\\n    if (exponent < 16255) return 0; // Underflow\\r\\n\\r\\n    uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\\r\\n      0x10000000000000000000000000000;\\r\\n\\r\\n    if (exponent < 16367) result >>= 16367 - exponent;\\r\\n    else if (exponent > 16367) result <<= exponent - 16367;\\r\\n\\r\\n    if (uint128 (x) >= 0x80000000000000000000000000000000) { // Negative\\r\\n      require (result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\\r\\n      return -int256 (result); // We rely on overflow behavior here\\r\\n    } else {\\r\\n      require (result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n      return int256 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 64.64 bit fixed point number into quadruple precision\\r\\n   * number.\\r\\n   *\\r\\n   * @param x signed 64.64 bit fixed point number\\r\\n   * @return quadruple precision number\\r\\n   */\\r\\n  function from64x64 (int128 x) internal pure returns (bytes16) {\\r\\n    if (x == 0) return bytes16 (0);\\r\\n    else {\\r\\n      // We rely on overflow behavior here\\r\\n      uint256 result = uint128 (x > 0 ? x : -x);\\r\\n\\r\\n      uint256 msb = msb (result);\\r\\n      if (msb < 112) result <<= 112 - msb;\\r\\n      else if (msb > 112) result >>= msb - 112;\\r\\n\\r\\n      result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16319 + msb << 112;\\r\\n      if (x < 0) result |= 0x80000000000000000000000000000000;\\r\\n\\r\\n      return bytes16 (uint128 (result));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert quadruple precision number into signed 64.64 bit fixed point\\r\\n   * number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x quadruple precision number\\r\\n   * @return signed 64.64 bit fixed point number\\r\\n   */\\r\\n  function to64x64 (bytes16 x) internal pure returns (int128) {\\r\\n    uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\r\\n\\r\\n    require (exponent <= 16446); // Overflow\\r\\n    if (exponent < 16319) return 0; // Underflow\\r\\n\\r\\n    uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\\r\\n      0x10000000000000000000000000000;\\r\\n\\r\\n    if (exponent < 16431) result >>= 16431 - exponent;\\r\\n    else if (exponent > 16431) result <<= exponent - 16431;\\r\\n\\r\\n    if (uint128 (x) >= 0x80000000000000000000000000000000) { // Negative\\r\\n      require (result <= 0x80000000000000000000000000000000);\\r\\n      return -int128 (result); // We rely on overflow behavior here\\r\\n    } else {\\r\\n      require (result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n      return int128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert octuple precision number into quadruple precision number.\\r\\n   *\\r\\n   * @param x octuple precision number\\r\\n   * @return quadruple precision number\\r\\n   */\\r\\n  function fromOctuple (bytes32 x) internal pure returns (bytes16) {\\r\\n    bool negative = x & 0x8000000000000000000000000000000000000000000000000000000000000000 > 0;\\r\\n\\r\\n    uint256 exponent = uint256 (x) >> 236 & 0x7FFFF;\\r\\n    uint256 significand = uint256 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n\\r\\n    if (exponent == 0x7FFFF) {\\r\\n      if (significand > 0) return NaN;\\r\\n      else return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\r\\n    }\\r\\n\\r\\n    if (exponent > 278526)\\r\\n      return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\r\\n    else if (exponent < 245649)\\r\\n      return negative ? NEGATIVE_ZERO : POSITIVE_ZERO;\\r\\n    else if (exponent < 245761) {\\r\\n      significand = (significand | 0x100000000000000000000000000000000000000000000000000000000000) >> 245885 - exponent;\\r\\n      exponent = 0;\\r\\n    } else {\\r\\n      significand >>= 124;\\r\\n      exponent -= 245760;\\r\\n    }\\r\\n\\r\\n    uint128 result = uint128 (significand | exponent << 112);\\r\\n    if (negative) result |= 0x80000000000000000000000000000000;\\r\\n\\r\\n    return bytes16 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert quadruple precision number into octuple precision number.\\r\\n   *\\r\\n   * @param x quadruple precision number\\r\\n   * @return octuple precision number\\r\\n   */\\r\\n  function toOctuple (bytes16 x) internal pure returns (bytes32) {\\r\\n    uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\r\\n\\r\\n    uint256 result = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n\\r\\n    if (exponent == 0x7FFF) exponent = 0x7FFFF; // Infinity or NaN\\r\\n    else if (exponent == 0) {\\r\\n      if (result > 0) {\\r\\n        uint256 msb = msb (result);\\r\\n        result = result << 236 - msb & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n        exponent = 245649 + msb;\\r\\n      }\\r\\n    } else {\\r\\n      result <<= 124;\\r\\n      exponent += 245760;\\r\\n    }\\r\\n\\r\\n    result |= exponent << 236;\\r\\n    if (uint128 (x) >= 0x80000000000000000000000000000000)\\r\\n      result |= 0x8000000000000000000000000000000000000000000000000000000000000000;\\r\\n\\r\\n    return bytes32 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert double precision number into quadruple precision number.\\r\\n   *\\r\\n   * @param x double precision number\\r\\n   * @return quadruple precision number\\r\\n   */\\r\\n  function fromDouble (bytes8 x) internal pure returns (bytes16) {\\r\\n    uint256 exponent = uint64 (x) >> 52 & 0x7FF;\\r\\n\\r\\n    uint256 result = uint64 (x) & 0xFFFFFFFFFFFFF;\\r\\n\\r\\n    if (exponent == 0x7FF) exponent = 0x7FFF; // Infinity or NaN\\r\\n    else if (exponent == 0) {\\r\\n      if (result > 0) {\\r\\n        uint256 msb = msb (result);\\r\\n        result = result << 112 - msb & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n        exponent = 15309 + msb;\\r\\n      }\\r\\n    } else {\\r\\n      result <<= 60;\\r\\n      exponent += 15360;\\r\\n    }\\r\\n\\r\\n    result |= exponent << 112;\\r\\n    if (x & 0x8000000000000000 > 0)\\r\\n      result |= 0x80000000000000000000000000000000;\\r\\n\\r\\n    return bytes16 (uint128 (result));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert quadruple precision number into double precision number.\\r\\n   *\\r\\n   * @param x quadruple precision number\\r\\n   * @return double precision number\\r\\n   */\\r\\n  function toDouble (bytes16 x) internal pure returns (bytes8) {\\r\\n    bool negative = uint128 (x) >= 0x80000000000000000000000000000000;\\r\\n\\r\\n    uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\r\\n    uint256 significand = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n\\r\\n    if (exponent == 0x7FFF) {\\r\\n      if (significand > 0) return 0x7FF8000000000000; // NaN\\r\\n      else return negative ?\\r\\n          bytes8 (0xFFF0000000000000) : // -Infinity\\r\\n          bytes8 (0x7FF0000000000000); // Infinity\\r\\n    }\\r\\n\\r\\n    if (exponent > 17406)\\r\\n      return negative ?\\r\\n          bytes8 (0xFFF0000000000000) : // -Infinity\\r\\n          bytes8 (0x7FF0000000000000); // Infinity\\r\\n    else if (exponent < 15309)\\r\\n      return negative ?\\r\\n          bytes8 (0x8000000000000000) : // -0\\r\\n          bytes8 (0x0000000000000000); // 0\\r\\n    else if (exponent < 15361) {\\r\\n      significand = (significand | 0x10000000000000000000000000000) >> 15421 - exponent;\\r\\n      exponent = 0;\\r\\n    } else {\\r\\n      significand >>= 60;\\r\\n      exponent -= 15360;\\r\\n    }\\r\\n\\r\\n    uint64 result = uint64 (significand | exponent << 52);\\r\\n    if (negative) result |= 0x8000000000000000;\\r\\n\\r\\n    return bytes8 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Test whether given quadruple precision number is NaN.\\r\\n   *\\r\\n   * @param x quadruple precision number\\r\\n   * @return true if x is NaN, false otherwise\\r\\n   */\\r\\n  function isNaN (bytes16 x) internal pure returns (bool) {\\r\\n    return uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF >\\r\\n      0x7FFF0000000000000000000000000000;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Test whether given quadruple precision number is positive or negative\\r\\n   * infinity.\\r\\n   *\\r\\n   * @param x quadruple precision number\\r\\n   * @return true if x is positive or negative infinity, false otherwise\\r\\n   */\\r\\n  function isInfinity (bytes16 x) internal pure returns (bool) {\\r\\n    return uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ==\\r\\n      0x7FFF0000000000000000000000000000;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate sign of x, i.e. -1 if x is negative, 0 if x if zero, and 1 if x\\r\\n   * is positive.  Note that sign (-0) is zero.  Revert if x is NaN. \\r\\n   *\\r\\n   * @param x quadruple precision number\\r\\n   * @return sign of x\\r\\n   */\\r\\n  function sign (bytes16 x) internal pure returns (int8) {\\r\\n    uint128 absoluteX = uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n\\r\\n    require (absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\\r\\n\\r\\n    if (absoluteX == 0) return 0;\\r\\n    else if (uint128 (x) >= 0x80000000000000000000000000000000) return -1;\\r\\n    else return 1;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate sign (x - y).  Revert if either argument is NaN, or both\\r\\n   * arguments are infinities of the same sign. \\r\\n   *\\r\\n   * @param x quadruple precision number\\r\\n   * @param y quadruple precision number\\r\\n   * @return sign (x - y)\\r\\n   */\\r\\n  function cmp (bytes16 x, bytes16 y) internal pure returns (int8) {\\r\\n    uint128 absoluteX = uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n\\r\\n    require (absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\\r\\n\\r\\n    uint128 absoluteY = uint128 (y) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n\\r\\n    require (absoluteY <= 0x7FFF0000000000000000000000000000); // Not NaN\\r\\n\\r\\n    // Not infinities of the same sign\\r\\n    require (x != y || absoluteX < 0x7FFF0000000000000000000000000000);\\r\\n\\r\\n    if (x == y) return 0;\\r\\n    else {\\r\\n      bool negativeX = uint128 (x) >= 0x80000000000000000000000000000000;\\r\\n      bool negativeY = uint128 (y) >= 0x80000000000000000000000000000000;\\r\\n\\r\\n      if (negativeX) {\\r\\n        if (negativeY) return absoluteX > absoluteY ? -1 : int8 (1);\\r\\n        else return -1; \\r\\n      } else {\\r\\n        if (negativeY) return 1;\\r\\n        else return absoluteX > absoluteY ? int8 (1) : -1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Test whether x equals y.  NaN, infinity, and -infinity are not equal to\\r\\n   * anything. \\r\\n   *\\r\\n   * @param x quadruple precision number\\r\\n   * @param y quadruple precision number\\r\\n   * @return true if x equals to y, false otherwise\\r\\n   */\\r\\n  function eq (bytes16 x, bytes16 y) internal pure returns (bool) {\\r\\n    if (x == y) {\\r\\n      return uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF <\\r\\n        0x7FFF0000000000000000000000000000;\\r\\n    } else return false;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x + y.  Special values behave in the following way:\\r\\n   *\\r\\n   * NaN + x = NaN for any x.\\r\\n   * Infinity + x = Infinity for any finite x.\\r\\n   * -Infinity + x = -Infinity for any finite x.\\r\\n   * Infinity + Infinity = Infinity.\\r\\n   * -Infinity + -Infinity = -Infinity.\\r\\n   * Infinity + -Infinity = -Infinity + Infinity = NaN.\\r\\n   *\\r\\n   * @param x quadruple precision number\\r\\n   * @param y quadruple precision number\\r\\n   * @return quadruple precision number\\r\\n   */\\r\\n  function add (bytes16 x, bytes16 y) internal pure returns (bytes16) {\\r\\n    uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\r\\n    uint256 yExponent = uint128 (y) >> 112 & 0x7FFF;\\r\\n\\r\\n    if (xExponent == 0x7FFF) {\\r\\n      if (yExponent == 0x7FFF) { \\r\\n        if (x == y) return x;\\r\\n        else return NaN;\\r\\n      } else return x; \\r\\n    } else if (yExponent == 0x7FFF) return y;\\r\\n    else {\\r\\n      bool xSign = uint128 (x) >= 0x80000000000000000000000000000000;\\r\\n      uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n      if (xExponent == 0) xExponent = 1;\\r\\n      else xSignifier |= 0x10000000000000000000000000000;\\r\\n\\r\\n      bool ySign = uint128 (y) >= 0x80000000000000000000000000000000;\\r\\n      uint256 ySignifier = uint128 (y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n      if (yExponent == 0) yExponent = 1;\\r\\n      else ySignifier |= 0x10000000000000000000000000000;\\r\\n\\r\\n      if (xSignifier == 0) return y == NEGATIVE_ZERO ? POSITIVE_ZERO : y;\\r\\n      else if (ySignifier == 0) return x == NEGATIVE_ZERO ? POSITIVE_ZERO : x;\\r\\n      else {\\r\\n        int256 delta = int256 (xExponent) - int256 (yExponent);\\r\\n  \\r\\n        if (xSign == ySign) {\\r\\n          if (delta > 112) return x;\\r\\n          else if (delta > 0) ySignifier >>= uint256 (delta);\\r\\n          else if (delta < -112) return y;\\r\\n          else if (delta < 0) {\\r\\n            xSignifier >>= uint256 (-delta);\\r\\n            xExponent = yExponent;\\r\\n          }\\r\\n  \\r\\n          xSignifier += ySignifier;\\r\\n  \\r\\n          if (xSignifier >= 0x20000000000000000000000000000) {\\r\\n            xSignifier >>= 1;\\r\\n            xExponent += 1;\\r\\n          }\\r\\n  \\r\\n          if (xExponent == 0x7FFF)\\r\\n            return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\r\\n          else {\\r\\n            if (xSignifier < 0x10000000000000000000000000000) xExponent = 0;\\r\\n            else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n  \\r\\n            return bytes16 (uint128 (\\r\\n                (xSign ? 0x80000000000000000000000000000000 : 0) |\\r\\n                (xExponent << 112) |\\r\\n                xSignifier)); \\r\\n          }\\r\\n        } else {\\r\\n          if (delta > 0) {\\r\\n            xSignifier <<= 1;\\r\\n            xExponent -= 1;\\r\\n          } else if (delta < 0) {\\r\\n            ySignifier <<= 1;\\r\\n            xExponent = yExponent - 1;\\r\\n          }\\r\\n\\r\\n          if (delta > 112) ySignifier = 1;\\r\\n          else if (delta > 1) ySignifier = (ySignifier - 1 >> uint256 (delta - 1)) + 1;\\r\\n          else if (delta < -112) xSignifier = 1;\\r\\n          else if (delta < -1) xSignifier = (xSignifier - 1 >> uint256 (-delta - 1)) + 1;\\r\\n\\r\\n          if (xSignifier >= ySignifier) xSignifier -= ySignifier;\\r\\n          else {\\r\\n            xSignifier = ySignifier - xSignifier;\\r\\n            xSign = ySign;\\r\\n          }\\r\\n\\r\\n          if (xSignifier == 0)\\r\\n            return POSITIVE_ZERO;\\r\\n\\r\\n          uint256 msb = msb (xSignifier);\\r\\n\\r\\n          if (msb == 113) {\\r\\n            xSignifier = xSignifier >> 1 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n            xExponent += 1;\\r\\n          } else if (msb < 112) {\\r\\n            uint256 shift = 112 - msb;\\r\\n            if (xExponent > shift) {\\r\\n              xSignifier = xSignifier << shift & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n              xExponent -= shift;\\r\\n            } else {\\r\\n              xSignifier <<= xExponent - 1;\\r\\n              xExponent = 0;\\r\\n            }\\r\\n          } else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n\\r\\n          if (xExponent == 0x7FFF)\\r\\n            return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\r\\n          else return bytes16 (uint128 (\\r\\n              (xSign ? 0x80000000000000000000000000000000 : 0) |\\r\\n              (xExponent << 112) |\\r\\n              xSignifier));\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x - y.  Special values behave in the following way:\\r\\n   *\\r\\n   * NaN - x = NaN for any x.\\r\\n   * Infinity - x = Infinity for any finite x.\\r\\n   * -Infinity - x = -Infinity for any finite x.\\r\\n   * Infinity - -Infinity = Infinity.\\r\\n   * -Infinity - Infinity = -Infinity.\\r\\n   * Infinity - Infinity = -Infinity - -Infinity = NaN.\\r\\n   *\\r\\n   * @param x quadruple precision number\\r\\n   * @param y quadruple precision number\\r\\n   * @return quadruple precision number\\r\\n   */\\r\\n  function sub (bytes16 x, bytes16 y) internal pure returns (bytes16) {\\r\\n    return add (x, y ^ 0x80000000000000000000000000000000);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x * y.  Special values behave in the following way:\\r\\n   *\\r\\n   * NaN * x = NaN for any x.\\r\\n   * Infinity * x = Infinity for any finite positive x.\\r\\n   * Infinity * x = -Infinity for any finite negative x.\\r\\n   * -Infinity * x = -Infinity for any finite positive x.\\r\\n   * -Infinity * x = Infinity for any finite negative x.\\r\\n   * Infinity * 0 = NaN.\\r\\n   * -Infinity * 0 = NaN.\\r\\n   * Infinity * Infinity = Infinity.\\r\\n   * Infinity * -Infinity = -Infinity.\\r\\n   * -Infinity * Infinity = -Infinity.\\r\\n   * -Infinity * -Infinity = Infinity.\\r\\n   *\\r\\n   * @param x quadruple precision number\\r\\n   * @param y quadruple precision number\\r\\n   * @return quadruple precision number\\r\\n   */\\r\\n  function mul (bytes16 x, bytes16 y) internal pure returns (bytes16) {\\r\\n    uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\r\\n    uint256 yExponent = uint128 (y) >> 112 & 0x7FFF;\\r\\n\\r\\n    if (xExponent == 0x7FFF) {\\r\\n      if (yExponent == 0x7FFF) {\\r\\n        if (x == y) return x ^ y & 0x80000000000000000000000000000000;\\r\\n        else if (x ^ y == 0x80000000000000000000000000000000) return x | y;\\r\\n        else return NaN;\\r\\n      } else {\\r\\n        if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\r\\n        else return x ^ y & 0x80000000000000000000000000000000;\\r\\n      }\\r\\n    } else if (yExponent == 0x7FFF) {\\r\\n        if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\r\\n        else return y ^ x & 0x80000000000000000000000000000000;\\r\\n    } else {\\r\\n      uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n      if (xExponent == 0) xExponent = 1;\\r\\n      else xSignifier |= 0x10000000000000000000000000000;\\r\\n\\r\\n      uint256 ySignifier = uint128 (y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n      if (yExponent == 0) yExponent = 1;\\r\\n      else ySignifier |= 0x10000000000000000000000000000;\\r\\n\\r\\n      xSignifier *= ySignifier;\\r\\n      if (xSignifier == 0)\\r\\n        return (x ^ y) & 0x80000000000000000000000000000000 > 0 ?\\r\\n            NEGATIVE_ZERO : POSITIVE_ZERO;\\r\\n\\r\\n      xExponent += yExponent;\\r\\n\\r\\n      uint256 msb =\\r\\n        xSignifier >= 0x200000000000000000000000000000000000000000000000000000000 ? 225 :\\r\\n        xSignifier >= 0x100000000000000000000000000000000000000000000000000000000 ? 224 :\\r\\n        msb (xSignifier);\\r\\n\\r\\n      if (xExponent + msb < 16496) { // Underflow\\r\\n        xExponent = 0;\\r\\n        xSignifier = 0;\\r\\n      } else if (xExponent + msb < 16608) { // Subnormal\\r\\n        if (xExponent < 16496)\\r\\n          xSignifier >>= 16496 - xExponent;\\r\\n        else if (xExponent > 16496)\\r\\n          xSignifier <<= xExponent - 16496;\\r\\n        xExponent = 0;\\r\\n      } else if (xExponent + msb > 49373) {\\r\\n        xExponent = 0x7FFF;\\r\\n        xSignifier = 0;\\r\\n      } else {\\r\\n        if (msb > 112)\\r\\n          xSignifier >>= msb - 112;\\r\\n        else if (msb < 112)\\r\\n          xSignifier <<= 112 - msb;\\r\\n\\r\\n        xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n\\r\\n        xExponent = xExponent + msb - 16607;\\r\\n      }\\r\\n\\r\\n      return bytes16 (uint128 (uint128 ((x ^ y) & 0x80000000000000000000000000000000) |\\r\\n          xExponent << 112 | xSignifier));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x / y.  Special values behave in the following way:\\r\\n   *\\r\\n   * NaN / x = NaN for any x.\\r\\n   * x / NaN = NaN for any x.\\r\\n   * Infinity / x = Infinity for any finite non-negative x.\\r\\n   * Infinity / x = -Infinity for any finite negative x including -0.\\r\\n   * -Infinity / x = -Infinity for any finite non-negative x.\\r\\n   * -Infinity / x = Infinity for any finite negative x including -0.\\r\\n   * x / Infinity = 0 for any finite non-negative x.\\r\\n   * x / -Infinity = -0 for any finite non-negative x.\\r\\n   * x / Infinity = -0 for any finite non-negative x including -0.\\r\\n   * x / -Infinity = 0 for any finite non-negative x including -0.\\r\\n   * \\r\\n   * Infinity / Infinity = NaN.\\r\\n   * Infinity / -Infinity = -NaN.\\r\\n   * -Infinity / Infinity = -NaN.\\r\\n   * -Infinity / -Infinity = NaN.\\r\\n   *\\r\\n   * Division by zero behaves in the following way:\\r\\n   *\\r\\n   * x / 0 = Infinity for any finite positive x.\\r\\n   * x / -0 = -Infinity for any finite positive x.\\r\\n   * x / 0 = -Infinity for any finite negative x.\\r\\n   * x / -0 = Infinity for any finite negative x.\\r\\n   * 0 / 0 = NaN.\\r\\n   * 0 / -0 = NaN.\\r\\n   * -0 / 0 = NaN.\\r\\n   * -0 / -0 = NaN.\\r\\n   *\\r\\n   * @param x quadruple precision number\\r\\n   * @param y quadruple precision number\\r\\n   * @return quadruple precision number\\r\\n   */\\r\\n  function div (bytes16 x, bytes16 y) internal pure returns (bytes16) {\\r\\n    uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\r\\n    uint256 yExponent = uint128 (y) >> 112 & 0x7FFF;\\r\\n\\r\\n    if (xExponent == 0x7FFF) {\\r\\n      if (yExponent == 0x7FFF) return NaN;\\r\\n      else return x ^ y & 0x80000000000000000000000000000000;\\r\\n    } else if (yExponent == 0x7FFF) {\\r\\n      if (y & 0x0000FFFFFFFFFFFFFFFFFFFFFFFFFFFF != 0) return NaN;\\r\\n      else return POSITIVE_ZERO | (x ^ y) & 0x80000000000000000000000000000000;\\r\\n    } else if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) {\\r\\n      if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\r\\n      else return POSITIVE_INFINITY | (x ^ y) & 0x80000000000000000000000000000000;\\r\\n    } else {\\r\\n      uint256 ySignifier = uint128 (y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n      if (yExponent == 0) yExponent = 1;\\r\\n      else ySignifier |= 0x10000000000000000000000000000;\\r\\n\\r\\n      uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n      if (xExponent == 0) {\\r\\n        if (xSignifier != 0) {\\r\\n          uint shift = 226 - msb (xSignifier);\\r\\n\\r\\n          xSignifier <<= shift;\\r\\n\\r\\n          xExponent = 1;\\r\\n          yExponent += shift - 114;\\r\\n        }\\r\\n      }\\r\\n      else {\\r\\n        xSignifier = (xSignifier | 0x10000000000000000000000000000) << 114;\\r\\n      }\\r\\n\\r\\n      xSignifier = xSignifier / ySignifier;\\r\\n      if (xSignifier == 0)\\r\\n        return (x ^ y) & 0x80000000000000000000000000000000 > 0 ?\\r\\n            NEGATIVE_ZERO : POSITIVE_ZERO;\\r\\n\\r\\n      assert (xSignifier >= 0x1000000000000000000000000000);\\r\\n\\r\\n      uint256 msb =\\r\\n        xSignifier >= 0x80000000000000000000000000000 ? msb (xSignifier) :\\r\\n        xSignifier >= 0x40000000000000000000000000000 ? 114 :\\r\\n        xSignifier >= 0x20000000000000000000000000000 ? 113 : 112;\\r\\n\\r\\n      if (xExponent + msb > yExponent + 16497) { // Overflow\\r\\n        xExponent = 0x7FFF;\\r\\n        xSignifier = 0;\\r\\n      } else if (xExponent + msb + 16380  < yExponent) { // Underflow\\r\\n        xExponent = 0;\\r\\n        xSignifier = 0;\\r\\n      } else if (xExponent + msb + 16268  < yExponent) { // Subnormal\\r\\n        if (xExponent + 16380 > yExponent)\\r\\n          xSignifier <<= xExponent + 16380 - yExponent;\\r\\n        else if (xExponent + 16380 < yExponent)\\r\\n          xSignifier >>= yExponent - xExponent - 16380;\\r\\n\\r\\n        xExponent = 0;\\r\\n      } else { // Normal\\r\\n        if (msb > 112)\\r\\n          xSignifier >>= msb - 112;\\r\\n\\r\\n        xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n\\r\\n        xExponent = xExponent + msb + 16269 - yExponent;\\r\\n      }\\r\\n\\r\\n      return bytes16 (uint128 (uint128 ((x ^ y) & 0x80000000000000000000000000000000) |\\r\\n          xExponent << 112 | xSignifier));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate -x.\\r\\n   *\\r\\n   * @param x quadruple precision number\\r\\n   * @return quadruple precision number\\r\\n   */\\r\\n  function neg (bytes16 x) internal pure returns (bytes16) {\\r\\n    return x ^ 0x80000000000000000000000000000000;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate |x|.\\r\\n   *\\r\\n   * @param x quadruple precision number\\r\\n   * @return quadruple precision number\\r\\n   */\\r\\n  function abs (bytes16 x) internal pure returns (bytes16) {\\r\\n    return x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate square root of x.  Return NaN on negative x excluding -0.\\r\\n   *\\r\\n   * @param x quadruple precision number\\r\\n   * @return quadruple precision number\\r\\n   */\\r\\n  function sqrt (bytes16 x) internal pure returns (bytes16) {\\r\\n    if (uint128 (x) >  0x80000000000000000000000000000000) return NaN;\\r\\n    else {\\r\\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\r\\n      if (xExponent == 0x7FFF) return x;\\r\\n      else {\\r\\n        uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n        if (xExponent == 0) xExponent = 1;\\r\\n        else xSignifier |= 0x10000000000000000000000000000;\\r\\n\\r\\n        if (xSignifier == 0) return POSITIVE_ZERO;\\r\\n\\r\\n        bool oddExponent = xExponent & 0x1 == 0;\\r\\n        xExponent = xExponent + 16383 >> 1;\\r\\n\\r\\n        if (oddExponent) {\\r\\n          if (xSignifier >= 0x10000000000000000000000000000)\\r\\n            xSignifier <<= 113;\\r\\n          else {\\r\\n            uint256 msb = msb (xSignifier);\\r\\n            uint256 shift = (226 - msb) & 0xFE;\\r\\n            xSignifier <<= shift;\\r\\n            xExponent -= shift - 112 >> 1;\\r\\n          }\\r\\n        } else {\\r\\n          if (xSignifier >= 0x10000000000000000000000000000)\\r\\n            xSignifier <<= 112;\\r\\n          else {\\r\\n            uint256 msb = msb (xSignifier);\\r\\n            uint256 shift = (225 - msb) & 0xFE;\\r\\n            xSignifier <<= shift;\\r\\n            xExponent -= shift - 112 >> 1;\\r\\n          }\\r\\n        }\\r\\n\\r\\n        uint256 r = 0x10000000000000000000000000000;\\r\\n        r = (r + xSignifier / r) >> 1;\\r\\n        r = (r + xSignifier / r) >> 1;\\r\\n        r = (r + xSignifier / r) >> 1;\\r\\n        r = (r + xSignifier / r) >> 1;\\r\\n        r = (r + xSignifier / r) >> 1;\\r\\n        r = (r + xSignifier / r) >> 1;\\r\\n        r = (r + xSignifier / r) >> 1; // Seven iterations should be enough\\r\\n        uint256 r1 = xSignifier / r;\\r\\n        if (r1 < r) r = r1;\\r\\n\\r\\n        return bytes16 (uint128 (xExponent << 112 | r & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate binary logarithm of x.  Return NaN on negative x excluding -0.\\r\\n   *\\r\\n   * @param x quadruple precision number\\r\\n   * @return quadruple precision number\\r\\n   */\\r\\n  function log_2 (bytes16 x) internal pure returns (bytes16) {\\r\\n    if (uint128 (x) > 0x80000000000000000000000000000000) return NaN;\\r\\n    else if (x == 0x3FFF0000000000000000000000000000) return POSITIVE_ZERO; \\r\\n    else {\\r\\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\r\\n      if (xExponent == 0x7FFF) return x;\\r\\n      else {\\r\\n        uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n        if (xExponent == 0) xExponent = 1;\\r\\n        else xSignifier |= 0x10000000000000000000000000000;\\r\\n\\r\\n        if (xSignifier == 0) return NEGATIVE_INFINITY;\\r\\n\\r\\n        bool resultNegative;\\r\\n        uint256 resultExponent = 16495;\\r\\n        uint256 resultSignifier;\\r\\n\\r\\n        if (xExponent >= 0x3FFF) {\\r\\n          resultNegative = false;\\r\\n          resultSignifier = xExponent - 0x3FFF;\\r\\n          xSignifier <<= 15;\\r\\n        } else {\\r\\n          resultNegative = true;\\r\\n          if (xSignifier >= 0x10000000000000000000000000000) {\\r\\n            resultSignifier = 0x3FFE - xExponent;\\r\\n            xSignifier <<= 15;\\r\\n          } else {\\r\\n            uint256 msb = msb (xSignifier);\\r\\n            resultSignifier = 16493 - msb;\\r\\n            xSignifier <<= 127 - msb;\\r\\n          }\\r\\n        }\\r\\n\\r\\n        if (xSignifier == 0x80000000000000000000000000000000) {\\r\\n          if (resultNegative) resultSignifier += 1;\\r\\n          uint256 shift = 112 - msb (resultSignifier);\\r\\n          resultSignifier <<= shift;\\r\\n          resultExponent -= shift;\\r\\n        } else {\\r\\n          uint256 bb = resultNegative ? 1 : 0;\\r\\n          while (resultSignifier < 0x10000000000000000000000000000) {\\r\\n            resultSignifier <<= 1;\\r\\n            resultExponent -= 1;\\r\\n  \\r\\n            xSignifier *= xSignifier;\\r\\n            uint256 b = xSignifier >> 255;\\r\\n            resultSignifier += b ^ bb;\\r\\n            xSignifier >>= 127 + b;\\r\\n          }\\r\\n        }\\r\\n\\r\\n        return bytes16 (uint128 ((resultNegative ? 0x80000000000000000000000000000000 : 0) |\\r\\n            resultExponent << 112 | resultSignifier & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate natural logarithm of x.  Return NaN on negative x excluding -0.\\r\\n   *\\r\\n   * @param x quadruple precision number\\r\\n   * @return quadruple precision number\\r\\n   */\\r\\n  function ln (bytes16 x) internal pure returns (bytes16) {\\r\\n    return mul (log_2 (x), 0x3FFE62E42FEFA39EF35793C7673007E5);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate 2^x.\\r\\n   *\\r\\n   * @param x quadruple precision number\\r\\n   * @return quadruple precision number\\r\\n   */\\r\\n  function pow_2 (bytes16 x) internal pure returns (bytes16) {\\r\\n    bool xNegative = uint128 (x) > 0x80000000000000000000000000000000;\\r\\n    uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\r\\n    uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n\\r\\n    if (xExponent == 0x7FFF && xSignifier != 0) return NaN;\\r\\n    else if (xExponent > 16397)\\r\\n      return xNegative ? POSITIVE_ZERO : POSITIVE_INFINITY;\\r\\n    else if (xExponent < 16255)\\r\\n      return 0x3FFF0000000000000000000000000000;\\r\\n    else {\\r\\n      if (xExponent == 0) xExponent = 1;\\r\\n      else xSignifier |= 0x10000000000000000000000000000;\\r\\n\\r\\n      if (xExponent > 16367)\\r\\n        xSignifier <<= xExponent - 16367;\\r\\n      else if (xExponent < 16367)\\r\\n        xSignifier >>= 16367 - xExponent;\\r\\n\\r\\n      if (xNegative && xSignifier > 0x406E00000000000000000000000000000000)\\r\\n        return POSITIVE_ZERO;\\r\\n\\r\\n      if (!xNegative && xSignifier > 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\r\\n        return POSITIVE_INFINITY;\\r\\n\\r\\n      uint256 resultExponent = xSignifier >> 128;\\r\\n      xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n      if (xNegative && xSignifier != 0) {\\r\\n        xSignifier = ~xSignifier;\\r\\n        resultExponent += 1;\\r\\n      }\\r\\n\\r\\n      uint256 resultSignifier = 0x80000000000000000000000000000000;\\r\\n      if (xSignifier & 0x80000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\r\\n      if (xSignifier & 0x40000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\r\\n      if (xSignifier & 0x20000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\r\\n      if (xSignifier & 0x10000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\r\\n      if (xSignifier & 0x8000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\r\\n      if (xSignifier & 0x4000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\r\\n      if (xSignifier & 0x2000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\r\\n      if (xSignifier & 0x1000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\r\\n      if (xSignifier & 0x800000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\r\\n      if (xSignifier & 0x400000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\r\\n      if (xSignifier & 0x200000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\r\\n      if (xSignifier & 0x100000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\r\\n      if (xSignifier & 0x80000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\r\\n      if (xSignifier & 0x40000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\r\\n      if (xSignifier & 0x20000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000162E525EE054754457D5995292026 >> 128;\\r\\n      if (xSignifier & 0x10000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\r\\n      if (xSignifier & 0x8000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\r\\n      if (xSignifier & 0x4000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\r\\n      if (xSignifier & 0x2000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\r\\n      if (xSignifier & 0x1000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\r\\n      if (xSignifier & 0x800000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\r\\n      if (xSignifier & 0x400000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\r\\n      if (xSignifier & 0x200000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\r\\n      if (xSignifier & 0x100000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\r\\n      if (xSignifier & 0x80000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\r\\n      if (xSignifier & 0x40000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\r\\n      if (xSignifier & 0x20000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\r\\n      if (xSignifier & 0x10000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\r\\n      if (xSignifier & 0x8000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\r\\n      if (xSignifier & 0x4000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\r\\n      if (xSignifier & 0x2000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\r\\n      if (xSignifier & 0x1000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\r\\n      if (xSignifier & 0x800000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\r\\n      if (xSignifier & 0x400000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\r\\n      if (xSignifier & 0x200000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\r\\n      if (xSignifier & 0x100000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\r\\n      if (xSignifier & 0x80000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\r\\n      if (xSignifier & 0x40000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\r\\n      if (xSignifier & 0x20000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\r\\n      if (xSignifier & 0x10000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\r\\n      if (xSignifier & 0x8000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\r\\n      if (xSignifier & 0x4000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000002C5C85FDF477B662B26945 >> 128;\\r\\n      if (xSignifier & 0x2000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000162E42FEFA3AE53369388C >> 128;\\r\\n      if (xSignifier & 0x1000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000B17217F7D1D351A389D40 >> 128;\\r\\n      if (xSignifier & 0x800000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\r\\n      if (xSignifier & 0x400000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\r\\n      if (xSignifier & 0x200000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\r\\n      if (xSignifier & 0x100000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\r\\n      if (xSignifier & 0x80000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\r\\n      if (xSignifier & 0x40000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\r\\n      if (xSignifier & 0x20000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000162E42FEFA39F02B772C >> 128;\\r\\n      if (xSignifier & 0x10000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\r\\n      if (xSignifier & 0x8000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\r\\n      if (xSignifier & 0x4000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000002C5C85FDF473DEA871F >> 128;\\r\\n      if (xSignifier & 0x2000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\r\\n      if (xSignifier & 0x1000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000B17217F7D1CF79E949 >> 128;\\r\\n      if (xSignifier & 0x800000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\r\\n      if (xSignifier & 0x400000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\r\\n      if (xSignifier & 0x200000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000162E42FEFA39EF366F >> 128;\\r\\n      if (xSignifier & 0x100000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\r\\n      if (xSignifier & 0x80000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\r\\n      if (xSignifier & 0x40000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\r\\n      if (xSignifier & 0x20000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000162E42FEFA39EF358 >> 128;\\r\\n      if (xSignifier & 0x10000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000B17217F7D1CF79AB >> 128;\\r\\n      if (xSignifier & 0x8000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000058B90BFBE8E7BCD5 >> 128;\\r\\n      if (xSignifier & 0x4000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000002C5C85FDF473DE6A >> 128;\\r\\n      if (xSignifier & 0x2000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000162E42FEFA39EF34 >> 128;\\r\\n      if (xSignifier & 0x1000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000B17217F7D1CF799 >> 128;\\r\\n      if (xSignifier & 0x800000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000058B90BFBE8E7BCC >> 128;\\r\\n      if (xSignifier & 0x400000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000002C5C85FDF473DE5 >> 128;\\r\\n      if (xSignifier & 0x200000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000162E42FEFA39EF2 >> 128;\\r\\n      if (xSignifier & 0x100000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000B17217F7D1CF78 >> 128;\\r\\n      if (xSignifier & 0x80000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000058B90BFBE8E7BB >> 128;\\r\\n      if (xSignifier & 0x40000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000002C5C85FDF473DD >> 128;\\r\\n      if (xSignifier & 0x20000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000162E42FEFA39EE >> 128;\\r\\n      if (xSignifier & 0x10000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000B17217F7D1CF6 >> 128;\\r\\n      if (xSignifier & 0x8000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000058B90BFBE8E7A >> 128;\\r\\n      if (xSignifier & 0x4000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000002C5C85FDF473C >> 128;\\r\\n      if (xSignifier & 0x2000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000162E42FEFA39D >> 128;\\r\\n      if (xSignifier & 0x1000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000B17217F7D1CE >> 128;\\r\\n      if (xSignifier & 0x800000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000058B90BFBE8E6 >> 128;\\r\\n      if (xSignifier & 0x400000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000002C5C85FDF472 >> 128;\\r\\n      if (xSignifier & 0x200000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000162E42FEFA38 >> 128;\\r\\n      if (xSignifier & 0x100000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000B17217F7D1B >> 128;\\r\\n      if (xSignifier & 0x80000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000058B90BFBE8D >> 128;\\r\\n      if (xSignifier & 0x40000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000002C5C85FDF46 >> 128;\\r\\n      if (xSignifier & 0x20000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000162E42FEFA2 >> 128;\\r\\n      if (xSignifier & 0x10000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000B17217F7D0 >> 128;\\r\\n      if (xSignifier & 0x8000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000058B90BFBE7 >> 128;\\r\\n      if (xSignifier & 0x4000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000002C5C85FDF3 >> 128;\\r\\n      if (xSignifier & 0x2000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000162E42FEF9 >> 128;\\r\\n      if (xSignifier & 0x1000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000B17217F7C >> 128;\\r\\n      if (xSignifier & 0x800000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000058B90BFBD >> 128;\\r\\n      if (xSignifier & 0x400000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000002C5C85FDE >> 128;\\r\\n      if (xSignifier & 0x200000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000162E42FEE >> 128;\\r\\n      if (xSignifier & 0x100000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000B17217F6 >> 128;\\r\\n      if (xSignifier & 0x80000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000058B90BFA >> 128;\\r\\n      if (xSignifier & 0x40000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000002C5C85FC >> 128;\\r\\n      if (xSignifier & 0x20000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000162E42FD >> 128;\\r\\n      if (xSignifier & 0x10000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000B17217E >> 128;\\r\\n      if (xSignifier & 0x8000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000058B90BE >> 128;\\r\\n      if (xSignifier & 0x4000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000002C5C85E >> 128;\\r\\n      if (xSignifier & 0x2000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000162E42E >> 128;\\r\\n      if (xSignifier & 0x1000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000B17216 >> 128;\\r\\n      if (xSignifier & 0x800000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000058B90A >> 128;\\r\\n      if (xSignifier & 0x400000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000002C5C84 >> 128;\\r\\n      if (xSignifier & 0x200000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000162E41 >> 128;\\r\\n      if (xSignifier & 0x100000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000B1720 >> 128;\\r\\n      if (xSignifier & 0x80000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000058B8F >> 128;\\r\\n      if (xSignifier & 0x40000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000002C5C7 >> 128;\\r\\n      if (xSignifier & 0x20000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000162E3 >> 128;\\r\\n      if (xSignifier & 0x10000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000B171 >> 128;\\r\\n      if (xSignifier & 0x8000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000058B8 >> 128;\\r\\n      if (xSignifier & 0x4000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000002C5B >> 128;\\r\\n      if (xSignifier & 0x2000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000162D >> 128;\\r\\n      if (xSignifier & 0x1000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000B16 >> 128;\\r\\n      if (xSignifier & 0x800 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000058A >> 128;\\r\\n      if (xSignifier & 0x400 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000002C4 >> 128;\\r\\n      if (xSignifier & 0x200 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000161 >> 128;\\r\\n      if (xSignifier & 0x100 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000000B0 >> 128;\\r\\n      if (xSignifier & 0x80 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000057 >> 128;\\r\\n      if (xSignifier & 0x40 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000002B >> 128;\\r\\n      if (xSignifier & 0x20 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000015 >> 128;\\r\\n      if (xSignifier & 0x10 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000000A >> 128;\\r\\n      if (xSignifier & 0x8 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000004 >> 128;\\r\\n      if (xSignifier & 0x4 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000001 >> 128;\\r\\n\\r\\n      if (!xNegative) {\\r\\n        resultSignifier = resultSignifier >> 15 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n        resultExponent += 0x3FFF;\\r\\n      } else if (resultExponent <= 0x3FFE) {\\r\\n        resultSignifier = resultSignifier >> 15 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n        resultExponent = 0x3FFF - resultExponent;\\r\\n      } else {\\r\\n        resultSignifier = resultSignifier >> resultExponent - 16367;\\r\\n        resultExponent = 0;\\r\\n      }\\r\\n\\r\\n      return bytes16 (uint128 (resultExponent << 112 | resultSignifier));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate e^x.\\r\\n   *\\r\\n   * @param x quadruple precision number\\r\\n   * @return quadruple precision number\\r\\n   */\\r\\n  function exp (bytes16 x) internal pure returns (bytes16) {\\r\\n    return pow_2 (mul (x, 0x3FFF71547652B82FE1777D0FFDA0D23A));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Get index of the most significant non-zero bit in binary representation of\\r\\n   * x.  Reverts if x is zero.\\r\\n   *\\r\\n   * @return index of the most significant non-zero bit in binary representation\\r\\n   *         of x\\r\\n   */\\r\\n  function msb (uint256 x) private pure returns (uint256) {\\r\\n    require (x > 0);\\r\\n\\r\\n    uint256 result = 0;\\r\\n\\r\\n    if (x >= 0x100000000000000000000000000000000) { x >>= 128; result += 128; }\\r\\n    if (x >= 0x10000000000000000) { x >>= 64; result += 64; }\\r\\n    if (x >= 0x100000000) { x >>= 32; result += 32; }\\r\\n    if (x >= 0x10000) { x >>= 16; result += 16; }\\r\\n    if (x >= 0x100) { x >>= 8; result += 8; }\\r\\n    if (x >= 0x10) { x >>= 4; result += 4; }\\r\\n    if (x >= 0x4) { x >>= 2; result += 2; }\\r\\n    if (x >= 0x2) result += 1; // No need to shift x anymore\\r\\n\\r\\n    return result;\\r\\n  }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cloneFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cloneFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityParameter\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawFromPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"isValidPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLogic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_depositEnabled\",\"type\":\"bool\"}],\"name\":\"setAllPoolsDepositEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tradeEnabled\",\"type\":\"bool\"}],\"name\":\"setAllPoolsTradeEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_withdrawEnabled\",\"type\":\"bool\"}],\"name\":\"setAllPoolsWithdrawEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cloneFactory\",\"type\":\"address\"}],\"name\":\"setCloneFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_depositEnabled\",\"type\":\"bool\"}],\"name\":\"setPoolDepositEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolFee\",\"type\":\"uint256\"}],\"name\":\"setPoolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityParameter\",\"type\":\"uint256\"}],\"name\":\"setPoolLiquidityParameter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolLogic\",\"type\":\"address\"}],\"name\":\"setPoolLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_tradeEnabled\",\"type\":\"bool\"}],\"name\":\"setPoolTradeEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withdrawEnabled\",\"type\":\"bool\"}],\"name\":\"setPoolWithdrawEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_whitelist\",\"type\":\"bool\"}],\"name\":\"setRouterContractWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_onlyEOAEnabled\",\"type\":\"bool\"}],\"name\":\"setRouterOnlyEOAEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_settlement\",\"type\":\"address\"}],\"name\":\"setSettlement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setSettlementDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlement\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CentaurFactory","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000893604fb79062b0450b866616ceca877c0d234820000000000000000000000000deb1a88002d54ae993e9dc341a7e9d78fbfdaac000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}