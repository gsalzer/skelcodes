{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.5.17;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function decimals() external view returns (uint);\r\n    function name() external view returns (string memory);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface Controller {\r\n    function vaults(address) external view returns (address);\r\n    function rewards() external view returns (address);\r\n}\r\n\r\n\r\ninterface UniswapRouter {\r\n    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\r\n}\r\n\r\ninterface WETH {\r\n    function deposit() external payable;\r\n    function withdraw(uint wad) external;\r\n    event Deposit(address indexed dst, uint wad);\r\n    event Withdrawal(address indexed src, uint wad);\r\n}\r\n\r\ninterface ICurveFi {\r\n    function add_liquidity(\r\n        uint256[2] calldata amounts,\r\n        uint256 min_mint_amount\r\n    ) external payable;\r\n    function remove_liquidity_one_coin(\r\n        uint256 _token_amount,\r\n        int128 i,\r\n        uint256 min_amount\r\n    ) external;\r\n    function get_virtual_price() external view returns (uint256);\r\n}\r\n\r\ninterface Booster {\r\n    function depositAll(uint256 _pid, bool _stake) external returns(bool);\r\n    function withdraw(uint256 _pid, uint256 _amount) external returns(bool);\r\n}\r\n\r\ninterface BaseRewardPool {\r\n    function getReward(address _account, bool _claimExtras) external returns(bool);\r\n    function earned(address account) external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function withdrawAndUnwrap(uint256 amount, bool claim) external returns(bool);\r\n}\r\n\r\ncontract StrategyETHConvex {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public pid = 23;\r\n\r\n    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\taddress constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\r\n\r\n    address constant public want = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);  //weth\r\n\r\n    address constant public eCRVPool = address(0xc5424B857f758E906013F3555Dad202e4bdB4567);\r\n    address constant public eCRVToken = address(0xA3D87FffcE63B53E0d54fAa1cc983B7eB0b74A9c);\r\n\r\n    address constant public booster = address(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\r\n    address constant public baserewardpool = address(0x192469CadE297D6B21F418cFA8c366b63FFC9f9b);\r\n\r\n    address constant public CVX = address(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\r\n    address constant public CRV = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\r\n\r\n    address public governance;\r\n    address public controller;\r\n    uint256 public redeliverynum = 100 * 1e18;\r\n\r\n    uint256 public constant DENOMINATOR = 10000;\r\n    uint256 public slip = 60;\r\n\tuint256 public depositLastPrice;\r\n\tbool public withdrawSlipCheck = true;\r\n\r\n\taddress[] public swapCVX2ETHRouting;\r\n\taddress[] public swapCRV2ETHRouting;\r\n    address[] public swap2BTRouting;\r\n\r\n    modifier onlyController {\r\n        require(msg.sender == controller, \"!controller\");\r\n        _;\r\n    }\r\n\r\n    modifier isAuthorized() {\r\n        require(msg.sender == governance || msg.sender == controller || msg.sender == address(this), \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        governance = tx.origin;\r\n        controller = 0x5C6d3Cb5612b551452B3E9b48c920559634510D4;\r\n\r\n        swapCVX2ETHRouting = [CVX,weth];\r\n\t\tswapCRV2ETHRouting = [CRV,weth];\r\n\t\tswap2BTRouting = [weth,bt];\r\n\r\n        IERC20(CRV).approve(unirouter, uint(-1));\r\n        IERC20(CVX).approve(unirouter, uint(-1));\r\n        IERC20(weth).approve(unirouter, uint(-1));\r\n    }\r\n\r\n    function () external payable {\r\n    }\r\n\r\n    function deposit() public isAuthorized{\r\n\t\tuint _want = IERC20(want).balanceOf(address(this));\r\n        require(_want > 0,\"WETH is 0\");\r\n        WETH(address(weth)).withdraw(_want); //weth->eth\r\n        uint256[2] memory amounts = [_want,0];\r\n        uint256 v = _want.mul(1e18).div(ICurveFi(eCRVPool).get_virtual_price());\r\n        uint256 beforeCRV = IERC20(eCRVToken).balanceOf(address(this));\r\n        ICurveFi(eCRVPool).add_liquidity.value(_want)(amounts,v.mul(DENOMINATOR.sub(slip)).div(DENOMINATOR));\r\n        uint256 _eCRV = IERC20(eCRVToken).balanceOf(address(this));\r\n        depositLastPrice = _want.mul(1e18).div(_eCRV.sub(beforeCRV));\r\n\r\n        if(_eCRV>0){\r\n            IERC20(want).safeApprove(booster, 0);\r\n            IERC20(want).safeApprove(booster, _eCRV);\r\n\r\n            Booster(booster).depositAll(pid,true);\r\n        }\r\n    }\r\n\r\n\r\n    // Withdraw partial funds, normally used with a vault withdrawal\r\n    function withdraw(uint _amount) external onlyController\r\n\t{\r\n\t\tuint amount = _withdraw(_amount);\r\n\t\taddress _vault = Controller(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\");\r\n        IERC20(want).safeTransfer(_vault, amount);\r\n\t}\r\n\r\n\r\n    function _withdraw(uint _amount) internal returns(uint) {\r\n\t\tuint amount = IERC20(want).balanceOf(address(this));\r\n\t\tif (amount < _amount) {\r\n            uint256 _eCRV = _withdrawSome(_amount.sub(amount));\r\n\t\t\tuint256 afterAmount = IERC20(want).balanceOf(address(this));\r\n\t\t\tif(withdrawSlipCheck){\r\n\t\t\t\tuint256 withdrawPrice = afterAmount.sub(amount).mul(1e18).div(_eCRV);\r\n\t\t\t\tif(withdrawPrice < depositLastPrice){\r\n\t\t\t\t\trequire(depositLastPrice.sub(withdrawPrice).mul(DENOMINATOR) < slip.mul(depositLastPrice),\"slippage\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tamount = afterAmount;\r\n\t\t}\r\n        if (amount < _amount){\r\n            return amount;\r\n        }\r\n\t\treturn _amount;\r\n    }\r\n\r\n    function _withdrawSome(uint _amount) internal returns(uint256 _eCRV)\r\n    {\r\n        _eCRV = _amount.mul(1e18).div(ICurveFi(eCRVPool).get_virtual_price());\r\n        uint256 _eCRVBefore = IERC20(eCRVToken).balanceOf(address(this));\r\n        if(_eCRV>_eCRVBefore){\r\n            _eCRV = _eCRV.sub(_eCRVBefore);\r\n            uint256 alleCRV = BaseRewardPool(baserewardpool).balanceOf(address(this));\r\n            if(_eCRV>alleCRV){\r\n                _eCRV = alleCRV;\r\n            }\r\n            BaseRewardPool(baserewardpool).withdrawAndUnwrap(_eCRV,false);\r\n            _eCRV = IERC20(eCRVToken).balanceOf(address(this));\r\n        }\r\n        ICurveFi(eCRVPool).remove_liquidity_one_coin(_eCRV,0,_amount.mul(DENOMINATOR.sub(slip)).div(DENOMINATOR));\r\n        WETH(weth).deposit.value(address(this).balance)();\r\n    }\r\n\r\n\tfunction withdrawAll() external onlyController returns (uint balance) {\r\n\t\tbalance = _withdraw(balanceOf());\r\n\r\n\t\taddress _vault = Controller(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\");\r\n        IERC20(want).safeTransfer(_vault, balance);\r\n\t}\r\n\r\n\r\n\tfunction balanceOfwant() public view returns (uint256) {\r\n\t\treturn IERC20(want).balanceOf(address(this));\r\n\t}\r\n\r\n\tfunction balanceOfeCRV() public view returns (uint256) {\r\n        return BaseRewardPool(baserewardpool).balanceOf(address(this)).add(IERC20(eCRVToken).balanceOf(address(this)));\r\n\t}\r\n\r\n    function balanceOfeCRV2ETH() public view returns(uint256) {\r\n        return balanceOfeCRV().mul(ICurveFi(eCRVPool).get_virtual_price()).div(1e18);\r\n    }\r\n\r\n    function balanceOf() public view returns (uint256) {\r\n        return balanceOfwant().add(balanceOfeCRV2ETH());\r\n    }\r\n\r\n    function getPending() public view returns (uint256) {\r\n        return BaseRewardPool(baserewardpool).earned(address(this));\r\n    }\r\n\r\n\tfunction getCRV() public view returns(uint256)\r\n\t{\r\n\t\treturn IERC20(CRV).balanceOf(address(this));\r\n\t}\r\n\r\n    function harvest() public\r\n    {\r\n        BaseRewardPool(baserewardpool).getReward(address(this),true);\r\n        redelivery();\r\n    }\r\n\r\n    function redelivery() internal {\r\n        uint256 reward = IERC20(CRV).balanceOf(address(this));\r\n        if (reward > redeliverynum)\r\n        {\r\n            UniswapRouter(unirouter).swapExactTokensForTokens(IERC20(CRV).balanceOf(address(this)),0,swapCRV2ETHRouting,address(this),now.add(1800));\r\n            UniswapRouter(unirouter).swapExactTokensForTokens(IERC20(CVX).balanceOf(address(this)),0,swapCVX2ETHRouting,address(this),now.add(1800));\r\n\r\n            uint256 wethAmount = IERC20(weth).balanceOf(address(this));\r\n\t\t    uint256 _2bt = wethAmount.mul(20).div(100); //20%\r\n\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2bt, 0, swap2BTRouting, Controller(controller).rewards(), now.add(1800));\r\n\t\t}\r\n        deposit();\r\n    }\r\n\r\n\r\n    function setredeliverynum(uint256 value) public\r\n    {\r\n        require(msg.sender == governance, \"!governance\");\r\n        redeliverynum = value;\r\n    }\r\n\r\n    function setGovernance(address _governance) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    function setController(address _controller) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        controller = _controller;\r\n    }\r\n\r\n    function setSlip(uint256 _slip) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        require(_slip <= DENOMINATOR,\"slip error\");\r\n        slip = _slip;\r\n    }\r\n\tfunction setWithdrawSlipCheck(bool _check) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        withdrawSlipCheck = _check;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"CRV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CVX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfeCRV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfeCRV2ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfwant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baserewardpool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"booster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositLastPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eCRVPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eCRVToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCRV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redeliverynum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slip\",\"type\":\"uint256\"}],\"name\":\"setSlip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_check\",\"type\":\"bool\"}],\"name\":\"setWithdrawSlipCheck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setredeliverynum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"slip\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swap2BTRouting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapCRV2ETHRouting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapCVX2ETHRouting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unirouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawSlipCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StrategyETHConvex","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e9bbd31d1cf9facaf8ee1e73aa6986cefee9714687690d3d6c88214ac7ffe6d7"}]}