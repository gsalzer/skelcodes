{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.3.0 https://hardhat.org\r\n\r\n// File contracts/interfaces/ICoFiXERC20.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\ninterface ICoFiXERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    // function name() external pure returns (string memory);\r\n    // function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    // function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    // function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    // function nonces(address owner) external view returns (uint);\r\n\r\n    // function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\n\r\n// File contracts/CoFiXERC20.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n// ERC20 token implementation, inherited by CoFiXPair contract, no owner or governance\r\ncontract CoFiXERC20 is ICoFiXERC20 {\r\n\r\n    //string public constant nameForDomain = 'CoFiX Pool Token';\r\n    uint8 public override constant decimals = 18;\r\n    uint  public override totalSupply;\r\n    mapping(address => uint) public override balanceOf;\r\n    mapping(address => mapping(address => uint)) public override allowance;\r\n\r\n    //bytes32 public override DOMAIN_SEPARATOR;\r\n    // keccak256(\"Permit(address owner,address spender,uint value,uint nonce,uint deadline)\");\r\n    //bytes32 public override constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n    //mapping(address => uint) public override nonces;\r\n\r\n    //event Approval(address indexed owner, address indexed spender, uint value);\r\n    //event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    constructor() {\r\n        // uint chainId;\r\n        // assembly {\r\n        //     chainId := chainid()\r\n        // }\r\n        // DOMAIN_SEPARATOR = keccak256(\r\n        //     abi.encode(\r\n        //         keccak256('EIP712Domain(string name,string version,uint chainId,address verifyingContract)'),\r\n        //         keccak256(bytes(nameForDomain)),\r\n        //         keccak256(bytes('1')),\r\n        //         chainId,\r\n        //         address(this)\r\n        //     )\r\n        // );\r\n    }\r\n\r\n    function _mint(address to, uint value) internal {\r\n        totalSupply = totalSupply + (value);\r\n        balanceOf[to] = balanceOf[to] + (value);\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint value) internal {\r\n        balanceOf[from] = balanceOf[from] - (value);\r\n        totalSupply = totalSupply - (value);\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint value) private {\r\n        allowance[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint value) private {\r\n        balanceOf[from] = balanceOf[from] - (value);\r\n        balanceOf[to] = balanceOf[to] + (value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint value) external override returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint value) external override returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint value) external override returns (bool) {\r\n        if (allowance[from][msg.sender] != 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\r\n           allowance[from][msg.sender] = allowance[from][msg.sender] - (value);\r\n        }\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    // function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external override {\r\n    //     require(deadline >= block.timestamp, 'CERC20: EXPIRED');\r\n    //     bytes32 digest = keccak256(\r\n    //         abi.encodePacked(\r\n    //             '\\x19\\x01',\r\n    //             DOMAIN_SEPARATOR,\r\n    //             keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\r\n    //         )\r\n    //     );\r\n    //     address recoveredAddress = ecrecover(digest, v, r, s);\r\n    //     require(recoveredAddress != address(0) && recoveredAddress == owner, 'CERC20: INVALID_SIGNATURE');\r\n    //     _approve(owner, spender, value);\r\n    // }\r\n}\r\n\r\n\r\n// File contracts/CoFiXAnchorToken.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev Anchor pool xtoken\r\ncontract CoFiXAnchorToken is CoFiXERC20 {\r\n\r\n    // Address of anchor pool\r\n    address immutable POOL;\r\n\r\n    // ERC20 - name\r\n    string public name;\r\n    \r\n    // ERC20 - symbol\r\n    string public symbol;\r\n\r\n    constructor (\r\n        string memory name_, \r\n        string memory symbol_,\r\n        address pool\r\n    ) {\r\n        name = name_;\r\n        symbol = symbol_;\r\n        POOL = pool;\r\n    }\r\n\r\n    modifier check() {\r\n        require(msg.sender == POOL, \"CoFiXAnchorToken: Only for CoFiXAnchorPool\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Distribute xtoken\r\n    /// @param to The address which xtoken distribute to\r\n    /// @param amount Amount of xtoken\r\n    function mint(\r\n        address to, \r\n        uint amount\r\n    ) external check returns (uint) {\r\n        _mint(to, amount);\r\n        return amount;\r\n    }\r\n\r\n    /// @dev Burn xtoken\r\n    /// @param amount Amount of xtoken\r\n    function burn(\r\n        uint amount\r\n    ) external { \r\n        _burn(msg.sender, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CoFiXAnchorToken","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"888888","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000d7e54d936ca1e7f0ed097d4ec6140653ec60f85d000000000000000000000000000000000000000000000000000000000000000a58546f6b656e2d312d3200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000658542d312d320000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f90c4e0e7a13d0070efe6cfa9601c893db625bda4d41b39892eebed9721b708f"}]}