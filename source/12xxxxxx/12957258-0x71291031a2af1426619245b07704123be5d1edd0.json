{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/pool/CapitalPool.sol\": {\r\n      \"content\": \"/*\\n    Copyright (C) 2020 InsurAce.io\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see http://www.gnu.org/licenses/\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.7.3;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport {ICapitalPool} from \\\"./ICapitalPool.sol\\\";\\nimport {IPremiumPool} from \\\"./IPremiumPool.sol\\\";\\nimport {IStakersPoolV2} from \\\"../pool/IStakersPoolV2.sol\\\";\\nimport {SecurityMatrix} from \\\"../secmatrix/SecurityMatrix.sol\\\";\\nimport {Constant} from \\\"../common/Constant.sol\\\";\\nimport {Math} from \\\"../common/Math.sol\\\";\\nimport {IExchangeRate} from \\\"../exchange/IExchangeRate.sol\\\";\\n\\ncontract CapitalPool is OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable, ICapitalPool {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function initializeCapitalPool() public initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n    }\\n\\n    address public securityMatrix;\\n\\n    // stakers V2 _token and misc\\n    address[] public stakersTokenData;\\n    mapping(address => uint256) public stakersTokenDataMap;\\n    address public stakersPoolV2;\\n\\n    // fee pool\\n    address public feePoolAddress;\\n\\n    // premium pool\\n    address public premiumPoolAddress;\\n    uint256 public premiumPayoutRatioX10000;\\n\\n    // claim payout address\\n    address public claimToSettlementPool;\\n\\n    // product cover pool tokens\\n    address[] public productCoverTokens;\\n    mapping(address => uint256) public productCoverTokensMap;\\n    uint256[] public productList;\\n    mapping(uint256 => uint256) public productListMap;\\n    // product id -> token -> cover amount\\n    mapping(uint256 => mapping(address => uint256)) public coverAmtPPPT;\\n\\n    uint256 public coverAmtPPMaxRatio;\\n    uint256 public constant COVERAMT_PPMAX_RATIOBASE = 10000;\\n\\n    // capital wise\\n    uint256 public scr;\\n    address public scrToken;\\n    mapping(address => uint256) public deltaCoverAmt; // should be reset when updating scr value\\n    uint256 public cap2CapacityRatio;\\n    uint256 public constant CAP2CAPACITY_RATIOBASE = 10000;\\n    address public baseToken;\\n    uint256 public mt;\\n\\n    // token -> last expired amount update timestamp\\n    mapping(address => uint256) public tokenExpCvAmtUpdTimestampMap;\\n\\n    // exchange rate\\n    address public exchangeRate;\\n\\n    modifier allowedCaller() {\\n        require((SecurityMatrix(securityMatrix).isAllowdCaller(address(this), _msgSender())) || (_msgSender() == owner()), \\\"allowedCaller\\\");\\n        _;\\n    }\\n\\n    function setup(\\n        address _securityMatrix,\\n        address _feePoolAddress,\\n        address _premiumPoolAddress,\\n        address _claimToSettlementPool,\\n        address _stakersPoolV2,\\n        address _exchangeRate\\n    ) external onlyOwner {\\n        require(_securityMatrix != address(0), \\\"S:1\\\");\\n        require(_feePoolAddress != address(0), \\\"S:2\\\");\\n        require(_premiumPoolAddress != address(0), \\\"S:3\\\");\\n        require(_claimToSettlementPool != address(0), \\\"S:4\\\");\\n        require(_stakersPoolV2 != address(0), \\\"S:5\\\");\\n        require(_exchangeRate != address(0), \\\"S:6\\\");\\n        securityMatrix = _securityMatrix;\\n        baseToken = Constant.BCNATIVETOKENADDRESS;\\n        scrToken = Constant.BCNATIVETOKENADDRESS;\\n        feePoolAddress = _feePoolAddress;\\n        premiumPoolAddress = _premiumPoolAddress;\\n        claimToSettlementPool = _claimToSettlementPool;\\n        stakersPoolV2 = _stakersPoolV2;\\n        exchangeRate = _exchangeRate;\\n    }\\n\\n    function setData(uint256 _coverAmtPPMaxRatio, uint256 _premiumPayoutRatioX10000) external allowedCaller {\\n        coverAmtPPMaxRatio = _coverAmtPPMaxRatio;\\n        premiumPayoutRatioX10000 = _premiumPayoutRatioX10000;\\n    }\\n\\n    event UpdateCap2CapacityRatioEvent(uint256 _cap2CapacityRatio);\\n\\n    function updateCap2CapacityRatio(uint256 _cap2CapacityRatio) external allowedCaller {\\n        require(_cap2CapacityRatio > 0, \\\"UPDC2CR:1\\\");\\n        cap2CapacityRatio = _cap2CapacityRatio;\\n\\n        emit UpdateCap2CapacityRatioEvent(_cap2CapacityRatio);\\n    }\\n\\n    event UpdateMTEvent(address indexed _mtToken, uint256 _mtAmount);\\n\\n    function updateMT(address _mtToken, uint256 _mtAmount) external allowedCaller {\\n        require(_mtToken == baseToken, \\\"UPDMT:1\\\");\\n        require(_mtAmount > 0, \\\"UPDMT:2\\\");\\n        mt = _mtAmount;\\n\\n        emit UpdateMTEvent(_mtToken, _mtAmount);\\n    }\\n\\n    event UpdateSCREvent(address indexed _scrToken, uint256 _scrAmount);\\n\\n    function updateSCR(\\n        address _scrToken,\\n        uint256 _scrAmount,\\n        address[] memory _tokens,\\n        uint256[] memory _offsetAmounts\\n    ) external allowedCaller {\\n        require(_scrToken != address(0), \\\"UPDSCR:1\\\");\\n        require(_scrAmount > 0, \\\"UPDSCR:2\\\");\\n        require(_tokens.length == _offsetAmounts.length, \\\"UPDSCR:3\\\");\\n\\n        scrToken = _scrToken;\\n        scr = _scrAmount;\\n\\n        for (uint256 index = 0; index < _tokens.length; index++) {\\n            deltaCoverAmt[_tokens[index]] = deltaCoverAmt[_tokens[index]].sub(_offsetAmounts[index]);\\n        }\\n\\n        emit UpdateSCREvent(_scrToken, _scrAmount);\\n    }\\n\\n    event UpdateExpiredCoverAmountEvent(address indexed _token, uint256 _updateTimestamp, uint256 _productId, uint256 _amount);\\n\\n    function updateExpiredCoverAmount(\\n        address _token,\\n        uint256 _updateTimestamp,\\n        uint256[] memory _products,\\n        uint256[] memory _amounts\\n    ) external allowedCaller {\\n        require(_token != address(0), \\\"UPDECAMT:1\\\");\\n        require(_products.length > 0, \\\"UPDECAMT:2\\\");\\n        require(_products.length == _amounts.length, \\\"UPDECAMT:3\\\");\\n        require(_updateTimestamp > tokenExpCvAmtUpdTimestampMap[_token], \\\"UPDECAMT:4\\\");\\n\\n        tokenExpCvAmtUpdTimestampMap[_token] = _updateTimestamp;\\n\\n        for (uint256 index = 0; index < _products.length; index++) {\\n            uint256 productId = _products[index];\\n            uint256 expiredAmount = _amounts[index];\\n            coverAmtPPPT[productId][_token] = coverAmtPPPT[productId][_token].sub(expiredAmount);\\n\\n            emit UpdateExpiredCoverAmountEvent(_token, _updateTimestamp, productId, expiredAmount);\\n        }\\n    }\\n\\n    function hasTokenInStakersPool(address _token) external view override returns (bool) {\\n        return stakersTokenDataMap[_token] == 1;\\n    }\\n\\n    function addStakersPoolData(address _token) external onlyOwner {\\n        require(_token != address(0), \\\"ASPD:1\\\");\\n        require(stakersTokenDataMap[_token] != 1, \\\"ASPD:2\\\");\\n        stakersTokenDataMap[_token] = 1;\\n        stakersTokenData.push(_token);\\n    }\\n\\n    function removeStakersPoolDataByIndex(uint256 _index) external onlyOwner {\\n        require(stakersTokenData.length > _index, \\\"RSPDBI:1\\\");\\n        address token = stakersTokenData[_index];\\n        delete stakersTokenDataMap[token];\\n        if (_index != stakersTokenData.length - 1) {\\n            stakersTokenData[_index] = stakersTokenData[stakersTokenData.length - 1];\\n        }\\n        stakersTokenData.pop();\\n    }\\n\\n    function _getTokenToBase(address _tokenFrom, uint256 _amount) private view returns (uint256) {\\n        if (_tokenFrom == baseToken || _amount == 0) {\\n            return _amount;\\n        }\\n        return IExchangeRate(exchangeRate).getTokenToTokenAmount(_tokenFrom, baseToken, _amount);\\n    }\\n\\n    function getStakingPercentageX10000() external view override returns (uint256) {\\n        uint256 nst = _getCapInBaseToken();\\n        return nst.mul(10**4).div(mt);\\n    }\\n\\n    function getTVLinBaseToken() external view override returns (uint256) {\\n        return _getCapInBaseToken();\\n    }\\n\\n    function _getCapInBaseToken() private view returns (uint256) {\\n        uint256 retVinBase = 0;\\n\\n        uint256 poolLength = stakersTokenData.length;\\n        for (uint256 poolLengthIndex = 0; poolLengthIndex < poolLength; poolLengthIndex++) {\\n            address token = stakersTokenData[poolLengthIndex];\\n            retVinBase = retVinBase.add(_getTokenToBase(token, IStakersPoolV2(stakersPoolV2).getStakedAmountPT(token)));\\n        }\\n\\n        return retVinBase;\\n    }\\n\\n    function _getDeltaCoverAmtInBaseToken() private view returns (uint256) {\\n        uint256 retVinBase = 0;\\n        for (uint256 tokenIndex = 0; tokenIndex < productCoverTokens.length; tokenIndex++) {\\n            address token = productCoverTokens[tokenIndex];\\n            uint256 temp = _getTokenToBase(token, deltaCoverAmt[token]);\\n            retVinBase = retVinBase.add(temp);\\n        }\\n        return retVinBase;\\n    }\\n\\n    function getCapacityInfo() external view override returns (uint256, uint256) {\\n        return _getFreeCapacity();\\n    }\\n\\n    function getProductCapacityInfo(uint256[] memory _products) external view returns (uint256, uint256[] memory) {\\n        (uint256 freeCapacity, uint256 totalCapacity) = _getFreeCapacity();\\n        uint256 maxCapacityOfOneProduct = Math.min(totalCapacity.mul(coverAmtPPMaxRatio).div(COVERAMT_PPMAX_RATIOBASE), freeCapacity);\\n\\n        uint256[] memory usedCapacityOfProducts = new uint256[](_products.length);\\n        for (uint256 index = 0; index < _products.length; ++index) {\\n            usedCapacityOfProducts[index] = _getCoverAmtPPInBaseToken(_products[index]);\\n        }\\n\\n        return (maxCapacityOfOneProduct, usedCapacityOfProducts);\\n    }\\n\\n    function _getFreeCapacity() private view returns (uint256, uint256) {\\n        // capital\\n        uint256 capitalInBaseToken = _getCapInBaseToken();\\n        // - scr\\n        uint256 srcInBT = _getTokenToBase(scrToken, scr);\\n        uint256 deltaCoverAmtT = _getDeltaCoverAmtInBaseToken();\\n        if (capitalInBaseToken <= srcInBT.add(deltaCoverAmtT)) {\\n            return (0, srcInBT.add(deltaCoverAmtT));\\n        }\\n        uint256 capInBaseTokenAftSCR = capitalInBaseToken.sub(srcInBT);\\n        uint256 baseTokenFreeCapacityAftSCR = capInBaseTokenAftSCR.mul(cap2CapacityRatio).div(CAP2CAPACITY_RATIOBASE);\\n        return (baseTokenFreeCapacityAftSCR.sub(deltaCoverAmtT), baseTokenFreeCapacityAftSCR.add(srcInBT));\\n    }\\n\\n    function getBaseToken() external view override returns (address) {\\n        return baseToken;\\n    }\\n\\n    function getCoverAmtPPMaxRatio() external view override returns (uint256) {\\n        return coverAmtPPMaxRatio;\\n    }\\n\\n    function getCoverAmtPPInBaseToken(uint256 _productId) external view override returns (uint256) {\\n        return _getCoverAmtPPInBaseToken(_productId);\\n    }\\n\\n    function _getCoverAmtPPInBaseToken(uint256 _productId) private view returns (uint256) {\\n        uint256 retVinBase = 0;\\n        for (uint256 tokenIndex = 0; tokenIndex < productCoverTokens.length; tokenIndex++) {\\n            address token = productCoverTokens[tokenIndex];\\n            uint256 temp = _getTokenToBase(token, coverAmtPPPT[_productId][token]);\\n            retVinBase = retVinBase.add(temp);\\n        }\\n        return retVinBase;\\n    }\\n\\n    function canBuyCoverPerProduct(\\n        uint256 _productId,\\n        uint256 _amount,\\n        address _token\\n    ) external view override returns (bool) {\\n        uint256 coverAmtPPinBaseToken = _getCoverAmtPPInBaseToken(_productId);\\n\\n        uint256 buyCurrencyAmtinBaseToken = _getTokenToBase(_token, _amount);\\n\\n        (uint256 btFreeCapacity, uint256 btTotalCapacity) = _getFreeCapacity();\\n        if (buyCurrencyAmtinBaseToken.add(coverAmtPPinBaseToken) > btTotalCapacity.mul(coverAmtPPMaxRatio).div(COVERAMT_PPMAX_RATIOBASE)) {\\n            return false;\\n        }\\n        if (buyCurrencyAmtinBaseToken > btFreeCapacity) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    function canBuyCover(uint256 _amount, address _token) external view override returns (bool) {\\n        uint256 buyCurrencyAmtinBaseToken = _getTokenToBase(_token, _amount);\\n        (uint256 btFreeCapacity, ) = _getFreeCapacity();\\n\\n        if (buyCurrencyAmtinBaseToken > btFreeCapacity) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    function buyCoverPerProduct(\\n        uint256 _productId,\\n        uint256 _amount,\\n        address _token\\n    ) external override allowedCaller {\\n        if (productListMap[_productId] == 0) {\\n            productList.push(_productId);\\n            productListMap[_productId] = 1;\\n        }\\n        if (productCoverTokensMap[_token] == 0) {\\n            productCoverTokens.push(_token);\\n            productCoverTokensMap[_token] = 1;\\n        }\\n        coverAmtPPPT[_productId][_token] = coverAmtPPPT[_productId][_token].add(_amount);\\n        deltaCoverAmt[_token] = deltaCoverAmt[_token].add(_amount);\\n    }\\n\\n    function _getExactToken2PaymentToken(\\n        address _tokenFrom,\\n        address _tokenTo,\\n        uint256 _amount\\n    ) private view returns (uint256) {\\n        if (_amount == 0) {\\n            return 0;\\n        }\\n        if (_tokenFrom == _tokenTo) {\\n            return _amount;\\n        }\\n        uint256 ret = IExchangeRate(exchangeRate).getTokenToTokenAmount(_tokenFrom, _tokenTo, _amount);\\n        require(ret != 0, \\\"_GET2PT:1\\\");\\n        return ret;\\n    }\\n\\n    function _settleExactPayoutFromStakers(\\n        address _paymentToken,\\n        uint256 _settleAmt,\\n        address _claimTo,\\n        uint256 _claimId\\n    ) private {\\n        uint256 settleAmount = _settleAmt;\\n        uint256 amountInPaymentToken = 0;\\n        uint256[] memory tempPaymentTokenPerPool = new uint256[](stakersTokenData.length);\\n        uint256 poolLength = stakersTokenData.length;\\n\\n        for (uint256 poolLengthIndex = 0; poolLengthIndex < poolLength; poolLengthIndex++) {\\n            address token = stakersTokenData[poolLengthIndex];\\n            uint256 temp = _getExactToken2PaymentToken(token, _paymentToken, IStakersPoolV2(stakersPoolV2).getStakedAmountPT(token));\\n            tempPaymentTokenPerPool[poolLengthIndex] = temp;\\n            amountInPaymentToken = amountInPaymentToken.add(temp);\\n        }\\n\\n        // weight calc\\n        uint256[] memory settlePaymentPerPool = new uint256[](stakersTokenData.length);\\n        for (uint256 poolLengthIndex = 0; poolLengthIndex < poolLength; poolLengthIndex++) {\\n            if (poolLengthIndex == poolLength.sub(1)) {\\n                settlePaymentPerPool[poolLengthIndex] = settleAmount;\\n                break;\\n            }\\n            uint256 tempSettlePerPool = _settleAmt.mul(tempPaymentTokenPerPool[poolLengthIndex]).mul(10**10);\\n            tempSettlePerPool = tempSettlePerPool.div(amountInPaymentToken).div(10**10);\\n            settlePaymentPerPool[poolLengthIndex] = tempSettlePerPool;\\n            require(settleAmount >= tempSettlePerPool, \\\"_SEPFS:1\\\");\\n            settleAmount = settleAmount.sub(tempSettlePerPool);\\n        }\\n\\n        // calc back to in amount and currency\\n        for (uint256 poolLengthIndex = 0; poolLengthIndex < poolLength; poolLengthIndex++) {\\n            address token = stakersTokenData[poolLengthIndex];\\n            if (settlePaymentPerPool[poolLengthIndex] == 0) {\\n                continue;\\n            }\\n            uint256 fromRate = IStakersPoolV2(stakersPoolV2).getStakedAmountPT(token);\\n            uint256 toRate = tempPaymentTokenPerPool[poolLengthIndex];\\n            if (toRate == 0) {\\n                continue;\\n            }\\n            IStakersPoolV2(stakersPoolV2).claimPayout(token, _paymentToken, settlePaymentPerPool[poolLengthIndex], _claimTo, _claimId, fromRate, toRate);\\n        }\\n    }\\n\\n    function settlePaymentForClaim(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _claimId\\n    ) external override allowedCaller {\\n        require(_amount > 0, \\\"PPFC:1\\\");\\n\\n        uint256 premiumPayoutRatioAmt = IPremiumPool(premiumPoolAddress).getPremiumPoolAmtInPaymentToken(_token);\\n\\n        premiumPayoutRatioAmt = premiumPayoutRatioAmt.mul(premiumPayoutRatioX10000).div(10**4);\\n\\n        uint256 paymentToSettle = _amount;\\n        if (premiumPayoutRatioAmt != 0) {\\n            uint256 settleAmt = Math.min(premiumPayoutRatioAmt, _amount);\\n\\n            uint256 remainAmt = IPremiumPool(premiumPoolAddress).settlePayoutFromPremium(_token, settleAmt, claimToSettlementPool);\\n            require(settleAmt >= remainAmt, \\\"PPFC:2\\\");\\n            require(paymentToSettle >= settleAmt.sub(remainAmt), \\\"PPFC:3\\\");\\n            paymentToSettle = paymentToSettle.sub(settleAmt.sub(remainAmt));\\n        }\\n        if (paymentToSettle == 0) {\\n            return;\\n        }\\n        // settle from stakers pools\\n\\n        _settleExactPayoutFromStakers(_token, paymentToSettle, claimToSettlementPool, _claimId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/pool/ICapitalPool.sol\": {\r\n      \"content\": \"/*\\n    Copyright (C) 2020 InsurAce.io\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see http://www.gnu.org/licenses/\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.7.3;\\n\\ninterface ICapitalPool {\\n    function canBuyCoverPerProduct(\\n        uint256 _productId,\\n        uint256 _amount,\\n        address _token\\n    ) external view returns (bool);\\n\\n    function canBuyCover(uint256 _amount, address _token) external view returns (bool);\\n\\n    function buyCoverPerProduct(\\n        uint256 _productId,\\n        uint256 _amount,\\n        address _token\\n    ) external;\\n\\n    function hasTokenInStakersPool(address _token) external view returns (bool);\\n\\n    function getCapacityInfo() external view returns (uint256, uint256);\\n\\n    function getBaseToken() external view returns (address);\\n\\n    function getCoverAmtPPMaxRatio() external view returns (uint256);\\n\\n    function getCoverAmtPPInBaseToken(uint256 _productId) external view returns (uint256);\\n\\n    function settlePaymentForClaim(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _claimId\\n    ) external;\\n\\n    function getStakingPercentageX10000() external view returns (uint256);\\n\\n    function getTVLinBaseToken() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/pool/IPremiumPool.sol\": {\r\n      \"content\": \"/*\\n    Copyright (C) 2020 InsurAce.io\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see http://www.gnu.org/licenses/\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.7.3;\\n\\ninterface IPremiumPool {\\n    function addPremiumAmount(address _token, uint256 _amount) external payable;\\n\\n    function getPremiumPoolAmtInPaymentToken(address _paymentToken) external view returns (uint256);\\n\\n    function settlePayoutFromPremium(\\n        address _paymentToken,\\n        uint256 _settleAmt,\\n        address _claimToSettlementPool\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/pool/IStakersPoolV2.sol\": {\r\n      \"content\": \"/*\\n    Copyright (C) 2020 InsurAce.io\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see http://www.gnu.org/licenses/\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.7.3;\\n\\ninterface IStakersPoolV2 {\\n    function addStkAmount(address _token, uint256 _amount) external payable;\\n\\n    function withdrawTokens(\\n        address payable _to,\\n        uint256 _amount,\\n        address _token,\\n        address _feePool,\\n        uint256 _fee\\n    ) external;\\n\\n    function reCalcPoolPT(address _lpToken) external;\\n\\n    function settlePendingRewards(address _account, address _lpToken) external;\\n\\n    function harvestRewards(\\n        address _account,\\n        address _lpToken,\\n        address _to\\n    ) external returns (uint256);\\n\\n    function getPoolRewardPerLPToken(address _lpToken) external view returns (uint256);\\n\\n    function getStakedAmountPT(address _token) external view returns (uint256);\\n\\n    function showPendingRewards(address _account, address _lpToken) external view returns (uint256);\\n\\n    function showHarvestRewards(address _account, address _lpToken) external view returns (uint256);\\n\\n    function claimPayout(\\n        address _fromToken,\\n        address _paymentToken,\\n        uint256 _settleAmtPT,\\n        address _claimToSettlementPool,\\n        uint256 _claimId,\\n        uint256 _fromRate,\\n        uint256 _toRate\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/secmatrix/SecurityMatrix.sol\": {\r\n      \"content\": \"/*\\n    Copyright (C) 2020 InsurAce.io\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see http://www.gnu.org/licenses/\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.7.3;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport {ISecurityMatrix} from \\\"./ISecurityMatrix.sol\\\";\\n\\ncontract SecurityMatrix is ISecurityMatrix, OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function initializeSecurityMatrix() public initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n    }\\n\\n    // callee -> caller\\n    mapping(address => mapping(address => uint256)) public allowedCallersMap;\\n    mapping(address => address[]) public allowedCallersArray;\\n    address[] public allowedCallees;\\n\\n    function pauseAll() external onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    function unPauseAll() external onlyOwner whenPaused {\\n        _unpause();\\n    }\\n\\n    function addAllowdCallersPerCallee(address _callee, address[] memory _callers) external onlyOwner {\\n        require(_callers.length != 0, \\\"AACPC:1\\\");\\n        require(allowedCallersArray[_callee].length != 0, \\\"AACPC:2\\\");\\n\\n        for (uint256 index = 0; index < _callers.length; index++) {\\n            allowedCallersArray[_callee].push(_callers[index]);\\n            allowedCallersMap[_callee][_callers[index]] = 1;\\n        }\\n    }\\n\\n    function setAllowdCallersPerCallee(address _callee, address[] memory _callers) external onlyOwner {\\n        require(_callers.length != 0, \\\"SACPC:1\\\");\\n        // check if callee exist\\n        if (allowedCallersArray[_callee].length == 0) {\\n            // not exist, so add callee\\n            allowedCallees.push(_callee);\\n        } else {\\n            // if callee exist, then purge data\\n            for (uint256 i = 0; i < allowedCallersArray[_callee].length; i++) {\\n                delete allowedCallersMap[_callee][allowedCallersArray[_callee][i]];\\n            }\\n            delete allowedCallersArray[_callee];\\n        }\\n        // and overwrite\\n        for (uint256 index = 0; index < _callers.length; index++) {\\n            allowedCallersArray[_callee].push(_callers[index]);\\n            allowedCallersMap[_callee][_callers[index]] = 1;\\n        }\\n    }\\n\\n    function isAllowdCaller(address _callee, address _caller) external view override whenNotPaused returns (bool) {\\n        return allowedCallersMap[_callee][_caller] == 1 ? true : false;\\n    }\\n\\n    function getAllowedCallees() external view returns (address[] memory) {\\n        return allowedCallees;\\n    }\\n\\n    function getAllowedCallersPerCallee(address _callee) external view returns (address[] memory) {\\n        return allowedCallersArray[_callee];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/Constant.sol\": {\r\n      \"content\": \"/*\\n    Copyright (C) 2020 InsurAce.io\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see http://www.gnu.org/licenses/\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.7.3;\\n\\nlibrary Constant {\\n    // the standard 10**18 Amount Multiplier\\n    uint256 public constant MULTIPLIERX10E18 = 10**18;\\n\\n    // the valid ETH and DAI addresses (Rinkeby, TBD: Mainnet)\\n    address public constant BCNATIVETOKENADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    // product status enumerations\\n    uint256 public constant PRODUCTSTATUS_ENABLED = 1;\\n    uint256 public constant PRODUCTSTATUS_DISABLED = 2;\\n\\n    // the cover status enumerations\\n    uint256 public constant COVERSTATUS_ACTIVE = 0;\\n    uint256 public constant COVERSTATUS_EXPIRED = 1;\\n    uint256 public constant COVERSTATUS_CLAIMINPROGRESS = 2;\\n    uint256 public constant COVERSTATUS_CLAIMDONE = 3;\\n    uint256 public constant COVERSTATUS_CANCELLED = 4;\\n\\n    // the claim status enumerations\\n    uint256 public constant CLAIMSTATUS_SUBMITTED = 0;\\n    uint256 public constant CLAIMSTATUS_INVESTIGATING = 1;\\n    uint256 public constant CLAIMSTATUS_PREPAREFORVOTING = 2;\\n    uint256 public constant CLAIMSTATUS_VOTING = 3;\\n    uint256 public constant CLAIMSTATUS_VOTINGCOMPLETED = 4;\\n    uint256 public constant CLAIMSTATUS_ABDISCRETION = 5;\\n    uint256 public constant CLAIMSTATUS_COMPLAINING = 6;\\n    uint256 public constant CLAIMSTATUS_COMPLAININGCOMPLETED = 7;\\n    uint256 public constant CLAIMSTATUS_ACCEPTED = 8;\\n    uint256 public constant CLAIMSTATUS_REJECTED = 9;\\n    uint256 public constant CLAIMSTATUS_PAYOUTREADY = 10;\\n    uint256 public constant CLAIMSTATUS_PAID = 11;\\n\\n    // the voting outcome status enumerations\\n    uint256 public constant OUTCOMESTATUS_NONE = 0;\\n    uint256 public constant OUTCOMESTATUS_ACCEPTED = 1;\\n    uint256 public constant OUTCOMESTATUS_REJECTED = 2;\\n\\n    // the referral reward type\\n    uint256 public constant REFERRALREWARD_NONE = 0;\\n    uint256 public constant REFERRALREWARD_COVER = 1;\\n    uint256 public constant REFERRALREWARD_STAKING = 2;\\n}\\n\"\r\n    },\r\n    \"contracts/common/Math.sol\": {\r\n      \"content\": \"/*\\n    Copyright (C) 2020 InsurAce.io\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see http://www.gnu.org/licenses/\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.7.3;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\n\\n// a library for performing various math operations\\nlibrary Math {\\n    using SafeMathUpgradeable for uint256;\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x < y ? y : x;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y.div(2).add(1);\\n            while (x < z) {\\n                z = x;\\n                x = (y.div(x).add(x)).div(2);\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // power private function\\n    function pow(uint256 _base, uint256 _exponent) internal pure returns (uint256) {\\n        if (_exponent == 0) {\\n            return 1;\\n        } else if (_exponent == 1) {\\n            return _base;\\n        } else if (_base == 0 && _exponent != 0) {\\n            return 0;\\n        } else {\\n            uint256 z = _base;\\n            for (uint256 i = 1; i < _exponent; i++) {\\n                z = z.mul(_base);\\n            }\\n            return z;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/exchange/IExchangeRate.sol\": {\r\n      \"content\": \"/*\\n    Copyright (C) 2020 InsurAce.io\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see http://www.gnu.org/licenses/\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.7.3;\\n\\ninterface IExchangeRate {\\n    function getBaseCurrency() external view returns (address);\\n\\n    function setBaseCurrency(address _currency) external;\\n\\n    function getAllCurrencyArray() external view returns (address[] memory);\\n\\n    function addCurrencies(\\n        address[] memory _currencies,\\n        uint128[] memory _multipliers,\\n        uint128[] memory _rates\\n    ) external;\\n\\n    function removeCurrency(address _currency) external;\\n\\n    function getAllCurrencyRates() external view returns (uint256[] memory);\\n\\n    function updateAllCurrencies(uint128[] memory _rates) external;\\n\\n    function updateCurrency(address _currency, uint128 _rate) external;\\n\\n    function getTokenToTokenAmount(\\n        address _fromToken,\\n        address _toToken,\\n        uint256 _amount\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/secmatrix/ISecurityMatrix.sol\": {\r\n      \"content\": \"/*\\n    Copyright (C) 2020 InsurAce.io\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see http://www.gnu.org/licenses/\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.7.3;\\n\\ninterface ISecurityMatrix {\\n    function isAllowdCaller(address _callee, address _caller) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_cap2CapacityRatio\",\"type\":\"uint256\"}],\"name\":\"UpdateCap2CapacityRatioEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_updateTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"UpdateExpiredCoverAmountEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_mtToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_mtAmount\",\"type\":\"uint256\"}],\"name\":\"UpdateMTEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_scrToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_scrAmount\",\"type\":\"uint256\"}],\"name\":\"UpdateSCREvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CAP2CAPACITY_RATIOBASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COVERAMT_PPMAX_RATIOBASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addStakersPoolData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"buyCoverPerProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"canBuyCover\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"canBuyCoverPerProduct\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap2CapacityRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimToSettlementPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coverAmtPPMaxRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"coverAmtPPPT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deltaCoverAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCapacityInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"}],\"name\":\"getCoverAmtPPInBaseToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCoverAmtPPMaxRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_products\",\"type\":\"uint256[]\"}],\"name\":\"getProductCapacityInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingPercentageX10000\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTVLinBaseToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"hasTokenInStakersPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeCapitalPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumPayoutRatioX10000\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"productCoverTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"productCoverTokensMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"productList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"productListMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removeStakersPoolDataByIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scrToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"securityMatrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coverAmtPPMaxRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_premiumPayoutRatioX10000\",\"type\":\"uint256\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimId\",\"type\":\"uint256\"}],\"name\":\"settlePaymentForClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_securityMatrix\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_premiumPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_claimToSettlementPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakersPoolV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeRate\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakersPoolV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakersTokenData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakersTokenDataMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenExpCvAmtUpdTimestampMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cap2CapacityRatio\",\"type\":\"uint256\"}],\"name\":\"updateCap2CapacityRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_updateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_products\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"updateExpiredCoverAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mtAmount\",\"type\":\"uint256\"}],\"name\":\"updateMT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_scrToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_scrAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_offsetAmounts\",\"type\":\"uint256[]\"}],\"name\":\"updateSCR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CapitalPool","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}