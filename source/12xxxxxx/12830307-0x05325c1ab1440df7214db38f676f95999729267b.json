{"status":"1","message":"OK","result":[{"SourceCode":"{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"PropertyRegistry.sol\":{\"content\":\"/*\\n* SPDX-License-Identifier: UNLICENSED\\n* Copyright Â© 2021 Blocksquare d.o.o.\\n*/\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\ninterface PropertyRegistryHelpers {\\n    function hasSystemAdminRights(address sender) external view returns (bool);\\n\\n    function getCPOfProperty(address prop) external view returns (address);\\n\\n    function getSpecialWallet() external view returns (address);\\n\\n    function changeTokenNameAndSymbol(string memory name, string memory symbol) external;\\n\\n    function isCPAdminOfProperty(address user, address property) external view returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function canEditProperty(address wallet, address property) external view returns (bool);\\n}\\n\\n/// @title Property Registry\\ncontract PropertyRegistry is Ownable {\\n    using SafeMath for uint256;\\n    struct Property {\\n        string kadastralMunicipality;\\n        string parcelNumber;\\n        string ID;\\n        uint64 buildingPart;\\n        string propertyType;\\n    }\\n\\n    struct BasicInfo {\\n        string propertyValuationCurrency;\\n        string streetLocation;\\n        string geoLocation;\\n        uint256 propertyValuation;\\n        uint256 tokenValuation;\\n    }\\n\\n    uint256 private constant BSPT_CAP = 100000 * (10 ** 10);\\n\\n    address private _dataProxy;\\n    address private _exchange;\\n\\n    mapping(address =\\u003e string) private _IPFSs;\\n    mapping(address =\\u003e mapping(uint64 =\\u003e Property)) private _properties;\\n    mapping(address =\\u003e uint64) private _numberOfProperties;\\n    mapping(address =\\u003e BasicInfo) private _basicInfos;\\n\\n    event PropertyBasicInfoChanged(address indexed property, string streetLocation, string geoLocation, string propertyValuationCurrency, uint256 propertyValuation);\\n    event PropertyInfoAdded(address indexed property, string propertyType, string kadastralMunicipality, string parcelNumber, string ID, uint64 buildingPart);\\n    event PropertyInfoChanged(address indexed property, uint64 idProp, string propertyType, string kadastralMunicipality, string parcelNumber, string ID, uint64 buildingPart);\\n    event IPFSHashChanged(address indexed property, string newIPFSHash);\\n    event NameAndSymbolChange(address indexed property, string newName, string newSymbol);\\n    event PropertyValuationChange(address indexed property, uint256 newValuationProperty);\\n    event TokenValuationChange(address indexed property, uint256 newTokenValuation);\\n\\n    modifier onlyBlocksquareOrSpecialWallet {\\n        require(PropertyRegistryHelpers(_dataProxy).hasSystemAdminRights(msg.sender) || PropertyRegistryHelpers(_dataProxy).getSpecialWallet() == _msgSender(), \\\"PropertiesFactory: You need to have system admin rights or special wallet!\\\");\\n        _;\\n    }\\n\\n    modifier onlyPropertyManager(address property) {\\n        require(PropertyRegistryHelpers(_dataProxy).canEditProperty(_msgSender(), property) || PropertyRegistryHelpers(_dataProxy).getSpecialWallet() == _msgSender(), \\\"PropertiesFactory: You need to have permission to edit this property!\\\");\\n        _;\\n    }\\n\\n    constructor(address dataProxy) public {\\n        _dataProxy = dataProxy;\\n    }\\n\\n    function setDataProxy(address dataProxy) public onlyOwner {\\n        _dataProxy = dataProxy;\\n    }\\n\\n    function setExchange(address exchange) public onlyOwner {\\n        _exchange = exchange;\\n    }\\n\\n    function _editProperty(address property, uint64 id, string memory propertyType, string memory kadastralMunicipality, string memory parcelNumber, string memory ID, uint64 buildingPart) private {\\n        Property memory prop = Property(kadastralMunicipality, parcelNumber, ID, buildingPart, propertyType);\\n        _properties[property][id] = prop;\\n    }\\n\\n    // @notice changes the token name and symbol of property token\\n    // @param property Contract address of property\\n    // @param name New name for token\\n    // @param symbol New symbol for token\\n    function changeTokenNameAndSymbol(address property, string memory name, string memory symbol) public onlyBlocksquareOrSpecialWallet {\\n        PropertyRegistryHelpers(property).changeTokenNameAndSymbol(name, symbol);\\n        emit NameAndSymbolChange(property, name, symbol);\\n    }\\n\\n    /// @notice set IPFS hash to corporate resolution for property\\n    /// @param property Contract address of property\\n    /// @param newIPFSHash IPFS hash of corporate resolution\\n    function setIPFS(address property, string memory newIPFSHash) public onlyBlocksquareOrSpecialWallet {\\n        _IPFSs[property] = newIPFSHash;\\n        emit IPFSHashChanged(property, newIPFSHash);\\n    }\\n\\n    /// @notice sets basic information about property\\n    /// @param property Contract address of property\\n    /// @param streetLocation Location where property is located\\n    /// @param geoLocation Longitude and Latitude of property location (inputed like ##.########,##.#######)\\n    /// @param propertyValuationCurrency Currency for evaluating property (DAI for example)\\n    /// @param propertyValuation Valuation of property in propertyValuationCurrency\\n    /// @param tokenValuation Valuation of property token in propertyValuationCurrency (price by which the tokens were sold)\\n    function editBasicInfo(address property, string memory streetLocation, string memory geoLocation, string memory propertyValuationCurrency, uint256 propertyValuation, uint256 tokenValuation) public onlyBlocksquareOrSpecialWallet {\\n        BasicInfo memory basicInfo = BasicInfo(propertyValuationCurrency, streetLocation, geoLocation, propertyValuation, tokenValuation);\\n        _basicInfos[property] = basicInfo;\\n        emit PropertyBasicInfoChanged(property, streetLocation, geoLocation, propertyValuationCurrency, propertyValuation);\\n    }\\n\\n    /// @notice changes the valuation of property\\n    /// @param property Contract address of property\\n    /// @param propertyValuation New valuation of property\\n    function changePropertyValuation(address property, uint256 propertyValuation) public {\\n        require(PropertyRegistryHelpers(_dataProxy).canEditProperty(_msgSender(), property) || _msgSender() == PropertyRegistryHelpers(_dataProxy).getSpecialWallet(), \\\"PropertyRegistry: You don\\u0027t have permission\\\");\\n        _basicInfos[property].propertyValuation = propertyValuation;\\n        emit PropertyValuationChange(property, propertyValuation);\\n    }\\n\\n    /// @notice changes the valuation of property token\\n    /// @param property Contract address of property\\n    /// @param tokenValuation New valuation of property token\\n    function changeTokenValuation(address property, uint256 tokenValuation) public {\\n        require(PropertyRegistryHelpers(_dataProxy).hasSystemAdminRights(msg.sender) || _msgSender() == PropertyRegistryHelpers(_dataProxy).getSpecialWallet() || msg.sender == _exchange, \\\"PropertyRegistry: You don\\u0027t have permission\\\");\\n        _basicInfos[property].tokenValuation = tokenValuation;\\n        emit TokenValuationChange(property, tokenValuation);\\n    }\\n\\n    /// @notice adds additional information about property\\n    /// @param property Contract address of property\\n    /// @param propertyType Type of the property (Office, Leisure, ...)\\n    /// @param kadastralMunicipality Cadastral municipality (Cadastral community)\\n    /// @param parcelNumber Parcel number\\n    /// @param ID Additional ID\\n    /// @param buildingPart Part of building\\n    function addPropertyInfo(address property, string memory propertyType, string memory kadastralMunicipality, string memory parcelNumber, string memory ID, uint64 buildingPart) public onlyPropertyManager(property) {\\n        _editProperty(property, _numberOfProperties[property], propertyType, kadastralMunicipality, parcelNumber, ID, buildingPart);\\n        _numberOfProperties[property] = _numberOfProperties[property] + 1;\\n        emit PropertyInfoAdded(property, propertyType, kadastralMunicipality, parcelNumber, ID, buildingPart);\\n    }\\n\\n    /// @notice edits additional information about property\\n    /// @param property Contract address of property\\n    /// @param idProp Consecutive number of additional information\\n    /// @param propertyType Type of the property (Office, Leisure, ...)\\n    /// @param kadastralMunicipality Cadastral municipality (Cadastral community)\\n    /// @param parcelNumber Parcel number\\n    /// @param ID Additional ID\\n    /// @param buildingPart Part of building\\n    function editPropertyInfo(address property, uint64 idProp, string memory propertyType, string memory kadastralMunicipality, string memory parcelNumber, string memory ID, uint64 buildingPart) public onlyPropertyManager(property) {\\n        _editProperty(property, idProp, propertyType, kadastralMunicipality, parcelNumber, ID, buildingPart);\\n        emit PropertyInfoChanged(property, idProp, propertyType, kadastralMunicipality, parcelNumber, ID, buildingPart);\\n    }\\n\\n    /// @notice retrieves all the basic information about property\\n    /// @param property Contract address of property\\n    function getBasicInfo(address property) public view returns (string memory streetLocation, string memory geoLocation, uint256 propertyValuation, uint256 tokenValuation, string memory propertyValuationCurrency) {\\n        BasicInfo memory basicInfo = _basicInfos[property];\\n        return (\\n        basicInfo.streetLocation,\\n        basicInfo.geoLocation,\\n        basicInfo.propertyValuation,\\n        basicInfo.tokenValuation,\\n        basicInfo.propertyValuationCurrency\\n        );\\n    }\\n\\n    /// @notice retrieves additional information about property\\n    /// @param property Contract address of property\\n    /// @param index Consecutive number of additional information\\n    function getPropertyInfo(address property, uint64 index) public view returns (string memory propertyType, string memory kadastralMunicipality, string memory parcelNumber, string memory ID, uint64 buildingPart) {\\n        Property memory properties = _properties[property][index];\\n        return (\\n        properties.propertyType,\\n        properties.kadastralMunicipality,\\n        properties.parcelNumber,\\n        properties.ID,\\n        properties.buildingPart);\\n    }\\n\\n    /// @notice retrieves combined valuation of property\\n    /// @param property Contract address of property\\n    /// @return combined property and property token valuation of property\\n    function getValuation(address property) public view returns (uint256) {\\n        (string memory streetLocation, string memory geoLocation, uint256 propertyValuation, uint256 tokenValuation, string memory propertyValuationCurrency) = getBasicInfo(property);\\n        uint256 totalSupply = PropertyRegistryHelpers(property).totalSupply().div(10 ** 8);\\n        uint256 tValuation = tokenValuation.mul(totalSupply);\\n        uint256 pValuation = propertyValuation.mul(BSPT_CAP.sub(totalSupply));\\n\\n        return tValuation.add(pValuation).div(BSPT_CAP);\\n    }\\n\\n    /// @notice retrieves IPFS hash of corporate resolution\\n    /// @param property Contract address of property\\n    /// @return IPFS hash of corporate resolution\\n    function getIPFS(address property) public view returns (string memory) {\\n        return _IPFSs[property];\\n    }\\n\\n    /// @notice retrieves number of additional information on property\\n    /// @param property Contract address of property\\n    /// @return number of additional information on property\\n    function getNumberOfPropertiesOnPropToken(address property) public view returns (uint64) {\\n        return _numberOfProperties[property];\\n    }\\n\\n    /// @notice retrieves contract address of data proxy contract\\n    /// @return contract address of data proxy contract\\n    function getDataProxy() public view returns (address) {\\n        return _dataProxy;\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dataProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newIPFSHash\",\"type\":\"string\"}],\"name\":\"IPFSHashChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"NameAndSymbolChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"streetLocation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"geoLocation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"propertyValuationCurrency\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"propertyValuation\",\"type\":\"uint256\"}],\"name\":\"PropertyBasicInfoChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"propertyType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"kadastralMunicipality\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"parcelNumber\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"buildingPart\",\"type\":\"uint64\"}],\"name\":\"PropertyInfoAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"idProp\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"propertyType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"kadastralMunicipality\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"parcelNumber\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"buildingPart\",\"type\":\"uint64\"}],\"name\":\"PropertyInfoChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValuationProperty\",\"type\":\"uint256\"}],\"name\":\"PropertyValuationChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTokenValuation\",\"type\":\"uint256\"}],\"name\":\"TokenValuationChange\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"propertyType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"kadastralMunicipality\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"parcelNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ID\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"buildingPart\",\"type\":\"uint64\"}],\"name\":\"addPropertyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"propertyValuation\",\"type\":\"uint256\"}],\"name\":\"changePropertyValuation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"changeTokenNameAndSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenValuation\",\"type\":\"uint256\"}],\"name\":\"changeTokenValuation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"streetLocation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"geoLocation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"propertyValuationCurrency\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"propertyValuation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenValuation\",\"type\":\"uint256\"}],\"name\":\"editBasicInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"idProp\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"propertyType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"kadastralMunicipality\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"parcelNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ID\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"buildingPart\",\"type\":\"uint64\"}],\"name\":\"editPropertyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"}],\"name\":\"getBasicInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"streetLocation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"geoLocation\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"propertyValuation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenValuation\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"propertyValuationCurrency\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDataProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"}],\"name\":\"getIPFS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"}],\"name\":\"getNumberOfPropertiesOnPropToken\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"}],\"name\":\"getPropertyInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"propertyType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"kadastralMunicipality\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"parcelNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ID\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"buildingPart\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"}],\"name\":\"getValuation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dataProxy\",\"type\":\"address\"}],\"name\":\"setDataProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"}],\"name\":\"setExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newIPFSHash\",\"type\":\"string\"}],\"name\":\"setIPFS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PropertyRegistry","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006cea8fc21c965f23cd25ad44e9bd91687f76f2f5","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c985212878df83856acdcd9719bea7ae2b42c8ff9d10fcbc248d37967878bd2d"}]}