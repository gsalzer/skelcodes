{"status":"1","message":"OK","result":[{"SourceCode":"{\"ERC20.sol\":{\"content\":\"\\r\\npragma solidity ^0.4.24;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @title NGEL token\\r\\n *\\r\\n * @dev Implementation of the basic standard token.\\r\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\r\\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\r\\n */\\r\\ncontract NGEL is IERC20 {\\r\\n  using SafeMath for uint256;\\r\\n  mapping (address =\\u003e uint256) private _balances;\\r\\n  mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowed;\\r\\n  uint256 private _totalSupply;\\r\\n  string public _name;                   // fancy name: eg Ilia Chavchavadze\\r\\n  uint8 public _decimals;                // How many decimals to show.\\r\\n  string public _symbol;                 // An identifier: eg CHA\\r\\n  address public owner;\\r\\n\\r\\n\\r\\n function NGEL(\\r\\n     uint256 initialAmount,\\r\\n     string tokenName,\\r\\n     uint8 decimalUnits,\\r\\n     string tokenSymbol\\r\\n ) public {\\r\\n     _balances[msg.sender] = initialAmount;               // Give the creator all initial tokens\\r\\n     _totalSupply = initialAmount;                        // Update total supply\\r\\n     _name = tokenName;                                   // Set the name for display purposes\\r\\n     _decimals = decimalUnits;                            // Amount of decimals for display purposes\\r\\n     _symbol = tokenSymbol;                               // Set the symbol for display purposes\\r\\n     owner = msg.sender;\\r\\n }\\r\\n\\r\\n\\r\\n  /**\\r\\n  * @dev Total number of tokens in existence\\r\\n  */\\r\\n  function totalSupply() public view returns (uint256) {\\r\\n    return _totalSupply;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Gets the balance of the specified address.\\r\\n  * @param owner The address to query the the balance of.\\r\\n  * @return An uint256 representing the amount owned by the passed address.\\r\\n  */\\r\\n  function balanceOf(address owner) public view returns (uint256) {\\r\\n    return _balances[owner];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\r\\n   * @param owner address The address which owns the funds.\\r\\n   * @param spender address The address which will spend the funds.\\r\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\r\\n   */\\r\\n  function allowance(\\r\\n    address owner,\\r\\n    address spender\\r\\n   )\\r\\n    public\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return _allowed[owner][spender];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Transfer token for a specified address\\r\\n  * @param to The address to transfer to.\\r\\n  * @param value The amount to be transferred.\\r\\n  */\\r\\n  function transfer(address to, uint256 value) public returns (bool) {\\r\\n    require(value \\u003c= _balances[msg.sender]);\\r\\n    require(to != address(0));\\r\\n\\r\\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\\r\\n    _balances[to] = _balances[to].add(value);\\r\\n    emit Transfer(msg.sender, to, value);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\r\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\r\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\r\\n   * race condition is to first reduce the spender\\u0027s allowance to 0 and set the desired value afterwards:\\r\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n   * @param spender The address which will spend the funds.\\r\\n   * @param value The amount of tokens to be spent.\\r\\n   */\\r\\n  function approve(address spender, uint256 value) public returns (bool) {\\r\\n    require(spender != address(0));\\r\\n    _allowed[msg.sender][spender] = value;\\r\\n    emit Approval(msg.sender, spender, value);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfer tokens from one address to another\\r\\n   * @param from address The address which you want to send tokens from\\r\\n   * @param to address The address which you want to transfer to\\r\\n   * @param value uint256 the amount of tokens to be transferred\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  )\\r\\n    public\\r\\n    returns (bool)\\r\\n  {\\r\\n    require(value \\u003c= _balances[from]);\\r\\n    require(value \\u003c= _allowed[from][msg.sender]);\\r\\n    require(to != address(0));\\r\\n\\r\\n    _balances[from] = _balances[from].sub(value);\\r\\n    _balances[to] = _balances[to].add(value);\\r\\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\r\\n    emit Transfer(from, to, value);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  modifier onlyOwner() {\\r\\n    require(msg.sender == owner);\\r\\n    _;\\r\\n  }\\r\\n  /**\\r\\n   * @dev Internal function that mints an amount of the token and assigns it to\\r\\n   * an account. This encapsulates the modification of balances such that the\\r\\n   * proper events are emitted.\\r\\n   * @param account The account that will receive the created tokens.\\r\\n   * @param amount The amount that will be created.\\r\\n   */\\r\\n  function _mint(address account, uint256 amount) public onlyOwner {\\r\\n    require(account != 0);\\r\\n    _totalSupply = _totalSupply.add(amount);\\r\\n    _balances[account] = _balances[account].add(amount);\\r\\n    emit Transfer(address(0), account, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Internal function that burns an amount of the token of a given\\r\\n   * account.\\r\\n   * @param account The account whose tokens will be burnt.\\r\\n   * @param amount The amount that will be burnt.\\r\\n   */\\r\\n  function _burn(address account, uint256 amount) public onlyOwner{\\r\\n    require(account != 0);\\r\\n    require(amount \\u003c= _balances[account]);\\r\\n\\r\\n    _totalSupply = _totalSupply.sub(amount);\\r\\n    _balances[account] = _balances[account].sub(amount);\\r\\n    emit Transfer(account, address(0), amount);\\r\\n  }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title ERC20 interface\\r\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\r\\n */\\r\\ninterface IERC20 {\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  function balanceOf(address who) external view returns (uint256);\\r\\n\\r\\n  function allowance(address owner, address spender)\\r\\n    external view returns (uint256);\\r\\n\\r\\n  function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n  function approve(address spender, uint256 value)\\r\\n    external returns (bool);\\r\\n\\r\\n  function transferFrom(address from, address to, uint256 value)\\r\\n    external returns (bool);\\r\\n\\r\\n  event Transfer(\\r\\n    address indexed from,\\r\\n    address indexed to,\\r\\n    uint256 value\\r\\n  );\\r\\n\\r\\n  event Approval(\\r\\n    address indexed owner,\\r\\n    address indexed spender,\\r\\n    uint256 value\\r\\n  );\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title SafeMath\\r\\n * @dev Math operations with safety checks that revert on error\\r\\n */\\r\\nlibrary SafeMath {\\r\\n\\r\\n  /**\\r\\n  * @dev Multiplies two numbers, reverts on overflow.\\r\\n  */\\r\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n    // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    uint256 c = a * b;\\r\\n    require(c / a == b);\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\r\\n  */\\r\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b \\u003e 0); // Solidity only automatically asserts when dividing by 0\\r\\n    uint256 c = a / b;\\r\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\r\\n  */\\r\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b \\u003c= a);\\r\\n    uint256 c = a - b;\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Adds two numbers, reverts on overflow.\\r\\n  */\\r\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    uint256 c = a + b;\\r\\n    require(c \\u003e= a);\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\r\\n  * reverts when dividing by zero.\\r\\n  */\\r\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b != 0);\\r\\n    return a % b;\\r\\n  }\\r\\n}\"}}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"NGEL","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000074e65772047454c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046e47454c00000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://900b473c10a49d4309b55bc5194f8730b1a49507bf1633ea018d45bbd7572da1"}]}