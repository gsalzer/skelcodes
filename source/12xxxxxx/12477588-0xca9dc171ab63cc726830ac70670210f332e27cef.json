{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.3.0 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v3.4.0\r\n\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/proxy/Initializable.sol@v3.4.0\r\n\r\n\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity >=0.4.24 <0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        return !Address.isContract(address(this));\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.4.0\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/libraries/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IMaintainersRegistry.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\n/**\r\n * IMaintainersRegistry contract.\r\n * @author Nikola Madjarevic\r\n * Date created: 3.5.21.\r\n * Github: madjarevicn\r\n */\r\ninterface IMaintainersRegistry {\r\n    function isMaintainer(address _address) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/ChainportMiddleware.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\n/**\r\n * ChainportMiddleware contract.\r\n * @author Nikola Madjarevic\r\n * Date created: 4.5.21.\r\n * Github: madjarevicn\r\n */\r\ncontract ChainportMiddleware {\r\n\r\n    address public chainportCongress;\r\n    IMaintainersRegistry public maintainersRegistry;\r\n\r\n    // Only maintainer modifier\r\n    modifier onlyMaintainer {\r\n        require(maintainersRegistry.isMaintainer(msg.sender), \"ChainportUpgradables: Restricted only to Maintainer\");\r\n        _;\r\n    }\r\n\r\n    // Only chainport congress modifier\r\n    modifier onlyChainportCongress {\r\n        require(msg.sender == chainportCongress, \"ChainportUpgradables: Restricted only to ChainportCongress\");\r\n        _;\r\n    }\r\n\r\n    function setCongressAndMaintainers(\r\n        address _chainportCongress,\r\n        address _maintainersRegistry\r\n    )\r\n    internal\r\n    {\r\n        chainportCongress = _chainportCongress;\r\n        maintainersRegistry = IMaintainersRegistry(_maintainersRegistry);\r\n    }\r\n\r\n    function setMaintainersRegistry(\r\n        address _maintainersRegistry\r\n    )\r\n    public\r\n    onlyChainportCongress\r\n    {\r\n        maintainersRegistry = IMaintainersRegistry(_maintainersRegistry);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IValidator.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n/**\r\n * IValidator contract.\r\n * @author Nikola Madjarevic\r\n * Date created: 3.5.21.\r\n * Github: madjarevicn\r\n */\r\ninterface IValidator {\r\n    function verifyWithdraw(bytes memory signedMessage, address token, uint256 amount, address beneficiary, uint256 nonce) external view returns (bool);\r\n    function recoverSignature(bytes memory signedMessage, address beneficiary, address token, uint256 amount, uint256 nonce) external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/ChainportBridgeEth.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\n\r\ncontract ChainportBridgeEth is Initializable, ChainportMiddleware {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    IValidator public signatureValidator;\r\n\r\n    struct PendingWithdrawal {\r\n        uint256 amount;\r\n        address beneficiary;\r\n        uint256 unlockingTime;\r\n    }\r\n\r\n    // Mapping if bridge is Frozen\r\n    bool public isFrozen;\r\n    // Mapping function name to maintainer nonce\r\n    mapping(string => uint256) public functionNameToNonce;\r\n    // Mapping the pending withdrawal which frozen temporarily asset circulation\r\n    mapping(address => PendingWithdrawal) public tokenToPendingWithdrawal;\r\n    // Mapping per token to check if there's any pending withdrawal attempt\r\n    mapping(address => bool) public isTokenHavingPendingWithdrawal;\r\n    // Mapping for marking the assets\r\n    mapping(address => bool) public isAssetProtected;\r\n    // Check if signature is being used\r\n    mapping(bytes => bool) public isSignatureUsed;\r\n    // % of the tokens, must be whole number, no decimals pegging\r\n    uint256 public safetyThreshold;\r\n    // Length of the timeLock\r\n    uint256 public freezeLength;\r\n\r\n\r\n    // Events\r\n    event TokensUnfreezed(address tokenAddress, address issuer, uint256 amount);\r\n    event TokensFreezed(address tokenAddress, address issuer, uint256 amount);\r\n    event CreatedPendingWithdrawal(address token, address beneficiary, uint256 amount, uint256 unlockingTime);\r\n\r\n    event WithdrawalApproved(address token, address beneficiary, uint256 amount);\r\n    event WithdrawalRejected(address token, address beneficiary, uint256 amount);\r\n\r\n    event TimeLockLengthChanged(uint256 newTimeLockLength);\r\n    event AssetProtectionChanged(address asset, bool isProtected);\r\n    event SafetyThresholdChanged(uint256 newSafetyThreshold);\r\n\r\n    modifier isNotFrozen {\r\n        require(isFrozen == false, \"Error: All Bridge actions are currently frozen.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyIfAmountGreaterThanZero(uint256 amount) {\r\n        require(amount > 0, \"Amount is not greater than zero.\");\r\n        _;\r\n    }\r\n\r\n    // Initialization function\r\n    function initialize(\r\n        address _maintainersRegistryAddress,\r\n        address _chainportCongress,\r\n        address _signatureValidator,\r\n        uint256 _freezeLength,\r\n        uint256 _safetyThreshold\r\n    )\r\n    public\r\n    initializer\r\n    {\r\n        require(_safetyThreshold > 0 && _safetyThreshold < 100, \"Error: % is not valid.\");\r\n\r\n        setCongressAndMaintainers(_chainportCongress, _maintainersRegistryAddress);\r\n        signatureValidator = IValidator(_signatureValidator);\r\n        freezeLength = _freezeLength;\r\n        safetyThreshold = _safetyThreshold;\r\n    }\r\n\r\n    function freezeBridge()\r\n    public\r\n    onlyMaintainer\r\n    {\r\n        isFrozen = true;\r\n    }\r\n\r\n    function unfreezeBridge()\r\n    public\r\n    onlyChainportCongress\r\n    {\r\n        isFrozen = false;\r\n    }\r\n\r\n    // Function to mark specific asset as protected\r\n    function setAssetProtection(\r\n        address tokenAddress,\r\n        bool _isProtected\r\n    )\r\n    public\r\n    onlyChainportCongress\r\n    {\r\n        isAssetProtected[tokenAddress] = _isProtected;\r\n        emit AssetProtectionChanged(tokenAddress, _isProtected);\r\n    }\r\n\r\n    // Function to set timelock\r\n    function setTimeLockLength(\r\n        uint256 length\r\n    )\r\n    public\r\n    onlyChainportCongress\r\n    {\r\n        freezeLength = length;\r\n        emit TimeLockLengthChanged(length);\r\n    }\r\n\r\n\r\n    // Function to set minimal value that is considered important by quantity\r\n    function setThreshold(\r\n        uint256 _safetyThreshold\r\n    )\r\n    public\r\n    onlyChainportCongress\r\n    {\r\n        // This is representing % of every asset on the contract\r\n        // Example: 32% is safety threshold\r\n        safetyThreshold = _safetyThreshold;\r\n        emit SafetyThresholdChanged(_safetyThreshold);\r\n    }\r\n\r\n\r\n    function freezeToken(\r\n        address token,\r\n        uint256 amount\r\n    )\r\n    public\r\n    isNotFrozen\r\n    onlyIfAmountGreaterThanZero(amount)\r\n    {\r\n        IERC20 ercToken = IERC20(token);\r\n\r\n        bool result = ercToken.transferFrom(address(msg.sender), address(this), amount);\r\n        require(result, \"Transfer did not go through.\");\r\n\r\n        emit TokensFreezed(token, msg.sender, amount);\r\n    }\r\n\r\n    function releaseTokensByMaintainer(\r\n        bytes memory signature,\r\n        address token,\r\n        uint256 amount,\r\n        address beneficiary,\r\n        uint256 nonce\r\n    )\r\n    public\r\n    onlyMaintainer\r\n    isNotFrozen\r\n    onlyIfAmountGreaterThanZero(amount)\r\n    {\r\n        require(isTokenHavingPendingWithdrawal[token] == false, \"Token is currently having pending withdrawal.\");\r\n\r\n        require(isSignatureUsed[signature] == false, \"Already used signature.\");\r\n        isSignatureUsed[signature] = true;\r\n\r\n        require(nonce == functionNameToNonce[\"mintTokens\"] + 1);\r\n        functionNameToNonce[\"mintTokens\"] = nonce;\r\n\r\n        bool isMessageValid = signatureValidator.verifyWithdraw(signature, token, amount, beneficiary, nonce);\r\n        require(isMessageValid == true, \"Error: Signature is not valid.\");\r\n\r\n        bool result = IERC20(token).transfer(beneficiary, amount);\r\n        require(result, \"Transfer did not go through.\");\r\n\r\n        emit TokensUnfreezed(token, beneficiary, amount);\r\n    }\r\n\r\n    function releaseTokensTimelockPassed(\r\n        bytes memory signature,\r\n        address token,\r\n        uint256 amount,\r\n        uint256 nonce\r\n    )\r\n    public\r\n    isNotFrozen\r\n    onlyIfAmountGreaterThanZero(amount)\r\n    {\r\n        require(isSignatureUsed[signature] == false, \"Signature already used\");\r\n        isSignatureUsed[signature] = true;\r\n\r\n        // Check if freeze time has passed and same user is calling again\r\n        if(isTokenHavingPendingWithdrawal[token] == true) {\r\n            PendingWithdrawal memory p = tokenToPendingWithdrawal[token];\r\n            if(p.amount == amount && p.beneficiary == msg.sender && p.unlockingTime <= block.timestamp) {\r\n                // Verify the signature user is submitting\r\n                bool isMessageValid = signatureValidator.verifyWithdraw(signature, token, amount, p.beneficiary, nonce);\r\n                require(isMessageValid == true, \"Error: Signature is not valid.\");\r\n\r\n                bool result = IERC20(token).transfer(p.beneficiary, p.amount);\r\n                require(result, \"Transfer did not go through.\");\r\n\r\n                emit TokensUnfreezed(token, p.beneficiary, p.amount);\r\n                // Clear up the state and remove pending flag\r\n                delete tokenToPendingWithdrawal[token];\r\n                isTokenHavingPendingWithdrawal[token] = false;\r\n            }\r\n        } else {\r\n            revert(\"Invalid function call\");\r\n        }\r\n    }\r\n\r\n    // Function to release tokens\r\n    function releaseTokens(\r\n        bytes memory signature,\r\n        address token,\r\n        uint256 amount,\r\n        uint256 nonce\r\n    )\r\n    public\r\n    isNotFrozen\r\n    onlyIfAmountGreaterThanZero(amount)\r\n    {\r\n        require(isTokenHavingPendingWithdrawal[token] == false, \"Token is currently having pending withdrawal.\");\r\n\r\n        require(isSignatureUsed[signature] == false, \"Signature already used\");\r\n        isSignatureUsed[signature] = true;\r\n\r\n        // msg.sender is beneficiary address\r\n        address beneficiary = msg.sender;\r\n        // Verify the signature user is submitting\r\n        bool isMessageValid = signatureValidator.verifyWithdraw(signature, token, amount, beneficiary, nonce);\r\n        // Requiring that signature is valid\r\n        require(isMessageValid == true, \"Error: Signature is not valid.\");\r\n\r\n\r\n        if(isAboveThreshold(token, amount) && isAssetProtected[token] == true) {\r\n\r\n            PendingWithdrawal memory p = PendingWithdrawal({\r\n                amount: amount,\r\n                beneficiary: beneficiary,\r\n                unlockingTime: now.add(freezeLength)\r\n            });\r\n\r\n            tokenToPendingWithdrawal[token] = p;\r\n            isTokenHavingPendingWithdrawal[token] = true;\r\n\r\n            // Fire an event\r\n            emit CreatedPendingWithdrawal(token, beneficiary, amount, p.unlockingTime);\r\n        } else {\r\n            bool result = IERC20(token).transfer(beneficiary, amount);\r\n            require(result, \"Transfer did not go through.\");\r\n\r\n            emit TokensUnfreezed(token, beneficiary, amount);\r\n        }\r\n    }\r\n\r\n    // Function for congress to approve withdrawal and transfer funds\r\n    function approveWithdrawalAndTransferFunds(\r\n        address token\r\n    )\r\n    public\r\n    onlyChainportCongress\r\n    isNotFrozen\r\n    {\r\n        require(isTokenHavingPendingWithdrawal[token] == true);\r\n        // Get current pending withdrawal attempt\r\n        PendingWithdrawal memory p = tokenToPendingWithdrawal[token];\r\n        // Transfer funds to user\r\n        bool result = IERC20(token).transfer(p.beneficiary, p.amount);\r\n        require(result, \"Transfer did not go through.\");\r\n        // Emit events\r\n        emit TokensUnfreezed(token, p.beneficiary, p.amount);\r\n        emit WithdrawalApproved(token, p.beneficiary, p.amount);\r\n\r\n        // Clear up the state and remove pending flag\r\n        delete tokenToPendingWithdrawal[token];\r\n        isTokenHavingPendingWithdrawal[token] = false;\r\n    }\r\n\r\n    // Function to reject withdrawal from congress\r\n    function rejectWithdrawal(\r\n        address token\r\n    )\r\n    public\r\n    onlyChainportCongress\r\n    isNotFrozen\r\n    {\r\n        require(isTokenHavingPendingWithdrawal[token] == true);\r\n        // Get current pending withdrawal attempt\r\n        PendingWithdrawal memory p = tokenToPendingWithdrawal[token];\r\n        emit WithdrawalRejected(token, p.beneficiary, p.amount);\r\n        // Clear up the state and remove pending flag\r\n        delete tokenToPendingWithdrawal[token];\r\n        isTokenHavingPendingWithdrawal[token] = false;\r\n    }\r\n\r\n    // Function to check if amount is above threshold\r\n    function isAboveThreshold(address token, uint256 amount) public view returns (bool) {\r\n        return amount >= getTokenBalance(token).mul(safetyThreshold).div(100);\r\n    }\r\n\r\n    // Get contract balance of specific token\r\n    function getTokenBalance(address token) internal view returns (uint256) {\r\n        return IERC20(token).balanceOf(address(this));\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isProtected\",\"type\":\"bool\"}],\"name\":\"AssetProtectionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockingTime\",\"type\":\"uint256\"}],\"name\":\"CreatedPendingWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSafetyThreshold\",\"type\":\"uint256\"}],\"name\":\"SafetyThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimeLockLength\",\"type\":\"uint256\"}],\"name\":\"TimeLockLengthChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensFreezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensUnfreezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalRejected\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"approveWithdrawalAndTransferFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainportCongress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"freezeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"functionNameToNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maintainersRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chainportCongress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signatureValidator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_freezeLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_safetyThreshold\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"isAboveThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAssetProtected\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"isSignatureUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTokenHavingPendingWithdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintainersRegistry\",\"outputs\":[{\"internalType\":\"contract IMaintainersRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rejectWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"releaseTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"releaseTokensByMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"releaseTokensTimelockPassed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safetyThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isProtected\",\"type\":\"bool\"}],\"name\":\"setAssetProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maintainersRegistry\",\"type\":\"address\"}],\"name\":\"setMaintainersRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_safetyThreshold\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"setTimeLockLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signatureValidator\",\"outputs\":[{\"internalType\":\"contract IValidator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToPendingWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unlockingTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unfreezeBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ChainportBridgeEth","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://05886fee8a1c3ae3ec197dd58781169872d4a30ca8a76b98f2178ba263d70bb5"}]}