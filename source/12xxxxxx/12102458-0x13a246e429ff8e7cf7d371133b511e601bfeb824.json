{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interface/MarketInterfaces.sol\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract ShardsMarketAdminStorage {\r\n    /**\r\n     * @notice Administrator for this contract\r\n     */\r\n    address public admin;\r\n    /**\r\n     * @notice Governance for this contract which has the right to adjust the parameters of market\r\n     */\r\n    address public governance;\r\n\r\n    /**\r\n     * @notice Active brains of ShardsMarket\r\n     */\r\n    address public implementation;\r\n}\r\n\r\ncontract IShardsMarketStorge is ShardsMarketAdminStorage {\r\n    address public shardsFactory;\r\n\r\n    address public factory;\r\n\r\n    address public router;\r\n\r\n    address public dev;\r\n\r\n    address public platformFund;\r\n\r\n    address public shardsFarm;\r\n\r\n    address public buyoutProposals;\r\n\r\n    address public regulator;\r\n\r\n    address public shardAdditionProposal;\r\n\r\n    address public WETH;\r\n    //The totalSupply of shard in the market\r\n    uint256 public totalSupply = 10000000000000000000000;\r\n    //Stake Time limit: 60*60*24*5\r\n    uint256 public deadlineForStake = 432000;\r\n    //Redeem Time limit:60*60*24*7\r\n    uint256 public deadlineForRedeem = 604800;\r\n    //The Proportion of the shardsCreator's shards\r\n    uint256 public shardsCreatorProportion = 5;\r\n    //The Proportion of the platform's shards\r\n    uint256 public platformProportion = 5;\r\n    //The Proportion for dev of the market profit,the rest of profit is given to platformFund\r\n    uint256 public profitProportionForDev = 20;\r\n    //max\r\n    uint256 internal constant max = 100;\r\n    //shardPool count\r\n    uint256 public shardPoolIdCount;\r\n    // all of the shardpoolId\r\n    uint256[] internal allPools;\r\n    // Info of each pool.\r\n    mapping(uint256 => shardPool) public poolInfo;\r\n    //shardPool struct\r\n    struct shardPool {\r\n        address creator; //shard  creator\r\n        ShardsState state; //shard state\r\n        uint256 createTime;\r\n        uint256 deadlineForStake;\r\n        uint256 deadlineForRedeem;\r\n        uint256 balanceOfWantToken; // all the stake amount of the wantToken in this pool\r\n        uint256 minWantTokenAmount; //Minimum subscription required by the creator\r\n        bool isCreatorWithDraw; //Does the creator withdraw wantToken\r\n        address wantToken; // token address Requested by the creator for others to stake\r\n        uint256 openingPrice;\r\n    }\r\n    //shard of each pool\r\n    mapping(uint256 => shard) public shardInfo;\r\n    //shard struct\r\n    struct shard {\r\n        string shardName;\r\n        string shardSymbol;\r\n        address shardToken;\r\n        uint256 totalShardSupply;\r\n        uint256 shardForCreator;\r\n        uint256 shardForPlatform;\r\n        uint256 shardForStakers;\r\n        uint256 burnAmount;\r\n    }\r\n    //user info of each pool\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        bool isWithdrawShard;\r\n    }\r\n\r\n    enum ShardsState {\r\n        Live,\r\n        Listed,\r\n        ApplyForBuyout,\r\n        Buyout,\r\n        SubscriptionFailed,\r\n        Pending,\r\n        AuditFailed,\r\n        ApplyForAddition\r\n    }\r\n\r\n    struct Token721 {\r\n        address contractAddress;\r\n        uint256 tokenId;\r\n    }\r\n    struct Token1155 {\r\n        address contractAddress;\r\n        uint256 tokenId;\r\n        uint256 amount;\r\n    }\r\n    //nfts of shard creator stakes in each pool\r\n    mapping(uint256 => Token721[]) internal Token721s;\r\n    mapping(uint256 => Token1155[]) internal Token1155s;\r\n}\r\n\r\nabstract contract IShardsMarket is IShardsMarketStorge {\r\n    event ShardCreated(\r\n        uint256 shardPoolId,\r\n        address indexed creator,\r\n        string shardName,\r\n        string shardSymbol,\r\n        uint256 minWantTokenAmount,\r\n        uint256 createTime,\r\n        uint256 totalSupply,\r\n        address wantToken\r\n    );\r\n    event Stake(address indexed sender, uint256 shardPoolId, uint256 amount);\r\n    event Redeem(address indexed sender, uint256 shardPoolId, uint256 amount);\r\n    event SettleSuccess(\r\n        uint256 indexed shardPoolId,\r\n        uint256 platformAmount,\r\n        uint256 shardForStakers,\r\n        uint256 balanceOfWantToken,\r\n        uint256 fee,\r\n        address shardToken\r\n    );\r\n    event SettleFail(uint256 indexed shardPoolId);\r\n    event ApplyForBuyout(\r\n        address indexed sender,\r\n        uint256 indexed proposalId,\r\n        uint256 indexed _shardPoolId,\r\n        uint256 shardAmount,\r\n        uint256 wantTokenAmount,\r\n        uint256 voteDeadline,\r\n        uint256 buyoutTimes,\r\n        uint256 price,\r\n        uint256 blockHeight\r\n    );\r\n    event Vote(\r\n        address indexed sender,\r\n        uint256 indexed proposalId,\r\n        uint256 indexed _shardPoolId,\r\n        bool isAgree,\r\n        uint256 voteAmount\r\n    );\r\n    event VoteResultConfirm(\r\n        uint256 indexed proposalId,\r\n        uint256 indexed _shardPoolId,\r\n        bool isPassed\r\n    );\r\n\r\n    // user operation\r\n    function createShard(\r\n        Token721[] calldata Token721s,\r\n        Token1155[] calldata Token1155s,\r\n        string memory shardName,\r\n        string memory shardSymbol,\r\n        uint256 minWantTokenAmount,\r\n        address wantToken\r\n    ) external virtual returns (uint256 shardPoolId);\r\n\r\n    function stakeETH(uint256 _shardPoolId) external payable virtual;\r\n\r\n    function stake(uint256 _shardPoolId, uint256 amount) external virtual;\r\n\r\n    function redeem(uint256 _shardPoolId, uint256 amount) external virtual;\r\n\r\n    function redeemETH(uint256 _shardPoolId, uint256 amount) external virtual;\r\n\r\n    function settle(uint256 _shardPoolId) external virtual;\r\n\r\n    function redeemInSubscriptionFailed(uint256 _shardPoolId) external virtual;\r\n\r\n    function usersWithdrawShardToken(uint256 _shardPoolId) external virtual;\r\n\r\n    function creatorWithdrawWantToken(uint256 _shardPoolId) external virtual;\r\n\r\n    function applyForBuyout(uint256 _shardPoolId, uint256 wantTokenAmount)\r\n        external\r\n        virtual\r\n        returns (uint256 proposalId);\r\n\r\n    function applyForBuyoutETH(uint256 _shardPoolId)\r\n        external\r\n        payable\r\n        virtual\r\n        returns (uint256 proposalId);\r\n\r\n    function vote(uint256 _shardPoolId, bool isAgree) external virtual;\r\n\r\n    function voteResultConfirm(uint256 _shardPoolId)\r\n        external\r\n        virtual\r\n        returns (bool result);\r\n\r\n    function exchangeForWantToken(uint256 _shardPoolId, uint256 shardAmount)\r\n        external\r\n        virtual\r\n        returns (uint256 wantTokenAmount);\r\n\r\n    function redeemForBuyoutFailed(uint256 _proposalId)\r\n        external\r\n        virtual\r\n        returns (uint256 shardTokenAmount, uint256 wantTokenAmount);\r\n\r\n    //governance operation\r\n    function setShardsCreatorProportion(uint256 _shardsCreatorProportion)\r\n        external\r\n        virtual;\r\n\r\n    function setPlatformProportion(uint256 _platformProportion)\r\n        external\r\n        virtual;\r\n\r\n    function setTotalSupply(uint256 _totalSupply) external virtual;\r\n\r\n    function setDeadlineForRedeem(uint256 _deadlineForRedeem) external virtual;\r\n\r\n    function setDeadlineForStake(uint256 _deadlineForStake) external virtual;\r\n\r\n    function setProfitProportionForDev(uint256 _profitProportionForDev)\r\n        external\r\n        virtual;\r\n\r\n    function setShardsFarm(address _shardsFarm) external virtual;\r\n\r\n    function setRegulator(address _regulator) external virtual;\r\n\r\n    function setFactory(address _factory) external virtual;\r\n\r\n    function setShardsFactory(address _shardsFactory) external virtual;\r\n\r\n    function setRouter(address _router) external virtual;\r\n\r\n    //admin operation\r\n    function setPlatformFund(address _platformFund) external virtual;\r\n\r\n    function setDev(address _dev) external virtual;\r\n\r\n    //function shardAudit(uint256 _shardPoolId, bool isPassed) external virtual;\r\n\r\n    //view function\r\n    function getPrice(uint256 _shardPoolId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256 currentPrice);\r\n\r\n    function getAllPools()\r\n        external\r\n        view\r\n        virtual\r\n        returns (uint256[] memory _pools);\r\n\r\n    function getTokens(uint256 shardPoolId)\r\n        external\r\n        view\r\n        virtual\r\n        returns (Token721[] memory _token721s, Token1155[] memory _token1155s);\r\n}\r\n\r\n// File: contracts/ShardsMarketDelegator.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ncontract ShardsMarketDelegator is IShardsMarketStorge {\r\n    /**\r\n     * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\r\n     */\r\n    event NewImplementation(\r\n        address oldImplementation,\r\n        address newImplementation\r\n    );\r\n\r\n    event NewAdmin(address oldAdmin, address newAdmin);\r\n    event NewGovernance(address oldGovernance, address newGovernance);\r\n\r\n    constructor(\r\n        address _WETH,\r\n        address _factory,\r\n        address _governance,\r\n        address _router,\r\n        address _dev,\r\n        address _platformFund,\r\n        address _shardsFactory,\r\n        address _regulator,\r\n        address _buyoutProposals,\r\n        address implementation_\r\n    ) public {\r\n        admin = msg.sender;\r\n        governance = msg.sender;\r\n        _setImplementation(implementation_);\r\n        delegateTo(\r\n            implementation_,\r\n            abi.encodeWithSignature(\r\n                \"initialize(address,address,address,address,address,address,address,address,address)\",\r\n                _WETH,\r\n                _factory,\r\n                _governance,\r\n                _router,\r\n                _dev,\r\n                _platformFund,\r\n                _shardsFactory,\r\n                _regulator,\r\n                _buyoutProposals\r\n            )\r\n        );\r\n    }\r\n\r\n    function _setImplementation(address implementation_) public {\r\n        require(\r\n            msg.sender == governance,\r\n            \"_setImplementation: Caller must be governance\"\r\n        );\r\n\r\n        address oldImplementation = implementation;\r\n        implementation = implementation_;\r\n\r\n        emit NewImplementation(oldImplementation, implementation);\r\n    }\r\n\r\n    function _setAdmin(address newAdmin) public {\r\n        require(msg.sender == admin, \"UNAUTHORIZED\");\r\n\r\n        address oldAdmin = admin;\r\n\r\n        admin = newAdmin;\r\n\r\n        emit NewAdmin(oldAdmin, newAdmin);\r\n    }\r\n\r\n    function _setGovernance(address newGovernance) public {\r\n        require(msg.sender == governance, \"UNAUTHORIZED\");\r\n\r\n        address oldGovernance = governance;\r\n\r\n        governance = newGovernance;\r\n\r\n        emit NewGovernance(oldGovernance, newGovernance);\r\n    }\r\n\r\n    function delegateTo(address callee, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        (bool success, bytes memory returnData) = callee.delegatecall(data);\r\n        assembly {\r\n            if eq(success, 0) {\r\n                revert(add(returnData, 0x20), returndatasize())\r\n            }\r\n        }\r\n        return returnData;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * @notice Delegates execution to an implementation contract\r\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\r\n    //  */\r\n    fallback() external payable {\r\n        // delegate all other functions to current implementation\r\n        (bool success, ) = implementation.delegatecall(msg.data);\r\n        assembly {\r\n            let free_mem_ptr := mload(0x40)\r\n            returndatacopy(free_mem_ptr, 0, returndatasize())\r\n            switch success\r\n                case 0 {\r\n                    revert(free_mem_ptr, returndatasize())\r\n                }\r\n                default {\r\n                    return(free_mem_ptr, returndatasize())\r\n                }\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_platformFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shardsFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_regulator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyoutProposals\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGovernance\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"NewGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"NewImplementation\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"_setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"_setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"name\":\"_setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyoutProposals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadlineForRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadlineForStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformProportion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"enum IShardsMarketStorge.ShardsState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadlineForStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadlineForRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOfWantToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minWantTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isCreatorWithDraw\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"wantToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"openingPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitProportionForDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"regulator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shardAdditionProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shardInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"shardName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"shardSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"shardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalShardSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shardForCreator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shardForPlatform\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shardForStakers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shardPoolIdCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shardsCreatorProportion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shardsFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shardsFarm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWithdrawShard\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ShardsMarketDelegator","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000f028f723ed1d0fe01cc59973c49298aa95c574720000000000000000000000009522368481c84250fd4b2a4ea03fb875024d9956000000000000000000000000e4fe6a45f354e845f954cddee6084603cedb94100000000000000000000000009522368481c84250fd4b2a4ea03fb875024d9956000000000000000000000000dbbf232ec1308629227f63c2ae76647e5e939c24000000000000000000000000c1a0129499b5633ba0dcad1f24289fd3bfcf8d9f000000000000000000000000dddf6b2c719d04f5f87230dd02c12ea062799b29000000000000000000000000df83c19a6958ce28b1cb9e1751ed05b060505cfd000000000000000000000000e7714925d9d3fff268f2d5caa512d983d6758c20","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"1","Implementation":"0xe7714925d9d3fff268f2d5caa512d983d6758c20","SwarmSource":"ipfs://5e389ca1d92603db10c8572c1c06f86813fa00a31183845b0f6a8eaf40f323f9"}]}