{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BondingV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./interfaces/IERC1155Ubiquity.sol\\\";\\nimport \\\"./interfaces/IMetaPool.sol\\\";\\nimport \\\"./interfaces/IUbiquityFormulas.sol\\\";\\nimport \\\"./UbiquityAlgorithmicDollar.sol\\\";\\nimport \\\"./BondingFormulas.sol\\\";\\nimport \\\"./BondingShareV2.sol\\\";\\nimport \\\"./UbiquityAlgorithmicDollarManager.sol\\\";\\nimport \\\"./interfaces/ISablier.sol\\\";\\nimport \\\"./interfaces/IMasterChefV2.sol\\\";\\nimport \\\"./interfaces/ITWAPOracle.sol\\\";\\nimport \\\"./interfaces/IERC1155Ubiquity.sol\\\";\\nimport \\\"./utils/CollectableDust.sol\\\";\\n\\ncontract BondingV2 is CollectableDust, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    bytes public data = \\\"\\\";\\n    UbiquityAlgorithmicDollarManager public manager;\\n    uint256 public constant ONE = uint256(1 ether); // 3Crv has 18 decimals\\n    uint256 public bondingDiscountMultiplier = uint256(1000000 gwei); // 0.001\\n    uint256 public blockCountInAWeek = 45361;\\n    uint256 public accLpRewardPerShare = 0;\\n\\n    uint256 public lpRewards;\\n    uint256 public totalLpToMigrate;\\n    address public bondingFormulasAddress;\\n\\n    address public migrator; // temporary address to handle migration\\n    address[] private _toMigrateOriginals;\\n    uint256[] private _toMigrateLpBalances;\\n    uint256[] private _toMigrateWeeks;\\n\\n    // toMigrateId[address] > 0 when address is to migrate, or 0 in all other cases\\n    mapping(address => uint256) public toMigrateId;\\n    bool public migrating = false;\\n\\n    event PriceReset(\\n        address _tokenWithdrawn,\\n        uint256 _amountWithdrawn,\\n        uint256 _amountTransfered\\n    );\\n\\n    event Deposit(\\n        address indexed _user,\\n        uint256 indexed _id,\\n        uint256 _lpAmount,\\n        uint256 _bondingShareAmount,\\n        uint256 _weeks,\\n        uint256 _endBlock\\n    );\\n    event RemoveLiquidityFromBond(\\n        address indexed _user,\\n        uint256 indexed _id,\\n        uint256 _lpAmount,\\n        uint256 _lpAmountTransferred,\\n        uint256 _lprewards,\\n        uint256 _bondingShareAmount\\n    );\\n\\n    event AddLiquidityFromBond(\\n        address indexed _user,\\n        uint256 indexed _id,\\n        uint256 _lpAmount,\\n        uint256 _bondingShareAmount\\n    );\\n\\n    event BondingDiscountMultiplierUpdated(uint256 _bondingDiscountMultiplier);\\n    event BlockCountInAWeekUpdated(uint256 _blockCountInAWeek);\\n\\n    event Migrated(\\n        address indexed _user,\\n        uint256 indexed _id,\\n        uint256 _lpsAmount,\\n        uint256 _sharesAmount,\\n        uint256 _weeks\\n    );\\n\\n    modifier onlyBondingManager() {\\n        require(\\n            manager.hasRole(manager.BONDING_MANAGER_ROLE(), msg.sender),\\n            \\\"not manager\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyPauser() {\\n        require(\\n            manager.hasRole(manager.PAUSER_ROLE(), msg.sender),\\n            \\\"not pauser\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyMigrator() {\\n        require(msg.sender == migrator, \\\"not migrator\\\");\\n        _;\\n    }\\n\\n    modifier whenMigrating() {\\n        require(migrating, \\\"not in migration\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _manager,\\n        address _bondingFormulasAddress,\\n        address[] memory _originals,\\n        uint256[] memory _lpBalances,\\n        uint256[] memory _weeks\\n    ) CollectableDust() Pausable() {\\n        manager = UbiquityAlgorithmicDollarManager(_manager);\\n        bondingFormulasAddress = _bondingFormulasAddress;\\n        migrator = msg.sender;\\n\\n        uint256 lgt = _originals.length;\\n        require(lgt > 0, \\\"address array empty\\\");\\n        require(lgt == _lpBalances.length, \\\"balances array not same length\\\");\\n        require(lgt == _weeks.length, \\\"weeks array not same length\\\");\\n\\n        _toMigrateOriginals = _originals;\\n        _toMigrateLpBalances = _lpBalances;\\n        _toMigrateWeeks = _weeks;\\n        for (uint256 i = 0; i < lgt; ++i) {\\n            toMigrateId[_originals[i]] = i + 1;\\n            totalLpToMigrate += _lpBalances[i];\\n        }\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n\\n    /// @dev addUserToMigrate add a user to migrate from V1.\\n    ///      IMPORTANT execute that function BEFORE sending the corresponding LP token\\n    ///      otherwise they will have extra LP rewards\\n    /// @param _original address of v1 user\\n    /// @param _lpBalance LP Balance of v1 user\\n    /// @param _weeks weeks lockup of v1 user\\n    /// @notice user will then be able to migrate.\\n    function addUserToMigrate(\\n        address _original,\\n        uint256 _lpBalance,\\n        uint256 _weeks\\n    ) external onlyMigrator {\\n        _toMigrateOriginals.push(_original);\\n        _toMigrateLpBalances.push(_lpBalance);\\n        totalLpToMigrate += _lpBalance;\\n        _toMigrateWeeks.push(_weeks);\\n        toMigrateId[_original] = _toMigrateOriginals.length;\\n    }\\n\\n    function setMigrator(address _migrator) external onlyMigrator {\\n        migrator = _migrator;\\n    }\\n\\n    function setMigrating(bool _migrating) external onlyMigrator {\\n        migrating = _migrating;\\n    }\\n\\n    /// @dev uADPriceReset remove uAD unilateraly from the curve LP share sitting inside\\n    ///      the bonding contract and send the uAD received to the treasury.\\n    ///      This will have the immediate effect of pushing the uAD price HIGHER\\n    /// @param amount of LP token to be removed for uAD\\n    /// @notice it will remove one coin only from the curve LP share sitting in the bonding contract\\n    function uADPriceReset(uint256 amount) external onlyBondingManager {\\n        IMetaPool metaPool = IMetaPool(manager.stableSwapMetaPoolAddress());\\n        // remove one coin\\n        uint256 coinWithdrawn = metaPool.remove_liquidity_one_coin(\\n            amount,\\n            0,\\n            0\\n        );\\n        ITWAPOracle(manager.twapOracleAddress()).update();\\n        uint256 toTransfer = IERC20(manager.dollarTokenAddress()).balanceOf(\\n            address(this)\\n        );\\n        IERC20(manager.dollarTokenAddress()).transfer(\\n            manager.treasuryAddress(),\\n            toTransfer\\n        );\\n        emit PriceReset(\\n            manager.dollarTokenAddress(),\\n            coinWithdrawn,\\n            toTransfer\\n        );\\n    }\\n\\n    /// @dev crvPriceReset remove 3CRV unilateraly from the curve LP share sitting inside\\n    ///      the bonding contract and send the 3CRV received to the treasury\\n    ///      This will have the immediate effect of pushing the uAD price LOWER\\n    /// @param amount of LP token to be removed for 3CRV tokens\\n    /// @notice it will remove one coin only from the curve LP share sitting in the bonding contract\\n    function crvPriceReset(uint256 amount) external onlyBondingManager {\\n        IMetaPool metaPool = IMetaPool(manager.stableSwapMetaPoolAddress());\\n        // remove one coin\\n        uint256 coinWithdrawn = metaPool.remove_liquidity_one_coin(\\n            amount,\\n            1,\\n            0\\n        );\\n        // update twap\\n        ITWAPOracle(manager.twapOracleAddress()).update();\\n        uint256 toTransfer = IERC20(manager.curve3PoolTokenAddress()).balanceOf(\\n            address(this)\\n        );\\n        IERC20(manager.curve3PoolTokenAddress()).transfer(\\n            manager.treasuryAddress(),\\n            toTransfer\\n        );\\n        emit PriceReset(\\n            manager.curve3PoolTokenAddress(),\\n            coinWithdrawn,\\n            toTransfer\\n        );\\n    }\\n\\n    function setBondingFormulasAddress(address _bondingFormulasAddress)\\n        external\\n        onlyBondingManager\\n    {\\n        bondingFormulasAddress = _bondingFormulasAddress;\\n    }\\n\\n    /// Collectable Dust\\n    function addProtocolToken(address _token)\\n        external\\n        override\\n        onlyBondingManager\\n    {\\n        _addProtocolToken(_token);\\n    }\\n\\n    function removeProtocolToken(address _token)\\n        external\\n        override\\n        onlyBondingManager\\n    {\\n        _removeProtocolToken(_token);\\n    }\\n\\n    function sendDust(\\n        address _to,\\n        address _token,\\n        uint256 _amount\\n    ) external override onlyBondingManager {\\n        _sendDust(_to, _token, _amount);\\n    }\\n\\n    function setBondingDiscountMultiplier(uint256 _bondingDiscountMultiplier)\\n        external\\n        onlyBondingManager\\n    {\\n        bondingDiscountMultiplier = _bondingDiscountMultiplier;\\n        emit BondingDiscountMultiplierUpdated(_bondingDiscountMultiplier);\\n    }\\n\\n    function setBlockCountInAWeek(uint256 _blockCountInAWeek)\\n        external\\n        onlyBondingManager\\n    {\\n        blockCountInAWeek = _blockCountInAWeek;\\n        emit BlockCountInAWeekUpdated(_blockCountInAWeek);\\n    }\\n\\n    /// @dev deposit uAD-3CRV LP tokens for a duration to receive bonding shares\\n    /// @param _lpsAmount of LP token to send\\n    /// @param _weeks during lp token will be held\\n    /// @notice weeks act as a multiplier for the amount of bonding shares to be received\\n    function deposit(uint256 _lpsAmount, uint256 _weeks)\\n        external\\n        whenNotPaused\\n        returns (uint256 _id)\\n    {\\n        require(\\n            1 <= _weeks && _weeks <= 208,\\n            \\\"Bonding: duration must be between 1 and 208 weeks\\\"\\n        );\\n        ITWAPOracle(manager.twapOracleAddress()).update();\\n\\n        // update the accumulated lp rewards per shares\\n        _updateLpPerShare();\\n        // transfer lp token to the bonding contract\\n        IERC20(manager.stableSwapMetaPoolAddress()).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _lpsAmount\\n        );\\n\\n        // calculate the amount of share based on the amount of lp deposited and the duration\\n        uint256 _sharesAmount = IUbiquityFormulas(manager.formulasAddress())\\n            .durationMultiply(_lpsAmount, _weeks, bondingDiscountMultiplier);\\n        // calculate end locking period block number\\n        uint256 _endBlock = block.number + _weeks * blockCountInAWeek;\\n        _id = _mint(msg.sender, _lpsAmount, _sharesAmount, _endBlock);\\n\\n        // set masterchef for uGOV rewards\\n        IMasterChefV2(manager.masterChefAddress()).deposit(\\n            msg.sender,\\n            _sharesAmount,\\n            _id\\n        );\\n\\n        emit Deposit(\\n            msg.sender,\\n            _id,\\n            _lpsAmount,\\n            _sharesAmount,\\n            _weeks,\\n            _endBlock\\n        );\\n    }\\n\\n    /// @dev Add an amount of uAD-3CRV LP tokens\\n    /// @param _amount of LP token to deposit\\n    /// @param _id bonding shares id\\n    /// @param _weeks during lp token will be held\\n    /// @notice bonding shares are ERC1155 (aka NFT) because they have an expiration date\\n    function addLiquidity(\\n        uint256 _amount,\\n        uint256 _id,\\n        uint256 _weeks\\n    ) external whenNotPaused {\\n        (\\n            uint256[2] memory bs,\\n            BondingShareV2.Bond memory bond\\n        ) = _checkForLiquidity(_id);\\n\\n        // calculate pending LP rewards\\n        uint256 sharesToRemove = bs[0];\\n        _updateLpPerShare();\\n        uint256 pendingLpReward = lpRewardForShares(\\n            sharesToRemove,\\n            bond.lpRewardDebt\\n        );\\n\\n        // add an extra step to be able to decrease rewards if locking end is near\\n        pendingLpReward = BondingFormulas(this.bondingFormulasAddress())\\n            .lpRewardsAddLiquidityNormalization(bond, bs, pendingLpReward);\\n        // add these LP Rewards to the deposited amount of LP token\\n        bond.lpAmount += pendingLpReward;\\n        lpRewards -= pendingLpReward;\\n        IERC20(manager.stableSwapMetaPoolAddress()).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        bond.lpAmount += _amount;\\n\\n        // redeem all shares\\n        IMasterChefV2(manager.masterChefAddress()).withdraw(\\n            msg.sender,\\n            sharesToRemove,\\n            _id\\n        );\\n\\n        // calculate the amount of share based on the new amount of lp deposited and the duration\\n        uint256 _sharesAmount = IUbiquityFormulas(manager.formulasAddress())\\n            .durationMultiply(bond.lpAmount, _weeks, bondingDiscountMultiplier);\\n\\n        // deposit new shares\\n        IMasterChefV2(manager.masterChefAddress()).deposit(\\n            msg.sender,\\n            _sharesAmount,\\n            _id\\n        );\\n        // calculate end locking period block number\\n        // 1 week = 45361 blocks = 2371753*7/366\\n        // n = (block + duration * 45361)\\n        bond.endBlock = block.number + _weeks * blockCountInAWeek;\\n\\n        // should be done after masterchef withdraw\\n        _updateLpPerShare();\\n        bond.lpRewardDebt =\\n            (IMasterChefV2(manager.masterChefAddress()).getBondingShareInfo(\\n                _id\\n            )[0] * accLpRewardPerShare) /\\n            1e12;\\n\\n        BondingShareV2(manager.bondingShareAddress()).updateBond(\\n            _id,\\n            bond.lpAmount,\\n            bond.lpRewardDebt,\\n            bond.endBlock\\n        );\\n        emit AddLiquidityFromBond(\\n            msg.sender,\\n            _id,\\n            bond.lpAmount,\\n            _sharesAmount\\n        );\\n    }\\n\\n    /// @dev Remove an amount of uAD-3CRV LP tokens\\n    /// @param _amount of LP token deposited when _id was created to be withdrawn\\n    /// @param _id bonding shares id\\n    /// @notice bonding shares are ERC1155 (aka NFT) because they have an expiration date\\n    function removeLiquidity(uint256 _amount, uint256 _id)\\n        external\\n        whenNotPaused\\n    {\\n        (\\n            uint256[2] memory bs,\\n            BondingShareV2.Bond memory bond\\n        ) = _checkForLiquidity(_id);\\n        require(bond.lpAmount >= _amount, \\\"Bonding: amount too big\\\");\\n        // we should decrease the UBQ rewards proportionally to the LP removed\\n        // sharesToRemove = (bonding shares * _amount )  / bond.lpAmount ;\\n        uint256 sharesToRemove = BondingFormulas(this.bondingFormulasAddress())\\n            .sharesForLP(bond, bs, _amount);\\n\\n        //get all its pending LP Rewards\\n        _updateLpPerShare();\\n        uint256 pendingLpReward = lpRewardForShares(bs[0], bond.lpRewardDebt);\\n        // update bonding shares\\n        // bond.shares = bond.shares - sharesToRemove;\\n        // get masterchef for uGOV rewards To ensure correct computation\\n        // it needs to be done BEFORE updating the bonding share\\n        IMasterChefV2(manager.masterChefAddress()).withdraw(\\n            msg.sender,\\n            sharesToRemove,\\n            _id\\n        );\\n\\n        // redeem of the extra LP\\n        // bonding lp balance - BondingShareV2.totalLP\\n        IERC20 metapool = IERC20(manager.stableSwapMetaPoolAddress());\\n\\n        // add an extra step to be able to decrease rewards if locking end is near\\n        pendingLpReward = BondingFormulas(this.bondingFormulasAddress())\\n            .lpRewardsRemoveLiquidityNormalization(bond, bs, pendingLpReward);\\n\\n        uint256 correctedAmount = BondingFormulas(this.bondingFormulasAddress())\\n            .correctedAmountToWithdraw(\\n                BondingShareV2(manager.bondingShareAddress()).totalLP(),\\n                metapool.balanceOf(address(this)) - lpRewards,\\n                _amount\\n            );\\n\\n        lpRewards -= pendingLpReward;\\n        bond.lpAmount -= _amount;\\n\\n        // bond.lpRewardDebt = (bonding shares * accLpRewardPerShare) /  1e18;\\n        // user.amount.mul(pool.accSushiPerShare).div(1e12);\\n        // should be done after masterchef withdraw\\n        bond.lpRewardDebt =\\n            (IMasterChefV2(manager.masterChefAddress()).getBondingShareInfo(\\n                _id\\n            )[0] * accLpRewardPerShare) /\\n            1e12;\\n\\n        BondingShareV2(manager.bondingShareAddress()).updateBond(\\n            _id,\\n            bond.lpAmount,\\n            bond.lpRewardDebt,\\n            bond.endBlock\\n        );\\n\\n        // lastly redeem lp tokens\\n        metapool.safeTransfer(msg.sender, correctedAmount + pendingLpReward);\\n        emit RemoveLiquidityFromBond(\\n            msg.sender,\\n            _id,\\n            _amount,\\n            correctedAmount,\\n            pendingLpReward,\\n            sharesToRemove\\n        );\\n    }\\n\\n    // View function to see pending lpRewards on frontend.\\n    function pendingLpRewards(uint256 _id) external view returns (uint256) {\\n        BondingShareV2 bonding = BondingShareV2(manager.bondingShareAddress());\\n        BondingShareV2.Bond memory bond = bonding.getBond(_id);\\n        uint256[2] memory bs = IMasterChefV2(manager.masterChefAddress())\\n            .getBondingShareInfo(_id);\\n\\n        uint256 lpBalance = IERC20(manager.stableSwapMetaPoolAddress())\\n            .balanceOf(address(this));\\n        // the excess LP is the current balance minus the total deposited LP\\n        if (lpBalance >= (bonding.totalLP() + totalLpToMigrate)) {\\n            uint256 currentLpRewards = lpBalance -\\n                (bonding.totalLP() + totalLpToMigrate);\\n            uint256 curAccLpRewardPerShare = accLpRewardPerShare;\\n            // if new rewards we should calculate the new curAccLpRewardPerShare\\n            if (currentLpRewards > lpRewards) {\\n                uint256 newLpRewards = currentLpRewards - lpRewards;\\n                curAccLpRewardPerShare =\\n                    accLpRewardPerShare +\\n                    ((newLpRewards * 1e12) /\\n                        IMasterChefV2(manager.masterChefAddress())\\n                            .totalShares());\\n            }\\n            // we multiply the shares amount by the accumulated lpRewards per share\\n            // and remove the lp Reward Debt\\n            return\\n                (bs[0] * (curAccLpRewardPerShare)) /\\n                (1e12) -\\n                (bond.lpRewardDebt);\\n        }\\n        return 0;\\n    }\\n\\n    function pause() public virtual onlyPauser {\\n        _pause();\\n    }\\n\\n    function unpause() public virtual onlyPauser {\\n        _unpause();\\n    }\\n\\n    /// @dev migrate let a user migrate from V1\\n    /// @notice user will then be able to migrate\\n    function migrate() public whenMigrating returns (uint256 _id) {\\n        _id = toMigrateId[msg.sender];\\n        require(_id > 0, \\\"not v1 address\\\");\\n\\n        _migrate(\\n            _toMigrateOriginals[_id - 1],\\n            _toMigrateLpBalances[_id - 1],\\n            _toMigrateWeeks[_id - 1]\\n        );\\n    }\\n\\n    /// @dev return the amount of Lp token rewards an amount of shares entitled\\n    /// @param amount of bonding shares\\n    /// @param lpRewardDebt lp rewards that has already been distributed\\n    function lpRewardForShares(uint256 amount, uint256 lpRewardDebt)\\n        public\\n        view\\n        returns (uint256 pendingLpReward)\\n    {\\n        if (accLpRewardPerShare > 0) {\\n            pendingLpReward =\\n                (amount * accLpRewardPerShare) /\\n                1e12 -\\n                (lpRewardDebt);\\n        }\\n    }\\n\\n    function currentShareValue() public view returns (uint256 priceShare) {\\n        uint256 totalShares = IMasterChefV2(manager.masterChefAddress())\\n            .totalShares();\\n        // priceShare = totalLP / totalShares\\n        priceShare = IUbiquityFormulas(manager.formulasAddress()).bondPrice(\\n            BondingShareV2(manager.bondingShareAddress()).totalLP(),\\n            totalShares,\\n            ONE\\n        );\\n    }\\n\\n    /// @dev migrate let a user migrate from V1\\n    /// @notice user will then be able to migrate\\n    function _migrate(\\n        address user,\\n        uint256 _lpsAmount,\\n        uint256 _weeks\\n    ) internal returns (uint256 _id) {\\n        require(toMigrateId[user] > 0, \\\"not v1 address\\\");\\n        require(_lpsAmount > 0, \\\"LP amount is zero\\\");\\n        require(\\n            1 <= _weeks && _weeks <= 208,\\n            \\\"Duration must be between 1 and 208 weeks\\\"\\n        );\\n\\n        // unregister address\\n        toMigrateId[user] = 0;\\n\\n        // calculate the amount of share based on the amount of lp deposited and the duration\\n        uint256 _sharesAmount = IUbiquityFormulas(manager.formulasAddress())\\n            .durationMultiply(_lpsAmount, _weeks, bondingDiscountMultiplier);\\n\\n        // update the accumulated lp rewards per shares\\n        _updateLpPerShare();\\n        // calculate end locking period block number\\n        uint256 endBlock = block.number + _weeks * blockCountInAWeek;\\n        _id = _mint(user, _lpsAmount, _sharesAmount, endBlock);\\n        // reduce the total LP to migrate after the minting\\n        // to keep the _updateLpPerShare calculation consistent\\n        totalLpToMigrate -= _lpsAmount;\\n        // set masterchef for uGOV rewards\\n        IMasterChefV2(manager.masterChefAddress()).deposit(\\n            user,\\n            _sharesAmount,\\n            _id\\n        );\\n\\n        emit Migrated(user, _id, _lpsAmount, _sharesAmount, _weeks);\\n    }\\n\\n    /// @dev update the accumulated excess LP per share\\n    function _updateLpPerShare() internal {\\n        BondingShareV2 bond = BondingShareV2(manager.bondingShareAddress());\\n        uint256 lpBalance = IERC20(manager.stableSwapMetaPoolAddress())\\n            .balanceOf(address(this));\\n        // the excess LP is the current balance\\n        // minus the total deposited LP + LP that needs to be migrated\\n        uint256 totalShares = IMasterChefV2(manager.masterChefAddress())\\n            .totalShares();\\n        if (\\n            lpBalance >= (bond.totalLP() + totalLpToMigrate) && totalShares > 0\\n        ) {\\n            uint256 currentLpRewards = lpBalance -\\n                (bond.totalLP() + totalLpToMigrate);\\n\\n            // is there new LP rewards to be distributed ?\\n            if (currentLpRewards > lpRewards) {\\n                // we calculate the new accumulated LP rewards per share\\n                accLpRewardPerShare =\\n                    accLpRewardPerShare +\\n                    (((currentLpRewards - lpRewards) * 1e12) / totalShares);\\n\\n                // update the bonding contract lpRewards\\n                lpRewards = currentLpRewards;\\n            }\\n        }\\n    }\\n\\n    function _mint(\\n        address to,\\n        uint256 lpAmount,\\n        uint256 shares,\\n        uint256 endBlock\\n    ) internal returns (uint256) {\\n        uint256 _currentShareValue = currentShareValue();\\n        require(\\n            _currentShareValue != 0,\\n            \\\"Bonding: share value should not be null\\\"\\n        );\\n        // set the lp rewards debts so that this bonding share only get lp rewards from this day\\n        uint256 lpRewardDebt = (shares * accLpRewardPerShare) / 1e12;\\n        return\\n            BondingShareV2(manager.bondingShareAddress()).mint(\\n                to,\\n                lpAmount,\\n                lpRewardDebt,\\n                endBlock\\n            );\\n    }\\n\\n    function _checkForLiquidity(uint256 _id)\\n        internal\\n        returns (uint256[2] memory bs, BondingShareV2.Bond memory bond)\\n    {\\n        require(\\n            IERC1155Ubiquity(manager.bondingShareAddress()).balanceOf(\\n                msg.sender,\\n                _id\\n            ) == 1,\\n            \\\"Bonding: caller is not owner\\\"\\n        );\\n        BondingShareV2 bonding = BondingShareV2(manager.bondingShareAddress());\\n        bond = bonding.getBond(_id);\\n        require(\\n            block.number > bond.endBlock,\\n            \\\"Bonding: Redeem not allowed before bonding time\\\"\\n        );\\n\\n        ITWAPOracle(manager.twapOracleAddress()).update();\\n        bs = IMasterChefV2(manager.masterChefAddress()).getBondingShareInfo(\\n            _id\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC1155Ubiquity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\n/// @title ERC1155 Ubiquiti preset interface\\n/// @author Ubiquity Algorithmic Dollar\\ninterface IERC1155Ubiquity is IERC1155 {\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) external;\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function exists(uint256 id) external view returns (bool);\\n\\n    function holderTokens() external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMetaPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol. SEE BELOW FOR SOURCE. !!\\npragma solidity ^0.8.3;\\n\\ninterface IMetaPool {\\n    event Transfer(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 value\\n    );\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event TokenExchange(\\n        address indexed buyer,\\n        int128 sold_id,\\n        uint256 tokens_sold,\\n        int128 bought_id,\\n        uint256 tokens_bought\\n    );\\n    event TokenExchangeUnderlying(\\n        address indexed buyer,\\n        int128 sold_id,\\n        uint256 tokens_sold,\\n        int128 bought_id,\\n        uint256 tokens_bought\\n    );\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[2] token_amounts,\\n        uint256[2] fees,\\n        uint256 invariant,\\n        uint256 token_supply\\n    );\\n    event RemoveLiquidity(\\n        address indexed provider,\\n        uint256[2] token_amounts,\\n        uint256[2] fees,\\n        uint256 token_supply\\n    );\\n    event RemoveLiquidityOne(\\n        address indexed provider,\\n        uint256 token_amount,\\n        uint256 coin_amount,\\n        uint256 token_supply\\n    );\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[2] token_amounts,\\n        uint256[2] fees,\\n        uint256 invariant,\\n        uint256 token_supply\\n    );\\n    event CommitNewAdmin(uint256 indexed deadline, address indexed admin);\\n    event NewAdmin(address indexed admin);\\n    event CommitNewFee(\\n        uint256 indexed deadline,\\n        uint256 fee,\\n        uint256 admin_fee\\n    );\\n    event NewFee(uint256 fee, uint256 admin_fee);\\n    event RampA(\\n        uint256 old_A,\\n        uint256 new_A,\\n        uint256 initial_time,\\n        uint256 future_time\\n    );\\n    event StopRampA(uint256 A, uint256 t);\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        address _coin,\\n        uint256 _decimals,\\n        uint256 _A,\\n        uint256 _fee,\\n        address _admin\\n    ) external;\\n\\n    function decimals() external view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function get_previous_balances() external view returns (uint256[2] memory);\\n\\n    function get_balances() external view returns (uint256[2] memory);\\n\\n    function get_twap_balances(\\n        uint256[2] memory _first_balances,\\n        uint256[2] memory _last_balances,\\n        uint256 _time_elapsed\\n    ) external view returns (uint256[2] memory);\\n\\n    function get_price_cumulative_last()\\n        external\\n        view\\n        returns (uint256[2] memory);\\n\\n    function admin_fee() external view returns (uint256);\\n\\n    function A() external view returns (uint256);\\n\\n    function A_precise() external view returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function calc_token_amount(uint256[2] memory _amounts, bool _is_deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_token_amount(\\n        uint256[2] memory _amounts,\\n        bool _is_deposit,\\n        bool _previous\\n    ) external view returns (uint256);\\n\\n    function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount)\\n        external\\n        returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[2] memory _amounts,\\n        uint256 _min_mint_amount,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256[2] memory _balances\\n    ) external view returns (uint256);\\n\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256[2] memory _balances\\n    ) external view returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function remove_liquidity(\\n        uint256 _burn_amount,\\n        uint256[2] memory _min_amounts\\n    ) external returns (uint256[2] memory);\\n\\n    function remove_liquidity(\\n        uint256 _burn_amount,\\n        uint256[2] memory _min_amounts,\\n        address _receiver\\n    ) external returns (uint256[2] memory);\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] memory _amounts,\\n        uint256 _max_burn_amount\\n    ) external returns (uint256);\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] memory _amounts,\\n        uint256 _max_burn_amount,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _burn_amount, int128 i)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_withdraw_one_coin(\\n        uint256 _burn_amount,\\n        int128 i,\\n        bool _previous\\n    ) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _burn_amount,\\n        int128 i,\\n        uint256 _min_received\\n    ) external returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _burn_amount,\\n        int128 i,\\n        uint256 _min_received,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function ramp_A(uint256 _future_A, uint256 _future_time) external;\\n\\n    function stop_ramp_A() external;\\n\\n    function admin_balances(uint256 i) external view returns (uint256);\\n\\n    function withdraw_admin_fees() external;\\n\\n    function admin() external view returns (address);\\n\\n    function coins(uint256 arg0) external view returns (address);\\n\\n    function balances(uint256 arg0) external view returns (uint256);\\n\\n    function fee() external view returns (uint256);\\n\\n    function block_timestamp_last() external view returns (uint256);\\n\\n    function initial_A() external view returns (uint256);\\n\\n    function future_A() external view returns (uint256);\\n\\n    function initial_A_time() external view returns (uint256);\\n\\n    function future_A_time() external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function balanceOf(address arg0) external view returns (uint256);\\n\\n    function allowance(address arg0, address arg1)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUbiquityFormulas.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\ninterface IUbiquityFormulas {\\n    function durationMultiply(\\n        uint256 _uLP,\\n        uint256 _weeks,\\n        uint256 _multiplier\\n    ) external pure returns (uint256 _shares);\\n\\n    function bonding(\\n        uint256 _shares,\\n        uint256 _currentShareValue,\\n        uint256 _targetPrice\\n    ) external pure returns (uint256 _uBOND);\\n\\n    function redeemBonds(\\n        uint256 _uBOND,\\n        uint256 _currentShareValue,\\n        uint256 _targetPrice\\n    ) external pure returns (uint256 _uLP);\\n\\n    function bondPrice(\\n        uint256 _totalULP,\\n        uint256 _totalUBOND,\\n        uint256 _targetPrice\\n    ) external pure returns (uint256 _priceUBOND);\\n\\n    function ugovMultiply(uint256 _multiplier, uint256 _price)\\n        external\\n        pure\\n        returns (uint256 _newMultiplier);\\n}\\n\"\r\n    },\r\n    \"contracts/UbiquityAlgorithmicDollar.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\nimport \\\"./interfaces/IIncentive.sol\\\";\\nimport \\\"./ERC20Ubiquity.sol\\\";\\n\\ncontract UbiquityAlgorithmicDollar is ERC20Ubiquity {\\n    /// @notice get associated incentive contract, 0 address if N/A\\n    mapping(address => address) public incentiveContract;\\n\\n    event IncentiveContractUpdate(\\n        address indexed _incentivized,\\n        address indexed _incentiveContract\\n    );\\n\\n    constructor(address _manager)\\n        ERC20Ubiquity(_manager, \\\"Ubiquity Algorithmic Dollar\\\", \\\"uAD\\\")\\n    {} // solhint-disable-line no-empty-blocks\\n\\n    /// @param account the account to incentivize\\n    /// @param incentive the associated incentive contract\\n    /// @notice only UAD manager can set Incentive contract\\n    function setIncentiveContract(address account, address incentive) external {\\n        require(\\n            ERC20Ubiquity.manager.hasRole(\\n                ERC20Ubiquity.manager.UBQ_TOKEN_MANAGER_ROLE(),\\n                msg.sender\\n            ),\\n            \\\"Dollar: must have admin role\\\"\\n        );\\n\\n        incentiveContract[account] = incentive;\\n        emit IncentiveContractUpdate(account, incentive);\\n    }\\n\\n    function _checkAndApplyIncentives(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        // incentive on sender\\n        address senderIncentive = incentiveContract[sender];\\n        if (senderIncentive != address(0)) {\\n            IIncentive(senderIncentive).incentivize(\\n                sender,\\n                recipient,\\n                msg.sender,\\n                amount\\n            );\\n        }\\n\\n        // incentive on recipient\\n        address recipientIncentive = incentiveContract[recipient];\\n        if (recipientIncentive != address(0)) {\\n            IIncentive(recipientIncentive).incentivize(\\n                sender,\\n                recipient,\\n                msg.sender,\\n                amount\\n            );\\n        }\\n\\n        // incentive on operator\\n        address operatorIncentive = incentiveContract[msg.sender];\\n        if (\\n            msg.sender != sender &&\\n            msg.sender != recipient &&\\n            operatorIncentive != address(0)\\n        ) {\\n            IIncentive(operatorIncentive).incentivize(\\n                sender,\\n                recipient,\\n                msg.sender,\\n                amount\\n            );\\n        }\\n\\n        // all incentive, if active applies to every transfer\\n        address allIncentive = incentiveContract[address(0)];\\n        if (allIncentive != address(0)) {\\n            IIncentive(allIncentive).incentivize(\\n                sender,\\n                recipient,\\n                msg.sender,\\n                amount\\n            );\\n        }\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal override {\\n        super._transfer(sender, recipient, amount);\\n        _checkAndApplyIncentives(sender, recipient, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BondingFormulas.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\nimport \\\"./BondingShareV2.sol\\\";\\nimport \\\"./libs/ABDKMathQuad.sol\\\";\\n\\nimport \\\"./interfaces/IMasterChefV2.sol\\\";\\n\\ncontract BondingFormulas {\\n    using ABDKMathQuad for uint256;\\n    using ABDKMathQuad for bytes16;\\n\\n    uint256 public constant ONE = uint256(1 ether); //   18 decimals\\n\\n    /// @dev formula UBQ Rights corresponding to a bonding shares LP amount\\n    /// @param _bond , bonding share\\n    /// @param _amount , amount of LP tokens\\n    /// @notice shares = (bond.shares * _amount )  / bond.lpAmount ;\\n    function sharesForLP(\\n        BondingShareV2.Bond memory _bond,\\n        uint256[2] memory _shareInfo,\\n        uint256 _amount\\n    ) public pure returns (uint256 _uLP) {\\n        bytes16 a = _shareInfo[0].fromUInt(); // shares amount\\n        bytes16 v = _amount.fromUInt();\\n        bytes16 t = _bond.lpAmount.fromUInt();\\n\\n        _uLP = a.mul(v).div(t).toUInt();\\n    }\\n\\n    /// @dev formula may add a decreasing rewards if locking end is near when removing liquidity\\n    /// @param _bond , bonding share\\n    /// @param _amount , amount of LP tokens\\n    /// @notice rewards = _amount;\\n    // solhint-disable-block  no-unused-vars\\n    /* solhint-disable no-unused-vars */\\n    function lpRewardsRemoveLiquidityNormalization(\\n        BondingShareV2.Bond memory _bond,\\n        uint256[2] memory _shareInfo,\\n        uint256 _amount\\n    ) public pure returns (uint256) {\\n        return _amount;\\n    }\\n\\n    /* solhint-enable no-unused-vars */\\n    /// @dev formula may add a decreasing rewards if locking end is near when adding liquidity\\n    /// @param _bond , bonding share\\n    /// @param _amount , amount of LP tokens\\n    /// @notice rewards = _amount;\\n    // solhint-disable-block  no-unused-vars\\n    /* solhint-disable no-unused-vars */\\n    function lpRewardsAddLiquidityNormalization(\\n        BondingShareV2.Bond memory _bond,\\n        uint256[2] memory _shareInfo,\\n        uint256 _amount\\n    ) public pure returns (uint256) {\\n        return _amount;\\n    }\\n\\n    /* solhint-enable no-unused-vars */\\n\\n    /// @dev formula to calculate the corrected amount to withdraw based on the proportion of\\n    ///      lp deposited against actual LP token on thge bonding contract\\n    /// @param _totalLpDeposited , Total amount of LP deposited by users\\n    /// @param _bondingLpBalance , actual bonding contract LP tokens balance minus lp rewards\\n    /// @param _amount , amount of LP tokens\\n    /// @notice corrected_amount = amount * ( bondingLpBalance / totalLpDeposited)\\n    ///         if there is more or the same amount of LP than deposited then do nothing\\n    function correctedAmountToWithdraw(\\n        uint256 _totalLpDeposited,\\n        uint256 _bondingLpBalance,\\n        uint256 _amount\\n    ) public pure returns (uint256) {\\n        if (_bondingLpBalance < _totalLpDeposited && _bondingLpBalance > 0) {\\n            // if there is less LP token inside the bonding contract that what have been deposited\\n            // we have to reduce proportionnaly the lp amount to withdraw\\n            return\\n                _amount\\n                    .fromUInt()\\n                    .mul(_bondingLpBalance.fromUInt())\\n                    .div(_totalLpDeposited.fromUInt())\\n                    .toUInt();\\n        }\\n        return _amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BondingShareV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol\\\";\\nimport \\\"./UbiquityAlgorithmicDollarManager.sol\\\";\\nimport \\\"./utils/SafeAddArray.sol\\\";\\n\\ncontract BondingShareV2 is ERC1155, ERC1155Burnable, ERC1155Pausable {\\n    using SafeAddArray for uint256[];\\n    struct Bond {\\n        // address of the minter\\n        address minter;\\n        // lp amount deposited by the user\\n        uint256 lpFirstDeposited;\\n        uint256 creationBlock;\\n        // lp that were already there when created\\n        uint256 lpRewardDebt;\\n        uint256 endBlock;\\n        // lp remaining for a user\\n        uint256 lpAmount;\\n    }\\n\\n    UbiquityAlgorithmicDollarManager public manager;\\n    // Mapping from account to operator approvals\\n    mapping(address => uint256[]) private _holderBalances;\\n    mapping(uint256 => Bond) private _bonds;\\n    uint256 private _totalLP;\\n    uint256 private _totalSupply;\\n\\n    // ----------- Modifiers -----------\\n    modifier onlyMinter() {\\n        require(\\n            manager.hasRole(manager.UBQ_MINTER_ROLE(), msg.sender),\\n            \\\"Governance token: not minter\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyBurner() {\\n        require(\\n            manager.hasRole(manager.UBQ_BURNER_ROLE(), msg.sender),\\n            \\\"Governance token: not burner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyPauser() {\\n        require(\\n            manager.hasRole(manager.PAUSER_ROLE(), msg.sender),\\n            \\\"Governance token: not pauser\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev constructor\\n     */\\n    constructor(address _manager, string memory uri) ERC1155(uri) {\\n        manager = UbiquityAlgorithmicDollarManager(_manager);\\n    }\\n\\n    /// @dev update bond LP amount , LP rewards debt and end block.\\n    /// @param _bondId bonding share id\\n    /// @param _lpAmount amount of LP token deposited\\n    /// @param _lpRewardDebt amount of excess LP token inside the bonding contract\\n    /// @param _endBlock end locking period block number\\n    function updateBond(\\n        uint256 _bondId,\\n        uint256 _lpAmount,\\n        uint256 _lpRewardDebt,\\n        uint256 _endBlock\\n    ) external onlyMinter whenNotPaused {\\n        Bond storage bond = _bonds[_bondId];\\n        uint256 curLpAmount = bond.lpAmount;\\n        if (curLpAmount > _lpAmount) {\\n            // we are removing LP\\n            _totalLP -= curLpAmount - _lpAmount;\\n        } else {\\n            // we are adding LP\\n            _totalLP += _lpAmount - curLpAmount;\\n        }\\n        bond.lpAmount = _lpAmount;\\n        bond.lpRewardDebt = _lpRewardDebt;\\n        bond.endBlock = _endBlock;\\n    }\\n\\n    // @dev Creates `amount` new tokens for `to`, of token type `id`.\\n    /// @param to owner address\\n    /// @param lpDeposited amount of LP token deposited\\n    /// @param lpRewardDebt amount of excess LP token inside the bonding contract\\n    /// @param endBlock block number when the locking period ends\\n    function mint(\\n        address to,\\n        uint256 lpDeposited,\\n        uint256 lpRewardDebt,\\n        uint256 endBlock\\n    ) public virtual onlyMinter whenNotPaused returns (uint256 id) {\\n        id = _totalSupply + 1;\\n        _mint(to, id, 1, bytes(\\\"\\\"));\\n        _totalSupply += 1;\\n        _holderBalances[to].add(id);\\n        Bond storage _bond = _bonds[id];\\n        _bond.minter = to;\\n        _bond.lpFirstDeposited = lpDeposited;\\n        _bond.lpAmount = lpDeposited;\\n        _bond.lpRewardDebt = lpRewardDebt;\\n        _bond.creationBlock = block.number;\\n        _bond.endBlock = endBlock;\\n        _totalLP += lpDeposited;\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC1155Pausable} and {Pausable-_pause}.\\n     *\\n     */\\n    function pause() public virtual onlyPauser {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC1155Pausable} and {Pausable-_unpause}.\\n     *\\n     */\\n    function unpause() public virtual onlyPauser {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public override whenNotPaused {\\n        super.safeTransferFrom(from, to, id, amount, data);\\n        _holderBalances[to].add(id);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override whenNotPaused {\\n        super.safeBatchTransferFrom(from, to, ids, amounts, data);\\n        _holderBalances[to].add(ids);\\n    }\\n\\n    /**\\n     * @dev Total amount of tokens  .\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev Total amount of LP tokens deposited.\\n     */\\n    function totalLP() public view virtual returns (uint256) {\\n        return _totalLP;\\n    }\\n\\n    /**\\n     * @dev return bond details.\\n     */\\n    function getBond(uint256 id) public view returns (Bond memory) {\\n        return _bonds[id];\\n    }\\n\\n    /**\\n     * @dev array of token Id held by the msg.sender.\\n     */\\n    function holderTokens(address holder)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return _holderBalances[holder];\\n    }\\n\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual override whenNotPaused {\\n        require(amount == 1, \\\"amount <> 1\\\");\\n        super._burn(account, id, 1);\\n        Bond storage _bond = _bonds[id];\\n        require(_bond.lpAmount == 0, \\\"LP <> 0\\\");\\n        _totalSupply -= 1;\\n    }\\n\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual override whenNotPaused {\\n        super._burnBatch(account, ids, amounts);\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            _totalSupply -= amounts[i];\\n        }\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155, ERC1155Pausable) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/UbiquityAlgorithmicDollarManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IUbiquityAlgorithmicDollar.sol\\\";\\nimport \\\"./interfaces/ICurveFactory.sol\\\";\\nimport \\\"./interfaces/IMetaPool.sol\\\";\\n\\nimport \\\"./TWAPOracle.sol\\\";\\n\\n/// @title A central config for the uAD system. Also acts as a central\\n/// access control manager.\\n/// @notice For storing constants. For storing variables and allowing them to\\n/// be changed by the admin (governance)\\n/// @dev This should be used as a central access control manager which other\\n/// contracts use to check permissions\\ncontract UbiquityAlgorithmicDollarManager is AccessControl {\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant UBQ_MINTER_ROLE = keccak256(\\\"UBQ_MINTER_ROLE\\\");\\n    bytes32 public constant UBQ_BURNER_ROLE = keccak256(\\\"UBQ_BURNER_ROLE\\\");\\n\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant COUPON_MANAGER_ROLE = keccak256(\\\"COUPON_MANAGER\\\");\\n    bytes32 public constant BONDING_MANAGER_ROLE = keccak256(\\\"BONDING_MANAGER\\\");\\n    bytes32 public constant INCENTIVE_MANAGER_ROLE =\\n        keccak256(\\\"INCENTIVE_MANAGER\\\");\\n    bytes32 public constant UBQ_TOKEN_MANAGER_ROLE =\\n        keccak256(\\\"UBQ_TOKEN_MANAGER_ROLE\\\");\\n    address public twapOracleAddress;\\n    address public debtCouponAddress;\\n    address public dollarTokenAddress; // uAD\\n    address public couponCalculatorAddress;\\n    address public dollarMintingCalculatorAddress;\\n    address public bondingShareAddress;\\n    address public bondingContractAddress;\\n    address public stableSwapMetaPoolAddress;\\n    address public curve3PoolTokenAddress; // 3CRV\\n    address public treasuryAddress;\\n    address public governanceTokenAddress; // uGOV\\n    address public sushiSwapPoolAddress; // sushi pool uAD-uGOV\\n    address public masterChefAddress;\\n    address public formulasAddress;\\n    address public autoRedeemTokenAddress; // uAR\\n    address public uarCalculatorAddress; // uAR calculator\\n\\n    //key = address of couponmanager, value = excessdollardistributor\\n    mapping(address => address) private _excessDollarDistributors;\\n\\n    modifier onlyAdmin() {\\n        require(\\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\n            \\\"uADMGR: Caller is not admin\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _admin) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _setupRole(UBQ_MINTER_ROLE, _admin);\\n        _setupRole(PAUSER_ROLE, _admin);\\n        _setupRole(COUPON_MANAGER_ROLE, _admin);\\n        _setupRole(BONDING_MANAGER_ROLE, _admin);\\n        _setupRole(INCENTIVE_MANAGER_ROLE, _admin);\\n        _setupRole(UBQ_TOKEN_MANAGER_ROLE, address(this));\\n    }\\n\\n    // TODO Add a generic setter for extra addresses that needs to be linked\\n    function setTwapOracleAddress(address _twapOracleAddress)\\n        external\\n        onlyAdmin\\n    {\\n        twapOracleAddress = _twapOracleAddress;\\n        // to be removed\\n\\n        TWAPOracle oracle = TWAPOracle(twapOracleAddress);\\n        oracle.update();\\n    }\\n\\n    function setuARTokenAddress(address _uarTokenAddress) external onlyAdmin {\\n        autoRedeemTokenAddress = _uarTokenAddress;\\n    }\\n\\n    function setDebtCouponAddress(address _debtCouponAddress)\\n        external\\n        onlyAdmin\\n    {\\n        debtCouponAddress = _debtCouponAddress;\\n    }\\n\\n    function setIncentiveToUAD(address _account, address _incentiveAddress)\\n        external\\n        onlyAdmin\\n    {\\n        IUbiquityAlgorithmicDollar(dollarTokenAddress).setIncentiveContract(\\n            _account,\\n            _incentiveAddress\\n        );\\n    }\\n\\n    function setDollarTokenAddress(address _dollarTokenAddress)\\n        external\\n        onlyAdmin\\n    {\\n        dollarTokenAddress = _dollarTokenAddress;\\n    }\\n\\n    function setGovernanceTokenAddress(address _governanceTokenAddress)\\n        external\\n        onlyAdmin\\n    {\\n        governanceTokenAddress = _governanceTokenAddress;\\n    }\\n\\n    function setSushiSwapPoolAddress(address _sushiSwapPoolAddress)\\n        external\\n        onlyAdmin\\n    {\\n        sushiSwapPoolAddress = _sushiSwapPoolAddress;\\n    }\\n\\n    function setUARCalculatorAddress(address _uarCalculatorAddress)\\n        external\\n        onlyAdmin\\n    {\\n        uarCalculatorAddress = _uarCalculatorAddress;\\n    }\\n\\n    function setCouponCalculatorAddress(address _couponCalculatorAddress)\\n        external\\n        onlyAdmin\\n    {\\n        couponCalculatorAddress = _couponCalculatorAddress;\\n    }\\n\\n    function setDollarMintingCalculatorAddress(\\n        address _dollarMintingCalculatorAddress\\n    ) external onlyAdmin {\\n        dollarMintingCalculatorAddress = _dollarMintingCalculatorAddress;\\n    }\\n\\n    function setExcessDollarsDistributor(\\n        address debtCouponManagerAddress,\\n        address excessCouponDistributor\\n    ) external onlyAdmin {\\n        _excessDollarDistributors[\\n            debtCouponManagerAddress\\n        ] = excessCouponDistributor;\\n    }\\n\\n    function setMasterChefAddress(address _masterChefAddress)\\n        external\\n        onlyAdmin\\n    {\\n        masterChefAddress = _masterChefAddress;\\n    }\\n\\n    function setFormulasAddress(address _formulasAddress) external onlyAdmin {\\n        formulasAddress = _formulasAddress;\\n    }\\n\\n    function setBondingShareAddress(address _bondingShareAddress)\\n        external\\n        onlyAdmin\\n    {\\n        bondingShareAddress = _bondingShareAddress;\\n    }\\n\\n    function setStableSwapMetaPoolAddress(address _stableSwapMetaPoolAddress)\\n        external\\n        onlyAdmin\\n    {\\n        stableSwapMetaPoolAddress = _stableSwapMetaPoolAddress;\\n    }\\n\\n    /**\\n    @notice set the bonding bontract smart contract address\\n    @dev bonding contract participants deposit  curve LP token\\n         for a certain duration to earn uGOV and more curve LP token\\n    @param _bondingContractAddress bonding contract address\\n     */\\n    function setBondingContractAddress(address _bondingContractAddress)\\n        external\\n        onlyAdmin\\n    {\\n        bondingContractAddress = _bondingContractAddress;\\n    }\\n\\n    /**\\n    @notice set the treasury address\\n    @dev the treasury fund is used to maintain the protocol\\n    @param _treasuryAddress treasury fund address\\n     */\\n    function setTreasuryAddress(address _treasuryAddress) external onlyAdmin {\\n        treasuryAddress = _treasuryAddress;\\n    }\\n\\n    /**\\n    @notice deploy a new Curve metapools for uAD Token uAD/3Pool\\n    @dev  From the curve documentation for uncollateralized algorithmic\\n    stablecoins amplification should be 5-10\\n    @param _curveFactory MetaPool factory address\\n    @param _crvBasePool Address of the base pool to use within the new metapool.\\n    @param _crv3PoolTokenAddress curve 3Pool token Address\\n    @param _amplificationCoefficient amplification coefficient. The smaller\\n     it is the closer to a constant product we are.\\n    @param _fee Trade fee, given as an integer with 1e10 precision.\\n    */\\n    function deployStableSwapPool(\\n        address _curveFactory,\\n        address _crvBasePool,\\n        address _crv3PoolTokenAddress,\\n        uint256 _amplificationCoefficient,\\n        uint256 _fee\\n    ) external onlyAdmin {\\n        // Create new StableSwap meta pool (uAD <-> 3Crv)\\n        address metaPool = ICurveFactory(_curveFactory).deploy_metapool(\\n            _crvBasePool,\\n            ERC20(dollarTokenAddress).name(),\\n            ERC20(dollarTokenAddress).symbol(),\\n            dollarTokenAddress,\\n            _amplificationCoefficient,\\n            _fee\\n        );\\n        stableSwapMetaPoolAddress = metaPool;\\n\\n        // Approve the newly-deployed meta pool to transfer this contract's funds\\n        uint256 crv3PoolTokenAmount = IERC20(_crv3PoolTokenAddress).balanceOf(\\n            address(this)\\n        );\\n        uint256 uADTokenAmount = IERC20(dollarTokenAddress).balanceOf(\\n            address(this)\\n        );\\n\\n        // safe approve revert if approve from non-zero to non-zero allowance\\n        IERC20(_crv3PoolTokenAddress).safeApprove(metaPool, 0);\\n        IERC20(_crv3PoolTokenAddress).safeApprove(\\n            metaPool,\\n            crv3PoolTokenAmount\\n        );\\n\\n        IERC20(dollarTokenAddress).safeApprove(metaPool, 0);\\n        IERC20(dollarTokenAddress).safeApprove(metaPool, uADTokenAmount);\\n\\n        // coin at index 0 is uAD and index 1 is 3CRV\\n        require(\\n            IMetaPool(metaPool).coins(0) == dollarTokenAddress &&\\n                IMetaPool(metaPool).coins(1) == _crv3PoolTokenAddress,\\n            \\\"uADMGR: COIN_ORDER_MISMATCH\\\"\\n        );\\n        // Add the initial liquidity to the StableSwap meta pool\\n        uint256[2] memory amounts = [\\n            IERC20(dollarTokenAddress).balanceOf(address(this)),\\n            IERC20(_crv3PoolTokenAddress).balanceOf(address(this))\\n        ];\\n\\n        // set curve 3Pool address\\n        curve3PoolTokenAddress = _crv3PoolTokenAddress;\\n        IMetaPool(metaPool).add_liquidity(amounts, 0, msg.sender);\\n    }\\n\\n    function getExcessDollarsDistributor(address _debtCouponManagerAddress)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return _excessDollarDistributors[_debtCouponManagerAddress];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISablier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol. SEE BELOW FOR SOURCE. !!\\npragma solidity ^0.8.3;\\n\\ninterface ISablier {\\n    event CreateCompoundingStream(\\n        uint256 indexed streamId,\\n        uint256 exchangeRate,\\n        uint256 senderSharePercentage,\\n        uint256 recipientSharePercentage\\n    );\\n    event PayInterest(\\n        uint256 indexed streamId,\\n        uint256 senderInterest,\\n        uint256 recipientInterest,\\n        uint256 sablierInterest\\n    );\\n    event TakeEarnings(address indexed tokenAddress, uint256 indexed amount);\\n    event UpdateFee(uint256 indexed fee);\\n    event Paused(address account);\\n    event Unpaused(address account);\\n    event PauserAdded(address indexed account);\\n    event PauserRemoved(address indexed account);\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event CreateStream(\\n        uint256 indexed streamId,\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 deposit,\\n        address tokenAddress,\\n        uint256 startTime,\\n        uint256 stopTime\\n    );\\n    event WithdrawFromStream(\\n        uint256 indexed streamId,\\n        address indexed recipient,\\n        uint256 amount\\n    );\\n    event CancelStream(\\n        uint256 indexed streamId,\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 senderBalance,\\n        uint256 recipientBalance\\n    );\\n\\n    function unpause() external;\\n\\n    function cancelStream(uint256 streamId) external returns (bool);\\n\\n    function withdrawFromStream(uint256 streamId, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function initialize() external;\\n\\n    function createCompoundingStream(\\n        address recipient,\\n        uint256 deposit,\\n        address tokenAddress,\\n        uint256 startTime,\\n        uint256 stopTime,\\n        uint256 senderSharePercentage,\\n        uint256 recipientSharePercentage\\n    ) external returns (uint256);\\n\\n    function addPauser(address account) external;\\n\\n    function pause() external;\\n\\n    function interestOf(uint256 streamId, uint256 amount)\\n        external\\n        returns (\\n            uint256 senderInterest,\\n            uint256 recipientInterest,\\n            uint256 sablierInterest\\n        );\\n\\n    function updateFee(uint256 feePercentage) external;\\n\\n    function takeEarnings(address tokenAddress, uint256 amount) external;\\n\\n    function initialize(address sender) external;\\n\\n    function createStream(\\n        address recipient,\\n        uint256 deposit,\\n        address tokenAddress,\\n        uint256 startTime,\\n        uint256 stopTime\\n    ) external returns (uint256);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function getEarnings(address tokenAddress) external view returns (uint256);\\n\\n    function nextStreamId() external view returns (uint256);\\n\\n    function getCompoundingStream(uint256 streamId)\\n        external\\n        view\\n        returns (\\n            address sender,\\n            address recipient,\\n            uint256 deposit,\\n            address tokenAddress,\\n            uint256 startTime,\\n            uint256 stopTime,\\n            uint256 remainingBalance,\\n            uint256 ratePerSecond,\\n            uint256 exchangeRateInitial,\\n            uint256 senderSharePercentage,\\n            uint256 recipientSharePercentage\\n        );\\n\\n    function balanceOf(uint256 streamId, address who)\\n        external\\n        view\\n        returns (uint256 balance);\\n\\n    function isPauser(address account) external view returns (bool);\\n\\n    function paused() external view returns (bool);\\n\\n    function getStream(uint256 streamId)\\n        external\\n        view\\n        returns (\\n            address sender,\\n            address recipient,\\n            uint256 deposit,\\n            address tokenAddress,\\n            uint256 startTime,\\n            uint256 stopTime,\\n            uint256 remainingBalance,\\n            uint256 ratePerSecond\\n        );\\n\\n    function owner() external view returns (address);\\n\\n    function isOwner() external view returns (bool);\\n\\n    function isCompoundingStream(uint256 streamId) external view returns (bool);\\n\\n    function deltaOf(uint256 streamId) external view returns (uint256 delta);\\n\\n    function cTokenManager() external view returns (address);\\n\\n    function fee() external view returns (uint256 mantissa);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMasterChefV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol. SEE BELOW FOR SOURCE. !!\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../MasterChefV2.sol\\\";\\n\\ninterface IMasterChefV2 {\\n    struct BondingShareInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n    }\\n    struct PoolInfo {\\n        uint256 lastRewardBlock; // Last block number that SUSHI distribution occurs.\\n        uint256 accuGOVPerShare; // Accumulated SUSHI per share, times 1e12. See below.\\n    }\\n\\n    event Deposit(address indexed user, uint256 amount, uint256 bondingShareID);\\n    event Withdraw(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 bondingShareID\\n    );\\n\\n    function deposit(\\n        address sender,\\n        uint256 amount,\\n        uint256 bondingShareID\\n    ) external;\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(\\n        address sender,\\n        uint256 amount,\\n        uint256 bondingShareID\\n    ) external;\\n\\n    // Info about a bondinh share\\n    function getBondingShareInfo(uint256 _id)\\n        external\\n        view\\n        returns (uint256[2] memory);\\n\\n    // Total amount of shares\\n    function totalShares() external view returns (uint256);\\n\\n    // View function to see pending SUSHIs on frontend.\\n    function pendingUGOV(address _user) external view returns (uint256);\\n}\\n\\n// THIS FILE WAS AUTOGENERATED FROM THE FOLLOWING ABI JSON:\\n\"\r\n    },\r\n    \"contracts/interfaces/ITWAPOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\ninterface ITWAPOracle {\\n    function update() external;\\n\\n    function consult(address token) external view returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/CollectableDust.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/utils/ICollectableDust.sol\\\";\\n\\nabstract contract CollectableDust is ICollectableDust {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address public constant ETH_ADDRESS =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    EnumerableSet.AddressSet internal _protocolTokens;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor() {}\\n\\n    function _addProtocolToken(address _token) internal {\\n        require(\\n            !_protocolTokens.contains(_token),\\n            \\\"collectable-dust::token-is-part-of-the-protocol\\\"\\n        );\\n        _protocolTokens.add(_token);\\n        emit ProtocolTokenAdded(_token);\\n    }\\n\\n    function _removeProtocolToken(address _token) internal {\\n        require(\\n            _protocolTokens.contains(_token),\\n            \\\"collectable-dust::token-not-part-of-the-protocol\\\"\\n        );\\n        _protocolTokens.remove(_token);\\n        emit ProtocolTokenRemoved(_token);\\n    }\\n\\n    function _sendDust(\\n        address _to,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        require(\\n            _to != address(0),\\n            \\\"collectable-dust::cant-send-dust-to-zero-address\\\"\\n        );\\n        require(\\n            !_protocolTokens.contains(_token),\\n            \\\"collectable-dust::token-is-part-of-the-protocol\\\"\\n        );\\n        if (_token == ETH_ADDRESS) {\\n            payable(_to).transfer(_amount);\\n        } else {\\n            IERC20(_token).safeTransfer(_to, _amount);\\n        }\\n        emit DustSent(_to, _token, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIncentive.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\n/// @title incentive contract interface\\n/// @notice Called by uAD token contract when transferring with an incentivized address\\n/// @dev should be appointed as a Minter or Burner as needed\\ninterface IIncentive {\\n    /// @notice apply incentives on transfer\\n    /// @param sender the sender address of uAD\\n    /// @param receiver the receiver address of uAD\\n    /// @param operator the operator (msg.sender) of the transfer\\n    /// @param amount the amount of uAD transferred\\n    function incentivize(\\n        address sender,\\n        address receiver,\\n        address operator,\\n        uint256 amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/ERC20Ubiquity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\\\";\\nimport \\\"./UbiquityAlgorithmicDollarManager.sol\\\";\\nimport \\\"./interfaces/IERC20Ubiquity.sol\\\";\\n\\n/// @title ERC20 Ubiquity preset\\n/// @author Ubiquity Algorithmic Dollar\\n/// @notice ERC20 with :\\n/// - ERC20 minter, burner and pauser\\n/// - draft-ERC20 permit\\n/// - Ubiquity Manager access control\\ncontract ERC20Ubiquity is IERC20Ubiquity, ERC20, ERC20Burnable, ERC20Pausable {\\n    UbiquityAlgorithmicDollarManager public manager;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,\\n    //                   uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public nonces;\\n    string private _tokenName;\\n    string private _symbol;\\n\\n    // ----------- Modifiers -----------\\n    modifier onlyMinter() {\\n        require(\\n            manager.hasRole(manager.UBQ_MINTER_ROLE(), msg.sender),\\n            \\\"Governance token: not minter\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyBurner() {\\n        require(\\n            manager.hasRole(manager.UBQ_BURNER_ROLE(), msg.sender),\\n            \\\"Governance token: not burner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyPauser() {\\n        require(\\n            manager.hasRole(manager.PAUSER_ROLE(), msg.sender),\\n            \\\"Governance token: not pauser\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(\\n            manager.hasRole(manager.DEFAULT_ADMIN_ROLE(), msg.sender),\\n            \\\"ERC20: deployer must be manager admin\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        address _manager,\\n        string memory name_,\\n        string memory symbol_\\n    ) ERC20(name_, symbol_) {\\n        _tokenName = name_;\\n        _symbol = symbol_;\\n        manager = UbiquityAlgorithmicDollarManager(_manager);\\n        // sender must be UbiquityAlgorithmicDollarManager roleAdmin\\n        // because he will get the admin, minter and pauser role on uAD and we want to\\n        // manage all permissions through the manager\\n        require(\\n            manager.hasRole(manager.DEFAULT_ADMIN_ROLE(), msg.sender),\\n            \\\"ERC20: deployer must be manager admin\\\"\\n        );\\n        uint256 chainId;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    // solhint-disable-next-line max-line-length\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(name())),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /// @notice setSymbol update token symbol\\n    /// @param newSymbol new token symbol\\n    function setSymbol(string memory newSymbol) external onlyAdmin {\\n        _symbol = newSymbol;\\n    }\\n\\n    /// @notice setName update token name\\n    /// @param newName new token name\\n    function setName(string memory newName) external onlyAdmin {\\n        _tokenName = newName;\\n    }\\n\\n    /// @notice permit spending of uAD. owner has signed a message allowing\\n    ///         spender to transfer up to amount uAD\\n    /// @param owner the uAD holder\\n    /// @param spender the approved operator\\n    /// @param value the amount approved\\n    /// @param deadline the deadline after which the approval is no longer valid\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(deadline >= block.timestamp, \\\"Dollar: EXPIRED\\\");\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(\\n                    abi.encode(\\n                        PERMIT_TYPEHASH,\\n                        owner,\\n                        spender,\\n                        value,\\n                        nonces[owner]++,\\n                        deadline\\n                    )\\n                )\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(\\n            recoveredAddress != address(0) && recoveredAddress == owner,\\n            \\\"Dollar: INVALID_SIGNATURE\\\"\\n        );\\n        _approve(owner, spender, value);\\n    }\\n\\n    /// @notice burn UAD tokens from caller\\n    /// @param amount the amount to burn\\n    function burn(uint256 amount)\\n        public\\n        override(ERC20Burnable, IERC20Ubiquity)\\n        whenNotPaused\\n    {\\n        super.burn(amount);\\n        emit Burning(msg.sender, amount);\\n    }\\n\\n    /// @notice burn uAD tokens from specified account\\n    /// @param account the account to burn from\\n    /// @param amount the amount to burn\\n    function burnFrom(address account, uint256 amount)\\n        public\\n        override(ERC20Burnable, IERC20Ubiquity)\\n        onlyBurner\\n        whenNotPaused // to suppress ? if BURNER_ROLE should do it even paused ?\\n    {\\n        _burn(account, amount);\\n        emit Burning(account, amount);\\n    }\\n\\n    // @dev Creates `amount` new tokens for `to`.\\n    function mint(address to, uint256 amount)\\n        public\\n        override\\n        onlyMinter\\n        whenNotPaused\\n    {\\n        _mint(to, amount);\\n        emit Minting(to, msg.sender, amount);\\n    }\\n\\n    // @dev Pauses all token transfers.\\n    function pause() public onlyPauser {\\n        _pause();\\n    }\\n\\n    // @dev Unpauses all token transfers.\\n    function unpause() public onlyPauser {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view override(ERC20) returns (string memory) {\\n        return _tokenName;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view override(ERC20) returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20, ERC20Pausable) {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual override whenNotPaused {\\n        super._transfer(sender, recipient, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Ubiquity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title ERC20 Ubiquiti preset interface\\n/// @author Ubiquity Algorithmic Dollar\\ninterface IERC20Ubiquity is IERC20 {\\n    // ----------- Events -----------\\n    event Minting(\\n        address indexed _to,\\n        address indexed _minter,\\n        uint256 _amount\\n    );\\n\\n    event Burning(address indexed _burned, uint256 _amount);\\n\\n    // ----------- State changing api -----------\\n    function burn(uint256 amount) external;\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    // ----------- Burner only state changing api -----------\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    // ----------- Minter only state changing api -----------\\n    function mint(address account, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUbiquityAlgorithmicDollar.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IERC20Ubiquity.sol\\\";\\n\\n/// @title UAD stablecoin interface\\n/// @author Ubiquity Algorithmic Dollar\\ninterface IUbiquityAlgorithmicDollar is IERC20Ubiquity {\\n    event IncentiveContractUpdate(\\n        address indexed _incentivized,\\n        address indexed _incentiveContract\\n    );\\n\\n    function setIncentiveContract(address account, address incentive) external;\\n\\n    function incentiveContract(address account) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICurveFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol. SEE BELOW FOR SOURCE. !!\\npragma solidity ^0.8.3;\\n\\ninterface ICurveFactory {\\n    event BasePoolAdded(address base_pool, address implementat);\\n    event MetaPoolDeployed(\\n        address coin,\\n        address base_pool,\\n        uint256 A,\\n        uint256 fee,\\n        address deployer\\n    );\\n\\n    function find_pool_for_coins(address _from, address _to)\\n        external\\n        view\\n        returns (address);\\n\\n    function find_pool_for_coins(\\n        address _from,\\n        address _to,\\n        uint256 i\\n    ) external view returns (address);\\n\\n    function get_n_coins(address _pool)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function get_coins(address _pool) external view returns (address[2] memory);\\n\\n    function get_underlying_coins(address _pool)\\n        external\\n        view\\n        returns (address[8] memory);\\n\\n    function get_decimals(address _pool)\\n        external\\n        view\\n        returns (uint256[2] memory);\\n\\n    function get_underlying_decimals(address _pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_rates(address _pool) external view returns (uint256[2] memory);\\n\\n    function get_balances(address _pool)\\n        external\\n        view\\n        returns (uint256[2] memory);\\n\\n    function get_underlying_balances(address _pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_A(address _pool) external view returns (uint256);\\n\\n    function get_fees(address _pool) external view returns (uint256, uint256);\\n\\n    function get_admin_balances(address _pool)\\n        external\\n        view\\n        returns (uint256[2] memory);\\n\\n    function get_coin_indices(\\n        address _pool,\\n        address _from,\\n        address _to\\n    )\\n        external\\n        view\\n        returns (\\n            int128,\\n            int128,\\n            bool\\n        );\\n\\n    function add_base_pool(\\n        address _base_pool,\\n        address _metapool_implementation,\\n        address _fee_receiver\\n    ) external;\\n\\n    function deploy_metapool(\\n        address _base_pool,\\n        string memory _name,\\n        string memory _symbol,\\n        address _coin,\\n        uint256 _A,\\n        uint256 _fee\\n    ) external returns (address);\\n\\n    function commit_transfer_ownership(address addr) external;\\n\\n    function accept_transfer_ownership() external;\\n\\n    function set_fee_receiver(address _base_pool, address _fee_receiver)\\n        external;\\n\\n    function convert_fees() external returns (bool);\\n\\n    function admin() external view returns (address);\\n\\n    function future_admin() external view returns (address);\\n\\n    function pool_list(uint256 arg0) external view returns (address);\\n\\n    function pool_count() external view returns (uint256);\\n\\n    function base_pool_list(uint256 arg0) external view returns (address);\\n\\n    function base_pool_count() external view returns (uint256);\\n\\n    function fee_receiver(address arg0) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/TWAPOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.3;\\n\\nimport \\\"./interfaces/IMetaPool.sol\\\";\\n\\ncontract TWAPOracle {\\n    address public immutable pool;\\n    address public immutable token0;\\n    address public immutable token1;\\n    uint256 public price0Average;\\n    uint256 public price1Average;\\n    uint256 public pricesBlockTimestampLast;\\n    uint256[2] public priceCumulativeLast;\\n\\n    constructor(\\n        address _pool,\\n        address _uADtoken0,\\n        address _curve3CRVtoken1\\n    ) {\\n        pool = _pool;\\n        // coin at index 0 is uAD and index 1 is 3CRV\\n        require(\\n            IMetaPool(_pool).coins(0) == _uADtoken0 &&\\n                IMetaPool(_pool).coins(1) == _curve3CRVtoken1,\\n            \\\"TWAPOracle: COIN_ORDER_MISMATCH\\\"\\n        );\\n\\n        token0 = _uADtoken0;\\n        token1 = _curve3CRVtoken1;\\n\\n        uint256 _reserve0 = uint112(IMetaPool(_pool).balances(0));\\n        uint256 _reserve1 = uint112(IMetaPool(_pool).balances(1));\\n\\n        // ensure that there's liquidity in the pair\\n        require(_reserve0 != 0 && _reserve1 != 0, \\\"TWAPOracle: NO_RESERVES\\\");\\n        // ensure that pair balance is perfect\\n        require(_reserve0 == _reserve1, \\\"TWAPOracle: PAIR_UNBALANCED\\\");\\n        priceCumulativeLast = IMetaPool(_pool).get_price_cumulative_last();\\n        pricesBlockTimestampLast = IMetaPool(_pool).block_timestamp_last();\\n\\n        price0Average = 1 ether;\\n        price1Average = 1 ether;\\n    }\\n\\n    // calculate average price\\n    function update() external {\\n        (\\n            uint256[2] memory priceCumulative,\\n            uint256 blockTimestamp\\n        ) = _currentCumulativePrices();\\n\\n        if (blockTimestamp - pricesBlockTimestampLast > 0) {\\n            // get the balances between now and the last price cumulative snapshot\\n            uint256[2] memory twapBalances = IMetaPool(pool).get_twap_balances(\\n                priceCumulativeLast,\\n                priceCumulative,\\n                blockTimestamp - pricesBlockTimestampLast\\n            );\\n\\n            // price to exchange amounIn uAD to 3CRV based on TWAP\\n            price0Average = IMetaPool(pool).get_dy(0, 1, 1 ether, twapBalances);\\n            // price to exchange amounIn 3CRV to uAD  based on TWAP\\n            price1Average = IMetaPool(pool).get_dy(1, 0, 1 ether, twapBalances);\\n            // we update the priceCumulative\\n            priceCumulativeLast = priceCumulative;\\n            pricesBlockTimestampLast = blockTimestamp;\\n        }\\n    }\\n\\n    // note this will always return 0 before update has been called successfully\\n    // for the first time.\\n    function consult(address token) external view returns (uint256 amountOut) {\\n        if (token == token0) {\\n            // price to exchange 1 uAD to 3CRV based on TWAP\\n            amountOut = price0Average;\\n        } else {\\n            require(token == token1, \\\"TWAPOracle: INVALID_TOKEN\\\");\\n            // price to exchange 1 3CRV to uAD  based on TWAP\\n            amountOut = price1Average;\\n        }\\n    }\\n\\n    function _currentCumulativePrices()\\n        internal\\n        view\\n        returns (uint256[2] memory priceCumulative, uint256 blockTimestamp)\\n    {\\n        priceCumulative = IMetaPool(pool).get_price_cumulative_last();\\n        blockTimestamp = IMetaPool(pool).block_timestamp_last();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/ABDKMathQuad.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math Quad Smart Contract Library.  Copyright © 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with IEEE 754\\n * quadruple-precision binary floating-point numbers (quadruple precision\\n * numbers).  As long as quadruple precision numbers are 16-bytes long, they are\\n * represented by bytes16 type.\\n */\\nlibrary ABDKMathQuad {\\n    /*\\n     * 0.\\n     */\\n    bytes16 private constant _POSITIVE_ZERO =\\n        0x00000000000000000000000000000000;\\n\\n    /*\\n     * -0.\\n     */\\n    bytes16 private constant _NEGATIVE_ZERO =\\n        0x80000000000000000000000000000000;\\n\\n    /*\\n     * +Infinity.\\n     */\\n    bytes16 private constant _POSITIVE_INFINITY =\\n        0x7FFF0000000000000000000000000000;\\n\\n    /*\\n     * -Infinity.\\n     */\\n    bytes16 private constant _NEGATIVE_INFINITY =\\n        0xFFFF0000000000000000000000000000;\\n\\n    /*\\n     * Canonical NaN value.\\n     */\\n    bytes16 private constant NaN = 0x7FFF8000000000000000000000000000;\\n\\n    /**\\n     * Convert signed 256-bit integer number into quadruple precision number.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @return quadruple precision number\\n     */\\n    function fromInt(int256 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (x == 0) return bytes16(0);\\n            else {\\n                // We rely on overflow behavior here\\n                uint256 result = uint256(x > 0 ? x : -x);\\n\\n                uint256 msb = mostSignificantBit(result);\\n                if (msb < 112) result <<= 112 - msb;\\n                else if (msb > 112) result >>= msb - 112;\\n\\n                result =\\n                    (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                    ((16383 + msb) << 112);\\n                if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n                return bytes16(uint128(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into signed 256-bit integer number\\n     * rounding towards zero.  Revert on overflow.\\n     *\\n     * @param x quadruple precision number\\n     * @return signed 256-bit integer number\\n     */\\n    function toInt(bytes16 x) internal pure returns (int256) {\\n        unchecked {\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n\\n            require(exponent <= 16638); // Overflow\\n            if (exponent < 16383) return 0; // Underflow\\n\\n            uint256 result = (uint256(uint128(x)) &\\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                0x10000000000000000000000000000;\\n\\n            if (exponent < 16495) result >>= 16495 - exponent;\\n            else if (exponent > 16495) result <<= exponent - 16495;\\n\\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\\n                // Negative\\n                require(\\n                    result <=\\n                        0x8000000000000000000000000000000000000000000000000000000000000000\\n                );\\n                return -int256(result); // We rely on overflow behavior here\\n            } else {\\n                require(\\n                    result <=\\n                        0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                );\\n                return int256(result);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert unsigned 256-bit integer number into quadruple precision number.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return quadruple precision number\\n     */\\n    function fromUInt(uint256 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (x == 0) return bytes16(0);\\n            else {\\n                uint256 result = x;\\n\\n                uint256 msb = mostSignificantBit(result);\\n                if (msb < 112) result <<= 112 - msb;\\n                else if (msb > 112) result >>= msb - 112;\\n\\n                result =\\n                    (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                    ((16383 + msb) << 112);\\n\\n                return bytes16(uint128(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into unsigned 256-bit integer number\\n     * rounding towards zero.  Revert on underflow.  Note, that negative floating\\n     * point numbers in range (-1.0 .. 0.0) may be converted to unsigned integer\\n     * without error, because they are rounded to zero.\\n     *\\n     * @param x quadruple precision number\\n     * @return unsigned 256-bit integer number\\n     */\\n    function toUInt(bytes16 x) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n\\n            if (exponent < 16383) return 0; // Underflow\\n\\n            require(uint128(x) < 0x80000000000000000000000000000000); // Negative\\n\\n            require(exponent <= 16638); // Overflow\\n            uint256 result = (uint256(uint128(x)) &\\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                0x10000000000000000000000000000;\\n\\n            if (exponent < 16495) result >>= 16495 - exponent;\\n            else if (exponent > 16495) result <<= exponent - 16495;\\n\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 128.128 bit fixed point number into quadruple precision\\n     * number.\\n     *\\n     * @param x signed 128.128 bit fixed point number\\n     * @return quadruple precision number\\n     */\\n    function from128x128(int256 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (x == 0) return bytes16(0);\\n            else {\\n                // We rely on overflow behavior here\\n                uint256 result = uint256(x > 0 ? x : -x);\\n\\n                uint256 msb = mostSignificantBit(result);\\n                if (msb < 112) result <<= 112 - msb;\\n                else if (msb > 112) result >>= msb - 112;\\n\\n                result =\\n                    (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                    ((16255 + msb) << 112);\\n                if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n                return bytes16(uint128(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into signed 128.128 bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x quadruple precision number\\n     * @return signed 128.128 bit fixed point number\\n     */\\n    function to128x128(bytes16 x) internal pure returns (int256) {\\n        unchecked {\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n\\n            require(exponent <= 16510); // Overflow\\n            if (exponent < 16255) return 0; // Underflow\\n\\n            uint256 result = (uint256(uint128(x)) &\\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                0x10000000000000000000000000000;\\n\\n            if (exponent < 16367) result >>= 16367 - exponent;\\n            else if (exponent > 16367) result <<= exponent - 16367;\\n\\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\\n                // Negative\\n                require(\\n                    result <=\\n                        0x8000000000000000000000000000000000000000000000000000000000000000\\n                );\\n                return -int256(result); // We rely on overflow behavior here\\n            } else {\\n                require(\\n                    result <=\\n                        0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                );\\n                return int256(result);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 bit fixed point number into quadruple precision\\n     * number.\\n     *\\n     * @param x signed 64.64 bit fixed point number\\n     * @return quadruple precision number\\n     */\\n    function from64x64(int128 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (x == 0) return bytes16(0);\\n            else {\\n                // We rely on overflow behavior here\\n                uint256 result = uint128(x > 0 ? x : -x);\\n\\n                uint256 msb = mostSignificantBit(result);\\n                if (msb < 112) result <<= 112 - msb;\\n                else if (msb > 112) result >>= msb - 112;\\n\\n                result =\\n                    (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                    ((16319 + msb) << 112);\\n                if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n                return bytes16(uint128(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into signed 64.64 bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x quadruple precision number\\n     * @return signed 64.64 bit fixed point number\\n     */\\n    function to64x64(bytes16 x) internal pure returns (int128) {\\n        unchecked {\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n\\n            require(exponent <= 16446); // Overflow\\n            if (exponent < 16319) return 0; // Underflow\\n\\n            uint256 result = (uint256(uint128(x)) &\\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                0x10000000000000000000000000000;\\n\\n            if (exponent < 16431) result >>= 16431 - exponent;\\n            else if (exponent > 16431) result <<= exponent - 16431;\\n\\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\\n                // Negative\\n                require(result <= 0x80000000000000000000000000000000);\\n                return -int128(int256(result)); // We rely on overflow behavior here\\n            } else {\\n                require(result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n                return int128(int256(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert octuple precision number into quadruple precision number.\\n     *\\n     * @param x octuple precision number\\n     * @return quadruple precision number\\n     */\\n    function fromOctuple(bytes32 x) internal pure returns (bytes16) {\\n        unchecked {\\n            bool negative = x &\\n                0x8000000000000000000000000000000000000000000000000000000000000000 >\\n                0;\\n\\n            uint256 exponent = (uint256(x) >> 236) & 0x7FFFF;\\n            uint256 significand = uint256(x) &\\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (exponent == 0x7FFFF) {\\n                if (significand > 0) return NaN;\\n                else return negative ? _NEGATIVE_INFINITY : _POSITIVE_INFINITY;\\n            }\\n\\n            if (exponent > 278526)\\n                return negative ? _NEGATIVE_INFINITY : _POSITIVE_INFINITY;\\n            else if (exponent < 245649)\\n                return negative ? _NEGATIVE_ZERO : _POSITIVE_ZERO;\\n            else if (exponent < 245761) {\\n                significand =\\n                    (significand |\\n                        0x100000000000000000000000000000000000000000000000000000000000) >>\\n                    (245885 - exponent);\\n                exponent = 0;\\n            } else {\\n                significand >>= 124;\\n                exponent -= 245760;\\n            }\\n\\n            uint128 result = uint128(significand | (exponent << 112));\\n            if (negative) result |= 0x80000000000000000000000000000000;\\n\\n            return bytes16(result);\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into octuple precision number.\\n     *\\n     * @param x quadruple precision number\\n     * @return octuple precision number\\n     */\\n    function toOctuple(bytes16 x) internal pure returns (bytes32) {\\n        unchecked {\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n\\n            uint256 result = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (exponent == 0x7FFF)\\n                exponent = 0x7FFFF; // Infinity or NaN\\n            else if (exponent == 0) {\\n                if (result > 0) {\\n                    uint256 msb = mostSignificantBit(result);\\n                    result =\\n                        (result << (236 - msb)) &\\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    exponent = 245649 + msb;\\n                }\\n            } else {\\n                result <<= 124;\\n                exponent += 245760;\\n            }\\n\\n            result |= exponent << 236;\\n            if (uint128(x) >= 0x80000000000000000000000000000000)\\n                result |= 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n            return bytes32(result);\\n        }\\n    }\\n\\n    /**\\n     * Convert double precision number into quadruple precision number.\\n     *\\n     * @param x double precision number\\n     * @return quadruple precision number\\n     */\\n    function fromDouble(bytes8 x) internal pure returns (bytes16) {\\n        unchecked {\\n            uint256 exponent = (uint64(x) >> 52) & 0x7FF;\\n\\n            uint256 result = uint64(x) & 0xFFFFFFFFFFFFF;\\n\\n            if (exponent == 0x7FF)\\n                exponent = 0x7FFF; // Infinity or NaN\\n            else if (exponent == 0) {\\n                if (result > 0) {\\n                    uint256 msb = mostSignificantBit(result);\\n                    result =\\n                        (result << (112 - msb)) &\\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    exponent = 15309 + msb;\\n                }\\n            } else {\\n                result <<= 60;\\n                exponent += 15360;\\n            }\\n\\n            result |= exponent << 112;\\n            if (x & 0x8000000000000000 > 0)\\n                result |= 0x80000000000000000000000000000000;\\n\\n            return bytes16(uint128(result));\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into double precision number.\\n     *\\n     * @param x quadruple precision number\\n     * @return double precision number\\n     */\\n    function toDouble(bytes16 x) internal pure returns (bytes8) {\\n        unchecked {\\n            bool negative = uint128(x) >= 0x80000000000000000000000000000000;\\n\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n            uint256 significand = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (exponent == 0x7FFF) {\\n                if (significand > 0) return 0x7FF8000000000000;\\n                // NaN\\n                else\\n                    return\\n                        negative\\n                            ? bytes8(0xFFF0000000000000) // -Infinity\\n                            : bytes8(0x7FF0000000000000); // Infinity\\n            }\\n\\n            if (exponent > 17406)\\n                return\\n                    negative\\n                        ? bytes8(0xFFF0000000000000) // -Infinity\\n                        : bytes8(0x7FF0000000000000);\\n            // Infinity\\n            else if (exponent < 15309)\\n                return\\n                    negative\\n                        ? bytes8(0x8000000000000000) // -0\\n                        : bytes8(0x0000000000000000);\\n            // 0\\n            else if (exponent < 15361) {\\n                significand =\\n                    (significand | 0x10000000000000000000000000000) >>\\n                    (15421 - exponent);\\n                exponent = 0;\\n            } else {\\n                significand >>= 60;\\n                exponent -= 15360;\\n            }\\n\\n            uint64 result = uint64(significand | (exponent << 52));\\n            if (negative) result |= 0x8000000000000000;\\n\\n            return bytes8(result);\\n        }\\n    }\\n\\n    /**\\n     * Test whether given quadruple precision number is NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @return true if x is NaN, false otherwise\\n     */\\n    function isNaN(bytes16 x) internal pure returns (bool) {\\n        unchecked {\\n            return\\n                uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF >\\n                0x7FFF0000000000000000000000000000;\\n        }\\n    }\\n\\n    /**\\n     * Test whether given quadruple precision number is positive or negative\\n     * infinity.\\n     *\\n     * @param x quadruple precision number\\n     * @return true if x is positive or negative infinity, false otherwise\\n     */\\n    function isInfinity(bytes16 x) internal pure returns (bool) {\\n        unchecked {\\n            return\\n                uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ==\\n                0x7FFF0000000000000000000000000000;\\n        }\\n    }\\n\\n    /**\\n     * Calculate sign of x, i.e. -1 if x is negative, 0 if x if zero, and 1 if x\\n     * is positive.  Note that sign (-0) is zero.  Revert if x is NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @return sign of x\\n     */\\n    function sign(bytes16 x) internal pure returns (int8) {\\n        unchecked {\\n            uint128 absoluteX = uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            require(absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n            if (absoluteX == 0) return 0;\\n            else if (uint128(x) >= 0x80000000000000000000000000000000)\\n                return -1;\\n            else return 1;\\n        }\\n    }\\n\\n    /**\\n     * Calculate sign (x - y).  Revert if either argument is NaN, or both\\n     * arguments are infinities of the same sign.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return sign (x - y)\\n     */\\n    function cmp(bytes16 x, bytes16 y) internal pure returns (int8) {\\n        unchecked {\\n            uint128 absoluteX = uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            require(absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n            uint128 absoluteY = uint128(y) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            require(absoluteY <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n            // Not infinities of the same sign\\n            require(x != y || absoluteX < 0x7FFF0000000000000000000000000000);\\n\\n            if (x == y) return 0;\\n            else {\\n                bool negativeX = uint128(x) >=\\n                    0x80000000000000000000000000000000;\\n                bool negativeY = uint128(y) >=\\n                    0x80000000000000000000000000000000;\\n\\n                if (negativeX) {\\n                    if (negativeY) return absoluteX > absoluteY ? -1 : int8(1);\\n                    else return -1;\\n                } else {\\n                    if (negativeY) return 1;\\n                    else return absoluteX > absoluteY ? int8(1) : -1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Test whether x equals y.  NaN, infinity, and -infinity are not equal to\\n     * anything.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return true if x equals to y, false otherwise\\n     */\\n    function eq(bytes16 x, bytes16 y) internal pure returns (bool) {\\n        unchecked {\\n            if (x == y) {\\n                return\\n                    uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF <\\n                    0x7FFF0000000000000000000000000000;\\n            } else return false;\\n        }\\n    }\\n\\n    /**\\n     * Calculate x + y.  Special values behave in the following way:\\n     *\\n     * NaN + x = NaN for any x.\\n     * Infinity + x = Infinity for any finite x.\\n     * -Infinity + x = -Infinity for any finite x.\\n     * Infinity + Infinity = Infinity.\\n     * -Infinity + -Infinity = -Infinity.\\n     * Infinity + -Infinity = -Infinity + Infinity = NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function add(bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n        unchecked {\\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n            uint256 yExponent = (uint128(y) >> 112) & 0x7FFF;\\n\\n            if (xExponent == 0x7FFF) {\\n                if (yExponent == 0x7FFF) {\\n                    if (x == y) return x;\\n                    else return NaN;\\n                } else return x;\\n            } else if (yExponent == 0x7FFF) return y;\\n            else {\\n                bool xSign = uint128(x) >= 0x80000000000000000000000000000000;\\n                uint256 xSignifier = uint128(x) &\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (xExponent == 0) xExponent = 1;\\n                else xSignifier |= 0x10000000000000000000000000000;\\n\\n                bool ySign = uint128(y) >= 0x80000000000000000000000000000000;\\n                uint256 ySignifier = uint128(y) &\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (yExponent == 0) yExponent = 1;\\n                else ySignifier |= 0x10000000000000000000000000000;\\n\\n                if (xSignifier == 0)\\n                    return y == _NEGATIVE_ZERO ? _POSITIVE_ZERO : y;\\n                else if (ySignifier == 0)\\n                    return x == _NEGATIVE_ZERO ? _POSITIVE_ZERO : x;\\n                else {\\n                    int256 delta = int256(xExponent) - int256(yExponent);\\n\\n                    if (xSign == ySign) {\\n                        if (delta > 112) return x;\\n                        else if (delta > 0) ySignifier >>= uint256(delta);\\n                        else if (delta < -112) return y;\\n                        else if (delta < 0) {\\n                            xSignifier >>= uint256(-delta);\\n                            xExponent = yExponent;\\n                        }\\n\\n                        xSignifier += ySignifier;\\n\\n                        if (xSignifier >= 0x20000000000000000000000000000) {\\n                            xSignifier >>= 1;\\n                            xExponent += 1;\\n                        }\\n\\n                        if (xExponent == 0x7FFF)\\n                            return\\n                                xSign ? _NEGATIVE_INFINITY : _POSITIVE_INFINITY;\\n                        else {\\n                            if (xSignifier < 0x10000000000000000000000000000)\\n                                xExponent = 0;\\n                            else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n                            return\\n                                bytes16(\\n                                    uint128(\\n                                        (\\n                                            xSign\\n                                                ? 0x80000000000000000000000000000000\\n                                                : 0\\n                                        ) |\\n                                            (xExponent << 112) |\\n                                            xSignifier\\n                                    )\\n                                );\\n                        }\\n                    } else {\\n                        if (delta > 0) {\\n                            xSignifier <<= 1;\\n                            xExponent -= 1;\\n                        } else if (delta < 0) {\\n                            ySignifier <<= 1;\\n                            xExponent = yExponent - 1;\\n                        }\\n\\n                        if (delta > 112) ySignifier = 1;\\n                        else if (delta > 1)\\n                            ySignifier =\\n                                ((ySignifier - 1) >> uint256(delta - 1)) +\\n                                1;\\n                        else if (delta < -112) xSignifier = 1;\\n                        else if (delta < -1)\\n                            xSignifier =\\n                                ((xSignifier - 1) >> uint256(-delta - 1)) +\\n                                1;\\n\\n                        if (xSignifier >= ySignifier) xSignifier -= ySignifier;\\n                        else {\\n                            xSignifier = ySignifier - xSignifier;\\n                            xSign = ySign;\\n                        }\\n\\n                        if (xSignifier == 0) return _POSITIVE_ZERO;\\n\\n                        uint256 msb = mostSignificantBit(xSignifier);\\n\\n                        if (msb == 113) {\\n                            xSignifier =\\n                                (xSignifier >> 1) &\\n                                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                            xExponent += 1;\\n                        } else if (msb < 112) {\\n                            uint256 shift = 112 - msb;\\n                            if (xExponent > shift) {\\n                                xSignifier =\\n                                    (xSignifier << shift) &\\n                                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                                xExponent -= shift;\\n                            } else {\\n                                xSignifier <<= xExponent - 1;\\n                                xExponent = 0;\\n                            }\\n                        } else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n                        if (xExponent == 0x7FFF)\\n                            return\\n                                xSign ? _NEGATIVE_INFINITY : _POSITIVE_INFINITY;\\n                        else\\n                            return\\n                                bytes16(\\n                                    uint128(\\n                                        (\\n                                            xSign\\n                                                ? 0x80000000000000000000000000000000\\n                                                : 0\\n                                        ) |\\n                                            (xExponent << 112) |\\n                                            xSignifier\\n                                    )\\n                                );\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x - y.  Special values behave in the following way:\\n     *\\n     * NaN - x = NaN for any x.\\n     * Infinity - x = Infinity for any finite x.\\n     * -Infinity - x = -Infinity for any finite x.\\n     * Infinity - -Infinity = Infinity.\\n     * -Infinity - Infinity = -Infinity.\\n     * Infinity - Infinity = -Infinity - -Infinity = NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function sub(bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n        unchecked {\\n            return add(x, y ^ 0x80000000000000000000000000000000);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y.  Special values behave in the following way:\\n     *\\n     * NaN * x = NaN for any x.\\n     * Infinity * x = Infinity for any finite positive x.\\n     * Infinity * x = -Infinity for any finite negative x.\\n     * -Infinity * x = -Infinity for any finite positive x.\\n     * -Infinity * x = Infinity for any finite negative x.\\n     * Infinity * 0 = NaN.\\n     * -Infinity * 0 = NaN.\\n     * Infinity * Infinity = Infinity.\\n     * Infinity * -Infinity = -Infinity.\\n     * -Infinity * Infinity = -Infinity.\\n     * -Infinity * -Infinity = Infinity.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function mul(bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n        unchecked {\\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n            uint256 yExponent = (uint128(y) >> 112) & 0x7FFF;\\n\\n            if (xExponent == 0x7FFF) {\\n                if (yExponent == 0x7FFF) {\\n                    if (x == y)\\n                        return x ^ (y & 0x80000000000000000000000000000000);\\n                    else if (x ^ y == 0x80000000000000000000000000000000)\\n                        return x | y;\\n                    else return NaN;\\n                } else {\\n                    if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n                    else return x ^ (y & 0x80000000000000000000000000000000);\\n                }\\n            } else if (yExponent == 0x7FFF) {\\n                if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n                else return y ^ (x & 0x80000000000000000000000000000000);\\n            } else {\\n                uint256 xSignifier = uint128(x) &\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (xExponent == 0) xExponent = 1;\\n                else xSignifier |= 0x10000000000000000000000000000;\\n\\n                uint256 ySignifier = uint128(y) &\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (yExponent == 0) yExponent = 1;\\n                else ySignifier |= 0x10000000000000000000000000000;\\n\\n                xSignifier *= ySignifier;\\n                if (xSignifier == 0)\\n                    return\\n                        (x ^ y) & 0x80000000000000000000000000000000 > 0\\n                            ? _NEGATIVE_ZERO\\n                            : _POSITIVE_ZERO;\\n\\n                xExponent += yExponent;\\n\\n                uint256 msb = xSignifier >=\\n                    0x200000000000000000000000000000000000000000000000000000000\\n                    ? 225\\n                    : xSignifier >=\\n                        0x100000000000000000000000000000000000000000000000000000000\\n                    ? 224\\n                    : mostSignificantBit(xSignifier);\\n\\n                if (xExponent + msb < 16496) {\\n                    // Underflow\\n                    xExponent = 0;\\n                    xSignifier = 0;\\n                } else if (xExponent + msb < 16608) {\\n                    // Subnormal\\n                    if (xExponent < 16496) xSignifier >>= 16496 - xExponent;\\n                    else if (xExponent > 16496)\\n                        xSignifier <<= xExponent - 16496;\\n                    xExponent = 0;\\n                } else if (xExponent + msb > 49373) {\\n                    xExponent = 0x7FFF;\\n                    xSignifier = 0;\\n                } else {\\n                    if (msb > 112) xSignifier >>= msb - 112;\\n                    else if (msb < 112) xSignifier <<= 112 - msb;\\n\\n                    xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n                    xExponent = xExponent + msb - 16607;\\n                }\\n\\n                return\\n                    bytes16(\\n                        uint128(\\n                            uint128(\\n                                (x ^ y) & 0x80000000000000000000000000000000\\n                            ) |\\n                                (xExponent << 112) |\\n                                xSignifier\\n                        )\\n                    );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y.  Special values behave in the following way:\\n     *\\n     * NaN / x = NaN for any x.\\n     * x / NaN = NaN for any x.\\n     * Infinity / x = Infinity for any finite non-negative x.\\n     * Infinity / x = -Infinity for any finite negative x including -0.\\n     * -Infinity / x = -Infinity for any finite non-negative x.\\n     * -Infinity / x = Infinity for any finite negative x including -0.\\n     * x / Infinity = 0 for any finite non-negative x.\\n     * x / -Infinity = -0 for any finite non-negative x.\\n     * x / Infinity = -0 for any finite non-negative x including -0.\\n     * x / -Infinity = 0 for any finite non-negative x including -0.\\n     *\\n     * Infinity / Infinity = NaN.\\n     * Infinity / -Infinity = -NaN.\\n     * -Infinity / Infinity = -NaN.\\n     * -Infinity / -Infinity = NaN.\\n     *\\n     * Division by zero behaves in the following way:\\n     *\\n     * x / 0 = Infinity for any finite positive x.\\n     * x / -0 = -Infinity for any finite positive x.\\n     * x / 0 = -Infinity for any finite negative x.\\n     * x / -0 = Infinity for any finite negative x.\\n     * 0 / 0 = NaN.\\n     * 0 / -0 = NaN.\\n     * -0 / 0 = NaN.\\n     * -0 / -0 = NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function div(bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n        unchecked {\\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n            uint256 yExponent = (uint128(y) >> 112) & 0x7FFF;\\n\\n            if (xExponent == 0x7FFF) {\\n                if (yExponent == 0x7FFF) return NaN;\\n                else return x ^ (y & 0x80000000000000000000000000000000);\\n            } else if (yExponent == 0x7FFF) {\\n                if (y & 0x0000FFFFFFFFFFFFFFFFFFFFFFFFFFFF != 0) return NaN;\\n                else\\n                    return\\n                        _POSITIVE_ZERO |\\n                        ((x ^ y) & 0x80000000000000000000000000000000);\\n            } else if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) {\\n                if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n                else\\n                    return\\n                        _POSITIVE_INFINITY |\\n                        ((x ^ y) & 0x80000000000000000000000000000000);\\n            } else {\\n                uint256 ySignifier = uint128(y) &\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (yExponent == 0) yExponent = 1;\\n                else ySignifier |= 0x10000000000000000000000000000;\\n\\n                uint256 xSignifier = uint128(x) &\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (xExponent == 0) {\\n                    if (xSignifier != 0) {\\n                        uint256 shift = 226 - mostSignificantBit(xSignifier);\\n\\n                        xSignifier <<= shift;\\n\\n                        xExponent = 1;\\n                        yExponent += shift - 114;\\n                    }\\n                } else {\\n                    xSignifier =\\n                        (xSignifier | 0x10000000000000000000000000000) <<\\n                        114;\\n                }\\n\\n                xSignifier = xSignifier / ySignifier;\\n                if (xSignifier == 0)\\n                    return\\n                        (x ^ y) & 0x80000000000000000000000000000000 > 0\\n                            ? _NEGATIVE_ZERO\\n                            : _POSITIVE_ZERO;\\n\\n                assert(xSignifier >= 0x1000000000000000000000000000);\\n\\n                uint256 msb = xSignifier >= 0x80000000000000000000000000000\\n                    ? mostSignificantBit(xSignifier)\\n                    : xSignifier >= 0x40000000000000000000000000000\\n                    ? 114\\n                    : xSignifier >= 0x20000000000000000000000000000\\n                    ? 113\\n                    : 112;\\n\\n                if (xExponent + msb > yExponent + 16497) {\\n                    // Overflow\\n                    xExponent = 0x7FFF;\\n                    xSignifier = 0;\\n                } else if (xExponent + msb + 16380 < yExponent) {\\n                    // Underflow\\n                    xExponent = 0;\\n                    xSignifier = 0;\\n                } else if (xExponent + msb + 16268 < yExponent) {\\n                    // Subnormal\\n                    if (xExponent + 16380 > yExponent)\\n                        xSignifier <<= xExponent + 16380 - yExponent;\\n                    else if (xExponent + 16380 < yExponent)\\n                        xSignifier >>= yExponent - xExponent - 16380;\\n\\n                    xExponent = 0;\\n                } else {\\n                    // Normal\\n                    if (msb > 112) xSignifier >>= msb - 112;\\n\\n                    xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n                    xExponent = xExponent + msb + 16269 - yExponent;\\n                }\\n\\n                return\\n                    bytes16(\\n                        uint128(\\n                            uint128(\\n                                (x ^ y) & 0x80000000000000000000000000000000\\n                            ) |\\n                                (xExponent << 112) |\\n                                xSignifier\\n                        )\\n                    );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate -x.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function neg(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            return x ^ 0x80000000000000000000000000000000;\\n        }\\n    }\\n\\n    /**\\n     * Calculate |x|.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function abs(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            return x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        }\\n    }\\n\\n    /**\\n     * Calculate square root of x.  Return NaN on negative x excluding -0.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function sqrt(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (uint128(x) > 0x80000000000000000000000000000000) return NaN;\\n            else {\\n                uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n                if (xExponent == 0x7FFF) return x;\\n                else {\\n                    uint256 xSignifier = uint128(x) &\\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    if (xExponent == 0) xExponent = 1;\\n                    else xSignifier |= 0x10000000000000000000000000000;\\n\\n                    if (xSignifier == 0) return _POSITIVE_ZERO;\\n\\n                    bool oddExponent = xExponent & 0x1 == 0;\\n                    xExponent = (xExponent + 16383) >> 1;\\n\\n                    if (oddExponent) {\\n                        if (xSignifier >= 0x10000000000000000000000000000)\\n                            xSignifier <<= 113;\\n                        else {\\n                            uint256 msb = mostSignificantBit(xSignifier);\\n                            uint256 shift = (226 - msb) & 0xFE;\\n                            xSignifier <<= shift;\\n                            xExponent -= (shift - 112) >> 1;\\n                        }\\n                    } else {\\n                        if (xSignifier >= 0x10000000000000000000000000000)\\n                            xSignifier <<= 112;\\n                        else {\\n                            uint256 msb = mostSignificantBit(xSignifier);\\n                            uint256 shift = (225 - msb) & 0xFE;\\n                            xSignifier <<= shift;\\n                            xExponent -= (shift - 112) >> 1;\\n                        }\\n                    }\\n\\n                    uint256 r = 0x10000000000000000000000000000;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1; // Seven iterations should be enough\\n                    uint256 r1 = xSignifier / r;\\n                    if (r1 < r) r = r1;\\n\\n                    return\\n                        bytes16(\\n                            uint128(\\n                                (xExponent << 112) |\\n                                    (r & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                            )\\n                        );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate binary logarithm of x.  Return NaN on negative x excluding -0.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function log_2(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (uint128(x) > 0x80000000000000000000000000000000) return NaN;\\n            else if (x == 0x3FFF0000000000000000000000000000)\\n                return _POSITIVE_ZERO;\\n            else {\\n                uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n                if (xExponent == 0x7FFF) return x;\\n                else {\\n                    uint256 xSignifier = uint128(x) &\\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    if (xExponent == 0) xExponent = 1;\\n                    else xSignifier |= 0x10000000000000000000000000000;\\n\\n                    if (xSignifier == 0) return _NEGATIVE_INFINITY;\\n\\n                    bool resultNegative;\\n                    uint256 resultExponent = 16495;\\n                    uint256 resultSignifier;\\n\\n                    if (xExponent >= 0x3FFF) {\\n                        resultNegative = false;\\n                        resultSignifier = xExponent - 0x3FFF;\\n                        xSignifier <<= 15;\\n                    } else {\\n                        resultNegative = true;\\n                        if (xSignifier >= 0x10000000000000000000000000000) {\\n                            resultSignifier = 0x3FFE - xExponent;\\n                            xSignifier <<= 15;\\n                        } else {\\n                            uint256 msb = mostSignificantBit(xSignifier);\\n                            resultSignifier = 16493 - msb;\\n                            xSignifier <<= 127 - msb;\\n                        }\\n                    }\\n\\n                    if (xSignifier == 0x80000000000000000000000000000000) {\\n                        if (resultNegative) resultSignifier += 1;\\n                        uint256 shift = 112 -\\n                            mostSignificantBit(resultSignifier);\\n                        resultSignifier <<= shift;\\n                        resultExponent -= shift;\\n                    } else {\\n                        uint256 bb = resultNegative ? 1 : 0;\\n                        while (\\n                            resultSignifier < 0x10000000000000000000000000000\\n                        ) {\\n                            resultSignifier <<= 1;\\n                            resultExponent -= 1;\\n\\n                            xSignifier *= xSignifier;\\n                            uint256 b = xSignifier >> 255;\\n                            resultSignifier += b ^ bb;\\n                            xSignifier >>= 127 + b;\\n                        }\\n                    }\\n\\n                    return\\n                        bytes16(\\n                            uint128(\\n                                (\\n                                    resultNegative\\n                                        ? 0x80000000000000000000000000000000\\n                                        : 0\\n                                ) |\\n                                    (resultExponent << 112) |\\n                                    (resultSignifier &\\n                                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                            )\\n                        );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate natural logarithm of x.  Return NaN on negative x excluding -0.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function ln(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            return mul(log_2(x), 0x3FFE62E42FEFA39EF35793C7673007E5);\\n        }\\n    }\\n\\n    /**\\n     * Calculate 2^x.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function pow_2(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            bool xNegative = uint128(x) > 0x80000000000000000000000000000000;\\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n            uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (xExponent == 0x7FFF && xSignifier != 0) return NaN;\\n            else if (xExponent > 16397)\\n                return xNegative ? _POSITIVE_ZERO : _POSITIVE_INFINITY;\\n            else if (xExponent < 16255)\\n                return 0x3FFF0000000000000000000000000000;\\n            else {\\n                if (xExponent == 0) xExponent = 1;\\n                else xSignifier |= 0x10000000000000000000000000000;\\n\\n                if (xExponent > 16367) xSignifier <<= xExponent - 16367;\\n                else if (xExponent < 16367) xSignifier >>= 16367 - xExponent;\\n\\n                if (\\n                    xNegative &&\\n                    xSignifier > 0x406E00000000000000000000000000000000\\n                ) return _POSITIVE_ZERO;\\n\\n                if (\\n                    !xNegative &&\\n                    xSignifier > 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                ) return _POSITIVE_INFINITY;\\n\\n                uint256 resultExponent = xSignifier >> 128;\\n                xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (xNegative && xSignifier != 0) {\\n                    xSignifier = ~xSignifier;\\n                    resultExponent += 1;\\n                }\\n\\n                uint256 resultSignifier = 0x80000000000000000000000000000000;\\n                if (xSignifier & 0x80000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x16A09E667F3BCC908B2FB1366EA957D3E) >>\\n                        128;\\n                if (xSignifier & 0x40000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1306FE0A31B7152DE8D5A46305C85EDEC) >>\\n                        128;\\n                if (xSignifier & 0x20000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1172B83C7D517ADCDF7C8C50EB14A791F) >>\\n                        128;\\n                if (xSignifier & 0x10000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10B5586CF9890F6298B92B71842A98363) >>\\n                        128;\\n                if (xSignifier & 0x8000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1059B0D31585743AE7C548EB68CA417FD) >>\\n                        128;\\n                if (xSignifier & 0x4000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x102C9A3E778060EE6F7CACA4F7A29BDE8) >>\\n                        128;\\n                if (xSignifier & 0x2000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10163DA9FB33356D84A66AE336DCDFA3F) >>\\n                        128;\\n                if (xSignifier & 0x1000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100B1AFA5ABCBED6129AB13EC11DC9543) >>\\n                        128;\\n                if (xSignifier & 0x800000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10058C86DA1C09EA1FF19D294CF2F679B) >>\\n                        128;\\n                if (xSignifier & 0x400000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1002C605E2E8CEC506D21BFC89A23A00F) >>\\n                        128;\\n                if (xSignifier & 0x200000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100162F3904051FA128BCA9C55C31E5DF) >>\\n                        128;\\n                if (xSignifier & 0x100000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000B175EFFDC76BA38E31671CA939725) >>\\n                        128;\\n                if (xSignifier & 0x80000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100058BA01FB9F96D6CACD4B180917C3D) >>\\n                        128;\\n                if (xSignifier & 0x40000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10002C5CC37DA9491D0985C348C68E7B3) >>\\n                        128;\\n                if (xSignifier & 0x20000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000162E525EE054754457D5995292026) >>\\n                        128;\\n                if (xSignifier & 0x10000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000B17255775C040618BF4A4ADE83FC) >>\\n                        128;\\n                if (xSignifier & 0x8000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >>\\n                        128;\\n                if (xSignifier & 0x4000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >>\\n                        128;\\n                if (xSignifier & 0x2000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000162E43F4F831060E02D839A9D16D) >>\\n                        128;\\n                if (xSignifier & 0x1000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000B1721BCFC99D9F890EA06911763) >>\\n                        128;\\n                if (xSignifier & 0x800000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000058B90CF1E6D97F9CA14DBCC1628) >>\\n                        128;\\n                if (xSignifier & 0x400000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000002C5C863B73F016468F6BAC5CA2B) >>\\n                        128;\\n                if (xSignifier & 0x200000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000162E430E5A18F6119E3C02282A5) >>\\n                        128;\\n                if (xSignifier & 0x100000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000B1721835514B86E6D96EFD1BFE) >>\\n                        128;\\n                if (xSignifier & 0x80000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000058B90C0B48C6BE5DF846C5B2EF) >>\\n                        128;\\n                if (xSignifier & 0x40000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000002C5C8601CC6B9E94213C72737A) >>\\n                        128;\\n                if (xSignifier & 0x20000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000162E42FFF037DF38AA2B219F06) >>\\n                        128;\\n                if (xSignifier & 0x10000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000B17217FBA9C739AA5819F44F9) >>\\n                        128;\\n                if (xSignifier & 0x8000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000058B90BFCDEE5ACD3C1CEDC823) >>\\n                        128;\\n                if (xSignifier & 0x4000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000002C5C85FE31F35A6A30DA1BE50) >>\\n                        128;\\n                if (xSignifier & 0x2000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000162E42FF0999CE3541B9FFFCF) >>\\n                        128;\\n                if (xSignifier & 0x1000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000B17217F80F4EF5AADDA45554) >>\\n                        128;\\n                if (xSignifier & 0x800000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000058B90BFBF8479BD5A81B51AD) >>\\n                        128;\\n                if (xSignifier & 0x400000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000002C5C85FDF84BD62AE30A74CC) >>\\n                        128;\\n                if (xSignifier & 0x200000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000162E42FEFB2FED257559BDAA) >>\\n                        128;\\n                if (xSignifier & 0x100000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000B17217F7D5A7716BBA4A9AE) >>\\n                        128;\\n                if (xSignifier & 0x80000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000058B90BFBE9DDBAC5E109CCE) >>\\n                        128;\\n                if (xSignifier & 0x40000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000002C5C85FDF4B15DE6F17EB0D) >>\\n                        128;\\n                if (xSignifier & 0x20000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000162E42FEFA494F1478FDE05) >>\\n                        128;\\n                if (xSignifier & 0x10000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000B17217F7D20CF927C8E94C) >>\\n                        128;\\n                if (xSignifier & 0x8000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000058B90BFBE8F71CB4E4B33D) >>\\n                        128;\\n                if (xSignifier & 0x4000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000002C5C85FDF477B662B26945) >>\\n                        128;\\n                if (xSignifier & 0x2000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000162E42FEFA3AE53369388C) >>\\n                        128;\\n                if (xSignifier & 0x1000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000B17217F7D1D351A389D40) >>\\n                        128;\\n                if (xSignifier & 0x800000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000058B90BFBE8E8B2D3D4EDE) >>\\n                        128;\\n                if (xSignifier & 0x400000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000002C5C85FDF4741BEA6E77E) >>\\n                        128;\\n                if (xSignifier & 0x200000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000162E42FEFA39FE95583C2) >>\\n                        128;\\n                if (xSignifier & 0x100000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000B17217F7D1CFB72B45E1) >>\\n                        128;\\n                if (xSignifier & 0x80000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000058B90BFBE8E7CC35C3F0) >>\\n                        128;\\n                if (xSignifier & 0x40000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000002C5C85FDF473E242EA38) >>\\n                        128;\\n                if (xSignifier & 0x20000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000162E42FEFA39F02B772C) >>\\n                        128;\\n                if (xSignifier & 0x10000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000B17217F7D1CF7D83C1A) >>\\n                        128;\\n                if (xSignifier & 0x8000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000058B90BFBE8E7BDCBE2E) >>\\n                        128;\\n                if (xSignifier & 0x4000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000002C5C85FDF473DEA871F) >>\\n                        128;\\n                if (xSignifier & 0x2000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000162E42FEFA39EF44D91) >>\\n                        128;\\n                if (xSignifier & 0x1000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000B17217F7D1CF79E949) >>\\n                        128;\\n                if (xSignifier & 0x800000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000058B90BFBE8E7BCE544) >>\\n                        128;\\n                if (xSignifier & 0x400000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000002C5C85FDF473DE6ECA) >>\\n                        128;\\n                if (xSignifier & 0x200000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000162E42FEFA39EF366F) >>\\n                        128;\\n                if (xSignifier & 0x100000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000B17217F7D1CF79AFA) >>\\n                        128;\\n                if (xSignifier & 0x80000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000058B90BFBE8E7BCD6D) >>\\n                        128;\\n                if (xSignifier & 0x40000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000002C5C85FDF473DE6B2) >>\\n                        128;\\n                if (xSignifier & 0x20000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000162E42FEFA39EF358) >>\\n                        128;\\n                if (xSignifier & 0x10000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000B17217F7D1CF79AB) >>\\n                        128;\\n                if (xSignifier & 0x8000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000058B90BFBE8E7BCD5) >>\\n                        128;\\n                if (xSignifier & 0x4000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000002C5C85FDF473DE6A) >>\\n                        128;\\n                if (xSignifier & 0x2000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000162E42FEFA39EF34) >>\\n                        128;\\n                if (xSignifier & 0x1000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000B17217F7D1CF799) >>\\n                        128;\\n                if (xSignifier & 0x800000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000058B90BFBE8E7BCC) >>\\n                        128;\\n                if (xSignifier & 0x400000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000002C5C85FDF473DE5) >>\\n                        128;\\n                if (xSignifier & 0x200000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000162E42FEFA39EF2) >>\\n                        128;\\n                if (xSignifier & 0x100000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000B17217F7D1CF78) >>\\n                        128;\\n                if (xSignifier & 0x80000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000058B90BFBE8E7BB) >>\\n                        128;\\n                if (xSignifier & 0x40000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000002C5C85FDF473DD) >>\\n                        128;\\n                if (xSignifier & 0x20000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000162E42FEFA39EE) >>\\n                        128;\\n                if (xSignifier & 0x10000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000B17217F7D1CF6) >>\\n                        128;\\n                if (xSignifier & 0x8000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000058B90BFBE8E7A) >>\\n                        128;\\n                if (xSignifier & 0x4000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000002C5C85FDF473C) >>\\n                        128;\\n                if (xSignifier & 0x2000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000162E42FEFA39D) >>\\n                        128;\\n                if (xSignifier & 0x1000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000B17217F7D1CE) >>\\n                        128;\\n                if (xSignifier & 0x800000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000058B90BFBE8E6) >>\\n                        128;\\n                if (xSignifier & 0x400000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000002C5C85FDF472) >>\\n                        128;\\n                if (xSignifier & 0x200000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000162E42FEFA38) >>\\n                        128;\\n                if (xSignifier & 0x100000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000B17217F7D1B) >>\\n                        128;\\n                if (xSignifier & 0x80000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000058B90BFBE8D) >>\\n                        128;\\n                if (xSignifier & 0x40000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000002C5C85FDF46) >>\\n                        128;\\n                if (xSignifier & 0x20000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000162E42FEFA2) >>\\n                        128;\\n                if (xSignifier & 0x10000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000B17217F7D0) >>\\n                        128;\\n                if (xSignifier & 0x8000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000058B90BFBE7) >>\\n                        128;\\n                if (xSignifier & 0x4000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000002C5C85FDF3) >>\\n                        128;\\n                if (xSignifier & 0x2000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000162E42FEF9) >>\\n                        128;\\n                if (xSignifier & 0x1000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000B17217F7C) >>\\n                        128;\\n                if (xSignifier & 0x800000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000058B90BFBD) >>\\n                        128;\\n                if (xSignifier & 0x400000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000002C5C85FDE) >>\\n                        128;\\n                if (xSignifier & 0x200000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000162E42FEE) >>\\n                        128;\\n                if (xSignifier & 0x100000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000B17217F6) >>\\n                        128;\\n                if (xSignifier & 0x80000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000058B90BFA) >>\\n                        128;\\n                if (xSignifier & 0x40000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000002C5C85FC) >>\\n                        128;\\n                if (xSignifier & 0x20000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000162E42FD) >>\\n                        128;\\n                if (xSignifier & 0x10000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000B17217E) >>\\n                        128;\\n                if (xSignifier & 0x8000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000058B90BE) >>\\n                        128;\\n                if (xSignifier & 0x4000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000002C5C85E) >>\\n                        128;\\n                if (xSignifier & 0x2000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000162E42E) >>\\n                        128;\\n                if (xSignifier & 0x1000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000B17216) >>\\n                        128;\\n                if (xSignifier & 0x800000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000058B90A) >>\\n                        128;\\n                if (xSignifier & 0x400000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000002C5C84) >>\\n                        128;\\n                if (xSignifier & 0x200000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000162E41) >>\\n                        128;\\n                if (xSignifier & 0x100000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000000B1720) >>\\n                        128;\\n                if (xSignifier & 0x80000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000058B8F) >>\\n                        128;\\n                if (xSignifier & 0x40000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000002C5C7) >>\\n                        128;\\n                if (xSignifier & 0x20000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000000162E3) >>\\n                        128;\\n                if (xSignifier & 0x10000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000000B171) >>\\n                        128;\\n                if (xSignifier & 0x8000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000000058B8) >>\\n                        128;\\n                if (xSignifier & 0x4000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000002C5B) >>\\n                        128;\\n                if (xSignifier & 0x2000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000000162D) >>\\n                        128;\\n                if (xSignifier & 0x1000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000000B16) >>\\n                        128;\\n                if (xSignifier & 0x800 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000000058A) >>\\n                        128;\\n                if (xSignifier & 0x400 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000000002C4) >>\\n                        128;\\n                if (xSignifier & 0x200 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000000161) >>\\n                        128;\\n                if (xSignifier & 0x100 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000000000B0) >>\\n                        128;\\n                if (xSignifier & 0x80 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000000057) >>\\n                        128;\\n                if (xSignifier & 0x40 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000000002B) >>\\n                        128;\\n                if (xSignifier & 0x20 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000000015) >>\\n                        128;\\n                if (xSignifier & 0x10 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000000000A) >>\\n                        128;\\n                if (xSignifier & 0x8 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000000004) >>\\n                        128;\\n                if (xSignifier & 0x4 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000000001) >>\\n                        128;\\n\\n                if (!xNegative) {\\n                    resultSignifier =\\n                        (resultSignifier >> 15) &\\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    resultExponent += 0x3FFF;\\n                } else if (resultExponent <= 0x3FFE) {\\n                    resultSignifier =\\n                        (resultSignifier >> 15) &\\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    resultExponent = 0x3FFF - resultExponent;\\n                } else {\\n                    resultSignifier =\\n                        resultSignifier >>\\n                        (resultExponent - 16367);\\n                    resultExponent = 0;\\n                }\\n\\n                return\\n                    bytes16(uint128((resultExponent << 112) | resultSignifier));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate e^x.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function exp(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            return pow_2(mul(x, 0x3FFF71547652B82FE1777D0FFDA0D23A));\\n        }\\n    }\\n\\n    /**\\n     * Get index of the most significant non-zero bit in binary representation of\\n     * x.  Reverts if x is zero.\\n     *\\n     * @return index of the most significant non-zero bit in binary representation\\n     *         of x\\n     */\\n    function mostSignificantBit(uint256 x) private pure returns (uint256) {\\n        unchecked {\\n            require(x > 0);\\n\\n            uint256 result = 0;\\n\\n            if (x >= 0x100000000000000000000000000000000) {\\n                x >>= 128;\\n                result += 128;\\n            }\\n            if (x >= 0x10000000000000000) {\\n                x >>= 64;\\n                result += 64;\\n            }\\n            if (x >= 0x100000000) {\\n                x >>= 32;\\n                result += 32;\\n            }\\n            if (x >= 0x10000) {\\n                x >>= 16;\\n                result += 16;\\n            }\\n            if (x >= 0x100) {\\n                x >>= 8;\\n                result += 8;\\n            }\\n            if (x >= 0x10) {\\n                x >>= 4;\\n                result += 4;\\n            }\\n            if (x >= 0x4) {\\n                x >>= 2;\\n                result += 2;\\n            }\\n            if (x >= 0x2) result += 1; // No need to shift x anymore\\n\\n            return result;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Pausable is ERC1155, Pausable {\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        require(!paused(), \\\"ERC1155Pausable: token transfer while paused\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/SafeAddArray.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// SPDX-License-Identifier: EUPL V1.2\\npragma solidity ^0.8.3;\\n\\n/**\\n * @dev Wrappers over Solidity's array push operations with added check\\n *\\n */\\nlibrary SafeAddArray {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     */\\n    function add(bytes32[] storage array, bytes32 value) internal {\\n        for (uint256 i; i < array.length; i++) {\\n            if (array[i] == value) {\\n                return;\\n            }\\n        }\\n        array.push(value);\\n    }\\n\\n    function add(string[] storage array, string memory value) internal {\\n        bytes32 hashValue = keccak256(bytes(value));\\n        for (uint256 i; i < array.length; i++) {\\n            if (keccak256(bytes(array[i])) == hashValue) {\\n                return;\\n            }\\n        }\\n        array.push(value);\\n    }\\n\\n    function add(uint256[] storage array, uint256 value) internal {\\n        for (uint256 i; i < array.length; i++) {\\n            if (array[i] == value) {\\n                return;\\n            }\\n        }\\n        array.push(value);\\n    }\\n\\n    function add(uint256[] storage array, uint256[] memory values) internal {\\n        for (uint256 i; i < values.length; i++) {\\n            bool exist = false;\\n            for (uint256 j; j < array.length; j++) {\\n                if (array[j] == values[i]) {\\n                    exist = true;\\n                    break;\\n                }\\n            }\\n            if (!exist) {\\n                array.push(values[i]);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/MasterChefV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IERC20Ubiquity.sol\\\";\\nimport \\\"./UbiquityAlgorithmicDollarManager.sol\\\";\\nimport \\\"./interfaces/ITWAPOracle.sol\\\";\\nimport \\\"./BondingShareV2.sol\\\";\\nimport \\\"./interfaces/IUbiquityFormulas.sol\\\";\\n\\nimport \\\"./interfaces/IERC1155Ubiquity.sol\\\";\\n\\ncontract MasterChefV2 {\\n    using SafeERC20 for IERC20Ubiquity;\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user.\\n    struct BondingShareInfo {\\n        uint256 amount; // bonding rights.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of uGOVs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accuGOVPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accuGOVPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n    // Info of each pool.\\n    struct PoolInfo {\\n        uint256 lastRewardBlock; // Last block number that uGOVs distribution occurs.\\n        uint256 accuGOVPerShare; // Accumulated uGOVs per share, times 1e12. See below.\\n    }\\n\\n    uint256 private _totalShares;\\n\\n    // Ubiquity Manager\\n    UbiquityAlgorithmicDollarManager public manager;\\n\\n    // uGOV tokens created per block.\\n    uint256 public uGOVPerBlock = 1e18;\\n    // Bonus muliplier for early uGOV makers.\\n    uint256 public uGOVmultiplier = 1e18;\\n    uint256 public minPriceDiffToUpdateMultiplier = 1000000000000000;\\n    uint256 public lastPrice = 1 ether;\\n    uint256 public uGOVDivider;\\n    // Info of each pool.\\n    PoolInfo public pool;\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => BondingShareInfo) private _bsInfo;\\n\\n    event Deposit(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 indexed bondingShareId\\n    );\\n\\n    event Withdraw(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 indexed bondingShareId\\n    );\\n\\n    // ----------- Modifiers -----------\\n    modifier onlyTokenManager() {\\n        require(\\n            manager.hasRole(manager.UBQ_TOKEN_MANAGER_ROLE(), msg.sender),\\n            \\\"MasterChef: not UBQ manager\\\"\\n        );\\n        _;\\n    }\\n    modifier onlyBondingContract() {\\n        require(\\n            msg.sender == manager.bondingContractAddress(),\\n            \\\"MasterChef: not Bonding Contract\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _manager) {\\n        manager = UbiquityAlgorithmicDollarManager(_manager);\\n        pool.lastRewardBlock = block.number;\\n        pool.accuGOVPerShare = 0; // uint256(1e12);\\n        uGOVDivider = 5; // 100 / 5 = 20% extra minted ugov for treasury\\n        _updateUGOVMultiplier();\\n    }\\n\\n    function setUGOVPerBlock(uint256 _uGOVPerBlock) external onlyTokenManager {\\n        uGOVPerBlock = _uGOVPerBlock;\\n    }\\n\\n    // the bigger uGOVDivider is the less extra Ugov will be minted for the treasury\\n    function setUGOVShareForTreasury(uint256 _uGOVDivider)\\n        external\\n        onlyTokenManager\\n    {\\n        uGOVDivider = _uGOVDivider;\\n    }\\n\\n    function setMinPriceDiffToUpdateMultiplier(\\n        uint256 _minPriceDiffToUpdateMultiplier\\n    ) external onlyTokenManager {\\n        minPriceDiffToUpdateMultiplier = _minPriceDiffToUpdateMultiplier;\\n    }\\n\\n    // Deposit LP tokens to MasterChef for uGOV allocation.\\n    function deposit(\\n        address to,\\n        uint256 _amount,\\n        uint256 _bondingShareID\\n    ) external onlyBondingContract {\\n        BondingShareInfo storage bs = _bsInfo[_bondingShareID];\\n        _updatePool();\\n        if (bs.amount > 0) {\\n            uint256 pending = ((bs.amount * pool.accuGOVPerShare) / 1e12) -\\n                bs.rewardDebt;\\n            _safeUGOVTransfer(to, pending);\\n        }\\n        bs.amount += _amount;\\n        bs.rewardDebt = (bs.amount * pool.accuGOVPerShare) / 1e12;\\n        _totalShares += _amount;\\n        emit Deposit(to, _amount, _bondingShareID);\\n    }\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(\\n        address to,\\n        uint256 _amount,\\n        uint256 _bondingShareID\\n    ) external onlyBondingContract {\\n        BondingShareInfo storage bs = _bsInfo[_bondingShareID];\\n        require(bs.amount >= _amount, \\\"MC: amount too high\\\");\\n        _updatePool();\\n        uint256 pending = ((bs.amount * pool.accuGOVPerShare) / 1e12) -\\n            bs.rewardDebt;\\n        // send UGOV to Bonding Share holder\\n\\n        _safeUGOVTransfer(to, pending);\\n        bs.amount -= _amount;\\n        bs.rewardDebt = (bs.amount * pool.accuGOVPerShare) / 1e12;\\n        _totalShares -= _amount;\\n        emit Withdraw(to, _amount, _bondingShareID);\\n    }\\n\\n    /// @dev get pending uGOV rewards from MasterChef.\\n    /// @return amount of pending rewards transfered to msg.sender\\n    /// @notice only send pending rewards\\n    function getRewards(uint256 bondingShareID) external returns (uint256) {\\n        require(\\n            IERC1155Ubiquity(manager.bondingShareAddress()).balanceOf(\\n                msg.sender,\\n                bondingShareID\\n            ) == 1,\\n            \\\"MS: caller is not owner\\\"\\n        );\\n\\n        // calculate user reward\\n        BondingShareInfo storage user = _bsInfo[bondingShareID];\\n        _updatePool();\\n        uint256 pending = ((user.amount * pool.accuGOVPerShare) / 1e12) -\\n            user.rewardDebt;\\n        _safeUGOVTransfer(msg.sender, pending);\\n        user.rewardDebt = (user.amount * pool.accuGOVPerShare) / 1e12;\\n        return pending;\\n    }\\n\\n    // View function to see pending uGOVs on frontend.\\n    function pendingUGOV(uint256 bondingShareID)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        BondingShareInfo storage user = _bsInfo[bondingShareID];\\n        uint256 accuGOVPerShare = pool.accuGOVPerShare;\\n        uint256 lpSupply = IERC1155Ubiquity(manager.bondingShareAddress())\\n            .totalSupply();\\n\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = _getMultiplier();\\n\\n            uint256 uGOVReward = (multiplier * uGOVPerBlock) / 1e18;\\n            accuGOVPerShare =\\n                accuGOVPerShare +\\n                ((uGOVReward * 1e12) / lpSupply);\\n        }\\n\\n        return (user.amount * accuGOVPerShare) / 1e12 - user.rewardDebt;\\n    }\\n\\n    /**\\n     * @dev get the amount of shares and the reward debt of a bonding share .\\n     */\\n    function getBondingShareInfo(uint256 _id)\\n        external\\n        view\\n        returns (uint256[2] memory)\\n    {\\n        return [_bsInfo[_id].amount, _bsInfo[_id].rewardDebt];\\n    }\\n\\n    /**\\n     * @dev Total amount of shares .\\n     */\\n    function totalShares() external view virtual returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    // UPDATE uGOV multiplier\\n    function _updateUGOVMultiplier() internal {\\n        // (1.05/(1+abs(1-TWAP_PRICE)))\\n        uint256 currentPrice = _getTwapPrice();\\n\\n        bool isPriceDiffEnough = false;\\n        // a minimum price variation is needed to update the multiplier\\n        if (currentPrice > lastPrice) {\\n            isPriceDiffEnough =\\n                currentPrice - lastPrice > minPriceDiffToUpdateMultiplier;\\n        } else {\\n            isPriceDiffEnough =\\n                lastPrice - currentPrice > minPriceDiffToUpdateMultiplier;\\n        }\\n\\n        if (isPriceDiffEnough) {\\n            uGOVmultiplier = IUbiquityFormulas(manager.formulasAddress())\\n                .ugovMultiply(uGOVmultiplier, currentPrice);\\n            lastPrice = currentPrice;\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function _updatePool() internal {\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        _updateUGOVMultiplier();\\n        uint256 lpSupply = IERC1155Ubiquity(manager.bondingShareAddress())\\n            .totalSupply();\\n        if (lpSupply == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 multiplier = _getMultiplier();\\n        uint256 uGOVReward = (multiplier * uGOVPerBlock) / 1e18;\\n        IERC20Ubiquity(manager.governanceTokenAddress()).mint(\\n            address(this),\\n            uGOVReward\\n        );\\n        // mint another x% for the treasury\\n        IERC20Ubiquity(manager.governanceTokenAddress()).mint(\\n            manager.treasuryAddress(),\\n            uGOVReward / uGOVDivider\\n        );\\n        pool.accuGOVPerShare =\\n            pool.accuGOVPerShare +\\n            ((uGOVReward * 1e12) / lpSupply);\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    // Safe uGOV transfer function, just in case if rounding\\n    // error causes pool to not have enough uGOVs.\\n    function _safeUGOVTransfer(address _to, uint256 _amount) internal {\\n        IERC20Ubiquity uGOV = IERC20Ubiquity(manager.governanceTokenAddress());\\n        uint256 uGOVBal = uGOV.balanceOf(address(this));\\n        if (_amount > uGOVBal) {\\n            uGOV.safeTransfer(_to, uGOVBal);\\n        } else {\\n            uGOV.safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    function _getMultiplier() internal view returns (uint256) {\\n        return (block.number - pool.lastRewardBlock) * uGOVmultiplier;\\n    }\\n\\n    function _getTwapPrice() internal view returns (uint256) {\\n        return\\n            ITWAPOracle(manager.twapOracleAddress()).consult(\\n                manager.dollarTokenAddress()\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/utils/ICollectableDust.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\ninterface ICollectableDust {\\n    event DustSent(address _to, address token, uint256 amount);\\n    event ProtocolTokenAdded(address _token);\\n    event ProtocolTokenRemoved(address _token);\\n\\n    function addProtocolToken(address _token) external;\\n\\n    function removeProtocolToken(address _token) external;\\n\\n    function sendDust(\\n        address _to,\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bondingFormulasAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_originals\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lpBalances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weeks\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bondingShareAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidityFromBond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_blockCountInAWeek\",\"type\":\"uint256\"}],\"name\":\"BlockCountInAWeekUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bondingDiscountMultiplier\",\"type\":\"uint256\"}],\"name\":\"BondingDiscountMultiplierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bondingShareAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_weeks\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DustSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lpsAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sharesAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_weeks\",\"type\":\"uint256\"}],\"name\":\"Migrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenWithdrawn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountTransfered\",\"type\":\"uint256\"}],\"name\":\"PriceReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"ProtocolTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"ProtocolTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lpAmountTransferred\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lprewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bondingShareAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityFromBond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accLpRewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_weeks\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addProtocolToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_original\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_weeks\",\"type\":\"uint256\"}],\"name\":\"addUserToMigrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockCountInAWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondingDiscountMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondingFormulasAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"crvPriceReset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentShareValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_weeks\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpRewardDebt\",\"type\":\"uint256\"}],\"name\":\"lpRewardForShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingLpReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract UbiquityAlgorithmicDollarManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrating\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"pendingLpRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeProtocolToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockCountInAWeek\",\"type\":\"uint256\"}],\"name\":\"setBlockCountInAWeek\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondingDiscountMultiplier\",\"type\":\"uint256\"}],\"name\":\"setBondingDiscountMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bondingFormulasAddress\",\"type\":\"address\"}],\"name\":\"setBondingFormulasAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_migrating\",\"type\":\"bool\"}],\"name\":\"setMigrating\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toMigrateId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLpToMigrate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"uADPriceReset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BondingV2","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"0000000000000000000000004da97a8b831c345dbe6d16ff7432df2b7b776d98000000000000000000000000190474f062d05fba6d46a4d358c4d031075df2b400000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000054000000000000000000000000000000000000000000000000000000000000009e0000000000000000000000000000000000000000000000000000000000000002400000000000000000000000089eae71b865a2a39cba62060ab1b40bbffae5b0d000000000000000000000000efc0e701a824943b469a694ac564aa1eff7ab7dd000000000000000000000000a53a6fe2d8ad977ad926c485343ba39f32d3a3f60000000000000000000000007c76f4db70b7e2177de10de3e2f668dadcd111080000000000000000000000004007ce2083c7f3e18097aeb3a39bb8ec149a341d000000000000000000000000f6501068a54f3eab46c1f145cb9d3fb91658b22000000000000000000000000010693e86f2e7151b3010469e33b6c1c2da8887d6000000000000000000000000cefd0e73cc48b0b9d4c8683e52b7d7396600abb2000000000000000000000000d028babbdc15949aaa35587f95f9e96c7d49417d0000000000000000000000009968efe1424d802e1f79fd8af8da67b0f08c814d000000000000000000000000d3bc13258e685df436715104882888d087f87ed80000000000000000000000000709b103d46d71458a71e5d81230dd688809a53d000000000000000000000000e3e39161d35e9a81edec667a5387bfae857528540000000000000000000000007c361828849293684ddf7212fd1d2cb5f0aade700000000000000000000000009d3f4eeb533b8e3c8f50dbbd2e351d1bf2987908000000000000000000000000865dc9a621b50534ba3d17e0ea8447c315e31886000000000000000000000000324e0b53cefa84cf970833939249880f814557c6000000000000000000000000ce156d5d62a8f82326da8d808d0f3f76360036d000000000000000000000000026bdde6506bd32bd7b5cc5c73cd252807ff18568000000000000000000000000d6efc21d8c941aa06f90075de1588ac7e912fec6000000000000000000000000e0d62cc9233c7e2f1f23fe8c77d6b4d1a265d7cd0000000000000000000000000b54b916e90b8f28ad21da40638e0724132c9c93000000000000000000000000629cd43eaf443e66a9a69ed246728e1001289eac0000000000000000000000000709e442a5469b88bb090dd285b1b3a63fb0c22600000000000000000000000094a2ffdbdbd84984ac7967878c5c397126e7bbbe00000000000000000000000051ec66e63199176f59c80268e0be6ffa91fab2200000000000000000000000000a71e650f70b35fca8b70e71e4441df8d44e01e9000000000000000000000000c1b6052e707dff9017deab13ae9b89008fc1fc5d0000000000000000000000009be95ef84676393588e49ad8b99c9d4cdfdaa631000000000000000000000000fffff6e70842330948ca47254f2be673b1cb0db70000000000000000000000000000ce08fa224696a819877070bf378e8b131acf000000000000000000000000c2cb4b1bcaebaa78c8004e394cf90ba07a61c8f7000000000000000000000000b2812370f17465ae096ced55679428786734a6780000000000000000000000003eb851c3959f0d37e15c2d9476c4adb46d5231d1000000000000000000000000ad286cf287b91719ee85d3ba5cf3da483d631dba000000000000000000000000bd37a957773d883186b989f6b21c2094590222520000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000120e149b64c880000000000000000000000000000000000000000000000000bdbc41e0348b3000000000000000000000000000000000000000000000000001faebc1969c256d50a000000000000000000000000000000000000000000000097950c4685a7a837de0000000000000000000000000000000000000000000000fcc48cebda35139d542000000000000000000000000000000000000000000000086a657deffaa010000000000000000000000000000000000000000000000000065d7d85462acd3da8f0000000000000000000000000000000000000000000001e770370c4f2ea5d15f00000000000000000000000000000000000000000000003c3aee0b89d2b5def30000000000000000000000000000000000000000000000f1ba9428d88d218f070000000000000000000000000000000000000000000004999b2f3e9d028c000000000000000000000000000000000000000000000000082a1e88793a59061680000000000000000000000000000000000000000000000140e1e7ae7eba1b740b00000000000000000000000000000000000000000000005510e6a88fc67a95ac00000000000000000000000000000000000000000000022905914c52531970b800000000000000000000000000000000000000000000003043f2e885c284efa20000000000000000000000000000000000000000000001103208f6d5d335974500000000000000000000000000000000000000000000002940ff1c0c98440000000000000000000000000000000000000000000000000a69a2abeb1e9e5bd87d00000000000000000000000000000000000000000000054e3f87fb8377f4476400000000000000000000000000000000000000000000005579e670fe92a4623b0000000000000000000000000000000000000000000000c6a036eb4bc74000000000000000000000000000000000000000000000000000671e2f005f4a0cd2cf0000000000000000000000000000000000000000000007672c4b23049f1b1b800000000000000000000000000000000000000000000001fc7dbd2c5e27fddd7a000000000000000000000000000000000000000000000153bc08d918b19bf49e0000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000000000000000000000000000c862e9c7a8dc4a0f8200000000000000000000000000000000000000000000002824396cc4d140000000000000000000000000000000000000000000000000007ad7113237ab280000000000000000000000000000000000000000000000000050438f71849669261300000000000000000000000000000000000000000000053b1b7e838a88939a67000000000000000000000000000000000000000000000020cc0fc6929754000000000000000000000000000000000000000000000000005bdf9cb345eaf862e2000000000000000000000000000000000000000000000325664b203d8a84000000000000000000000000000000000000000000000000000168d28e3f00280000000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000b0000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000d0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004300000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000d0000000000000000000000000000000000000000000000000000000000000006d000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001dd00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000d0000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000d0","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}