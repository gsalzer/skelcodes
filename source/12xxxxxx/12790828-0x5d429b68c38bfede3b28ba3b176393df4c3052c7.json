{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"github/dn3010/staking-contracts/YieldFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// import \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IStaking.sol\\\";\\n\\ncontract YieldFarm {\\n    // lib\\n    using SafeMath for uint256;\\n    using SafeMath for uint128;\\n\\n    // constants\\n    uint256 public constant TOTAL_DISTRIBUTED_AMOUNT = 62_500_000;\\n    uint256 public constant NR_OF_EPOCHS = 25;\\n    uint128 public constant EPOCHS_DELAYED_FROM_STAKING_CONTRACT = 0;\\n\\n    // addreses\\n    address private _lpTokenAddress;\\n    address private _communityVault;\\n\\n    // contracts\\n    IERC20 private _sylo;\\n    IStaking private _staking;\\n\\n    uint256[] private epochs = new uint256[](NR_OF_EPOCHS + 1);\\n    uint256 private _totalAmountPerEpoch;\\n    uint128 public lastInitializedEpoch;\\n    mapping(address => uint128) private lastEpochIdHarvested;\\n    uint256 public epochDuration;\\n    uint256 public epochStart;\\n\\n    // events\\n    event MassHarvest(\\n        address indexed user,\\n        uint256 epochsHarvested,\\n        uint256 totalValue\\n    );\\n    event Harvest(\\n        address indexed user,\\n        uint128 indexed epochId,\\n        uint256 amount\\n    );\\n\\n    // constructor\\n    constructor(\\n        address syloTokenAddress,\\n        address lpTokenAddress,\\n        address stakeContract,\\n        address communityVault\\n    ) {\\n        require(syloTokenAddress != address(0), \\\"Sylo token address is required\\\");\\n        require(lpTokenAddress != address(0), \\\"LP token address is required\\\");\\n        require(stakeContract != address(0), \\\"Stake address is required\\\");\\n        require(communityVault != address(0), \\\"Community Vault address is required\\\");\\n\\n        _sylo = IERC20(syloTokenAddress);\\n        _lpTokenAddress = lpTokenAddress;\\n        _staking = IStaking(stakeContract);\\n        _communityVault = communityVault;\\n        epochDuration = _staking.epochDuration();\\n        epochStart =\\n            _staking.epoch1Start() +\\n            epochDuration.mul(EPOCHS_DELAYED_FROM_STAKING_CONTRACT);\\n        _totalAmountPerEpoch = \\n            TOTAL_DISTRIBUTED_AMOUNT\\n                .mul(10**18)\\n                .div(NR_OF_EPOCHS);\\n    }\\n\\n    // public methods\\n    // public method to harvest all the unharvested epochs until current epoch - 1\\n    function massHarvest() external returns (uint256) {\\n        uint256 totalDistributedValue;\\n        uint256 epochId = _getEpochId().sub(1); // fails in epoch 0\\n        // force max number of epochs\\n        if (epochId > NR_OF_EPOCHS) {\\n            epochId = NR_OF_EPOCHS;\\n        }\\n\\n        for (\\n            uint128 i = lastEpochIdHarvested[msg.sender] + 1;\\n            i <= epochId;\\n            i++\\n        ) {\\n            // i = epochId\\n            // compute distributed Value and do one single transfer at the end\\n            totalDistributedValue += _harvest(i);\\n        }\\n\\n        emit MassHarvest(\\n            msg.sender,\\n            epochId - lastEpochIdHarvested[msg.sender],\\n            totalDistributedValue\\n        );\\n\\n        if (totalDistributedValue > 0) {\\n            bool success = _sylo.transferFrom(\\n                _communityVault,\\n                msg.sender,\\n                totalDistributedValue\\n            );\\n            require(success, \\\"Failed to transfer mass harvest reward\\\");\\n        }\\n\\n        return totalDistributedValue;\\n    }\\n\\n    function harvest(uint128 epochId) external returns (uint256) {\\n        // checks for requested epoch\\n        require(_getEpochId() > epochId, \\\"This epoch is in the future\\\");\\n        require(epochId <= NR_OF_EPOCHS, \\\"Maximum number of epochs is 12\\\");\\n        require(\\n            lastEpochIdHarvested[msg.sender].add(1) == epochId,\\n            \\\"Harvest in order\\\"\\n        );\\n        uint256 userReward = _harvest(epochId);\\n        if (userReward > 0) {\\n            bool success = _sylo.transferFrom(_communityVault, msg.sender, userReward);\\n            require(success, \\\"Failed to transfer harvest reward\\\");\\n        }\\n        emit Harvest(msg.sender, epochId, userReward);\\n        return userReward;\\n    }\\n\\n    // views\\n    // calls to the staking smart contract to retrieve the epoch total pool size\\n    function getPoolSize(uint128 epochId) external view returns (uint256) {\\n        return _getPoolSize(epochId);\\n    }\\n\\n    function getCurrentEpoch() external view returns (uint256) {\\n        return _getEpochId();\\n    }\\n\\n    // calls to the staking smart contract to retrieve user balance for an epoch\\n    function getEpochStake(address userAddress, uint128 epochId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _getUserBalancePerEpoch(userAddress, epochId);\\n    }\\n\\n    function userLastEpochIdHarvested() external view returns (uint256) {\\n        return lastEpochIdHarvested[msg.sender];\\n    }\\n\\n    // internal methods\\n\\n    function _initEpoch(uint128 epochId) internal {\\n        require(\\n            lastInitializedEpoch.add(1) == epochId,\\n            \\\"Epoch can be init only in order\\\"\\n        );\\n        lastInitializedEpoch = epochId;\\n        // call the staking smart contract to init the epoch\\n        epochs[epochId] = _getPoolSize(epochId);\\n    }\\n\\n    function _harvest(uint128 epochId) internal returns (uint256) {\\n        // try to initialize an epoch. if it can't it fails\\n        // if it fails either user either a Plug account will init not init epochs\\n        if (lastInitializedEpoch < epochId) {\\n            _initEpoch(epochId);\\n        }\\n        // Set user state for last harvested\\n        lastEpochIdHarvested[msg.sender] = epochId;\\n        // compute and return user total reward. For optimization reasons the transfer have been moved to an upper layer (i.e. massHarvest needs to do a single transfer)\\n\\n        // exit if there is no stake on the epoch\\n        if (epochs[epochId] == 0) {\\n            return 0;\\n        }\\n        return\\n            _totalAmountPerEpoch\\n                .mul(_getUserBalancePerEpoch(msg.sender, epochId))\\n                .div(epochs[epochId]);\\n    }\\n\\n    // retrieve _lpTokenAddress token balance\\n    function _getPoolSize(uint128 epochId) internal view returns (uint256) {\\n        return\\n            _staking.getEpochPoolSize(\\n                _lpTokenAddress,\\n                _stakingEpochId(epochId)\\n            );\\n    }\\n\\n    // retrieve _lpTokenAddress token balance per user per epoch\\n    function _getUserBalancePerEpoch(address userAddress, uint128 epochId)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            _staking.getEpochUserBalance(\\n                userAddress,\\n                _lpTokenAddress,\\n                _stakingEpochId(epochId)\\n            );\\n    }\\n\\n    // compute epoch id from block.timestamp and epochStart date\\n    function _getEpochId() internal view returns (uint128 epochId) {\\n        if (block.timestamp < epochStart) {\\n            return 0;\\n        }\\n        epochId = uint128(\\n            block.timestamp.sub(epochStart).div(epochDuration).add(1)\\n        );\\n    }\\n\\n    // get the staking epoch\\n    function _stakingEpochId(uint128 epochId) internal pure returns (uint128) {\\n        return epochId + EPOCHS_DELAYED_FROM_STAKING_CONTRACT;\\n    }\\n}\\n\"\r\n    },\r\n    \"github/dn3010/staking-contracts/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ninterface IStaking {\\n    function getEpochId(uint timestamp) external view returns (uint); // get epoch id\\n    function getEpochUserBalance(address user, address token, uint128 epoch) external view returns(uint);\\n    function getEpochPoolSize(address token, uint128 epoch) external view returns (uint);\\n    function epoch1Start() external view returns (uint);\\n    function epochDuration() external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"syloTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"communityVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochsHarvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"}],\"name\":\"MassHarvest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EPOCHS_DELAYED_FROM_STAKING_CONTRACT\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NR_OF_EPOCHS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_DISTRIBUTED_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"getEpochStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"getPoolSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastInitializedEpoch\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userLastEpochIdHarvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"YieldFarm","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f293d23bf2cdc05411ca0eddd588eb1977e8dcd40000000000000000000000002a66392317698c5818df7a72a58556049f0ae6f2000000000000000000000000f52ca8c3812ba6b0d820deba852ae781a39fefe70000000000000000000000003204513fe73488d2e0a74e6f7ae244cf66723b5f","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}