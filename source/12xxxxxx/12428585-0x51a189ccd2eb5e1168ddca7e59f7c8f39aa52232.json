{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier:  AGPL-3.0-or-later // hevm: flattened sources of contracts/library/LoanLib.sol\r\npragma solidity =0.6.11 >=0.6.0 <0.8.0 >=0.6.2 <0.8.0;\r\n\r\n////// contracts/interfaces/ICollateralLocker.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\ninterface ICollateralLocker {\r\n\r\n    function collateralAsset() external view returns (address);\r\n\r\n    function loan() external view returns (address);\r\n\r\n    function pull(address, uint256) external;\r\n\r\n}\r\n\r\n////// contracts/interfaces/ICollateralLockerFactory.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\ninterface ICollateralLockerFactory {\r\n\r\n    function owner(address) external view returns (address);\r\n    \r\n    function isLocker(address) external view returns (bool);\r\n\r\n    function factoryType() external view returns (uint8);\r\n\r\n    function newLocker(address) external returns (address);\r\n\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\r\n/* pragma solidity >=0.6.0 <0.8.0; */\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n////// contracts/interfaces/IERC20Details.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\"; */\r\n\r\ninterface IERC20Details is IERC20 {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint256);\r\n\r\n}\r\n\r\n////// contracts/interfaces/IFundingLocker.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\ninterface IFundingLocker {\r\n\r\n    function liquidityAsset() external view returns (address);\r\n\r\n    function loan() external view returns (address);\r\n\r\n    function pull(address, uint256) external;\r\n\r\n    function drain() external;\r\n\r\n}\r\n\r\n////// contracts/interfaces/IFundingLockerFactory.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\ninterface IFundingLockerFactory {\r\n\r\n    function owner(address) external view returns (address);\r\n    \r\n    function isLocker(address) external view returns (bool);\r\n\r\n    function factoryType() external view returns (uint8);\r\n    \r\n    function newLocker(address) external returns (address);\r\n\r\n}\r\n\r\n////// contracts/interfaces/ILateFeeCalc.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\ninterface ILateFeeCalc {\r\n\r\n    function calcType() external view returns (uint8);\r\n\r\n    function name() external view returns (bytes32);\r\n\r\n    function lateFee() external view returns (uint256);\r\n\r\n    function getLateFee(uint256) external view returns (uint256);\r\n\r\n} \r\n\r\n////// contracts/interfaces/ILoanFactory.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\ninterface ILoanFactory {\r\n\r\n    function CL_FACTORY() external view returns (uint8);\r\n\r\n    function FL_FACTORY() external view returns (uint8);\r\n\r\n    function INTEREST_CALC_TYPE() external view returns (uint8);\r\n\r\n    function LATEFEE_CALC_TYPE() external view returns (uint8);\r\n\r\n    function PREMIUM_CALC_TYPE() external view returns (uint8);\r\n\r\n    function globals() external view returns (address);\r\n\r\n    function loansCreated() external view returns (uint256);\r\n\r\n    function loans(uint256) external view returns (address);\r\n\r\n    function isLoan(address) external view returns (bool);\r\n\r\n    function loanFactoryAdmins(address) external view returns (bool);\r\n\r\n    function setGlobals(address) external;\r\n    \r\n    function createLoan(address, address, address, address, uint256[5] memory, address[3] memory) external returns (address);\r\n\r\n    function setLoanFactoryAdmin(address, bool) external;\r\n\r\n    function pause() external;\r\n\r\n    function unpause() external;\r\n\r\n}\r\n\r\n////// contracts/interfaces/IMapleGlobals.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\ninterface IMapleGlobals {\r\n\r\n    function pendingGovernor() external view returns (address);\r\n\r\n    function governor() external view returns (address);\r\n\r\n    function globalAdmin() external view returns (address);\r\n\r\n    function mpl() external view returns (address);\r\n\r\n    function mapleTreasury() external view returns (address);\r\n\r\n    function isValidBalancerPool(address) external view returns (bool);\r\n\r\n    function treasuryFee() external view returns (uint256);\r\n\r\n    function investorFee() external view returns (uint256);\r\n\r\n    function defaultGracePeriod() external view returns (uint256);\r\n\r\n    function fundingPeriod() external view returns (uint256);\r\n\r\n    function swapOutRequired() external view returns (uint256);\r\n\r\n    function isValidLiquidityAsset(address) external view returns (bool);\r\n\r\n    function isValidCollateralAsset(address) external view returns (bool);\r\n\r\n    function isValidPoolDelegate(address) external view returns (bool);\r\n\r\n    function validCalcs(address) external view returns (bool);\r\n\r\n    function isValidCalc(address, uint8) external view returns (bool);\r\n\r\n    function getLpCooldownParams() external view returns (uint256, uint256);\r\n\r\n    function isValidLoanFactory(address) external view returns (bool);\r\n\r\n    function isValidSubFactory(address, address, uint8) external view returns (bool);\r\n\r\n    function isValidPoolFactory(address) external view returns (bool);\r\n    \r\n    function getLatestPrice(address) external view returns (uint256);\r\n    \r\n    function defaultUniswapPath(address, address) external view returns (address);\r\n\r\n    function minLoanEquity() external view returns (uint256);\r\n    \r\n    function maxSwapSlippage() external view returns (uint256);\r\n\r\n    function protocolPaused() external view returns (bool);\r\n\r\n    function stakerCooldownPeriod() external view returns (uint256);\r\n\r\n    function lpCooldownPeriod() external view returns (uint256);\r\n\r\n    function stakerUnstakeWindow() external view returns (uint256);\r\n\r\n    function lpWithdrawWindow() external view returns (uint256);\r\n\r\n    function oracleFor(address) external view returns (address);\r\n\r\n    function validSubFactories(address, address) external view returns (bool);\r\n\r\n    function setStakerCooldownPeriod(uint256) external;\r\n\r\n    function setLpCooldownPeriod(uint256) external;\r\n\r\n    function setStakerUnstakeWindow(uint256) external;\r\n\r\n    function setLpWithdrawWindow(uint256) external;\r\n\r\n    function setMaxSwapSlippage(uint256) external;\r\n\r\n    function setGlobalAdmin(address) external;\r\n\r\n    function setValidBalancerPool(address, bool) external;\r\n\r\n    function setProtocolPause(bool) external;\r\n\r\n    function setValidPoolFactory(address, bool) external;\r\n\r\n    function setValidLoanFactory(address, bool) external;\r\n\r\n    function setValidSubFactory(address, address, bool) external;\r\n\r\n    function setDefaultUniswapPath(address, address, address) external;\r\n\r\n    function setPoolDelegateAllowlist(address, bool) external;\r\n\r\n    function setCollateralAsset(address, bool) external;\r\n\r\n    function setLiquidityAsset(address, bool) external;\r\n\r\n    function setCalc(address, bool) external;\r\n\r\n    function setInvestorFee(uint256) external;\r\n\r\n    function setTreasuryFee(uint256) external;\r\n\r\n    function setMapleTreasury(address) external;\r\n\r\n    function setDefaultGracePeriod(uint256) external;\r\n\r\n    function setMinLoanEquity(uint256) external;\r\n\r\n    function setFundingPeriod(uint256) external;\r\n\r\n    function setSwapOutRequired(uint256) external;\r\n\r\n    function setPriceOracle(address, address) external;\r\n\r\n    function setPendingGovernor(address) external;\r\n\r\n    function acceptGovernor() external;\r\n\r\n}\r\n\r\n////// contracts/interfaces/IPremiumCalc.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\ninterface IPremiumCalc {\r\n\r\n    function calcType() external view returns (uint8);\r\n\r\n    function name() external view returns (bytes32);\r\n\r\n    function premiumFee() external view returns (uint256);\r\n\r\n    function getPremiumPayment(address) external view returns (uint256, uint256, uint256);\r\n\r\n} \r\n\r\n////// contracts/interfaces/IRepaymentCalc.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\ninterface IRepaymentCalc {\r\n\r\n    function calcType() external view returns (uint8);\r\n\r\n    function name() external view returns (bytes32);\r\n\r\n    function getNextPayment(address) external view returns (uint256, uint256, uint256);\r\n\r\n} \r\n\r\n////// contracts/interfaces/IUniswapRouter.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\ninterface IUniswapRouter {\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/math/SafeMath.sol\r\n/* pragma solidity >=0.6.0 <0.8.0; */\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n////// contracts/library/Util.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"../interfaces/IERC20Details.sol\"; */\r\n/* import \"../interfaces/IMapleGlobals.sol\"; */\r\n/* import \"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\"; */\r\n\r\n/// @title Util is a library that contains utility functions.\r\nlibrary Util {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n        @dev    Calculates the minimum amount from a swap (adjustable for price slippage).\r\n        @param  globals   Instance of a MapleGlobals.\r\n        @param  fromAsset Address of ERC-20 that will be swapped.\r\n        @param  toAsset   Address of ERC-20 that will returned from swap.\r\n        @param  swapAmt   Amount of `fromAsset` to be swapped.\r\n        @return Expected amount of `toAsset` to receive from swap based on current oracle prices.\r\n    */\r\n    function calcMinAmount(IMapleGlobals globals, address fromAsset, address toAsset, uint256 swapAmt) external view returns (uint256) {\r\n        return \r\n            swapAmt\r\n                .mul(globals.getLatestPrice(fromAsset))           // Convert from `fromAsset` value.\r\n                .mul(10 ** IERC20Details(toAsset).decimals())     // Convert to `toAsset` decimal precision.\r\n                .div(globals.getLatestPrice(toAsset))             // Convert to `toAsset` value.\r\n                .div(10 ** IERC20Details(fromAsset).decimals());  // Convert from `fromAsset` decimal precision.\r\n    }\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/utils/Address.sol\r\n/* pragma solidity >=0.6.2 <0.8.0; */\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol\r\n/* pragma solidity >=0.6.0 <0.8.0; */\r\n\r\n/* import \"./IERC20.sol\"; */\r\n/* import \"../../math/SafeMath.sol\"; */\r\n/* import \"../../utils/Address.sol\"; */\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n////// contracts/library/LoanLib.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"../interfaces/ICollateralLocker.sol\"; */\r\n/* import \"../interfaces/ICollateralLockerFactory.sol\"; */\r\n/* import \"../interfaces/IERC20Details.sol\"; */\r\n/* import \"../interfaces/IFundingLocker.sol\"; */\r\n/* import \"../interfaces/IFundingLockerFactory.sol\"; */\r\n/* import \"../interfaces/IMapleGlobals.sol\"; */\r\n/* import \"../interfaces/ILateFeeCalc.sol\"; */\r\n/* import \"../interfaces/ILoanFactory.sol\"; */\r\n/* import \"../interfaces/IPremiumCalc.sol\"; */\r\n/* import \"../interfaces/IRepaymentCalc.sol\"; */\r\n/* import \"../interfaces/IUniswapRouter.sol\"; */\r\n\r\n/* import \"../library/Util.sol\"; */\r\n\r\n/* import \"lib/openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol\"; */\r\n/* import \"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\"; */\r\n\r\n/// @title LoanLib is a library of utility functions used by Loan.\r\nlibrary LoanLib {\r\n\r\n    using SafeMath  for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public constant UNISWAP_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n    /********************************/\r\n    /*** Lender Utility Functions ***/\r\n    /********************************/\r\n\r\n    /**\r\n        @dev    Performs sanity checks on the data passed in Loan constructor.\r\n        @param  globals         Instance of a MapleGlobals.\r\n        @param  liquidityAsset  Contract address of the Liquidity Asset.\r\n        @param  collateralAsset Contract address of the Collateral Asset.\r\n        @param  specs           Contains specifications for this Loan.\r\n    */\r\n    function loanSanityChecks(IMapleGlobals globals, address liquidityAsset, address collateralAsset, uint256[5] calldata specs) external view {\r\n        require(globals.isValidLiquidityAsset(liquidityAsset),   \"L:INVALID_LIQ_ASSET\");\r\n        require(globals.isValidCollateralAsset(collateralAsset), \"L:INVALID_COL_ASSET\");\r\n\r\n        require(specs[2] != uint256(0),               \"L:ZERO_PID\");\r\n        require(specs[1].mod(specs[2]) == uint256(0), \"L:INVALID_TERM_DAYS\");\r\n        require(specs[3] > uint256(0),                \"L:ZERO_REQUEST_AMT\");\r\n    }\r\n\r\n    /**\r\n        @dev    Returns capital to Lenders, if the Borrower has not drawn down the Loan past the grace period.\r\n        @param  liquidityAsset IERC20 of the Liquidity Asset.\r\n        @param  fundingLocker  Address of FundingLocker.\r\n        @param  createdAt      Timestamp of Loan instantiation.\r\n        @param  fundingPeriod  Duration of the funding period, after which funds can be reclaimed.\r\n        @return excessReturned Amount of Liquidity Asset that was returned to the Loan from the FundingLocker.\r\n    */\r\n    function unwind(IERC20 liquidityAsset, address fundingLocker, uint256 createdAt, uint256 fundingPeriod) external returns (uint256 excessReturned) {\r\n        // Only callable if Loan funding period has elapsed.\r\n        require(block.timestamp > createdAt.add(fundingPeriod), \"L:STILL_FUNDING_PERIOD\");\r\n\r\n        // Account for existing balance in Loan.\r\n        uint256 preBal = liquidityAsset.balanceOf(address(this));\r\n\r\n        // Drain funding from FundingLocker, transfers all the Liquidity Asset to this Loan.\r\n        IFundingLocker(fundingLocker).drain();\r\n\r\n        return liquidityAsset.balanceOf(address(this)).sub(preBal);\r\n    }\r\n\r\n    /**\r\n        @dev    Liquidates a Borrower's collateral, via Uniswap, when a default is triggered. Only the Loan can call this function.\r\n        @param  collateralAsset  IERC20 of the Collateral Asset.\r\n        @param  liquidityAsset   Address of Liquidity Asset.\r\n        @param  superFactory     Factory that instantiated Loan.\r\n        @param  collateralLocker Address of CollateralLocker.\r\n        @return amountLiquidated Amount of Collateral Asset that was liquidated.\r\n        @return amountRecovered  Amount of Liquidity Asset that was returned to the Loan from the liquidation.\r\n    */\r\n    function liquidateCollateral(\r\n        IERC20  collateralAsset,\r\n        address liquidityAsset,\r\n        address superFactory,\r\n        address collateralLocker\r\n    ) \r\n        external\r\n        returns (\r\n            uint256 amountLiquidated,\r\n            uint256 amountRecovered\r\n        ) \r\n    {\r\n        // Get the liquidation amount from CollateralLocker.\r\n        uint256 liquidationAmt = collateralAsset.balanceOf(address(collateralLocker));\r\n        \r\n        // Pull the Collateral Asset from CollateralLocker.\r\n        ICollateralLocker(collateralLocker).pull(address(this), liquidationAmt);\r\n\r\n        if (address(collateralAsset) == liquidityAsset || liquidationAmt == uint256(0)) return (liquidationAmt, liquidationAmt);\r\n\r\n        collateralAsset.safeApprove(UNISWAP_ROUTER, uint256(0));\r\n        collateralAsset.safeApprove(UNISWAP_ROUTER, liquidationAmt);\r\n\r\n        IMapleGlobals globals = _globals(superFactory);\r\n\r\n        // Get minimum amount of loan asset get after swapping collateral asset.\r\n        uint256 minAmount = Util.calcMinAmount(globals, address(collateralAsset), liquidityAsset, liquidationAmt);\r\n\r\n        // Generate Uniswap path.\r\n        address uniswapAssetForPath = globals.defaultUniswapPath(address(collateralAsset), liquidityAsset);\r\n        bool middleAsset = uniswapAssetForPath != liquidityAsset && uniswapAssetForPath != address(0);\r\n\r\n        address[] memory path = new address[](middleAsset ? 3 : 2);\r\n\r\n        path[0] = address(collateralAsset);\r\n        path[1] = middleAsset ? uniswapAssetForPath : liquidityAsset;\r\n\r\n        if (middleAsset) path[2] = liquidityAsset;\r\n\r\n        // Swap collateralAsset for Liquidity Asset.\r\n        uint256[] memory returnAmounts = IUniswapRouter(UNISWAP_ROUTER).swapExactTokensForTokens(\r\n            liquidationAmt,\r\n            minAmount.sub(minAmount.mul(globals.maxSwapSlippage()).div(10_000)),\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        return(returnAmounts[0], returnAmounts[path.length - 1]);\r\n    }\r\n\r\n    /**********************************/\r\n    /*** Governor Utility Functions ***/\r\n    /**********************************/\r\n\r\n    /**\r\n        @dev   Transfers any locked funds to the Governor. Only the Governor can call this function.\r\n        @param token          Address of the token to be reclaimed.\r\n        @param liquidityAsset Address of token that is used by the loan for drawdown and payments.\r\n        @param globals        Instance of a MapleGlobals.\r\n    */\r\n    function reclaimERC20(address token, address liquidityAsset, IMapleGlobals globals) external {\r\n        require(msg.sender == globals.governor(),               \"L:NOT_GOV\");\r\n        require(token != liquidityAsset && token != address(0), \"L:INVALID_TOKEN\");\r\n        IERC20(token).safeTransfer(msg.sender, IERC20(token).balanceOf(address(this)));\r\n    }\r\n\r\n    /************************/\r\n    /*** Getter Functions ***/\r\n    /************************/\r\n\r\n    /**\r\n        @dev    Returns if a default can be triggered.\r\n        @param  nextPaymentDue     Timestamp of when payment is due.\r\n        @param  defaultGracePeriod Amount of time after the next payment is due that a Borrower has before a liquidation can occur.\r\n        @param  superFactory       Factory that instantiated Loan.\r\n        @param  balance            LoanFDT balance of account trying to trigger a default.\r\n        @param  totalSupply        Total supply of LoanFDT.\r\n        @return Boolean indicating if default can be triggered.\r\n    */\r\n    function canTriggerDefault(uint256 nextPaymentDue, uint256 defaultGracePeriod, address superFactory, uint256 balance, uint256 totalSupply) external view returns (bool) {\r\n        bool pastDefaultGracePeriod = block.timestamp > nextPaymentDue.add(defaultGracePeriod);\r\n\r\n        // Check if the Loan is past the default grace period and that the account triggering the default has a percentage of total LoanFDTs\r\n        // that is greater than the minimum equity needed (specified in globals)\r\n        return pastDefaultGracePeriod && balance >= ((totalSupply * _globals(superFactory).minLoanEquity()) / 10_000);\r\n    }\r\n\r\n    /**\r\n        @dev    Returns information on next payment amount.\r\n        @param  repaymentCalc   Address of RepaymentCalc.\r\n        @param  nextPaymentDue  Timestamp of when payment is due.\r\n        @param  lateFeeCalc     Address of LateFeeCalc.\r\n        @return total           Entitled total amount needed to be paid in the next payment (Principal + Interest only when the next payment is last payment of the Loan).\r\n        @return principal       Entitled principal amount needed to be paid in the next payment.\r\n        @return interest        Entitled interest amount needed to be paid in the next payment.\r\n        @return _nextPaymentDue Payment Due Date.\r\n        @return paymentLate     Whether payment is late.\r\n    */\r\n    function getNextPayment(\r\n        address repaymentCalc,\r\n        uint256 nextPaymentDue,\r\n        address lateFeeCalc\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256 total,\r\n            uint256 principal,\r\n            uint256 interest,\r\n            uint256 _nextPaymentDue,\r\n            bool    paymentLate\r\n        ) \r\n    {\r\n        _nextPaymentDue  = nextPaymentDue;\r\n\r\n        // Get next payment amounts from RepaymentCalc.\r\n        (total, principal, interest) = IRepaymentCalc(repaymentCalc).getNextPayment(address(this));\r\n\r\n        paymentLate = block.timestamp > _nextPaymentDue;\r\n\r\n        // If payment is late, add late fees.\r\n        if (paymentLate) {\r\n            uint256 lateFee = ILateFeeCalc(lateFeeCalc).getLateFee(interest);\r\n            \r\n            total    = total.add(lateFee);\r\n            interest = interest.add(lateFee);\r\n        }\r\n    }\r\n\r\n    /**\r\n        @dev    Returns information on full payment amount.\r\n        @param  repaymentCalc   Address of RepaymentCalc.\r\n        @param  nextPaymentDue  Timestamp of when payment is due.\r\n        @param  lateFeeCalc     Address of LateFeeCalc.\r\n        @param  premiumCalc     Address of PremiumCalc.\r\n        @return total           Principal + Interest for the full payment.\r\n        @return principal       Entitled principal amount needed to be paid in the full payment.\r\n        @return interest        Entitled interest amount needed to be paid in the full payment.\r\n    */\r\n    function getFullPayment(\r\n        address repaymentCalc,\r\n        uint256 nextPaymentDue,\r\n        address lateFeeCalc,\r\n        address premiumCalc\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256 total,\r\n            uint256 principal,\r\n            uint256 interest\r\n        ) \r\n    {\r\n        (total, principal, interest) = IPremiumCalc(premiumCalc).getPremiumPayment(address(this));\r\n\r\n        if (block.timestamp <= nextPaymentDue) return (total, principal, interest);\r\n\r\n        // If payment is late, calculate and add late fees using interest amount from regular payment.\r\n        (,, uint256 regInterest) = IRepaymentCalc(repaymentCalc).getNextPayment(address(this));\r\n\r\n        uint256 lateFee = ILateFeeCalc(lateFeeCalc).getLateFee(regInterest);\r\n        \r\n        total    = total.add(lateFee);\r\n        interest = interest.add(lateFee);\r\n    }\r\n\r\n    /**\r\n        @dev    Calculates collateral required to drawdown amount.\r\n        @param  collateralAsset IERC20 of the Collateral Asset.\r\n        @param  liquidityAsset  IERC20 of the Liquidity Asset.\r\n        @param  collateralRatio Percentage of drawdown value that must be posted as collateral.\r\n        @param  superFactory    Factory that instantiated Loan.\r\n        @param  amt             Drawdown amount.\r\n        @return Amount of Collateral Asset required to post in CollateralLocker for given drawdown amount.\r\n    */\r\n    function collateralRequiredForDrawdown(\r\n        IERC20Details collateralAsset,\r\n        IERC20Details liquidityAsset,\r\n        uint256 collateralRatio,\r\n        address superFactory,\r\n        uint256 amt\r\n    ) \r\n        external\r\n        view\r\n        returns (uint256) \r\n    {\r\n        IMapleGlobals globals = _globals(superFactory);\r\n\r\n        uint256 wad = _toWad(amt, liquidityAsset);  // Convert to WAD precision.\r\n\r\n        // Fetch current value of Liquidity Asset and Collateral Asset (Chainlink oracles provide 8 decimal precision).\r\n        uint256 liquidityAssetPrice  = globals.getLatestPrice(address(liquidityAsset));\r\n        uint256 collateralPrice = globals.getLatestPrice(address(collateralAsset));\r\n\r\n        // Calculate collateral required.\r\n        uint256 collateralRequiredUSD = wad.mul(liquidityAssetPrice).mul(collateralRatio).div(10_000);  // 18 + 8 = 26 decimals\r\n        uint256 collateralRequiredWAD = collateralRequiredUSD.div(collateralPrice);                     // 26 - 8 = 18 decimals\r\n\r\n        return collateralRequiredWAD.mul(10 ** collateralAsset.decimals()).div(10 ** 18);  // 18 + collateralAssetDecimals - 18 = collateralAssetDecimals\r\n    }\r\n\r\n    /************************/\r\n    /*** Helper Functions ***/\r\n    /************************/\r\n\r\n    function _globals(address loanFactory) internal view returns (IMapleGlobals) {\r\n        return IMapleGlobals(ILoanFactory(loanFactory).globals());\r\n    }\r\n\r\n    function _toWad(uint256 amt, IERC20Details liquidityAsset) internal view returns (uint256) {\r\n        return amt.mul(10 ** 18).div(10 ** liquidityAsset.decimals());\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"UNISWAP_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nextPaymentDue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defaultGracePeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"superFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"canTriggerDefault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Details\",\"name\":\"collateralAsset\",\"type\":\"IERC20Details\"},{\"internalType\":\"contract IERC20Details\",\"name\":\"liquidityAsset\",\"type\":\"IERC20Details\"},{\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"superFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"collateralRequiredForDrawdown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"repaymentCalc\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nextPaymentDue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lateFeeCalc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"premiumCalc\",\"type\":\"address\"}],\"name\":\"getFullPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"repaymentCalc\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nextPaymentDue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lateFeeCalc\",\"type\":\"address\"}],\"name\":\"getNextPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextPaymentDue\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"paymentLate\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMapleGlobals\",\"name\":\"globals\",\"type\":\"IMapleGlobals\"},{\"internalType\":\"address\",\"name\":\"liquidityAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256[5]\",\"name\":\"specs\",\"type\":\"uint256[5]\"}],\"name\":\"loanSanityChecks\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LoanLib","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"Util:95f9676a34af2675b63948ddba8f8c798741a52a","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://864128c66a53995e5790b724006db2d47fa8e1f58850b654bd90294bf44b6036"}]}