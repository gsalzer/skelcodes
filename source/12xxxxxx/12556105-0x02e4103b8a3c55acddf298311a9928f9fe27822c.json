{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * Crypto stamp Bridge: Token Holder\r\n * ERC-721 and ERC-1155 tokens deposited to the bridge are owned by this\r\n * contract while they are active on the other side of the bridge. The bridge\r\n * can exit them from here again if needed via the bridge head. Users can push\r\n * tokens to the bridge via safeTresferFrom() to this token holder, or run\r\n * pull-based deposits via the bridge head.\r\n *\r\n * Developed by Capacity Blockchain Solutions GmbH <capacity.at>\r\n * for Ã–sterreichische Post AG <post.at>\r\n *\r\n * Any usage of or interaction with this set of contracts is subject to the\r\n * Terms & Conditions available at https://crypto.post.at/\r\n */\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\r\n\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/ENSReverseRegistrarI.sol\r\n\r\n/*\r\n * Interfaces for ENS Reverse Registrar\r\n * See https://github.com/ensdomains/ens/blob/master/contracts/ReverseRegistrar.sol for full impl\r\n * Also see https://github.com/wealdtech/wealdtech-solidity/blob/master/contracts/ens/ENSReverseRegister.sol\r\n *\r\n * Use this as follows (registryAddress is the address of the ENS registry to use):\r\n * -----\r\n * // This hex value is caclulated by namehash('addr.reverse')\r\n * bytes32 public constant ENS_ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\r\n * function registerReverseENS(address registryAddress, string memory calldata) external {\r\n *     require(registryAddress != address(0), \"need a valid registry\");\r\n *     address reverseRegistrarAddress = ENSRegistryOwnerI(registryAddress).owner(ENS_ADDR_REVERSE_NODE)\r\n *     require(reverseRegistrarAddress != address(0), \"need a valid reverse registrar\");\r\n *     ENSReverseRegistrarI(reverseRegistrarAddress).setName(name);\r\n * }\r\n * -----\r\n * or\r\n * -----\r\n * function registerReverseENS(address reverseRegistrarAddress, string memory calldata) external {\r\n *    require(reverseRegistrarAddress != address(0), \"need a valid reverse registrar\");\r\n *     ENSReverseRegistrarI(reverseRegistrarAddress).setName(name);\r\n * }\r\n * -----\r\n * ENS deployments can be found at https://docs.ens.domains/ens-deployments\r\n * E.g. Etherscan can be used to look up that owner on those contracts.\r\n * namehash.hash(\"addr.reverse\") == \"0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2\"\r\n * Ropsten: ens.owner(namehash.hash(\"addr.reverse\")) == \"0x6F628b68b30Dc3c17f345c9dbBb1E483c2b7aE5c\"\r\n * Mainnet: ens.owner(namehash.hash(\"addr.reverse\")) == \"0x084b1c3C81545d370f3634392De611CaaBFf8148\"\r\n */\r\n\r\ninterface ENSRegistryOwnerI {\r\n    function owner(bytes32 node) external view returns (address);\r\n}\r\n\r\ninterface ENSReverseRegistrarI {\r\n    event NameChanged(bytes32 indexed node, string name);\r\n    /**\r\n     * @dev Sets the `name()` record for the reverse ENS record associated with\r\n     * the calling account.\r\n     * @param name The name to set for this address.\r\n     * @return The ENS node hash of the reverse record.\r\n     */\r\n    function setName(string calldata name) external returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\r\n\r\n\r\n\r\n/**\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n}\r\n\r\n// File: contracts/BridgeDataI.sol\r\n\r\n/*\r\n * Interface for data storage of the bridge.\r\n */\r\n\r\ninterface BridgeDataI {\r\n\r\n    event AddressChanged(string name, address previousAddress, address newAddress);\r\n    event ConnectedChainChanged(string previousConnectedChainName, string newConnectedChainName);\r\n    event TokenURIBaseChanged(string previousTokenURIBase, string newTokenURIBase);\r\n    event TokenSunsetAnnounced(uint256 indexed timestamp);\r\n\r\n    /**\r\n     * @dev The name of the chain connected to / on the other side of this bridge head.\r\n     */\r\n    function connectedChainName() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev The name of our own chain, used in token URIs handed to deployed tokens.\r\n     */\r\n    function ownChainName() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev The base of ALL token URIs, e.g. https://example.com/\r\n     */\r\n    function tokenURIBase() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev The sunset timestamp for all deployed tokens.\r\n     * If 0, no sunset is in place. Otherwise, if older than block timestamp,\r\n     * all transfers of the tokens are frozen.\r\n     */\r\n    function tokenSunsetTimestamp() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Set a token sunset timestamp.\r\n     */\r\n    function setTokenSunsetTimestamp(uint256 _timestamp) external;\r\n\r\n    /**\r\n     * @dev Set an address for a name.\r\n     */\r\n    function setAddress(string memory name, address newAddress) external;\r\n\r\n    /**\r\n     * @dev Get an address for a name.\r\n     */\r\n    function getAddress(string memory name) external view returns (address);\r\n}\r\n\r\n// File: contracts/BridgeHeadI.sol\r\n\r\n/*\r\n * Interface for a Bridge Head.\r\n */\r\n\r\n\r\ninterface BridgeHeadI {\r\n\r\n    /**\r\n     * @dev Emitted when an ERC721 token is deposited to the bridge.\r\n     */\r\n    event TokenDepositedERC721(address indexed tokenAddress, uint256 indexed tokenId, address indexed otherChainRecipient);\r\n\r\n    /**\r\n     * @dev Emitted when one or more ERC1155 tokens are deposited to the bridge.\r\n     */\r\n    event TokenDepositedERC1155Batch(address indexed tokenAddress, uint256[] tokenIds, uint256[] amounts, address indexed otherChainRecipient);\r\n\r\n    /**\r\n     * @dev Emitted when an ERC721 token is exited from the bridge.\r\n     */\r\n    event TokenExitedERC721(address indexed tokenAddress, uint256 indexed tokenId, address indexed recipient);\r\n\r\n    /**\r\n     * @dev Emitted when one or more ERC1155 tokens are exited from the bridge.\r\n     */\r\n    event TokenExitedERC1155Batch(address indexed tokenAddress, uint256[] tokenIds, uint256[] amounts, address indexed recipient);\r\n\r\n    /**\r\n     * @dev Emitted when a new bridged token is deployed.\r\n     */\r\n    event BridgedTokenDeployed(address indexed ownAddress, address indexed foreignAddress);\r\n\r\n    /**\r\n     * @dev The address of the bridge data contract storing all addresses and chain info for this bridge\r\n     */\r\n    function bridgeData() external view returns (BridgeDataI);\r\n\r\n    /**\r\n     * @dev The bridge controller address\r\n     */\r\n    function bridgeControl() external view returns (address);\r\n\r\n    /**\r\n     * @dev The token holder contract connected to this bridge head\r\n     */\r\n    function tokenHolder() external view returns (TokenHolderI);\r\n\r\n    /**\r\n     * @dev The name of the chain connected to / on the other side of this bridge head.\r\n     */\r\n    function connectedChainName() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev The name of our own chain, used in token URIs handed to deployed tokens.\r\n     */\r\n    function ownChainName() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev The minimum amount of (valid) signatures that need to be present in `processExitData()`.\r\n     */\r\n    function minSignatures() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev True if deposits are possible at this time.\r\n     */\r\n    function depositEnabled() external view returns (bool);\r\n\r\n    /**\r\n     * @dev True if exits are possible at this time.\r\n     */\r\n    function exitEnabled() external view returns (bool);\r\n\r\n    /**\r\n     * @dev Called by token holder when a ERC721 token has been deposited and\r\n     * needs to be moved to the other side of the bridge.\r\n     */\r\n    function tokenDepositedERC721(address tokenAddress, uint256 tokenId, address otherChainRecipient) external;\r\n\r\n    /**\r\n     * @dev Called by token holder when a ERC1155 token has been deposited and\r\n     * needs to be moved to the other side of the bridge. If it was no batch\r\n     * deposit, still this function is called with with only the one items in\r\n     * the batch.\r\n     */\r\n    function tokenDepositedERC1155Batch(address tokenAddress, uint256[] calldata tokenIds, uint256[] calldata amounts, address otherChainRecipient) external;\r\n\r\n    /**\r\n     * @dev Called by people/contracts who want to move an ERC721 token to the\r\n     * other side of the bridge. Needs to be called by the current token owner.\r\n     */\r\n    function depositERC721(address tokenAddress, uint256 tokenId, address otherChainRecipient) external;\r\n\r\n    /**\r\n     * @dev Called by people/contracts who want to move an ERC1155 token to the\r\n     * other side of the bridge. When only a single token ID is desposited,\r\n     * called with only one entry in the arrays. Needs to be called by the\r\n     * current token owner.\r\n     */\r\n    function depositERC1155Batch(address tokenAddress, uint256[] calldata tokenIds, uint256[] calldata amounts, address otherChainRecipient) external;\r\n\r\n    /**\r\n     * @dev Process an exit message. Can be called by anyone, but requires data\r\n     * with valid signatures from a minimum of `minSignatures()` of allowed\r\n     * signer addresses and an exit nonce for the respective signer that has\r\n     * not been used yet. Also, all signers need to be ordered with ascending\r\n     * addresses for the call to succeed.\r\n     * The ABI-encoded payload is for a call on the bridge head contract.\r\n     * The signature is over the contract address, the chain ID, the exit\r\n     * nonce, and the payload.\r\n     */\r\n    function processExitData(bytes memory _payload, uint256 _expirationTimestamp, bytes[] memory _signatures, uint256[] memory _exitNonces) external;\r\n\r\n    /**\r\n     * @dev Return a predicted token address given the prototype name as listed\r\n     * in bridge data (\"ERC721Prototype\" or \"ERC1155Prototype\") and foreign\r\n     * token address.\r\n     */\r\n    function predictTokenAddress(string memory _prototypeName, address _foreignAddress) external view returns (address);\r\n\r\n    /**\r\n     * @dev Exit an ERC721 token from the bridge to a recipient. Can be owned\r\n     * by either the token holder or an address that is treated as an\r\n     * equivalent holder for the bride. If not existing, can be minted if\r\n     * allowed, or even a token deployed based in a given foreign address and\r\n     * symbol. If properties data is set, will send that to the token contract\r\n     * to set properties for the token.\r\n     */\r\n    function exitERC721(address _tokenAddress, uint256 _tokenId, address _recipient, address _foreignAddress, bool _allowMinting, string calldata _symbol, bytes calldata _propertiesData) external;\r\n\r\n    /**\r\n     * @dev Exit an already existing ERC721 token from the bridge to a\r\n     * recipient, owned currently by the bridge in some form.\r\n     */\r\n    function exitERC721Existing(address _tokenAddress, uint256 _tokenId, address _recipient) external;\r\n\r\n    /**\r\n     * @dev Exit ERC1155 token(s) from the bridge to a recipient. The token\r\n     * source can be the token holder, an equivalent, or a Collection. Only\r\n     * tokens owned by one source can be existed in one transaction. If the\r\n     * source is the zero address, tokens will be minted.\r\n     */\r\n    function exitERC1155Batch(address _tokenAddress, uint256[] memory _tokenIds, uint256[] memory _amounts, address _recipient, address _foreignAddress, address _tokenSource) external;\r\n\r\n    /**\r\n     * @dev Exit an already existing ERC1155 token from the bridge to a\r\n     * recipient, owned currently by the token holder.\r\n     */\r\n    function exitERC1155BatchFromHolder(address _tokenAddress, uint256[] memory _tokenIds, uint256[] memory _amounts, address _recipient) external;\r\n\r\n    /**\r\n     * @dev Forward calls to external contracts. Can only be called by owner.\r\n     * Given a contract address and an already-encoded payload (with a function call etc.),\r\n     * we call that contract with this payload, e.g. to trigger actions in the name of the token holder.\r\n     */\r\n    function callAsHolder(address payable _remoteAddress, bytes calldata _callPayload) external payable;\r\n\r\n}\r\n\r\n// File: contracts/TokenHolderI.sol\r\n\r\n/*\r\n * Interface for a Token Holder.\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface TokenHolderI is IERC165, IERC721Receiver, IERC1155Receiver {\r\n\r\n    /**\r\n     * @dev The address of the bridge data contract storing all addresses and chain info for this bridge\r\n     */\r\n    function bridgeData() external view returns (BridgeDataI);\r\n\r\n    /**\r\n     * @dev The bridge head contract connected to this token holder\r\n     */\r\n    function bridgeHead() external view returns (BridgeHeadI);\r\n\r\n    /**\r\n     * @dev Forward calls to external contracts. Can only be called by owner.\r\n     * Given a contract address and an already-encoded payload (with a function call etc.),\r\n     * we call that contract with this payload, e.g. to trigger actions in the name of the bridge.\r\n     */\r\n    function externalCall(address payable _remoteAddress, bytes calldata _callPayload) external payable;\r\n\r\n    /**\r\n     * @dev Transfer ERC721 tokens out of the holder contract.\r\n     */\r\n    function safeTransferERC721(address _tokenAddress, uint256 _tokenId, address _to) external;\r\n\r\n    /**\r\n     * @dev Transfer ERC1155 tokens out of the holder contract.\r\n     */\r\n    function safeTransferERC1155Batch(address _tokenAddress, uint256[] memory _tokenIds, uint256[] memory _amounts, address _to) external;\r\n\r\n}\r\n\r\n// File: contracts/CollectionsI.sol\r\n\r\n/*\r\n * Interface for the Collections factory.\r\n */\r\n\r\n\r\n/**\r\n * @dev Outward-facing interface of a Collections contract.\r\n */\r\ninterface CollectionsI is IERC721 {\r\n\r\n    /**\r\n     * @dev Emitted when a new collection is created.\r\n     */\r\n    event NewCollection(address indexed owner, address collectionAddress);\r\n\r\n    /**\r\n     * @dev Emitted when a collection is destroyed.\r\n     */\r\n    event KilledCollection(address indexed owner, address collectionAddress);\r\n\r\n    /**\r\n     * @dev Creates a new Collection. For calling from other contracts,\r\n     * returns the address of the new Collection.\r\n     */\r\n    function create(address _notificationContract,\r\n                    string calldata _ensName,\r\n                    string calldata _ensSubdomainName,\r\n                    address _ensSubdomainRegistrarAddress,\r\n                    address _ensReverseRegistrarAddress)\r\n    external payable\r\n    returns (address);\r\n\r\n    /**\r\n     * @dev Create a collection for a different owner. Only callable by a\r\n     * create controller role. For calling from other contracts, returns the\r\n     * address of the new Collection.\r\n     */\r\n    function createFor(address payable _newOwner,\r\n                       address _notificationContract,\r\n                       string calldata _ensName,\r\n                       string calldata _ensSubdomainName,\r\n                       address _ensSubdomainRegistrarAddress,\r\n                       address _ensReverseRegistrarAddress)\r\n    external payable\r\n    returns (address);\r\n\r\n    /**\r\n     * @dev Removes (burns) an empty Collection. Only the Collection contract itself can call this.\r\n     */\r\n    function burn(uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns if a Collection NFT exists for the specified `tokenId`.\r\n     */\r\n    function exists(uint256 tokenId) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns whether the given spender can transfer a given `collectionAddr`.\r\n     */\r\n    function isApprovedOrOwnerOnCollection(address spender, address collectionAddr) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the Collection address for a token ID.\r\n     */\r\n    function collectionAddress(uint256 tokenId) external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the token ID for a Collection address.\r\n     */\r\n    function tokenIdForCollection(address collectionAddr) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns true if a Collection exists at this address, false if not.\r\n     */\r\n    function collectionExists(address collectionAddr) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the owner of the Collection with the given address.\r\n     */\r\n    function collectionOwner(address collectionAddr) external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns a Collection address owned by `owner` at a given `index` of\r\n     * its Collections list. Mirrors `tokenOfOwnerByIndex` in ERC721Enumerable.\r\n     */\r\n    function collectionOfOwnerByIndex(address owner, uint256 index) external view returns (address);\r\n\r\n}\r\n\r\n// File: contracts/CollectionI.sol\r\n\r\n/*\r\n * Interface for a single Collection, which is a very lightweight contract that can be the owner of ERC721 tokens.\r\n */\r\n\r\n\r\n\r\n\r\n\r\ninterface CollectionI is IERC165, IERC721Receiver, IERC1155Receiver  {\r\n\r\n    /**\r\n     * @dev Emitted when the notification conmtract is changed.\r\n     */\r\n    event NotificationContractTransferred(address indexed previousNotificationContract, address indexed newNotificationContract);\r\n\r\n    /**\r\n     * @dev Emitted when an asset is added to the collection.\r\n     */\r\n    event AssetAdded(address tokenAddress, uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when an asset is removed to the collection.\r\n     */\r\n    event AssetRemoved(address tokenAddress, uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when the Collection is destroyed.\r\n     */\r\n    event CollectionDestroyed(address operator);\r\n\r\n    /**\r\n     * @dev True is this is the prototype, false if this is an active\r\n     * (clone/proxy) collection contract.\r\n     */\r\n    function isPrototype() external view returns (bool);\r\n\r\n    /**\r\n     * @dev The linked Collections factory (the ERC721 contract).\r\n     */\r\n    function collections() external view returns (CollectionsI);\r\n\r\n    /**\r\n     * @dev The linked notification contract (e.g. achievements).\r\n     */\r\n    function notificationContract() external view returns (address);\r\n\r\n    /**\r\n     * @dev Initializes a new Collection. Needs to be called by the Collections\r\n     * factory.\r\n     */\r\n    function initialRegister(address _notificationContract,\r\n                             string calldata _ensName,\r\n                             string calldata _ensSubdomainName,\r\n                             address _ensSubdomainRegistrarAddress,\r\n                             address _ensReverseRegistrarAddress)\r\n    external;\r\n\r\n    /**\r\n     * @dev Switch the notification contract to a different address. Set to the\r\n     * zero address to disable notifications. Can only be called by owner.\r\n     */\r\n    function transferNotificationContract(address _newNotificationContract) external;\r\n\r\n    /**\r\n     * @dev Get collection owner from ERC 721 parent (Collections factory).\r\n     */\r\n    function ownerAddress() external view returns (address);\r\n\r\n    /**\r\n     * @dev Determine if the Collection owns a specific asset.\r\n     */\r\n    function ownsAsset(address _tokenAddress, uint256 _tokenId) external view returns(bool);\r\n\r\n    /**\r\n     * @dev Get count of owned assets.\r\n     */\r\n    function ownedAssetsCount() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Make sure ownership of a certain asset is recorded correctly (added\r\n     * if the collection owns it or removed if it doesn't).\r\n     */\r\n    function syncAssetOwnership(address _tokenAddress, uint256 _tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfer an owned asset to a new owner (for ERC1155, a single item\r\n     * of that asset).\r\n     */\r\n    function safeTransferTo(address _tokenAddress, uint256 _tokenId, address _to) external;\r\n\r\n    /**\r\n     * @dev Transfer a certain amount of an owned asset to a new owner (for\r\n     * ERC721, _value is ignored).\r\n     */\r\n    function safeTransferTo(address _tokenAddress, uint256 _tokenId, address _to, uint256 _value) external;\r\n\r\n    /**\r\n     * @dev Destroy and burn an empty Collection. Can only be called by owner\r\n     * and only on empty collections.\r\n     */\r\n    function destroy() external;\r\n\r\n    /**\r\n     * @dev Forward calls to external contracts. Can only be called by owner.\r\n     * Given a contract address and an already-encoded payload (with a function\r\n     * call etc.), we call that contract with this payload, e.g. to trigger\r\n     * actions in the name of the collection.\r\n     */\r\n    function externalCall(address payable _remoteAddress, bytes calldata _callPayload) external payable;\r\n\r\n    /**\r\n     * @dev Register ENS name. Can only be called by owner.\r\n     */\r\n    function registerENS(string calldata _name, address _registrarAddress) external;\r\n\r\n    /**\r\n     * @dev Register Reverse ENS name. Can only be called by owner.\r\n     */\r\n    function registerReverseENS(address _reverseRegistrarAddress, string calldata _name) external;\r\n}\r\n\r\n// File: contracts/TokenHolder.sol\r\n\r\n/*\r\n * Token Holder for the Crypto stamp bridge.\r\n * This contract holds all tokens on its own layer/chain that have been\r\n * deposited into the other layer/chain. Deposit interactions happen directly\r\n * with depositing users, all other interactions (such as exits) come via the\r\n * Bridge Head.\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract TokenHolder is ERC165, TokenHolderI {\r\n    using Address for address;\r\n    using Address for address payable;\r\n\r\n    BridgeDataI public override bridgeData;\r\n\r\n    event BridgeDataChanged(address indexed previousBridgeData, address indexed newBridgeData);\r\n\r\n    constructor(address _bridgeDataAddress)\r\n    {\r\n        bridgeData = BridgeDataI(_bridgeDataAddress);\r\n    }\r\n\r\n    modifier onlyBridgeControl()\r\n    {\r\n        require(msg.sender == bridgeData.getAddress(\"bridgeControl\"), \"bridgeControl key required for this function.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyBridge()\r\n    {\r\n        require(msg.sender == bridgeData.getAddress(\"bridgeControl\") || msg.sender == bridgeData.getAddress(\"bridgeHead\"), \"bridgeControl key or bridge head required for this function.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyTokenAssignmentControl() {\r\n        require(msg.sender == bridgeData.getAddress(\"tokenAssignmentControl\"), \"tokenAssignmentControl key required for this function.\");\r\n        _;\r\n    }\r\n\r\n    /*** ERC165 ***/\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n    public view override(ERC165, IERC165)\r\n    returns (bool)\r\n    {\r\n        return interfaceId == type(IERC721Receiver).interfaceId ||\r\n               interfaceId == type(IERC1155Receiver).interfaceId ||\r\n               super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /*** Enable adjusting variables after deployment ***/\r\n\r\n    function setBridgeData(BridgeDataI _newBridgeData)\r\n    external\r\n    onlyBridgeControl\r\n    {\r\n        require(address(_newBridgeData) != address(0x0), \"You need to provide an actual bridge data contract.\");\r\n        emit BridgeDataChanged(address(bridgeData), address(_newBridgeData));\r\n        bridgeData = _newBridgeData;\r\n    }\r\n\r\n    function bridgeHead()\r\n    public view override\r\n    returns (BridgeHeadI) {\r\n        return BridgeHeadI(bridgeData.getAddress(\"bridgeHead\"));\r\n    }\r\n\r\n    /*** Deal with ERC721 and ERC1155 tokens we receive ***/\r\n\r\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes memory _data)\r\n    external override\r\n    returns (bytes4)\r\n    {\r\n        address otherChainRecipient = getRecipient(_operator, _from, _data);\r\n        address _tokenAddress = msg.sender;\r\n        // Make sure whoever called this plays nice, check for token being an ERC721 contract.\r\n        require(IERC165(_tokenAddress).supportsInterface(type(IERC721).interfaceId), \"onERC721Received caller needs to implement ERC721!\");\r\n        // If it's a Collection, make sure notification contract is set to zero.\r\n        if (_tokenAddress == bridgeData.getAddress(\"Collections\")) {\r\n            CollectionI coll = CollectionI(CollectionsI(_tokenAddress).collectionAddress(_tokenId));\r\n            if (coll.notificationContract() != address(0)) {\r\n                coll.transferNotificationContract(address(0));\r\n            }\r\n        }\r\n        // Now, tell the bridge head of the deposit, it will care about forwarding this token over the bridge.\r\n        bridgeHead().tokenDepositedERC721(_tokenAddress, _tokenId, otherChainRecipient);\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data)\r\n    external override\r\n    returns(bytes4)\r\n    {\r\n        address otherChainRecipient = getRecipient(_operator, _from, _data);\r\n        address _tokenAddress = msg.sender;\r\n        // Make sure whoever called this plays nice, check for token being an ERC1155 contract.\r\n        require(IERC165(_tokenAddress).supportsInterface(type(IERC1155).interfaceId), \"onERC1155Received caller needs to implement ERC1155!\");\r\n        // Now, tell the bridge head of the deposit, it will care about forwarding this token over the bridge.\r\n        uint256[] memory tokenIds = new uint256[](1);\r\n        tokenIds[0] = _id;\r\n        uint256[] memory amounts = new uint256[](1);\r\n        amounts[0] = _value;\r\n        bridgeHead().tokenDepositedERC1155Batch(_tokenAddress, tokenIds, amounts, otherChainRecipient);\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data)\r\n    external override\r\n    returns(bytes4)\r\n    {\r\n        address otherChainRecipient = getRecipient(_operator, _from, _data);\r\n        address _tokenAddress = msg.sender;\r\n        // Make sure whoever called this plays nice, check for token being an ERC1155 contract.\r\n        require(IERC165(_tokenAddress).supportsInterface(type(IERC1155).interfaceId), \"onERC1155BatchReceived caller needs to implement ERC1155!\");\r\n        // Now, tell the bridge head of the deposit, it will care about forwarding this token over the bridge.\r\n        bridgeHead().tokenDepositedERC1155Batch(_tokenAddress, _ids, _values, otherChainRecipient);\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    function getRecipient(address _operator, address _from, bytes memory _data)\r\n    internal view\r\n    returns(address)\r\n    {\r\n        if (_operator == bridgeData.getAddress(\"bridgeHead\") && _data.length > 0) {\r\n            // This is a pull-based deposit called via the bridge head, take recipient from _data.\r\n            return abi.decode(_data, (address));\r\n        }\r\n        if (_from.isContract()) {\r\n            // We do not want tokens to end up in un-reachable addresses on the other side, so revert.\r\n            revert(\"Deposit contract-owned token via bridge head!\");\r\n        }\r\n        if (_from == address(0)) {\r\n            // We do not want tokens to end up in un-reachable addresses on the other side, so revert.\r\n            revert(\"Can't mint into bridge directly!\");\r\n        }\r\n        // This is an EOA, so we give it to that address on the other side as well.\r\n        return _from;\r\n    }\r\n\r\n    /*** Forward calls to external contracts ***/\r\n\r\n    // Given a contract address and an already-encoded payload (with a function call etc.),\r\n    // we call that contract with this payload, e.g. to trigger actions in the name of the token holder.\r\n    function externalCall(address payable _remoteAddress, bytes calldata _callPayload)\r\n    external override payable\r\n    onlyBridge\r\n    {\r\n        require(_remoteAddress != address(this) && _remoteAddress != bridgeData.getAddress(\"bridgeHead\"), \"No calls to bridge via this mechanism!\");\r\n        // Using methods from OpenZeppelin's Address library to bubble up exceptions with their messages.\r\n        if (_callPayload.length > 0) {\r\n            _remoteAddress.functionCallWithValue(_callPayload, msg.value);\r\n        }\r\n        else {\r\n            _remoteAddress.sendValue(msg.value);\r\n        }\r\n    }\r\n\r\n    /*** Transfer assets out of the holder ***/\r\n\r\n    function safeTransferERC721(address _tokenAddress, uint256 _tokenId, address _to)\r\n    public override\r\n    onlyBridge\r\n    {\r\n        IERC721(_tokenAddress).safeTransferFrom(address(this), _to, _tokenId);\r\n    }\r\n\r\n    function safeTransferERC1155Batch(address _tokenAddress, uint256[] memory _tokenIds, uint256[] memory _amounts, address _to)\r\n    public override\r\n    onlyBridge\r\n    {\r\n        IERC1155(_tokenAddress).safeBatchTransferFrom(address(this), _to, _tokenIds, _amounts, \"\");\r\n    }\r\n\r\n    /*** Enable reverse ENS registration ***/\r\n\r\n    // Call this with the address of the reverse registrar for the respective network and the ENS name to register.\r\n    // The reverse registrar can be found as the owner of 'addr.reverse' in the ENS system.\r\n    // For Mainnet, the address needed is 0x9062c0a6dbd6108336bcbe4593a3d1ce05512069\r\n    function registerReverseENS(address _reverseRegistrarAddress, string calldata _name)\r\n    external\r\n    onlyTokenAssignmentControl\r\n    {\r\n        require(_reverseRegistrarAddress != address(0), \"need a valid reverse registrar\");\r\n        ENSReverseRegistrarI(_reverseRegistrarAddress).setName(_name);\r\n    }\r\n\r\n    /*** Make sure currency or NFT doesn't get stranded in this contract ***/\r\n\r\n    // If this contract gets a balance in some ERC20 contract after it's finished, then we can rescue it.\r\n    function rescueToken(address _foreignToken, address _to)\r\n    external\r\n    onlyTokenAssignmentControl\r\n    {\r\n        IERC20 erc20Token = IERC20(_foreignToken);\r\n        erc20Token.transfer(_to, erc20Token.balanceOf(address(this)));\r\n    }\r\n\r\n    // If this contract gets a balance in some ERC721 contract after it's finished, then we can rescue it.\r\n    function approveNFTrescue(IERC721 _foreignNFT, address _to)\r\n    external\r\n    onlyTokenAssignmentControl\r\n    {\r\n        _foreignNFT.setApprovalForAll(_to, true);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeDataAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousBridgeData\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBridgeData\",\"type\":\"address\"}],\"name\":\"BridgeDataChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_foreignNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"approveNFTrescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeData\",\"outputs\":[{\"internalType\":\"contract BridgeDataI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeHead\",\"outputs\":[{\"internalType\":\"contract BridgeHeadI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_remoteAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_callPayload\",\"type\":\"bytes\"}],\"name\":\"externalCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reverseRegistrarAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"registerReverseENS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_foreignToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"safeTransferERC1155Batch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"safeTransferERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract BridgeDataI\",\"name\":\"_newBridgeData\",\"type\":\"address\"}],\"name\":\"setBridgeData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TokenHolder","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000884fc15e31b1b634732e140cb3f94b3cbfdd1c5","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7cad4ec3561ab37bc4683ff49067d85ff4362541be2d420dab33e2d359e546f3"}]}