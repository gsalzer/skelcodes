{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.3;\r\n\r\n/// @title Write data to Ethereum event log\r\n/// @author Eknir\r\n/// @notice You can use this contract to write 512 bits (64 bytes) of data to Ethereum, which is persisted in the Ethereum eventLog\r\n/// The Ethereum address of the caller, as well as the timestamp is persisted in the Ethereum transaction log\r\ncontract EventWriter {\r\n\r\n  event Written(bytes32[2] storedData);\r\n\r\n  /// @notice write writes 512 bits of data to Ethereum, where it is persisted in the storage of this contract\r\n  /// @dev data is array of bytes 32 with a lenght of 2, totalling 512 bits (64 bytes), which can represent anything (e.g. a sha3-512 hash).\r\n  /// The result can be read by observing the event log, taking note of the caller and the timestamp.\r\n  /// @param data to write to Ethereum event log\r\n  function write(bytes32[2] calldata data) public {\r\n    emit Written(data);\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[2]\",\"name\":\"storedData\",\"type\":\"bytes32[2]\"}],\"name\":\"Written\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32[2]\",\"name\":\"data\",\"type\":\"bytes32[2]\"}],\"name\":\"write\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EventWriter","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://54753e0afaa31da2ae8fbd824cd622f642c303a97f43ccce7f1d30103ca8af49"}]}