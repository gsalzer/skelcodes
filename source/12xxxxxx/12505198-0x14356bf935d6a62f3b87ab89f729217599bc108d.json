{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/version/v1/OneTokenV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"../../interface/IOneTokenV1.sol\\\";\\nimport \\\"../../_openzeppelin/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./OneTokenV1Base.sol\\\";\\n\\ncontract OneTokenV1 is IOneTokenV1, OneTokenV1Base {\\n\\n    using AddressSet for AddressSet.Set;\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public override mintingFee; // defaults to 0%\\n    uint256 public override redemptionFee; // defaults to 0%\\n\\n    /**\\n     @notice sum of userBalances for each collateral token are not counted in treasury valuations\\n     @dev token => liability\\n     */\\n    mapping(address => uint256) public liabilities;\\n  \\n    event Minted(address indexed sender, address indexed collateral, uint256 oneTokens, uint256 memberTokens, uint256 collateralTokens);\\n    event Redeemed(address indexed sender, address indexed collateral, uint256 amount);\\n    event NewMintingFee(address sender, uint256 fee);\\n    event NewRedemptionFee(address sender, uint256 fee);\\n    \\n    /// @dev there is no constructor for proxy deployment. Use init()\\n\\n    /**\\n     @notice convert member tokens and collateral tokens into oneTokens. requires sufficient allowances for both tokens\\n     @dev takes the lessor of memberTokens allowance or the maximum allowed by the minting ratio and the balance in collateral\\n     @param collateralToken a registered ERC20 collateral token contract\\n     @param oneTokens exact number of oneTokens to receive\\n     */\\n    function mint(address collateralToken, uint256 oneTokens) external initialized override {\\n        require(collateralTokenSet.exists(collateralToken), \\\"OTV1: offer a collateral token\\\");\\n        require(oneTokens > 0, \\\"OTV1: order must be > 0\\\");\\n        \\n        // update collateral and memberToken oracles\\n        IOracle(assets[collateralToken].oracle).update(collateralToken);\\n        IOracle(assets[memberToken].oracle).update(memberToken);\\n        \\n        // update oneToken oracle and evaluate\\n        (uint256 mintingRatio, uint256 maxOrderVolume) = updateMintingRatio(collateralToken);\\n\\n        // future mintmasters may return a maximum order volume to tamp down on possible manipulation\\n        require(oneTokens <= maxOrderVolume, \\\"OTV1: order exceeds limit\\\");\\n\\n        // compute the member token value and collateral value requirement\\n        uint256 collateralUSDValue = oneTokens.mul(mintingRatio).div(PRECISION);\\n        uint256 memberTokensUSDValue = oneTokens.sub(collateralUSDValue);\\n        collateralUSDValue = collateralUSDValue.add(oneTokens.mul(mintingFee).div(PRECISION));\\n\\n        // compute the member tokens required\\n        (uint256 memberTokensReq, /* volatility */) = IOracle(assets[memberToken].oracle).amountRequired(memberToken, memberTokensUSDValue);\\n\\n        // check the memberToken allowance - the maximum we can draw from the user\\n        uint256 memberTokenAllowance = IERC20(memberToken).allowance(msg.sender, address(this));\\n\\n        // increase collateral required if the memberToken allowance is too low\\n        if(memberTokensReq > memberTokenAllowance) {\\n            uint256 memberTokenRate = memberTokensUSDValue.mul(PRECISION).div(memberTokensReq);\\n            memberTokensReq = memberTokenAllowance;\\n            // re-evaluate the memberToken value and collateral value required using the oracle rate already obtained\\n            memberTokensUSDValue = memberTokenRate.mul(memberTokensReq).div(PRECISION);\\n            collateralUSDValue = oneTokens.sub(memberTokensUSDValue);\\n            collateralUSDValue = collateralUSDValue.add(oneTokens.mul(mintingFee).div(PRECISION));\\n        }\\n\\n        require(IERC20(memberToken).balanceOf(msg.sender) >= memberTokensReq, \\\"OTV1: NSF: member token\\\");\\n\\n        // compute actual collateral tokens required in case of imperfect collateral pegs\\n        // a pegged oracle can be used to reduce the cost of this step but it will not account for price differences\\n        (uint256 collateralTokensReq, /* volatility */) = IOracle(assets[collateralToken].oracle).amountRequired(collateralToken, collateralUSDValue);\\n\\n        require(IERC20(collateralToken).balanceOf(msg.sender) >= collateralTokensReq, \\\"OTV1: NSF: collateral token\\\");\\n        require(collateralTokensReq > 0, \\\"OTV1: order too small\\\");\\n\\n        // transfer tokens in\\n        IERC20(memberToken).safeTransferFrom(msg.sender, address(this), memberTokensReq);\\n        IERC20(collateralToken).safeTransferFrom(msg.sender, address(this), collateralTokensReq);\\n        \\n        // mint oneTokens\\n        _mint(msg.sender, oneTokens);\\n\\n        emit Minted(msg.sender, collateralToken, oneTokens, memberTokensReq, collateralTokensReq);\\n    }\\n\\n    /**\\n     @notice redeem oneTokens for collateral tokens at 1:1 - applies fee %\\n     @dev first grant allowances, then redeem. Consider infinite collateral allowance and a sufficient memberToken allowance. Updates ratio and triggers controller.\\n     @param collateral form of ERC20 stable token to receive\\n     @param amount oneTokens to redeem equals collateral tokens to receive\\n     */\\n    function redeem(address collateral, uint256 amount) external override {\\n        require(isCollateral(collateral), \\\"OTV1: unknown collateral\\\");\\n        require(amount > 0, \\\"OTV1: amount must be > 0\\\");\\n        require(balanceOf(msg.sender) >= amount, \\\"OTV1: NSF: oneToken\\\");\\n        IOracle co = IOracle(assets[collateral].oracle);\\n        co.update(collateral);\\n\\n        // implied transfer approval and allowance\\n        _burn(msg.sender, amount);\\n\\n        uint256 netUsd = amount.sub(amount.mul(redemptionFee).div(PRECISION));\\n        (uint256 netTokens, /* uint256 volatility */)  = co.amountRequired(collateral, netUsd);\\n\\n        IERC20(collateral).safeTransfer(msg.sender, netTokens);\\n        emit Redeemed(msg.sender, collateral, amount);\\n        \\n        // updates the oneToken oracle price history\\n        updateMintingRatio(collateral);\\n\\n        // periodic automated processes\\n        IController(controller).periodic();\\n    }\\n\\n    /**\\n     @notice governance sets the adjustable fee\\n     @param fee fee, 18 decimals, e.g. 2% = 20000000000000000\\n     */\\n    function setMintingFee(uint256 fee) external onlyOwner override {\\n        require(fee <= PRECISION, \\\"OTV1: fee must be <= 100%\\\");\\n        mintingFee = fee;\\n        emit NewMintingFee(msg.sender, fee);\\n    }\\n\\n    /**\\n     @notice governance sets the adjustable fee\\n     @param fee fee, 18 decimals, e.g. 2% = 20000000000000000\\n     */\\n    function setRedemptionFee(uint256 fee) external onlyOwner override {\\n        require(fee <= PRECISION, \\\"OTV1: fee must be <= 100%\\\");\\n        redemptionFee = fee;\\n        emit NewRedemptionFee(msg.sender, fee);\\n    }    \\n\\n    /**\\n     @notice adjust the minting ratio\\n     @dev acceptable for gas-paying external actors to call this function\\n     @param collateralToken token to use for ratio calculation\\n     @param ratio minting ratio\\n     @param maxOrderVolume maximum order size\\n     */\\n    function updateMintingRatio(address collateralToken) public override returns(uint256 ratio, uint256 maxOrderVolume) {\\n        return IMintMaster(mintMaster).updateMintingRatio(collateralToken);\\n    }\\n\\n    /**\\n     @notice read the minting ratio and maximum order volume prescribed by the mintMaster\\n     @param collateralToken token to use for ratio calculation\\n     @param ratio minting ratio\\n     @param maxOrderVolume maximum order size\\n     */\\n    function getMintingRatio(address collateralToken) external view override returns(uint256 ratio, uint256 maxOrderVolume) {\\n        return IMintMaster(mintMaster).getMintingRatio(collateralToken);\\n    }\\n\\n    /**\\n     @notice read the vault balance and strategy balance of a given token\\n     @dev not restricted to registered assets\\n     @param token ERC20 asset to report\\n     @param vaultBalance tokens held in this vault\\n     @param strategyBalance tokens in assigned strategy\\n     */\\n    function getHoldings(address token) external view override returns(uint256 vaultBalance, uint256 strategyBalance) {   \\n        IERC20 t = IERC20(token);\\n        vaultBalance = t.balanceOf(address(this));\\n        Asset storage a = assets[token];\\n        if(a.strategy != NULL_ADDRESS) strategyBalance = t.balanceOf(a.strategy);\\n    } \\n}\\n\"\r\n    },\r\n    \"contracts/interface/IOneTokenV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./IOneTokenV1Base.sol\\\";\\n\\ninterface IOneTokenV1 is IOneTokenV1Base {\\n\\n    function mintingFee() external view returns(uint);\\n    function redemptionFee() external view returns(uint);\\n    function mint(address collateral, uint oneTokens) external;\\n    function redeem(address collateral, uint amount) external;\\n    function setMintingFee(uint fee) external;\\n    function setRedemptionFee(uint fee) external;\\n    function updateMintingRatio(address collateralToken) external returns(uint ratio, uint maxOrderVolume);\\n    function getMintingRatio(address collateralToken) external view returns(uint ratio, uint maxOrderVolume);\\n    function getHoldings(address token) external view returns(uint vaultBalance, uint strategyBalance);\\n}\\n\"\r\n    },\r\n    \"contracts/_openzeppelin/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/version/v1/OneTokenV1Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../../common/ICHICommon.sol\\\";\\nimport \\\"../../_openzeppelin/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../../oz_modified/ICHIERC20Burnable.sol\\\";\\nimport \\\"../../lib/AddressSet.sol\\\";\\nimport \\\"../../interface/IOneTokenFactory.sol\\\";\\nimport \\\"../../interface/IOneTokenV1Base.sol\\\";\\nimport \\\"../../interface/IController.sol\\\";\\nimport \\\"../../interface/IStrategy.sol\\\";\\nimport \\\"../../interface/IMintMaster.sol\\\";\\nimport \\\"../../interface/IOracle.sol\\\";\\n\\ncontract OneTokenV1Base is IOneTokenV1Base, ICHICommon, ICHIERC20Burnable {\\n\\n    using SafeERC20 for IERC20;\\n    using AddressSet for AddressSet.Set;\\n\\n    bytes32 public constant override MODULE_TYPE = keccak256(abi.encodePacked(\\\"ICHI V1 OneToken Implementation\\\"));\\n\\n    address public override oneTokenFactory;\\n    address public override controller;\\n    address public override mintMaster;\\n    address public override memberToken;\\n    AddressSet.Set collateralTokenSet;\\n    AddressSet.Set otherTokenSet;\\n\\n    struct Asset {\\n        address oracle;\\n        address strategy;\\n    }\\n\\n    AddressSet.Set assetSet;\\n    mapping(address => Asset) public override assets;\\n\\n    event Initialized(address sender, string name, string symbol, address controller, address mintMaster, address memberToken, address collateral);\\n    event ControllerChanged(address sender, address controller);\\n    event MintMasterChanged(address sender, address mintMaster, address oneTokenOracle);\\n    event StrategySet(address sender, address token, address strategy, uint256 allowance);\\n    event StrategyExecuted(address indexed sender, address indexed token, address indexed strategy);\\n    event StrategyRemoved(address sender, address token, address strategy);\\n    event StrategyClosed(address sender, address token, address strategy);\\n    event ToStrategy(address sender, address strategy, address token, uint256 amount);\\n    event FromStrategy(address sender, address strategy, address token, uint256 amount);\\n    event StrategyAllowanceIncreased(address sender, address token, address strategy, uint256 amount);\\n    event StrategyAllowanceDecreased(address sender, address token, address strategy, uint256 amount);\\n    event AssetAdded(address sender, address token, address oracle);\\n    event AssetRemoved(address sender, address token);\\n    event NewFactory(address sender, address factory);\\n\\n    modifier onlyOwnerOrController {\\n        if(msg.sender != owner()) {\\n            require(msg.sender == controller, \\\"OTV1B: not owner or controller\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     @notice initializes a proxied instance of the implementation\\n     @dev constructors are ineffective for proxy deployments\\n     @param name_ ERC20 name value\\n     @param symbol_ ERC20 symbol value\\n     @param oneTokenOracle_ a deployed, compatible oracle supporting the minimum interface\\n     @param controller_ a deployed, compatible controller supporting the minimum interface\\n     @param mintMaster_ a deployed, compatible mintMaster supporting the minimum interface\\n     @param memberToken_ a deployed, registered (in the factory) ERC20 token supporting the minimum interface\\n     @param collateral_ a deployed, registered (in the factory) usd-pegged ERC20 token supporting the minimum interface\\n     */\\n    function init(\\n        string memory name_,\\n        string memory symbol_,\\n        address oneTokenOracle_,\\n        address controller_,\\n        address mintMaster_,\\n        address memberToken_,\\n        address collateral_\\n    )\\n        external\\n        initializer\\n        override\\n    {\\n        // transfer oneToken governance to the deployer\\n        initOwnable();\\n\\n        oneTokenFactory = msg.sender;\\n        initERC20(name_, symbol_); // decimals is always 18\\n\\n        // no null properties\\n        require(bytes(name_).length > 0 && bytes(symbol_).length > 0, \\\"OTV1B: name and symbol are RQD\\\");\\n\\n        // Confirm the modules are known and valid\\n        require(IOneTokenFactory(oneTokenFactory).isValidModuleType(oneTokenOracle_, ModuleType.Oracle), \\\"OTV1B: unknown oracle\\\");\\n        require(IOneTokenFactory(oneTokenFactory).isValidModuleType(controller_, ModuleType.Controller), \\\"OTV1B: unknown controller\\\");\\n        require(IOneTokenFactory(oneTokenFactory).isValidModuleType(mintMaster_, ModuleType.MintMaster), \\\"OTV1B: unknown mint master\\\");\\n        require(IOneTokenFactory(oneTokenFactory).isForeignToken(memberToken_), \\\"OTV1B: unknown MEM token\\\");\\n        require(IOneTokenFactory(oneTokenFactory).isCollateral(collateral_), \\\"OTV1B: unknown collateral\\\");\\n\\n        // register the modules\\n        controller = controller_;\\n        mintMaster = mintMaster_;\\n\\n        // register the member token\\n        memberToken = memberToken_;\\n\\n        // register the first acceptable collateral and note the existance of the member token\\n        collateralTokenSet.insert(collateral_, \\\"OTV1B: ERR inserting collateral\\\");\\n        otherTokenSet.insert(memberToken_, \\\"OTV1B: ERR inserting MEM token\\\");\\n        assetSet.insert(collateral_, \\\"OTV1B: ERR inserting collateral as asset\\\");\\n        assetSet.insert(memberToken_, \\\"OTV1B: ERR inserting MEM token as asset\\\");\\n\\n        // instantiate the memberToken and collateralToken records\\n        Asset storage mt = assets[memberToken_];\\n        Asset storage ct = assets[collateral_];\\n\\n        // default to the first known oracles for the memberToken and collateralToken\\n        // change default oracle with remove/add asset\\n\\n        mt.oracle = IOneTokenFactory(oneTokenFactory).foreignTokenOracleAtIndex(memberToken_, 0);\\n        ct.oracle = IOneTokenFactory(oneTokenFactory).foreignTokenOracleAtIndex(collateral_, 0);\\n\\n        // let the modules initialize the context if they need to\\n        IController(controller_).init();\\n        IMintMaster(mintMaster_).init(oneTokenOracle_);\\n       \\n        // force the oracles to make observations\\n        IOracle(oneTokenOracle_).update(address(this));\\n        IOracle(mt.oracle).update(memberToken);\\n        IOracle(ct.oracle).update(collateral_);\\n\\n        emit Initialized(msg.sender, name_, symbol_, controller_, mintMaster_, memberToken_, collateral_);\\n    }\\n\\n    /**\\n     @notice governance can appoint a new controller with distinct internal logic\\n     @dev controllers support the periodic() function which should be called occasionally to send gas to the controller\\n     @param controller_ a deployed controller contract supporting the minimum interface and registered with the factory\\n     */\\n    function changeController(address controller_) external onlyOwner override {\\n        require(IOneTokenFactory(oneTokenFactory).isModule(controller_), \\\"OTV1B: unregistered controller\\\");\\n        require(IOneTokenFactory(oneTokenFactory).isValidModuleType(controller_, ModuleType.Controller), \\\"OTV1B: unknown controller\\\");\\n        IController(controller_).init();\\n        controller = controller_;\\n        emit ControllerChanged(msg.sender, controller_);\\n    }\\n\\n    /**\\n     @notice change the mintMaster\\n     @dev controllers support the periodic() function which should be called occasionally to send gas to the controller\\n     @param mintMaster_ the new mintMaster implementation\\n     @param oneTokenOracle_ intialize the mintMaster with this oracle. Must be registed in the factory.\\n     */\\n    function changeMintMaster(address mintMaster_, address oneTokenOracle_) external onlyOwner override {\\n        require(IOneTokenFactory(oneTokenFactory).isModule(mintMaster_), \\\"OTV1B: unregistered mint master\\\");\\n        require(IOneTokenFactory(oneTokenFactory).isValidModuleType(mintMaster_, ModuleType.MintMaster), \\\"OTV1B: unknown mint master\\\");\\n        require(IOneTokenFactory(oneTokenFactory).isOracle(address(this), oneTokenOracle_), \\\"OTV1B: unregistered oneToken oracle\\\");\\n        IOracle(oneTokenOracle_).update(address(this));\\n        IMintMaster(mintMaster_).init(oneTokenOracle_);\\n        mintMaster = mintMaster_;\\n        emit MintMasterChanged(msg.sender, mintMaster_, oneTokenOracle_);\\n    }\\n\\n    /**\\n     @notice governance can add an asset\\n     @dev asset inventory helps evaluate local holdings and enables strategy assignment\\n     @param token ERC20 token\\n     @param oracle oracle to use for usd valuation. Must be registered in the factory and associated with token.\\n     */\\n    function addAsset(address token, address oracle) external onlyOwner override {\\n        require(IOneTokenFactory(oneTokenFactory).isOracle(token, oracle), \\\"OTV1B: unknown oracle or token\\\");\\n        (bool isCollateral_, /* uint256 oracleCount */) = IOneTokenFactory(oneTokenFactory).foreignTokenInfo(token);\\n        Asset storage a = assets[token];\\n        a.oracle = oracle;\\n        IOracle(oracle).update(token);\\n        if(isCollateral_) {\\n            collateralTokenSet.insert(token, \\\"OTV1B: collateral already exists\\\");\\n        } else {\\n            otherTokenSet.insert(token, \\\"OTV1B: token already exists\\\");\\n        }\\n        assetSet.insert(token, \\\"OTV1B: ERR inserting asset\\\");\\n        emit AssetAdded(msg.sender, token, oracle);\\n    }\\n\\n    /**\\n     @notice governance can remove an asset from treasury and collateral value accounting\\n     @dev does not destroy holdings, but holdings are not accounted for\\n     @param token ERC20 token\\n     */\\n    function removeAsset(address token) external onlyOwner override {\\n        (uint256 inVault, uint256 inStrategy) = balances(token);\\n        require(inVault == 0, \\\"OTV1B: can't remove token with vault balance > 0\\\");\\n        require(inStrategy == 0, \\\"OTV1B: can't remove asset with strategy balance > 0\\\");\\n        require(assetSet.exists(token), \\\"OTV1B: unknown token\\\");\\n        if(collateralTokenSet.exists(token)) collateralTokenSet.remove(token, \\\"OTV1B: ERR removing collateral token\\\");\\n        if(otherTokenSet.exists(token)) otherTokenSet.remove(token, \\\"OTV1B: ERR removing MEM token\\\");\\n        assetSet.remove(token, \\\"OTV1B: ERR removing asset\\\");\\n        delete assets[token];\\n        emit AssetRemoved(msg.sender, token);\\n    }\\n\\n    /**\\n     @notice governance optionally assigns a strategy to an asset and sets a strategy allowance\\n     @dev strategy must be registered with the factory\\n     @param token ERC20 asset\\n     @param strategy deployed strategy contract that is registered with the factor\\n     @param allowance ERC20 allowance sets a limit on funds to transfer to the strategy\\n     */\\n    function setStrategy(address token, address strategy, uint256 allowance) external onlyOwner override {\\n\\n        require(assetSet.exists(token), \\\"OTV1B: unknown token\\\");\\n        require(IOneTokenFactory(oneTokenFactory).isModule(strategy), \\\"OTV1B: unknown strategy\\\");\\n        require(IOneTokenFactory(oneTokenFactory).isValidModuleType(strategy, ModuleType.Strategy), \\\"OTV1B: unknown strategy\\\");\\n        require(IStrategy(strategy).oneToken() == address(this), \\\"OTV1B: can't assign strategy that doesn't recognize this vault\\\");\\n        require(IStrategy(strategy).owner() == owner(), \\\"OTV1B: unknown strategy owner\\\");\\n\\n        // close the old strategy, may not be possible to recover all funds, e.g. locked tokens\\n        // the old strategy continues to respect oneToken goverancea and controller for manual token recovery\\n\\n        Asset storage a = assets[token];\\n        closeStrategy(token);\\n\\n        // initialize the new strategy\\n        IStrategy(strategy).init();\\n        IERC20(token).safeApprove(strategy, allowance);\\n\\n        // appoint the new strategy\\n        a.strategy = strategy;\\n        emit StrategySet(msg.sender, token, strategy, allowance);\\n    }\\n\\n    /**\\n     @notice governance can remove a strategy\\n     @dev closes the strategy and requires that all funds in the strategy are returned to the vault\\n     @param token the token strategy to remove. There are 0-1 strategys per asset\\n     */\\n    function removeStrategy(address token) external onlyOwner override {\\n        Asset storage a = assets[token];\\n        closeStrategy(token);\\n        address strategy = a.strategy;\\n        a.strategy = NULL_ADDRESS;\\n        emit StrategyRemoved(msg.sender, token, strategy);\\n    }\\n\\n    /**\\n     @notice governance can close a strategy\\n     @dev strategy remains assigned the asset with allowance set to 0.\\n     @param token ERC20 asset with a strategy to close. \\n     */\\n    function closeStrategy(address token) public override onlyOwnerOrController {\\n        require(assetSet.exists(token), \\\"OTV1B:cs: unknown token\\\");\\n        Asset storage a = assets[token];\\n        address oldStrategy = a.strategy;\\n        if(oldStrategy != NULL_ADDRESS) IERC20(token).safeApprove(oldStrategy, 0);\\n        emit StrategyClosed(msg.sender, token, oldStrategy);\\n    }\\n\\n    /**\\n     @notice governance can execute a strategy to trigger innner logic within the strategy\\n     @dev normally used by the controller\\n     @param token the token strategy to execute\\n     */\\n    function executeStrategy(address token) external onlyOwnerOrController override {\\n        require(assetSet.exists(token), \\\"OTV1B:es: unknown token\\\");\\n        Asset storage a = assets[token];\\n        address strategy = a.strategy;\\n        IStrategy(strategy).execute();\\n        emit StrategyExecuted(msg.sender, token, strategy);\\n    }\\n\\n    /**\\n     @notice governance can transfer assets from the vault to a strategy\\n     @dev works independently of strategy allowance\\n     @param strategy receiving address must match the assigned strategy\\n     @param token ERC20 asset\\n     @param amount amount to send\\n     */\\n    function toStrategy(address strategy, address token, uint256 amount) external onlyOwnerOrController {\\n        Asset storage a = assets[token];\\n        require(a.strategy == strategy, \\\"OTV1B: not the token strategy\\\");\\n        IERC20(token).safeTransfer(strategy, amount);\\n        emit ToStrategy(msg.sender, strategy, token, amount);\\n    }\\n\\n    /**\\n     @notice governance can transfer assets from the strategy to this vault\\n     @param strategy receiving address must match the assigned strategy\\n     @param token ERC20 asset\\n     @param amount amount to draw from the strategy\\n     */\\n    function fromStrategy(address strategy, address token, uint256 amount) external onlyOwnerOrController {\\n        Asset storage a = assets[token];\\n        require(a.strategy == strategy, \\\"OTV1B: not the token strategy\\\");\\n        IStrategy(strategy).toVault(token, amount);\\n        emit FromStrategy(msg.sender, strategy, token, amount);\\n    }\\n\\n    /**\\n     @notice governance can manage an allowance for a token strategy\\n     @dev adjusts the remaining allowance for automated transfers executed by the controller\\n     @param token ERC20 asset\\n     @param amount allowance increase\\n     */\\n    function increaseStrategyAllowance(address token, uint256 amount) external onlyOwnerOrController override {\\n        Asset storage a = assets[token];\\n        address strategy = a.strategy;\\n        require(a.strategy != NULL_ADDRESS, \\\"OTV1B: no strategy\\\");\\n        IERC20(token).safeIncreaseAllowance(strategy, amount);\\n        emit StrategyAllowanceIncreased(msg.sender, token, strategy, amount);\\n    }\\n\\n    /**\\n     @notice governance can manage an allowance for a token strategy\\n     @dev adjusts the remaining allowance for automated transfers executed by the controller\\n     @param token ERC20 asset\\n     @param amount allowance decrease\\n     */    \\n    function decreaseStrategyAllowance(address token, uint256 amount) external onlyOwnerOrController override {\\n        Asset storage a = assets[token];\\n        address strategy = a.strategy;\\n        require(a.strategy != NULL_ADDRESS, \\\"OTV1B: no strategy\\\");\\n        IERC20(token).safeDecreaseAllowance(strategy, amount);\\n        emit StrategyAllowanceDecreased(msg.sender, token, strategy, amount);\\n    }\\n\\n    /**\\n     @notice adopt a new factory\\n     @dev accomodates factory upgrades\\n     @param newFactory address of the new factory\\n     */\\n    function setFactory(address newFactory) external override onlyOwner {\\n        require(IOneTokenFactory(newFactory).MODULE_TYPE() == COMPONENT_FACTORY, \\\"OTV1B: new factory doesn't emit factory fingerprint\\\");\\n        oneTokenFactory = newFactory;\\n        emit NewFactory(msg.sender, newFactory);\\n    }\\n\\n    /**\\n     * View functions\\n     */\\n\\n    /**\\n     @notice returns the local balance and funds held in the assigned strategy, if any\\n     @param token to inspect\\n     */\\n    function balances(address token) public view override returns(uint256 inVault, uint256 inStrategy) {\\n        IERC20 asset = IERC20(token);\\n        inVault = asset.balanceOf(address(this));\\n        address strategy = assets[token].strategy;\\n        if(strategy != NULL_ADDRESS) inStrategy = asset.balanceOf(strategy);\\n    }\\n\\n    /**point\\n     @notice returns the number of acceptable collateral token contracts\\n     */\\n    function collateralTokenCount() external view override returns(uint256) {\\n        return collateralTokenSet.count();\\n    }\\n\\n    /**\\n     @notice returns the address of an ERC20 token collateral contract at the index\\n     @param index row to inspect\\n     */\\n    function collateralTokenAtIndex(uint256 index) external view override returns(address) {\\n        return collateralTokenSet.keyAtIndex(index);\\n    }\\n\\n    /**\\n     @notice returns true if the token contract is recognized collateral\\n     @param token token to inspect\\n     */\\n    function isCollateral(address token) public view override returns(bool) {\\n        return collateralTokenSet.exists(token);\\n    }\\n\\n    /**\\n     @notice returns the count of registered ERC20 asset contracts that not collateral\\n     */\\n    function otherTokenCount() external view override returns(uint256) {\\n        return otherTokenSet.count();\\n    }\\n\\n    /**\\n     @notice returns the non-collateral token contract at the index\\n     @param index row to inspect\\n     */\\n    function otherTokenAtIndex(uint256 index) external view override returns(address) {\\n        return otherTokenSet.keyAtIndex(index);\\n    }\\n\\n    /**\\n     @notice returns true if the token contract is registered and is not collateral\\n     @param token token to inspect\\n     */\\n    function isOtherToken(address token) external view override returns(bool) {\\n        return otherTokenSet.exists(token);\\n    }\\n\\n    /**\\n     @notice returns the sum of collateral and non-collateral ERC20 token contracts\\n     */\\n    function assetCount() external view override returns(uint256) {\\n        return assetSet.count();\\n    }\\n\\n    /**\\n     @notice returns the ERC20 contract address at the index\\n     @param index row to inspect\\n     */\\n    function assetAtIndex(uint256 index) external view override returns(address) {\\n        return assetSet.keyAtIndex(index);\\n    }\\n\\n    /**\\n     @notice returns true if the token contract is a registered asset of either type\\n     @param token token to inspect\\n     */\\n    function isAsset(address token) external view override returns(bool) {\\n        return assetSet.exists(token);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IOneTokenV1Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./IICHICommon.sol\\\";\\nimport \\\"./IERC20Extended.sol\\\";\\n\\ninterface IOneTokenV1Base is IICHICommon, IERC20 {\\n    \\n    function init(string memory name_, string memory symbol_, address oneTokenOracle_, address controller_,  address mintMaster_, address memberToken_, address collateral_) external;\\n    function changeController(address controller_) external;\\n    function changeMintMaster(address mintMaster_, address oneTokenOracle) external;\\n    function addAsset(address token, address oracle) external;\\n    function removeAsset(address token) external;\\n    function setStrategy(address token, address strategy, uint256 allowance) external;\\n    function executeStrategy(address token) external;\\n    function removeStrategy(address token) external;\\n    function closeStrategy(address token) external;\\n    function increaseStrategyAllowance(address token, uint256 amount) external;\\n    function decreaseStrategyAllowance(address token, uint256 amount) external;\\n    function setFactory(address newFactory) external;\\n\\n    function MODULE_TYPE() external view returns(bytes32);\\n    function oneTokenFactory() external view returns(address);\\n    function controller() external view returns(address);\\n    function mintMaster() external view returns(address);\\n    function memberToken() external view returns(address);\\n    function assets(address) external view returns(address, address);\\n    function balances(address token) external view returns(uint256 inVault, uint256 inStrategy);\\n    function collateralTokenCount() external view returns(uint256);\\n    function collateralTokenAtIndex(uint256 index) external view returns(address);\\n    function isCollateral(address token) external view returns(bool);\\n    function otherTokenCount() external view  returns(uint256);\\n    function otherTokenAtIndex(uint256 index) external view returns(address); \\n    function isOtherToken(address token) external view returns(bool);\\n    function assetCount() external view returns(uint256);\\n    function assetAtIndex(uint256 index) external view returns(address); \\n    function isAsset(address token) external view returns(bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IICHICommon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./IICHIOwnable.sol\\\";\\nimport \\\"./InterfaceCommon.sol\\\";\\n\\ninterface IICHICommon is IICHIOwnable, InterfaceCommon {}\\n\"\r\n    },\r\n    \"contracts/interface/IERC20Extended.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"../_openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Extended is IERC20 {\\n    \\n    function decimals() external view returns(uint8);\\n    function symbol() external view returns(string memory);\\n    function name() external view returns(string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IICHIOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\ninterface IICHIOwnable {\\n    \\n    function renounceOwnership() external;\\n    function transferOwnership(address newOwner) external;\\n    function owner() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/InterfaceCommon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface InterfaceCommon {\\n\\n    enum ModuleType { Version, Controller, Strategy, MintMaster, Oracle }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/_openzeppelin/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/_openzeppelin/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/_openzeppelin/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/ICHICommon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"../oz_modified/ICHIOwnable.sol\\\";\\nimport \\\"../oz_modified/ICHIInitializable.sol\\\";\\nimport \\\"../interface/IERC20Extended.sol\\\";\\nimport \\\"../interface/IICHICommon.sol\\\";\\n\\ncontract ICHICommon is IICHICommon, ICHIOwnable, ICHIInitializable {\\n\\n    uint256 constant PRECISION = 10 ** 18;\\n    uint256 constant INFINITE = uint256(0-1);\\n    address constant NULL_ADDRESS = address(0);\\n    \\n    // @dev internal fingerprints help prevent deployment-time governance errors\\n\\n    bytes32 constant COMPONENT_CONTROLLER = keccak256(abi.encodePacked(\\\"ICHI V1 Controller\\\"));\\n    bytes32 constant COMPONENT_VERSION = keccak256(abi.encodePacked(\\\"ICHI V1 OneToken Implementation\\\"));\\n    bytes32 constant COMPONENT_STRATEGY = keccak256(abi.encodePacked(\\\"ICHI V1 Strategy Implementation\\\"));\\n    bytes32 constant COMPONENT_MINTMASTER = keccak256(abi.encodePacked(\\\"ICHI V1 MintMaster Implementation\\\"));\\n    bytes32 constant COMPONENT_ORACLE = keccak256(abi.encodePacked(\\\"ICHI V1 Oracle Implementation\\\"));\\n    bytes32 constant COMPONENT_VOTERROLL = keccak256(abi.encodePacked(\\\"ICHI V1 VoterRoll Implementation\\\"));\\n    bytes32 constant COMPONENT_FACTORY = keccak256(abi.encodePacked(\\\"ICHI OneToken Factory\\\"));\\n}\\n\"\r\n    },\r\n    \"contracts/oz_modified/ICHIERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../_openzeppelin/utils/Context.sol\\\";\\nimport \\\"./ICHIERC20.sol\\\";\\n\\n/**\\n * @dev Uses the modified ERC20 with Initializer.\\n */\\ncontract ICHIERC20Burnable is ICHIERC20 {\\n    \\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ICHIERC20Burnable: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/AddressSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @notice Key sets with enumeration and delete. Uses mappings for random access\\n * and existence checks and dynamic arrays for enumeration. Key uniqueness is enforced. \\n * @dev Sets are unordered. Delete operations reorder keys. All operations have a \\n * fixed gas cost at any scale, O(1). \\n */\\n\\nlibrary AddressSet {\\n    \\n    struct Set {\\n        mapping(address => uint256) keyPointers;\\n        address[] keyList;\\n    }\\n\\n    /**\\n     @notice insert a key. \\n     @dev duplicate keys are not permitted.\\n     @param self storage pointer to a Set. \\n     @param key value to insert.\\n     */    \\n    function insert(Set storage self, address key, string memory errorMessage) internal {\\n        require(!exists(self, key), errorMessage);\\n        self.keyList.push(key);\\n        self.keyPointers[key] = self.keyList.length-1;\\n    }\\n\\n    /**\\n     @notice remove a key.\\n     @dev key to remove must exist. \\n     @param self storage pointer to a Set.\\n     @param key value to remove.\\n     */    \\n    function remove(Set storage self, address key, string memory errorMessage) internal {\\n        require(exists(self, key), errorMessage);\\n        uint256 last = count(self) - 1;\\n        uint256 rowToReplace = self.keyPointers[key];\\n        address keyToMove = self.keyList[last];\\n        self.keyPointers[keyToMove] = rowToReplace;\\n        self.keyList[rowToReplace] = keyToMove;\\n        delete self.keyPointers[key];\\n        self.keyList.pop();\\n    }\\n\\n    /**\\n     @notice count the keys.\\n     @param self storage pointer to a Set. \\n     */       \\n    function count(Set storage self) internal view returns(uint256) {\\n        return(self.keyList.length);\\n    }\\n\\n    /**\\n     @notice check if a key is in the Set.\\n     @param self storage pointer to a Set.\\n     @param key value to check. Version\\n     @return bool true: Set member, false: not a Set member.\\n     */  \\n    function exists(Set storage self, address key) internal view returns(bool) {\\n        if(self.keyList.length == 0) return false;\\n        return self.keyList[self.keyPointers[key]] == key;\\n    }\\n\\n    /**\\n     @notice fetch a key by row (enumerate).\\n     @param self storage pointer to a Set.\\n     @param index row to enumerate. Must be < count() - 1.\\n     */      \\n    function keyAtIndex(Set storage self, uint256 index) internal view returns(address) {\\n        return self.keyList[index];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IOneTokenFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./InterfaceCommon.sol\\\";\\n\\ninterface IOneTokenFactory is InterfaceCommon {\\n\\n    function oneTokenProxyAdmins(address) external returns(address);\\n    function deployOneTokenProxy(\\n        string memory name,\\n        string memory symbol,\\n        address governance, \\n        address version,\\n        address controller,\\n        address mintMaster,              \\n        address memberToken, \\n        address collateral,\\n        address oneTokenOracle\\n    ) \\n        external \\n        returns(address newOneTokenProxy, address proxyAdmin);\\n\\n    function admitModule(address module, ModuleType moduleType, string memory name, string memory url) external;\\n    function updateModule(address module, string memory name, string memory url) external;\\n    function removeModule(address module) external;\\n\\n    function admitForeignToken(address foreignToken, bool collateral, address oracle) external;\\n    function updateForeignToken(address foreignToken, bool collateral) external;\\n    function removeForeignToken(address foreignToken) external;\\n\\n    function assignOracle(address foreignToken, address oracle) external;\\n    function removeOracle(address foreignToken, address oracle) external; \\n\\n    /**\\n     * View functions\\n     */\\n    \\n    function MODULE_TYPE() external view returns(bytes32);\\n\\n    function oneTokenCount() external view returns(uint256);\\n    function oneTokenAtIndex(uint256 index) external view returns(address);\\n    function isOneToken(address oneToken) external view returns(bool);\\n \\n    // modules\\n\\n    function moduleCount() external view returns(uint256);\\n    function moduleAtIndex(uint256 index) external view returns(address module);\\n    function isModule(address module) external view returns(bool);\\n    function isValidModuleType(address module, ModuleType moduleType) external view returns(bool);\\n\\n    // foreign tokens\\n\\n    function foreignTokenCount() external view returns(uint256);\\n    function foreignTokenAtIndex(uint256 index) external view returns(address);\\n    function foreignTokenInfo(address foreignToken) external view returns(bool collateral, uint256 oracleCount);\\n    function foreignTokenOracleCount(address foreignToken) external view returns(uint256);\\n    function foreignTokenOracleAtIndex(address foreignToken, uint256 index) external view returns(address);\\n    function isOracle(address foreignToken, address oracle) external view returns(bool);\\n    function isForeignToken(address foreignToken) external view returns(bool);\\n    function isCollateral(address foreignToken) external view returns(bool);\\n}\"\r\n    },\r\n    \"contracts/interface/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\ninterface IController {\\n    \\n    function oneTokenFactory() external returns(address);\\n    function description() external returns(string memory);\\n    function init() external;\\n    function periodic() external;\\n    function MODULE_TYPE() external view returns(bytes32);    \\n}\\n\"\r\n    },\r\n    \"contracts/interface/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./IModule.sol\\\";\\n\\ninterface IStrategy is IModule {\\n    \\n    function init() external;\\n    function execute() external;\\n    function setAllowance(address token, uint256 amount) external;\\n    function toVault(address token, uint256 amount) external;\\n    function fromVault(address token, uint256 amount) external;\\n    function closeAllPositions() external returns(bool);\\n    function closePositions(address token) external returns(bool success);\\n    function oneToken() external view returns(address);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IMintMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./IModule.sol\\\";\\n\\ninterface IMintMaster is IModule {\\n    \\n    function oneTokenOracles(address) external view returns(address);\\n    function init(address oneTokenOracle) external;\\n    function updateMintingRatio(address collateralToken) external returns(uint256 ratio, uint256 maxOrderVolume);\\n    function getMintingRatio(address collateral) external view returns(uint256 ratio, uint256 maxOrderVolume);\\n    function getMintingRatio2(address oneToken, address collateralToken) external view returns(uint256 ratio, uint256 maxOrderVolume);  \\n    function getMintingRatio4(address oneToken, address oneTokenOracle, address collateralToken, address collateralOracle) external view returns(uint256 ratio, uint256 maxOrderVolume); \\n}\\n\"\r\n    },\r\n    \"contracts/interface/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./IModule.sol\\\";\\n\\ninterface IOracle is IModule {\\n\\n    function init(address baseToken) external;\\n    function update(address token) external;\\n    function indexToken() external view returns(address);\\n\\n    /**\\n     @param token ERC20 token\\n     @param amountTokens quantity, token native precision\\n     @param amountUsd US dollar equivalent, precision 18\\n     @param volatility metric for future use-cases\\n     */\\n    function read(address token, uint amountTokens) external view returns(uint amountUsd, uint volatility);\\n\\n    /**\\n     @param token ERC20 token\\n     @param amountTokens token quantity, token native precision\\n     @param amountUsd US dollar equivalent, precision 18\\n     @param volatility metric for future use-cases\\n     */    \\n    function amountRequired(address token, uint amountUsd) external view returns(uint amountTokens, uint volatility);\\n\\n    /**\\n     @notice converts normalized precision-18 amounts to token native precision amounts, truncates low-order values\\n     @param token ERC20 token contract\\n     @param amountNormal quantity, precision 18\\n     @param amountTokens quantity scaled to token precision\\n     */    \\n    function normalizedToTokens(address token, uint amountNormal) external view returns(uint amountTokens);\\n\\n    /**\\n     @notice converts token native precision amounts to normalized precision-18 amounts\\n     @param token ERC20 token contract\\n     @param amountNormal quantity, precision 18\\n     @param amountTokens quantity scaled to token precision\\n     */  \\n    function tokensToNormalized(address token, uint amountTokens) external view returns(uint amountNormal);\\n}\\n\"\r\n    },\r\n    \"contracts/oz_modified/ICHIOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @dev Constructor visibility has been removed from the original.\\n * _transferOwnership() has been added to support proxied deployments.\\n * Abstract tag removed from contract block.\\n * Added interface inheritance and override modifiers.\\n * Changed contract identifier in require error messages.\\n */\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../_openzeppelin/utils/Context.sol\\\";\\nimport \\\"../interface/IICHIOwnable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract ICHIOwnable is IICHIOwnable, Context {\\n    \\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n     \\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"ICHIOwnable: caller is not the owner\\\");\\n        _;\\n    }    \\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     * Ineffective for proxied deployed. Use initOwnable.\\n     */\\n    constructor() {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     @dev initialize proxied deployment\\n     */\\n    function initOwnable() internal {\\n        require(owner() == address(0), \\\"ICHIOwnable: already initialized\\\");\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual override returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual override onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev be sure to call this in the initialization stage of proxied deployment or owner will not be set\\n     */\\n\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"ICHIOwnable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oz_modified/ICHIInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"../_openzeppelin/utils/Address.sol\\\";\\n\\ncontract ICHIInitializable {\\n\\n    bool private _initialized;\\n    bool private _initializing;\\n\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"ICHIInitializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    modifier initialized {\\n        require(_initialized, \\\"ICHIInitializable: contract is not initialized\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\\n\\n\"\r\n    },\r\n    \"contracts/_openzeppelin/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oz_modified/ICHIERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/// @dev removed constructor visibility and relocated the file\\n/// @dev added initERC20 for proxied deployments\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../_openzeppelin/utils/Context.sol\\\";\\nimport \\\"../_openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport \\\"../_openzeppelin/math/SafeMath.sol\\\";\\nimport \\\"./ICHIInitializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ICHIERC20 is IERC20, Context, ICHIInitializable {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n\\n    /**\\n     * @dev this constructor is ineffective in proxy deployment. Use init().\\n     */\\n\\n    /*\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n    */\\n\\n    function initERC20(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ICHIERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ICHIERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ICHIERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ICHIERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ICHIERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ICHIERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ICHIERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ICHIERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ICHIERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ICHIERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address /* from */, address /* to */, uint256 /* amount */) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./IICHICommon.sol\\\";\\nimport \\\"./InterfaceCommon.sol\\\";\\n\\ninterface IModule is IICHICommon { \\n       \\n    function oneTokenFactory() external view returns(address);\\n    function updateDescription(string memory description) external;\\n    function moduleDescription() external view returns(string memory);\\n    function MODULE_TYPE() external view returns(bytes32);\\n    function moduleType() external view returns(ModuleType);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"AssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"ControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FromStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mintMaster\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"memberToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mintMaster\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oneTokenOracle\",\"type\":\"address\"}],\"name\":\"MintMasterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oneTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"memberTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralTokens\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"NewFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"NewMintingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"NewRedemptionFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StrategyAllowanceDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StrategyAllowanceIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"StrategySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ToStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MODULE_TYPE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"addAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"assetAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inVault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inStrategy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mintMaster_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oneTokenOracle_\",\"type\":\"address\"}],\"name\":\"changeMintMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"closeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"collateralTokenAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseStrategyAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"executeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fromStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getHoldings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strategyBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"}],\"name\":\"getMintingRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxOrderVolume\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseStrategyAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oneTokenOracle_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mintMaster_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"memberToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral_\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isOtherToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liabilities\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"memberToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"oneTokens\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintMaster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneTokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"otherTokenAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otherTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setMintingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setRedemptionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"toStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"}],\"name\":\"updateMintingRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxOrderVolume\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OneTokenV1","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}