{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at BscScan.com on 2021-04-09\r\n*/\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n    RH Style Guide:\r\n        ContractsAndDataStructures\r\n        member_variables_\r\n        _argument_variables\r\n        local_variable\r\n        struct_member_variable\r\n        functionNames\r\n        SOME_CONSTANT\r\n        \r\n        \r\n        lhs_ = _rhs;\r\n        \r\n        _lhs == rhs_\r\n*/\r\nabstract\r\ncontract OracleCallable {\r\n    \r\n    address private oracle_key_;\r\n    \r\n    event OracleKeyChanged(address indexed _oracle_key);\r\n    \r\n    constructor (address _oracle_key) {\r\n        oracle_key_ = _oracle_key;\r\n        emit OracleKeyChanged(_oracle_key);\r\n    }    \r\n    \r\n    modifier onlyOracle() {\r\n        require(oracle_key_ == msg.sender, \"Caller is not the oracle\");\r\n        _;\r\n    }    \r\n    \r\n    function changeOracleKeyInternal(address _oracle_key) internal\r\n    {\r\n        require(_oracle_key != address(0), \"New oracle is the zero address\");\r\n        emit OracleKeyChanged(_oracle_key);\r\n        oracle_key_ = _oracle_key;\r\n    }\r\n    \r\n    function changeOracleKey(address _oracle_key) external onlyOracle returns (bool success) \r\n    {\r\n        changeOracleKeyInternal(_oracle_key);\r\n        return true;\r\n    }   \r\n    \r\n    function getOracleKey() view public returns (address)\r\n    {\r\n        return oracle_key_;\r\n    }\r\n}\r\n\r\n\r\nabstract\r\ncontract PigeonReceive is OracleCallable {\r\n    \r\n    event PigeonCallable (address _oracleKey);\r\n    \r\n    event PigeonArrived (\r\n         uint256  _source_chain_id,    uint256 _source_contract_id,     \r\n         uint256  _source_block_no,    uint256  _source_confirmations,   uint256 _source_txn_hash,\r\n         uint256 _source_topic0,      uint256 _source_topic1,          uint256 _source_topic2,\r\n         uint256 _source_topic3,      uint256 _source_topic4,          uint256 _source_topic5\r\n    );\r\n\r\n    constructor (address _oracleKey) OracleCallable (_oracleKey) \r\n    {\r\n        emit PigeonCallable(_oracleKey);\r\n    }\r\n\r\n    function pigeonArrive (\r\n        uint256  _source_chain_id,    uint256 _source_contract_id,\r\n        uint256  _source_block_no,    uint256  _source_confirmations,   uint256 _source_txn_hash,\r\n        uint256 _topic0, uint256 _topic1, uint256 _topic2, uint256 _topic3, uint256 _topic4, uint256 _topic5\r\n    ) onlyOracle external virtual returns (bool success)\r\n    {\r\n        emit PigeonArrived(\r\n           _source_chain_id, _source_contract_id,\r\n           _source_block_no, _source_confirmations, _source_txn_hash,\r\n           _topic0, _topic1, _topic2, _topic3, _topic4, _topic5);\r\n        return true;\r\n    }\r\n    \r\n}\r\n\r\nabstract\r\ncontract PigeonInterface {\r\n    event PigeonCall(\r\n        uint256 _source_txn_hash, uint256 _source_event_id,\r\n        uint256 _dest_chain_id,  uint256 _dest_contract_id\r\n    );\r\n    \r\n    function pigeonSend(\r\n        uint256 _source_txn_hash,    uint256 _source_event_id,\r\n        uint256 _dest_chain_id,      uint256 _dest_contract_id) external virtual payable returns (bool success);\r\n \r\n    function pigeonCost(uint256 _dest_chain_id) external view virtual returns (uint256 pigeon_call_cost);\r\n\r\n    function setPigeonCost(uint256 _dest_chain_id, uint256 cost) external virtual returns (bool success);\r\n    \r\n    function chainId() external view virtual returns (uint256);\r\n    \r\n    function getPigeonOracleKey() view virtual public returns (address);\r\n\r\n}\r\n\r\nabstract\r\ncontract EIP20Interface {\r\n    function total_supply()\r\n        external view virtual returns (uint256);\r\n    function balanceOf(address _owner)\r\n        external view virtual returns (uint256 balance);\r\n    function allowance(address _owner, address _spender)\r\n        external view virtual returns (uint256 remaining);\r\n\r\n    function transfer(address _to, uint256 _value)\r\n        external virtual returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        external virtual returns (bool success);\r\n    function approve(address _spender, uint256 _value)\r\n        external virtual returns (bool success);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\nabstract\r\ncontract\r\nUniwarpVaultInterface is EIP20Interface {\r\n    uint256 constant VAULTED_EVENT_ID = 0x202c84ded448d8f25e219522de3b98e78675c6e8aeb88c805908fbc6fe6094c5;\r\n    event Vaulted (uint256 _vaulter, uint256 _dest_chain_id, uint256 _amount);\r\n    address constant public OFF_CHAIN = address(0xd15Ab1ed00000000000000000000000000000000);\r\n\r\n    function vaultFee(uint256 _dest_chain_id) view virtual external returns (uint256);\r\n    function vault(uint256 _dest_chain_id, uint256 _amount) virtual external payable returns (bool success);\r\n    function vaultFrom(address _from, uint256 _dest_chain_id, uint256 _amount) virtual external payable returns (bool success);\r\n    function chainId() view virtual external returns (uint256 _chain_id);\r\n}\r\n\r\nabstract\r\ncontract \r\nUniwarpDAOInterface {\r\n    struct Proposal\r\n    {\r\n        address proposer; // the proposer is required to also action the proposal at the end, thus they are responsible for gas fees\r\n        uint256 operation;  // see validateProposal()\r\n        uint256 chain_id;             \r\n        uint256 operand; // address or other operand to the vote, e.g. tokens_per_proposal when operation == 7\r\n        uint256 expiry_block; // block number when this proposal can be actioned\r\n        uint256 cancel_block;  // block number when this proposal can be cancelled\r\n        bytes32 explain1;\r\n        bytes32 explain2;\r\n        uint256 lockedTokens;\r\n        uint16 yay;    // \"yes\" votes\r\n        uint16 nay;    // \"no\" votes\r\n    }\r\n    \r\n    // this is like a blackhole address but it's a disabled holding location for coins that are currently 'off chain' (i.e. on a different chain after a vault event)\r\n            \r\n    uint256 constant PROPOSAL_ACTION_EVENT_ID = 0x3beb9a573715f796038dda8fdd3763a415c709081cb3cf432e48ff8b7ec600db;\r\n    event ProposalActioned (uint256 _operation, uint256 _operand_chain_id, uint256 _operand);\r\n\r\n\r\n    function viewProposal(uint256 _proposal_id) view virtual external returns (Proposal memory proposal);\r\n\r\n    function validateProposal(uint256 _operation, uint256 _operand_chain_id, uint256 _operand) virtual view public returns (bool success);\r\n    \r\n    function redeemVoteTokens(uint256 _proposal_id) virtual external returns(bool success);\r\n\r\n    function actionProposal(uint256 _proposal_id)  virtual external payable returns (bool success);\r\n\r\n    function actionProposalCost() view virtual external returns (uint256 amount);\r\n\r\n    function propose(uint256 _operation, uint256 _operand_chain_id, uint256 _operand, bytes32 _explain1, bytes32 _explain2) virtual external returns (uint256);\r\n\r\n    function cancelProposal(uint256 _proposal_id) virtual external returns (bool success);\r\n\r\n    function vote(uint256 _proposal_id, uint16 _yay, uint16 _nay) virtual external returns (bool success);\r\n\r\n    function getVotingChain() external view virtual returns (uint256 _chain_id);\r\n\r\n    function isVotingChain() external view virtual returns(bool _is_voting);\r\n\r\n    function isDisabled(uint256 _chain_id)  external view virtual returns(bool _is_disabled);\r\n\r\n    function getProposalCount() external view virtual returns (uint256);\r\n\r\n    function getTokensPerVote() external view virtual returns (uint256);\r\n\r\n    function getTokensPerProposal() external view virtual returns (uint256);\r\n\r\n    function getChainCount() external view virtual returns (uint256);\r\n\r\n    function getPigeonAddress() external view virtual  returns (address pigeon);\r\n    \r\n    function getProposalExpiry() external view virtual returns (uint256 expiry);\r\n\r\n\r\n}\r\n\r\ncontract Uniwarp is PigeonReceive, UniwarpVaultInterface, UniwarpDAOInterface {\r\n\r\n\r\n\r\n    function getProposalExpiry() external view override returns (uint256 expiry)\r\n    {\r\n        return voting_block_expiry_;\r\n    }\r\n\r\n    function isDisabled(uint256 _chain_id)  external view override returns(bool _is_disabled)\r\n    {\r\n        return disabled_chains_[_chain_id];\r\n    }\r\n\r\n    function getPigeonAddress() external view override returns (address pigeon)\r\n    {\r\n        return pigeon_address_;\r\n    }\r\n\r\n    function getProposalCount() external view override returns (uint256)\r\n    {\r\n        return proposal_count_;\r\n    }\r\n\r\n    function getTokensPerVote() external view override returns (uint256)\r\n    {\r\n        return tokens_per_vote_;\r\n    }\r\n\r\n    function getTokensPerProposal() external view override returns (uint256)\r\n    {\r\n        return tokens_per_proposal_;\r\n    }\r\n\r\n    function getChainCount() external view override returns (uint256)\r\n    {\r\n        return chain_count_;\r\n    }\r\n\r\n\r\n    function getVotingChain() external view override returns (uint256 _chain_id)\r\n    {\r\n        return voting_chain_id_;\r\n    }\r\n    \r\n    function isVotingChain() external view override returns(bool _is_voting)\r\n    {\r\n        return voting_chain_id_ == chain_id_;\r\n    }\r\n\r\n    function chainId() view override external returns (uint256 _chain_id)\r\n    {\r\n        return chain_id_;\r\n    }\r\n\r\n    mapping(bytes32 => bool) private alreadyArrived_;\r\n\r\n    function pigeonArrive (\r\n        uint256  _source_chain_id,    uint256 _source_contract_id,\r\n        uint256  _source_block_no,    uint256  _source_confirmations,   uint256 _source_txn_hash,\r\n        uint256 _topic0, uint256 _topic1, uint256 _topic2, uint256 _topic3, uint256 _topic4, uint256 _topic5)\r\n        onlyOracle checkDeleted external override returns (bool success)\r\n    {\r\n        \r\n        require(_topic0 == VAULTED_EVENT_ID || _topic0 == PROPOSAL_ACTION_EVENT_ID, \"Pigeon received but not a valid event type.\");\r\n        require(uniwarp_contracts_[_source_chain_id] == _source_contract_id, \"Received pigeon from unknown contract...\");\r\n        \r\n        bytes32 hash = keccak256(abi.encodePacked(_source_chain_id, _source_txn_hash, _topic0, _topic1, _topic2, _topic3));\r\n        require(!alreadyArrived_[hash], \"Already processed this pigeon\");\r\n        alreadyArrived_[hash] = true;\r\n        \r\n        if (_topic0 == VAULTED_EVENT_ID)\r\n        {\r\n\r\n            //require(_topic1 >> 96 == 0x0, \"Invalid vault account on incoming pigeon\");        \r\n            address vault_owner = address(uint160(_topic1));\r\n            require(_topic2 == chain_id_, \"Pigeon received for wrong chainid!\");\r\n            uint256 vault_amount = _topic3;\r\n        \r\n            require(vault_amount > 0, \"Invalid pigeon (1)!\");\r\n            require(vault_owner != address(0x0), \"Invalid pigeon (2)!\");\r\n            require(vault_amount <= balances_[OFF_CHAIN], \"Offchain invariant failed!!!\");\r\n        \r\n            uint256 old_balance = balances_[OFF_CHAIN];\r\n            balances_[OFF_CHAIN] -= vault_amount;\r\n            require(old_balance > balances_[OFF_CHAIN], \"Internal error (1)\");\r\n        \r\n            old_balance = balances_[vault_owner];\r\n            balances_[vault_owner] += vault_amount;\r\n            require(balances_[vault_owner] > old_balance, \"Internal error (2)\");\r\n            \r\n            \r\n            emit Transfer(OFF_CHAIN, vault_owner, vault_amount);\r\n        } \r\n        else if (_topic0 == PROPOSAL_ACTION_EVENT_ID)\r\n            actionProposalInternal(_topic1, _topic2, _topic3, false);\r\n\r\n        emit PigeonArrived(\r\n           _source_chain_id, _source_contract_id,\r\n           _source_block_no, _source_confirmations, _source_txn_hash,\r\n           _topic0, _topic1, _topic2, _topic3, _topic4, _topic5);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    uint256 constant private MAX_UINT256 = 2**256 - 1;\r\n\r\n    \r\n    mapping (address => uint256)  public balances_;\r\n    mapping (address => mapping (address => uint256)) public allowed_;\r\n    \r\n\r\n    uint256 public chain_id_;\r\n    uint256 public chain_count_;\r\n    mapping (uint256 => uint256) public chain_ids_;\r\n    mapping (uint256 => uint256) public uniwarp_contracts_;             // chain_id -> contract address (may not be an ethereum-based chain so address is uint256)\r\n    mapping (uint256 => mapping (address => uint256)) public votes_;    // proposal_id => voter => lockedTokens\r\n\r\n    mapping (uint256 => bool) public disabled_chains_;\r\n    \r\n    uint256 public total_supply_;\r\n    address public pigeon_address_;\r\n    \r\n    mapping (uint256 => Proposal) public proposals_;\r\n\r\n    uint256 public proposal_count_;\r\n    uint256 public voting_chain_id_;\r\n    uint256 public voting_block_expiry_;\r\n    uint256 public tokens_per_vote_ = 100000000000000000000000;\r\n    uint256 public tokens_per_proposal_ = 1000000000000000000000000;\r\n        \r\n    bool deleted_ = false;      // if this contract copy has been disabled (deleted) either because it was \"removed\" from the chain or changed to a new contract then refuse to do anything\r\n\r\n    modifier checkDeleted()\r\n    {\r\n        require(!deleted_, \"This version of uniwarp on this chain has been deleted.\");\r\n        _;\r\n    }\r\n    \r\n    modifier checkDisabled()\r\n    {\r\n        require(!disabled_chains_[chain_id_], \"This version of uniwarp on this chain has been disabled.\");\r\n        _;\r\n    }\r\n    \r\n    function viewProposal(uint256 _proposal_id) view override external returns (Proposal memory proposal)\r\n    {\r\n        require(proposals_[_proposal_id].operation > 0, \"Invalid proposal\");\r\n        return proposals_[_proposal_id];\r\n    }\r\n    \r\n    // sanity check the parameters to a proposal\r\n    function validateProposal(uint256 _operation, uint256 _operand_chain_id, uint256 _operand) override view public returns (bool success)\r\n    {\r\n        // 1 == add chain, 2 == remove chain, 3 == change pigeon address for a specified chain (for pigeonSend),\r\n        // 4 = propose new voting contract,   5 = propose new proposal block expiry,\r\n        // 6 = tokens_per_vote, 7 = tokens_per_proposal, 8 = change pigeon oracle key. 9 = change contract id on a chain, 10 = disable a chain (they can send off the chain but not receive)\r\n        // 11 = enable chain\r\n\r\n        require(_operation > 0 && _operation < 12, \"Invalid proposed operation.\");\r\n\r\n        if (_operation == 9) // change contract id on an existing chain\r\n        {\r\n            require(uniwarp_contracts_[_operand_chain_id] != 0x0, \"Can only change a chain that exists\");\r\n            require(_operand != 0x0, \"Can't change to null contract\");\r\n        }\r\n        else if (_operation == 1) // add chain\r\n        {\r\n            require(_operand_chain_id != chain_id_, \"Cannot add this chain... it's already on this chain!\");\r\n            require(uniwarp_contracts_[_operand_chain_id] == 0x0, \"Cannot add chain, already added!\");\r\n            require(_operand != 0x0, \"Can't add null contract\");\r\n        }\r\n        else if (_operation == 2) // remove chain\r\n        {\r\n            require(_operand_chain_id != voting_chain_id_, \"Cannot remove this chain... it's the voting chain. Change voting chain first!\");\r\n            require(uniwarp_contracts_[_operand_chain_id] != 0x0, \"Cannot remove chain, doesn't exist!\");\r\n            require(_operand == uniwarp_contracts_[_operand_chain_id], \"Operand must be the contract address\");\r\n        }\r\n        else if (_operation == 3)    /* change pigeon */\r\n        {\r\n            require(uniwarp_contracts_[_operand_chain_id] != 0x0, \"Cannot change pigeon address on chain that's not added!\");\r\n            require(_operand != 0x0, \"Cannot set pigeon to 0x0\");\r\n            if (_operand_chain_id == chain_id_)\r\n                require(PigeonInterface(address(uint160(_operand))).chainId() == chain_id_, \"Invalid pigeon interface!\");\r\n        }\r\n        else if (_operation == 4)    /* new voting contract (chain) */\r\n        {\r\n            require(_operand_chain_id != voting_chain_id_, \"This is already the voting contract... you can only switch voting to a different chain\");\r\n            require(_operand == uniwarp_contracts_[_operand_chain_id], \"You can only propose another uniwarp contract as the new voting contract\");\r\n            require(_operand != 0x0, \"Please specify the uniwarp contract on the other end.\");\r\n        }\r\n        else if (_operation == 5)    /* new voting expiry */\r\n        {\r\n            //require(_operand_chain_id == chain_id_, \"Can only propose a voting expiry for this chain, the voting chain.\");\r\n            require(chain_ids_[_operand_chain_id] != 0x0, \"Chain must exist to change voting time.\");\r\n            require(_operand <= 120960, \"Cannot propose a voting expiry > 120960\");\r\n        }\r\n        else if (_operation == 6)    /* new tokens_per_vote lockup */\r\n        {\r\n            require(_operand_chain_id == voting_chain_id_, \"Can only propose a new tokens_per_vote for the voting chain.\");\r\n            require(_operand > 10**19, \"tokens_per_vote must be at least 10**19\");\r\n        }\r\n        else if (_operation == 7)    /* new tokens_per_proposal lockup */\r\n        {\r\n            require(_operand_chain_id == voting_chain_id_, \"Can only propose a new tokens_per_proposal for the voting chain.\");\r\n            require(_operand > 10**20, \"tokens_per_proposal must be at least 10**20\");\r\n        }\r\n        else if (_operation == 8)    /* new pigeon oracle */\r\n        {\r\n            require(_operand_chain_id == 0x0, \"Cannot specify a chain for the pigeon oracle, must be the same on all chains. Please use 0x0 for chain_id here.\");\r\n            require(_operand != 0x0, \"Cannot specify a null oracle key.\");\r\n        }\r\n        else if (_operation == 10) // disable chain\r\n        {\r\n            require(_operand_chain_id != voting_chain_id_, \"You cannot disable the voting chain!\");\r\n            require(chain_ids_[_operand_chain_id] != 0x0, \"Must specify an already added chain to disable\");\r\n            require(!disabled_chains_[_operand_chain_id], \"Chain was already disabled!\");\r\n            require(_operand == uniwarp_contracts_[_operand_chain_id], \"Operand must be the contract address\");\r\n        }\r\n        else if (_operation == 11) // enable chain\r\n        {\r\n            require(chain_ids_[_operand_chain_id] != 0x0, \"Must specify an already added chain to enable\");\r\n            require(disabled_chains_[_operand_chain_id], \"Chain was already enabled!\");\r\n            require(_operand == uniwarp_contracts_[_operand_chain_id], \"Operand must be the contract address\");\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n  \r\n    function destroyProposal(uint256 _proposal_id) private\r\n    {\r\n        Proposal memory proposal = proposals_[_proposal_id];\r\n        \r\n        require(proposal.operation > 0, \"Proposal does not exist\");\r\n        // return tokens to user\r\n        \r\n        address proposer = proposal.proposer;\r\n        \r\n        require(proposer != OFF_CHAIN && proposer != address(0x0), \"Internal error (1)\");\r\n        \r\n        uint256 old_balance = balances_[proposer];\r\n        balances_[proposer] += proposal.lockedTokens;\r\n        require(old_balance < balances_[proposer], \"Internal error (2)\");\r\n        \r\n        // remove the proposal\r\n        delete proposals_[_proposal_id];\r\n    }\r\n    \r\n    function redeemVoteTokens(uint256 _proposal_id) checkDeleted checkDisabled override external returns(bool success)\r\n    {\r\n        // the below line prevents people closing their vote lock early\r\n        require(proposals_[_proposal_id].operation == 0, \"Proposal must have expired or cancelled before vote can be redeemed\");\r\n        \r\n        require(votes_[_proposal_id][msg.sender] > 0, \"Vote does not exist or already redeemed\");\r\n        \r\n        uint256 old_balance = balances_[msg.sender];\r\n        balances_[msg.sender] += votes_[_proposal_id][msg.sender];\r\n        require(old_balance < balances_[msg.sender], \"Internal error\");\r\n        \r\n        delete votes_[_proposal_id][msg.sender];\r\n        return true;\r\n    }\r\n\r\n    \r\n    function actionProposal(uint256 _proposal_id)  checkDeleted checkDisabled override external payable returns (bool success)\r\n    {\r\n        \r\n        Proposal memory proposal = proposals_[_proposal_id];\r\n        \r\n        require(block.number >= proposal.expiry_block,\r\n            \"Either invalid proposal_id or expiry block hasn't occured yet.\");\r\n            \r\n        require(proposal.operation > 0 && proposal.operation < 12,\r\n            \"Invalid proposal\");\r\n            \r\n        require(proposal.yay > proposal.nay * 2,\r\n            \"Proposal can't be actioned because it did not pass the vote. Use cancel();\");\r\n            \r\n        actionProposalInternal(proposal.operation, proposal.chain_id, proposal.operand, true);\r\n        destroyProposal(_proposal_id);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function actionProposalInternal(uint256 operation, uint256 operand_chain_id, uint256 operand, bool _broadcast) private\r\n    {\r\n\r\n        validateProposal(operation, operand_chain_id, operand);\r\n        \r\n        ProposalActioned(operation, operand_chain_id, operand);\r\n        \r\n        bool is_voting_chain = (chain_id_ == voting_chain_id_);\r\n        \r\n        if (is_voting_chain && _broadcast)\r\n        {\r\n            pigeonAction();\r\n        }\r\n         \r\n        // 1 == add chain, 2 == remove chain, 3 == change pigeon, 4 = propose new voting contract,\r\n        // 5 = propose new proposal block expiry, 6 = tokens_per_vote, 7 = tokens_per_proposal, 8 = change pigeon oracle key\r\n        // 9 = change contract id on a chain, 10 = disable chain, 11 = enable chain\r\n\r\n        if (operation == 1) // add chain\r\n        {\r\n            uniwarp_contracts_[operand_chain_id] = operand;\r\n            chain_ids_[chain_count_++] = operand_chain_id;\r\n        }\r\n        else if (operation == 2) // del chain\r\n        {\r\n            delete uniwarp_contracts_[operand_chain_id];\r\n            for (uint i = 0; i < chain_count_; ++i)\r\n                if (chain_ids_[i] == operand_chain_id)\r\n                    chain_ids_[i] = 0x0;\r\n            if (operand_chain_id == chain_id_)\r\n                deleted_ = true;\r\n                \r\n        }\r\n        else if (operation == 3) // change pigeon (sending contract) on a specific chain to a specific address\r\n        {\r\n            if (operand_chain_id == chain_id_)\r\n                pigeon_address_ = address(uint160(operand));\r\n        }\r\n        else if (operation == 4) // propose new voting chain\r\n        {\r\n            voting_chain_id_ = operand_chain_id;\r\n        }\r\n        else if (operation == 5) // propose new voting block expiry\r\n        {\r\n            // a proposal can change any chain's voting time even if its not the voting chain\r\n            // this is so this figure is adjustable ahead of moving the voting chain\r\n            if (operand_chain_id == chain_id_)\r\n                voting_block_expiry_ = operand;\r\n        }\r\n        else if (operation == 6) // propose new tokens_per_vote\r\n        {\r\n            tokens_per_vote_ = operand;\r\n        }\r\n        else if (operation == 7)\r\n        {\r\n            tokens_per_proposal_ = operand;\r\n        }\r\n        else if (operation == 8)\r\n        {\r\n            changeOracleKeyInternal(address(uint160(operand)));\r\n        }\r\n        else if (operation == 9) // change contract on chain\r\n        {\r\n            uniwarp_contracts_[operand_chain_id] = operand;\r\n            if (operand_chain_id == chain_id_)\r\n                deleted_ = true;\r\n        }\r\n        else if (operation == 10)   // disable chain\r\n        {\r\n            disabled_chains_[operand_chain_id] = true;\r\n        }\r\n        else if (operation == 11)  // enable chain\r\n        {\r\n            disabled_chains_[operand_chain_id] = false;\r\n        }\r\n    }\r\n    \r\n    // anyone can clear a proposal if 1.25 * voting_block_expiry_ has passed\r\n    function cancelProposal(uint256 _proposal_id) checkDeleted checkDisabled override external returns (bool success)\r\n    {\r\n        require(proposals_[_proposal_id].operation > 0, \"Proposal does not exist\");\r\n        require(proposals_[_proposal_id].cancel_block < block.number,\r\n            \"Either invalid proposal_id or cancel block hasn't occured yet.\");\r\n    \r\n        destroyProposal(_proposal_id);\r\n        return true;\r\n    }\r\n    \r\n    function twentyFivePercentMore(uint256 _number) pure private returns (uint256)\r\n    {\r\n        uint256 o = _number;\r\n        uint256 n = _number + (_number / 4);\r\n        require(n > o, \"Invariant tripped\");\r\n        return n;\r\n    }\r\n    \r\n    function propose(uint256 _operation, uint256 _operand_chain_id, uint256 _operand, bytes32 _explain1, bytes32 _explain2) checkDeleted checkDisabled override external returns (uint256) \r\n    {\r\n        require(chain_id_ == voting_chain_id_, \"You can only propose on the voting chain\");\r\n        require(balances_[msg.sender] >= tokens_per_proposal_, \"Not enough UWR to propose\");\r\n\r\n        validateProposal(_operation, _operand_chain_id, _operand);\r\n\r\n        // subtract the tokens from the user's balance until the proposal ends\r\n        uint256 old_balance = balances_[msg.sender];\r\n        balances_[msg.sender] -= tokens_per_proposal_;\r\n        require(old_balance > balances_[msg.sender], \"Internal error\");\r\n        \r\n        \r\n        uint256 id = proposal_count_++; // allocate a new proposal\r\n        proposals_[id].proposer     = msg.sender;\r\n        proposals_[id].operation    = _operation;\r\n        proposals_[id].chain_id     = _operand_chain_id;\r\n        proposals_[id].operand      = _operand;\r\n        proposals_[id].explain1     = _explain1;\r\n        proposals_[id].explain2     = _explain2;\r\n        proposals_[id].lockedTokens = tokens_per_proposal_;\r\n        \r\n        proposals_[id].expiry_block = block.number + voting_block_expiry_;\r\n        proposals_[id].cancel_block = block.number + twentyFivePercentMore(voting_block_expiry_);\r\n        \r\n        if (proposals_[id].expiry_block == block.number || block.number > proposals_[id].expiry_block)\r\n            proposals_[id].expiry_block = block.number + 100; // this is a fallback ~8 minutes on binance smart chain, only active if voting_block_expiry_ was never set or if it was really really big\r\n\r\n        return id;\r\n    }\r\n    \r\n    function vote(uint256 _proposal_id, uint16 _yay, uint16 _nay) external checkDeleted checkDisabled override returns (bool success)\r\n    {\r\n        require(chain_id_ == voting_chain_id_, \"You can only vote on the voting chain\");\r\n        require( !( _yay > 0 && _nay > 0 ), \"You must either vote yay or nay... not both\");\r\n        require(balances_[msg.sender] >= tokens_per_vote_ * _yay && \r\n                balances_[msg.sender] >= tokens_per_vote_ * _nay, \"Not enough UWR to vote\");\r\n                \r\n        require(proposals_[_proposal_id].operation > 0, \"You are attempting to vote on a non existent proposal id\");\r\n\r\n        require(block.number < proposals_[_proposal_id].expiry_block, \"Proposal has already expired, either action() or cancel() it.\");\r\n\r\n        uint256 old_balance = balances_[msg.sender];\r\n        uint256 charge = tokens_per_vote_ * (_yay + _nay);\r\n        balances_[msg.sender] -= charge;\r\n        votes_[_proposal_id][msg.sender] += charge;\r\n        require(old_balance > balances_[msg.sender], \"Internal error\");\r\n\r\n        uint16 old_yay = proposals_[_proposal_id].yay;\r\n        uint16 old_nay = proposals_[_proposal_id].nay;\r\n        proposals_[_proposal_id].yay += _yay;\r\n        proposals_[_proposal_id].nay += _nay;\r\n        require(old_yay <= proposals_[_proposal_id].yay && old_nay <= proposals_[_proposal_id].nay, \"Internal error\");\r\n        \r\n        return true;\r\n    }\r\n    \r\n\r\n    function actionProposalCost() view external checkDeleted checkDisabled override returns (uint256 amount)\r\n    {\r\n        require(chain_id_ == voting_chain_id_, \"only on the voting chain\");\r\n        uint256 cost = 0;\r\n        for (uint i = 0; i < chain_count_; ++i)\r\n        {\r\n            if (chain_ids_[i] == chain_id_ ||\r\n                chain_ids_[i] == 0x0 ||\r\n                uniwarp_contracts_[chain_ids_[i]] == 0x0)\r\n                continue;\r\n            \r\n            PigeonInterface p = PigeonInterface(pigeon_address_);    \r\n            cost += p.pigeonCost(chain_ids_[i]);\r\n        }\r\n        return cost;\r\n    }\r\n\r\n\r\n    function pigeonAction() internal\r\n    {\r\n        for (uint i = 0; i < chain_count_; ++i)\r\n        {\r\n            if (chain_ids_[i] == chain_id_ ||\r\n                chain_ids_[i] == 0x0 ||\r\n                uniwarp_contracts_[chain_ids_[i]] == 0x0)\r\n                continue;\r\n            \r\n            PigeonInterface p = PigeonInterface(pigeon_address_);    \r\n            p.pigeonSend{\r\n                value: p.pigeonCost(chain_ids_[i])\r\n            }(0x0, PROPOSAL_ACTION_EVENT_ID, chain_ids_[i], uniwarp_contracts_[chain_ids_[i]]);\r\n        }\r\n    }\r\n\r\n    function vaultFee(uint256 _dest_chain_id) view checkDeleted checkDisabled override external returns (uint256)\r\n    {\r\n        require(uniwarp_contracts_[_dest_chain_id] != 0x0, \"Chain not supported\");\r\n        return PigeonInterface(pigeon_address_).pigeonCost(_dest_chain_id);\r\n    }\r\n\r\n    // place tokens into a warp vault\r\n    // the vault will only be openable on the destination chain\r\n    // vaults can still be sent from a disabled contract, but not to a disabled contract \r\n    \r\n    function vaultInternal(address _from, uint256 _dest_chain_id, uint256 _amount) internal returns (bool success)\r\n    {\r\n        // todo: minimum vault amount?\r\n        require(balances_[_from] > 0, \"You have no tokens!\");\r\n        require(uniwarp_contracts_[_dest_chain_id] != 0x0, \"Destination chain not currently supported.\");\r\n        require(PigeonInterface(pigeon_address_).pigeonCost(_dest_chain_id) <= msg.value, \"Insufficent vaulting fee. Please check vaultFee(network_id)\");\r\n        require(!disabled_chains_[_dest_chain_id], \"The chain you are vaulting to is currently disabled.\");\r\n        \r\n        // there should be a require(balances_[_fram] >= _amount) here, but it was forgotten,\r\n        // fortunately solidity 0.8.x auto reverts if balance is insufficient here \r\n\r\n        balances_[_from] -= _amount;\r\n        balances_[OFF_CHAIN] += _amount;\r\n        \r\n        emit Vaulted(uint256(uint160(_from)), _dest_chain_id, _amount);\r\n\r\n        PigeonInterface p = PigeonInterface(pigeon_address_);    \r\n        p.pigeonSend{\r\n                value: p.pigeonCost(_dest_chain_id)\r\n        }(0x0, VAULTED_EVENT_ID, _dest_chain_id, uniwarp_contracts_[_dest_chain_id]);        \r\n        emit Transfer(_from, OFF_CHAIN, _amount);\r\n        return true;\r\n    }\r\n\r\n    function vault(uint256 _dest_chain_id, uint256 _amount) checkDeleted external payable override returns (bool success)\r\n    {\r\n        return vaultInternal(msg.sender, _dest_chain_id, _amount);\r\n    }\r\n\r\n\r\n    function vaultFrom(address _from, uint256 _dest_chain_id, uint256 _amount) checkDeleted external payable override returns (bool success)\r\n    {\r\n        uint256 current_allowance = allowed_[_from][msg.sender];\r\n        require(balances_[_from] >= _amount && current_allowance >= _amount);\r\n        if (current_allowance < MAX_UINT256)\r\n            allowed_[_from][msg.sender] -= _amount;\r\n            \r\n        vaultInternal(_from, _dest_chain_id, _amount);\r\n        \r\n        return true;\r\n    }\r\n\r\n\r\n    function name() external view returns ( string memory )\r\n    {\r\n        if (deleted_)\r\n            return \"Uniwarp [Deleted]\";\r\n        return \"Uniwarp\";\r\n    }\r\n    \r\n    function symbol() external view returns ( string memory )\r\n    {\r\n        if (deleted_)\r\n            return \"UWRDELETED\";\r\n        return \"UWR\";\r\n    }\r\n    \r\n    function decimals() external pure returns ( uint8 )\r\n    {\r\n        return 18;\r\n    }\r\n    \r\n    function total_supply() external view override returns ( uint256 )\r\n    {\r\n        if (deleted_)\r\n            return 0;\r\n            \r\n        return total_supply_; \r\n    }\r\n    \r\n    function chain_id() external view returns ( uint256 )\r\n    {\r\n        return chain_id_;\r\n    }\r\n    \r\n    \r\n    address setup_oracle_;\r\n    \r\n    function setupComplete() checkDisabled checkDeleted external returns (bool succcess)\r\n    {\r\n        setup_oracle_ = address(0x0);        \r\n        return true;\r\n    }\r\n    \r\n    function setupProposal(uint256 operation, uint256 operand_chain_id, uint256 operand) checkDisabled checkDeleted external returns (bool success)\r\n    {\r\n        \r\n        require(setup_oracle_ != address (0x0) && msg.sender == setup_oracle_, \"The contract must be in setup mode and you must be the deployer.\");\r\n        actionProposalInternal(operation, operand_chain_id, operand, false);\r\n        return true;\r\n    }\r\n    \r\n    function setupChains(uint256[] memory _chain_ids, uint256[] memory _uniwarp_contracts, bool setupDone) checkDisabled checkDeleted external returns (bool success)\r\n    {\r\n        require(setup_oracle_ != address (0x0) && msg.sender == setup_oracle_, \"The contract must be in setup mode and you must be the deployer.\");\r\n        if (setupDone)\r\n            setup_oracle_ = address(0x0);\r\n\r\n        return updateChains(_chain_ids, _uniwarp_contracts);   \r\n    }\r\n    \r\n    function updateChains(uint256[] memory _chain_ids, uint256[] memory _uniwarp_contracts) private returns (bool success)\r\n    {\r\n        bool voting_chain_found_in_chain_ids = false;\r\n        chain_count_ = _chain_ids.length;\r\n        for (uint i = 0; i < _chain_ids.length; ++i)\r\n        {\r\n            chain_ids_[i] = _chain_ids[i];\r\n            if (_chain_ids[i] == voting_chain_id_)\r\n                voting_chain_found_in_chain_ids = true;\r\n                    \r\n            if (_chain_ids[i] == chain_id_)\r\n                uniwarp_contracts_[chain_id_] = uint256(uint160(address(this)));\r\n            else\r\n                uniwarp_contracts_[_chain_ids[i]] = _uniwarp_contracts[i];\r\n        }\r\n        require(voting_chain_found_in_chain_ids, \"You must specify the voting chain in the chain ids\");\r\n        return true;\r\n    }\r\n    \r\n    constructor (\r\n        bool _is_first_chain,\r\n        uint256 _chain_id, \r\n\r\n        address _pigeon_address,\r\n        address _pigeon_oracle,\r\n\r\n        uint256 _voting_chain_id,     // votes are proxied to the uniwarp contract on the nominated chain and contract\r\n        \r\n        uint256 _voting_block_expiry,\r\n        \r\n        uint256[] memory _chain_ids, uint256[] memory _uniwarp_contracts\r\n        )\r\n        PigeonReceive (_pigeon_oracle) \r\n    {\r\n        setup_oracle_ = msg.sender;\r\n        total_supply_ = 100*(10**24); // 100 million warpies hard coded\r\n        chain_id_ = _chain_id;\r\n        pigeon_address_ = _pigeon_address;\r\n        voting_block_expiry_ = _voting_block_expiry;\r\n        voting_chain_id_ = _voting_chain_id;\r\n        \r\n        require(PigeonInterface(_pigeon_address).getPigeonOracleKey() == _pigeon_oracle, \"Pigeon reported different oracle than provided\");\r\n\r\n        if (_is_first_chain)\r\n        {\r\n            uint256 share = total_supply_/5.0;\r\n            /*\r\n            // these are test addresses for test rig\r\n            balances_[0x61b1D420b2852067eE1A4F79511fAb70b7F4F78c] += share;\r\n            balances_[0x61b1D420b2852067eE1A4F79511fAb70b7F4F78c] += share;\r\n            balances_[0x61b1D420b2852067eE1A4F79511fAb70b7F4F78c] += share;\r\n            balances_[0x5B199ee407a183bfA1cBAD4Cfac6b90470a104a9] += share;\r\n            balances_[0x5B199ee407a183bfA1cBAD4Cfac6b90470a104a9] += share;\r\n            */\r\n            balances_[0x241e6c88a09E9Bcfdd4C9cE718ac41757ae0Eaf6] += share; // s\r\n            balances_[0xdB72Dbcf738dDc8F691D39DE2FAa950a0378eeE3] += share; // w\r\n            balances_[0xA5497fb28af83B0C0172bD5A4FDc61c365D9eE3E] += share; // t\r\n            balances_[0xE9fFFE7c9b322c7065947A8232DDF1B8ff1C82f8] += share; // a\r\n            balances_[0x34070F4a89B0b8e51402Fb3C81413bcC192C7cC3] += share; // r\r\n            \r\n        }\r\n        else\r\n            balances_[OFF_CHAIN] = total_supply_;\r\n\r\n        updateChains(_chain_ids, _uniwarp_contracts);\r\n    }\r\n    \r\n    \r\n    function getPigeonOracleKey() view external returns (address)\r\n    {\r\n        return getOracleKey();\r\n    }\r\n\r\n\r\n    function transfer(address _to, uint256 _value) external override returns (bool success)\r\n    {\r\n        require(balances_[msg.sender] >= _value);\r\n        balances_[msg.sender] -= _value;\r\n        balances_[_to] += _value;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) external override returns (bool success)\r\n    {\r\n        uint256 current_allowance = allowed_[_from][msg.sender];\r\n        require(balances_[_from] >= _value && current_allowance >= _value, \"Insufficent allowance\");\r\n        balances_[_to] += _value;\r\n        balances_[_from] -= _value;\r\n        if (current_allowance < MAX_UINT256) {\r\n            allowed_[_from][msg.sender] -= _value;\r\n        }\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) external override view returns (uint256 balance)\r\n    {\r\n        return balances_[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) external override returns (bool success)\r\n    {\r\n        allowed_[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value); //solhint-disable-line indent, no-unused-vars\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) external override view returns (uint256 remaining)\r\n    {\r\n        return allowed_[_owner][_spender];\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_is_first_chain\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pigeon_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pigeon_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_voting_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voting_block_expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_chain_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_uniwarp_contracts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oracle_key\",\"type\":\"address\"}],\"name\":\"OracleKeyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_source_chain_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_source_contract_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_source_block_no\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_source_confirmations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_source_txn_hash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_source_topic0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_source_topic1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_source_topic2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_source_topic3\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_source_topic4\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_source_topic5\",\"type\":\"uint256\"}],\"name\":\"PigeonArrived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oracleKey\",\"type\":\"address\"}],\"name\":\"PigeonCallable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operand_chain_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operand\",\"type\":\"uint256\"}],\"name\":\"ProposalActioned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_vaulter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_dest_chain_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Vaulted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OFF_CHAIN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposal_id\",\"type\":\"uint256\"}],\"name\":\"actionProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actionProposalCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposal_id\",\"type\":\"uint256\"}],\"name\":\"cancelProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_chain_id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chain_count_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chain_id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chain_id_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chain_ids_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle_key\",\"type\":\"address\"}],\"name\":\"changeOracleKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disabled_chains_\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracleKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPigeonAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pigeon\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPigeonOracleKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProposalExpiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokensPerProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokensPerVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotingChain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_chain_id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chain_id\",\"type\":\"uint256\"}],\"name\":\"isDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_is_disabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVotingChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_is_voting\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_source_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_source_contract_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_source_block_no\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_source_confirmations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_source_txn_hash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_topic0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_topic1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_topic2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_topic3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_topic4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_topic5\",\"type\":\"uint256\"}],\"name\":\"pigeonArrive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pigeon_address_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposal_count_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"operation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operand\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry_block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cancel_block\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"explain1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"explain2\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"yay\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"nay\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_operand_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_operand\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_explain1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_explain2\",\"type\":\"bytes32\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposal_id\",\"type\":\"uint256\"}],\"name\":\"redeemVoteTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_chain_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_uniwarp_contracts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"setupDone\",\"type\":\"bool\"}],\"name\":\"setupChains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setupComplete\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"succcess\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"operation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operand_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operand\",\"type\":\"uint256\"}],\"name\":\"setupProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokens_per_proposal_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokens_per_vote_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_supply_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniwarp_contracts_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_operand_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_operand\",\"type\":\"uint256\"}],\"name\":\"validateProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dest_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dest_chain_id\",\"type\":\"uint256\"}],\"name\":\"vaultFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dest_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"vaultFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposal_id\",\"type\":\"uint256\"}],\"name\":\"viewProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"operation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operand\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry_block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cancel_block\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"explain1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"explain2\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"yay\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"nay\",\"type\":\"uint16\"}],\"internalType\":\"struct UniwarpDAOInterface.Proposal\",\"name\":\"proposal\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposal_id\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_yay\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_nay\",\"type\":\"uint16\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voting_block_expiry_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voting_chain_id_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Uniwarp","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000785d28042abe9b7968966a61db44fb81d31ba85a00000000000000000000000094175c8880a131605a72e61a27ff1568876fabe200000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000007a0000000000000000000000000000000000000000000000000000000000000089000000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000005000000000000000000000000cb062b77ffacb47ea5439017257801871acc9dd80000000000000000000000003871743af49f111b80d45523699c6d9523c1f7800000000000000000000000003871743af49f111b80d45523699c6d9523c1f780000000000000000000000000117db2f9449016350c706f8d9f40c67e2cf3f5a40000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7098c98ed43a6c074f1849a2058ac49696621998f48e9a9c3dc675fc6148e24a"}]}