{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface ReverseRegistrar {\r\n    function setName(string memory name) external returns (bytes32);\r\n}\r\n\r\nfunction getBytes(uint gasLimit, uint sizeLimit, address addr, bytes memory data) view returns (uint status, bytes memory result) {\r\n    assembly {\r\n        // Allocate a new slot for the output\r\n        result := mload(0x40)\r\n\r\n        // Initialize the output as length 0 (in case things go wrong)\r\n        mstore(result, 0)\r\n        mstore(0x40, add(result, 32))\r\n\r\n        // Call the target address with the data, limiting gas usage\r\n        status := staticcall(gasLimit, addr, add(data, 32), mload(data), 0, 0)\r\n\r\n        // If the result (return or revert) is a reasonable length...\r\n        if lt(returndatasize(), sizeLimit) {\r\n\r\n            // Allocate enough space to store the ceil_32(len_32(result) + result)\r\n            mstore(0x40, add(result, and(add(add(returndatasize(), 0x20), 0x1f), not(0x1f))))\r\n\r\n            // Place the length of the result value into the output\r\n            mstore(result, returndatasize())\r\n\r\n            // Copy the result value into the output\r\n            returndatacopy(add(result, 32), 0, returndatasize())\r\n        }\r\n    }\r\n}\r\n\r\ncontract Multicall {\r\n\r\n    // Call this with the result of ens.owner(namehash(\"addr.reverse\"))\r\n    constructor(address reverseRegistrar) {\r\n\r\n        // Make sure the reverse record is correct\r\n        ReverseRegistrar(reverseRegistrar).setName(\"multicall.eth\");\r\n    }\r\n\r\n    function execute(uint gasLimit, uint sizeLimit, address[] calldata addrs, bytes[] calldata datas) external view returns (uint blockNumber, uint[] memory statuses, bytes[] memory results) {\r\n        require(addrs.length == datas.length);\r\n\r\n        statuses = new uint256[](addrs.length);\r\n        results = new bytes[](addrs.length);\r\n\r\n        for (uint256 i = 0; i < addrs.length; i++) {\r\n            (statuses[i], results[i]) = getBytes(gasLimit, sizeLimit, addrs[i], datas[i]);\r\n        }\r\n\r\n        return (block.number, statuses, results);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reverseRegistrar\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sizeLimit\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"statuses\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Multicall","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000084b1c3c81545d370f3634392de611caabff8148","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://83b5dc25b3c9256aa4244eddaf9e4b5fccd09a45ec4e0174f2c900de7144602d"}]}