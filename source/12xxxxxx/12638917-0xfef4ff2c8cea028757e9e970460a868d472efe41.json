{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: Unlicense\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IMillionPieces {\r\n    function mintTo(address to, uint256 tokenId) external;\r\n    function mintToSpecial(address to, uint256 tokenId) external;\r\n    function createArtwork(string calldata name) external;\r\n    function setTokenURI(uint256 tokenId, string calldata uri) external;\r\n    function setBaseURI(string calldata baseURI) external;\r\n    function exists(uint256 tokenId) external view returns (bool);\r\n    function isSpecialSegment(uint256 tokenId) external pure returns (bool);\r\n    function isValidArtworkSegment(uint256 tokenId) external view returns (bool);\r\n    function getArtworkName(uint256 id) external view returns (string memory);\r\n}\r\n\r\n/**\r\n * @title MultiMinter\r\n */\r\ncontract MultiMinter {\r\n  address public owner;\r\n  IMillionPieces constant public millionPieces = IMillionPieces(0x32A984F84E056b6E553cD0C3729fDDd2d897769c);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  //  --------------------\r\n  //  PUBLIC\r\n  //  --------------------\r\n\r\n  function mintMany(uint256[] calldata tokenIds, address receiver) external {\r\n    require(msg.sender == owner);\r\n    _mintMany(tokenIds, receiver);\r\n  }\r\n\r\n  //  --------------------\r\n  //  INTERNAL\r\n  //  -------------------\r\n\r\n  function _mintMany(uint256[] memory tokenIds, address receiver) private {\r\n    uint256 tokensCount = tokenIds.length;\r\n\r\n    for (uint256 i = 0; i < tokensCount; i++) {\r\n      if (_isAvailable(tokenIds[i])) {\r\n        _mintNft(receiver, tokenIds[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  function _mintNft(address receiver, uint256 tokenId) private {\r\n    millionPieces.mintTo(receiver, tokenId);\r\n  }\r\n\r\n  function _isAvailable(uint256 tokenId) private view returns (bool) {\r\n    return !millionPieces.exists(tokenId);\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"millionPieces\",\"outputs\":[{\"internalType\":\"contract IMillionPieces\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mintMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MultiMinter","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://68ca0b7b01cd3078d17d4b45fdaaff5083383fcd8a48a6d96b5d0589ab912ab6"}]}