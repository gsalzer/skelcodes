{"status":"1","message":"OK","result":[{"SourceCode":"// This file was originally take from dapphub DSGuard and modified. Original source code can be found\r\n// here: https://github.com/dapphub/ds-guard/blob/master/src/guard.sol\r\n// Changes are limited to updating the Solidity version and some stylistic modifications.\r\n\r\n// guard.sol -- simple whitelist implementation of DSAuthority\r\n\r\n// Copyright (C) 2017  DappHub, LLC\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract DSAuthority {\r\n    function canCall(\r\n        address src,\r\n        address dst,\r\n        bytes4 sig\r\n    ) public view virtual returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority(address indexed authority);\r\n    event LogSetOwner(address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority public authority;\r\n    address public owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_) public auth {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_) public auth {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(address(0))) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\ncontract DSGuardEvents {\r\n    event LogPermit(bytes32 indexed src, bytes32 indexed dst, bytes32 indexed sig);\r\n\r\n    event LogForbid(bytes32 indexed src, bytes32 indexed dst, bytes32 indexed sig);\r\n}\r\n\r\ncontract DSGuard is DSAuth, DSAuthority, DSGuardEvents {\r\n    bytes32 public constant ANY = bytes32(type(uint256).max);\r\n\r\n    mapping(bytes32 => mapping(bytes32 => mapping(bytes32 => bool))) acl;\r\n\r\n    function canCall(\r\n        address src_,\r\n        address dst_,\r\n        bytes4 sig\r\n    ) public view override returns (bool) {\r\n        bytes32 src = bytes32(bytes20(src_));\r\n        bytes32 dst = bytes32(bytes20(dst_));\r\n\r\n        return\r\n            acl[src][dst][sig] ||\r\n            acl[src][dst][ANY] ||\r\n            acl[src][ANY][sig] ||\r\n            acl[src][ANY][ANY] ||\r\n            acl[ANY][dst][sig] ||\r\n            acl[ANY][dst][ANY] ||\r\n            acl[ANY][ANY][sig] ||\r\n            acl[ANY][ANY][ANY];\r\n    }\r\n\r\n    function permit(\r\n        bytes32 src,\r\n        bytes32 dst,\r\n        bytes32 sig\r\n    ) public auth {\r\n        acl[src][dst][sig] = true;\r\n        emit LogPermit(src, dst, sig);\r\n    }\r\n\r\n    function forbid(\r\n        bytes32 src,\r\n        bytes32 dst,\r\n        bytes32 sig\r\n    ) public auth {\r\n        acl[src][dst][sig] = false;\r\n        emit LogForbid(src, dst, sig);\r\n    }\r\n\r\n    function permit(\r\n        address src,\r\n        address dst,\r\n        bytes32 sig\r\n    ) public {\r\n        permit(bytes32(bytes20(src)), bytes32(bytes20(dst)), sig);\r\n    }\r\n\r\n    function forbid(\r\n        address src,\r\n        address dst,\r\n        bytes32 sig\r\n    ) public {\r\n        forbid(bytes32(bytes20(src)), bytes32(bytes20(dst)), sig);\r\n    }\r\n}\r\n\r\ncontract DSGuardFactory {\r\n    mapping(address => bool) public isGuard;\r\n\r\n    function newGuard() public returns (DSGuard guard) {\r\n        guard = new DSGuard();\r\n        guard.setOwner(msg.sender);\r\n        isGuard[address(guard)] = true;\r\n    }\r\n}\r\n\r\n\r\ncontract converter{\r\n    function convert(address src_) public pure returns (bytes32){\r\n        return bytes32(bytes20(src_));\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"src\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dst\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sig\",\"type\":\"bytes32\"}],\"name\":\"LogForbid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"src\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dst\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sig\",\"type\":\"bytes32\"}],\"name\":\"LogPermit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ANY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract DSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst_\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"canCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"sig\",\"type\":\"bytes32\"}],\"name\":\"forbid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"src\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dst\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sig\",\"type\":\"bytes32\"}],\"name\":\"forbid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"sig\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"src\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dst\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sig\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract DSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DSGuard","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3bcde963290afa5c4de2660f4f27f4faf88b3630640d02880203c041fbacdd96"}]}