{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPLv3\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        \r\n        \r\n        \r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        \r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ncontract Constants {\r\n    uint8 public constant N_COINS = 3;\r\n    uint8 public constant DEFAULT_DECIMALS = 18; \r\n    uint256 public constant DEFAULT_DECIMALS_FACTOR = uint256(10)**DEFAULT_DECIMALS;\r\n    uint8 public constant CHAINLINK_PRICE_DECIMALS = 8;\r\n    uint256 public constant CHAINLINK_PRICE_DECIMAL_FACTOR = uint256(10)**CHAINLINK_PRICE_DECIMALS;\r\n    uint8 public constant PERCENTAGE_DECIMALS = 4;\r\n    uint256 public constant PERCENTAGE_DECIMAL_FACTOR = uint256(10)**PERCENTAGE_DECIMALS;\r\n    uint256 public constant CURVE_RATIO_DECIMALS = 6;\r\n    uint256 public constant CURVE_RATIO_DECIMALS_FACTOR = uint256(10)**CURVE_RATIO_DECIMALS;\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IController {\r\n    function stablecoins() external view returns (address[3] memory);\r\n\r\n    function vaults() external view returns (address[3] memory);\r\n\r\n    function underlyingVaults(uint256 i) external view returns (address vault);\r\n\r\n    function curveVault() external view returns (address);\r\n\r\n    function pnl() external view returns (address);\r\n\r\n    function insurance() external view returns (address);\r\n\r\n    function lifeGuard() external view returns (address);\r\n\r\n    function buoy() external view returns (address);\r\n\r\n    function reward() external view returns (address);\r\n\r\n    function isValidBigFish(\r\n        bool pwrd,\r\n        bool deposit,\r\n        uint256 amount\r\n    ) external view returns (bool);\r\n\r\n    function withdrawHandler() external view returns (address);\r\n\r\n    function emergencyHandler() external view returns (address);\r\n\r\n    function depositHandler() external view returns (address);\r\n\r\n    function totalAssets() external view returns (uint256);\r\n\r\n    function gTokenTotalAssets() external view returns (uint256);\r\n\r\n    function eoaOnly(address sender) external;\r\n\r\n    function getSkimPercent() external view returns (uint256);\r\n\r\n    function gToken(bool _pwrd) external view returns (address);\r\n\r\n    function emergencyState() external view returns (bool);\r\n\r\n    function deadCoin() external view returns (uint256);\r\n\r\n    function distributeStrategyGainLoss(uint256 gain, uint256 loss) external;\r\n\r\n    function burnGToken(\r\n        bool pwrd,\r\n        bool all,\r\n        address account,\r\n        uint256 amount,\r\n        uint256 bonus\r\n    ) external;\r\n\r\n    function mintGToken(\r\n        bool pwrd,\r\n        address account,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function getUserAssets(bool pwrd, address account) external view returns (uint256 deductUsd);\r\n\r\n    function referrals(address account) external view returns (address);\r\n\r\n    function addReferral(address account, address referral) external;\r\n\r\n    function getStrategiesTargetRatio() external view returns (uint256[] memory);\r\n\r\n    function withdrawalFee(bool pwrd) external view returns (uint256);\r\n\r\n    function validGTokenDecrease(uint256 amount) external view returns (bool);\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IPausable {\r\n    function paused() external view returns (bool);\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ncontract Controllable is Ownable {\r\n    address public controller;\r\n\r\n    event ChangeController(address indexed oldController, address indexed newController);\r\n\r\n    modifier whenNotPaused() {\r\n        require(!_pausable().paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(_pausable().paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    function ctrlPaused() public view returns (bool) {\r\n        return _pausable().paused();\r\n    }\r\n\r\n    function setController(address newController) external onlyOwner {\r\n        require(newController != address(0), \"setController: !0x\");\r\n        address oldController = controller;\r\n        controller = newController;\r\n        emit ChangeController(oldController, newController);\r\n    }\r\n\r\n    function _controller() internal view returns (IController) {\r\n        require(controller != address(0), \"Controller not set\");\r\n        return IController(controller);\r\n    }\r\n\r\n    function _pausable() internal view returns (IPausable) {\r\n        require(controller != address(0), \"Controller not set\");\r\n        return IPausable(controller);\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ncontract Whitelist is Ownable {\r\n    mapping(address => bool) public whitelist;\r\n\r\n    event LogAddToWhitelist(address indexed user);\r\n    event LogRemoveFromWhitelist(address indexed user);\r\n\r\n    modifier onlyWhitelist() {\r\n        require(whitelist[msg.sender], \"only whitelist\");\r\n        _;\r\n    }\r\n\r\n    function addToWhitelist(address user) external onlyOwner {\r\n        require(user != address(0), \"WhiteList: 0x\");\r\n        whitelist[user] = true;\r\n        emit LogAddToWhitelist(user);\r\n    }\r\n\r\n    function removeFromWhitelist(address user) external onlyOwner {\r\n        require(user != address(0), \"WhiteList: 0x\");\r\n        whitelist[user] = false;\r\n        emit LogRemoveFromWhitelist(user);\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nstruct SystemState {\r\n    uint256 totalCurrentAssetsUsd;\r\n    uint256 curveCurrentAssetsUsd;\r\n    uint256 lifeguardCurrentAssetsUsd;\r\n    uint256[3] vaultCurrentAssets;\r\n    uint256[3] vaultCurrentAssetsUsd;\r\n    uint256 rebalanceThreshold;\r\n    uint256 utilisationRatio;\r\n    uint256 targetBuffer;\r\n    uint256[3] stablePercents;\r\n    uint256 curvePercent;\r\n}\r\n\r\nstruct ExposureState {\r\n    uint256[3] stablecoinExposure;\r\n    uint256[] protocolExposure;\r\n    uint256 curveExposure;\r\n    bool stablecoinExposed;\r\n    bool protocolExposed;\r\n}\r\n\r\nstruct AllocationState {\r\n    uint256[] strategyTargetRatio;\r\n    bool needProtocolWithdrawal;\r\n    uint256 protocolExposedIndex;\r\n    uint256[3] protocolWithdrawalUsd;\r\n    StablecoinAllocationState stableState;\r\n}\r\n\r\nstruct StablecoinAllocationState {\r\n    uint256 swapInTotalAmountUsd;\r\n    uint256[3] swapInAmounts;\r\n    uint256[3] swapInAmountsUsd;\r\n    uint256[3] swapOutPercents;\r\n    uint256[3] vaultsTargetUsd;\r\n    uint256 curveTargetUsd;\r\n    uint256 curveTargetDeltaUsd;\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IAllocation {\r\n    function calcSystemTargetDelta(SystemState calldata sysState, ExposureState calldata expState)\r\n        external\r\n        view\r\n        returns (AllocationState memory allState);\r\n\r\n    function calcVaultTargetDelta(SystemState calldata sysState, bool onlySwapOut)\r\n        external\r\n        view\r\n        returns (StablecoinAllocationState memory stableState);\r\n\r\n    function calcStrategyPercent(uint256 utilisationRatio) external pure returns (uint256[] memory);\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IInsurance {\r\n    function calculateDepositDeltasOnAllVaults() external view returns (uint256[3] memory);\r\n\r\n    function rebalanceTrigger() external view returns (bool sysNeedRebalance);\r\n\r\n    function rebalance() external;\r\n\r\n    function calcSkim() external view returns (uint256);\r\n\r\n    function rebalanceForWithdraw(uint256 withdrawUsd, bool pwrd) external returns (bool);\r\n\r\n    function getDelta(uint256 withdrawUsd) external view returns (uint256[3] memory delta);\r\n\r\n    function getVaultDeltaForDeposit(uint256 amount) external view returns (uint256[3] memory, uint256);\r\n\r\n    function sortVaultsByDelta(bool bigFirst) external view returns (uint256[3] memory vaultIndexes);\r\n\r\n    function getStrategiesTargetRatio(uint256 utilRatio) external view returns (uint256[] memory);\r\n\r\n    function setUnderlyingTokenPercents(uint256[3] calldata percents) external;\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IExposure {\r\n    function calcRiskExposure(SystemState calldata sysState) external view returns (ExposureState memory expState);\r\n\r\n    function getExactRiskExposure(SystemState calldata sysState) external view returns (ExposureState memory expState);\r\n\r\n    function getUnifiedAssets(address[3] calldata vaults)\r\n        external\r\n        view\r\n        returns (uint256 unifiedTotalAssets, uint256[3] memory unifiedAssets);\r\n\r\n    function sortVaultsByDelta(\r\n        bool bigFirst,\r\n        uint256 unifiedTotalAssets,\r\n        uint256[3] calldata unifiedAssets,\r\n        uint256[3] calldata targetPercents\r\n    ) external pure returns (uint256[3] memory vaultIndexes);\r\n\r\n    function calcRoughDelta(\r\n        uint256[3] calldata targets,\r\n        address[3] calldata vaults,\r\n        uint256 withdrawUsd\r\n    ) external view returns (uint256[3] memory);\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IERC20Detailed {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface ILifeGuard {\r\n    function assets(uint256 i) external view returns (uint256);\r\n\r\n    function totalAssets() external view returns (uint256);\r\n\r\n    function getAssets() external view returns (uint256[3] memory);\r\n\r\n    function totalAssetsUsd() external view returns (uint256);\r\n\r\n    function availableUsd() external view returns (uint256 dollar);\r\n\r\n    function availableLP() external view returns (uint256);\r\n\r\n    function depositStable(bool rebalance) external returns (uint256);\r\n\r\n    function investToCurveVault() external;\r\n\r\n    function distributeCurveVault(uint256 amount, uint256[3] memory delta) external returns (uint256[3] memory);\r\n\r\n    function deposit() external returns (uint256 usdAmount);\r\n\r\n    function withdrawSingleByLiquidity(\r\n        uint256 i,\r\n        uint256 minAmount,\r\n        address recipient\r\n    ) external returns (uint256 usdAmount, uint256 amount);\r\n\r\n    function withdrawSingleByExchange(\r\n        uint256 i,\r\n        uint256 minAmount,\r\n        address recipient\r\n    ) external returns (uint256 usdAmount, uint256 amount);\r\n\r\n    function invest(uint256 whaleDepositAmount, uint256[3] calldata delta) external returns (uint256 dollarAmount);\r\n\r\n    function getBuoy() external view returns (address);\r\n\r\n    function investSingle(\r\n        uint256[3] calldata inAmounts,\r\n        uint256 i,\r\n        uint256 j\r\n    ) external returns (uint256 dollarAmount);\r\n\r\n    function investToCurveVaultTrigger() external view returns (bool _invest);\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IVault {\r\n    function withdraw(uint256 amount) external;\r\n\r\n    function withdraw(uint256 amount, address recipient) external;\r\n\r\n    function withdrawByStrategyOrder(\r\n        uint256 amount,\r\n        address recipient,\r\n        bool reversed\r\n    ) external;\r\n\r\n    function withdrawByStrategyIndex(\r\n        uint256 amount,\r\n        address recipient,\r\n        uint256 strategyIndex\r\n    ) external;\r\n\r\n    function deposit(uint256 amount) external;\r\n\r\n    function updateStrategyRatio(uint256[] calldata strategyRetios) external;\r\n\r\n    function totalAssets() external view returns (uint256);\r\n\r\n    function getStrategiesLength() external view returns (uint256);\r\n\r\n    function strategyHarvestTrigger(uint256 index, uint256 callCost) external view returns (bool);\r\n\r\n    function strategyHarvest(uint256 index) external returns (bool);\r\n\r\n    function getStrategyAssets(uint256 index) external view returns (uint256);\r\n\r\n    function token() external view returns (address);\r\n\r\n    function vault() external view returns (address);\r\n\r\n    function investTrigger() external view returns (bool);\r\n\r\n    function invest() external;\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IBuoy {\r\n    function safetyCheck() external view returns (bool);\r\n\r\n    function updateRatios() external returns (bool);\r\n\r\n    function updateRatiosWithTolerance(uint256 tolerance) external returns (bool);\r\n\r\n    function lpToUsd(uint256 inAmount) external view returns (uint256);\r\n\r\n    function usdToLp(uint256 inAmount) external view returns (uint256);\r\n\r\n    function stableToUsd(uint256[3] calldata inAmount, bool deposit) external view returns (uint256);\r\n\r\n    function stableToLp(uint256[3] calldata inAmount, bool deposit) external view returns (uint256);\r\n\r\n    function singleStableFromLp(uint256 inAmount, int128 i) external view returns (uint256);\r\n\r\n    function getVirtualPrice() external view returns (uint256);\r\n\r\n    function singleStableFromUsd(uint256 inAmount, int128 i) external view returns (uint256);\r\n\r\n    function singleStableToUsd(uint256 inAmount, uint256 i) external view returns (uint256);\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IPnL {\r\n    function calcPnL() external view returns (uint256, uint256);\r\n\r\n    function increaseGTokenLastAmount(bool pwrd, uint256 dollarAmount) external;\r\n\r\n    function decreaseGTokenLastAmount(\r\n        bool pwrd,\r\n        uint256 dollarAmount,\r\n        uint256 bonus\r\n    ) external;\r\n\r\n    function lastGvtAssets() external view returns (uint256);\r\n\r\n    function lastPwrdAssets() external view returns (uint256);\r\n\r\n    function utilisationRatio() external view returns (uint256);\r\n\r\n    function emergencyPnL() external;\r\n\r\n    function recover() external;\r\n\r\n    function distributeStrategyGainLoss(\r\n        uint256 gain,\r\n        uint256 loss,\r\n        address reward\r\n    ) external;\r\n\r\n    function distributePriceChange(uint256 currentTotalAssets) external;\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ncontract Insurance is Constants, Controllable, Whitelist, IInsurance {\r\n    using SafeMath for uint256;\r\n\r\n    IAllocation public allocation;\r\n    IExposure public exposure;\r\n\r\n    mapping(uint256 => uint256) public underlyingTokensPercents;\r\n    uint256 public curveVaultPercent;\r\n\r\n    \r\n    \r\n    \r\n    uint256 public exposureBufferRebalance;\r\n    \r\n    \r\n    \r\n    \r\n    uint256 public maxPercentForWithdraw;\r\n    \r\n    \r\n    \r\n    uint256 public maxPercentForDeposit;\r\n\r\n    event LogNewAllocation(address allocation);\r\n    event LogNewExposure(address exposure);\r\n    event LogNewTargetAllocation(uint256[N_COINS] percents);\r\n    event LogNewCurveAllocation(uint256 percent);\r\n    event LogNewExposureBuffer(uint256 buffer);\r\n    event LogNewVaultMax(bool deposit, uint256 percent);\r\n\r\n    function setAllocation(address _allocation) external onlyOwner {\r\n        require(_allocation != address(0), \"Zero address provided\");\r\n        allocation = IAllocation(_allocation);\r\n        emit LogNewAllocation(_allocation);\r\n    }\r\n\r\n    function setExposure(address _exposure) external onlyOwner {\r\n        require(_exposure != address(0), \"Zero address provided\");\r\n        exposure = IExposure(_exposure);\r\n        emit LogNewExposure(_exposure);\r\n    }\r\n\r\n    function setUnderlyingTokenPercents(uint256[N_COINS] calldata percents) external override {\r\n        require(msg.sender == controller || msg.sender == owner(), \"setUnderlyingTokenPercents: !authorized\");\r\n        uint256 total;\r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            total = total + percents[i];\r\n            underlyingTokensPercents[i] = percents[i];\r\n        }\r\n        require(total == PERCENTAGE_DECIMAL_FACTOR, \"setUnderlyingTokenPercents: !100%\");\r\n        emit LogNewTargetAllocation(percents);\r\n    }\r\n\r\n    function setCurveVaultPercent(uint256 _curveVaultPercent) external onlyOwner {\r\n        curveVaultPercent = _curveVaultPercent;\r\n        emit LogNewCurveAllocation(_curveVaultPercent);\r\n    }\r\n\r\n    function setExposureBufferRebalance(uint256 rebalanceBuffer) external onlyOwner {\r\n        exposureBufferRebalance = rebalanceBuffer;\r\n        emit LogNewExposureBuffer(rebalanceBuffer);\r\n    }\r\n\r\n    function setWhaleThresholdWithdraw(uint256 _maxPercentForWithdraw) external onlyOwner {\r\n        maxPercentForWithdraw = _maxPercentForWithdraw;\r\n        emit LogNewVaultMax(false, _maxPercentForWithdraw);\r\n    }\r\n\r\n    function setWhaleThresholdDeposit(uint256 _maxPercentForDeposit) external onlyOwner {\r\n        maxPercentForDeposit = _maxPercentForDeposit;\r\n        emit LogNewVaultMax(true, _maxPercentForDeposit);\r\n    }\r\n\r\n    function calculateDepositDeltasOnAllVaults() public view override returns (uint256[N_COINS] memory) {\r\n        return getStablePercents();\r\n    }\r\n\r\n    function getVaultDeltaForDeposit(uint256 amount) external view override returns (uint256[N_COINS] memory, uint256) {\r\n        uint256[N_COINS] memory vaultIndexes;\r\n        (uint256 totalAssets, uint256[N_COINS] memory vaultAssets) = exposure.getUnifiedAssets(_controller().vaults());\r\n        \r\n        \r\n        if (amount < totalAssets.mul(maxPercentForDeposit).div(PERCENTAGE_DECIMAL_FACTOR)) {\r\n            uint256[N_COINS] memory _vaultIndexes = exposure.sortVaultsByDelta(\r\n                false,\r\n                totalAssets,\r\n                vaultAssets,\r\n                getStablePercents()\r\n            );\r\n            vaultIndexes[0] = _vaultIndexes[0];\r\n            vaultIndexes[1] = _vaultIndexes[1];\r\n            vaultIndexes[2] = _vaultIndexes[2];\r\n\r\n            return (vaultIndexes, 1);\r\n            \r\n            \r\n        } else {\r\n            return (vaultIndexes, N_COINS);\r\n        }\r\n    }\r\n\r\n    function sortVaultsByDelta(bool bigFirst) external view override returns (uint256[N_COINS] memory vaultIndexes) {\r\n        (uint256 totalAssets, uint256[N_COINS] memory vaultAssets) = exposure.getUnifiedAssets(_controller().vaults());\r\n        return exposure.sortVaultsByDelta(bigFirst, totalAssets, vaultAssets, getStablePercents());\r\n    }\r\n\r\n    function rebalanceTrigger() external view override returns (bool sysNeedRebalance) {\r\n        SystemState memory sysState = prepareCalculation();\r\n        sysState.utilisationRatio = IPnL(_controller().pnl()).utilisationRatio();\r\n        sysState.rebalanceThreshold = PERCENTAGE_DECIMAL_FACTOR.sub(sysState.utilisationRatio.div(2)).sub(\r\n            exposureBufferRebalance\r\n        );\r\n        ExposureState memory expState = exposure.calcRiskExposure(sysState);\r\n        sysNeedRebalance = expState.stablecoinExposed || expState.protocolExposed;\r\n    }\r\n\r\n    function rebalance() external override onlyWhitelist {\r\n        SystemState memory sysState = prepareCalculation();\r\n        sysState.utilisationRatio = IPnL(_controller().pnl()).utilisationRatio();\r\n        sysState.rebalanceThreshold = PERCENTAGE_DECIMAL_FACTOR.sub(sysState.utilisationRatio.div(2)).sub(\r\n            exposureBufferRebalance\r\n        );\r\n        ExposureState memory expState = exposure.calcRiskExposure(sysState);\r\n        if (!expState.stablecoinExposed && !expState.protocolExposed) return;\r\n        sysState.targetBuffer = exposureBufferRebalance;\r\n        AllocationState memory allState = allocation.calcSystemTargetDelta(sysState, expState);\r\n        _rebalance(allState);\r\n    }\r\n\r\n    function rebalanceForWithdraw(uint256 withdrawUsd, bool pwrd) external override returns (bool) {\r\n        require(msg.sender == _controller().withdrawHandler(), \"rebalanceForWithdraw: !withdrawHandler\");\r\n        return withdraw(withdrawUsd, pwrd);\r\n    }\r\n\r\n    function calcSkim() external view override returns (uint256) {\r\n        IPnL pnl = IPnL(_controller().pnl());\r\n        (uint256 gvt, uint256 pwrd) = pnl.calcPnL();\r\n        uint256 totalAssets = gvt.add(pwrd);\r\n        uint256 curveAssets = IVault(_controller().curveVault()).totalAssets();\r\n        if (totalAssets != 0 && curveAssets.mul(PERCENTAGE_DECIMAL_FACTOR).div(totalAssets) >= curveVaultPercent) {\r\n            return 0;\r\n        }\r\n        return curveVaultPercent;\r\n    }\r\n\r\n    function getStrategiesTargetRatio(uint256 utilRatio) external view override returns (uint256[] memory) {\r\n        return allocation.calcStrategyPercent(utilRatio);\r\n    }\r\n\r\n    function prepareCalculation() public view returns (SystemState memory systemState) {\r\n        ILifeGuard lg = getLifeGuard();\r\n        IBuoy buoy = IBuoy(lg.getBuoy());\r\n        require(buoy.safetyCheck());\r\n        systemState.lifeguardCurrentAssetsUsd = lg.totalAssetsUsd();\r\n        systemState.curveCurrentAssetsUsd = buoy.lpToUsd(IVault(_controller().curveVault()).totalAssets());\r\n        systemState.totalCurrentAssetsUsd = systemState.lifeguardCurrentAssetsUsd.add(\r\n            systemState.curveCurrentAssetsUsd\r\n        );\r\n        systemState.curvePercent = curveVaultPercent;\r\n        address[N_COINS] memory vaults = _controller().vaults();\r\n        \r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            IVault vault = IVault(vaults[i]);\r\n            uint256 vaultAssets = vault.totalAssets();\r\n            uint256 vaultAssetsUsd = buoy.singleStableToUsd(vaultAssets, i);\r\n            systemState.totalCurrentAssetsUsd = systemState.totalCurrentAssetsUsd.add(vaultAssetsUsd);\r\n            systemState.vaultCurrentAssets[i] = vaultAssets;\r\n            systemState.vaultCurrentAssetsUsd[i] = vaultAssetsUsd;\r\n        }\r\n        systemState.stablePercents = getStablePercents();\r\n    }\r\n\r\n    function withdraw(uint256 amount, bool pwrd) private returns (bool curve) {\r\n        address[N_COINS] memory vaults = _controller().vaults();\r\n\r\n        \r\n        (uint256 withdrawType, uint256[N_COINS] memory withdrawalAmounts) = calculateWithdrawalAmountsOnPartVaults(\r\n            amount,\r\n            vaults\r\n        );\r\n\r\n        \r\n        \r\n\r\n        \r\n        if (withdrawType > 1) {\r\n            \r\n            if (withdrawType == 2)\r\n                withdrawalAmounts = calculateWithdrawalAmountsOnAllVaults(amount, vaults);\r\n                \r\n            else {\r\n                \r\n                for (uint256 i; i < N_COINS; i++) {\r\n                    withdrawalAmounts[i] = IVault(vaults[i]).totalAssets();\r\n                }\r\n            }\r\n        }\r\n        ILifeGuard lg = getLifeGuard();\r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            \r\n            \r\n            \r\n            if (withdrawalAmounts[i] > 0) {\r\n                IVault(vaults[i]).withdrawByStrategyOrder(withdrawalAmounts[i], address(lg), pwrd);\r\n            }\r\n        }\r\n\r\n        if (withdrawType == 3) {\r\n            \r\n            \r\n            \r\n            IBuoy buoy = IBuoy(lg.getBuoy());\r\n            uint256[N_COINS] memory _withdrawalAmounts;\r\n            _withdrawalAmounts[0] = withdrawalAmounts[0];\r\n            _withdrawalAmounts[1] = withdrawalAmounts[1];\r\n            _withdrawalAmounts[2] = withdrawalAmounts[2];\r\n            uint256 leftUsd = amount.sub(buoy.stableToUsd(_withdrawalAmounts, false));\r\n            IVault curveVault = IVault(_controller().curveVault());\r\n            uint256 curveVaultUsd = buoy.lpToUsd(curveVault.totalAssets());\r\n            require(curveVaultUsd > leftUsd, \"no enough system assets\");\r\n            curveVault.withdraw(buoy.usdToLp(leftUsd), address(lg));\r\n            curve = true;\r\n        }\r\n    }\r\n\r\n    function calculateWithdrawalAmountsOnPartVaults(uint256 amount, address[N_COINS] memory vaults)\r\n        private\r\n        view\r\n        returns (uint256 withdrawType, uint256[N_COINS] memory withdrawalAmounts)\r\n    {\r\n        uint256 maxWithdrawal;\r\n        uint256 leftAmount = amount;\r\n        uint256 vaultIndex;\r\n        (uint256 totalAssets, uint256[N_COINS] memory vaultAssets) = exposure.getUnifiedAssets(vaults);\r\n        if (amount > totalAssets) {\r\n            withdrawType = 3;\r\n        } else {\r\n            withdrawType = 2;\r\n            \r\n            uint256[N_COINS] memory vaultIndexes = exposure.sortVaultsByDelta(\r\n                true,\r\n                totalAssets,\r\n                vaultAssets,\r\n                getStablePercents()\r\n            );\r\n\r\n            IBuoy buoy = IBuoy(getLifeGuard().getBuoy());\r\n            \r\n            for (uint256 i; i < N_COINS - 1; i++) {\r\n                vaultIndex = vaultIndexes[i];\r\n                \r\n                maxWithdrawal = vaultAssets[vaultIndex].mul(maxPercentForWithdraw).div(PERCENTAGE_DECIMAL_FACTOR);\r\n                \r\n                \r\n                if (leftAmount > maxWithdrawal) {\r\n                    withdrawalAmounts[vaultIndex] = buoy.singleStableFromUsd(maxWithdrawal, int128(vaultIndex));\r\n                    leftAmount = leftAmount.sub(maxWithdrawal);\r\n                    \r\n                } else {\r\n                    withdrawType = 1;\r\n                    withdrawalAmounts[vaultIndex] = buoy.singleStableFromUsd(leftAmount, int128(vaultIndex));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getDelta(uint256 withdrawUsd) external view override returns (uint256[N_COINS] memory delta) {\r\n        address[N_COINS] memory vaults = _controller().vaults();\r\n        delta = exposure.calcRoughDelta(getStablePercents(), vaults, withdrawUsd);\r\n    }\r\n\r\n    function calculateWithdrawalAmountsOnAllVaults(uint256 amount, address[N_COINS] memory vaults)\r\n        private\r\n        view\r\n        returns (uint256[N_COINS] memory withdrawalAmounts)\r\n    {\r\n        \r\n        bool simple = true;\r\n        \r\n        \r\n        uint256[N_COINS] memory delta = exposure.calcRoughDelta(getStablePercents(), vaults, amount);\r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            IVault vault = IVault(vaults[i]);\r\n            withdrawalAmounts[i] = amount\r\n            .mul(delta[i])\r\n            .mul(uint256(10)**IERC20Detailed(vault.token()).decimals())\r\n            .div(PERCENTAGE_DECIMAL_FACTOR)\r\n            .div(DEFAULT_DECIMALS_FACTOR);\r\n            if (withdrawalAmounts[i] > vault.totalAssets()) {\r\n                simple = false;\r\n                break;\r\n            }\r\n        }\r\n        \r\n        \r\n        if (!simple) {\r\n            (withdrawalAmounts, ) = calculateVaultSwapData(amount);\r\n        }\r\n    }\r\n\r\n    function calculateVaultSwapData(uint256 withdrawAmount)\r\n        private\r\n        view\r\n        returns (uint256[N_COINS] memory swapInAmounts, uint256[N_COINS] memory swapOutPercents)\r\n    {\r\n        \r\n        SystemState memory state = prepareCalculation();\r\n\r\n        require(withdrawAmount < state.totalCurrentAssetsUsd, \"Withdrawal exceeds system assets\");\r\n        state.totalCurrentAssetsUsd = state.totalCurrentAssetsUsd.sub(withdrawAmount);\r\n\r\n        StablecoinAllocationState memory stableState = allocation.calcVaultTargetDelta(state, false);\r\n        swapInAmounts = stableState.swapInAmounts;\r\n        swapOutPercents = stableState.swapOutPercents;\r\n    }\r\n\r\n    function getLifeGuard() private view returns (ILifeGuard) {\r\n        return ILifeGuard(_controller().lifeGuard());\r\n    }\r\n\r\n    function _rebalance(AllocationState memory allState) private {\r\n        address[N_COINS] memory vaults = _controller().vaults();\r\n        ILifeGuard lg = getLifeGuard();\r\n        IBuoy buoy = IBuoy(lg.getBuoy());\r\n        \r\n        if (allState.needProtocolWithdrawal) {\r\n            for (uint256 i = 0; i < N_COINS; i++) {\r\n                if (allState.protocolWithdrawalUsd[i] > 0) {\r\n                    uint256 amount = buoy.singleStableFromUsd(allState.protocolWithdrawalUsd[i], int128(i));\r\n                    IVault(vaults[i]).withdrawByStrategyIndex(\r\n                        amount,\r\n                        IVault(vaults[i]).vault(),\r\n                        allState.protocolExposedIndex\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        bool hasWithdrawal = moveAssetsFromVaultsToLifeguard(\r\n            vaults,\r\n            allState.stableState.swapInAmounts,\r\n            lg,\r\n            allState.needProtocolWithdrawal ? 0 : allState.protocolExposedIndex,\r\n            allState.strategyTargetRatio \r\n        );\r\n\r\n        \r\n        uint256 curveDeltaUsd = allState.stableState.curveTargetDeltaUsd;\r\n        if (curveDeltaUsd > 0) {\r\n            uint256 usdAmount = lg.totalAssetsUsd();\r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            lg.depositStable(true);\r\n            if (usdAmount < curveDeltaUsd) {\r\n                IVault(_controller().curveVault()).withdraw(buoy.usdToLp(curveDeltaUsd.sub(usdAmount)), address(lg));\r\n            }\r\n        }\r\n\r\n        if (curveDeltaUsd == 0 && hasWithdrawal) lg.depositStable(false);\r\n\r\n        \r\n        \r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            if (allState.stableState.swapOutPercents[i] > 0) {\r\n                uint256[N_COINS] memory _swapOutPercents;\r\n                _swapOutPercents[0] = allState.stableState.swapOutPercents[0];\r\n                _swapOutPercents[1] = allState.stableState.swapOutPercents[1];\r\n                _swapOutPercents[2] = allState.stableState.swapOutPercents[2];\r\n                lg.invest(0, _swapOutPercents);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function moveAssetsFromVaultsToLifeguard(\r\n        address[N_COINS] memory vaults,\r\n        uint256[N_COINS] memory swapInAmounts,\r\n        ILifeGuard lg,\r\n        uint256 strategyIndex,\r\n        uint256[] memory strategyTargetRatio\r\n    ) private returns (bool) {\r\n        bool moved = false;\r\n\r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            IVault vault = IVault(vaults[i]);\r\n            if (swapInAmounts[i] > 0) {\r\n                moved = true;\r\n                vault.withdrawByStrategyIndex(swapInAmounts[i], address(lg), strategyIndex);\r\n            }\r\n            vault.updateStrategyRatio(strategyTargetRatio);\r\n        }\r\n\r\n        return moved;\r\n    }\r\n\r\n    function getStablePercents() private view returns (uint256[N_COINS] memory stablePercents) {\r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            stablePercents[i] = underlyingTokensPercents[i];\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"ChangeController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"LogAddToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"allocation\",\"type\":\"address\"}],\"name\":\"LogNewAllocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"LogNewCurveAllocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exposure\",\"type\":\"address\"}],\"name\":\"LogNewExposure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buffer\",\"type\":\"uint256\"}],\"name\":\"LogNewExposureBuffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"percents\",\"type\":\"uint256[3]\"}],\"name\":\"LogNewTargetAllocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"deposit\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"LogNewVaultMax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"LogRemoveFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHAINLINK_PRICE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHAINLINK_PRICE_DECIMAL_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CURVE_RATIO_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CURVE_RATIO_DECIMALS_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_DECIMALS_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"N_COINS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_DECIMAL_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocation\",\"outputs\":[{\"internalType\":\"contract IAllocation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcSkim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateDepositDeltasOnAllVaults\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ctrlPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveVaultPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exposure\",\"outputs\":[{\"internalType\":\"contract IExposure\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exposureBufferRebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawUsd\",\"type\":\"uint256\"}],\"name\":\"getDelta\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"delta\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"utilRatio\",\"type\":\"uint256\"}],\"name\":\"getStrategiesTargetRatio\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getVaultDeltaForDeposit\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPercentForDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPercentForWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prepareCalculation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalCurrentAssetsUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"curveCurrentAssetsUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lifeguardCurrentAssetsUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"vaultCurrentAssets\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"vaultCurrentAssetsUsd\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"rebalanceThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilisationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetBuffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"stablePercents\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"curvePercent\",\"type\":\"uint256\"}],\"internalType\":\"struct SystemState\",\"name\":\"systemState\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawUsd\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pwrd\",\"type\":\"bool\"}],\"name\":\"rebalanceForWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"sysNeedRebalance\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allocation\",\"type\":\"address\"}],\"name\":\"setAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_curveVaultPercent\",\"type\":\"uint256\"}],\"name\":\"setCurveVaultPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exposure\",\"type\":\"address\"}],\"name\":\"setExposure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rebalanceBuffer\",\"type\":\"uint256\"}],\"name\":\"setExposureBufferRebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"percents\",\"type\":\"uint256[3]\"}],\"name\":\"setUnderlyingTokenPercents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPercentForDeposit\",\"type\":\"uint256\"}],\"name\":\"setWhaleThresholdDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPercentForWithdraw\",\"type\":\"uint256\"}],\"name\":\"setWhaleThresholdWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bigFirst\",\"type\":\"bool\"}],\"name\":\"sortVaultsByDelta\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"vaultIndexes\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"underlyingTokensPercents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Insurance","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://59886aca7da5fc30a60b31f55dd61bc0e866ff105bdfd0bbe607d6649ce4af69"}]}