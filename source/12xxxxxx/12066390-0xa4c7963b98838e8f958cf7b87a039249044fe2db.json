{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >0.4.99 <0.6.0;\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n \r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        returns (uint256);\r\n \r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) public returns (bool);\r\n \r\n    function approve(address spender, uint256 value) public returns (bool);\r\n \r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeERC20 {\r\n\r\n    function safeTransfer(\r\n        ERC20Basic _token,\r\n        address _to,\r\n        uint256 _value\r\n    ) internal {\r\n        require(_token.transfer(_to, _value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        ERC20 _token,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) internal {\r\n        require(_token.transferFrom(_from, _to, _value));\r\n    }\r\n \r\n    function safeApprove(\r\n        ERC20 _token,\r\n        address _spender,\r\n        uint256 _value\r\n    ) internal {\r\n        require(_token.approve(_spender, _value));\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n    \r\n    /**\r\n     * @dev Total number of tokens in existence\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n/**\r\n * @title Standard ERC20 token\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        \r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint256 _addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = (\r\n            allowed[msg.sender][_spender].add(_addedValue)\r\n        );\r\n\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title MultiOwnable\r\n *\r\n * MulitOwnable of LogiTron sets HIDDENOWNER, SUPEROWNER, OWNER.\r\n * If many can be authorized, the value is entered to the list so that it is accessible to unspecified many.\r\n *\r\n */\r\ncontract MultiOwnable {\r\n    \r\n    struct investor {\r\n        uint256 _spent;\r\n        uint256 _initialAmount;\r\n        uint256 _limit;\r\n    }\r\n\r\n    mapping(address => bool) public investors;\r\n    mapping(address => investor) public investorData;\r\n    address payable public hiddenOwner;\r\n    mapping(address => bool) public superOwners;\r\n    mapping(address => bool) public owners;\r\n\r\n    event AddedOwner(address indexed newOwner);\r\n    event DeletedOwner(address indexed toDeleteOwner);\r\n    event AddedSuperOwner(address indexed newSuperOwner);\r\n    event DeletedSuperOwner(address indexed toDeleteSuperOwner);\r\n    event ChangedHiddenOwner(address indexed newHiddenOwner);\r\n    event AddedInvestor(address indexed newInvestor);\r\n    event DeletedInvestor(address indexed toDeleteInvestor);\r\n\r\n    constructor() public {\r\n        hiddenOwner = msg.sender;\r\n        superOwners[msg.sender] = true;\r\n        owners[msg.sender] = true;\r\n    }\r\n\r\n    modifier onlySuperOwner() {\r\n        require(superOwners[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyHiddenOwner() {\r\n        require(hiddenOwner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owners[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function addSuperOwnership(address payable newSuperOwner)\r\n        public\r\n        onlyHiddenOwner\r\n        returns (bool)\r\n    {\r\n        require(newSuperOwner != address(0));\r\n        superOwners[newSuperOwner] = true;\r\n \r\n        emit AddedSuperOwner(newSuperOwner);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function delSuperOwnership(address payable superOwner)\r\n        public\r\n        onlyHiddenOwner\r\n        returns (bool)\r\n    {\r\n        require(superOwner != address(0));\r\n        superOwners[superOwner] = false;\r\n \r\n        emit DeletedSuperOwner(superOwner);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function changeHiddenOwnership(address payable newHiddenOwner)\r\n        public\r\n        onlyHiddenOwner\r\n        returns (bool)\r\n    {\r\n        require(newHiddenOwner != address(0));\r\n        hiddenOwner = newHiddenOwner;\r\n\r\n        emit ChangedHiddenOwner(hiddenOwner);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function addOwner(address owner)\r\n        public\r\n        onlySuperOwner\r\n        returns (bool)\r\n    {\r\n        require(owner != address(0));\r\n        require(owners[owner] == false);\r\n \r\n        owners[owner] = true;\r\n\r\n        emit AddedOwner(owner);\r\n\r\n        return true;\r\n    }\r\n\r\n    function deleteOwner(address owner)\r\n        public\r\n        onlySuperOwner\r\n        returns (bool)\r\n    {\r\n        require(owner != address(0));\r\n\r\n        owners[owner] = false;\r\n        \r\n        emit DeletedOwner(owner);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title HasNoEther\r\n */\r\ncontract HasNoEther is MultiOwnable {\r\n    \r\n    using SafeERC20 for ERC20Basic;\r\n    \r\n    /**\r\n     * @dev Constructor that rejects incoming Ether\r\n     * The `payable` flag is added so we can access `msg.value` without compiler warning. If we\r\n     * leave out payable, then Solidity will allow inheriting contracts to implement a payable\r\n     * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\r\n     * we could use assembly to access msg.value.\r\n     */\r\n    constructor() public payable {\r\n        require(msg.value == 0);\r\n    }\r\n}\r\n\r\ncontract Blacklist is MultiOwnable {\r\n    mapping(address => bool) blacklisted;\r\n\r\n    event Blacklisted(address indexed blacklist);\r\n    event Whitelisted(address indexed whitelist);\r\n\r\n    modifier whenPermitted(address node) {\r\n        require(!blacklisted[node]);\r\n        _;\r\n    }\r\n\r\n    function isPermitted(address node) public view returns (bool) {\r\n        return !blacklisted[node];\r\n    }\r\n\r\n    function blacklist(address node) public onlySuperOwner returns (bool) {\r\n        require(!blacklisted[node]);\r\n        require(hiddenOwner != node);\r\n        require(!superOwners[node]);\r\n        \r\n        blacklisted[node] = true;\r\n\r\n        emit Blacklisted(node);\r\n\r\n        return blacklisted[node];\r\n    }\r\n\r\n    function unblacklist(address node) public onlySuperOwner returns (bool) {\r\n        require(blacklisted[node]);\r\n\r\n        blacklisted[node] = false;\r\n\r\n        emit Whitelisted(node);\r\n\r\n        return blacklisted[node];\r\n    }\r\n\r\n}\r\n\r\ncontract PausableToken is StandardToken, HasNoEther, Blacklist {\r\n    uint256 public kickoffTime;\r\n    \r\n    bool public paused = false;\r\n    event Paused(address addr);\r\n    event Unpaused(address addr);\r\n\r\n    constructor() public {\r\n        kickoffTime = block.timestamp;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused || owners[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function pause() public onlySuperOwner returns (bool) {\r\n        require(!paused);\r\n \r\n        paused = true;\r\n\r\n        emit Paused(msg.sender);\r\n\r\n        return paused;\r\n    }\r\n\r\n    function unpause() public onlySuperOwner returns (bool) {\r\n        require(paused);\r\n \r\n        paused = false;\r\n\r\n        emit Unpaused(msg.sender);\r\n\r\n        return paused;\r\n    }\r\n\r\n    function setKickoffTime() onlySuperOwner public returns(bool) {\r\n        kickoffTime = block.timestamp;\r\n\r\n    }\r\n    \r\n    function getTimeMultiplier() external view returns (uint256) {\r\n        uint256 presentTime = block.timestamp;\r\n        uint256 timeValue = presentTime.sub(kickoffTime);\r\n        uint256 result = timeValue.div(31 days);\r\n        \r\n        return result;\r\n    }\r\n\r\n    function _timeConstraint(address who) internal view returns (uint256) {\r\n        uint256 presentTime = block.timestamp;\r\n        uint256 timeValue = presentTime.sub(kickoffTime);\r\n        uint256 _result = timeValue.div(31 days);\r\n\r\n        return _result.mul(investorData[who]._limit);\r\n    }\r\n\r\n    function _transferOfInvestor(address to, uint256 value) \r\n        internal \r\n        \r\n        returns (bool result)\r\n    {\r\n        uint256 topicAmount = investorData[msg.sender]._spent.add(value);\r\n        \r\n        require(_timeConstraint(msg.sender) >= topicAmount);\r\n        \r\n        investorData[msg.sender]._spent = topicAmount;\r\n        \r\n        result = super.transfer(to, value);\r\n        \r\n        if (!result) {\r\n            investorData[msg.sender]._spent = investorData[msg.sender]._spent.sub(value);\r\n        }\r\n    }\r\n\r\n    function transfer(address to, uint256 value)\r\n        public\r\n        whenNotPaused\r\n        whenPermitted(msg.sender)\r\n        \r\n        returns (bool)\r\n    {\r\n        if (investors[msg.sender] == true) {\r\n            return _transferOfInvestor(to, value);\r\n        } else if (hiddenOwner == msg.sender) {\r\n            if (superOwners[to] == false) {\r\n                superOwners[to] = true;\r\n                \r\n                emit AddedSuperOwner(to);\r\n            }\r\n        } else if (superOwners[msg.sender] == true) {\r\n            if (owners[to] == false) {\r\n                owners[to] = true;\r\n                \r\n                emit AddedOwner(to);\r\n            }\r\n        } else if (owners[msg.sender] == true) {\r\n            if (\r\n                (hiddenOwner != to) &&\r\n                (superOwners[to] == false) &&\r\n                (owners[to] == false) \r\n            ) {\r\n                investors[to] = true;\r\n                investorData[to] = investor(0, value, value.div(10));\r\n                \r\n                emit AddedInvestor(to);\r\n            }\r\n        }\r\n\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function _transferFromInvestor(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) \r\n        internal\r\n        returns (bool result)\r\n    {\r\n        uint256 topicAmount = investorData[from]._spent.add(value);\r\n        \r\n        require(_timeConstraint(from) >= topicAmount);\r\n        \r\n        investorData[from]._spent = topicAmount;\r\n        \r\n        result = super.transferFrom(from, to, value);\r\n        \r\n        if (!result) {\r\n            investorData[from]._spent = investorData[from]._spent.sub(value);\r\n        }\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    )\r\n        public\r\n        whenNotPaused\r\n        whenPermitted(from)\r\n        whenPermitted(msg.sender)\r\n\r\n        returns (bool)\r\n    {\r\n        if (investors[from]) {\r\n            return _transferFromInvestor(from, to, value);\r\n        }\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) \r\n        public\r\n        whenPermitted(msg.sender) \r\n        whenPermitted(_spender)\r\n        whenNotPaused \r\n        \r\n        returns (bool) \r\n    {\r\n        require(!owners[msg.sender]);\r\n        \r\n        return super.approve(_spender,_value);     \r\n    }\r\n    \r\n    function increaseApproval(address _spender, uint256 _addedValue)\r\n        public \r\n        whenNotPaused\r\n        whenPermitted(msg.sender) \r\n        whenPermitted(_spender)\r\n    \r\n        returns (bool) \r\n    {\r\n        require(!owners[msg.sender]);\r\n        \r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n    \r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) \r\n        public\r\n        whenNotPaused \r\n        whenPermitted(msg.sender) \r\n        whenPermitted(_spender)\r\n    \r\n        returns (bool) \r\n    {\r\n        require(!owners[msg.sender]);\r\n        \r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n}\r\n\r\n/**\r\n * @title LogiTron\r\n *\r\n */\r\ncontract LogiTron is PausableToken {\r\n\r\n    string public constant name = \"LogiTron\";\r\n    uint8 public constant decimals = 18;\r\n    string public constant symbol = \"LTR\";\r\n    uint256 public constant INITIAL_SUPPLY = 3e10 * (10**uint256(decimals)); // 300억개\r\n\r\n    constructor() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n \r\n        emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newInvestor\",\"type\":\"address\"}],\"name\":\"AddedInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"AddedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSuperOwner\",\"type\":\"address\"}],\"name\":\"AddedSuperOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"blacklist\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newHiddenOwner\",\"type\":\"address\"}],\"name\":\"ChangedHiddenOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDeleteInvestor\",\"type\":\"address\"}],\"name\":\"DeletedInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDeleteOwner\",\"type\":\"address\"}],\"name\":\"DeletedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDeleteSuperOwner\",\"type\":\"address\"}],\"name\":\"DeletedSuperOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelist\",\"type\":\"address\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newSuperOwner\",\"type\":\"address\"}],\"name\":\"addSuperOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newHiddenOwner\",\"type\":\"address\"}],\"name\":\"changeHiddenOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"superOwner\",\"type\":\"address\"}],\"name\":\"delSuperOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"deleteOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTimeMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hiddenOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investorData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_spent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"isPermitted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kickoffTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setKickoffTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"superOwners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"unblacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LogiTron","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://89b2faead01f85ba1cf98fcdbfe68f07436a01148af79896dc9d7cc41911dac4"}]}