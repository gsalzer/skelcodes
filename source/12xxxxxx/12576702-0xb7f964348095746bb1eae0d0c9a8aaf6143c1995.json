{"status":"1","message":"OK","result":[{"SourceCode":"{\"CoinvestingDeFiLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\nimport \\\"./ICoinvestingDeFiPair.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary CoinvestingDeFiLibrary {\\n    using SafeMath for uint;\\n    // Internal functions that are view\\n    function getAmountsIn(\\n        address factory,\\n        uint amountOut,\\n        address[] memory path\\n    )\\n    internal\\n    view\\n    returns (uint[] memory amounts)\\n    {\\n        require(path.length \\u003e= 2, \\u0027LIB: INV_P\\u0027);\\n        amounts = new uint[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint i = path.length - 1; i \\u003e 0; i--) {\\n            (uint reserveIn, uint reserveOut) = getReserves(\\n                factory, \\n                path[i - 1], \\n                path[i]\\n            );\\n            amounts[i - 1] = getAmountIn(\\n                amounts[i],\\n                reserveIn,\\n                reserveOut\\n            );\\n        }\\n    }\\n\\n    function getAmountsOut(\\n        address factory,\\n        uint amountIn,\\n        address[] memory path\\n    )\\n    internal\\n    view\\n    returns (uint[] memory amounts)\\n    {\\n        require(path.length \\u003e= 2, \\u0027LIB: INV_P\\u0027);\\n        amounts = new uint[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint i; i \\u003c path.length - 1; i++) {\\n            (uint reserveIn, uint reserveOut) = getReserves(\\n                factory, \\n                path[i], \\n                path[i + 1]\\n            );\\n            amounts[i + 1] = getAmountOut(\\n                amounts[i],\\n                reserveIn,\\n                reserveOut\\n            );\\n        }\\n    }\\n\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    )\\n    internal\\n    view\\n    returns (\\n        uint reserveA,\\n        uint reserveB\\n    )\\n    {\\n        (address token0,) = sortTokens(tokenA, tokenB);\\n        (uint reserve0, uint reserve1,) = ICoinvestingDeFiPair(pairFor(\\n            factory,\\n            tokenA,\\n            tokenB\\n        )).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // Internal functions that are pure\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn,\\n        uint reserveOut\\n    )\\n    internal\\n    pure\\n    returns (uint amountIn)\\n    {\\n        require(amountOut \\u003e 0, \\u0027LIB: INSUF_OUT_AMT\\u0027);\\n        require(reserveIn \\u003e 0 \\u0026\\u0026 reserveOut \\u003e 0, \\u0027LIB: INSUF_LIQ\\u0027);\\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n    \\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn,\\n        uint reserveOut\\n    )\\n    internal\\n    pure\\n    returns (uint amountOut)\\n    {\\n        require(amountIn \\u003e 0, \\u0027LIB: INSUF_IN_AMT\\u0027);\\n        require(reserveIn \\u003e 0 \\u0026\\u0026 reserveOut \\u003e 0, \\u0027LIB: INSUF_LIQ\\u0027);\\n        uint amountInWithFee = amountIn.mul(997);\\n        uint numerator = amountInWithFee.mul(reserveOut);\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    )\\n    internal\\n    pure\\n    returns (address pair) \\n    {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\\n                hex\\u0027ff\\u0027,\\n                factory,\\n                keccak256(abi.encodePacked(token0, token1)),\\n                hex\\u0027f414eaf687b005cd1d29be0b74430bb3d59f939715b3abbbb07af574ca27e22e\\u0027 // init code hash\\n        )))));\\n    }\\n\\n    function quote(\\n        uint amountA,\\n        uint reserveA,\\n        uint reserveB\\n    )\\n    internal\\n    pure\\n    returns (uint amountB)\\n    {\\n        require(amountA \\u003e 0, \\u0027LIB: INSUF_AMT\\u0027);\\n        require(reserveA \\u003e 0 \\u0026\\u0026 reserveB \\u003e 0, \\u0027LIB: INSUF_LIQ\\u0027);\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    function sortTokens(\\n        address tokenA,\\n        address tokenB\\n    )\\n    internal\\n    pure\\n    returns (\\n        address token0,\\n        address token1\\n    )\\n    {\\n        require(tokenA != tokenB, \\u0027LIB: IDT_ADDR\\u0027);\\n        (token0, token1) = tokenA \\u003c tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\u0027LIB: ZERO_ADDR\\u0027);\\n    }\\n}\\n\"},\"CoinvestingDeFiRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\nimport \\\"./ICoinvestingDeFiFactory.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\u0027./SafeMath.sol\\u0027;\\nimport \\\"./ICoinvestingDeFiRouter.sol\\\";\\nimport \\\"./IWETH.sol\\\";\\nimport \\\"./CoinvestingDeFiLibrary.sol\\\";\\nimport \\\"./TransferHelper.sol\\\";\\n\\ncontract CoinvestingDeFiRouter is ICoinvestingDeFiRouter {\\n    using SafeMath for uint;\\n    // Variables\\n    address public immutable override factory;\\n    address public immutable override WETH;\\n    \\n    // Modifiers\\n    modifier ensure(uint deadline) {\\n        require(deadline \\u003e= block.timestamp, \\\"RTR: EXPD\\\");\\n        _;\\n    }\\n\\n    // Constructor\\n    constructor(address _factory, address _WETH) {\\n        factory = _factory;\\n        WETH = _WETH;\\n    }\\n\\n    // Receive function\\n    receive() external payable {\\n        // only accept ETH via fallback from the WETH contract\\n        assert(msg.sender == WETH); \\n    }\\n\\n    // External functions\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    )\\n    external\\n    virtual\\n    override\\n    ensure(deadline)\\n    returns (\\n        uint amountA,\\n        uint amountB,\\n        uint liquidity\\n    )\\n    {\\n        (amountA, amountB) = _addLiquidity(\\n            tokenA,\\n            tokenB,\\n            amountADesired,\\n            amountBDesired,\\n            amountAMin,\\n            amountBMin\\n        );\\n\\n        address pair = CoinvestingDeFiLibrary.pairFor(\\n            factory,\\n            tokenA,\\n            tokenB\\n        );\\n        \\n        TransferHelper.safeTransferFrom(\\n            tokenA,\\n            msg.sender,\\n            pair,\\n            amountA\\n        );\\n\\n        TransferHelper.safeTransferFrom(\\n            tokenB,\\n            msg.sender,\\n            pair,\\n            amountB\\n        );\\n\\n        liquidity = ICoinvestingDeFiPair(pair).mint(to);\\n    }\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    )\\n    external\\n    virtual\\n    override\\n    payable\\n    ensure(deadline)\\n    returns (\\n        uint amountToken,\\n        uint amountETH,\\n        uint liquidity\\n    )\\n    {\\n        (amountToken, amountETH) = _addLiquidity(\\n            token,\\n            WETH,\\n            amountTokenDesired,\\n            msg.value,\\n            amountTokenMin,\\n            amountETHMin\\n        );\\n\\n        address pair = CoinvestingDeFiLibrary.pairFor(\\n            factory,\\n            token,\\n            WETH\\n        );\\n\\n        TransferHelper.safeTransferFrom(\\n            token,\\n            msg.sender,\\n            pair,\\n            amountToken\\n        );\\n\\n        IWETH(WETH).deposit{value: amountETH}();\\n        assert(IWETH(WETH).transfer(\\n                pair,\\n                amountETH\\n            )\\n        );\\n\\n        liquidity = ICoinvestingDeFiPair(pair).mint(to);        \\n        if (msg.value \\u003e amountETH) {\\n            TransferHelper.safeTransferETH(\\n                msg.sender,\\n                msg.value - amountETH\\n            );\\n        }\\n    }\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n    external\\n    virtual\\n    override\\n    returns (\\n        uint amountToken,\\n        uint amountETH\\n    )\\n    {\\n        address pair = CoinvestingDeFiLibrary.pairFor(\\n            factory,\\n            token,\\n            WETH\\n        );\\n\\n        uint value = approveMax ? type(uint).max : liquidity;\\n        ICoinvestingDeFiPair(pair).permit(\\n            msg.sender,\\n            address(this),\\n            value,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        (amountToken, amountETH) = removeLiquidityETH(\\n            token,\\n            liquidity,\\n            amountTokenMin,\\n            amountETHMin,\\n            to,\\n            deadline\\n        );\\n    }\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n    external\\n    virtual\\n    override\\n    returns (uint amountETH)\\n    {\\n        address pair = CoinvestingDeFiLibrary.pairFor(\\n            factory,\\n            token,\\n            WETH\\n        );\\n\\n        uint value = approveMax ? type(uint).max : liquidity;\\n        ICoinvestingDeFiPair(pair).permit(\\n            msg.sender,\\n            address(this),\\n            value,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n        \\n        amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\\n            token,\\n            liquidity,\\n            amountTokenMin,\\n            amountETHMin,\\n            to,\\n            deadline\\n        );\\n    }\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n    external\\n    virtual\\n    override\\n    returns (\\n        uint amountA,\\n        uint amountB\\n    )\\n    {\\n        address pair = CoinvestingDeFiLibrary.pairFor(\\n            factory,\\n            tokenA,\\n            tokenB\\n        );\\n\\n        uint value = approveMax ? type(uint).max : liquidity;\\n        ICoinvestingDeFiPair(pair).permit(\\n            msg.sender,\\n            address(this),\\n            value,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        (amountA, amountB) = removeLiquidity(\\n            tokenA,\\n            tokenB,\\n            liquidity,\\n            amountAMin,\\n            amountBMin,\\n            to,\\n            deadline\\n        );\\n    }\\n\\n    function swapETHForExactTokens(\\n        uint amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    )\\n    external\\n    virtual\\n    override\\n    payable\\n    ensure(deadline)\\n    returns (uint[] memory amounts)\\n    {\\n        require(path[0] == WETH, \\\"RTR: INV_P\\\");\\n        amounts = CoinvestingDeFiLibrary.getAmountsIn(\\n            factory,\\n            amountOut,\\n            path\\n        );\\n\\n        require(amounts[0] \\u003c= msg.value, \\\"RTR: XS_IN_AMT\\\");\\n        IWETH(WETH).deposit{value: amounts[0]}();\\n        assert(IWETH(WETH).transfer(\\n                CoinvestingDeFiLibrary.pairFor(\\n                    factory,\\n                    path[0],\\n                    path[1]\\n                ),\\n                amounts[0]\\n            )\\n        );\\n\\n        _swap(\\n            amounts,\\n            path,\\n            to\\n        );\\n\\n        if (msg.value \\u003e amounts[0]) {\\n            TransferHelper.safeTransferETH(\\n                msg.sender,\\n                msg.value - amounts[0]\\n            );\\n        }            \\n    }\\n\\n    function swapExactETHForTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        virtual\\n        override\\n        payable\\n        ensure(deadline)\\n        returns (uint[] memory amounts)\\n    {\\n        require(path[0] == WETH, \\\"RTR: INV_P\\\");\\n        amounts = CoinvestingDeFiLibrary.getAmountsOut(\\n            factory,\\n            msg.value,\\n            path\\n        );\\n        require(amounts[amounts.length - 1] \\u003e= amountOutMin, \\\"RTR: INSUF_OUT_AMT\\\");\\n        \\n        IWETH(WETH).deposit{value: amounts[0]}();\\n        assert(IWETH(WETH).transfer(\\n                CoinvestingDeFiLibrary.pairFor(\\n                    factory,\\n                    path[0],\\n                    path[1]\\n                ),\\n                amounts[0]\\n            )\\n        );\\n\\n        _swap(\\n            amounts,\\n            path,\\n            to\\n        );\\n    }\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    )\\n    external\\n    virtual\\n    override\\n    payable\\n    ensure(deadline)\\n    {\\n        require(path[0] == WETH, \\\"RTR: INV_P\\\");\\n        uint amountIn = msg.value;\\n        IWETH(WETH).deposit{value: amountIn}();\\n        assert(IWETH(WETH).transfer(\\n                CoinvestingDeFiLibrary.pairFor(\\n                    factory,\\n                    path[0],\\n                    path[1]\\n                ), \\n                amountIn\\n            )\\n        );\\n        \\n        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\\n        _swapSupportingFeeOnTransferTokens(\\n            path,\\n            to\\n        );\\n\\n        require(IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) \\u003e= amountOutMin, \\\"RTR: INSUF_OUT_AMT\\\");\\n    }\\n\\n    function swapExactTokensForETH(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    )\\n    external\\n    virtual\\n    override\\n    ensure(deadline)\\n    returns (uint[] memory amounts)\\n    {\\n        require(path[path.length - 1] == WETH, \\\"RTR: INV_P\\\");\\n        amounts = CoinvestingDeFiLibrary.getAmountsOut(\\n            factory,\\n            amountIn,\\n            path\\n        );\\n\\n        require(amounts[amounts.length - 1] \\u003e= amountOutMin, \\\"RTR: INSUF_OUT_AMT\\\");\\n\\n        TransferHelper.safeTransferFrom(\\n            path[0],\\n            msg.sender,\\n            CoinvestingDeFiLibrary.pairFor(\\n                factory,\\n                path[0],\\n                path[1]\\n            ),\\n            amounts[0]\\n        );\\n\\n        _swap(\\n            amounts,\\n            path,\\n            address(this)\\n        );\\n\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n        TransferHelper.safeTransferETH(\\n            to,\\n            amounts[amounts.length - 1]\\n        );\\n    }\\n    \\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    )\\n    external\\n    virtual\\n    override\\n    ensure(deadline)\\n    {\\n        require(path[path.length - 1] == WETH, \\\"RTR: INV_P\\\");\\n        TransferHelper.safeTransferFrom(\\n            path[0],\\n            msg.sender,\\n            CoinvestingDeFiLibrary.pairFor(\\n                factory,\\n                path[0],\\n                path[1]\\n            ),\\n            amountIn\\n        );\\n\\n        _swapSupportingFeeOnTransferTokens(\\n            path,\\n            address(this)\\n        );\\n        \\n        uint amountOut = IERC20(WETH).balanceOf(address(this));\\n        require(amountOut \\u003e= amountOutMin, \\\"RTR: INSUF_OUT_AMT\\\");\\n\\n        IWETH(WETH).withdraw(amountOut);\\n        TransferHelper.safeTransferETH(\\n            to,\\n            amountOut\\n        );\\n    }\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    )\\n    external\\n    virtual\\n    override\\n    ensure(deadline)\\n    returns (uint[] memory amounts) \\n    {\\n        amounts = CoinvestingDeFiLibrary.getAmountsOut(\\n            factory,\\n            amountIn,\\n            path\\n        );\\n\\n        require(amounts[amounts.length - 1] \\u003e= amountOutMin, \\\"RTR: INSUF_OUT_AMT\\\");\\n        \\n        TransferHelper.safeTransferFrom(\\n            path[0],\\n            msg.sender,\\n            CoinvestingDeFiLibrary.pairFor(\\n                factory,\\n                path[0],\\n                path[1]\\n            ), \\n            amounts[0]\\n        );\\n\\n        _swap(\\n            amounts,\\n            path,\\n            to\\n        );\\n    }\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    )\\n    external\\n    virtual\\n    override\\n    ensure(deadline)\\n    {\\n        TransferHelper.safeTransferFrom(\\n            path[0],\\n            msg.sender,\\n            CoinvestingDeFiLibrary.pairFor(\\n                factory,\\n                path[0],\\n                path[1]\\n            ),\\n            amountIn\\n        );\\n\\n        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\\n        _swapSupportingFeeOnTransferTokens(\\n            path,\\n            to\\n        );\\n\\n        require(IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) \\u003e= amountOutMin, \\\"RTR: INSUF_OUT_AMT\\\");\\n    }\\n\\n    function swapTokensForExactETH(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    )\\n    external\\n    virtual\\n    override\\n    ensure(deadline)\\n    returns (uint[] memory amounts)\\n    {\\n        require(path[path.length - 1] == WETH, \\\"RTR: INV_P\\\");\\n        amounts = CoinvestingDeFiLibrary.getAmountsIn(\\n            factory,\\n            amountOut,\\n            path\\n        );\\n\\n        require(amounts[0] \\u003c= amountInMax, \\\"RTR: XS_IN_AMT\\\");\\n        TransferHelper.safeTransferFrom(\\n            path[0],\\n            msg.sender,\\n            CoinvestingDeFiLibrary.pairFor(\\n                factory,\\n                path[0],\\n                path[1]\\n            ),\\n            amounts[0]\\n        );\\n\\n        _swap(\\n            amounts,\\n            path,\\n            address(this)\\n        );\\n\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n        TransferHelper.safeTransferETH(\\n            to,\\n            amounts[amounts.length - 1]\\n        );\\n    }\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    )\\n    external\\n    virtual\\n    override\\n    ensure(deadline)\\n    returns (uint[] memory amounts)\\n    {\\n        amounts = CoinvestingDeFiLibrary.getAmountsIn(\\n            factory,\\n            amountOut,\\n            path\\n        );\\n\\n        require(amounts[0] \\u003c= amountInMax, \\\"RTR: XS_IN_AMT\\\");\\n        TransferHelper.safeTransferFrom(\\n            path[0],\\n            msg.sender,\\n            CoinvestingDeFiLibrary.pairFor(\\n                factory,\\n                path[0],\\n                path[1]\\n            ),\\n            amounts[0]\\n        );\\n\\n        _swap(\\n            amounts,\\n            path,\\n            to\\n        );\\n    }\\n\\n    // Public functions\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    )\\n    public\\n    virtual\\n    override\\n    ensure(deadline)\\n    returns (\\n        uint amountA,\\n        uint amountB\\n    )\\n    {\\n        address pair = CoinvestingDeFiLibrary.pairFor(\\n            factory,\\n            tokenA,\\n            tokenB\\n        );\\n\\n        ICoinvestingDeFiPair(pair).transferFrom(\\n            msg.sender,\\n            pair,\\n            liquidity\\n        );\\n\\n        (uint amount0, uint amount1) = ICoinvestingDeFiPair(pair).burn(to);\\n        (address token0,) = CoinvestingDeFiLibrary.sortTokens(\\n            tokenA,\\n            tokenB\\n        );\\n\\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\\n        require(amountA \\u003e= amountAMin, \\\"RTR: INSUF_A_AMT\\\");\\n        require(amountB \\u003e= amountBMin, \\\"RTR: INSUF_B_AMT\\\");\\n    }\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    )\\n    public\\n    virtual\\n    override\\n    ensure(deadline)\\n    returns (\\n        uint amountToken,\\n        uint amountETH\\n    ) \\n    {\\n        (amountToken, amountETH) = removeLiquidity(\\n            token,\\n            WETH,\\n            liquidity,\\n            amountTokenMin,\\n            amountETHMin,\\n            address(this),\\n            deadline\\n        );\\n\\n        TransferHelper.safeTransfer(\\n            token,\\n            to,\\n            amountToken\\n        );\\n\\n        IWETH(WETH).withdraw(amountETH);\\n        TransferHelper.safeTransferETH(\\n            to,\\n            amountETH\\n        );\\n    }\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    )\\n    public\\n    virtual\\n    override\\n    ensure(deadline)\\n    returns (uint amountETH)\\n    {\\n        (, amountETH) = removeLiquidity(\\n            token,\\n            WETH,\\n            liquidity,\\n            amountTokenMin,\\n            amountETHMin,\\n            address(this),\\n            deadline\\n        );\\n\\n        TransferHelper.safeTransfer(\\n            token,\\n            to,\\n            IERC20(token).balanceOf(address(this))\\n        );\\n\\n        IWETH(WETH).withdraw(amountETH);\\n        TransferHelper.safeTransferETH(\\n            to,\\n            amountETH\\n        );\\n    }\\n\\n    // Internal functions\\n    function _addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin\\n    )\\n    internal\\n    virtual\\n    returns (\\n        uint amountA,\\n        uint amountB\\n    )\\n    {\\n        if (ICoinvestingDeFiFactory(factory).getPair(tokenA, tokenB) == address(0)) {\\n            ICoinvestingDeFiFactory(factory).createPair(tokenA, tokenB);\\n        }\\n            \\n        (uint reserveA, uint reserveB) = CoinvestingDeFiLibrary.getReserves(\\n            factory,\\n            tokenA,\\n            tokenB\\n        );\\n\\n        if (reserveA == 0 \\u0026\\u0026 reserveB == 0) {\\n            (amountA, amountB) = (amountADesired, amountBDesired);\\n        } else {\\n            uint amountBOptimal = CoinvestingDeFiLibrary.quote(\\n                amountADesired,\\n                reserveA,\\n                reserveB\\n            );\\n            if (amountBOptimal \\u003c= amountBDesired) {\\n                require(amountBOptimal \\u003e= amountBMin, \\\"RTR: INSUF_B_AMT\\\");\\n                (amountA, amountB) = (amountADesired, amountBOptimal);\\n            } else {\\n                uint amountAOptimal = CoinvestingDeFiLibrary.quote(\\n                    amountBDesired,\\n                    reserveB,\\n                    reserveA\\n                );\\n                assert(amountAOptimal \\u003c= amountADesired);\\n                require(amountAOptimal \\u003e= amountAMin, \\\"RTR: INSUF_A_AMT\\\");\\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\\n            }\\n        }\\n    }\\n\\n    function _swap(\\n        uint[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    )\\n    internal\\n    virtual\\n    {\\n        for (uint i; i \\u003c path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0,) = CoinvestingDeFiLibrary.sortTokens(input, output);\\n            uint amountOut = amounts[i + 1];\\n            (uint amount0Out, uint amount1Out) = \\n                input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\\n\\n            address to = \\n                i \\u003c path.length - 2 ? \\n                CoinvestingDeFiLibrary.pairFor(factory, output, path[i + 2]) : _to;\\n\\n            ICoinvestingDeFiPair(CoinvestingDeFiLibrary.pairFor(\\n                    factory,\\n                    input,\\n                    output\\n                )\\n            ).swap(\\n                amount0Out,\\n                amount1Out,\\n                to,\\n                new bytes(0)\\n            );\\n        }\\n    }\\n\\n    function _swapSupportingFeeOnTransferTokens(\\n        address[] memory path,\\n        address _to\\n    )\\n    internal\\n    virtual\\n    {\\n        for (uint i; i \\u003c path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0,) = CoinvestingDeFiLibrary.sortTokens(input, output);\\n            ICoinvestingDeFiPair pair = ICoinvestingDeFiPair(CoinvestingDeFiLibrary.pairFor(\\n                    factory,\\n                    input,\\n                    output\\n                )\\n            );\\n\\n            uint amountInput;\\n            uint amountOutput;\\n            {\\n                (uint reserve0, uint reserve1,) = pair.getReserves();\\n                (uint reserveInput, uint reserveOutput) = \\n                    input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n                \\n                amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);\\n                amountOutput = CoinvestingDeFiLibrary.getAmountOut(\\n                    amountInput,\\n                    reserveInput,\\n                    reserveOutput\\n                );\\n            }\\n\\n            (uint amount0Out, uint amount1Out) = \\n                input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\\n            \\n            address to = \\n                i \\u003c path.length - 2 ? \\n                CoinvestingDeFiLibrary.pairFor(factory, output, path[i + 2]) : _to;\\n            \\n            pair.swap(\\n                amount0Out,\\n                amount1Out,\\n                to,\\n                new bytes(0)\\n            );\\n        }\\n    }\\n\\n    // Public functions that are view\\n    function getAmountsIn(\\n        uint amountOut,\\n        address[] memory path\\n    )\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint[] memory amounts)\\n    {\\n        return CoinvestingDeFiLibrary.getAmountsIn(\\n            factory,\\n            amountOut,\\n            path\\n        );\\n    }\\n\\n    function getAmountsOut(\\n        uint amountIn,\\n        address[] memory path\\n    )\\n    public \\n    view\\n    virtual\\n    override\\n    returns (uint[] memory amounts)\\n    {\\n        return CoinvestingDeFiLibrary.getAmountsOut(\\n            factory,\\n            amountIn,\\n            path\\n        );\\n    }\\n\\n    // Public functions that are pure\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn,\\n        uint reserveOut\\n    )\\n    public\\n    pure\\n    virtual\\n    override\\n    returns (uint amountIn)\\n    {\\n        return CoinvestingDeFiLibrary.getAmountIn(\\n            amountOut,\\n            reserveIn,\\n            reserveOut\\n        );\\n    }\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) \\n    public\\n    pure\\n    virtual\\n    override\\n    returns (uint amountOut)\\n    {\\n        return CoinvestingDeFiLibrary.getAmountOut(\\n            amountIn,\\n            reserveIn,\\n            reserveOut\\n        );\\n    }\\n\\n    function quote(\\n        uint amountA,\\n        uint reserveA,\\n        uint reserveB\\n    )\\n    public\\n    pure\\n    virtual\\n    override\\n    returns (uint amountB)\\n    {\\n        return CoinvestingDeFiLibrary.quote(\\n            amountA,\\n            reserveA,\\n            reserveB\\n        );\\n    }\\n}\\n\"},\"ICoinvestingDeFiERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\ninterface ICoinvestingDeFiERC20 {\\n    // Events\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint value\\n    );\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint value\\n    );\\n\\n    // External functions\\n    function approve(\\n        address spender,\\n        uint value\\n    )\\n        external \\n        returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint value,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        external;\\n    \\n    function transfer(\\n        address to,\\n        uint value\\n    )\\n        external\\n        returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint value\\n    )\\n        external\\n        returns (bool);\\n    \\n    // External functions that are view        \\n    function allowance(\\n        address owner,\\n        address spender\\n    )\\n        external \\n        view \\n        returns (uint);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n    function totalSupply() external view returns (uint);\\n\\n    // External functions that are pure\\n    function decimals() external pure returns (uint8);\\n    function name() external pure returns (string memory);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function symbol() external pure returns (string memory);\\n}\\n\"},\"ICoinvestingDeFiFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\ninterface ICoinvestingDeFiFactory {\\n    //Events\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint\\n    );\\n\\n    //External functions\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    )\\n    external\\n    returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n\\n    // External functions that are view\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n    function getPair(\\n        address tokenA,\\n        address tokenB\\n    )\\n    external\\n    view\\n    returns (address pair);\\n}\\n\"},\"ICoinvestingDeFiPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\nimport \\\"./ICoinvestingDeFiERC20.sol\\\";\\n\\ninterface ICoinvestingDeFiPair is ICoinvestingDeFiERC20 {\\n    // Events\\n    event Burn(\\n        address indexed sender,\\n        uint amount0,\\n        uint amount1,\\n        address indexed to\\n    );\\n\\n    event Mint(\\n        address indexed sender,\\n        uint amount0,\\n        uint amount1\\n    );\\n\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n\\n    event Sync(\\n        uint112 reserve0, \\n        uint112 reserve1\\n    );\\n\\n    // External functions\\n    function burn(address to) external returns (\\n        uint amount0,\\n        uint amount1\\n    );\\n\\n    function initialize(\\n        address,\\n        address\\n    ) external;\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function skim(address to) external;\\n    function swap(\\n        uint amount0Out,\\n        uint amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function sync() external;\\n\\n    // External functions that are view\\n    function factory() external view returns (address);\\n    function getReserves() external view returns (\\n        uint112 reserve0,\\n        uint112 reserve1,\\n        uint32 blockTimestampLast\\n    );\\n\\n    function kLast() external view returns (uint);    \\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    \\n\\n    // External functions that are pure\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n}\\n\"},\"ICoinvestingDeFiRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\ninterface ICoinvestingDeFiRouter {\\n    // External functions\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    )\\n    external\\n    returns (\\n        uint amountA,\\n        uint amountB,\\n        uint liquidity\\n    );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    )\\n    external\\n    payable\\n    returns (\\n        uint amountToken,\\n        uint amountETH,\\n        uint liquidity\\n    );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    )\\n    external\\n    returns (\\n        uint amountA,\\n        uint amountB\\n    );\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    )\\n    external\\n    returns (\\n        uint amountToken,\\n        uint amountETH\\n    );\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    )\\n    external\\n    returns (uint amountETH);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n    external\\n    returns (\\n        uint amountToken,\\n        uint amountETH\\n    );\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n    external\\n    returns (uint amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n    external\\n    returns (\\n        uint amountA,\\n        uint amountB\\n    );\\n\\n    function swapETHForExactTokens(\\n        uint amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    )\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint amountOutMin, \\n        address[] calldata path, \\n        address to, \\n        uint deadline\\n    )\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) \\n    external \\n    payable;\\n\\n    function swapExactTokensForETH(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    )\\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) \\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapTokensForExactETH(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    )\\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    )\\n    external\\n    returns (uint[] memory amounts);\\n\\n    // External functions that are view\\n    function factory() external view returns (address);\\n\\n    function getAmountsIn(\\n        uint amountOut,\\n        address[] calldata path\\n    )\\n    external\\n    view\\n    returns (uint[] memory amounts);\\n\\n    function getAmountsOut(\\n        uint amountIn,\\n        address[] calldata path\\n    )\\n    external \\n    view \\n    returns (uint[] memory amounts);\\n\\n    function WETH() external view returns (address);\\n\\n    // External functions that are pure\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn,\\n        uint reserveOut\\n    )\\n    external\\n    pure\\n    returns (uint amountIn);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) \\n    external\\n    pure \\n    returns (uint amountOut);\\n\\n    function quote(\\n        uint amountA,\\n        uint reserveA,\\n        uint reserveB\\n    )\\n    external\\n    pure\\n    returns (uint amountB);\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\ninterface IERC20 {\\n    //Events\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint value\\n    );\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint value\\n    );\\n\\n    //External functions\\n    function approve(\\n        address spender,\\n        uint value\\n    )\\n        external \\n        returns (bool);\\n    \\n    function transfer(\\n        address to,\\n        uint value\\n    )\\n        external\\n        returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint value\\n    )\\n        external\\n        returns (bool);\\n    \\n    // External functions that are view        \\n    function allowance(\\n        address owner,\\n        address spender\\n    )\\n        external \\n        view \\n        returns (uint);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n    function decimals() external view returns (uint8);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function totalSupply() external view returns (uint);\\n}\\n\"},\"IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\ninterface IWETH {\\n    // External functions\\n    function deposit() external payable;\\n    function transfer(\\n        address to,\\n        uint value\\n    )\\n        external\\n        returns (bool);\\n\\n    function withdraw(uint) external;\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler\\u0027s built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c \\u003c a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b \\u003e a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n            // benefit is lost if \\u0027b\\u0027 is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003c= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"},\"TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n/// helper methods for interacting with ERC20 tokens and \\n/// sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    )\\n    internal\\n    {\\n        // bytes4(keccak256(bytes(\\u0027approve(address,uint256)\\u0027)));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    )\\n    internal\\n    {\\n        // bytes4(keccak256(bytes(\\u0027transfer(address,uint256)\\u0027)));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n\\n    function safeTransferETH(\\n        address to,\\n        uint256 value\\n    )\\n    internal\\n    {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success);\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    )\\n    internal\\n    {\\n        // bytes4(keccak256(bytes(\\u0027transferFrom(address,address,uint256)\\u0027)));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETHSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETHSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CoinvestingDeFiRouter","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"000000000000000000000000fc4516a7b8236bad1b8dbb582d3830dfdd302625000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://429608e6a2a06d766af0d452e1b91f9bd9b4409d6e7f8037e95f5a37847b9093"}]}