{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\n/// split.sol -- splits funds sent to this contract\r\n\r\n// Copyright (C) 2021 HDSplit\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address) external view returns (uint256);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n}\r\n\r\ncontract HDSplit {\r\n    address immutable public dai;\r\n    uint256 public debt;\r\n    uint256 public limit;\r\n    address payable[] public folks;\r\n    uint256[] public bps;\r\n\r\n    // token->total\r\n    mapping (address => uint256) public total;\r\n\r\n    // folk[i]->token->balance\r\n    mapping (address => mapping (address => uint256)) public balance;\r\n\r\n    // folks[i]->folk[i]->owe: DAI amount owed per person\r\n    // A       ->B      ->owe: B owes A owe DAI\r\n    mapping (address => mapping (address => uint256)) public owe;\r\n\r\n    // auth\r\n    mapping (address => uint256) public wards;\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"HDSplit/not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // events\r\n    event Push();\r\n    event Rely(address indexed usr);\r\n    event Comp(address indexed sender, address indexed recipient, uint256 amt);\r\n    event Sent(address indexed guy, address indexed gem, uint256 amt);\r\n    event Receive(address indexed guy, uint256 amt);\r\n\r\n    // math\r\n    uint256 THOUSAND = 10 ** 4;\r\n    function add(uint256 _x, uint256 _y) internal pure returns (uint256 _z) {\r\n        require((_z = _x + _y) >= _x);\r\n    }\r\n    function sub(uint256 _x, uint256 _y) internal pure returns (uint256 _z) {\r\n        require((_z = _x - _y) <= _x);\r\n    }\r\n    function mul(uint256 _x, uint256 _y) internal pure returns (uint256 _z) {\r\n        require(_y == 0 || (_z = _x * _y) / _y == _x);\r\n    }\r\n\r\n    constructor(\r\n        address _dai,\r\n        uint256 _limit,\r\n        address payable[] memory _folks,\r\n        uint256[] memory _bps\r\n    ) public {\r\n        require(_folks.length == _bps.length, \"HDSplit/length-must-match\");\r\n\r\n        uint256 _total;\r\n\r\n        for (uint256 i = 0; i < _folks.length; i++) {\r\n            _total = add(_total, _bps[i]);\r\n            folks.push(_folks[i]);\r\n            bps.push(_bps[i]);\r\n            wards[_folks[i]] = 1;\r\n            emit Rely(_folks[i]);\r\n        }\r\n        require(_total == 10000, \"HDSplit/basis-points-must-total-10000\");\r\n\r\n        dai   = _dai;\r\n        limit = _limit;\r\n    }\r\n\r\n    receive() external payable {\r\n        emit Receive(msg.sender, msg.value);\r\n    }\r\n\r\n    function tell(uint256 _wad) external auth {\r\n        require(dai != address(0), \"HDSplit/no-compensation-plan\");\r\n\r\n        address payable[] memory _folks = folks;\r\n\r\n        for (uint256 i = 0; i < _folks.length; i++) {\r\n            if (msg.sender != _folks[i]) {\r\n                uint256 _amt = mul(_wad, bps[i]) / THOUSAND;\r\n                debt = add(debt, _amt);\r\n                owe[msg.sender][_folks[i]] = add(\r\n                    owe[msg.sender][_folks[i]], _amt\r\n                );\r\n            }\r\n        }\r\n\r\n        require(debt <= limit, \"HDSplit/over-debt-limit\");\r\n    }\r\n\r\n    function take() external {\r\n        take(address(0));\r\n    }\r\n\r\n    function take(address _token) public auth {\r\n        uint256 _moar;\r\n        address payable[] memory _folks = folks;\r\n\r\n        if (_token == address(0)) {\r\n            _moar = sub(address(this).balance, total[_token]);\r\n        } else {\r\n            _moar = sub(IERC20(_token).balanceOf(address(this)), total[_token]);\r\n        }\r\n\r\n        if (_moar > 0) {\r\n            total[_token] = add(total[_token], _moar);\r\n\r\n            // figure out everyong's amounts\r\n            for (uint256 i = 0; i < _folks.length; i++) {\r\n                balance[_folks[i]][_token] = add(\r\n                    balance[_folks[i]][_token],\r\n                    mul(_moar, bps[i]) / THOUSAND\r\n                );\r\n            }\r\n        }\r\n\r\n        // pay expenses\r\n        for (uint256 i = 0; i < _folks.length; i++) {\r\n            comp(_folks[i]);\r\n        }\r\n\r\n        send(_token);\r\n\r\n        emit Push();\r\n    }\r\n\r\n    function send(address _token) internal {\r\n        uint256 _amt = balance[msg.sender][_token];\r\n        balance[msg.sender][_token] = 0;\r\n        total[_token] = sub(total[_token], _amt);\r\n        emit Sent(msg.sender, _token, _amt);\r\n        if (_token == address(0)) {\r\n            require(msg.sender.send(_amt) == true, \"HDSplit/send-failed\");\r\n        } else {\r\n            bytes memory _data = abi.encodeWithSelector(\r\n                IERC20(_token).transfer.selector, msg.sender, _amt\r\n            );\r\n            (bool _success, bytes memory _returndata) = _token.call(_data);\r\n            require(_success, \"HDSplit/transfer-failed-1\");\r\n\r\n            if (_returndata.length > 0) {\r\n                require(\r\n                    abi.decode(_returndata, (bool)), \"HDSplit/transfer-failed-2\"\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function comp(address _guy) internal {\r\n        if (dai == address(0)) { return; }\r\n\r\n        uint256 _amt = owe[_guy][msg.sender];\r\n\r\n        if (_amt > 0) {\r\n            owe[_guy][msg.sender] = 0;\r\n            debt = sub(debt, _amt);\r\n            emit Comp(msg.sender, _guy, _amt);\r\n            require(\r\n                IERC20(dai).transferFrom(msg.sender, _guy, _amt),\r\n                \"HDSplit/dai-transfer-failed\"\r\n            );\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dai\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"address payable[]\",\"name\":\"_folks\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bps\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"Comp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Push\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"Receive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Rely\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gem\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"folks\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"owe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"take\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"take\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wad\",\"type\":\"uint256\"}],\"name\":\"tell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"total\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"HDSplit","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f00000000000000000000000000000000000000000000010f0cf064dd592000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000030000000000000000000000002de35077ee186385410b971be84345860a821422000000000000000000000000fe5e9fcae4b61a1d7af9fadbcb067a447208c0ed000000000000000000000000eef3026ef864c9398c008195e65d16d9cb42a51200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000001194000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000001f4","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://678888b21650c63e47a5885a59a7a2cdf67f647ad2a933d72a50df7801b9f878"}]}