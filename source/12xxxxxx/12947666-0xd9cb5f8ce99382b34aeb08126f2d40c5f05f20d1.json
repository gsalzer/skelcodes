{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FirstDibsAuction.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicensed\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/access/AccessControl.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/payment/PullPayment.sol';\\n\\nimport './IERC721TokenCreator.sol';\\nimport './IFirstDibsMarketSettings.sol';\\n\\ncontract FirstDibsAuction is PullPayment, AccessControl, ReentrancyGuard, IERC721Receiver {\\n    using SafeMath for uint256;\\n    using SafeMath for uint64;\\n    using Counters for Counters.Counter;\\n\\n    bytes32 public constant BIDDER_ROLE = keccak256('BIDDER_ROLE');\\n    bytes32 public constant BIDDER_ROLE_ADMIN = keccak256('BIDDER_ROLE_ADMIN');\\n\\n    /**\\n     * ========================\\n     * #Public state variables\\n     * ========================\\n     */\\n    bool public bidderRoleRequired; // if true, bids require bidder having BIDDER_ROLE role\\n    bool public globalPaused; // flag for pausing all auctions\\n    IERC721TokenCreator public iERC721TokenCreatorRegistry;\\n    IFirstDibsMarketSettings public iFirstDibsMarketSettings;\\n    // Mapping auction id => Auction\\n    mapping(uint256 => Auction) public auctions;\\n    // Map token address => tokenId => auctionId\\n    mapping(address => mapping(uint256 => uint256)) public auctionIds;\\n\\n    /*\\n     * ========================\\n     * #Private state variables\\n     * ========================\\n     */\\n    Counters.Counter private auctionIdsCounter;\\n\\n    /**\\n     * ========================\\n     * #Structs\\n     * ========================\\n     */\\n    struct AuctionSettings {\\n        uint32 buyerPremium; // percent; added on top of current bid\\n        uint32 duration; // defaults to globalDuration\\n        uint32 minimumBidIncrement; // defaults to globalMinimumBidIncrement\\n        uint32 commissionRate; // percent; defaults to globalMarketCommission\\n        uint128 creatorRoyaltyRate; // percent; defaults to globalCreatorRoyaltyRate\\n    }\\n\\n    struct Bid {\\n        uint256 amount; // current winning bid of the auction\\n        uint256 buyerPremiumAmount; // current buyer premium associated with current bid\\n    }\\n\\n    struct Auction {\\n        uint256 startTime; // auction start timestamp\\n        uint256 pausedTime; // when was the auction paused\\n        uint256 reservePrice; // minimum bid threshold for auction to begin\\n        uint256 tokenId; // id of the token\\n        bool paused; // is individual auction paused\\n        address nftAddress; // address of the token\\n        address payable payee; // address of auction proceeds recipient. NFT creator until secondary market is introduced.\\n        address payable currentBidder; // current winning bidder of the auction\\n        address auctionCreator; // address of the creator of the auction (whoever called the createAuction method)\\n        AuctionSettings settings;\\n        Bid currentBid;\\n    }\\n\\n    /**\\n     * ========================\\n     * #Modifiers\\n     * ========================\\n     */\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), 'caller is not an admin');\\n        _;\\n    }\\n\\n    modifier onlyBidder() {\\n        if (bidderRoleRequired == true) {\\n            require(hasRole(BIDDER_ROLE, _msgSender()), 'bidder role required');\\n        }\\n        _;\\n    }\\n\\n    modifier notPaused(uint256 auctionId) {\\n        require(!globalPaused, 'Auctions are globally paused');\\n        require(!auctions[auctionId].paused, 'Auction is paused.');\\n        _;\\n    }\\n\\n    modifier auctionExists(uint256 auctionId) {\\n        require(auctions[auctionId].payee != address(0), \\\"Auction doesn't exist\\\");\\n        _;\\n    }\\n\\n    modifier senderIsAuctionCreatorOrAdmin(uint256 auctionId) {\\n        require(\\n            _msgSender() == auctions[auctionId].auctionCreator ||\\n                hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\\n            'Must be auction creator or admin'\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * ========================\\n     * #Events\\n     * ========================\\n     */\\n    event AuctionCreated(\\n        uint256 indexed auctionId,\\n        address indexed nftAddress,\\n        uint256 indexed tokenId,\\n        address tokenSeller,\\n        uint256 reservePrice,\\n        bool isPaused,\\n        address auctionCreator,\\n        uint64 duration\\n    );\\n\\n    event AuctionBid(\\n        uint256 indexed auctionId,\\n        address indexed bidder,\\n        uint256 bidAmount,\\n        uint256 bidBuyerPremium,\\n        uint64 duration,\\n        uint256 startTime\\n    );\\n\\n    event AuctionEnded(\\n        uint256 indexed auctionId,\\n        address indexed tokenSeller,\\n        address indexed winningBidder,\\n        uint256 winningBid,\\n        uint256 winningBidBuyerPremium,\\n        uint256 adminCommissionFee,\\n        uint256 royaltyFee,\\n        uint256 sellerPayment\\n    );\\n\\n    event AuctionPaused(\\n        uint256 indexed auctionId,\\n        address indexed tokenSeller,\\n        address toggledBy,\\n        bool isPaused,\\n        uint64 duration\\n    );\\n\\n    event AuctionCanceled(uint256 indexed auctionId, address canceledBy, uint256 refundedAmount);\\n\\n    /**\\n     * ========================\\n     * constructor\\n     * ========================\\n     */\\n    constructor(address _marketSettings, address _creatorRegistry) public {\\n        require(\\n            _marketSettings != address(0),\\n            'constructor: 0 address not allowed for _marketSettings'\\n        );\\n        require(\\n            _creatorRegistry != address(0),\\n            'constructor: 0 address not allowed for _creatorRegistry'\\n        );\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender()); // deployer of the contract gets admin permissions\\n        _setupRole(BIDDER_ROLE, _msgSender());\\n        _setupRole(BIDDER_ROLE_ADMIN, _msgSender());\\n        _setRoleAdmin(BIDDER_ROLE, BIDDER_ROLE_ADMIN);\\n        iERC721TokenCreatorRegistry = IERC721TokenCreator(_creatorRegistry);\\n        iFirstDibsMarketSettings = IFirstDibsMarketSettings(_marketSettings);\\n        bidderRoleRequired = true;\\n    }\\n\\n    /**\\n     * @dev setter for creator registry address\\n     * @param _iERC721TokenCreatorRegistry address of the IERC721TokenCreator contract to set for the auction\\n     */\\n    function setIERC721TokenCreatorRegistry(address _iERC721TokenCreatorRegistry)\\n        external\\n        onlyAdmin\\n    {\\n        require(\\n            _iERC721TokenCreatorRegistry != address(0),\\n            'setIERC721TokenCreatorRegistry: 0 address not allowed'\\n        );\\n        iERC721TokenCreatorRegistry = IERC721TokenCreator(_iERC721TokenCreatorRegistry);\\n    }\\n\\n    /**\\n     * @dev setter for market settings address\\n     * @param _iFirstDibsMarketSettings address of the FirstDibsMarketSettings contract to set for the auction\\n     */\\n    function setIFirstDibsMarketSettings(address _iFirstDibsMarketSettings) external onlyAdmin {\\n        require(\\n            _iFirstDibsMarketSettings != address(0),\\n            'setIFirstDibsMarketSettings: 0 address not allowed'\\n        );\\n        iFirstDibsMarketSettings = IFirstDibsMarketSettings(_iFirstDibsMarketSettings);\\n    }\\n\\n    /**\\n     * @dev setter for setting bidder role being required to bid\\n     * @param _bidderRole bool If true, bidder must have bidder role to bid\\n     */\\n    function setBidderRoleRequired(bool _bidderRole) external onlyAdmin {\\n        bidderRoleRequired = _bidderRole;\\n    }\\n\\n    /**\\n     * @dev setter for global pause state\\n     * @param _paused) true to pause all auctions, false to unpause all auctions\\n     */\\n    function setGlobalPaused(bool _paused) external onlyAdmin {\\n        globalPaused = _paused;\\n    }\\n\\n    /**\\n     * @dev External function which creates an auction with a reserve price,\\n     * custom start time, custom duration, and custom minimum bid increment.\\n     *\\n     * @param _nftAddress address of ERC-721 contract\\n     * @param _tokenId uint256\\n     * @param _reservePrice uint64 reserve price in ETH\\n     * @param _pausedArg create the auction in a paused state\\n     * @param _startTimeArg admin-only unix timestamp; allow bidding to start at this time\\n     * @param _auctionDurationArg (optional) auction duration in seconds\\n     * @param _minimumBidIncrementArg (optional) minimum bid increment in percentage points\\n     */\\n    function createAuction(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        uint64 _reservePrice,\\n        bool _pausedArg,\\n        uint64 _startTimeArg,\\n        uint32 _auctionDurationArg,\\n        uint8 _minimumBidIncrementArg\\n    ) external {\\n        adminCreateAuction(\\n            _nftAddress,\\n            _tokenId,\\n            _reservePrice,\\n            _pausedArg,\\n            _startTimeArg,\\n            _auctionDurationArg,\\n            _minimumBidIncrementArg,\\n            101, // adminCreateAuction function ignores values > 100\\n            101 // adminCreateAuction function ignores values > 100\\n        );\\n    }\\n\\n    /**\\n     * @dev External function which creates an auction with a reserve price,\\n     * custom start time, custom duration, custom minimum bid increment,\\n     * custom commission rate, and custom creator royalty rate.\\n     *\\n     * @param _nftAddress address of ERC-721 contract (latest FirstDibsToken address)\\n     * @param _tokenId uint256\\n     * @param _reservePrice reserve price in ETH\\n     * @param _pausedArg create the auction in a paused state\\n     * @param _startTimeArg (optional) admin-only; unix timestamp; allow bidding to start at this time\\n     * @param _auctionDurationArg (optional) admin-only; auction duration in seconds\\n     * @param _minimumBidIncrementArg (optional) admin-only; minimum bid increment in percentage points\\n     * @param _commissionRateArg (optional) admin-only; pass in a custom marketplace commission rate\\n     * @param _creatorRoyaltyRateArg (optional) admin-only; pass in a custom creator royalty rate\\n     */\\n    function adminCreateAuction(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        uint64 _reservePrice,\\n        bool _pausedArg,\\n        uint64 _startTimeArg,\\n        uint32 _auctionDurationArg,\\n        uint8 _minimumBidIncrementArg,\\n        uint8 _commissionRateArg,\\n        uint8 _creatorRoyaltyRateArg\\n    ) public nonReentrant {\\n        require(!globalPaused, 'adminCreateAuction: auctions are globally paused');\\n\\n        // May not create auctions unless you are the token owner or\\n        // an admin of this contract\\n        require(\\n            _msgSender() == IERC721(_nftAddress).ownerOf(_tokenId) ||\\n                hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\\n            'adminCreateAuction: must be token owner or admin'\\n        );\\n\\n        require(\\n            auctionIds[_nftAddress][_tokenId] == 0,\\n            'adminCreateAuction: auction already exists'\\n        );\\n\\n        require(_reservePrice > 0, 'adminCreateAuction: Reserve must be > 0');\\n\\n        Auction memory auction = Auction({\\n            currentBid: Bid({ amount: 0, buyerPremiumAmount: 0 }),\\n            nftAddress: _nftAddress,\\n            tokenId: _tokenId,\\n            payee: payable(IERC721(_nftAddress).ownerOf(_tokenId)), // payee is the token owner\\n            auctionCreator: _msgSender(),\\n            reservePrice: _reservePrice, // minimum bid threshold for auction to begin\\n            startTime: 0,\\n            currentBidder: address(0), // there is no bidder at auction creation\\n            paused: _pausedArg, // is individual auction paused\\n            pausedTime: 0, // when the auction was paused\\n            settings: AuctionSettings({ // Defaults to global market settings; admins may override\\n                buyerPremium: iFirstDibsMarketSettings.globalBuyerPremium(),\\n                duration: iFirstDibsMarketSettings.globalAuctionDuration(),\\n                minimumBidIncrement: iFirstDibsMarketSettings.globalMinimumBidIncrement(),\\n                commissionRate: iFirstDibsMarketSettings.globalMarketCommission(),\\n                creatorRoyaltyRate: iFirstDibsMarketSettings.globalCreatorRoyaltyRate()\\n            })\\n        });\\n\\n        if (hasRole(DEFAULT_ADMIN_ROLE, _msgSender())) {\\n            if (_auctionDurationArg > 0) {\\n                require(\\n                    _auctionDurationArg >= iFirstDibsMarketSettings.globalTimeBuffer(),\\n                    'adminCreateAuction: duration must be >= time buffer'\\n                );\\n                auction.settings.duration = _auctionDurationArg;\\n            }\\n\\n            if (_startTimeArg > 0) {\\n                require(\\n                    block.timestamp < _startTimeArg,\\n                    'adminCreateAuction: start time must be in the future'\\n                );\\n                auction.startTime = _startTimeArg;\\n                // since `bid` is gated by `notPaused` modifier\\n                // and a start time in the future means that a bid\\n                // must be allowed after that time, we can't have\\n                // the auction paused if there is a start time > 0\\n                auction.paused = false;\\n            }\\n\\n            if (_minimumBidIncrementArg > 0) {\\n                auction.settings.minimumBidIncrement = _minimumBidIncrementArg;\\n            }\\n\\n            if (_commissionRateArg <= 100) {\\n                auction.settings.commissionRate = _commissionRateArg;\\n            }\\n\\n            if (_creatorRoyaltyRateArg <= 100) {\\n                auction.settings.creatorRoyaltyRate = _creatorRoyaltyRateArg;\\n            }\\n        }\\n\\n        require(\\n            uint256(auction.settings.commissionRate).add(auction.settings.creatorRoyaltyRate) <=\\n                100,\\n            'adminCreateAuction: commission rate + royalty rate must be <= 100'\\n        );\\n\\n        auctionIdsCounter.increment();\\n        auctions[auctionIdsCounter.current()] = auction;\\n        auctionIds[_nftAddress][_tokenId] = auctionIdsCounter.current();\\n\\n        // transfer the NFT to the auction contract to hold in escrow for the duration of the auction\\n        IERC721(_nftAddress).safeTransferFrom(auction.payee, address(this), _tokenId);\\n\\n        emit AuctionCreated(\\n            auctionIdsCounter.current(),\\n            _nftAddress,\\n            _tokenId,\\n            auction.payee,\\n            _reservePrice,\\n            auction.paused,\\n            _msgSender(),\\n            auction.settings.duration\\n        );\\n    }\\n\\n    /**\\n     * @dev Retrieves the bid and buyer premium amount from the _amount based on _buyerPremiumRate\\n     *\\n     * @param _amount The entire amount (bid amount + buyer premium amount)\\n     * @param _buyerPremiumRate The buyer premium rate used to calculate _amount\\n     * @return The bid sent and the premium sent\\n     */\\n    function getSentBidAndPremium(uint64 _amount, uint64 _buyerPremiumRate)\\n        public\\n        pure\\n        returns (\\n            uint64, /*sentBid*/\\n            uint64 /*sentPremium*/\\n        )\\n    {\\n        uint256 bpRate = _buyerPremiumRate.add(100);\\n        uint64 _sentBid = uint64(_amount.mul(100).div(bpRate));\\n        uint64 _sentPremium = uint64(_amount.sub(_sentBid));\\n        return (_sentBid, _sentPremium);\\n    }\\n\\n    /**\\n     * @dev Validates that the total amount sent is valid for the current state of the auction\\n     *  and returns the bid amount and buyer premium amount sent\\n     *\\n     * @param _auctionId The id of the auction on which to validate the amount sent\\n     * @param _totalAmount The total amount sent (bid amount + buyer premium amount)\\n     * @return boolean true if the amount satisfies the state of the auction; the sent bid; and the sent premium\\n     */\\n    function _validateAndGetBid(uint256 _auctionId, uint64 _totalAmount)\\n        internal\\n        view\\n        returns (\\n            uint64, /*sentBid*/\\n            uint64 /*sentPremium*/\\n        )\\n    {\\n        (uint64 _sentBid, uint64 _sentPremium) = getSentBidAndPremium(\\n            _totalAmount,\\n            auctions[_auctionId].settings.buyerPremium\\n        );\\n        if (auctions[_auctionId].currentBidder == address(0)) {\\n            // This is the first bid against reserve price\\n            require(\\n                _sentBid >= auctions[_auctionId].reservePrice,\\n                '_validateAndGetBid: reserve not met'\\n            );\\n        } else {\\n            // Subsequent bids must meet minimum bid increment\\n            require(\\n                _sentBid >=\\n                    auctions[_auctionId].currentBid.amount.add(\\n                        auctions[_auctionId]\\n                        .currentBid\\n                        .amount\\n                        .mul(auctions[_auctionId].settings.minimumBidIncrement)\\n                        .div(100)\\n                    ),\\n                '_validateAndGetBid: minimum bid not met'\\n            );\\n        }\\n        return (_sentBid, _sentPremium);\\n    }\\n\\n    /**\\n     * @dev external function that can be called by any address which submits a bid to an auction\\n     * @param _auctionId uint256 id of the auction\\n     * @param _amount uint64 bid in WEI\\n     */\\n    function bid(uint256 _auctionId, uint64 _amount)\\n        external\\n        payable\\n        nonReentrant\\n        onlyBidder\\n        auctionExists(_auctionId)\\n        notPaused(_auctionId)\\n    {\\n        require(msg.value > 0, 'bid: value must be > 0');\\n        require(_amount == msg.value, 'bid: amount/value mismatch');\\n        // Auctions with a start time of 0 may accept bids\\n        // Auctions with a start time can't accept bids until now is greater than start time\\n        require(\\n            auctions[_auctionId].startTime == 0 ||\\n                block.timestamp >= auctions[_auctionId].startTime,\\n            'bid: auction not started'\\n        );\\n        // Auctions with a start time of 0 may accept bids\\n        // Auctions with an end time less than now may accept a bid\\n        require(\\n            auctions[_auctionId].startTime == 0 || block.timestamp < _endTime(_auctionId),\\n            'bid: auction expired'\\n        );\\n        require(\\n            auctions[_auctionId].payee != _msgSender(),\\n            'bid: token owner may not bid on own auction'\\n        );\\n        require(\\n            auctions[_auctionId].currentBidder != _msgSender(),\\n            'bid: sender is current highest bidder'\\n        );\\n\\n        // Validate the amount sent and get sent bid and sent premium\\n        (uint64 _sentBid, uint64 _sentPremium) = _validateAndGetBid(_auctionId, _amount);\\n\\n        // bid amount is OK, if not first bid, then transfer funds\\n        // back to previous bidder & update current bidder to the current sender\\n        if (auctions[_auctionId].startTime == 0) {\\n            auctions[_auctionId].startTime = uint64(block.timestamp);\\n        } else if (auctions[_auctionId].currentBidder != address(0)) {\\n            uint256 refundAmount = auctions[_auctionId].currentBid.amount.add(\\n                auctions[_auctionId].currentBid.buyerPremiumAmount\\n            );\\n            address priorBidder = auctions[_auctionId].currentBidder;\\n            _tryTransferThenEscrow(priorBidder, refundAmount);\\n        }\\n        auctions[_auctionId].currentBid.amount = _sentBid;\\n        auctions[_auctionId].currentBid.buyerPremiumAmount = _sentPremium;\\n        auctions[_auctionId].currentBidder = _msgSender();\\n\\n        // extend countdown for bids within the time buffer of the auction\\n        if (\\n            // if auction ends less than globalTimeBuffer from now\\n            _endTime(_auctionId) < block.timestamp.add(iFirstDibsMarketSettings.globalTimeBuffer())\\n        ) {\\n            // increment the duration by the difference between the new end time and the old end time\\n            auctions[_auctionId].settings.duration += uint32(\\n                block.timestamp.add(iFirstDibsMarketSettings.globalTimeBuffer()).sub(\\n                    _endTime(_auctionId)\\n                )\\n            );\\n        }\\n\\n        emit AuctionBid(\\n            _auctionId,\\n            _msgSender(),\\n            _sentBid,\\n            _sentPremium,\\n            auctions[_auctionId].settings.duration,\\n            auctions[_auctionId].startTime\\n        );\\n    }\\n\\n    /**\\n     * @dev method for ending an auction which has expired. Distrubutes payment to all parties & send\\n     * token to winning bidder (or returns it to the auction creator if there was no winner)\\n     * @param _auctionId uint256 id of the token\\n     */\\n    function endAuction(uint256 _auctionId)\\n        external\\n        nonReentrant\\n        auctionExists(_auctionId)\\n        notPaused(_auctionId)\\n    {\\n        require(\\n            auctions[_auctionId].currentBidder != address(0),\\n            'endAuction: no bidders; use cancelAuction'\\n        );\\n\\n        require(\\n            auctions[_auctionId].startTime > 0 && //  auction has started\\n                block.timestamp >= _endTime(_auctionId), // past the endtime of the auction,\\n            'endAuction: auction is not complete'\\n        );\\n\\n        Auction memory auction = auctions[_auctionId];\\n\\n        // send commission fee & buyer premium to commission address\\n        uint256 commissionFee = auction.currentBid.amount.mul(auction.settings.commissionRate).div(\\n            100\\n        );\\n        // don't attempt to transfer fees if there are none\\n        if (commissionFee.add(auction.currentBid.buyerPremiumAmount) > 0) {\\n            _tryTransferThenEscrow(\\n                iFirstDibsMarketSettings.commissionAddress(),\\n                commissionFee.add(auction.currentBid.buyerPremiumAmount)\\n            );\\n        }\\n\\n        address nftCreator = iERC721TokenCreatorRegistry.tokenCreator(\\n            auction.nftAddress,\\n            auction.tokenId\\n        );\\n\\n        // send payout to token owner & token creator (they might be the same)\\n        uint256 creatorRoyaltyFee = 0;\\n        if (nftCreator == auction.payee) {\\n            // Primary sale\\n            _asyncTransfer(auction.payee, auction.currentBid.amount.sub(commissionFee));\\n        } else {\\n            // Secondary sale\\n            // calculate & send creator royalty to escrow\\n            creatorRoyaltyFee = auction\\n            .currentBid\\n            .amount\\n            .mul(auction.settings.creatorRoyaltyRate)\\n            .div(100);\\n            _asyncTransfer(nftCreator, creatorRoyaltyFee);\\n\\n            // send remaining funds to the seller in escrow\\n            _asyncTransfer(\\n                auction.payee,\\n                auction.currentBid.amount.sub(creatorRoyaltyFee).sub(commissionFee)\\n            );\\n        }\\n\\n        // send the NFT to the winning bidder\\n        IERC721(auction.nftAddress).safeTransferFrom(\\n            address(this), // from\\n            auction.currentBidder, // to\\n            auction.tokenId\\n        );\\n\\n        _delete(_auctionId);\\n\\n        emit AuctionEnded(\\n            _auctionId,\\n            auction.payee,\\n            auction.currentBidder,\\n            auction.currentBid.amount,\\n            auction.currentBid.buyerPremiumAmount,\\n            commissionFee,\\n            creatorRoyaltyFee,\\n            auction.currentBid.amount.sub(creatorRoyaltyFee).sub(commissionFee) // seller payment\\n        );\\n    }\\n\\n    /**\\n     * @dev external function to cancel an auction & return the NFT to the creator of the auction\\n     * @param _auctionId uint256 auction id\\n     */\\n    function cancelAuction(uint256 _auctionId)\\n        external\\n        nonReentrant\\n        auctionExists(_auctionId)\\n        senderIsAuctionCreatorOrAdmin(_auctionId)\\n    {\\n        if (!hasRole(DEFAULT_ADMIN_ROLE, _msgSender())) {\\n            // only admin may cancel an auction with bids\\n            require(\\n                auctions[_auctionId].currentBidder == address(0),\\n                'cancelAuction: auction with bids may not be canceled'\\n            );\\n        }\\n\\n        // return the token back to the original owner\\n        IERC721(auctions[_auctionId].nftAddress).safeTransferFrom(\\n            address(this),\\n            auctions[_auctionId].payee,\\n            auctions[_auctionId].tokenId\\n        );\\n\\n        uint256 refundAmount = 0;\\n        if (auctions[_auctionId].currentBidder != address(0)) {\\n            // If there's a bidder, return funds to them\\n            refundAmount = auctions[_auctionId].currentBid.amount.add(\\n                auctions[_auctionId].currentBid.buyerPremiumAmount\\n            );\\n            _tryTransferThenEscrow(auctions[_auctionId].currentBidder, refundAmount);\\n        }\\n\\n        _delete(_auctionId);\\n        emit AuctionCanceled(_auctionId, _msgSender(), refundAmount);\\n    }\\n\\n    /**\\n     * @dev external function for pausing / unpausing an auction\\n     * @param _auctionId uint256 auction id\\n     * @param _paused true to pause the auction, false to unpause the auction\\n     */\\n    function setAuctionPause(uint256 _auctionId, bool _paused)\\n        external\\n        auctionExists(_auctionId)\\n        senderIsAuctionCreatorOrAdmin(_auctionId)\\n    {\\n        if (_paused == auctions[_auctionId].paused) {\\n            // no-op, auction is already in this state\\n            return;\\n        }\\n        if (_paused) {\\n            auctions[_auctionId].pausedTime = uint64(block.timestamp);\\n        } else if (\\n            !_paused && auctions[_auctionId].pausedTime > 0 && auctions[_auctionId].startTime > 0\\n        ) {\\n            // if the auction has started, increment duration by difference between current time and paused time\\n            auctions[_auctionId].settings.duration += uint32(\\n                block.timestamp.sub(auctions[_auctionId].pausedTime)\\n            );\\n            auctions[_auctionId].pausedTime = 0;\\n        }\\n        auctions[_auctionId].paused = _paused;\\n        emit AuctionPaused(\\n            _auctionId,\\n            auctions[_auctionId].payee,\\n            _msgSender(),\\n            _paused,\\n            auctions[_auctionId].settings.duration\\n        );\\n    }\\n\\n    /**\\n     * @notice Handle the receipt of an NFT\\n     * @dev Per erc721 spec this interface must be implemented to receive NFTs via\\n     *      the safeTransferFrom function. See: https://eips.ethereum.org/EIPS/eip-721 for more.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) external override returns (bytes4) {\\n        return IERC721Receiver(address(this)).onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev utility function for calculating an auctions end time\\n     * @param _auctionId uint256\\n     */\\n    function _endTime(uint256 _auctionId) private view returns (uint256) {\\n        return auctions[_auctionId].startTime + auctions[_auctionId].settings.duration;\\n    }\\n\\n    /**\\n     * @dev Delete auctionId for current auction for token+id & delete auction struct\\n     * @param _auctionId uint256\\n     */\\n    function _delete(uint256 _auctionId) private {\\n        address nftAddress = auctions[_auctionId].nftAddress;\\n        uint256 tokenId = auctions[_auctionId].tokenId;\\n        // delete auctionId for current address+id token combo\\n        // only one auction at a time per token allowed\\n        delete auctionIds[nftAddress][tokenId];\\n        // Delete auction struct\\n        delete auctions[_auctionId];\\n    }\\n\\n    /**\\n     * @dev Sending ether is not guaranteed complete, and the method used here will\\n     * escrow the value if it fails. For example, a contract can block transfer, or might use\\n     * an excessive amount of gas, thereby griefing a bidder.\\n     * We limit the gas used in transfers, and handle failure with escrowing.\\n     * @param _to address to transfer ETH to\\n     * @param _amount uint256 WEI amount to transfer\\n     */\\n    function _tryTransferThenEscrow(address _to, uint256 _amount) private {\\n        // increase the gas limit a reasonable amount above the default, and try\\n        // to send ether to the recipient.\\n        (bool success, ) = _to.call{ value: _amount, gas: 30000 }('');\\n        if (!success) {\\n            _asyncTransfer(_to, _amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../math/SafeMath.sol\\\";\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary Counters {\\n    using SafeMath for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/payment/PullPayment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./escrow/Escrow.sol\\\";\\n\\n/**\\n * @dev Simple implementation of a\\n * https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\\n * strategy, where the paying contract doesn't interact directly with the\\n * receiver account, which must withdraw its payments itself.\\n *\\n * Pull-payments are often considered the best practice when it comes to sending\\n * Ether, security-wise. It prevents recipients from blocking execution, and\\n * eliminates reentrancy concerns.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\\n * instead of Solidity's `transfer` function. Payees can query their due\\n * payments with {payments}, and retrieve them with {withdrawPayments}.\\n */\\nabstract contract PullPayment {\\n    Escrow private _escrow;\\n\\n    constructor () internal {\\n        _escrow = new Escrow();\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated payments, forwarding all gas to the recipient.\\n     *\\n     * Note that _any_ account can call this function, not just the `payee`.\\n     * This means that contracts unaware of the `PullPayment` protocol can still\\n     * receive funds this way, by having a separate account call\\n     * {withdrawPayments}.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param payee Whose payments will be withdrawn.\\n     */\\n    function withdrawPayments(address payable payee) public virtual {\\n        _escrow.withdraw(payee);\\n    }\\n\\n    /**\\n     * @dev Returns the payments owed to an address.\\n     * @param dest The creditor's address.\\n     */\\n    function payments(address dest) public view returns (uint256) {\\n        return _escrow.depositsOf(dest);\\n    }\\n\\n    /**\\n     * @dev Called by the payer to store the sent amount as credit to be pulled.\\n     * Funds sent in this way are stored in an intermediate {Escrow} contract, so\\n     * there is no danger of them being spent before withdrawal.\\n     *\\n     * @param dest The destination address of the funds.\\n     * @param amount The amount to transfer.\\n     */\\n    function _asyncTransfer(address dest, uint256 amount) internal virtual {\\n        _escrow.deposit{ value: amount }(dest);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IERC721TokenCreator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BSD 3-Clause\\npragma solidity 0.6.12;\\n\\n/**\\n * @title IERC721 Non-Fungible Token Creator basic interface\\n * @dev Interop with other systems supporting this interface\\n * @notice Original license and source here: https://github.com/Pixura/pixura-contracts\\n */\\ninterface IERC721TokenCreator {\\n    /**\\n     * @dev Gets the creator of the _tokenId on _nftAddress\\n     * @param _nftAddress address of the ERC721 contract\\n     * @param _tokenId uint256 ID of the token\\n     * @return address of the creator\\n     */\\n    function tokenCreator(address _nftAddress, uint256 _tokenId)\\n        external\\n        view\\n        returns (address payable);\\n}\\n\"\r\n    },\r\n    \"contracts/IFirstDibsMarketSettings.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicensed\\npragma solidity 0.6.12;\\n\\ninterface IFirstDibsMarketSettings {\\n    function globalBuyerPremium() external view returns (uint32);\\n\\n    function globalMarketCommission() external view returns (uint32);\\n\\n    function globalCreatorRoyaltyRate() external view returns (uint32);\\n\\n    function globalMinimumBidIncrement() external view returns (uint32);\\n\\n    function globalTimeBuffer() external view returns (uint32);\\n\\n    function globalAuctionDuration() external view returns (uint32);\\n\\n    function commissionAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/payment/escrow/Escrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n /**\\n  * @title Escrow\\n  * @dev Base escrow contract, holds funds designated for a payee until they\\n  * withdraw them.\\n  *\\n  * Intended usage: This contract (and derived escrow contracts) should be a\\n  * standalone contract, that only interacts with the contract that instantiated\\n  * it. That way, it is guaranteed that all Ether will be handled according to\\n  * the `Escrow` rules, and there is no need to check for payable functions or\\n  * transfers in the inheritance tree. The contract that uses the escrow as its\\n  * payment method should be its owner, and provide public methods redirecting\\n  * to the escrow's deposit and withdraw.\\n  */\\ncontract Escrow is Ownable {\\n    using SafeMath for uint256;\\n    using Address for address payable;\\n\\n    event Deposited(address indexed payee, uint256 weiAmount);\\n    event Withdrawn(address indexed payee, uint256 weiAmount);\\n\\n    mapping(address => uint256) private _deposits;\\n\\n    function depositsOf(address payee) public view returns (uint256) {\\n        return _deposits[payee];\\n    }\\n\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     * @param payee The destination address of the funds.\\n     */\\n    function deposit(address payee) public payable virtual onlyOwner {\\n        uint256 amount = msg.value;\\n        _deposits[payee] = _deposits[payee].add(amount);\\n\\n        emit Deposited(payee, amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated balance for a payee, forwarding all gas to the\\n     * recipient.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param payee The address whose funds will be withdrawn and transferred to.\\n     */\\n    function withdraw(address payable payee) public virtual onlyOwner {\\n        uint256 payment = _deposits[payee];\\n\\n        _deposits[payee] = 0;\\n\\n        payee.sendValue(payment);\\n\\n        emit Withdrawn(payee, payment);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1348\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketSettings\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_creatorRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidBuyerPremium\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"AuctionBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"canceledBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundedAmount\",\"type\":\"uint256\"}],\"name\":\"AuctionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenSeller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"auctionCreator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenSeller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winningBidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningBid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningBidBuyerPremium\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adminCommissionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellerPayment\",\"type\":\"uint256\"}],\"name\":\"AuctionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenSeller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toggledBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"name\":\"AuctionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BIDDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BIDDER_ROLE_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_reservePrice\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_pausedArg\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"_startTimeArg\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_auctionDurationArg\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"_minimumBidIncrementArg\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_commissionRateArg\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_creatorRoyaltyRateArg\",\"type\":\"uint8\"}],\"name\":\"adminCreateAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pausedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"currentBidder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"auctionCreator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"buyerPremium\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minimumBidIncrement\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"commissionRate\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"creatorRoyaltyRate\",\"type\":\"uint128\"}],\"internalType\":\"struct FirstDibsAuction.AuctionSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerPremiumAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct FirstDibsAuction.Bid\",\"name\":\"currentBid\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_amount\",\"type\":\"uint64\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidderRoleRequired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_reservePrice\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_pausedArg\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"_startTimeArg\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_auctionDurationArg\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"_minimumBidIncrementArg\",\"type\":\"uint8\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"endAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_amount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_buyerPremiumRate\",\"type\":\"uint64\"}],\"name\":\"getSentBidAndPremium\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iERC721TokenCreatorRegistry\",\"outputs\":[{\"internalType\":\"contract IERC721TokenCreator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iFirstDibsMarketSettings\",\"outputs\":[{\"internalType\":\"contract IFirstDibsMarketSettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setAuctionPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bidderRole\",\"type\":\"bool\"}],\"name\":\"setBidderRoleRequired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setGlobalPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iERC721TokenCreatorRegistry\",\"type\":\"address\"}],\"name\":\"setIERC721TokenCreatorRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iFirstDibsMarketSettings\",\"type\":\"address\"}],\"name\":\"setIFirstDibsMarketSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"withdrawPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FirstDibsAuction","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1348","ConstructorArguments":"000000000000000000000000b2ac9f9e955633440028edc37f0a9b5ea3c97f720000000000000000000000003ad724f17df50512198cbe737e86f35829ca5262","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}