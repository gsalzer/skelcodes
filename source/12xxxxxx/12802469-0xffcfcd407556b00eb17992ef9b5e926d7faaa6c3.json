{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-11-06\r\n */\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2020-06-03\r\n */\r\n\r\n/*\r\n   ____            __   __        __   _\r\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\r\n _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\r\n/___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\r\n     /___/\r\n\r\n* Staking Rewards for Balancer SNX/USDC Liquidity Providers 0x815f8ef4863451f4faf34fbc860034812e7377d9\r\n* \r\n* Synthetix: StakingRewards.sol\r\n*\r\n* Latest source (may be newer): https://github.com/Synthetixio/synthetix/blob/master/contracts/StakingRewards.sol\r\n* Docs: https://docs.synthetix.io/contracts/StakingRewards\r\n*\r\n* Contract Dependencies: \r\n*\t- Owned\r\n*\t- ReentrancyGuard\r\n*\t- RewardsDistributionRecipient\r\n*\t- TokenWrapper\r\n* Libraries: \r\n*\t- Address\r\n*\t- Math\r\n*\t- SafeERC20\r\n*\t- SafeMath\r\n*\r\n* MIT License\r\n* ===========\r\n*\r\n* Copyright (c) 2020 Synthetix\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n*/\r\n\r\n/* ===============================================\r\n * Flattened with Solidifier by Coinage\r\n *\r\n * https://solidifier.coina.ge\r\n * ===============================================\r\n */\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\r\n * available, which can be aplied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n */\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor() internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(\r\n            localCounter == _guardCounter,\r\n            \"ReentrancyGuard: reentrant call\"\r\n        );\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    // ERC20 Optional Views\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    // Views\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    // Mutative functions\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    // Events\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IMakerPriceFeed {\r\n    function read() external view returns (bytes32);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance =\r\n            token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance =\r\n            token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// https://docs.synthetix.io/contracts/Owned\r\ncontract Owned {\r\n    address public owner;\r\n    address public nominatedOwner;\r\n\r\n    constructor(address _owner) public {\r\n        require(_owner != address(0), \"Owner address cannot be 0\");\r\n        owner = _owner;\r\n        emit OwnerChanged(address(0), _owner);\r\n    }\r\n\r\n    function nominateNewOwner(address _owner) external onlyOwner {\r\n        nominatedOwner = _owner;\r\n        emit OwnerNominated(_owner);\r\n    }\r\n\r\n    function acceptOwnership() external {\r\n        require(\r\n            msg.sender == nominatedOwner,\r\n            \"You must be nominated before you can accept ownership\"\r\n        );\r\n        emit OwnerChanged(owner, nominatedOwner);\r\n        owner = nominatedOwner;\r\n        nominatedOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(\r\n            msg.sender == owner,\r\n            \"Only the contract owner may perform this action\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    event OwnerNominated(address newOwner);\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n}\r\n\r\n// Inheritance\r\n\r\n// https://docs.synthetix.io/contracts/RewardsDistributionRecipient\r\ncontract RewardsDistributionRecipient is Owned {\r\n    address public rewardsDistribution;\r\n\r\n    function notifyRewardAmount(uint256 reward) external;\r\n\r\n    modifier onlyRewardsDistribution() {\r\n        require(\r\n            msg.sender == rewardsDistribution,\r\n            \"Caller is not RewardsDistribution contract\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function setRewardsDistribution(address _rewardsDistribution)\r\n        external\r\n        onlyOwner\r\n    {\r\n        rewardsDistribution = _rewardsDistribution;\r\n    }\r\n}\r\n\r\ncontract TokenWrapper is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public stakingToken;\r\n\r\n    uint256 private _totalSupply;\r\n    mapping(address => uint256) private _balances;\r\n\r\n    constructor(address _stakingToken) public {\r\n        stakingToken = IERC20(_stakingToken);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function stake(uint256 amount) public nonReentrant {\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\r\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\r\n    }\r\n\r\n    function withdraw(uint256 amount) public nonReentrant {\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\r\n        stakingToken.safeTransfer(msg.sender, amount);\r\n    }\r\n}\r\n\r\n// This contract was taking directly from a synthetix reward program.\r\n// Any adjustments will have an altered comment\r\n\r\ncontract StakingRewards is TokenWrapper, RewardsDistributionRecipient {\r\n    IERC20 public rewardsToken;\r\n\r\n    uint256 public duration; // Altered : allows for variable participation windows\r\n    uint256 public periodFinish = 0;\r\n    uint256 public rewardRate = 0;\r\n    uint256 public lastUpdateTime;\r\n    uint256 public rewardPerTokenStored;\r\n    mapping(address => uint256) public userRewardPerTokenPaid;\r\n    mapping(address => uint256) public rewards;\r\n\r\n    event RewardAdded(uint256 reward);\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n\r\n    constructor(\r\n        address _owner,\r\n        address _rewardsToken,\r\n        address _stakingToken,\r\n        uint256 _duration\r\n    ) public TokenWrapper(_stakingToken) Owned(_owner) {\r\n        duration = _duration; // Altered : allows for variable participation windows\r\n        rewardsToken = IERC20(_rewardsToken);\r\n    }\r\n\r\n    modifier updateReward(address account) {\r\n        rewardPerTokenStored = rewardPerToken();\r\n        lastUpdateTime = lastTimeRewardApplicable();\r\n        if (account != address(0)) {\r\n            rewards[account] = earned(account);\r\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\r\n        }\r\n        _;\r\n    }\r\n\r\n    function lastTimeRewardApplicable() public view returns (uint256) {\r\n        return Math.min(block.timestamp, periodFinish);\r\n    }\r\n\r\n    function rewardPerToken() public view returns (uint256) {\r\n        if (totalSupply() == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n        return\r\n            rewardPerTokenStored.add(\r\n                lastTimeRewardApplicable()\r\n                    .sub(lastUpdateTime)\r\n                    .mul(rewardRate)\r\n                    .mul(1e18)\r\n                    .div(totalSupply())\r\n            );\r\n    }\r\n\r\n    function earned(address account) public view returns (uint256) {\r\n        return\r\n            balanceOf(account)\r\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\r\n                .div(1e18)\r\n                .add(rewards[account]);\r\n    }\r\n\r\n    // stake visibility is public as overriding LPTokenWrapper's stake() function\r\n    function stake(uint256 amount) public updateReward(msg.sender) {\r\n        require(amount > 0, \"Cannot stake 0\");\r\n        super.stake(amount);\r\n        emit Staked(msg.sender, amount);\r\n    }\r\n\r\n    function withdraw(uint256 amount) public updateReward(msg.sender) {\r\n        require(amount > 0, \"Cannot withdraw 0\");\r\n        super.withdraw(amount);\r\n        emit Withdrawn(msg.sender, amount);\r\n    }\r\n\r\n    function exit() external {\r\n        withdraw(balanceOf(msg.sender));\r\n        getReward();\r\n    }\r\n\r\n    function getReward() public updateReward(msg.sender) {\r\n        uint256 reward = earned(msg.sender);\r\n        if (reward > 0) {\r\n            rewards[msg.sender] = 0;\r\n            rewardsToken.safeTransfer(msg.sender, reward);\r\n            emit RewardPaid(msg.sender, reward);\r\n        }\r\n    }\r\n\r\n    function notifyRewardAmount(uint256 reward)\r\n        external\r\n        onlyRewardsDistribution\r\n        updateReward(address(0))\r\n    {\r\n        if (block.timestamp >= periodFinish) {\r\n            rewardRate = reward.div(duration); // altered to allow variable durations\r\n        } else {\r\n            uint256 remaining = periodFinish.sub(block.timestamp);\r\n            uint256 leftover = remaining.mul(rewardRate);\r\n            rewardRate = reward.add(leftover).div(duration); // altered to allow variable durations\r\n        }\r\n        lastUpdateTime = block.timestamp;\r\n        periodFinish = block.timestamp.add(duration); // altered to allow variable durations\r\n        emit RewardAdded(reward);\r\n    }\r\n}\r\n\r\ncontract EthereumStakingRewardsScript is StakingRewards {\r\n    constructor()\r\n        public\r\n        StakingRewards(\r\n            0xF7396C708Ad9127B6684b7fd690083158d2ebdE5, // _owner = TeamToastMultsig\r\n            0x6B175474E89094C44Da98b954EedeAC495271d0F, // _rewardsToken = DAI\r\n            0xcD1d5fF929E2B69BBD351CF31057E9a70eC76291, // _stakingToken = FRYETHUniswapLPToken,\r\n            30 days\r\n        ) // _duration = 30 days\r\n    {}\r\n}\r\n\r\ncontract EthereumUnifiedStakingRewardsScript is StakingRewards {\r\n    constructor()\r\n        public\r\n        StakingRewards(\r\n            0xF7396C708Ad9127B6684b7fd690083158d2ebdE5, // _owner = TeamToastMultsig\r\n            0x6B175474E89094C44Da98b954EedeAC495271d0F, // _rewardsToken = DAI\r\n            0x04a1f9f9fE8910A27972E15d5Da3Bf79075fEfbb, // _stakingToken = FRY-DAI-dEth Balancer liquidity,\r\n            30 days\r\n        ) // _duration = 30 days\r\n    {}\r\n}\r\n\r\ncontract BSCStakingRewardsScript is StakingRewards {\r\n    constructor()\r\n        public\r\n        StakingRewards(\r\n            0xF7396C708Ad9127B6684b7fd690083158d2ebdE5, // _owner = team toast address\r\n            0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3, // _rewardsToken = DAI\r\n            0xe71C65Eb18faB7c8DD99598973fd8FA18570fb01, // _stakingToken = FRYBNBCakeLPToken,\r\n            30 days\r\n        ) // _duration = 30 days\r\n    {}\r\n}\r\n\r\ncontract MaticStakingRewardsScript is StakingRewards {\r\n    constructor()\r\n        public\r\n        StakingRewards(\r\n            0xF7396C708Ad9127B6684b7fd690083158d2ebdE5, // _owner = TeamToastMultsig\r\n            0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063, // _rewardsToken = DAI (on matic)\r\n            0x661A67Cb1773669604Ebb95aac63fF31e0F7dc25, // _stakingToken = FRYMATICUniswapLPToken,\r\n            30 days\r\n        ) // _duration = 30 days\r\n    {}\r\n}\r\n\r\ncontract IUniswap {\r\n    function getReserves()\r\n        public\r\n        view\r\n        returns (\r\n            uint112 _reserve0,\r\n            uint112 _reserve1,\r\n            uint32 _blockTimestampLast\r\n        );\r\n}\r\n\r\ncontract QueryStakingPool\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    constructor() public {}\r\n\r\n    // assumes a Balancer XYZ_ETH pair, where XYZ is reserve0\r\n    function getData(\r\n        StakingRewards _rewards,\r\n        address _staker\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint _availableBalance,\r\n            uint _stakedBalance,\r\n            uint _allowedBalance,\r\n            uint _earned,\r\n            uint _totalStakedValue,\r\n            uint _APY,\r\n            uint _rewardRate,\r\n            uint _timestamp // rewards per second\r\n        )\r\n    {\r\n        _availableBalance = _rewards.stakingToken().balanceOf(_staker);\r\n        _stakedBalance = _rewards.balanceOf(_staker);\r\n        _allowedBalance = _rewards\r\n            .stakingToken()\r\n            .allowance(_staker,address(_rewards));\r\n        _earned = _rewards.earned(_staker);\r\n        _rewardRate = _rewards.rewardRate();\r\n        _timestamp = now;\r\n            \r\n        _totalStakedValue = getStakedValue(_rewards);\r\n\r\n        _APY = _totalStakedValue == 0 ? \r\n            0 :\r\n            _rewardRate\r\n                .mul(365 days)\r\n                .mul(10**18)\r\n                .div(_totalStakedValue); /* */\r\n\r\n        _rewardRate = _rewards.totalSupply() == 0 ?\r\n            0 :\r\n            _rewardRate\r\n                .mul(_stakedBalance)\r\n                .div(_rewards.totalSupply());\r\n    }\r\n    \r\n    function getStakedValue(StakingRewards _rewards)\r\n        public\r\n        view\r\n        returns (uint _totalStakedValue)\r\n    {\r\n        uint daiInPool = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F)\r\n            .balanceOf(address(_rewards.stakingToken()));\r\n        uint percStaked = _rewards\r\n            .totalSupply()\r\n            .mul(10**18)\r\n            .div(IERC20(address(_rewards.stakingToken())).totalSupply());\r\n        _totalStakedValue = percStaked\r\n            .mul(daiInPool)\r\n            .mul(3) // because the DAI is one 3rd of the pool \r\n            .div(10**18); // remove the excessive 10^18 precision\r\n    }\r\n}\r\n\r\ncontract QueryScript {\r\n    using SafeMath for uint256;\r\n\r\n    constructor() public {}\r\n\r\n    // assumes a Uniswap XYZ_ETH pair, where XYZ is reserve0\r\n    function getData(\r\n        StakingRewards _rewards,\r\n        uint _rewardsRefReserve,\r\n        IUniswap _pricePair,\r\n        uint _pricePairRefReserve,\r\n        address _staker\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint _availableBalance,\r\n            uint _stakedBalance,\r\n            uint _allowedBalance,\r\n            uint _earned,\r\n            uint _totalStakedValue,\r\n            uint _APY,\r\n            uint _rewardRate,\r\n            uint _timestamp // rewards per second\r\n        )\r\n    {\r\n        _availableBalance = _rewards.stakingToken().balanceOf(_staker);\r\n        _stakedBalance = _rewards.balanceOf(_staker);\r\n        _allowedBalance = _rewards\r\n            .stakingToken()\r\n            .allowance(_staker,address(_rewards));\r\n        _earned = _rewards.earned(_staker);\r\n        _rewardRate = _rewards.rewardRate();\r\n        _timestamp = now;\r\n            \r\n        _totalStakedValue = getStakedValue(_rewards, _rewardsRefReserve, _pricePair, _pricePairRefReserve);\r\n\r\n        _APY = _totalStakedValue == 0 ? \r\n            0 :\r\n            _rewardRate\r\n                .mul(365 days)\r\n                .mul(10**18)\r\n                .div(_totalStakedValue); /* */\r\n\r\n        _rewardRate = _rewards.totalSupply() == 0 ?\r\n            0 :\r\n            _rewardRate\r\n                .mul(_stakedBalance)\r\n                .div(_rewards.totalSupply());\r\n    }\r\n    \r\n    function getStakedValue(\r\n            StakingRewards _rewards, \r\n            uint _rewardsRefReserve, \r\n            IUniswap _pricePair, \r\n            uint _pricePairRefReserve)\r\n        public\r\n        view\r\n        returns (uint _totalStakedValue)\r\n    {\r\n        IUniswap stakingToken = IUniswap(address(_rewards.stakingToken()));\r\n        \r\n        uint fryPrice = getTokenPairPrice(_pricePair, _pricePairRefReserve)\r\n            .mul(10**18)\r\n            .div(getTokenPairPrice(stakingToken, _rewardsRefReserve));\r\n            \r\n        _totalStakedValue = fryPrice\r\n            .mul(getReserve(stakingToken, _rewardsRefReserve));\r\n            \r\n        _totalStakedValue = _totalStakedValue \r\n            .mul(10**18) // add precision before dividing\r\n            .div(_rewards.stakingToken().totalSupply())\r\n            .mul(_rewards.totalSupply())\r\n            .div(10**18) // remove precision after dividing\r\n            .div(10**18) // remove prevision from fryPrice \r\n            .mul(2); // mul by two to get the value of both sides of the pair\r\n    }\r\n    \r\n    function getBiggerReserve(IUniswap _tokenPair)\r\n        public\r\n        view\r\n        returns (uint _reserve)\r\n    {\r\n        (uint reserve0, uint reserve1, ) = _tokenPair.getReserves();\r\n        _reserve = Math.max(reserve0, reserve1);\r\n    }\r\n    \r\n    function getReserve(IUniswap _tokenPair, uint _reserve)\r\n        public\r\n        view\r\n        returns (uint _reserveAmount)\r\n    {\r\n        (uint reserve0, uint reserve1, ) = _tokenPair.getReserves();\r\n        _reserveAmount = _reserve == 0 ?\r\n            reserve0 : \r\n            reserve1;\r\n    }\r\n    \r\n\r\n    function getTokenPairPrice(IUniswap _tokenPair, uint reserve)\r\n        public\r\n        view\r\n        returns (uint _price)\r\n    {\r\n        (uint reserve0, uint reserve1, ) = _tokenPair.getReserves();\r\n        _price = reserve == 0 ?\r\n            reserve0.mul(10**18).div(reserve1) :\r\n            reserve1.mul(10**18).div(reserve0);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract StakingRewards\",\"name\":\"_rewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_availableBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allowedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalStakedValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_APY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract StakingRewards\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"getStakedValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalStakedValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"QueryStakingPool","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://6a6d5237a46523f252a606a562a3ce5f67fd19cfbaf75269f39517d6114fb2d3"}]}