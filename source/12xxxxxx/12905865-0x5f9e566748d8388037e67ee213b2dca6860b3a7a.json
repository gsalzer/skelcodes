{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/libs/Types.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.15;\\n\\n/**\\n * @title DataTypes\\n */\\nlibrary Types {\\n    // We define Usage for a batch or for a tx\\n    // to check if the usage of a batch and all txs in it are the same\\n    enum Usage {\\n        Genesis, // The Genesis type is only applicable to batch but not tx\\n        Transfer,\\n        Deposit\\n    }\\n    // PDALeaf represents the leaf in\\n    // Pubkey DataAvailability Tree\\n    struct PDALeaf {\\n        bytes pubkey;\\n    }\\n\\n    // Batch represents the batch submitted periodically to the ethereum chain\\n    struct Batch {\\n        bytes32 stateRoot;\\n        bytes32 accountRoot;\\n        bytes32 depositTree;\\n        address committer;\\n        bytes32 txRoot;\\n        uint256 stakeCommitted;\\n        uint256 finalisesOn;\\n        uint256 timestamp;\\n        Usage batchType;\\n    }\\n\\n    // Transaction represents how each transaction looks like for\\n    // this rollup chain\\n    struct Transaction {\\n        uint256 fromIndex;\\n        uint256 toIndex;\\n        uint256 tokenType;\\n        uint256 nonce;\\n        uint256 txType;\\n        uint256 amount;\\n        bytes signature;\\n    }\\n\\n    // AccountInclusionProof consists of the following fields\\n    // 1. Path to the account leaf from root in the balances tree\\n    // 2. Actual data stored in the leaf\\n    struct AccountInclusionProof {\\n        uint256 pathToAccount;\\n        UserAccount account;\\n    }\\n\\n    struct TranasctionInclusionProof {\\n        uint256 pathToTx;\\n        Transaction data;\\n    }\\n\\n    struct PDAInclusionProof {\\n        uint256 pathToPubkey;\\n        PDALeaf pubkey_leaf;\\n    }\\n\\n    // UserAccount contains the actual data stored in the leaf of balance tree\\n    struct UserAccount {\\n        // ID is the path to the pubkey in the PDA tree\\n        uint256 ID;\\n        uint256 tokenType;\\n        uint256 balance;\\n        uint256 nonce;\\n    }\\n\\n    struct AccountMerkleProof {\\n        AccountInclusionProof accountIP;\\n        bytes32[] siblings;\\n    }\\n\\n    struct AccountProofs {\\n        AccountMerkleProof from;\\n        AccountMerkleProof to;\\n    }\\n\\n    struct BatchValidationProofs {\\n        AccountProofs[] accountProofs;\\n        PDAMerkleProof[] pdaProof;\\n    }\\n\\n    struct TransactionMerkleProof {\\n        TranasctionInclusionProof _tx;\\n        bytes32[] siblings;\\n    }\\n\\n    struct PDAMerkleProof {\\n        PDAInclusionProof _pda;\\n        bytes32[] siblings;\\n    }\\n\\n    enum ErrorCode {\\n        NoError,\\n        InvalidTokenAddress,\\n        InvalidTokenAmount,\\n        NotEnoughTokenBalance,\\n        BadFromTokenType,\\n        BadToTokenType\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/logger.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.15;\\n\\nimport { Types } from \\\"./libs/Types.sol\\\";\\n\\ncontract Logger {\\n    /*********************\\n     * Rollup Contract *\\n     ********************/\\n    event NewBatch(\\n        address committer,\\n        bytes32 txroot,\\n        bytes32 updatedRoot,\\n        uint256 index,\\n        Types.Usage batchType\\n    );\\n\\n    function logNewBatch(\\n        address committer,\\n        bytes32 txroot,\\n        bytes32 updatedRoot,\\n        uint256 index,\\n        Types.Usage batchType\\n    ) public {\\n        emit NewBatch(committer, txroot, updatedRoot, index, batchType);\\n    }\\n\\n    event StakeWithdraw(address committed, uint256 amount, uint256 batch_id);\\n\\n    function logStakeWithdraw(\\n        address committed,\\n        uint256 amount,\\n        uint256 batch_id\\n    ) public {\\n        emit StakeWithdraw(committed, amount, batch_id);\\n    }\\n\\n    event BatchRollback(\\n        uint256 batch_id,\\n        address committer,\\n        bytes32 stateRoot,\\n        bytes32 txRoot,\\n        uint256 stakeSlashed\\n    );\\n\\n    function logBatchRollback(\\n        uint256 batch_id,\\n        address committer,\\n        bytes32 stateRoot,\\n        bytes32 txRoot,\\n        uint256 stakeSlashed\\n    ) public {\\n        emit BatchRollback(\\n            batch_id,\\n            committer,\\n            stateRoot,\\n            txRoot,\\n            stakeSlashed\\n        );\\n    }\\n\\n    event RollbackFinalisation(uint256 totalBatchesSlashed);\\n\\n    function logRollbackFinalisation(uint256 totalBatchesSlashed) public {\\n        emit RollbackFinalisation(totalBatchesSlashed);\\n    }\\n\\n    event RegisteredToken(uint256 tokenType, address tokenContract);\\n\\n    function logRegisteredToken(uint256 tokenType, address tokenContract)\\n        public\\n    {\\n        emit RegisteredToken(tokenType, tokenContract);\\n    }\\n\\n    event RegistrationRequest(address tokenContract);\\n\\n    function logRegistrationRequest(address tokenContract) public {\\n        emit RegistrationRequest(tokenContract);\\n    }\\n\\n    event NewPubkeyAdded(uint256 AccountID, bytes pubkey);\\n\\n    function logNewPubkeyAdded(uint256 accountID, bytes memory pubkey) public {\\n        emit NewPubkeyAdded(accountID, pubkey);\\n    }\\n\\n    event DepositQueued(uint256 AccountID, bytes pubkey, bytes data);\\n\\n    function logDepositQueued(\\n        uint256 accountID,\\n        bytes memory pubkey,\\n        bytes memory data\\n    ) public {\\n        emit DepositQueued(accountID, pubkey, data);\\n    }\\n\\n    event DepositLeafMerged(bytes32 left, bytes32 right, bytes32 newRoot);\\n\\n    function logDepositLeafMerged(\\n        bytes32 left,\\n        bytes32 right,\\n        bytes32 newRoot\\n    ) public {\\n        emit DepositLeafMerged(left, right, newRoot);\\n    }\\n\\n    event DepositSubTreeReady(bytes32 root);\\n\\n    function logDepositSubTreeReady(bytes32 root) public {\\n        emit DepositSubTreeReady(root);\\n    }\\n\\n    event DepositsFinalised(bytes32 depositSubTreeRoot, uint256 pathToSubTree);\\n\\n    function logDepositFinalised(\\n        bytes32 depositSubTreeRoot,\\n        uint256 pathToSubTree\\n    ) public {\\n        emit DepositsFinalised(depositSubTreeRoot, pathToSubTree);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batch_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"committer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeSlashed\",\"type\":\"uint256\"}],\"name\":\"BatchRollback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"left\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"right\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"DepositLeafMerged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"AccountID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"DepositQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"DepositSubTreeReady\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"depositSubTreeRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pathToSubTree\",\"type\":\"uint256\"}],\"name\":\"DepositsFinalised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"committer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txroot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"updatedRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Types.Usage\",\"name\":\"batchType\",\"type\":\"uint8\"}],\"name\":\"NewBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"AccountID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"NewPubkeyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"RegisteredToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"RegistrationRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBatchesSlashed\",\"type\":\"uint256\"}],\"name\":\"RollbackFinalisation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"committed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batch_id\",\"type\":\"uint256\"}],\"name\":\"StakeWithdraw\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batch_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"committer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"txRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"stakeSlashed\",\"type\":\"uint256\"}],\"name\":\"logBatchRollback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"depositSubTreeRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pathToSubTree\",\"type\":\"uint256\"}],\"name\":\"logDepositFinalised\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"left\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"right\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"logDepositLeafMerged\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accountID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"logDepositQueued\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"logDepositSubTreeReady\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"committer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"txroot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"updatedRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum Types.Usage\",\"name\":\"batchType\",\"type\":\"uint8\"}],\"name\":\"logNewBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accountID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"logNewPubkeyAdded\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"logRegisteredToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"logRegistrationRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBatchesSlashed\",\"type\":\"uint256\"}],\"name\":\"logRollbackFinalisation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"committed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batch_id\",\"type\":\"uint256\"}],\"name\":\"logStakeWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Logger","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}