{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface IGovernance {\r\n    event GovernanceChanged(address oldGovernance, address newGovernance);\r\n    event MinterAdmitted(address target);\r\n    event MinterExpelled(address target);\r\n    \r\n    function governance () external view returns (address);\r\n    function isMinter (address target) external view returns (bool);\r\n    function admitMinter (address target) external;\r\n    function expelMinter (address target) external;\r\n    function succeedGovernance (address newGovernance) external;\r\n}\r\n\r\ncontract Timelock {\r\n    struct job{\r\n        uint256 id;\r\n        uint256 state;\r\n        string action;\r\n        address arg;\r\n        uint256 queued;\r\n    }\r\n    \r\n    address public COMMUNITY;\r\n    address public TOKEN;\r\n    uint256 public LOCK_PERIOD;\r\n    mapping (uint256 => job) public JOB_DATA;\r\n    uint256 public LAST_ID;\r\n    \r\n    bytes32 constant private CONST_CHANGE_PERIOD = keccak256(\"changePeriod\");\r\n    bytes32 constant private CONST_ADMIT_MINTER = keccak256(\"admitMinter\");\r\n    bytes32 constant private CONST_EXPEL_MINTER = keccak256(\"expelMinter\");\r\n    bytes32 constant private CONST_SUCCEED_GOVERNANCE = keccak256(\"succeedGovernance\");\r\n\r\n    event JobQueued (uint256 id);\r\n    event CommunitySucceeded (address originCommunity, address newCommunity);\r\n    \r\n    constructor (address token, uint256 lockPeriod) public {\r\n        TOKEN = token;\r\n        COMMUNITY = msg.sender;\r\n        LOCK_PERIOD = lockPeriod;\r\n        LAST_ID = 0;\r\n    }\r\n    \r\n    modifier CommunityOnly () {\r\n        require (msg.sender == COMMUNITY, \"Only Community can do\");\r\n        _;\r\n    }\r\n    \r\n    modifier JobAlive (uint256 id) {\r\n        require(JOB_DATA[id].id > 0, \"There is no job with id\");\r\n        require(JOB_DATA[id].state == 0, \"Already expired job\");\r\n        _;\r\n    }\r\n    \r\n    function whenExecutable (uint256 id) public view JobAlive(id) returns (uint256) {\r\n        return JOB_DATA[id].queued + LOCK_PERIOD;\r\n    }\r\n    \r\n    function isExecutable (uint256 id) public view JobAlive(id) returns (bool) {\r\n        return block.number >= whenExecutable(id);\r\n    }\r\n    \r\n    function queueJob (string calldata action, address arg) external CommunityOnly returns (uint256) {\r\n        uint256 nextID = LAST_ID + 1;\r\n        \r\n        JOB_DATA[nextID] = job(nextID, 0, action, arg, block.number);\r\n        \r\n        emit JobQueued(nextID);\r\n        LAST_ID = nextID;\r\n        return nextID;\r\n    }\r\n    \r\n    function cancelJob (uint256 id) external CommunityOnly JobAlive(id) {\r\n        JOB_DATA[id].state = 2;\r\n    }\r\n    \r\n    function executeJob (uint256 id) external CommunityOnly {\r\n        require(isExecutable(id) == true, \"Job isnt ready\");\r\n        \r\n        JOB_DATA[id].state = 1;\r\n        \r\n        if(keccak256(abi.encodePacked(JOB_DATA[id].action)) == CONST_CHANGE_PERIOD){\r\n            _changePeriod(uint256(JOB_DATA[id].arg));\r\n            return;\r\n        }\r\n        \r\n        IGovernance tokenObj = IGovernance(TOKEN);\r\n        if(keccak256(abi.encodePacked(JOB_DATA[id].action)) == CONST_ADMIT_MINTER){\r\n            tokenObj.admitMinter(JOB_DATA[id].arg);\r\n            return;\r\n        }\r\n        if(keccak256(abi.encodePacked(JOB_DATA[id].action)) == CONST_EXPEL_MINTER){\r\n            tokenObj.expelMinter(JOB_DATA[id].arg);\r\n            return;\r\n        }\r\n        if(keccak256(abi.encodePacked(JOB_DATA[id].action)) == CONST_SUCCEED_GOVERNANCE){\r\n            tokenObj.succeedGovernance(JOB_DATA[id].arg);\r\n            return;\r\n        }\r\n    }\r\n    \r\n    function succeedCommunity (address newCommunity) external CommunityOnly {\r\n        emit CommunitySucceeded(COMMUNITY, newCommunity);\r\n        COMMUNITY = newCommunity;\r\n    }\r\n    \r\n    function _changePeriod (uint256 lockPeriod) private CommunityOnly {\r\n        LOCK_PERIOD = lockPeriod;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originCommunity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCommunity\",\"type\":\"address\"}],\"name\":\"CommunitySucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"JobQueued\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMMUNITY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"JOB_DATA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"arg\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"queued\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LAST_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOCK_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cancelJob\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"executeJob\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isExecutable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"arg\",\"type\":\"address\"}],\"name\":\"queueJob\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCommunity\",\"type\":\"address\"}],\"name\":\"succeedCommunity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"whenExecutable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Timelock","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002fdf40c484b1bd6f1c214acac737fedc8b03e5a80000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://554ff6a4c97ebfa990685bc9d03691df3348ad884db3ceb6193629dad3a73230"}]}