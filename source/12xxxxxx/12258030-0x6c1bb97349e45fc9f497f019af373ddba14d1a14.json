{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.14;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ncontract Constant {\r\n    enum ActionType { DepositAction, WithdrawAction, BorrowAction, RepayAction }\r\n    address public constant ETH_ADDR = 0x000000000000000000000000000000000000000E;\r\n    uint256 public constant INT_UNIT = 10 ** uint256(18);\r\n    uint256 public constant ACCURACY = 10 ** 18;\r\n    uint256 public constant BLOCKS_PER_YEAR = 2102400;\r\n}\r\n\r\n\r\nlibrary Utils{\r\n\r\n    function _isETH(address globalConfig, address _token) public view returns (bool) {\r\n        return IConstant(IGlobalConfig(globalConfig).constants()).ETH_ADDR() == _token;\r\n    }\r\n\r\n    function getDivisor(address globalConfig, address _token) public view returns (uint256) {\r\n        if(_isETH(globalConfig, _token)) return IConstant(IGlobalConfig(globalConfig).constants()).INT_UNIT();\r\n        return 10 ** uint256(ITokenRegistry(IGlobalConfig(globalConfig).tokenInfoRegistry()).getTokenDecimals(_token));\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @dev Token Info Registry to manage Token information\r\n *      The Owner of the contract allowed to update the information\r\n */\r\ncontract TokenRegistry is Ownable, Constant {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev TokenInfo struct stores Token Information, this includes:\r\n     *      ERC20 Token address, Compound Token address, ChainLink Aggregator address etc.\r\n     * @notice This struct will consume 5 storage locations\r\n     */\r\n    struct TokenInfo {\r\n        // Token index, can store upto 255\r\n        uint8 index;\r\n        // ERC20 Token decimal\r\n        uint8 decimals;\r\n        // If token is enabled / disabled\r\n        bool enabled;\r\n        // Is ERC20 token charge transfer fee?\r\n        bool isTransferFeeEnabled;\r\n        // Is Token supported on Compound\r\n        bool isSupportedOnCompound;\r\n        // cToken address on Compound\r\n        address cToken;\r\n        // Chain Link Aggregator address for TOKEN/ETH pair\r\n        address chainLinkOracle;\r\n        // Borrow LTV, by default 60%\r\n        uint256 borrowLTV;\r\n    }\r\n\r\n    event TokenAdded(address indexed token);\r\n    event TokenUpdated(address indexed token);\r\n\r\n    uint256 public constant MAX_TOKENS = 128;\r\n    uint256 public constant SCALE = 100;\r\n\r\n    // TokenAddress to TokenInfo mapping\r\n    mapping (address => TokenInfo) public tokenInfo;\r\n\r\n    // TokenAddress array\r\n    address[] public tokens;\r\n    IGlobalConfig public globalConfig;\r\n\r\n    /**\r\n     */\r\n    modifier whenTokenExists(address _token) {\r\n        require(isTokenExist(_token), \"Token not exists\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     *  initializes the symbols structure\r\n     */\r\n    function initialize(IGlobalConfig _globalConfig) public onlyOwner{\r\n        globalConfig = _globalConfig;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a new token to registry\r\n     * @param _token ERC20 Token address\r\n     * @param _decimals Token's decimals\r\n     * @param _isTransferFeeEnabled Is token changes transfer fee\r\n     * @param _isSupportedOnCompound Is token supported on Compound\r\n     * @param _cToken cToken contract address\r\n     * @param _chainLinkOracle Chain Link Aggregator address to get TOKEN/ETH rate\r\n     */\r\n    function addToken(\r\n        address _token,\r\n        uint8 _decimals,\r\n        bool _isTransferFeeEnabled,\r\n        bool _isSupportedOnCompound,\r\n        address _cToken,\r\n        address _chainLinkOracle\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_token != address(0), \"Token address is zero\");\r\n        require(!isTokenExist(_token), \"Token already exist\");\r\n        require(_chainLinkOracle != address(0), \"ChainLinkAggregator address is zero\");\r\n        require(tokens.length < MAX_TOKENS, \"Max token limit reached\");\r\n\r\n        TokenInfo storage storageTokenInfo = tokenInfo[_token];\r\n        storageTokenInfo.index = uint8(tokens.length);\r\n        storageTokenInfo.decimals = _decimals;\r\n        storageTokenInfo.enabled = true;\r\n        storageTokenInfo.isTransferFeeEnabled = _isTransferFeeEnabled;\r\n        storageTokenInfo.isSupportedOnCompound = _isSupportedOnCompound;\r\n        storageTokenInfo.cToken = _cToken;\r\n        storageTokenInfo.chainLinkOracle = _chainLinkOracle;\r\n        // Default values\r\n        storageTokenInfo.borrowLTV = 60; //6e7; // 60%\r\n\r\n        tokens.push(_token);\r\n        emit TokenAdded(_token);\r\n    }\r\n\r\n    function updateBorrowLTV(\r\n        address _token,\r\n        uint256 _borrowLTV\r\n    )\r\n        external\r\n        onlyOwner\r\n        whenTokenExists(_token)\r\n    {\r\n        if (tokenInfo[_token].borrowLTV == _borrowLTV)\r\n            return;\r\n\r\n        // require(_borrowLTV != 0, \"Borrow LTV is zero\");\r\n        require(_borrowLTV < SCALE, \"Borrow LTV must be less than Scale\");\r\n        // require(liquidationThreshold > _borrowLTV, \"Liquidation threshold must be greater than Borrow LTV\");\r\n\r\n        tokenInfo[_token].borrowLTV = _borrowLTV;\r\n        emit TokenUpdated(_token);\r\n    }\r\n\r\n    /**\r\n     */\r\n    function updateTokenTransferFeeFlag(\r\n        address _token,\r\n        bool _isTransfeFeeEnabled\r\n    )\r\n        external\r\n        onlyOwner\r\n        whenTokenExists(_token)\r\n    {\r\n        if (tokenInfo[_token].isTransferFeeEnabled == _isTransfeFeeEnabled)\r\n            return;\r\n\r\n        tokenInfo[_token].isTransferFeeEnabled = _isTransfeFeeEnabled;\r\n        emit TokenUpdated(_token);\r\n    }\r\n\r\n    /**\r\n     */\r\n    function updateTokenSupportedOnCompoundFlag(\r\n        address _token,\r\n        bool _isSupportedOnCompound\r\n    )\r\n        external\r\n        onlyOwner\r\n        whenTokenExists(_token)\r\n    {\r\n        if (tokenInfo[_token].isSupportedOnCompound == _isSupportedOnCompound)\r\n            return;\r\n\r\n        tokenInfo[_token].isSupportedOnCompound = _isSupportedOnCompound;\r\n        emit TokenUpdated(_token);\r\n    }\r\n\r\n    /**\r\n     */\r\n    function updateCToken(\r\n        address _token,\r\n        address _cToken\r\n    )\r\n        external\r\n        onlyOwner\r\n        whenTokenExists(_token)\r\n    {\r\n        if (tokenInfo[_token].cToken == _cToken)\r\n            return;\r\n\r\n        tokenInfo[_token].cToken = _cToken;\r\n        emit TokenUpdated(_token);\r\n    }\r\n\r\n    /**\r\n     */\r\n    function updateChainLinkAggregator(\r\n        address _token,\r\n        address _chainLinkOracle\r\n    )\r\n        external\r\n        onlyOwner\r\n        whenTokenExists(_token)\r\n    {\r\n        if (tokenInfo[_token].chainLinkOracle == _chainLinkOracle)\r\n            return;\r\n\r\n        tokenInfo[_token].chainLinkOracle = _chainLinkOracle;\r\n        emit TokenUpdated(_token);\r\n    }\r\n\r\n\r\n    function enableToken(address _token) external onlyOwner whenTokenExists(_token) {\r\n        require(!tokenInfo[_token].enabled, \"Token already enabled\");\r\n\r\n        tokenInfo[_token].enabled = true;\r\n\r\n        emit TokenUpdated(_token);\r\n    }\r\n\r\n    function disableToken(address _token) external onlyOwner whenTokenExists(_token) {\r\n        require(tokenInfo[_token].enabled, \"Token already disabled\");\r\n\r\n        tokenInfo[_token].enabled = false;\r\n\r\n        emit TokenUpdated(_token);\r\n    }\r\n\r\n    // =====================\r\n    //      GETTERS\r\n    // =====================\r\n\r\n    /**\r\n     * @dev Is token address is registered\r\n     * @param _token token address\r\n     * @return Returns `true` when token registered, otherwise `false`\r\n     */\r\n    function isTokenExist(address _token) public view returns (bool isExist) {\r\n        isExist = tokenInfo[_token].chainLinkOracle != address(0);\r\n    }\r\n\r\n    function getTokens() external view returns (address[] memory) {\r\n        return tokens;\r\n    }\r\n\r\n    function getTokenIndex(address _token) external view returns (uint8) {\r\n        return tokenInfo[_token].index;\r\n    }\r\n\r\n    function isTokenEnabled(address _token) external view returns (bool) {\r\n        return tokenInfo[_token].enabled;\r\n    }\r\n\r\n    /**\r\n     */\r\n    function getCTokens() external view returns (address[] memory cTokens) {\r\n        uint256 len = tokens.length;\r\n        cTokens = new address[](len);\r\n        for(uint256 i = 0; i < len; i++) {\r\n            cTokens[i] = tokenInfo[tokens[i]].cToken;\r\n        }\r\n    }\r\n\r\n    function getTokenDecimals(address _token) public view returns (uint8) {\r\n        return tokenInfo[_token].decimals;\r\n    }\r\n\r\n    function isTransferFeeEnabled(address _token) external view returns (bool) {\r\n        return tokenInfo[_token].isTransferFeeEnabled;\r\n    }\r\n\r\n    function isSupportedOnCompound(address _token) external view returns (bool) {\r\n        return tokenInfo[_token].isSupportedOnCompound;\r\n    }\r\n\r\n    /**\r\n     */\r\n    function getCToken(address _token) external view returns (address) {\r\n        return tokenInfo[_token].cToken;\r\n    }\r\n\r\n    function getChainLinkAggregator(address _token) external view returns (address) {\r\n        return tokenInfo[_token].chainLinkOracle;\r\n    }\r\n\r\n    function getBorrowLTV(address _token) external view returns (uint256) {\r\n        return tokenInfo[_token].borrowLTV;\r\n    }\r\n\r\n    function getCoinLength() public view returns (uint256 length) {\r\n        return tokens.length;\r\n    }\r\n\r\n    function addressFromIndex(uint index) public view returns(address) {\r\n        require(index < tokens.length, \"coinIndex must be smaller than the coins length.\");\r\n        return tokens[index];\r\n    }\r\n\r\n    function priceFromIndex(uint index) public view returns(uint256) {\r\n        require(index < tokens.length, \"coinIndex must be smaller than the coins length.\");\r\n        address tokenAddress = tokens[index];\r\n        // Temp fix\r\n        if(Utils._isETH(address(globalConfig), tokenAddress)) {\r\n            return 1e18;\r\n        }\r\n        return uint256(IAggregator(globalConfig.chainLink()).getLatestAnswer(tokenAddress));\r\n    }\r\n\r\n    function priceFromAddress(address tokenAddress) public view returns(uint256) {\r\n        if(Utils._isETH(address(globalConfig), tokenAddress)) {\r\n            return 1e18;\r\n        }\r\n        return uint256(IAggregator(globalConfig.chainLink()).getLatestAnswer(tokenAddress));\r\n    }\r\n\r\n     function _priceFromAddress(address _token) internal view returns (uint) {\r\n        return _token != ETH_ADDR ? uint256(IAggregator(globalConfig.chainLink()).getLatestAnswer(_token)) : INT_UNIT;\r\n    }\r\n\r\n    function _tokenDivisor(address _token) internal view returns (uint) {\r\n        return _token != ETH_ADDR ? 10**uint256(tokenInfo[_token].decimals) : INT_UNIT;\r\n    }\r\n\r\n    function getTokenInfoFromIndex(uint index)\r\n        external\r\n        view\r\n        whenTokenExists(addressFromIndex(index))\r\n        returns (\r\n            address,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        address token = tokens[index];\r\n        return (\r\n            token,\r\n            _tokenDivisor(token),\r\n            _priceFromAddress(token),\r\n            tokenInfo[token].borrowLTV\r\n        );\r\n    }\r\n\r\n    function getTokenInfoFromAddress(address _token)\r\n        external\r\n        view\r\n        whenTokenExists(_token)\r\n        returns (\r\n            uint8,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (\r\n            tokenInfo[_token].index,\r\n            _tokenDivisor(_token),\r\n            _priceFromAddress(_token),\r\n            tokenInfo[_token].borrowLTV\r\n        );\r\n    }\r\n\r\n    // function _isETH(address _token) public view returns (bool) {\r\n    //     return globalConfig.constants().ETH_ADDR() == _token;\r\n    // }\r\n\r\n    // function getDivisor(address _token) public view returns (uint256) {\r\n    //     if(_isETH(_token)) return INT_UNIT;\r\n    //     return 10 ** uint256(getTokenDecimals(_token));\r\n    // }\r\n\r\n    mapping(address => uint) public depositeMiningSpeeds;\r\n    mapping(address => uint) public borrowMiningSpeeds;\r\n\r\n    function updateMiningSpeed(address _token, uint _depositeMiningSpeed, uint _borrowMiningSpeed) public onlyOwner{\r\n        if(_depositeMiningSpeed != depositeMiningSpeeds[_token]) {\r\n            depositeMiningSpeeds[_token] = _depositeMiningSpeed;\r\n        }\r\n        \r\n        if(_borrowMiningSpeed != borrowMiningSpeeds[_token]) {\r\n            borrowMiningSpeeds[_token] = _borrowMiningSpeed;\r\n        }\r\n\r\n        emit TokenUpdated(_token);\r\n    }\r\n}\r\n\r\ninterface IGlobalConfig {\r\n    function constants() external view returns (address);\r\n    function tokenInfoRegistry() external view returns (address);\r\n    function chainLink() external view returns (address);\r\n}\r\n\r\ninterface IConstant {\r\n    function ETH_ADDR() external view returns (address);\r\n    function INT_UNIT() external view returns (uint256);\r\n}\r\n\r\ninterface ITokenRegistry {\r\n    function getTokenDecimals(address) external view returns (uint8);\r\n}\r\n\r\ninterface IAggregator {\r\n    function getLatestAnswer(address) external view returns (int256);\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenUpdated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCURACY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BLOCKS_PER_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INT_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_isTransferFeeEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isSupportedOnCompound\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chainLinkOracle\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"addressFromIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowMiningSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositeMiningSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"disableToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"enableToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getBorrowLTV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getCToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getChainLinkAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCoinLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenInfoFromAddress\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTokenInfoFromIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalConfig\",\"outputs\":[{\"internalType\":\"contract IGlobalConfig\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IGlobalConfig\",\"name\":\"_globalConfig\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isSupportedOnCompound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTransferFeeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"priceFromAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"priceFromIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isTransferFeeEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSupportedOnCompound\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"chainLinkOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowLTV\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_borrowLTV\",\"type\":\"uint256\"}],\"name\":\"updateBorrowLTV\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cToken\",\"type\":\"address\"}],\"name\":\"updateCToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chainLinkOracle\",\"type\":\"address\"}],\"name\":\"updateChainLinkAggregator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositeMiningSpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowMiningSpeed\",\"type\":\"uint256\"}],\"name\":\"updateMiningSpeed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isSupportedOnCompound\",\"type\":\"bool\"}],\"name\":\"updateTokenSupportedOnCompoundFlag\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isTransfeFeeEnabled\",\"type\":\"bool\"}],\"name\":\"updateTokenTransferFeeFlag\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenRegistry","CompilerVersion":"v0.5.14+commit.01f1aaa4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"Utils:8e13d5ac37110742f62bf5eeea5045fa33ff428c","LicenseType":"GNU LGPLv2.1","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c78d692b588452fd10567feab9c97df85d23627bb5f32c11c867fd6761b39694"}]}