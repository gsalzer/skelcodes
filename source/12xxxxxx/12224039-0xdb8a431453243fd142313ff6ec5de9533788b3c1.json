{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.7.0;\r\n\r\ninterface EmployeeTokenOwnershipPlan {\r\n    function withdrawFor(address recipient) external;\r\n}\r\n\r\ninterface EmployeeTokenOwnershipPlan2020 {\r\n    function withdrawFor(address recipient) external;\r\n}\r\n\r\ninterface CancellableEmployeeTokenOwnershipPlan {\r\n    function withdrawFor(address recipient) external;\r\n}\r\n\r\nabstract contract ERC20\r\n{\r\n    function totalSupply() public view virtual returns (uint);\r\n\r\n    function balanceOf(address who) public view virtual returns (uint);\r\n\r\n    function allowance(address owner, address spender) public view virtual returns (uint);\r\n\r\n    function transfer(address to, uint value) public virtual returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint value) public virtual returns (bool);\r\n\r\n    function approve(address spender, uint value) public virtual returns (bool);\r\n}\r\n\r\ncontract Rewarder {\r\n    ERC20 constant lrc = ERC20(\r\n        0xBBbbCA6A901c926F240b89EacB641d8Aec7AEafD);\r\n\r\n    EmployeeTokenOwnershipPlan constant etop = EmployeeTokenOwnershipPlan(\r\n        0x5759A6De790233adA100619b2c516ED6AFD33CE1);\r\n    EmployeeTokenOwnershipPlan2020 constant etop2020 =\r\n        EmployeeTokenOwnershipPlan2020(\r\n            0x1161EF73d7254A778f9f6f83ec24fbFEC40870a4);\r\n    CancellableEmployeeTokenOwnershipPlan constant cetop =\r\n        CancellableEmployeeTokenOwnershipPlan(\r\n            0x8372cfb259CE98D299BC6Fe1E1833a216625Cf8F);\r\n\r\n    address payable constant recipient = 0xE2598D66B02e8580fA195535888903d59909B9A3;\r\n    address payable constant r1Add = 0xabf824005472bC6320aa9B977344419775DA8e68;\r\n    address payable[2] r2Adds = [\r\n        0xf493af7DFd0e47869Aac4770B2221a259CA77Ac8,\r\n        0x650EACf9AD1576680f1af6eC6cC598A484d796Ad\r\n    ];\r\n\r\n    // 1\r\n    function batchWithdraw(uint t) external {\r\n        if (t != 2 && t != 4)\r\n            etop.withdrawFor(r1Add);\r\n            lrc.transferFrom(r1Add, recipient, lrc.balanceOf(r1Add));\r\n        for (uint i = 0; i < r2Adds.length; ++i) {\r\n            etop2020.withdrawFor(r2Adds[i]);\r\n            if (t != 3 && t != 4)\r\n                cetop.withdrawFor(r2Adds[i]);\r\n            lrc.transferFrom(r2Adds[i], recipient, lrc.balanceOf(r2Adds[i]));\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"batchWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Rewarder","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://48adf0e617fcdf47da979f14f68fa0fd3bcb6aa32eb95d324663ac7b832b6a37"}]}