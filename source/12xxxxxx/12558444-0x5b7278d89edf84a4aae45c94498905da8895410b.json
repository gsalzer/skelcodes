{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\n\r\n/// @author [@DreWhyte](Telegram)\r\n/// @title Payable Contract\r\ncontract PayableContract {\r\n\r\n    address public owner;\r\n\r\n    address public admin;\r\n\r\n    event Transfer(address indexed _to, uint256 _value);\r\n\r\n    event Receive(address indexed _from, uint256 _value);\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"Admin privilege only\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Owner privilege only\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice Set the default admin and owner\r\n    * as address that deploys contract\r\n    */\r\n    constructor() {\r\n        admin = msg.sender;\r\n        owner = admin;\r\n    }\r\n\r\n    /**\r\n    * @param _newOwner payable address of new owner\r\n    * @return status\r\n    * @dev previous owner cannot be made new owner\r\n    */\r\n    function transferOwnership(address _newOwner) public onlyAdmin returns(bool status){\r\n        require(_newOwner != address(0));\r\n\r\n        address previousOwner = owner;\r\n\r\n        require(previousOwner != _newOwner);\r\n\r\n        owner = _newOwner;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Withdraw all funds\r\n    */\r\n    function withdrawAll() public onlyOwner {\r\n        uint amount = address(this).balance;\r\n\r\n        (bool success,) = msg.sender.call{value: amount}(\"\");\r\n\r\n        require(success, \"withdrawAll: Transfer failed\");\r\n\r\n        emit Transfer(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n    * @param amount Amount to withdraw in wei\r\n    */\r\n    function withdrawPartial(uint amount) public onlyOwner {\r\n        (bool success,) = msg.sender.call{value: amount}(\"\");\r\n\r\n        require(success, \"withdrawPartial: Transfer failed\");\r\n\r\n        emit Transfer(msg.sender, amount);\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev This can only reply on 2300 gas been available\r\n    * @dev We can't do beyond simple ven logging\r\n    */\r\n    receive() external payable {\r\n        emit Receive(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n    * @dev Retrieve all funds & destroy contract\r\n    * in case of emergency\r\n    */\r\n    function killSwitch() public onlyAdmin() {\r\n      address payable _owner = payable(owner);\r\n\r\n      selfdestruct(_owner);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Receive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killSwitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPartial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PayableContract","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7209745b7bf111110726fd7339b7c5a3afce1c58f12f332119b1ae56f7051047"}]}