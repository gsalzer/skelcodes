{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The defaut value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overloaded;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n// File: contracts/OwnershipAgreement.sol\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n\r\n/// @title Creates an Ownership Agreement, with an optional Operator role\r\n/// @author Dr. Jonathan Shahen at UREEQA\r\n/// @notice TODO\r\n/// @dev Maximum number of Owners is set to 255 (unit8.MAX_VALUE)\r\ncontract OwnershipAgreement {\r\n    /*\r\n     * Storage\r\n     */\r\n    enum ResolutionType {\r\n        None, // This indicates that the resolution hasn't been set (default value)\r\n        AddOwner,\r\n        RemoveOwner,\r\n        ReplaceOwner,\r\n        AddOperator,\r\n        RemoveOperator,\r\n        ReplaceOperator,\r\n        UpdateThreshold,\r\n        UpdateTransactionLimit,\r\n        Pause,\r\n        Unpause,\r\n        Custom\r\n    }\r\n    struct Resolution {\r\n        // Has the resolution already been passed\r\n        bool passed;\r\n        // The type of resolution\r\n        ResolutionType resType;\r\n        // The old address, can be address(0). oldAddress and newAddress cannot both equal address(0).\r\n        address oldAddress;\r\n        // The new address, can be address(0). oldAddress and newAddress cannot both equal address(0).\r\n        address newAddress;\r\n    }\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    // Set of owners\r\n    // NOTE: we utilize a set, so we can enumerate the owners and so that the list only contains one instance of an account\r\n    // NOTE: address(0) is not a valid owner\r\n    EnumerableSet.AddressSet private _owners;\r\n    // Value to indicate if the smart contract is paused\r\n    bool private _paused;\r\n    // An address, usually controlled by a computer, that performs regular/automated operations within the smart contract\r\n    // NOTE: address(0) is not a valid operator\r\n    EnumerableSet.AddressSet private _operators;\r\n    // Limit the number of operators\r\n    uint160 public operatorLimit = 1;\r\n    // The number of owners it takes to come to an agreement\r\n    uint160 public ownerAgreementThreshold = 1;\r\n    // Limit per Transaction to impose\r\n    // A limit of zero means no limit imposed\r\n    uint256 public transactionLimit = 0;\r\n    // Stores each vote for each resolution number (int)\r\n    mapping(address => mapping(uint256 => bool)) public ownerVotes;\r\n    // The next available resolution number\r\n    uint256 public nextResolution = 1;\r\n    mapping(address => uint256) lastOwnerResolutionNumber;\r\n    // Stores the resolutions\r\n    mapping(uint256 => Resolution) public resolutions;\r\n\r\n    // ////////////////////////////////////////////////////\r\n    // EVENTS\r\n    // ////////////////////////////////////////////////////\r\n    event OwnerAddition(address owner);\r\n    event OwnerRemoval(address owner);\r\n    event OwnerReplacement(address oldOwner, address newOwner);\r\n\r\n    event OperatorAddition(address newOperator);\r\n    event OperatorRemoval(address oldOperator);\r\n    event OperatorReplacement(address oldOperator, address newOperator);\r\n\r\n    event UpdateThreshold(uint160 newThreshold);\r\n    event UpdateNumberOfOperators(uint160 newOperators);\r\n    event UpdateTransactionLimit(uint256 newLimit);\r\n    /// @dev Emitted when the pause is triggered by `account`.\r\n    event Paused(address account);\r\n    /// @dev Emitted when the pause is lifted by `account`.\r\n    event Unpaused(address account);\r\n\r\n    // ////////////////////////////////////////////////////\r\n    // MODIFIERS\r\n    // ////////////////////////////////////////////////////\r\n    function isValidAddress(address newAddr) public pure {\r\n        require(newAddr != address(0), \"Invaild Address\");\r\n    }\r\n\r\n    modifier onlyOperators() {\r\n        isValidAddress(msg.sender);\r\n        require(\r\n            EnumerableSet.contains(_operators, msg.sender) == true,\r\n            \"Only the operator can run this function.\"\r\n        );\r\n        _;\r\n    }\r\n    modifier onlyOwners() {\r\n        isValidAddress(msg.sender);\r\n        require(\r\n            EnumerableSet.contains(_owners, msg.sender) == true,\r\n            \"Only an owner can run this function.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnersOrOperator() {\r\n        isValidAddress(msg.sender);\r\n        require(\r\n            EnumerableSet.contains(_operators, msg.sender) == true || \r\n            EnumerableSet.contains(_owners, msg.sender) == true,\r\n            \"Only an owner or the operator can run this function.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(address owner) {\r\n        require(\r\n            EnumerableSet.contains(_owners, owner) == true,\r\n            \"Owner does not exists.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     * Requirements: The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Smart Contract is paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     * Requirements: The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Smart Contract is not paused\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to make a function callable only when the amount is within the transaction limit\r\n    modifier withinLimit(uint256 amount) {\r\n        require(transactionLimit == 0 || amount <= transactionLimit, \"Amount is over the transaction limit\");\r\n        _;\r\n    }\r\n\r\n    // ////////////////////////////////////////////////////\r\n    // CONSTRUCTOR\r\n    // ////////////////////////////////////////////////////\r\n    constructor() {\r\n        _addOwner(msg.sender);\r\n        _paused = false;\r\n    }\r\n\r\n    // ////////////////////////////////////////////////////\r\n    // VIEW FUNCTIONS\r\n    // ////////////////////////////////////////////////////\r\n\r\n    /// @dev Returns list of owners.\r\n    /// @return List of owner addresses.\r\n    function getOwners() public view returns (address[] memory) {\r\n        uint256 len = EnumerableSet.length(_owners);\r\n        address[] memory o = new address[](len);\r\n\r\n        for (uint256 i = 0; i < len; i++) {\r\n            o[i] = EnumerableSet.at(_owners, i);\r\n        }\r\n\r\n        return o;\r\n    }\r\n\r\n    /// @dev Returns the number of owners.\r\n    /// @return Number of owners.\r\n    function getNumberOfOwners() public view returns (uint8) {\r\n        return uint8(EnumerableSet.length(_owners));\r\n    }\r\n\r\n    /// @dev Returns list of owners.\r\n    /// @return List of owner addresses.\r\n    function getOperators() public view returns (address[] memory) {\r\n        uint256 len = EnumerableSet.length(_operators);\r\n        address[] memory o = new address[](len);\r\n\r\n        for (uint256 i = 0; i < len; i++) {\r\n            o[i] = EnumerableSet.at(_operators, i);\r\n        }\r\n\r\n        return o;\r\n    }\r\n\r\n    /// @dev Returns the number of operators.\r\n    /// @return Number of operators.\r\n    function getNumberOfOperators() public view returns (uint8) {\r\n        return uint8(EnumerableSet.length(_operators));\r\n    }\r\n\r\n    /// @dev How many owners does it take to approve a resolution\r\n    /// @return minimum number of owner votes\r\n    function getVoteThreshold() public view returns (uint160) {\r\n        return ownerAgreementThreshold;\r\n    }\r\n\r\n    /// @dev Returns the maximum amount a transaction can contain\r\n    /// @return maximum amount or zero is no limit\r\n    function getTransactionLimit() public view returns (uint256) {\r\n        return transactionLimit;\r\n    }\r\n\r\n    /// @dev Returns the next available resolution.\r\n    /// @return The next available resolution number\r\n    function getNextResolutionNumber() public view returns (uint256) {\r\n        return nextResolution;\r\n    }\r\n\r\n    /// @dev Returns the next available resolution.\r\n    /// @return The next available resolution number\r\n    function getLastOwnerResolutionNumber(address owner) public view returns (uint256) {\r\n        return lastOwnerResolutionNumber[owner];\r\n    }\r\n\r\n    /// @dev Returns true if the contract is paused, and false otherwise.\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /// @dev Helper function to fail if resolution number is already in use.\r\n    function resolutionAlreadyUsed(uint256 resNum) public view {\r\n        require(\r\n            // atleast one of the address must not be equal to address(0)\r\n            !(resolutions[resNum].oldAddress != address(0) ||\r\n                resolutions[resNum].newAddress != address(0)),\r\n            \"Resolution is already in use.\"\r\n        );\r\n    }\r\n\r\n    function isResolutionPassed(uint256 resNum) public view returns (bool) {\r\n        return resolutions[resNum].passed;\r\n    }\r\n\r\n    function canResolutionPass(uint256 resNum) public view returns (bool) {\r\n        uint256 voteCount = 0;\r\n        uint256 len = EnumerableSet.length(_owners);\r\n\r\n        for (uint256 i = 0; i < len; i++) {\r\n            if (ownerVotes[EnumerableSet.at(_owners, i)][resNum] == true) {\r\n                voteCount++;\r\n            }\r\n        }\r\n\r\n        return voteCount >= ownerAgreementThreshold;\r\n    }\r\n\r\n    // ////////////////////////////////////////////////////\r\n    // PUBLIC FUNCTIONS\r\n    // ////////////////////////////////////////////////////\r\n\r\n    /// @notice Vote Yes on a Resolution.\r\n    /// @dev The owner who tips the agreement threshold will pay the gas for performing the resolution.\r\n    /// @return TRUE if the resolution passed\r\n    function voteResolution(uint256 resNum) public onlyOwners() returns (bool) {\r\n        ownerVotes[msg.sender][resNum] = true;\r\n\r\n        // If the reolution has already passed, then do nothing\r\n        if (isResolutionPassed(resNum)) {\r\n            return true;\r\n        }\r\n\r\n        // If the resolution can now be passed, then do so\r\n        if (canResolutionPass(resNum)) {\r\n            _performResolution(resNum);\r\n            return true;\r\n        }\r\n\r\n        // The resolution cannot be passed yet\r\n        return false;\r\n    }\r\n\r\n    /// @dev Create a resolution to add an owner. Performs addition if threshold is 1 or zero.\r\n    function createResolutionAddOwner(address newOwner) public onlyOwners() {\r\n        isValidAddress(newOwner);\r\n        require(!EnumerableSet.contains(_owners, newOwner),\"newOwner already exists.\");\r\n\r\n        createResolution(ResolutionType.AddOwner, address(0), newOwner);\r\n    }\r\n\r\n    /// @dev Create a resolution to remove an owner. Performs removal if threshold is 1 or zero.\r\n    /// @dev Updates the threshold to keep it less than or equal to the number of new owners\r\n    function createResolutionRemoveOwner(address owner) public onlyOwners() {\r\n        isValidAddress(owner);\r\n        require(getNumberOfOwners() > 1, \"Must always be one owner\");\r\n        require(EnumerableSet.contains(_owners, owner),\"owner is not an owner.\");\r\n\r\n        createResolution(ResolutionType.RemoveOwner, owner, address(0));\r\n    }\r\n\r\n    /// @dev Create a resolution to repalce an owner. Performs replacement if threshold is 1 or zero.\r\n    function createResolutionReplaceOwner(address oldOwner, address newOwner)\r\n        public\r\n        onlyOwners()\r\n    {\r\n        isValidAddress(oldOwner);\r\n        isValidAddress(newOwner);\r\n        require(EnumerableSet.contains(_owners, oldOwner),\"oldOwner is not an owner.\");\r\n        require(!EnumerableSet.contains(_owners, newOwner),\"newOwner already exists.\");\r\n\r\n        createResolution(ResolutionType.ReplaceOwner, oldOwner, newOwner);\r\n    }\r\n\r\n    /// @dev Create a resolution to add an operator. Performs addition if threshold is 1 or zero.\r\n    function createResolutionAddOperator(address newOperator) public onlyOwners() {\r\n        isValidAddress(newOperator);\r\n        require(!EnumerableSet.contains(_operators, newOperator),\"newOperator already exists.\");\r\n\r\n        createResolution(ResolutionType.AddOperator, address(0), newOperator);\r\n    }\r\n\r\n    /// @dev Create a resolution to remove the operator. Performs removal if threshold is 1 or zero.\r\n    function createResolutionRemoveOperator(address operator) public onlyOwners() {\r\n        require(EnumerableSet.contains(_operators, operator),\"operator is not an Operator.\");\r\n        createResolution(ResolutionType.RemoveOperator, operator, address(0));\r\n    }\r\n\r\n    /// @dev Create a resolution to replace the operator account. Performs replacement if threshold is 1 or zero.\r\n    function createResolutionReplaceOperator(address oldOperator, address newOperator)\r\n        public\r\n        onlyOwners()\r\n    {\r\n        isValidAddress(oldOperator);\r\n        isValidAddress(newOperator);\r\n        require(EnumerableSet.contains(_operators, oldOperator),\"oldOperator is not an Operator.\");\r\n        require(!EnumerableSet.contains(_operators, newOperator),\"newOperator already exists.\");\r\n\r\n        createResolution(ResolutionType.ReplaceOperator, oldOperator, newOperator);\r\n    }\r\n\r\n    /// @dev Create a resolution to update the transaction limit. Performs update if threshold is 1 or zero.\r\n    function createResolutionUpdateTransactionLimit(uint160 newLimit)\r\n        public\r\n        onlyOwners()\r\n    {\r\n        createResolution(ResolutionType.UpdateTransactionLimit, address(0), address(newLimit));\r\n    }\r\n\r\n    /// @dev Create a resolution to update the owner agreement threshold. Performs update if threshold is 1 or zero.\r\n    function createResolutionUpdateThreshold(uint160 threshold)\r\n        public\r\n        onlyOwners()\r\n    {\r\n        createResolution(ResolutionType.UpdateThreshold, address(0), address(threshold));\r\n    }\r\n\r\n    /// @dev Pause the contract. Does not require owner agreement.\r\n    function pause() public onlyOwners() {\r\n        _pause();\r\n    }\r\n\r\n    /// @dev Create a resolution to unpause the contract. Performs update if threshold is 1 or zero.\r\n    function createResolutionUnpause() public onlyOwners() {\r\n        createResolution(ResolutionType.Unpause, address(1), address(1));\r\n    }\r\n\r\n    // ////////////////////////////////////////////////////\r\n    // INTERNAL FUNCTIONS\r\n    // ////////////////////////////////////////////////////\r\n    /// @dev Create a resolution and check if we can call perofrm the resolution with 1 vote.\r\n    function createResolution(ResolutionType resType, address oldAddress, address newAddress) internal {\r\n        uint256 resNum = nextResolution;\r\n        nextResolution++;\r\n        resolutionAlreadyUsed(resNum);\r\n\r\n        resolutions[resNum].resType = resType;\r\n        resolutions[resNum].oldAddress = oldAddress;\r\n        resolutions[resNum].newAddress = newAddress;\r\n\r\n        ownerVotes[msg.sender][resNum] = true;\r\n        lastOwnerResolutionNumber[msg.sender] = resNum;\r\n\r\n        // Check if agreement is already reached\r\n        if (ownerAgreementThreshold <= 1) {\r\n            _performResolution(resNum);\r\n        }\r\n    }\r\n\r\n    /// @dev Performs the resolution and then marks it as passed. No checks prevent it from performing the resolutions.\r\n    function _performResolution(uint256 resNum) internal {\r\n        if (resolutions[resNum].resType == ResolutionType.AddOwner) {\r\n            _addOwner(resolutions[resNum].newAddress);\r\n        } else if (resolutions[resNum].resType == ResolutionType.RemoveOwner) {\r\n            _removeOwner(resolutions[resNum].oldAddress);\r\n        } else if (resolutions[resNum].resType == ResolutionType.ReplaceOwner) {\r\n            _replaceOwner(\r\n                resolutions[resNum].oldAddress,\r\n                resolutions[resNum].newAddress\r\n            );\r\n        } else if (\r\n            resolutions[resNum].resType == ResolutionType.AddOperator\r\n        ) {\r\n            _addOperator(resolutions[resNum].newAddress);\r\n        } else if (\r\n            resolutions[resNum].resType == ResolutionType.RemoveOperator\r\n        ) {\r\n            _removeOperator(resolutions[resNum].oldAddress);\r\n        } else if (\r\n            resolutions[resNum].resType == ResolutionType.ReplaceOperator\r\n        ) {\r\n            _replaceOperator(resolutions[resNum].oldAddress,resolutions[resNum].newAddress);\r\n        } else if (\r\n            resolutions[resNum].resType == ResolutionType.UpdateTransactionLimit\r\n        ) {\r\n            _updateTransactionLimit(uint160(resolutions[resNum].newAddress));\r\n        } else if (\r\n            resolutions[resNum].resType == ResolutionType.UpdateThreshold\r\n        ) {\r\n            _updateThreshold(uint160(resolutions[resNum].newAddress));\r\n        } else if (\r\n            resolutions[resNum].resType == ResolutionType.Pause\r\n        ) {\r\n            _pause();\r\n        } else if (\r\n            resolutions[resNum].resType == ResolutionType.Unpause\r\n        ) {\r\n            _unpause();\r\n        }\r\n\r\n        resolutions[resNum].passed = true;\r\n    }\r\n\r\n    /// @dev\r\n    function _addOwner(address owner) internal {\r\n        EnumerableSet.add(_owners, owner);\r\n        emit OwnerAddition(owner);\r\n    }\r\n\r\n    /// @dev\r\n    function _removeOwner(address owner) internal {\r\n        EnumerableSet.remove(_owners, owner);\r\n        emit OwnerRemoval(owner);\r\n\r\n        uint8 numOwners = getNumberOfOwners();\r\n        if(ownerAgreementThreshold > numOwners) {\r\n            _updateThreshold(numOwners);\r\n        }\r\n    }\r\n\r\n    /// @dev\r\n    function _replaceOwner(address oldOwner, address newOwner) internal {\r\n        EnumerableSet.remove(_owners, oldOwner);\r\n        EnumerableSet.add(_owners, newOwner);\r\n        emit OwnerReplacement(oldOwner, newOwner);\r\n    }\r\n\r\n    /// @dev\r\n    function _addOperator(address operator) internal {\r\n        EnumerableSet.add(_operators, operator);\r\n        emit OperatorAddition(operator);\r\n    }\r\n\r\n    /// @dev\r\n    function _removeOperator(address operator) internal {\r\n        EnumerableSet.remove(_operators, operator);\r\n        emit OperatorRemoval(operator);\r\n    }\r\n\r\n    /// @dev\r\n    function _replaceOperator(address oldOperator, address newOperator) internal {\r\n        emit OperatorReplacement(oldOperator, newOperator);\r\n        EnumerableSet.remove(_operators, oldOperator);\r\n        EnumerableSet.add(_operators, newOperator);\r\n    }\r\n\r\n    /// @dev Internal function to update and emit the new transaction limit\r\n    function _updateTransactionLimit(uint256 newLimit) internal {\r\n        emit UpdateTransactionLimit(newLimit);\r\n        transactionLimit = newLimit;\r\n    }\r\n\r\n    /// @dev Internal function to update and emit the new voting threshold\r\n    function _updateThreshold(uint160 threshold) internal {\r\n        require(threshold <= getNumberOfOwners(), \"Unable to set threshold above the number of owners\");\r\n        emit UpdateThreshold(threshold);\r\n        ownerAgreementThreshold = threshold;\r\n    }\r\n\r\n    /// @dev Internal function to update and emit the new voting threshold\r\n    function _updateNumberOfOperators(uint160 numOperators) internal {\r\n        require(numOperators >= getNumberOfOperators(), \"Unable to set number of Operators below the number of operators\");\r\n        emit UpdateNumberOfOperators(numOperators);\r\n        operatorLimit = numOperators;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements: The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements: The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n// File: contracts/URQAToken.sol\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n\r\n\r\n/// @title UREEQA's URQA Token\r\n/// @author Dr. Jonathan Shahen at UREEQA\r\ncontract URQAToken is OwnershipAgreement, ERC20 {\r\n\r\n    constructor() ERC20(\"UREEQA Token\", \"URQA\") {\r\n        // Total Supply: 100 million\r\n        _mint(msg.sender, 100_000_000e18);\r\n    }\r\n\r\n    /**\r\n     * @dev Batch transfer to reduce gas fees. Utilizes SafeMath and self.transfer\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipients` cannot contain the zero address.\r\n     * - the caller must have a balance of at least SUM `amounts`.\r\n     */\r\n    function batchTransfer(address[] memory recipients, uint256[] memory amounts) public returns (bool) {\r\n        for(uint256 i=0; i< amounts.length; i++) {\r\n            transfer(recipients[i], amounts[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n\r\n        require(!paused(), \"Cannot complete token transfer while Contract is Paused\");\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOperator\",\"type\":\"address\"}],\"name\":\"OperatorRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorReplacement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerReplacement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"newOperators\",\"type\":\"uint160\"}],\"name\":\"UpdateNumberOfOperators\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"newThreshold\",\"type\":\"uint160\"}],\"name\":\"UpdateThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"UpdateTransactionLimit\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"resNum\",\"type\":\"uint256\"}],\"name\":\"canResolutionPass\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"createResolutionAddOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"createResolutionAddOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"createResolutionRemoveOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"createResolutionRemoveOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldOperator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"createResolutionReplaceOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"createResolutionReplaceOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createResolutionUnpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"threshold\",\"type\":\"uint160\"}],\"name\":\"createResolutionUpdateThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"newLimit\",\"type\":\"uint160\"}],\"name\":\"createResolutionUpdateTransactionLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getLastOwnerResolutionNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextResolutionNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfOperators\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfOwners\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransactionLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoteThreshold\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"resNum\",\"type\":\"uint256\"}],\"name\":\"isResolutionPassed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"isValidAddress\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextResolution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorLimit\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAgreementThreshold\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerVotes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"resNum\",\"type\":\"uint256\"}],\"name\":\"resolutionAlreadyUsed\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"resolutions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"internalType\":\"enum OwnershipAgreement.ResolutionType\",\"name\":\"resType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"resNum\",\"type\":\"uint256\"}],\"name\":\"voteResolution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"URQAToken","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://20f35fd5fde27c8601d5cc74fdfb18d78ca5df70c12ae5217331d9dad11207bf"}]}