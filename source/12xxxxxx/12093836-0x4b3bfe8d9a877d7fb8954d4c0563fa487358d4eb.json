{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/naiemk/nk/open-staking/contracts/common/Constants.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.8.0;\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\\nimport '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\n\\nlibrary Constants {\\n    address constant uniV2FactoryAddress = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\n    IUniswapV2Factory constant uniV2Factory = IUniswapV2Factory(uniV2FactoryAddress);\\n\\n    address constant uniV2Router02Address = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n    IUniswapV2Router02 constant uniV2Router02 = IUniswapV2Router02(uniV2Router02Address);\\n\\n    uint32 constant Future2100 = 4102448400;\\n\\n    address constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n}\\n\"\r\n    },\r\n    \"/home/naiemk/nk/open-staking/contracts/common/SafeAmount.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nlibrary SafeAmount {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount) internal returns (uint256)  {\\n        uint256 preBalance = IERC20(token).balanceOf(to);\\n        IERC20(token).transferFrom(from, to, amount);\\n        uint256 postBalance = IERC20(token).balanceOf(to);\\n        return postBalance.sub(preBalance);\\n    }\\n}\"\r\n    },\r\n    \"/home/naiemk/nk/open-staking/contracts/staking/Festaked.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./IFestaked.sol\\\";\\nimport \\\"../common/SafeAmount.sol\\\";\\n\\n/**\\n * A staking contract distributes rewards.\\n * One can create several TraditionalFestaking over one\\n * staking and give different rewards for a single\\n * staking contract.\\n */\\ncontract Festaked is IFestaked {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    mapping (address => uint256) internal _stakes;\\n\\n    string public name;\\n    address  public override tokenAddress;\\n    uint public override stakingStarts;\\n    uint public override stakingEnds;\\n    uint public withdrawStarts;\\n    uint public withdrawEnds;\\n    uint256 public override stakedTotal;\\n    uint256 public stakingCap;\\n    uint256 public override stakedBalance;\\n\\n    event Staked(address indexed token, address indexed staker_, uint256 requestedAmount_, uint256 stakedAmount_);\\n\\n    /**\\n     * Fixed periods. For an open ended contract use end dates from very distant future.\\n     */\\n    constructor (\\n        string memory name_,\\n        address tokenAddress_,\\n        uint stakingStarts_,\\n        uint stakingEnds_,\\n        uint withdrawStarts_,\\n        uint withdrawEnds_,\\n        uint256 stakingCap_) public {\\n        name = name_;\\n        require(tokenAddress_ != address(0), \\\"Festaking: 0 address\\\");\\n        tokenAddress = tokenAddress_;\\n\\n        require(stakingStarts_ > 0, \\\"Festaking: zero staking start time\\\");\\n        if (stakingStarts_ < now) {\\n            stakingStarts = now;\\n        } else {\\n            stakingStarts = stakingStarts_;\\n        }\\n\\n        require(stakingEnds_ >= stakingStarts, \\\"Festaking: staking end must be after staking starts\\\");\\n        stakingEnds = stakingEnds_;\\n\\n        require(withdrawStarts_ >= stakingEnds, \\\"Festaking: withdrawStarts must be after staking ends\\\");\\n        withdrawStarts = withdrawStarts_;\\n\\n        require(withdrawEnds_ >= withdrawStarts, \\\"Festaking: withdrawEnds must be after withdraw starts\\\");\\n        withdrawEnds = withdrawEnds_;\\n\\n        require(stakingCap_ >= 0, \\\"Festaking: stakingCap cannot be negative\\\");\\n        stakingCap = stakingCap_;\\n    }\\n\\n    function stakeOf(address account) external override view returns (uint256) {\\n        return _stakes[account];\\n    }\\n\\n    function stakeFor(address staker, uint256 amount)\\n    external\\n    override\\n    _positive(amount)\\n    _realAddress(staker)\\n    _realAddress(msg.sender)\\n    returns (bool) {\\n        return _stake(msg.sender, staker, amount);\\n    }\\n\\n    /**\\n    * Requirements:\\n    * - `amount` Amount to be staked\\n    */\\n    function stake(uint256 amount)\\n    external\\n    override\\n    _positive(amount)\\n    _realAddress(msg.sender)\\n    returns (bool) {\\n        address from = msg.sender;\\n        return _stake(from, from, amount);\\n    }\\n\\n    function _stake(address payer, address staker, uint256 amount)\\n    virtual\\n    internal\\n    _after(stakingStarts)\\n    _before(stakingEnds)\\n    _positive(amount)\\n    returns (bool) {\\n        // check the remaining amount to be staked\\n        // For pay per transfer tokens we limit the cap on incoming tokens for simplicity. This might\\n        // mean that cap may not necessary fill completely which is ok.\\n        uint256 remaining = amount;\\n        if (stakingCap > 0 && remaining > (stakingCap.sub(stakedBalance))) {\\n            remaining = stakingCap.sub(stakedBalance);\\n        }\\n        // These requires are not necessary, because it will never happen, but won't hurt to double check\\n        // this is because stakedTotal and stakedBalance are only modified in this method during the staking period\\n        require(remaining > 0, \\\"Festaking: Staking cap is filled\\\");\\n        require((remaining + stakedTotal) <= stakingCap, \\\"Festaking: this will increase staking amount pass the cap\\\");\\n        // Update remaining in case actual amount paid was different.\\n        remaining = _payMe(payer, remaining, tokenAddress);\\n        emit Staked(tokenAddress, staker, amount, remaining);\\n\\n        // Transfer is completed\\n        stakedBalance = stakedBalance.add(remaining);\\n        stakedTotal = stakedTotal.add(remaining);\\n        _stakes[staker] = _stakes[staker].add(remaining);\\n        return true;\\n    }\\n\\n    function _payMe(address payer, uint256 amount, address token)\\n    internal\\n    returns (uint256) {\\n        return _payTo(payer, address(this), amount, token);\\n    }\\n\\n    function _payTo(address allower, address receiver, uint256 amount, address token)\\n    internal\\n    returns (uint256) {\\n        // Request to transfer amount from the contract to receiver.\\n        // contract does not own the funds, so the allower must have added allowance to the contract\\n        // Allower is the original owner.\\n        return SafeAmount.safeTransferFrom(token, allower, receiver, amount);\\n    }\\n\\n    modifier _realAddress(address addr) {\\n        require(addr != address(0), \\\"Festaking: zero address\\\");\\n        _;\\n    }\\n\\n    modifier _positive(uint256 amount) {\\n        require(amount >= 0, \\\"Festaking: negative amount\\\");\\n        _;\\n    }\\n\\n    modifier _after(uint eventTime) {\\n        require(now >= eventTime, \\\"Festaking: bad timing for the request\\\");\\n        _;\\n    }\\n\\n    modifier _before(uint eventTime) {\\n        require(now < eventTime, \\\"Festaking: bad timing for the request\\\");\\n        _;\\n    }\\n}\"\r\n    },\r\n    \"/home/naiemk/nk/open-staking/contracts/staking/FestakedRewardContinuation.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./OpenEndedRewardManager.sol\\\";\\nimport \\\"./IFestakeRewardManager.sol\\\";\\nimport \\\"./IFestakeWithdrawer.sol\\\";\\nimport \\\"../common/Constants.sol\\\";\\n\\n/**\\n * Reward continuation can be used to add reward to any staking.\\n * We cannot withdraw or stake from here, but we can withdrawRewards.\\n * Key is to do a shaddow management of stakes on this contract.\\n */\\ncontract FestakedRewardContinuation is OpenEndedRewardManager {\\n    IFestaked public targetStake;\\n    bool initialSync = false;\\n    constructor(\\n        address targetStake_,\\n        address tokenAddress_,\\n        address rewardTokenAddress_) OpenEndedRewardManager(\\n            \\\"RewardContinuation\\\", tokenAddress_, rewardTokenAddress_, now, Constants.Future2100,\\n            Constants.Future2100+1, Constants.Future2100+2, 2**128) public {\\n            targetStake = IFestaked(targetStake_);\\n    }\\n\\n    function initialize() public virtual returns (bool) {\\n        require(!initialSync, \\\"FRC: Already initialized\\\");\\n        require(now >= targetStake.stakingEnds(), \\n            \\\"FRC: Bad timing. Cannot initialize before target stake contribution is closed\\\");\\n        uint256 stakedBalance_ = targetStake.stakedBalance();\\n        stakedTotal = stakedBalance_;\\n        stakedBalance = stakedBalance_;\\n        initialSync = true;\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Checks the current stake against the original.\\n     * runs a dummy withdraw or stake then calculates the rewards accordingly.\\n     */\\n    function rewardOf(address staker)\\n    external override view returns (uint256) {\\n        require(initialSync, \\\"FRC: Run initialSync\\\");\\n        if (_stakes[staker] == 0) {\\n            uint256 remoteStake = _remoteStake(staker);\\n            return _calcRewardOf(staker, stakedBalance, remoteStake);\\n        }\\n        return _calcRewardOf(staker, stakedBalance, _stakes[staker]);\\n    }\\n\\n    function _stake(address, address, uint256)\\n    override\\n    virtual\\n    internal\\n    returns (bool)\\n    {\\n        require(false, \\\"RewardContinuation: Stake not supported\\\");\\n    }\\n\\n    function withdraw(uint256) external override virtual returns (bool) {\\n        require(false, \\\"RewardContinuation: Withdraw not supported\\\");\\n    }\\n\\n    function _addMarginalReward()\\n    internal override virtual returns (bool) {\\n        address me = address(this);\\n        IERC20 _rewardToken = rewardToken;\\n        uint256 amount = _rewardToken.balanceOf(me).sub(rewardsTotal);\\n        // We don't carry stakes here\\n        // if (address(_rewardToken) == tokenAddress) {\\n        //     amount = amount.sub(...);\\n        // }\\n        if (amount == 0) {\\n            return true; // No reward to add. Its ok. No need to fail callers.\\n        }\\n        rewardsTotal = rewardsTotal.add(amount);\\n        fakeRewardsTotal = fakeRewardsTotal.add(amount);\\n    }\\n\\n    function withdrawRewardsFor(address staker) external returns (uint256) {\\n        require(msg.sender != address(0), \\\"OERM: Bad address\\\");\\n        return _withdrawRewardsForRemote(staker);\\n    }\\n\\n    function withdrawRewards() external override returns (uint256) {\\n        require(msg.sender != address(0), \\\"OERM: Bad address\\\");\\n        return _withdrawRewardsForRemote(msg.sender);\\n    }\\n\\n    /**\\n     * @dev it is important to know there will be no more stake on the remote side\\n     */\\n    function _withdrawRewardsForRemote(address staker) internal returns(uint256) {\\n        require(initialSync, \\\"FRC: Run initialSync\\\");\\n        uint256 currentStake = Festaked._stakes[staker];\\n        uint256 remoteStake = _remoteStake(staker);\\n        uint256 stakedBalance_ = targetStake.stakedBalance();\\n        // Make sure total staked hasnt gone up on the other side.\\n        require(stakedBalance_ <= stakedTotal, \\\"FRC: Remote side staked total has increased!\\\");\\n        require(currentStake == 0 || remoteStake <= currentStake, \\\"FRC: Cannot stake more on the remote side\\\");\\n        if (currentStake == 0) {\\n            // First time. Replicate the stake.\\n            _stakes[staker] = remoteStake;\\n            _withdrawRewards(staker);\\n        } else if (remoteStake < currentStake) {\\n            // This means user has withdrawn remotely! Run the withdraw here to match remote.\\n            uint256 amount = currentStake.sub(remoteStake);\\n            _withdraw(staker, amount);\\n            require(_stakes[staker] == remoteStake, \\\"FRC: Wirhdraw simulation didn't happen correctly!\\\");\\n        } else {\\n            _withdrawRewards(staker);\\n        }\\n    }\\n\\n    function _withdraw(address _staker, uint256 amount)\\n    internal override virtual returns (bool) {\\n        uint256 actualPay = _withdrawOnlyUpdateState(_staker, amount);\\n        // We do not have main token to pay. This is just a simulation of withdraw\\n        // IERC20(tokenAddress).safeTransfer(_staker, amount);\\n        if (actualPay != 0) {\\n            rewardToken.safeTransfer(_staker, actualPay);\\n        }\\n        emit PaidOut(tokenAddress, address(rewardToken), _staker, 0, actualPay);\\n        return true;\\n    }\\n\\n    function _remoteStake(address staker) internal view returns (uint256){\\n        return targetStake.stakeOf(staker);\\n    }\\n}\"\r\n    },\r\n    \"/home/naiemk/nk/open-staking/contracts/staking/IFestakeRewardManager.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Ferrum Staking interface for adding reward\\n */\\ninterface IFestakeRewardManager {\\n    /**\\n     * @dev legacy add reward. To be used by contract support time limitted rewards.\\n     */\\n    function addReward(uint256 rewardAmount) external returns (bool);\\n\\n    /**\\n     * @dev withdraw rewards for the user.\\n     * The only option is to withdraw all rewards is one go.\\n     */\\n    function withdrawRewards() external returns (uint256);\\n\\n    /**\\n     * @dev marginal rewards is to be used by contracts supporting ongoing rewards.\\n     * Send the reward to the contract address first.\\n     */\\n    function addMarginalReward() external returns (bool);\\n\\n    function rewardToken() external view returns (IERC20);\\n\\n    function rewardsTotal() external view returns (uint256);\\n\\n    /**\\n     * @dev returns current rewards for an address\\n     */\\n    function rewardOf(address addr) external view returns (uint256);\\n}\"\r\n    },\r\n    \"/home/naiemk/nk/open-staking/contracts/staking/IFestakeWithdrawer.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Ferrum Staking interface for adding reward\\n */\\ninterface IFestakeWithdrawer {\\n\\n    event PaidOut(address indexed token, address indexed rewardToken, address indexed staker_, uint256 amount_, uint256 reward_);\\n\\n    /**\\n     * @dev withdraws a certain amount and distributes rewards.\\n     */\\n    function withdraw(uint256 amount) external returns (bool);\\n}\"\r\n    },\r\n    \"/home/naiemk/nk/open-staking/contracts/staking/IFestaked.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Ferrum Staking interface\\n */\\ninterface IFestaked {\\n    \\n    event Staked(address indexed token, address indexed staker_, uint256 requestedAmount_, uint256 stakedAmount_);\\n    event PaidOut(address indexed token, address indexed rewardToken, address indexed staker_, uint256 amount_, uint256 reward_);\\n\\n    function stake (uint256 amount) external returns (bool);\\n\\n    function stakeFor (address staker, uint256 amount) external returns (bool);\\n\\n    function stakeOf(address account) external view returns (uint256);\\n\\n    function tokenAddress() external view returns (address);\\n\\n    function stakedTotal() external view returns (uint256);\\n\\n    function stakedBalance() external view returns (uint256);\\n\\n    function stakingStarts() external view returns (uint256);\\n\\n    function stakingEnds() external view returns (uint256);\\n}\"\r\n    },\r\n    \"/home/naiemk/nk/open-staking/contracts/staking/OpenEndedRewardManager.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./IFestakeRewardManager.sol\\\";\\nimport \\\"./IFestakeWithdrawer.sol\\\";\\nimport \\\"./Festaked.sol\\\";\\n\\n/**\\n * Allows stake, unstake, and add reward at any time.\\n * stake and reward token can be different.\\n */\\ncontract OpenEndedRewardManager is \\n        Festaked,\\n        IFestakeRewardManager, IFestakeWithdrawer {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    IERC20 public override rewardToken;\\n    uint256 public override rewardsTotal;\\n    uint256 public fakeRewardsTotal;\\n    mapping (address=>uint256) fakeRewards;\\n\\n    constructor(\\n        string memory name_,\\n        address tokenAddress_,\\n        address rewardTokenAddress_,\\n        uint stakingStarts_,\\n        uint stakingEnds_,\\n        uint withdrawStarts_,\\n        uint withdrawEnds_,\\n        uint256 stakingCap_) Festaked(name_, tokenAddress_, stakingStarts_, stakingEnds_,\\n            withdrawStarts_, withdrawEnds_, stakingCap_) public {\\n            rewardToken = IERC20(rewardTokenAddress_);\\n    }\\n\\n    /**\\n     * First send the rewards to this contract, then call this method.\\n     * Designed to be called by smart contracts.\\n     */\\n    function addMarginalReward()\\n    external override returns (bool) {\\n        return _addMarginalReward();\\n    }\\n\\n    function _addMarginalReward()\\n    internal virtual returns (bool) {\\n        address me = address(this);\\n        IERC20 _rewardToken = rewardToken;\\n        uint256 amount = _rewardToken.balanceOf(me).sub(rewardsTotal);\\n        if (address(_rewardToken) == tokenAddress) {\\n            amount = amount.sub(stakedBalance);\\n        }\\n        if (amount == 0) {\\n            return true; // No reward to add. Its ok. No need to fail callers.\\n        }\\n        rewardsTotal = rewardsTotal.add(amount);\\n        fakeRewardsTotal = fakeRewardsTotal.add(amount);\\n        return true;\\n    }\\n\\n    function addReward(uint256 rewardAmount)\\n    external override returns (bool) {\\n        require(rewardAmount != 0, \\\"OERM: rewardAmount is zero\\\");\\n        rewardToken.safeTransferFrom(msg.sender, address(this), rewardAmount);\\n        _addMarginalReward();\\n    }\\n\\n    function fakeRewardOf(address staker) external view returns (uint256) {\\n        return fakeRewards[staker];\\n    }\\n\\n    function rewardOf(address staker)\\n    external override virtual view returns (uint256) {\\n        uint256 stake = Festaked._stakes[staker];\\n        return _calcRewardOf(staker, stakedBalance, stake);\\n    }\\n\\n    function _calcRewardOf(address staker, uint256 totalStaked_, uint256 stake)\\n    internal view returns (uint256) {\\n        if (stake == 0) {\\n            return 0;\\n        }\\n        uint256 fr = fakeRewards[staker];\\n        uint256 rew = _calcReward(totalStaked_, fakeRewardsTotal, stake);\\n        return rew > fr ? rew.sub(fr) : 0; // Ignoring the overflow problem\\n    }\\n\\n    function withdrawRewards() external override virtual returns (uint256) {\\n        require(msg.sender != address(0), \\\"OERM: Bad address\\\");\\n        return _withdrawRewards(msg.sender);\\n    }\\n\\n    /**\\n     * First withdraw all rewards, than withdarw it all, then stake back the remaining.\\n     */\\n    function withdraw(uint256 amount) external override virtual returns (bool) {\\n        address _staker = msg.sender;\\n        return _withdraw(_staker, amount);\\n    }\\n\\n    function _withdraw(address _staker, uint256 amount)\\n    internal virtual returns (bool) {\\n        if (amount == 0) {\\n            return true;\\n        }\\n        uint256 actualPay = _withdrawOnlyUpdateState(_staker, amount);\\n        IERC20(tokenAddress).safeTransfer(_staker, amount);\\n        if (actualPay != 0) {\\n            rewardToken.safeTransfer(_staker, actualPay);\\n        }\\n        emit PaidOut(tokenAddress, address(rewardToken), _staker, amount, actualPay);\\n        return true;\\n    }\\n\\n    function _withdrawOnlyUpdateState(address _staker, uint256 amount)\\n    internal virtual returns (uint256) {\\n        uint256 userStake = _stakes[_staker];\\n        require(amount <= userStake, \\\"OERM: Not enough balance\\\");\\n        uint256 userFake = fakeRewards[_staker];\\n        uint256 fakeTotal = fakeRewardsTotal;\\n        uint256 _stakedBalance = stakedBalance;\\n        uint256 actualPay = _calcWithdrawRewards(userStake, userFake, _stakedBalance, fakeTotal);\\n\\n        uint256 fakeRewAmount = _calculateFakeRewardAmount(amount, fakeTotal, _stakedBalance);\\n\\n        fakeRewardsTotal = fakeRewardsTotal.sub(fakeRewAmount);\\n        fakeRewards[_staker] = userFake.add(actualPay).sub(fakeRewAmount);\\n        rewardsTotal = rewardsTotal.sub(actualPay);\\n        stakedBalance = _stakedBalance.sub(amount);\\n        _stakes[_staker] = userStake.sub(amount);\\n        return actualPay;\\n    }\\n\\n    function _stake(address payer, address staker, uint256 amount)\\n    virtual\\n    override\\n    internal\\n    // _after(stakingStarts)\\n    // _before(withdrawEnds)\\n    // _positive(amount)\\n    // _realAddress(payer)\\n    // _realAddress(staker)\\n    returns (bool) {\\n        return _stakeNoPreAction(payer, staker, amount);\\n    }\\n\\n    function _stakeNoPreAction(address payer, address staker, uint256 amount)\\n    internal\\n    returns (bool) {\\n        uint256 remaining = amount;\\n        uint256 _stakingCap = stakingCap;\\n        uint256 _stakedBalance = stakedBalance;\\n        // check the remaining amount to be staked\\n        // For pay per transfer tokens we limit the cap on incoming tokens for simplicity. This might\\n        // mean that cap may not necessary fill completely which is ok.\\n        if (_stakingCap != 0 && remaining > (_stakingCap.sub(_stakedBalance))) {\\n            remaining = _stakingCap.sub(_stakedBalance);\\n        }\\n        // These requires are not necessary, because it will never happen, but won't hurt to double check\\n        // this is because stakedTotal and stakedBalance are only modified in this method during the staking period\\n        require(remaining != 0, \\\"OERM: Staking cap is filled\\\");\\n        require(stakingCap == 0 || remaining.add(stakedBalance) <= stakingCap, \\\"OERM: this will increase staking amount pass the cap\\\");\\n        // Update remaining in case actual amount paid was different.\\n        remaining = _payMe(payer, remaining, tokenAddress);\\n        require(_stakeUpdateStateOnly(staker, remaining), \\\"OERM: Error staking\\\");\\n        // To ensure total is only updated here. Not when simulating the stake.\\n        stakedTotal = stakedTotal.add(remaining);\\n        emit Staked(tokenAddress, staker, amount, remaining);\\n    }\\n\\n    function _stakeUpdateStateOnly(address staker, uint256 amount)\\n    internal returns (bool) {\\n        uint256 _stakedBalance = stakedBalance;\\n        uint256 _fakeTotal = fakeRewardsTotal;\\n        bool isNotNew = _stakedBalance != 0;\\n        uint256 curRew = isNotNew ?\\n            _calculateFakeRewardAmount(amount, _fakeTotal, _stakedBalance) :\\n            _fakeTotal;\\n\\n        _stakedBalance = _stakedBalance.add(amount);\\n        _stakes[staker] = _stakes[staker].add(amount);\\n        fakeRewards[staker] = fakeRewards[staker].add(curRew);\\n\\n        stakedBalance = _stakedBalance;\\n        if (isNotNew) {\\n            fakeRewardsTotal = _fakeTotal.add(curRew);\\n        }\\n        return true;\\n    }\\n\\n    function _calculateFakeRewardAmount(\\n        uint256 amount, uint256 baseFakeTotal, uint256 baseStakeTotal\\n    ) internal pure returns (uint256) {\\n        return amount.mul(baseFakeTotal).div(baseStakeTotal);\\n    }\\n\\n    function _withdrawRewards(address _staker) internal returns (uint256) {\\n        uint256 userStake = _stakes[_staker];\\n        uint256 _stakedBalance = stakedBalance;\\n        uint256 totalFake = fakeRewardsTotal;\\n        uint256 userFake = fakeRewards[_staker];\\n        uint256 actualPay = _calcWithdrawRewards(userStake, userFake, _stakedBalance, totalFake);\\n        rewardsTotal = rewardsTotal.sub(actualPay);\\n        fakeRewards[_staker] = fakeRewards[_staker].add(actualPay);\\n        if (actualPay != 0) {\\n            rewardToken.safeTransfer(_staker, actualPay);\\n        }\\n        emit PaidOut(tokenAddress, address(rewardToken), _staker, 0, actualPay);\\n        return actualPay;\\n    }\\n\\n    function _calcWithdrawRewards(\\n        uint256 _stakedAmount,\\n        uint256 _userFakeRewards,\\n        uint256 _totalStaked,\\n        uint256 _totalFakeRewards)\\n    internal pure returns (uint256) {\\n        uint256 toPay = _calcReward(_totalStaked, _totalFakeRewards, _stakedAmount);\\n        return toPay > _userFakeRewards ? toPay.sub(_userFakeRewards) : 0; // Ignore rounding issue\\n    }\\n\\n    function _calcReward(uint256 total, uint256 fakeTotal, uint256 staked)\\n    internal pure returns (uint256) {\\n        return fakeTotal.mul(staked).div(total);\\n    }\\n}\"\r\n    },\r\n    \"/home/naiemk/nk/open-staking/contracts/staking/beta/FestakedRewardContinuationBeta.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../FestakedRewardContinuation.sol\\\";\\n\\n/**\\n * A beta version of FestakedRewardContinuation with ability of sweeping the rewards\\n * in case something went wrong.\\n * NOTE: Once you sweep rewards to owner, do NOT use the contract any more.\\n */\\ncontract FestakedRewardContinuationBeta is FestakedRewardContinuation, Ownable {\\n    constructor(\\n        address targetStake_,\\n        address tokenAddress_,\\n        address rewardTokenAddress_) FestakedRewardContinuation(\\n            targetStake_, tokenAddress_, rewardTokenAddress_) public {}\\n    bool nuked = false;\\n\\n    function initialize() public override returns (bool) {\\n        require(!nuked, \\\"FRCB: Already nuked\\\");\\n        return FestakedRewardContinuation.initialize();\\n    }\\n\\n    function sweepToOwner() onlyOwner() external {\\n        uint256 balance = rewardToken.balanceOf(address(this));\\n        rewardToken.safeTransfer(owner(), balance);\\n        initialSync = false; // Make sure contract cannot be used any more.\\n        nuked = true;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetStake_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward_\",\"type\":\"uint256\"}],\"name\":\"PaidOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestedAmount_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedAmount_\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addMarginalReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"fakeRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fakeRewardsTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"rewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingEnds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingStarts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepToOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetStake\",\"outputs\":[{\"internalType\":\"contract IFestaked\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEnds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"withdrawRewardsFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStarts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FestakedRewardContinuationBeta","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"000000000000000000000000bdcd10094fea50a42997aeb5c8b715f34c5c7fe200000000000000000000000069a95185ee2a045cdc4bcd1b1df10710395e4e2300000000000000000000000069a95185ee2a045cdc4bcd1b1df10710395e4e23","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}