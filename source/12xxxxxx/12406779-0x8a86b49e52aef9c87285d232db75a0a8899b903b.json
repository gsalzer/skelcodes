{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract MU_Membership is Ownable{\r\n    // gold card owner : {address: owner, uint: price}\r\n    // // if price == 0, owner is not going to sell \r\n    // // if price != 0, owner is going to sell\r\n    receive() payable external {\r\n    }\r\n\r\n    struct Gold {\r\n        address payable owner;\r\n        uint price;\r\n        bool sell_approve;\r\n    }\r\n    // gold card owner list\r\n    mapping (uint => Gold) public gold_list;\r\n    // gold card owner account\r\n    uint public gold_owner_count = 0;\r\n    // gold card default price\r\n    uint constant gold_price = 15e18;\r\n    // gold card max amount\r\n    uint constant gold_max = 15;\r\n    event GoldPurchased (\r\n        address payable owner,\r\n        uint price,\r\n        bool sell_approve\r\n    );\r\n    event GoldSell (\r\n        address payable owner,\r\n        uint price,\r\n        bool sell_approve\r\n    );\r\n    event GoldApprove (\r\n        address payable owner,\r\n        uint price,\r\n        bool sell_approve\r\n    );\r\n    event GoldBought (\r\n        address payable owner,\r\n        uint price,\r\n        bool sell_approve\r\n    );\r\n\r\n    struct Silver {\r\n        address payable owner;\r\n        uint price;\r\n        bool sell_approve;\r\n    }\r\n    // silver card owner list\r\n    mapping (uint => Silver) public silver_list;\r\n    // silver card owner account\r\n    uint public silver_owner_count = 0;\r\n    // silver card default price\r\n    uint constant silver_price = 1e18;\r\n    // silver card max amount\r\n    uint constant silver_max = 150;\r\n    event SilverPurchased (\r\n        address payable owner,\r\n        uint price,\r\n        bool sell_approve\r\n    );\r\n    event SilverSell (\r\n        address payable owner,\r\n        uint price,\r\n        bool sell_approve\r\n    );\r\n    event SilverApprove (\r\n        address payable owner,\r\n        uint price,\r\n        bool sell_approve\r\n    );\r\n    event SilverBought (\r\n        address payable owner,\r\n        uint price,\r\n        bool sell_approve\r\n    );    \r\n\r\n    struct Bronze {\r\n        address payable owner;\r\n        uint price;\r\n        bool sell_approve;\r\n    }\r\n    // bronze card owner list\r\n    mapping (uint => Bronze) public bronze_list;\r\n    // bronze card owner account\r\n    uint public bronze_owner_count = 0;\r\n    // bronze card default price\r\n    uint constant bronze_price = 25e16;\r\n    // bronze card max amount\r\n    uint constant bronze_max = 1500;\r\n    event BronzePurchased (\r\n        address payable owner,\r\n        uint price,\r\n        bool sell_approve\r\n    );\r\n    event BronzeSell (\r\n        address payable owner,\r\n        uint price,\r\n        bool sell_approve\r\n    );\r\n    event BronzeApprove (\r\n        address payable owner,\r\n        uint price,\r\n        bool sell_approve\r\n    );\r\n    event BronzeBought (\r\n        address payable owner,\r\n        uint price,\r\n        bool sell_approve\r\n    );        \r\n\r\n\r\n    //////////////////////////////////////////////\r\n    //////////        gold            ////////////\r\n    //////////////////////////////////////////////\r\n\r\n    // gold card buy (MU -> user)\r\n    function gold_buy() public payable {\r\n        // require : original card is remaining.\r\n        require( gold_owner_count < gold_max );\r\n        // require : ETH is greater than gold card price\r\n        require( msg.value == gold_price );\r\n        // register new gold owner\r\n        gold_list[gold_owner_count] = Gold(msg.sender, 0, false);\r\n        gold_owner_count++;\r\n        emit GoldPurchased(msg.sender, 0, false);\r\n    }\r\n    // are going to sell gold card\r\n    // check if the function caller is gold card owner \r\n    function gold_sell(uint card_id, uint _price) public payable returns(bool) {\r\n        // require : there is gold card with `card_id`\r\n        require(card_id < gold_owner_count, \"Card ID can not be exceed current card owners amount\");\r\n        // require : can not card price as zero or negative \r\n        require(_price > 0, \"Card price need to be set greater than zero.\");\r\n        gold_list[card_id].price = _price;\r\n        emit GoldSell(msg.sender, gold_list[card_id].price, gold_list[card_id].sell_approve);\r\n        return true;\r\n    }\r\n    // approve gold card buy request\r\n    function gold_approve (uint card_id) public returns(bool) {\r\n        // require : card_id need to be less than card owners amount\r\n        require(card_id < gold_owner_count, \"Card id has to be less than card owner amount\");\r\n        // require : only card owner can approve the card selling\r\n        require(msg.sender == gold_list[card_id].owner, \"Only card owner can approve the card selling\");\r\n        gold_list[card_id].sell_approve = true;\r\n        emit GoldApprove(msg.sender, gold_list[card_id].price, gold_list[card_id].sell_approve);\r\n        return true;\r\n    }\r\n    // gold card buy (user -> user)\r\n    function gold_request_buy (uint card_id) public payable {\r\n        // require: card is placed on the sell list\r\n        require( gold_list[card_id].price > 0 );\r\n        // require: request buy is greater than minimum price\r\n        require( msg.value == gold_list[card_id].price );\r\n        // require : check if card owner approves the request\r\n        require( gold_list[card_id].sell_approve == true );\r\n        // transfer ETH from new owner to old owner\r\n        gold_list[card_id].owner.transfer(msg.value);\r\n        // move the card ownership from old owner to new owner\r\n        gold_list[card_id].owner = msg.sender;\r\n        gold_list[card_id].sell_approve = false;\r\n        gold_list[card_id].price = 0;\r\n        emit GoldBought(msg.sender, gold_list[card_id].price, gold_list[card_id].sell_approve);\r\n    }\r\n    //////////////////////////////////////////////\r\n    //////////        silver          ////////////\r\n    //////////////////////////////////////////////\r\n    // silver card buy (MU -> user)\r\n    function silver_buy() public payable {\r\n        // require : original card is remaining.\r\n        require( silver_owner_count < silver_max );\r\n        // require : ETH is greater than silver card price\r\n        require( msg.value == silver_price );\r\n        // register new silver owner\r\n        silver_list[silver_owner_count] = Silver(msg.sender, 0, false);\r\n        silver_owner_count++;\r\n        emit SilverPurchased(msg.sender, 0, false);\r\n    }\r\n    // are going to sell silver card\r\n    // check if the function caller is silver card owner \r\n    function silver_sell(uint card_id, uint _price) public payable returns(bool) {\r\n        // require : there is silver card with `card_id`\r\n        require(card_id < silver_owner_count, \"Card ID can not be exceed current card owners amount\");\r\n        // require : can not card price as zero or negative \r\n        require(_price > 0, \"Card price need to be set greater than zero.\");\r\n        silver_list[card_id].price = _price;\r\n        emit SilverSell(msg.sender, silver_list[card_id].price, silver_list[card_id].sell_approve);\r\n        return true;\r\n    }\r\n    // approve silver card buy request\r\n    function silver_approve (uint card_id) public returns(bool) {\r\n        // require : card_id need to be less than card owners amount\r\n        require(card_id < silver_owner_count, \"Card id has to be less than card owner amount\");\r\n        // require : only card owner can approve the card selling\r\n        require(msg.sender == silver_list[card_id].owner, \"Only card owner can approve the card selling\");\r\n        silver_list[card_id].sell_approve = true;\r\n        emit SilverApprove(msg.sender, silver_list[card_id].price, silver_list[card_id].sell_approve);\r\n        return true;\r\n    }\r\n    // silver card buy (user -> user)\r\n    function silver_request_buy (uint card_id) public payable {\r\n        // require: card is placed on the sell list\r\n        require( silver_list[card_id].price > 0 );\r\n        // require: request buy is greater than minimum price\r\n        require( msg.value == silver_list[card_id].price );\r\n        // require : check if card owner approves the request\r\n        require( silver_list[card_id].sell_approve == true );\r\n        // transfer ETH from new owner to old owner\r\n        silver_list[card_id].owner.transfer(msg.value);\r\n        // move the card ownership from old owner to new owner\r\n        silver_list[card_id].owner = msg.sender;\r\n        silver_list[card_id].sell_approve = false;\r\n        silver_list[card_id].price = 0;\r\n        emit SilverBought(msg.sender, silver_list[card_id].price, silver_list[card_id].sell_approve);\r\n    }    \r\n    //////////////////////////////////////////////\r\n    //////////        Bronze          ////////////\r\n    //////////////////////////////////////////////\r\n    // bronze card buy (MU -> user)\r\n    function bronze_buy() public payable {\r\n        // require : original card is remaining.\r\n        require( bronze_owner_count < bronze_max );\r\n        // require : ETH is greater than bronze card price\r\n        require( msg.value == bronze_price );\r\n        // register new bronze owner\r\n        bronze_list[bronze_owner_count] = Bronze(msg.sender, 0, false);\r\n        bronze_owner_count++;\r\n        emit BronzePurchased(msg.sender, 0, false);\r\n    }\r\n    // are going to sell bronze card\r\n    // check if the function caller is bronze card owner \r\n    function bronze_sell(uint card_id, uint _price) public payable returns(bool) {\r\n        // require : there is bronze card with `card_id`\r\n        require(card_id < bronze_owner_count, \"Card ID can not be exceed current card owners amount\");\r\n        // require : can not card price as zero or negative \r\n        require(_price > 0, \"Card price need to be set greater than zero.\");\r\n        bronze_list[card_id].price = _price;\r\n        emit BronzeSell(msg.sender, bronze_list[card_id].price, bronze_list[card_id].sell_approve);\r\n        return true;\r\n    }\r\n    // approve bronze card buy request\r\n    function bronze_approve (uint card_id) public returns(bool) {\r\n        // require : card_id need to be less than card owners amount\r\n        require(card_id < bronze_owner_count, \"Card id has to be less than card owner amount\");\r\n        // require : only card owner can approve the card selling\r\n        require(msg.sender == bronze_list[card_id].owner, \"Only card owner can approve the card selling\");\r\n        bronze_list[card_id].sell_approve = true;\r\n        emit BronzeApprove(msg.sender, bronze_list[card_id].price, bronze_list[card_id].sell_approve);\r\n        return true;\r\n    }\r\n    // bronze card buy (user -> user)\r\n    function bronze_request_buy (uint card_id) public payable {\r\n        // require: card is placed on the sell list\r\n        require( bronze_list[card_id].price > 0 );\r\n        // require: request buy is greater than minimum price\r\n        require( msg.value == bronze_list[card_id].price );\r\n        // require : check if card owner approves the request\r\n        require( bronze_list[card_id].sell_approve == true );\r\n        // transfer ETH from new owner to old owner\r\n        bronze_list[card_id].owner.transfer(msg.value);\r\n        // move the card ownership from old owner to new owner\r\n        bronze_list[card_id].owner = msg.sender;\r\n        bronze_list[card_id].sell_approve = false;\r\n        bronze_list[card_id].price = 0;\r\n        emit BronzeBought(msg.sender, bronze_list[card_id].price, bronze_list[card_id].sell_approve);\r\n    }    \r\n\r\n    function reclaimETH() external onlyOwner{\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sell_approve\",\"type\":\"bool\"}],\"name\":\"BronzeApprove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sell_approve\",\"type\":\"bool\"}],\"name\":\"BronzeBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sell_approve\",\"type\":\"bool\"}],\"name\":\"BronzePurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sell_approve\",\"type\":\"bool\"}],\"name\":\"BronzeSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sell_approve\",\"type\":\"bool\"}],\"name\":\"GoldApprove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sell_approve\",\"type\":\"bool\"}],\"name\":\"GoldBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sell_approve\",\"type\":\"bool\"}],\"name\":\"GoldPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sell_approve\",\"type\":\"bool\"}],\"name\":\"GoldSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sell_approve\",\"type\":\"bool\"}],\"name\":\"SilverApprove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sell_approve\",\"type\":\"bool\"}],\"name\":\"SilverBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sell_approve\",\"type\":\"bool\"}],\"name\":\"SilverPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sell_approve\",\"type\":\"bool\"}],\"name\":\"SilverSell\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"card_id\",\"type\":\"uint256\"}],\"name\":\"bronze_approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bronze_buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bronze_list\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sell_approve\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bronze_owner_count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"card_id\",\"type\":\"uint256\"}],\"name\":\"bronze_request_buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"card_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"bronze_sell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"card_id\",\"type\":\"uint256\"}],\"name\":\"gold_approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gold_buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gold_list\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sell_approve\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gold_owner_count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"card_id\",\"type\":\"uint256\"}],\"name\":\"gold_request_buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"card_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"gold_sell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reclaimETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"card_id\",\"type\":\"uint256\"}],\"name\":\"silver_approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"silver_buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"silver_list\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sell_approve\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"silver_owner_count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"card_id\",\"type\":\"uint256\"}],\"name\":\"silver_request_buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"card_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"silver_sell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MU_Membership","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3d5fcd7d73630134383d95d2ce7fcf5a04783dc94d17526c6957f799679a4aba"}]}