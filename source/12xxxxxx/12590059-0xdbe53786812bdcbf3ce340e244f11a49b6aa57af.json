{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.1;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISHP {\r\n  function balanceOfAt(address owner, uint256 blockNumber) external pure returns (uint256);\r\n  function totalSupplyAt(uint256 blockNumber) external pure returns (uint256);\r\n}\r\n\r\ninterface IVegaVesting {\r\n  function tranche_count() external view returns(uint8);\r\n  function withdraw_from_tranche(uint8 tranche_id) external;\r\n  function get_vested_for_tranche(address user, uint8 tranche_id) external view returns(uint256);\r\n  function user_total_all_tranches(address user) external view returns(uint256);\r\n}\r\n\r\ncontract VEGA_Pool is Ownable {\r\n\r\n  uint256 public constant EXEPECTED_VEGA = 422000 ether;\r\n  uint256 public constant EQUITY_RATIO = 2500;\r\n\r\n  uint256 public assignSharesCutoff;\r\n  uint256 public equityTokens;\r\n  uint256 public equityTokensRedeemed;\r\n  uint256 public preferentialTokens;\r\n  uint256 public preferentialTokensRedeemed;\r\n\r\n  address public preferentialAddress;\r\n\r\n  bool public initialized = false;\r\n\r\n  ISHP public shp;\r\n  IERC20 public vega;\r\n  IVegaVesting public vegaVesting;\r\n\r\n  uint256 public referenceBlock;\r\n\r\n  bool public voteComplete = false;\r\n  bool public approveDistribution = false;\r\n\r\n  mapping(address => uint256) public equityShares;\r\n  mapping(address => bool) public permittedEquityHolders;\r\n  mapping(uint256 => address) public equityHolders;\r\n  mapping(address => int8) public distributionVotes;\r\n  mapping(address => bool) public shpTokensRedeemed;\r\n\r\n  uint256 public totalEquityHolders;\r\n  uint256 public totalShares;\r\n  uint256 public totalVotes;\r\n  int256 public voteOutcome;\r\n  uint256 public shpRedemptionCount;\r\n\r\n  event VoteCast(int8 vote, address shareholder);\r\n  event TokensClaimed(uint256 amount, address recipient);\r\n  event ERC20TokenWithdrawn(uint256 amount, address tokenAddress);\r\n  event EtherWithdrawn(uint256 amount);\r\n  event EquityIssued(address holder, uint256 amount,\r\n    uint256 totalEquityHolders, uint256 totalShares);\r\n  event PreferentialTokensRedeemed(uint256 amount);\r\n  event EquityTokensRedeemed(address recipient, uint256 amount);\r\n  event ExcessTokensRedeemed(uint256 amount);\r\n  event PermittedEquityHolderAdded(address holder);\r\n  event VegaPoolInitialized(address vegaAddress, address vestingAddress,\r\n    address preferentialAddress, uint256 assignSharesCutoff,\r\n    uint256 referenceBlock, address shpTokenAddress);\r\n\r\n  // This modifier makes sure the contract has been initialized\r\n  modifier requireInitialized() {\r\n     require(initialized, \"Contract is not initialized.\");\r\n     _;\r\n  }\r\n\r\n  // This modifier makes sure the contract is not initialized\r\n  modifier notInitialized() {\r\n     require(!initialized, \"Contract has been initialized.\");\r\n     _;\r\n  }\r\n\r\n  receive() external payable { }\r\n\r\n  /**\r\n  * This function allows equity holders to vote on whether tokens should\r\n  * remain theirs, or whether they should be made available for redemption\r\n  * by SHP token holders.\r\n  *\r\n  * If they vote to allow SHP token holders to redeem VEGA from the contract\r\n  * then SHP token holders will be able to call the claimTokens function\r\n  * and the amount of VEGA will be calculated based on their SHP holding\r\n  * at the reference Ethereum block.\r\n  *\r\n  * Once the vote has been successfully completed, if the equity holders vote\r\n  * AGAINST distrubiton, they will be able to redeem tokens by calling\r\n  * redeemTokensViaEquity. If they vote FOR distribution they will not be\r\n  * able to redeem any tokens. Instead SHP token holders will be able to\r\n  * redeem tokens by calling claimTokens.\r\n  *\r\n  * _vote   the user's vote (1 = for, -1 = against)\r\n  **/\r\n  function castVote(int8 _vote) requireInitialized public {\r\n    require(block.timestamp > assignSharesCutoff,\r\n      \"Cannot vote whilst shares can still be assigned.\");\r\n    require(distributionVotes[msg.sender] == 0,\r\n      \"You have already cast your vote.\");\r\n    require(_vote == 1 || _vote == -1,\r\n      \"Vote must be 1 or -1\");\r\n    require(voteComplete == false,\r\n      \"Voting has already concluded.\");\r\n    require(equityShares[msg.sender] > 0,\r\n      \"You cannot vote without equity shares.\");\r\n    int256 weight = int256(getUserEquity(msg.sender));\r\n    distributionVotes[msg.sender] = _vote;\r\n    totalVotes += 1;\r\n    voteOutcome += (_vote * weight);\r\n    if(totalVotes == totalEquityHolders) {\r\n      voteComplete = true;\r\n      approveDistribution = voteOutcome > 0;\r\n    }\r\n    emit VoteCast(_vote, msg.sender);\r\n  }\r\n\r\n  /**\r\n  * This function withdraws any vested tokens and redeems the preferential\r\n  * tokens if they have not already been redeemed.\r\n  **/\r\n  function syncTokens() requireInitialized internal {\r\n    withdrawVestedTokens();\r\n    if(preferentialTokens > preferentialTokensRedeemed) {\r\n      redeemPreferentialTokens();\r\n    }\r\n  }\r\n\r\n  /**\r\n  * This function allows users that held SHP at the reference Ethereum block\r\n  * to claim VEGA from the smart contract, provided the equity holders have\r\n  * voted to permit them to do so.\r\n  *\r\n  * If permitted to do so, the equityTokens will be made available to users\r\n  * in direct proportion to the SHP held (divided by total supply) at the\r\n  * reference block.\r\n  **/\r\n  function claimTokens() requireInitialized public {\r\n    require(approveDistribution, \"Distribution is not approved\");\r\n    syncTokens();\r\n    require(preferentialTokens == preferentialTokensRedeemed,\r\n      \"Cannot claim until preferential tokens are redeemed.\");\r\n    uint256 shpBalance = shp.balanceOfAt(msg.sender, referenceBlock);\r\n    require(shpTokensRedeemed[msg.sender] == false,\r\n      \"SHP holder already claimed tokens.\");\r\n    uint256 vegaBalance = vega.balanceOf(address(this));\r\n    require(shpRedemptionCount > 0 || vegaBalance >= equityTokens,\r\n      \"Cannot claim until all equity tokens are fully vested.\");\r\n    uint256 shpSupply = shp.totalSupplyAt(referenceBlock);\r\n    uint256 mod = 1000000000000;\r\n    uint256 tokenAmount = (((shpBalance * mod) / shpSupply) *\r\n      equityTokens) / mod;\r\n    vega.transfer(msg.sender, tokenAmount);\r\n    equityTokensRedeemed += tokenAmount;\r\n    shpTokensRedeemed[msg.sender] = true;\r\n    shpRedemptionCount += 1;\r\n    emit TokensClaimed(tokenAmount, msg.sender);\r\n  }\r\n\r\n  /**\r\n  * This function allows the owner to withdraw any ERC20 which is not VEGA\r\n  * from the contract at-will. This can be used to redeem staking rewards,\r\n  * or other ERC20s which might end up in this contract by mistake, or by\r\n  * something like an airdrop.\r\n  *\r\n  * _tokenAddress    the contract address for the ERC20\r\n  **/\r\n  function withdrawArbitraryTokens(\r\n    address _tokenAddress\r\n  ) requireInitialized onlyOwner public {\r\n    require(_tokenAddress != address(vega),\r\n      \"VEGA cannot be withdrawn at-will.\");\r\n    IERC20 token = IERC20(_tokenAddress);\r\n    uint256 amount = token.balanceOf(address(this));\r\n    token.transfer(owner(), amount);\r\n    emit ERC20TokenWithdrawn(amount, _tokenAddress);\r\n  }\r\n\r\n  /**\r\n  * This function performs the same role as withdrawArbitraryTokens, except\r\n  * it is used to withdraw ETH.\r\n  **/\r\n  function withdrawEther() requireInitialized onlyOwner public {\r\n    uint256 amount = address(this).balance;\r\n    payable(owner()).transfer(amount);\r\n    emit EtherWithdrawn(amount);\r\n  }\r\n\r\n  /**\r\n  * This function can be called by anybody and it withdraws unlocked\r\n  * VEGA tokens from the vesting contract. The tokens are transferred\r\n  * to this contract, which allows them to be redeemed by the rightful owner\r\n  * when they call one of the redemption functions.\r\n  **/\r\n  function withdrawVestedTokens() requireInitialized internal {\r\n    for(uint8 i = 1; i < vegaVesting.tranche_count(); i++) {\r\n      if(vegaVesting.get_vested_for_tranche(address(this), i) > 0) {\r\n        vegaVesting.withdraw_from_tranche(i);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n  * This function allows the owner to issue equity to new users. This is done\r\n  * by assigning an absolute number of shares, which in turn dilutes all\r\n  * existing share holders.\r\n  *\r\n  * _holder    the Ethereum address of the equity holder\r\n  * _amount    the number of shares to be assigned to the holder\r\n  **/\r\n  function issueEquity(\r\n    address _holder,\r\n    uint256 _amount\r\n  ) requireInitialized onlyOwner public {\r\n    require(permittedEquityHolders[_holder],\r\n      \"The holder must be permitted to own equity.\");\r\n    require(assignSharesCutoff > block.timestamp,\r\n      \"The cutoff has passed for assigning shares.\");\r\n    if(equityShares[_holder] == 0) {\r\n      equityHolders[totalEquityHolders] = _holder;\r\n      totalEquityHolders += 1;\r\n    }\r\n    totalShares += _amount;\r\n    equityShares[_holder] += _amount;\r\n    emit EquityIssued(_holder, _amount, totalEquityHolders, totalShares);\r\n  }\r\n\r\n  /**\r\n  * This function allows the preferential tokens to be distributed to the\r\n  * rightful owner. This function can be called by anybody.\r\n  **/\r\n  function redeemPreferentialTokens() requireInitialized public {\r\n    require(preferentialTokens > preferentialTokensRedeemed,\r\n      \"All preferntial tokens have been redeemed.\");\r\n    withdrawVestedTokens();\r\n    uint256 availableTokens = preferentialTokens - preferentialTokensRedeemed;\r\n    uint256 vegaBalance = vega.balanceOf(address(this));\r\n    if(availableTokens > vegaBalance) {\r\n      availableTokens = vegaBalance;\r\n    }\r\n    vega.transfer(preferentialAddress, availableTokens);\r\n    preferentialTokensRedeemed += availableTokens;\r\n    emit PreferentialTokensRedeemed(availableTokens);\r\n  }\r\n\r\n  /**\r\n  * This function distributes tokens to equity holders based on the amount\r\n  * of shares they own.\r\n  *\r\n  * Anybody can call this function in order to ensure all of the tokens are\r\n  * distributed when it becomes eligible to do so.\r\n  **/\r\n  function redeemTokensViaEquity() requireInitialized public {\r\n    require(totalShares > 0, \"There are are no equity holders\");\r\n    require(assignSharesCutoff < block.timestamp,\r\n      \"Tokens cannot be redeemed whilst equity can still be assigned.\");\r\n    syncTokens();\r\n    require(preferentialTokens == preferentialTokensRedeemed,\r\n      \"Cannot redeem via equity until all preferential tokens are collected.\");\r\n    require(voteComplete, \"Cannot redeem via equity until vote is completed.\");\r\n    require(approveDistribution == false,\r\n      \"Tokens can only be redeemed by SHP holders.\");\r\n    uint256 availableTokens = equityTokens - equityTokensRedeemed;\r\n    uint256 vegaBalance = vega.balanceOf(address(this));\r\n    if(availableTokens > vegaBalance) {\r\n      availableTokens = vegaBalance;\r\n    }\r\n    for(uint256 i = 0; i < totalEquityHolders; i++) {\r\n      uint256 tokensToRedeem = (availableTokens *\r\n        getUserEquity(equityHolders[i])) / 10000;\r\n      vega.transfer(equityHolders[i], tokensToRedeem);\r\n      equityTokensRedeemed += tokensToRedeem;\r\n      emit EquityTokensRedeemed(equityHolders[i], tokensToRedeem);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * This function allows anybody to redeem excess VEGA to the owner's wallet\r\n  * provided the following conditions are met:\r\n  *\r\n  * 1) No equity shares exist, which happens under two scenarios:\r\n  *      a) They are never issued in the first place\r\n  *      b) They are burnt after redeeming VEGA\r\n  * 2) The cut-off for assigning equity shares is in the past\r\n  *\r\n  * This function transfers the entire VEGA balance held by the\r\n  * smart contract at execution time.\r\n  **/\r\n  function redeemExcessTokens() requireInitialized public {\r\n    if(totalEquityHolders > 0) {\r\n      require(equityTokens == equityTokensRedeemed,\r\n        \"Cannot redeem excess tokens until equity tokens are collected.\");\r\n    }\r\n    require(preferentialTokens == preferentialTokensRedeemed,\r\n      \"Cannot redeem excess tokens until preferential tokens are collected.\");\r\n    withdrawVestedTokens();\r\n    uint256 amount = vega.balanceOf(address(this));\r\n    emit ExcessTokensRedeemed(amount);\r\n    vega.transfer(owner(), amount);\r\n  }\r\n\r\n  /**\r\n  * This function calculates the equity of the specified user\r\n  *\r\n  * _holder    the Ethereum address of the equity holder\r\n  **/\r\n  function getUserEquity(\r\n    address _holder\r\n  ) public view returns(uint256) {\r\n    return (equityShares[_holder] * 10000) / totalShares;\r\n  }\r\n\r\n  /**\r\n  * This function allows the contract to be initialized only once.\r\n  * We do not use the constructor, because the Vega vesting contract needs to\r\n  * know the address of this smart contract when it is deployed. Therefore,\r\n  * this contract needs to be deployed, and then updated with the address of\r\n  * the Vega vesting contract afterwards.\r\n  *\r\n  * _vegaAdress           the Ethereum address of the VEGA token contract\r\n  * _vegaVestingAddress   the Ethereum address of Vega's vesting contract\r\n  * _preferentialAddress  Ethereum address for preferential tokens\r\n  * _holders              an array of permitted equity holders\r\n  * _assignSharesCutoff   timestamp after which shares cannot be assigned\r\n  * _referenceBlock       the Ethereum block to lookup SHP balances with\r\n  * _shpTokenAddress      the Ethereum address for SHP token contract\r\n  **/\r\n  function initialize(\r\n    address _vegaAddress,\r\n    address _vegaVestingAddress,\r\n    address _preferentialAddress,\r\n    address[] memory _holders,\r\n    uint256 _assignSharesCutoff,\r\n    uint256 _referenceBlock,\r\n    address _shpTokenAddress\r\n  ) public onlyOwner notInitialized {\r\n    vega = IERC20(_vegaAddress);\r\n    shp = ISHP(_shpTokenAddress);\r\n    vegaVesting = IVegaVesting(_vegaVestingAddress);\r\n    uint256 totalTokens = vegaVesting.user_total_all_tranches(address(this));\r\n    preferentialAddress = _preferentialAddress;\r\n    assignSharesCutoff = _assignSharesCutoff;\r\n    referenceBlock = _referenceBlock;\r\n    require(totalTokens >= EXEPECTED_VEGA,\r\n      \"The balance at the vesting contract is too low.\");\r\n    for(uint8 x = 0; x < _holders.length; x++) {\r\n      permittedEquityHolders[_holders[x]] = true;\r\n      emit PermittedEquityHolderAdded(_holders[x]);\r\n    }\r\n    equityTokens = (totalTokens * EQUITY_RATIO) / 10000;\r\n    preferentialTokens = totalTokens - equityTokens;\r\n    initialized = true;\r\n    emit VegaPoolInitialized(_vegaAddress, _vegaVestingAddress,\r\n      _preferentialAddress, _assignSharesCutoff,\r\n      _referenceBlock, _shpTokenAddress);\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"ERC20TokenWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalEquityHolders\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"EquityIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EquityTokensRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtherWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExcessTokensRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"PermittedEquityHolderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PreferentialTokensRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vegaAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vestingAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"preferentialAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assignSharesCutoff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referenceBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"shpTokenAddress\",\"type\":\"address\"}],\"name\":\"VegaPoolInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int8\",\"name\":\"vote\",\"type\":\"int8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EQUITY_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXEPECTED_VEGA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveDistribution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assignSharesCutoff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int8\",\"name\":\"_vote\",\"type\":\"int8\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"distributionVotes\",\"outputs\":[{\"internalType\":\"int8\",\"name\":\"\",\"type\":\"int8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"equityHolders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"equityShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"equityTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"equityTokensRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getUserEquity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vegaAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vegaVestingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_preferentialAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_holders\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_assignSharesCutoff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referenceBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_shpTokenAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"issueEquity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permittedEquityHolders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preferentialAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preferentialTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preferentialTokensRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemExcessTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemPreferentialTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemTokensViaEquity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referenceBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shp\",\"outputs\":[{\"internalType\":\"contract ISHP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shpRedemptionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shpTokensRedeemed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEquityHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vega\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vegaVesting\",\"outputs\":[{\"internalType\":\"contract IVegaVesting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteComplete\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteOutcome\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawArbitraryTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"VEGA_Pool","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9217d78f005fc52d6f8c1044b9304a21dbd8b79dc35e7f8cad095440f51f94f4"}]}