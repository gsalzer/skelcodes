{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.6.11;\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint a, uint b) internal pure returns (bool, uint) {\r\n        uint c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint a, uint b) internal pure returns (bool, uint) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint a, uint b) internal pure returns (bool, uint) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint a, uint b) internal pure returns (bool, uint) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint a, uint b) internal pure returns (bool, uint) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) return 0;\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint a, uint b) internal pure returns (uint) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint a,\r\n        uint b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint a,\r\n        uint b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint a,\r\n        uint b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint private constant _NOT_ENTERED = 1;\r\n    uint private constant _ENTERED = 2;\r\n\r\n    uint private _status;\r\n\r\n    constructor() internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint value\r\n    ) internal {\r\n        uint newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint value\r\n    ) internal {\r\n        uint newAllowance =\r\n            token.allowance(address(this), spender).sub(\r\n                value,\r\n                \"SafeERC20: decreased allowance below zero\"\r\n            );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata =\r\n            address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint;\r\n\r\n    mapping(address => uint) private _balances;\r\n\r\n    mapping(address => mapping(address => uint)) private _allowances;\r\n\r\n    uint private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"ERC20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: contracts/protocol/IStrategy.sol\r\n\r\n/*\r\nversion 1.2.0\r\n\r\nChanges\r\n\r\nChanges listed here do not affect interaction with other contracts (Vault and Controller)\r\n- removed function assets(address _token) external view returns (bool);\r\n- remove function deposit(uint), declared in IStrategyERC20\r\n- add function setSlippage(uint _slippage);\r\n- add function setDelta(uint _delta);\r\n*/\r\n\r\ninterface IStrategy {\r\n    function admin() external view returns (address);\r\n\r\n    function controller() external view returns (address);\r\n\r\n    function vault() external view returns (address);\r\n\r\n    /*\r\n    @notice Returns address of underlying asset (ETH or ERC20)\r\n    @dev Must return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE for ETH strategy\r\n    */\r\n    function underlying() external view returns (address);\r\n\r\n    /*\r\n    @notice Returns total amount of underlying transferred from vault\r\n    */\r\n    function totalDebt() external view returns (uint);\r\n\r\n    function performanceFee() external view returns (uint);\r\n\r\n    function slippage() external view returns (uint);\r\n\r\n    /* \r\n    @notice Multiplier used to check total underlying <= total debt * delta / DELTA_MIN\r\n    */\r\n    function delta() external view returns (uint);\r\n\r\n    /*\r\n    @dev Flag to force exit in case normal exit fails\r\n    */\r\n    function forceExit() external view returns (bool);\r\n\r\n    function setAdmin(address _admin) external;\r\n\r\n    function setController(address _controller) external;\r\n\r\n    function setPerformanceFee(uint _fee) external;\r\n\r\n    function setSlippage(uint _slippage) external;\r\n\r\n    function setDelta(uint _delta) external;\r\n\r\n    function setForceExit(bool _forceExit) external;\r\n\r\n    /*\r\n    @notice Returns amount of underlying asset locked in this contract\r\n    @dev Output may vary depending on price of liquidity provider token\r\n         where the underlying asset is invested\r\n    */\r\n    function totalAssets() external view returns (uint);\r\n\r\n    /*\r\n    @notice Withdraw `_amount` underlying asset\r\n    @param amount Amount of underlying asset to withdraw\r\n    */\r\n    function withdraw(uint _amount) external;\r\n\r\n    /*\r\n    @notice Withdraw all underlying asset from strategy\r\n    */\r\n    function withdrawAll() external;\r\n\r\n    /*\r\n    @notice Sell any staking rewards for underlying and then deposit undelying\r\n    */\r\n    function harvest() external;\r\n\r\n    /*\r\n    @notice Increase total debt if profit > 0 and total assets <= max,\r\n            otherwise transfers profit to vault.\r\n    @dev Guard against manipulation of external price feed by checking that\r\n         total assets is below factor of total debt\r\n    */\r\n    function skim() external;\r\n\r\n    /*\r\n    @notice Exit from strategy\r\n    @dev Must transfer all underlying tokens back to vault\r\n    */\r\n    function exit() external;\r\n\r\n    /*\r\n    @notice Transfer token accidentally sent here to admin\r\n    @param _token Address of token to transfer\r\n    @dev _token must not be equal to underlying token\r\n    */\r\n    function sweep(address _token) external;\r\n}\r\n\r\n// File: contracts/protocol/IStrategyERC20.sol\r\n\r\ninterface IStrategyERC20 is IStrategy {\r\n    /*\r\n    @notice Deposit `amount` underlying ERC20 token\r\n    @param amount Amount of underlying ERC20 token to deposit\r\n    */\r\n    function deposit(uint _amount) external;\r\n}\r\n\r\n// File: contracts/protocol/IVault.sol\r\n\r\n/*\r\nversion 1.2.0\r\n\r\nChanges\r\n- function deposit(uint) declared in IERC20Vault\r\n*/\r\n\r\ninterface IVault {\r\n    function admin() external view returns (address);\r\n\r\n    function controller() external view returns (address);\r\n\r\n    function timeLock() external view returns (address);\r\n\r\n    /*\r\n    @notice For EthVault, must return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\n    */\r\n    function token() external view returns (address);\r\n\r\n    function strategy() external view returns (address);\r\n\r\n    function strategies(address _strategy) external view returns (bool);\r\n\r\n    function reserveMin() external view returns (uint);\r\n\r\n    function withdrawFee() external view returns (uint);\r\n\r\n    function paused() external view returns (bool);\r\n\r\n    function whitelist(address _addr) external view returns (bool);\r\n\r\n    function setWhitelist(address _addr, bool _approve) external;\r\n\r\n    function setAdmin(address _admin) external;\r\n\r\n    function setController(address _controller) external;\r\n\r\n    function setTimeLock(address _timeLock) external;\r\n\r\n    function setPause(bool _paused) external;\r\n\r\n    function setReserveMin(uint _reserveMin) external;\r\n\r\n    function setWithdrawFee(uint _fee) external;\r\n\r\n    /*\r\n    @notice Returns the amount of asset (ETH or ERC20) in the vault\r\n    */\r\n    function balanceInVault() external view returns (uint);\r\n\r\n    /*\r\n    @notice Returns the estimate amount of asset in strategy\r\n    @dev Output may vary depending on price of liquidity provider token\r\n         where the underlying asset is invested\r\n    */\r\n    function balanceInStrategy() external view returns (uint);\r\n\r\n    /*\r\n    @notice Returns amount of tokens invested strategy\r\n    */\r\n    function totalDebtInStrategy() external view returns (uint);\r\n\r\n    /*\r\n    @notice Returns the total amount of asset in vault + total debt\r\n    */\r\n    function totalAssets() external view returns (uint);\r\n\r\n    /*\r\n    @notice Returns minimum amount of tokens that should be kept in vault for\r\n            cheap withdraw\r\n    @return Reserve amount\r\n    */\r\n    function minReserve() external view returns (uint);\r\n\r\n    /*\r\n    @notice Returns the amount of tokens available to be invested\r\n    */\r\n    function availableToInvest() external view returns (uint);\r\n\r\n    /*\r\n    @notice Approve strategy\r\n    @param _strategy Address of strategy\r\n    */\r\n    function approveStrategy(address _strategy) external;\r\n\r\n    /*\r\n    @notice Revoke strategy\r\n    @param _strategy Address of strategy\r\n    */\r\n    function revokeStrategy(address _strategy) external;\r\n\r\n    /*\r\n    @notice Set strategy\r\n    @param _min Minimum undelying asset current strategy must return. Prevents slippage\r\n    */\r\n    function setStrategy(address _strategy, uint _min) external;\r\n\r\n    /*\r\n    @notice Transfers asset in vault to strategy\r\n    */\r\n    function invest() external;\r\n\r\n    /*\r\n    @notice Calculate amount of asset that can be withdrawn\r\n    @param _shares Amount of shares\r\n    @return Amount of asset that can be withdrawn\r\n    */\r\n    function getExpectedReturn(uint _shares) external view returns (uint);\r\n\r\n    /*\r\n    @notice Withdraw asset\r\n    @param _shares Amount of shares to burn\r\n    @param _min Minimum amount of asset expected to return\r\n    */\r\n    function withdraw(uint _shares, uint _min) external;\r\n\r\n    /*\r\n    @notice Transfer asset in vault to admin\r\n    @param _token Address of asset to transfer\r\n    @dev _token must not be equal to vault asset\r\n    */\r\n    function sweep(address _token) external;\r\n}\r\n\r\n// File: contracts/protocol/IERC20Vault.sol\r\n\r\ninterface IERC20Vault is IVault {\r\n    /*\r\n    @notice Deposit undelying token into this vault\r\n    @param _amount Amount of token to deposit\r\n    */\r\n    function deposit(uint _amount) external;\r\n}\r\n\r\n// File: contracts/protocol/IController.sol\r\n\r\ninterface IController {\r\n    function ADMIN_ROLE() external view returns (bytes32);\r\n\r\n    function HARVESTER_ROLE() external view returns (bytes32);\r\n\r\n    function admin() external view returns (address);\r\n\r\n    function treasury() external view returns (address);\r\n\r\n    function setAdmin(address _admin) external;\r\n\r\n    function setTreasury(address _treasury) external;\r\n\r\n    function grantRole(bytes32 _role, address _addr) external;\r\n\r\n    function revokeRole(bytes32 _role, address _addr) external;\r\n\r\n    /*\r\n    @notice Set strategy for vault\r\n    @param _vault Address of vault\r\n    @param _strategy Address of strategy\r\n    @param _min Minimum undelying token current strategy must return. Prevents slippage\r\n    */\r\n    function setStrategy(\r\n        address _vault,\r\n        address _strategy,\r\n        uint _min\r\n    ) external;\r\n\r\n    // calls to strategy\r\n    /*\r\n    @notice Invest token in vault into strategy\r\n    @param _vault Address of vault\r\n    */\r\n    function invest(address _vault) external;\r\n\r\n    function harvest(address _strategy) external;\r\n\r\n    function skim(address _strategy) external;\r\n\r\n    /*\r\n    @notice Withdraw from strategy to vault\r\n    @param _strategy Address of strategy\r\n    @param _amount Amount of underlying token to withdraw\r\n    @param _min Minimum amount of underlying token to withdraw\r\n    */\r\n    function withdraw(\r\n        address _strategy,\r\n        uint _amount,\r\n        uint _min\r\n    ) external;\r\n\r\n    /*\r\n    @notice Withdraw all from strategy to vault\r\n    @param _strategy Address of strategy\r\n    @param _min Minimum amount of underlying token to withdraw\r\n    */\r\n    function withdrawAll(address _strategy, uint _min) external;\r\n\r\n    /*\r\n    @notice Exit from strategy\r\n    @param _strategy Address of strategy\r\n    @param _min Minimum amount of underlying token to withdraw\r\n    */\r\n    function exit(address _strategy, uint _min) external;\r\n}\r\n\r\n// File: contracts/ERC20Vault.sol\r\n\r\n/*\r\nversion 1.2.0\r\n- renamed from Vault to ERC20Vault\r\n- switch interface IVault to IERC20Vault\r\n- switch interface IStrategy to IStrategyERC20\r\n\r\n@dev Code logic has not changed since version 1.1.0\r\n*/\r\n\r\ncontract ERC20Vault is IERC20Vault, ERC20, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n\r\n    event SetStrategy(address strategy);\r\n    event ApproveStrategy(address strategy);\r\n    event RevokeStrategy(address strategy);\r\n    event SetWhitelist(address addr, bool approved);\r\n\r\n    address public override admin;\r\n    address public override controller;\r\n    address public override timeLock;\r\n    address public immutable override token;\r\n    address public override strategy;\r\n\r\n    // mapping of approved strategies\r\n    mapping(address => bool) public override strategies;\r\n\r\n    // percentange of token reserved in vault for cheap withdraw\r\n    uint public override reserveMin = 500;\r\n    uint private constant RESERVE_MAX = 10000;\r\n\r\n    // Denominator used to calculate fees\r\n    uint private constant FEE_MAX = 10000;\r\n\r\n    uint public override withdrawFee;\r\n    uint private constant WITHDRAW_FEE_CAP = 500; // upper limit to withdrawFee\r\n\r\n    bool public override paused;\r\n\r\n    // whitelisted addresses\r\n    // used to prevent flash loah attacks\r\n    mapping(address => bool) public override whitelist;\r\n\r\n    /*\r\n    @dev vault decimals must be equal to token decimals\r\n    */\r\n    constructor(\r\n        address _controller,\r\n        address _timeLock,\r\n        address _token\r\n    )\r\n        public\r\n        ERC20(\r\n            string(abi.encodePacked(\"unagii_\", ERC20(_token).name())),\r\n            string(abi.encodePacked(\"u\", ERC20(_token).symbol()))\r\n        )\r\n    {\r\n        require(_controller != address(0), \"controller = zero address\");\r\n        require(_timeLock != address(0), \"time lock = zero address\");\r\n\r\n        _setupDecimals(ERC20(_token).decimals());\r\n\r\n        admin = msg.sender;\r\n        controller = _controller;\r\n        token = _token;\r\n        timeLock = _timeLock;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"!admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyTimeLock() {\r\n        require(msg.sender == timeLock, \"!time lock\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdminOrController() {\r\n        require(msg.sender == admin || msg.sender == controller, \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier whenStrategyDefined() {\r\n        require(strategy != address(0), \"strategy = zero address\");\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"paused\");\r\n        _;\r\n    }\r\n\r\n    /*\r\n    @dev modifier to prevent flash loan\r\n    @dev caller is restricted to EOA or whitelisted contract\r\n    @dev Warning: Users can have their funds stuck if shares is transferred to a contract\r\n    */\r\n    modifier guard() {\r\n        require((msg.sender == tx.origin) || whitelist[msg.sender], \"!whitelist\");\r\n        _;\r\n    }\r\n\r\n    function setAdmin(address _admin) external override onlyAdmin {\r\n        require(_admin != address(0), \"admin = zero address\");\r\n        admin = _admin;\r\n    }\r\n\r\n    function setController(address _controller) external override onlyAdmin {\r\n        require(_controller != address(0), \"controller = zero address\");\r\n        controller = _controller;\r\n    }\r\n\r\n    function setTimeLock(address _timeLock) external override onlyTimeLock {\r\n        require(_timeLock != address(0), \"time lock = zero address\");\r\n        timeLock = _timeLock;\r\n    }\r\n\r\n    function setPause(bool _paused) external override onlyAdmin {\r\n        paused = _paused;\r\n    }\r\n\r\n    function setWhitelist(address _addr, bool _approve) external override onlyAdmin {\r\n        whitelist[_addr] = _approve;\r\n        emit SetWhitelist(_addr, _approve);\r\n    }\r\n\r\n    function setReserveMin(uint _reserveMin) external override onlyAdmin {\r\n        require(_reserveMin <= RESERVE_MAX, \"reserve min > max\");\r\n        reserveMin = _reserveMin;\r\n    }\r\n\r\n    function setWithdrawFee(uint _fee) external override onlyAdmin {\r\n        require(_fee <= WITHDRAW_FEE_CAP, \"withdraw fee > cap\");\r\n        withdrawFee = _fee;\r\n    }\r\n\r\n    function _balanceInVault() private view returns (uint) {\r\n        return IERC20(token).balanceOf(address(this));\r\n    }\r\n\r\n    /*\r\n    @notice Returns balance of tokens in vault\r\n    @return Amount of token in vault\r\n    */\r\n    function balanceInVault() external view override returns (uint) {\r\n        return _balanceInVault();\r\n    }\r\n\r\n    function _balanceInStrategy() private view returns (uint) {\r\n        if (strategy == address(0)) {\r\n            return 0;\r\n        }\r\n\r\n        return IStrategyERC20(strategy).totalAssets();\r\n    }\r\n\r\n    /*\r\n    @notice Returns the estimate amount of token in strategy\r\n    @dev Output may vary depending on price of liquidity provider token\r\n         where the underlying token is invested\r\n    */\r\n    function balanceInStrategy() external view override returns (uint) {\r\n        return _balanceInStrategy();\r\n    }\r\n\r\n    function _totalDebtInStrategy() private view returns (uint) {\r\n        if (strategy == address(0)) {\r\n            return 0;\r\n        }\r\n        return IStrategyERC20(strategy).totalDebt();\r\n    }\r\n\r\n    /*\r\n    @notice Returns amount of tokens invested strategy\r\n    */\r\n    function totalDebtInStrategy() external view override returns (uint) {\r\n        return _totalDebtInStrategy();\r\n    }\r\n\r\n    function _totalAssets() private view returns (uint) {\r\n        return _balanceInVault().add(_totalDebtInStrategy());\r\n    }\r\n\r\n    /*\r\n    @notice Returns the total amount of tokens in vault + total debt\r\n    @return Total amount of tokens in vault + total debt\r\n    */\r\n    function totalAssets() external view override returns (uint) {\r\n        return _totalAssets();\r\n    }\r\n\r\n    function _minReserve() private view returns (uint) {\r\n        return _totalAssets().mul(reserveMin) / RESERVE_MAX;\r\n    }\r\n\r\n    /*\r\n    @notice Returns minimum amount of tokens that should be kept in vault for\r\n            cheap withdraw\r\n    @return Reserve amount\r\n    */\r\n    function minReserve() external view override returns (uint) {\r\n        return _minReserve();\r\n    }\r\n\r\n    function _availableToInvest() private view returns (uint) {\r\n        if (strategy == address(0)) {\r\n            return 0;\r\n        }\r\n\r\n        uint balInVault = _balanceInVault();\r\n        uint reserve = _minReserve();\r\n\r\n        if (balInVault <= reserve) {\r\n            return 0;\r\n        }\r\n\r\n        return balInVault - reserve;\r\n    }\r\n\r\n    /*\r\n    @notice Returns amount of token available to be invested into strategy\r\n    @return Amount of token available to be invested into strategy\r\n    */\r\n    function availableToInvest() external view override returns (uint) {\r\n        return _availableToInvest();\r\n    }\r\n\r\n    /*\r\n    @notice Approve strategy\r\n    @param _strategy Address of strategy to revoke\r\n    */\r\n    function approveStrategy(address _strategy) external override onlyTimeLock {\r\n        require(_strategy != address(0), \"strategy = zero address\");\r\n        strategies[_strategy] = true;\r\n\r\n        emit ApproveStrategy(_strategy);\r\n    }\r\n\r\n    /*\r\n    @notice Revoke strategy\r\n    @param _strategy Address of strategy to revoke\r\n    */\r\n    function revokeStrategy(address _strategy) external override onlyAdmin {\r\n        require(_strategy != address(0), \"strategy = zero address\");\r\n        strategies[_strategy] = false;\r\n\r\n        emit RevokeStrategy(_strategy);\r\n    }\r\n\r\n    /*\r\n    @notice Set strategy to approved strategy\r\n    @param _strategy Address of strategy used\r\n    @param _min Minimum undelying token current strategy must return. Prevents slippage\r\n    */\r\n    function setStrategy(address _strategy, uint _min)\r\n        external\r\n        override\r\n        onlyAdminOrController\r\n    {\r\n        require(strategies[_strategy], \"!approved\");\r\n        require(_strategy != strategy, \"new strategy = current strategy\");\r\n        require(\r\n            IStrategyERC20(_strategy).underlying() == token,\r\n            \"strategy.token != vault.token\"\r\n        );\r\n        require(\r\n            IStrategyERC20(_strategy).vault() == address(this),\r\n            \"strategy.vault != vault\"\r\n        );\r\n\r\n        // withdraw from current strategy\r\n        if (strategy != address(0)) {\r\n            IERC20(token).safeApprove(strategy, 0);\r\n\r\n            uint balBefore = _balanceInVault();\r\n            IStrategyERC20(strategy).exit();\r\n            uint balAfter = _balanceInVault();\r\n\r\n            require(balAfter.sub(balBefore) >= _min, \"withdraw < min\");\r\n        }\r\n\r\n        strategy = _strategy;\r\n\r\n        emit SetStrategy(strategy);\r\n    }\r\n\r\n    /*\r\n    @notice Invest token from vault into strategy.\r\n            Some token are kept in vault for cheap withdraw.\r\n    */\r\n    function invest()\r\n        external\r\n        override\r\n        whenStrategyDefined\r\n        whenNotPaused\r\n        onlyAdminOrController\r\n    {\r\n        uint amount = _availableToInvest();\r\n        require(amount > 0, \"available = 0\");\r\n\r\n        IERC20(token).safeApprove(strategy, 0);\r\n        IERC20(token).safeApprove(strategy, amount);\r\n\r\n        IStrategyERC20(strategy).deposit(amount);\r\n\r\n        IERC20(token).safeApprove(strategy, 0);\r\n    }\r\n\r\n    /*\r\n    @notice Deposit token into vault\r\n    @param _amount Amount of token to transfer from `msg.sender`\r\n    */\r\n    function deposit(uint _amount) external override whenNotPaused nonReentrant guard {\r\n        require(_amount > 0, \"amount = 0\");\r\n\r\n        uint totalUnderlying = _totalAssets();\r\n        uint totalShares = totalSupply();\r\n\r\n        /*\r\n        s = shares to mint\r\n        T = total shares before mint\r\n        d = deposit amount\r\n        A = total assets in vault + strategy before deposit\r\n\r\n        s / (T + s) = d / (A + d)\r\n        s = d / A * T\r\n        */\r\n        uint shares;\r\n        if (totalShares == 0) {\r\n            shares = _amount;\r\n        } else {\r\n            shares = _amount.mul(totalShares).div(totalUnderlying);\r\n        }\r\n\r\n        _mint(msg.sender, shares);\r\n        IERC20(token).safeTransferFrom(msg.sender, address(this), _amount);\r\n    }\r\n\r\n    function _getExpectedReturn(\r\n        uint _shares,\r\n        uint _balInVault,\r\n        uint _balInStrat\r\n    ) private view returns (uint) {\r\n        /*\r\n        s = shares\r\n        T = total supply of shares\r\n        w = amount of underlying token to withdraw\r\n        U = total amount of redeemable underlying token in vault + strategy\r\n\r\n        s / T = w / U\r\n        w = s / T * U\r\n        */\r\n\r\n        /*\r\n        total underlying = bal in vault + min(total debt, bal in strat)\r\n        if bal in strat > total debt, redeemable = total debt\r\n        else redeemable = bal in strat\r\n        */\r\n        uint totalDebt = _totalDebtInStrategy();\r\n        uint totalUnderlying;\r\n        if (_balInStrat > totalDebt) {\r\n            totalUnderlying = _balInVault.add(totalDebt);\r\n        } else {\r\n            totalUnderlying = _balInVault.add(_balInStrat);\r\n        }\r\n\r\n        uint totalShares = totalSupply();\r\n        if (totalShares > 0) {\r\n            return _shares.mul(totalUnderlying) / totalShares;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /*\r\n    @notice Calculate amount of underlying token that can be withdrawn\r\n    @param _shares Amount of shares\r\n    @return Amount of underlying token that can be withdrawn\r\n    */\r\n    function getExpectedReturn(uint _shares) external view override returns (uint) {\r\n        uint balInVault = _balanceInVault();\r\n        uint balInStrat = _balanceInStrategy();\r\n\r\n        return _getExpectedReturn(_shares, balInVault, balInStrat);\r\n    }\r\n\r\n    /*\r\n    @notice Withdraw underlying token\r\n    @param _shares Amount of shares to burn\r\n    @param _min Minimum amount of underlying token to return\r\n    @dev Keep `guard` modifier, else attacker can deposit and then use smart\r\n         contract to attack from withdraw\r\n    */\r\n    function withdraw(uint _shares, uint _min) external override nonReentrant guard {\r\n        require(_shares > 0, \"shares = 0\");\r\n\r\n        uint balInVault = _balanceInVault();\r\n        uint balInStrat = _balanceInStrategy();\r\n        uint withdrawAmount = _getExpectedReturn(_shares, balInVault, balInStrat);\r\n\r\n        // Must burn after calculating withdraw amount\r\n        _burn(msg.sender, _shares);\r\n\r\n        if (balInVault < withdrawAmount) {\r\n            // maximize withdraw amount from strategy\r\n            uint amountFromStrat = withdrawAmount;\r\n            if (balInStrat < withdrawAmount) {\r\n                amountFromStrat = balInStrat;\r\n            }\r\n\r\n            IStrategyERC20(strategy).withdraw(amountFromStrat);\r\n\r\n            uint balAfter = _balanceInVault();\r\n            uint diff = balAfter.sub(balInVault);\r\n\r\n            if (diff < amountFromStrat) {\r\n                // withdraw amount - withdraw amount from strat = amount to withdraw from vault\r\n                // diff = actual amount returned from strategy\r\n                // NOTE: withdrawAmount >= amountFromStrat\r\n                withdrawAmount = (withdrawAmount - amountFromStrat).add(diff);\r\n            }\r\n\r\n            // transfer to treasury\r\n            uint fee = withdrawAmount.mul(withdrawFee) / FEE_MAX;\r\n            if (fee > 0) {\r\n                address treasury = IController(controller).treasury();\r\n                require(treasury != address(0), \"treasury = zero address\");\r\n\r\n                withdrawAmount = withdrawAmount - fee;\r\n                IERC20(token).safeTransfer(treasury, fee);\r\n            }\r\n        }\r\n\r\n        require(withdrawAmount >= _min, \"withdraw < min\");\r\n\r\n        IERC20(token).safeTransfer(msg.sender, withdrawAmount);\r\n    }\r\n\r\n    /*\r\n    @notice Transfer token != underlying token in vault to admin\r\n    @param _token Address of token to transfer\r\n    @dev Must transfer token to admin\r\n    @dev _token must not be equal to underlying token\r\n    @dev Used to transfer token that was accidentally sent to this vault\r\n    */\r\n    function sweep(address _token) external override onlyAdmin {\r\n        require(_token != token, \"token = vault.token\");\r\n        IERC20(_token).safeTransfer(admin, IERC20(_token).balanceOf(address(this)));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timeLock\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"ApproveStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"RevokeStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"SetStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"SetWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"approveStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableToInvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceInStrategy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceInVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"getExpectedReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"revokeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reserveMin\",\"type\":\"uint256\"}],\"name\":\"setReserveMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timeLock\",\"type\":\"address\"}],\"name\":\"setTimeLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approve\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebtInStrategy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ERC20Vault","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007d55c795359eb049ff482c8bd5e0523f0fb40b6f0000000000000000000000008dcb98361a49550593b57747ab2825983ef436620000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0d10e94afc7405de3b9a440755cadc4ed50a2aaad27d75c4a8b47c76aed0ea27"}]}