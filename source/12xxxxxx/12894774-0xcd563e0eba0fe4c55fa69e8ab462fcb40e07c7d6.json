{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.12\r\n\r\nfrom vyper.interfaces import ERC721\r\n\r\n\r\nimplements: ERC721\r\n\r\ninterface ERC721Receiver:\r\n    def onERC721Received(\r\n            _operator: address,\r\n            _from: address,\r\n            _tokenId: uint256,\r\n            _data: Bytes[1024]\r\n        ) -> bytes32: view\r\n\r\nevent Transfer:\r\n    sender: indexed(address)\r\n    receiver: indexed(address)\r\n    tokenId: indexed(uint256)\r\n\r\nevent Approval:\r\n    owner: indexed(address)\r\n    approved: indexed(address)\r\n    tokenId: indexed(uint256)\r\n\r\nevent ApprovalForAll:\r\n    owner: indexed(address)\r\n    operator: indexed(address)\r\n    approved: bool\r\n\r\n\r\ninterface ERC20Contract():\r\n    def mint(_to: address, _value: uint256): nonpayable\r\n\r\n\r\nidToOwner: HashMap[uint256, address]\r\nidToApprovals: HashMap[uint256, address]\r\nownerToNFTokenCount: HashMap[address, uint256]\r\nownerToOperators: HashMap[address, HashMap[address, bool]]\r\nminter: address\r\nsupportedInterfaces: HashMap[bytes32, bool]\r\nERC165_INTERFACE_ID: constant(bytes32) = 0x0000000000000000000000000000000000000000000000000000000001ffc9a7\r\nERC721_INTERFACE_ID: constant(bytes32) = 0x0000000000000000000000000000000000000000000000000000000080ac58cd\r\nname: public(String[64])\r\nsymbol: public(String[32])\r\nerc20: public(address)\r\nemissionCount: public(HashMap[uint256, HashMap[uint256, uint256]])\r\nemissionValue: public(HashMap[uint256, HashMap[uint256, uint256]])\r\nprice: public(HashMap[uint256, uint256])\r\ntokenURIs: HashMap[uint256, String[1024]]\r\n\r\n\r\n@external\r\ndef __init__(_name: String[64], _symbol: String[32], _erc20: address):\r\n    self.name = _name\r\n    self.symbol = _symbol\r\n    self.erc20 = _erc20\r\n    self.supportedInterfaces[ERC165_INTERFACE_ID] = True\r\n    self.supportedInterfaces[ERC721_INTERFACE_ID] = True\r\n    self.minter = msg.sender\r\n\r\n\r\n@view\r\n@external\r\ndef supportsInterface(_interfaceID: bytes32) -> bool:\r\n    return self.supportedInterfaces[_interfaceID]\r\n\r\n\r\n@view\r\n@external\r\ndef balanceOf(_owner: address) -> uint256:\r\n    assert _owner != ZERO_ADDRESS\r\n    return self.ownerToNFTokenCount[_owner]\r\n\r\n\r\n@view\r\n@external\r\ndef ownerOf(_tokenId: uint256) -> address:\r\n    owner: address = self.idToOwner[_tokenId]\r\n    assert owner != ZERO_ADDRESS\r\n    return owner\r\n\r\n\r\n@view\r\n@external\r\ndef getApproved(_tokenId: uint256) -> address:\r\n    assert self.idToOwner[_tokenId] != ZERO_ADDRESS\r\n    return self.idToApprovals[_tokenId]\r\n\r\n\r\n@view\r\n@external\r\ndef isApprovedForAll(_owner: address, _operator: address) -> bool:\r\n    return (self.ownerToOperators[_owner])[_operator]\r\n\r\n\r\n@view\r\n@internal\r\ndef _isApprovedOrOwner(_spender: address, _tokenId: uint256) -> bool:\r\n    owner: address = self.idToOwner[_tokenId]\r\n    spenderIsOwner: bool = owner == _spender\r\n    spenderIsApproved: bool = _spender == self.idToApprovals[_tokenId]\r\n    spenderIsApprovedForAll: bool = (self.ownerToOperators[owner])[_spender]\r\n    return (spenderIsOwner or spenderIsApproved) or spenderIsApprovedForAll\r\n\r\n\r\n@internal\r\ndef _addTokenTo(_to: address, _tokenId: uint256):\r\n    assert self.idToOwner[_tokenId] == ZERO_ADDRESS\r\n    self.idToOwner[_tokenId] = _to\r\n    self.ownerToNFTokenCount[_to] += 1\r\n\r\n\r\n@internal\r\ndef _removeTokenFrom(_from: address, _tokenId: uint256):\r\n    assert self.idToOwner[_tokenId] == _from\r\n    self.idToOwner[_tokenId] = ZERO_ADDRESS\r\n    self.ownerToNFTokenCount[_from] -= 1\r\n\r\n\r\n@internal\r\ndef _clearApproval(_owner: address, _tokenId: uint256):\r\n    assert self.idToOwner[_tokenId] == _owner\r\n    if self.idToApprovals[_tokenId] != ZERO_ADDRESS:\r\n        self.idToApprovals[_tokenId] = ZERO_ADDRESS\r\n\r\n\r\n@internal\r\ndef _transferFrom(_from: address, _to: address, _tokenId: uint256, _sender: address):\r\n    assert self._isApprovedOrOwner(_sender, _tokenId)\r\n    assert _to != ZERO_ADDRESS\r\n    self._clearApproval(_from, _tokenId)\r\n    self._removeTokenFrom(_from, _tokenId)\r\n    self._addTokenTo(_to, _tokenId)\r\n    self.price[_tokenId] = 0\r\n    log Transfer(_from, _to, _tokenId)\r\n\r\n\r\n@external\r\ndef transferFrom(_from: address, _to: address, _tokenId: uint256):\r\n    self._transferFrom(_from, _to, _tokenId, msg.sender)\r\n\r\n\r\n@external\r\ndef safeTransferFrom(\r\n        _from: address,\r\n        _to: address,\r\n        _tokenId: uint256,\r\n        _data: Bytes[1024]=b\"\"\r\n    ):\r\n    self._transferFrom(_from, _to, _tokenId, msg.sender)\r\n    if _to.is_contract: # check if `_to` is a contract address\r\n        returnValue: bytes32 = ERC721Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data)\r\n        assert returnValue == method_id(\"onERC721Received(address,address,uint256,bytes)\", output_type=bytes32)\r\n\r\n\r\n@external\r\ndef approve(_approved: address, _tokenId: uint256):\r\n    owner: address = self.idToOwner[_tokenId]\r\n    assert owner != ZERO_ADDRESS\r\n    assert _approved != owner\r\n    senderIsOwner: bool = self.idToOwner[_tokenId] == msg.sender\r\n    senderIsApprovedForAll: bool = (self.ownerToOperators[owner])[msg.sender]\r\n    assert (senderIsOwner or senderIsApprovedForAll)\r\n    self.idToApprovals[_tokenId] = _approved\r\n    log Approval(owner, _approved, _tokenId)\r\n\r\n\r\n@external\r\ndef setApprovalForAll(_operator: address, _approved: bool):\r\n    assert _operator != msg.sender\r\n    self.ownerToOperators[msg.sender][_operator] = _approved\r\n    log ApprovalForAll(msg.sender, _operator, _approved)\r\n\r\n\r\n@view\r\n@external\r\ndef tokenURI(_tokenId: uint256) -> String[1024]:\r\n    owner: address = self.idToOwner[_tokenId]\r\n    assert owner != ZERO_ADDRESS\r\n    return self.tokenURIs[_tokenId]\r\n\r\n\r\n@external\r\ndef addSolution(_tokenId: uint256, _solution: uint256, _emission: uint256) -> bool:\r\n    assert msg.sender == self.minter\r\n    owner: address = self.idToOwner[_tokenId]\r\n    assert owner != ZERO_ADDRESS\r\n    assert _solution != 0\r\n    assert _emission != 0\r\n    self.emissionValue[_tokenId][_solution] = _emission\r\n    return True\r\n\r\n\r\n@external\r\ndef setERC20(_erc20: address) -> bool:\r\n    assert msg.sender == self.minter\r\n    self.erc20 = _erc20\r\n    return True\r\n\r\n\r\n@external\r\ndef mint(\r\n    _to: address,\r\n    _tokenId: uint256,\r\n    _tokenURI: String[1024],\r\n    _solution: uint256,\r\n    _emission: uint256,\r\n) -> bool:\r\n    assert _solution != 0\r\n    assert _emission != 0\r\n    assert _tokenURI != ''\r\n    assert msg.sender == self.minter\r\n    assert _to != ZERO_ADDRESS\r\n    self._addTokenTo(_to, _tokenId)\r\n    self.tokenURIs[_tokenId] = _tokenURI\r\n    self.emissionValue[_tokenId][_solution] = _emission\r\n    log Transfer(ZERO_ADDRESS, _to, _tokenId)\r\n    return True\r\n\r\n\r\n@external\r\ndef sell(_tokenId: uint256, _price: uint256) -> bool:\r\n    assert self._isApprovedOrOwner(msg.sender, _tokenId)\r\n    owner: address = self.idToOwner[_tokenId]\r\n    assert owner != ZERO_ADDRESS\r\n    assert _price != 0\r\n    self.price[_tokenId] = _price\r\n    return True\r\n\r\n\r\n@external\r\ndef stop_selling(_tokenId: uint256) -> bool:\r\n    assert self._isApprovedOrOwner(msg.sender, _tokenId)\r\n    owner: address = self.idToOwner[_tokenId]\r\n    assert owner != ZERO_ADDRESS\r\n    assert self.price[_tokenId] != 0\r\n    self.price[_tokenId] = 0\r\n    return True\r\n\r\n\r\n@external\r\n@payable\r\ndef buy(_tokenId: uint256) -> bool:\r\n    owner: address = self.idToOwner[_tokenId]\r\n    price: uint256 = self.price[_tokenId]\r\n    assert owner != ZERO_ADDRESS\r\n    assert msg.sender != ZERO_ADDRESS\r\n    assert msg.sender != owner\r\n    assert price != 0\r\n    assert msg.value >= price\r\n    self._transferFrom(owner, msg.sender, _tokenId, owner)\r\n    send(owner, price)\r\n    if msg.value > price:\r\n        send(self.minter, msg.value - price)\r\n    return True\r\n\r\n\r\n@external\r\ndef checkSolution(_tokenId: uint256, _solution: String[256]) -> bool:\r\n    assert self._isApprovedOrOwner(msg.sender, _tokenId)\r\n    owner: address = self.idToOwner[_tokenId]\r\n    assert owner != ZERO_ADDRESS\r\n    solutionBytes: bytes32 = keccak256(_solution)\r\n    solution: uint256 = convert(solutionBytes, uint256)\r\n    emission: uint256 = self.emissionValue[_tokenId][solution]\r\n    count: uint256 = self.emissionCount[_tokenId][solution]\r\n    assert emission != 0\r\n    actualEmission: uint256 = emission / (9 ** count)\r\n    self.emissionCount[_tokenId][solution] = count + 1\r\n    ERC20Contract(self.erc20).mint(owner, actualEmission)\r\n    return True\r\n\r\n\r\n@external\r\ndef burn(_tokenId: uint256):\r\n    assert self._isApprovedOrOwner(msg.sender, _tokenId)\r\n    owner: address = self.idToOwner[_tokenId]\r\n    assert owner != ZERO_ADDRESS\r\n    self._clearApproval(owner, _tokenId)\r\n    self._removeTokenFrom(owner, _tokenId)\r\n    log Transfer(owner, ZERO_ADDRESS, _tokenId)","ABI":"[{\"name\":\"Transfer\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"receiver\",\"type\":\"address\",\"indexed\":true},{\"name\":\"tokenId\",\"type\":\"uint256\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approval\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"approved\",\"type\":\"address\",\"indexed\":true},{\"name\":\"tokenId\",\"type\":\"uint256\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ApprovalForAll\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true},{\"name\":\"approved\",\"type\":\"bool\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_erc20\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"supportsInterface\",\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":2503},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2730},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"ownerOf\",\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2675},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getApproved\",\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":4902},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isApprovedForAll\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":2938},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"outputs\":[],\"gas\":360349},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"safeTransferFrom\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"safeTransferFrom\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"outputs\":[],\"gas\":44709},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setApprovalForAll\",\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"outputs\":[],\"gas\":38122},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"tokenURI\",\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"gas\":83713},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"addSolution\",\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_solution\",\"type\":\"uint256\"},{\"name\":\"_emission\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":40538},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setERC20\",\"inputs\":[{\"name\":\"_erc20\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":37920},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"mint\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_tokenURI\",\"type\":\"string\"},{\"name\":\"_solution\",\"type\":\"uint256\"},{\"name\":\"_emission\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":1277807},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"sell\",\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":45854},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"stop_selling\",\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":33093},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"buy\",\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":440220},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"checkSolution\",\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_solution\",\"type\":\"string\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":60716},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"burn\",\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"outputs\":[],\"gas\":98268},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"gas\":13230},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"gas\":10983},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"erc20\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2988},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"emissionCount\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"},{\"name\":\"arg1\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3248},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"emissionValue\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"},{\"name\":\"arg1\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3278},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"price\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3193}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.12","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000ba722b368476d3bf298d998d48a42b0b836c158300000000000000000000000000000000000000000000000000000000000000104d722e204d65657365656b7320426f780000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000084d45455345454b53000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}