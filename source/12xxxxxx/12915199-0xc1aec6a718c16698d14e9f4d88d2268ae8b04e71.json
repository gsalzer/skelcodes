{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.0;\r\n\r\ninterface ISupplyController {\r\n\tfunction mintIncentive(address addr) external;\r\n\tfunction mintableIncentive(address addr) external view returns (uint);\r\n\tfunction mint(address token, address owner, uint amount) external;\r\n\tfunction changeSupplyController(address newSupplyController) external;\r\n}\r\n\r\ninterface IADXToken {\r\n\tfunction transfer(address to, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction balanceOf(address spender) external view returns (uint);\r\n\tfunction allowance(address owner, address spender) external view returns (uint);\r\n\tfunction totalSupply() external returns (uint);\r\n\tfunction supplyController() external view returns (ISupplyController);\r\n\tfunction changeSupplyController(address newSupplyController) external;\r\n\tfunction mint(address owner, uint amount) external;\r\n}\r\n\r\ninterface IADXLoyaltyPoolToken {\r\n\tfunction mintIncentive() external;\r\n\tfunction setIncentive(uint newIncentive) external;\r\n\tfunction ADXToken() external view returns (IADXToken);\r\n}\r\n\r\ninterface IChainlinkSimple {\r\n\tfunction latestAnswer() external view returns (uint);\r\n}\r\n\r\n// NOTE: If this needs to be upgraded, we just deploy a new instance and remove the governance rights\r\n// of the old instance and set rights for the new instance\r\ncontract ADXLoyaltyPoolIncentiveController {\r\n\tIChainlinkSimple public constant ADXUSDOracle = IChainlinkSimple(0x231e764B44b2C1b7Ca171fa8021A24ed520Cde10);\r\n\tIADXLoyaltyPoolToken public immutable loyaltyPool;\r\n\tconstructor(IADXLoyaltyPoolToken lpt) {\r\n\t\tloyaltyPool = lpt;\r\n\t}\r\n\r\n\tfunction adjustIncentive() external {\r\n\t\t// Mint the current incurred incentive before changing the rate,\r\n\t\t// otherwise new rate would be applied for the entire period since the last mint\r\n\t\tloyaltyPool.mintIncentive();\r\n\r\n\t\t// At some point we might enable bonus periods:\r\n\t\t// if (block.timestamp < ...) { ... }\r\n\t\t// Or overinflation protection\r\n\t\t// if (loyaltyPool.ADXToken().totalSupply() > ...) { ... }\r\n\r\n\t\t// Reset the rate based on the price from the Chainlink oracle\r\n\t\tuint price = ADXUSDOracle.latestAnswer();\r\n\t\trequire(price > 0, 'INVALID_ANSWER');\r\n\t\tif (price < 0.05*10**8) {\r\n\t\t\tloyaltyPool.setIncentive(uint(0.05*10**18));\r\n\t\t} else if (price < 0.10*10**8) {\r\n\t\t\tloyaltyPool.setIncentive(uint(0.10*10**18));\r\n\t\t} else if (price < 0.20*10**8) {\r\n\t\t\tloyaltyPool.setIncentive(uint(0.20*10**18));\r\n\t\t} else if (price < 0.35*10**8) {\r\n\t\t\tloyaltyPool.setIncentive(uint(0.25*10**18));\r\n\t\t} else if (price < 0.50*10**8) {\r\n\t\t\tloyaltyPool.setIncentive(uint(0.30*10**18));\r\n\t\t} else if (price < 1.00*10**8) {\r\n\t\t\tloyaltyPool.setIncentive(uint(0.35*10**18));\r\n\t\t} else if (price < 2.00*10**8) {\r\n\t\t\tloyaltyPool.setIncentive(uint(0.38*10**18));\r\n\t\t} else if (price < 2.50*10**8) {\r\n\t\t\tloyaltyPool.setIncentive(uint(0.40*10**18));\r\n\t\t} else {\r\n\t\t\tloyaltyPool.setIncentive(uint(0.45*10**18));\r\n\t\t}\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IADXLoyaltyPoolToken\",\"name\":\"lpt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ADXUSDOracle\",\"outputs\":[{\"internalType\":\"contract IChainlinkSimple\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adjustIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loyaltyPool\",\"outputs\":[{\"internalType\":\"contract IADXLoyaltyPoolToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ADXLoyaltyPoolIncentiveController","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d9a4cb9dc9296e111c66dfacab8be034ee2e1c2c","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://de158869ba43ae69ce1064dadd201427866560ab6d1f0e9295f704613f24838c"}]}