{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/settings/PlatformSettings.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../libs/SettingsLib.sol\\\";\\n\\n// Contracts\\nimport \\\"../roles/RolesManagerConsts.sol\\\";\\nimport \\\"./PlatformSettingsConsts.sol\\\";\\n\\n// Interfaces\\nimport \\\"./IPlatformSettings.sol\\\";\\nimport \\\"../roles/IRolesManager.sol\\\";\\n\\ncontract PlatformSettings is IPlatformSettings {\\n    using Address for address;\\n    using SettingsLib for SettingsLib.Setting;\\n\\n    /** Constants */\\n\\n    /* State Variables */\\n\\n    /**\\n        @notice This mapping represents the platform settings where:\\n\\n        - The key is the platform setting name.\\n        - The value is the platform setting. It includes the value, minimum and maximum values.\\n     */\\n    mapping(bytes32 => SettingsLib.Setting) public settings;\\n\\n    bool public paused;\\n\\n    address public override rolesManager;\\n\\n    address public override consts;\\n\\n    /** Modifiers */\\n\\n    modifier onlyPauser(address account) {\\n        _rolesManager().requireHasRole(\\n            _rolesManagerConsts().PAUSER_ROLE(),\\n            account,\\n            \\\"SENDER_ISNT_PAUSER\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyConfigurator(address account) {\\n        _rolesManager().requireHasRole(\\n            _rolesManagerConsts().CONFIGURATOR_ROLE(),\\n            account,\\n            \\\"SENDER_ISNT_CONFIGURATOR\\\"\\n        );\\n        _;\\n    }\\n\\n    /* Constructor */\\n\\n    constructor(address rolesManagerAddress) public {\\n        require(rolesManagerAddress.isContract(), \\\"ROLES_MANAGER_MUST_BE_CONTRACT\\\");\\n        rolesManager = rolesManagerAddress;\\n        consts = address(new PlatformSettingsConsts());\\n    }\\n\\n    /** External Functions */\\n\\n    /**\\n        @notice It creates a new platform setting given a name, value, min and max values.\\n        @param name setting name to create.\\n        @param value the initial value for the given setting name.\\n        @param min the min value for the setting.\\n        @param max the max value for the setting.\\n     */\\n    function createSetting(\\n        bytes32 name,\\n        uint256 value,\\n        uint256 min,\\n        uint256 max\\n    ) external override onlyConfigurator(msg.sender) {\\n        require(name != \\\"\\\", \\\"NAME_MUST_BE_PROVIDED\\\");\\n        settings[name].create(value, min, max);\\n\\n        emit PlatformSettingCreated(name, msg.sender, value, min, max);\\n    }\\n\\n    /**\\n        @notice It updates an existent platform setting given a setting name.\\n        @notice It only allows to update the value (not the min or max values).\\n        @notice In case you need to update the min or max values, you need to remove it, and create it again.\\n        @param settingName setting name to update.\\n        @param newValue the new value to set.\\n     */\\n    function updateSetting(bytes32 settingName, uint256 newValue)\\n        external\\n        onlyConfigurator(msg.sender)\\n    {\\n        uint256 oldValue = settings[settingName].update(newValue);\\n\\n        emit PlatformSettingUpdated(settingName, msg.sender, oldValue, newValue);\\n    }\\n\\n    /**\\n        @notice Removes a current platform setting given a setting name.\\n        @param name to remove.\\n     */\\n    function removeSetting(bytes32 name) external override onlyConfigurator(msg.sender) {\\n        uint256 oldValue = settings[name].value;\\n        settings[name].remove();\\n\\n        emit PlatformSettingRemoved(name, msg.sender, oldValue);\\n    }\\n\\n    function pause() external override onlyPauser(msg.sender) {\\n        require(!paused, \\\"PLATFORM_ALREADY_PAUSED\\\");\\n\\n        paused = true;\\n\\n        emit PlatformPaused(msg.sender);\\n    }\\n\\n    function unpause() external override onlyPauser(msg.sender) {\\n        require(paused, \\\"PLATFORM_ISNT_PAUSED\\\");\\n\\n        paused = false;\\n\\n        emit PlatformUnpaused(msg.sender);\\n    }\\n\\n    /* View Functions */\\n\\n    function requireIsPaused() external view override {\\n        require(paused, \\\"PLATFORM_ISNT_PAUSED\\\");\\n    }\\n\\n    function requireIsNotPaused() external view override {\\n        require(!paused, \\\"PLATFORM_IS_PAUSED\\\");\\n    }\\n\\n    /**\\n        @notice It gets the current platform setting for a given setting name\\n        @param name to get.\\n        @return the current platform setting.\\n     */\\n    function getSetting(bytes32 name) external view override returns (SettingsLib.Setting memory) {\\n        return _getSetting(name);\\n    }\\n\\n    /**\\n        @notice It gets the current platform setting value for a given setting name\\n        @param name to get.\\n        @return the current platform setting value.\\n     */\\n    function getSettingValue(bytes32 name) external view override returns (uint256) {\\n        return _getSetting(name).value;\\n    }\\n\\n    /**\\n        @notice It tests whether a setting name is already configured.\\n        @param name setting name to test.\\n        @return true if the setting is already configured. Otherwise it returns false.\\n     */\\n    function hasSetting(bytes32 name) external view override returns (bool) {\\n        return _getSetting(name).exists;\\n    }\\n\\n    /**\\n        @notice It gets whether the platform is paused or not.\\n        @return true if platform is paused. Otherwise it returns false.\\n     */\\n    function isPaused() external view override returns (bool) {\\n        return paused;\\n    }\\n\\n    /** Internal functions */\\n\\n    /**\\n        @notice It gets the platform setting for a given setting name.\\n        @param name the setting name to look for.\\n        @return the current platform setting for the given setting name.\\n     */\\n    function _getSetting(bytes32 name) internal view returns (SettingsLib.Setting memory) {\\n        return settings[name];\\n    }\\n\\n    function _rolesManager() internal view returns (IRolesManager) {\\n        return IRolesManager(rolesManager);\\n    }\\n\\n    function _rolesManagerConsts() internal view returns (RolesManagerConsts) {\\n        return RolesManagerConsts(_rolesManager().consts());\\n    }\\n\\n    /** Private functions */\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/SettingsLib.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\nlibrary SettingsLib {\\n    /**\\n        It defines a setting. It includes: value, min, and max values.\\n     */\\n    struct Setting {\\n        uint256 value;\\n        uint256 min;\\n        uint256 max;\\n        bool exists;\\n    }\\n\\n    /**\\n        @notice It creates a new setting given a name, min and max values.\\n        @param value initial value for the setting.\\n        @param min min value allowed for the setting.\\n        @param max max value allowed for the setting.\\n     */\\n    function create(\\n        Setting storage self,\\n        uint256 value,\\n        uint256 min,\\n        uint256 max\\n    ) internal {\\n        requireNotExists(self);\\n        require(value >= min, \\\"VALUE_MUST_BE_GT_MIN_VALUE\\\");\\n        require(value <= max, \\\"VALUE_MUST_BE_LT_MAX_VALUE\\\");\\n        self.value = value;\\n        self.min = min;\\n        self.max = max;\\n        self.exists = true;\\n    }\\n\\n    /**\\n        @notice Checks whether the current setting exists or not.\\n        @dev It throws a require error if the setting already exists.\\n        @param self the current setting.\\n     */\\n    function requireNotExists(Setting storage self) internal view {\\n        require(!self.exists, \\\"SETTING_ALREADY_EXISTS\\\");\\n    }\\n\\n    /**\\n        @notice Checks whether the current setting exists or not.\\n        @dev It throws a require error if the current setting doesn't exist.\\n        @param self the current setting.\\n     */\\n    function requireExists(Setting storage self) internal view {\\n        require(self.exists, \\\"SETTING_NOT_EXISTS\\\");\\n    }\\n\\n    /**\\n        @notice It updates a current setting.\\n        @dev It throws a require error if:\\n            - The new value is equal to the current value.\\n            - The new value is not lower than the max value.\\n            - The new value is not greater than the min value\\n        @param self the current setting.\\n        @param newValue the new value to set in the setting.\\n     */\\n    function update(Setting storage self, uint256 newValue) internal returns (uint256 oldValue) {\\n        requireExists(self);\\n        require(self.value != newValue, \\\"NEW_VALUE_REQUIRED\\\");\\n        require(newValue >= self.min, \\\"NEW_VALUE_MUST_BE_GT_MIN_VALUE\\\");\\n        require(newValue <= self.max, \\\"NEW_VALUE_MUST_BE_LT_MAX_VALUE\\\");\\n        oldValue = self.value;\\n        self.value = newValue;\\n    }\\n\\n    /**\\n        @notice It removes a current setting.\\n        @param self the current setting to remove.\\n     */\\n    function remove(Setting storage self) internal {\\n        requireExists(self);\\n        self.value = 0;\\n        self.min = 0;\\n        self.max = 0;\\n        self.exists = false;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/roles/RolesManagerConsts.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\ncontract RolesManagerConsts {\\n    /**\\n        @notice It is the AccessControl.DEFAULT_ADMIN_ROLE role.\\n     */\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"\\\");\\n\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    bytes32 public constant CONFIGURATOR_ROLE = keccak256(\\\"CONFIGURATOR_ROLE\\\");\\n}\\n\"\r\n    },\r\n    \"contracts/settings/PlatformSettingsConsts.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\ncontract PlatformSettingsConsts {\\n    bytes32 public constant FEE = \\\"Fee\\\";\\n\\n    bytes32 public constant BONUS_MULTIPLIER = \\\"BonusMultiplier\\\";\\n\\n    bytes32 public constant ALLOW_ONLY_EOA = \\\"AllowOnlyEOA\\\";\\n\\n    bytes32 public constant RATE_TOKEN_PAUSED = \\\"RATETokenPaused\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/settings/IPlatformSettings.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../libs/SettingsLib.sol\\\";\\n\\ninterface IPlatformSettings {\\n    event PlatformPaused(address indexed pauser);\\n\\n    event PlatformUnpaused(address indexed unpauser);\\n\\n    event PlatformSettingCreated(\\n        bytes32 indexed name,\\n        address indexed creator,\\n        uint256 value,\\n        uint256 minValue,\\n        uint256 maxValue\\n    );\\n\\n    event PlatformSettingRemoved(bytes32 indexed name, address indexed remover, uint256 value);\\n\\n    event PlatformSettingUpdated(\\n        bytes32 indexed name,\\n        address indexed remover,\\n        uint256 oldValue,\\n        uint256 newValue\\n    );\\n\\n    function createSetting(\\n        bytes32 name,\\n        uint256 value,\\n        uint256 min,\\n        uint256 max\\n    ) external;\\n\\n    function removeSetting(bytes32 name) external;\\n\\n    function getSetting(bytes32 name) external view returns (SettingsLib.Setting memory);\\n\\n    function getSettingValue(bytes32 name) external view returns (uint256);\\n\\n    function hasSetting(bytes32 name) external view returns (bool);\\n\\n    function rolesManager() external view returns (address);\\n\\n    function isPaused() external view returns (bool);\\n\\n    function requireIsPaused() external view;\\n\\n    function requireIsNotPaused() external view;\\n\\n    function consts() external view returns (address);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n}\\n\"\r\n    },\r\n    \"contracts/roles/IRolesManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\ninterface IRolesManager {\\n    event MaxMultiItemsUpdated(address indexed updater, uint8 oldValue, uint8 newValue);\\n\\n    function setMaxMultiItems(uint8 newMaxMultiItems) external;\\n\\n    function multiGrantRole(bytes32 role, address[] calldata accounts) external;\\n\\n    function multiRevokeRole(bytes32 role, address[] calldata accounts) external;\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n    function consts() external view returns (address);\\n\\n    function maxMultiItems() external view returns (uint8);\\n\\n    function requireHasRole(bytes32 role, address account) external view;\\n\\n    function requireHasRole(\\n        bytes32 role,\\n        address account,\\n        string calldata message\\n    ) external view;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rolesManagerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"PlatformPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxValue\",\"type\":\"uint256\"}],\"name\":\"PlatformSettingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"remover\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PlatformSettingRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"remover\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"PlatformSettingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"unpauser\",\"type\":\"address\"}],\"name\":\"PlatformUnpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"consts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"createSetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getSetting\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct SettingsLib.Setting\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getSettingValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"hasSetting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"removeSetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requireIsNotPaused\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requireIsPaused\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rolesManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"settings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"settingName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateSetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PlatformSettings","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e94c04523d9b72bb557b9b23cdb8f42f5d593db1","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}