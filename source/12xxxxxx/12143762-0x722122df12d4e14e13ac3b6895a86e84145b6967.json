{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interfaces/IMiner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IMiner {\\n  function setTornadoTreesContract(address _tornadoTrees) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Proposal.sol\": {\r\n      \"content\": \"/*\\nThis is a proposal to update the TornadoTrees smart contract. It significantly reduces the cost of\\nupdating tornado merkle trees by offloading onchain updates to zkSNARKs.\\n\\nThe proposal will:\\n- disable old tornado proxy\\n- deploy new contracts:\\n  - TornadoTrees - new contract for tree updates\\n  - AdminUpgradeableProxy - upgradeability proxy for TornadoTrees\\n  - TornadoProxy - new tornado proxy with ERC20 support\\n- migrate state from old TornadoTrees contract to the new one\\n- set deployed AdminUpgradeableProxy as new a tree contract in Miner\\n\\nMore info: https://torn.community/t/anonymity-mining-technical-overview/15\\n*/\\n\\n//SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"tornado-trees/contracts/interfaces/ITornadoTreesV1.sol\\\";\\nimport \\\"tornado-trees/contracts/interfaces/IBatchTreeUpdateVerifier.sol\\\";\\nimport \\\"tornado-trees/contracts/TornadoTrees.sol\\\";\\nimport \\\"tornado-trees/contracts/AdminUpgradeableProxy.sol\\\";\\nimport \\\"tornado-anonymity-mining/contracts/TornadoProxy.sol\\\";\\nimport \\\"tornado-anonymity-mining/contracts/interfaces/ITornadoInstance.sol\\\";\\nimport \\\"torn-token/contracts/ENS.sol\\\";\\nimport \\\"./interfaces/ITornadoProxyV1.sol\\\";\\nimport \\\"./interfaces/IMiner.sol\\\";\\n\\ncontract Proposal is EnsResolve {\\n  ITornadoTreesV1 public constant tornadoTreesV1 = ITornadoTreesV1(0x43a3bE4Ae954d9869836702AFd10393D3a7Ea417);\\n  ITornadoProxyV1 public constant tornadoProxyV1 = ITornadoProxyV1(0x905b63Fff465B9fFBF41DeA908CEb12478ec7601);\\n  IMiner public constant miner = IMiner(0x746Aebc06D2aE31B71ac51429A19D54E797878E9);\\n\\n  event DeploymentOf(string name, address addr);\\n\\n  address public immutable verifier;\\n\\n  // params used to search for array lengths on V1 contracts\\n  uint256 private immutable depositsFrom;\\n  uint256 private immutable depositsStep;\\n  uint256 private immutable withdrawalsFrom;\\n  uint256 private immutable withdrawalsStep;\\n\\n  constructor(\\n    address _verifier,\\n    uint256 _depositsFrom,\\n    uint256 _depositsStep,\\n    uint256 _withdrawalsFrom,\\n    uint256 _withdrawalsStep\\n  ) public {\\n    verifier = _verifier;\\n    depositsFrom = _depositsFrom;\\n    depositsStep = _depositsStep;\\n    withdrawalsFrom = _withdrawalsFrom;\\n    withdrawalsStep = _withdrawalsStep;\\n  }\\n\\n  function executeProposal() public {\\n    // Disable all instances on old tornado proxy\\n    bytes32[4] memory miningInstances = getEthInstances();\\n    for (uint256 i = 0; i < miningInstances.length; i++) {\\n      tornadoProxyV1.updateInstance(resolve(miningInstances[i]), false);\\n    }\\n\\n    // Deploy new TornadoTrees implementation\\n    TornadoTrees tornadoTreesImpl = new TornadoTrees(address(this), tornadoTreesV1, getSearchParams());\\n    emit DeploymentOf(\\\"TornadoTrees implementation\\\", address(tornadoTreesImpl));\\n\\n    // Deploy TornadoTrees upgradeable proxy\\n    AdminUpgradeableProxy upgradeableProxy = new AdminUpgradeableProxy(address(tornadoTreesImpl), address(this), \\\"\\\");\\n    TornadoTrees tornadoTrees = TornadoTrees(address(upgradeableProxy));\\n    emit DeploymentOf(\\\"TornadoTrees upgradeable proxy\\\", address(upgradeableProxy));\\n\\n    // Deploy new TornadoProxy\\n    TornadoProxy tornadoProxy = new TornadoProxy(address(tornadoTrees), address(this), getInstances());\\n    emit DeploymentOf(\\\"TornadoProxy\\\", address(tornadoProxy));\\n\\n    // Init tornado trees\\n    tornadoTrees.initialize(address(tornadoProxy), IBatchTreeUpdateVerifier(verifier));\\n\\n    // Update TornadoTrees address on the mining contract\\n    miner.setTornadoTreesContract(address(tornadoTrees));\\n  }\\n\\n  function getSearchParams() public view returns (TornadoTrees.SearchParams memory) {\\n    return\\n      TornadoTrees.SearchParams({\\n        depositsFrom: depositsFrom,\\n        depositsStep: depositsStep,\\n        withdrawalsFrom: withdrawalsFrom,\\n        withdrawalsStep: withdrawalsStep\\n      });\\n  }\\n\\n  function getEthInstances() internal pure returns (bytes32[4] memory) {\\n    return [\\n      bytes32(0xc041982b4f77cbbd82ef3b9ea748738ac6c281d3f1af198770d29f75ac32d80a), // eth-01.tornadocash.eth\\n      bytes32(0x9e5bc9215eecd103644145a5db4f69d5efaf4885bb5bf968f8db271ec5cd539b), // eth-1.tornadocash.eth\\n      bytes32(0x917e42347647689051abc744f502bff342c76ad30c0670b46b305b2f7e1f893d), // eth-10.tornadocash.eth\\n      bytes32(0xddfc726d74f912f49389ef7471e75291969852ce7e5df0509a17bc1e46646985) //  eth-100.tornadocash.eth\\n    ];\\n  }\\n\\n  function getErc20Instances() internal pure returns (bytes32[15] memory) {\\n    return [\\n      bytes32(0x95ad5771ba164db3fc73cc74d4436cb6a6babd7a2774911c69d8caae30410982), // dai-100.tornadocash.eth\\n      bytes32(0x109d0334da83a2c3a687972cc806b0eda52ee7a30f3e44e77b39ae2a20248321), // dai-1000.tornadocash.eth\\n      bytes32(0x3de4b55be5058f538617d5a6a72bff5b5850a239424b34cc5271021cfcc4ccc8), // dai-10000.tornadocash.eth\\n      bytes32(0xf50559e0d2f0213bcb8c67ad45b93308b46b9abdd5ca9c7044efc025fc557f59), // dai-100000.tornadocash.eth\\n      bytes32(0xc9395879ffcee571b0dfd062153b27d62a6617e0f272515f2eb6259fe829c3df), // cdai-5000.tornadocash.eth\\n      bytes32(0xf840ad6cba4dbbab0fa58a13b092556cd53a6eeff716a3c4a41d860a888b6155), // cdai-50000.tornadocash.eth\\n      bytes32(0x8e52ade66daf81cf3f50053e9bfca86a57d685eca96bf6c0b45da481806952b1), // cdai-500000.tornadocash.eth\\n      bytes32(0x0b86f5b8c2f9dcd95382a469480b35302eead707f3fd36359e346b59f3591de2), // cdai-5000000.tornadocash.eth\\n      bytes32(0xd49809328056ea7b7be70076070bf741ec1a27b86bebafdc484eee88c1834191), // usdc-100.tornadocash.eth\\n      bytes32(0x77e2b15eddc494b6da6cee0d797ed30ed3945f2c7de0150f16f0405a12e5665f), // usdc-1000.tornadocash.eth\\n      bytes32(0x36bab2c045f88613be6004ec1dc0c3937941fcf4d4cb78d814c933bf1cf25baf), // usdt-100.tornadocash.eth\\n      bytes32(0x7a3b0883165756c26821d9b8c9737166a156a78b478b17e42da72fba7a373356), // usdt-1000.tornadocash.eth\\n      bytes32(0x10ca74c40211fa1598f0531f35c7d54c19c808082aad53c72ad1fb22ea94ab83), // wbtc-01.tornadocash.eth\\n      bytes32(0x6cea0cba8e46fc4ffaf837edf544ba36e5a35503636c6bca4578e965ab640e2c), // wbtc-1.tornadocash.eth\\n      bytes32(0x82c57bf2f80547b5e31b92c1f92c4f8bc02ad0df3d27326373e9f55adda5bd15) //  wbtc-10.tornadocash.eth\\n    ];\\n  }\\n\\n  function getInstances() public view returns (TornadoProxy.Tornado[] memory instances) {\\n    bytes32[4] memory miningInstances = getEthInstances();\\n    bytes32[15] memory allowedInstances = getErc20Instances();\\n    instances = new TornadoProxy.Tornado[](allowedInstances.length + miningInstances.length);\\n\\n    for (uint256 i = 0; i < miningInstances.length; i++) {\\n      // Enable mining for ETH instances\\n      instances[i] = TornadoProxy.Tornado(\\n        ITornadoInstance(resolve(miningInstances[i])),\\n        TornadoProxy.Instance({ isERC20: false, token: IERC20(address(0)), state: TornadoProxy.InstanceState.MINEABLE })\\n      );\\n    }\\n    for (uint256 i = 0; i < allowedInstances.length; i++) {\\n      // ERC20 are only allowed on proxy without enabling mining for them\\n      ITornadoInstance instance = ITornadoInstance(resolve(allowedInstances[i]));\\n      instances[miningInstances.length + i] = TornadoProxy.Tornado({\\n        addr: instance,\\n        instance: TornadoProxy.Instance({\\n          isERC20: true,\\n          token: IERC20(instance.token()),\\n          state: TornadoProxy.InstanceState.ENABLED\\n        })\\n      });\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"tornado-trees/contracts/interfaces/ITornadoTreesV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface ITornadoTreesV1 {\\n  function lastProcessedDepositLeaf() external view returns (uint256);\\n\\n  function lastProcessedWithdrawalLeaf() external view returns (uint256);\\n\\n  function depositRoot() external view returns (bytes32);\\n\\n  function withdrawalRoot() external view returns (bytes32);\\n\\n  function deposits(uint256 i) external view returns (bytes32);\\n\\n  function withdrawals(uint256 i) external view returns (bytes32);\\n\\n  function registerDeposit(address instance, bytes32 commitment) external;\\n\\n  function registerWithdrawal(address instance, bytes32 nullifier) external;\\n}\\n\"\r\n    },\r\n    \"tornado-trees/contracts/interfaces/IBatchTreeUpdateVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface IBatchTreeUpdateVerifier {\\n  function verifyProof(bytes calldata proof, uint256[1] calldata input) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"tornado-trees/contracts/TornadoTrees.sol\": {\r\n      \"content\": \"// https://tornado.cash\\n/*\\n* d888888P                                           dP              a88888b.                   dP\\n*    88                                              88             d8'   `88                   88\\n*    88    .d8888b. 88d888b. 88d888b. .d8888b. .d888b88 .d8888b.    88        .d8888b. .d8888b. 88d888b.\\n*    88    88'  `88 88'  `88 88'  `88 88'  `88 88'  `88 88'  `88    88        88'  `88 Y8ooooo. 88'  `88\\n*    88    88.  .88 88       88    88 88.  .88 88.  .88 88.  .88 dP Y8.   .88 88.  .88       88 88    88\\n*    dP    `88888P' dP       dP    dP `88888P8 `88888P8 `88888P' 88  Y88888P' `88888P8 `88888P' dP    dP\\n* ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/ITornadoTreesV1.sol\\\";\\nimport \\\"./interfaces/IBatchTreeUpdateVerifier.sol\\\";\\nimport \\\"@openzeppelin/upgrades-core/contracts/Initializable.sol\\\";\\n\\n/// @dev This contract holds a merkle tree of all tornado cash deposit and withdrawal events\\ncontract TornadoTrees is Initializable {\\n  address public immutable governance;\\n  bytes32 public depositRoot;\\n  bytes32 public previousDepositRoot;\\n  bytes32 public withdrawalRoot;\\n  bytes32 public previousWithdrawalRoot;\\n  address public tornadoProxy;\\n  IBatchTreeUpdateVerifier public treeUpdateVerifier;\\n  ITornadoTreesV1 public immutable tornadoTreesV1;\\n\\n  uint256 public constant CHUNK_TREE_HEIGHT = 8;\\n  uint256 public constant CHUNK_SIZE = 2**CHUNK_TREE_HEIGHT;\\n  uint256 public constant ITEM_SIZE = 32 + 20 + 4;\\n  uint256 public constant BYTES_SIZE = 32 + 32 + 4 + CHUNK_SIZE * ITEM_SIZE;\\n  uint256 public constant SNARK_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n  mapping(uint256 => bytes32) public deposits;\\n  uint256 public depositsLength;\\n  uint256 public lastProcessedDepositLeaf;\\n  uint256 public immutable depositsV1Length;\\n\\n  mapping(uint256 => bytes32) public withdrawals;\\n  uint256 public withdrawalsLength;\\n  uint256 public lastProcessedWithdrawalLeaf;\\n  uint256 public immutable withdrawalsV1Length;\\n\\n  event DepositData(address instance, bytes32 indexed hash, uint256 block, uint256 index);\\n  event WithdrawalData(address instance, bytes32 indexed hash, uint256 block, uint256 index);\\n  event VerifierUpdated(address newVerifier);\\n  event ProxyUpdated(address newProxy);\\n\\n  struct TreeLeaf {\\n    bytes32 hash;\\n    address instance;\\n    uint32 block;\\n  }\\n\\n  modifier onlyTornadoProxy {\\n    require(msg.sender == tornadoProxy, \\\"Not authorized\\\");\\n    _;\\n  }\\n\\n  modifier onlyGovernance() {\\n    require(msg.sender == governance, \\\"Only governance can perform this action\\\");\\n    _;\\n  }\\n\\n  struct SearchParams {\\n    uint256 depositsFrom;\\n    uint256 depositsStep;\\n    uint256 withdrawalsFrom;\\n    uint256 withdrawalsStep;\\n  }\\n\\n  constructor(\\n    address _governance,\\n    ITornadoTreesV1 _tornadoTreesV1,\\n    SearchParams memory _searchParams\\n  ) public {\\n    governance = _governance;\\n    tornadoTreesV1 = _tornadoTreesV1;\\n\\n    depositsV1Length = findArrayLength(\\n      _tornadoTreesV1,\\n      \\\"deposits(uint256)\\\",\\n      _searchParams.depositsFrom,\\n      _searchParams.depositsStep\\n    );\\n\\n    withdrawalsV1Length = findArrayLength(\\n      _tornadoTreesV1,\\n      \\\"withdrawals(uint256)\\\",\\n      _searchParams.withdrawalsFrom,\\n      _searchParams.withdrawalsStep\\n    );\\n  }\\n\\n  function initialize(address _tornadoProxy, IBatchTreeUpdateVerifier _treeUpdateVerifier) public initializer onlyGovernance {\\n    tornadoProxy = _tornadoProxy;\\n    treeUpdateVerifier = _treeUpdateVerifier;\\n\\n    depositRoot = tornadoTreesV1.depositRoot();\\n    uint256 lastDepositLeaf = tornadoTreesV1.lastProcessedDepositLeaf();\\n    require(lastDepositLeaf % CHUNK_SIZE == 0, \\\"Incorrect TornadoTrees state\\\");\\n    lastProcessedDepositLeaf = lastDepositLeaf;\\n    depositsLength = depositsV1Length;\\n\\n    withdrawalRoot = tornadoTreesV1.withdrawalRoot();\\n    uint256 lastWithdrawalLeaf = tornadoTreesV1.lastProcessedWithdrawalLeaf();\\n    require(lastWithdrawalLeaf % CHUNK_SIZE == 0, \\\"Incorrect TornadoTrees state\\\");\\n    lastProcessedWithdrawalLeaf = lastWithdrawalLeaf;\\n    withdrawalsLength = withdrawalsV1Length;\\n  }\\n\\n  /// @dev Queue a new deposit data to be inserted into a merkle tree\\n  function registerDeposit(address _instance, bytes32 _commitment) public onlyTornadoProxy {\\n    uint256 _depositsLength = depositsLength;\\n    deposits[_depositsLength] = keccak256(abi.encode(_instance, _commitment, blockNumber()));\\n    emit DepositData(_instance, _commitment, blockNumber(), _depositsLength);\\n    depositsLength = _depositsLength + 1;\\n  }\\n\\n  /// @dev Queue a new withdrawal data to be inserted into a merkle tree\\n  function registerWithdrawal(address _instance, bytes32 _nullifierHash) public onlyTornadoProxy {\\n    uint256 _withdrawalsLength = withdrawalsLength;\\n    withdrawals[_withdrawalsLength] = keccak256(abi.encode(_instance, _nullifierHash, blockNumber()));\\n    emit WithdrawalData(_instance, _nullifierHash, blockNumber(), _withdrawalsLength);\\n    withdrawalsLength = _withdrawalsLength + 1;\\n  }\\n\\n  /// @dev Insert a full batch of queued deposits into a merkle tree\\n  /// @param _proof A snark proof that elements were inserted correctly\\n  /// @param _argsHash A hash of snark inputs\\n  /// @param _argsHash Current merkle tree root\\n  /// @param _newRoot Updated merkle tree root\\n  /// @param _pathIndices Merkle path to inserted batch\\n  /// @param _events A batch of inserted events (leaves)\\n  function updateDepositTree(\\n    bytes calldata _proof,\\n    bytes32 _argsHash,\\n    bytes32 _currentRoot,\\n    bytes32 _newRoot,\\n    uint32 _pathIndices,\\n    TreeLeaf[CHUNK_SIZE] calldata _events\\n  ) public {\\n    uint256 offset = lastProcessedDepositLeaf;\\n    require(_currentRoot == depositRoot, \\\"Proposed deposit root is invalid\\\");\\n    require(_pathIndices == offset >> CHUNK_TREE_HEIGHT, \\\"Incorrect deposit insert index\\\");\\n\\n    bytes memory data = new bytes(BYTES_SIZE);\\n    assembly {\\n      mstore(add(data, 0x44), _pathIndices)\\n      mstore(add(data, 0x40), _newRoot)\\n      mstore(add(data, 0x20), _currentRoot)\\n    }\\n    for (uint256 i = 0; i < CHUNK_SIZE; i++) {\\n      (bytes32 hash, address instance, uint32 blockNumber) = (_events[i].hash, _events[i].instance, _events[i].block);\\n      bytes32 leafHash = keccak256(abi.encode(instance, hash, blockNumber));\\n      bytes32 deposit = offset + i >= depositsV1Length ? deposits[offset + i] : tornadoTreesV1.deposits(offset + i);\\n      require(leafHash == deposit, \\\"Incorrect deposit\\\");\\n      assembly {\\n        let itemOffset := add(data, mul(ITEM_SIZE, i))\\n        mstore(add(itemOffset, 0x7c), blockNumber)\\n        mstore(add(itemOffset, 0x78), instance)\\n        mstore(add(itemOffset, 0x64), hash)\\n      }\\n      if (offset + i >= depositsV1Length) {\\n        delete deposits[offset + i];\\n      } else {\\n        emit DepositData(instance, hash, blockNumber, offset + i);\\n      }\\n    }\\n\\n    uint256 argsHash = uint256(sha256(data)) % SNARK_FIELD;\\n    require(argsHash == uint256(_argsHash), \\\"Invalid args hash\\\");\\n    require(treeUpdateVerifier.verifyProof(_proof, [argsHash]), \\\"Invalid deposit tree update proof\\\");\\n\\n    previousDepositRoot = _currentRoot;\\n    depositRoot = _newRoot;\\n    lastProcessedDepositLeaf = offset + CHUNK_SIZE;\\n  }\\n\\n  /// @dev Insert a full batch of queued withdrawals into a merkle tree\\n  /// @param _proof A snark proof that elements were inserted correctly\\n  /// @param _argsHash A hash of snark inputs\\n  /// @param _argsHash Current merkle tree root\\n  /// @param _newRoot Updated merkle tree root\\n  /// @param _pathIndices Merkle path to inserted batch\\n  /// @param _events A batch of inserted events (leaves)\\n  function updateWithdrawalTree(\\n    bytes calldata _proof,\\n    bytes32 _argsHash,\\n    bytes32 _currentRoot,\\n    bytes32 _newRoot,\\n    uint32 _pathIndices,\\n    TreeLeaf[CHUNK_SIZE] calldata _events\\n  ) public {\\n    uint256 offset = lastProcessedWithdrawalLeaf;\\n    require(_currentRoot == withdrawalRoot, \\\"Proposed withdrawal root is invalid\\\");\\n    require(_pathIndices == offset >> CHUNK_TREE_HEIGHT, \\\"Incorrect withdrawal insert index\\\");\\n\\n    bytes memory data = new bytes(BYTES_SIZE);\\n    assembly {\\n      mstore(add(data, 0x44), _pathIndices)\\n      mstore(add(data, 0x40), _newRoot)\\n      mstore(add(data, 0x20), _currentRoot)\\n    }\\n    for (uint256 i = 0; i < CHUNK_SIZE; i++) {\\n      (bytes32 hash, address instance, uint32 blockNumber) = (_events[i].hash, _events[i].instance, _events[i].block);\\n      bytes32 leafHash = keccak256(abi.encode(instance, hash, blockNumber));\\n      bytes32 withdrawal = offset + i >= withdrawalsV1Length ? withdrawals[offset + i] : tornadoTreesV1.withdrawals(offset + i);\\n      require(leafHash == withdrawal, \\\"Incorrect withdrawal\\\");\\n      assembly {\\n        let itemOffset := add(data, mul(ITEM_SIZE, i))\\n        mstore(add(itemOffset, 0x7c), blockNumber)\\n        mstore(add(itemOffset, 0x78), instance)\\n        mstore(add(itemOffset, 0x64), hash)\\n      }\\n      if (offset + i >= withdrawalsV1Length) {\\n        delete withdrawals[offset + i];\\n      } else {\\n        emit WithdrawalData(instance, hash, blockNumber, offset + i);\\n      }\\n    }\\n\\n    uint256 argsHash = uint256(sha256(data)) % SNARK_FIELD;\\n    require(argsHash == uint256(_argsHash), \\\"Invalid args hash\\\");\\n    require(treeUpdateVerifier.verifyProof(_proof, [argsHash]), \\\"Invalid withdrawal tree update proof\\\");\\n\\n    previousWithdrawalRoot = _currentRoot;\\n    withdrawalRoot = _newRoot;\\n    lastProcessedWithdrawalLeaf = offset + CHUNK_SIZE;\\n  }\\n\\n  function validateRoots(bytes32 _depositRoot, bytes32 _withdrawalRoot) public view {\\n    require(_depositRoot == depositRoot || _depositRoot == previousDepositRoot, \\\"Incorrect deposit tree root\\\");\\n    require(_withdrawalRoot == withdrawalRoot || _withdrawalRoot == previousWithdrawalRoot, \\\"Incorrect withdrawal tree root\\\");\\n  }\\n\\n  /// @dev There is no array length getter for deposit and withdrawal arrays\\n  /// in the previous contract, so we have to find them length manually.\\n  /// Used only during deployment\\n  function findArrayLength(\\n    ITornadoTreesV1 _tornadoTreesV1,\\n    string memory _type,\\n    uint256 _from, // most likely array length after the proposal has passed\\n    uint256 _step // optimal step size to find first match, approximately equals dispersion\\n  ) internal view virtual returns (uint256) {\\n    // Find the segment with correct array length\\n    bool direction = elementExists(_tornadoTreesV1, _type, _from);\\n    do {\\n      _from = direction ? _from + _step : _from - _step;\\n    } while (direction == elementExists(_tornadoTreesV1, _type, _from));\\n    uint256 high = direction ? _from : _from + _step;\\n    uint256 low = direction ? _from - _step : _from;\\n    uint256 mid = (high + low) / 2;\\n\\n    // Perform a binary search in this segment\\n    while (low < mid) {\\n      if (elementExists(_tornadoTreesV1, _type, mid)) {\\n        low = mid;\\n      } else {\\n        high = mid;\\n      }\\n      mid = (low + high) / 2;\\n    }\\n    return mid + 1;\\n  }\\n\\n  function elementExists(\\n    ITornadoTreesV1 _tornadoTreesV1,\\n    string memory _type,\\n    uint256 index\\n  ) public view returns (bool success) {\\n    // Try to get the element. If it succeeds the array length is higher, it it reverts the length is equal or lower\\n    (success, ) = address(_tornadoTreesV1).staticcall{ gas: 2500 }(abi.encodeWithSignature(_type, index));\\n  }\\n\\n  function setTornadoProxyContract(address _tornadoProxy) external onlyGovernance {\\n    tornadoProxy = _tornadoProxy;\\n    emit ProxyUpdated(_tornadoProxy);\\n  }\\n\\n  function setVerifierContract(IBatchTreeUpdateVerifier _treeUpdateVerifier) external onlyGovernance {\\n    treeUpdateVerifier = _treeUpdateVerifier;\\n    emit VerifierUpdated(address(_treeUpdateVerifier));\\n  }\\n\\n  function blockNumber() public view virtual returns (uint256) {\\n    return block.number;\\n  }\\n}\\n\"\r\n    },\r\n    \"tornado-trees/contracts/AdminUpgradeableProxy.sol\": {\r\n      \"content\": \"// https://tornado.cash\\n/*\\n* d888888P                                           dP              a88888b.                   dP\\n*    88                                              88             d8'   `88                   88\\n*    88    .d8888b. 88d888b. 88d888b. .d8888b. .d888b88 .d8888b.    88        .d8888b. .d8888b. 88d888b.\\n*    88    88'  `88 88'  `88 88'  `88 88'  `88 88'  `88 88'  `88    88        88'  `88 Y8ooooo. 88'  `88\\n*    88    88.  .88 88       88    88 88.  .88 88.  .88 88.  .88 dP Y8.   .88 88.  .88       88 88    88\\n*    dP    `88888P' dP       dP    dP `88888P8 `88888P8 `88888P' 88  Y88888P' `88888P8 `88888P' dP    dP\\n* ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\\n*/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol\\\";\\n\\n/**\\n * @dev TransparentUpgradeableProxy where admin is allowed to call implementation methods.\\n */\\ncontract AdminUpgradeableProxy is TransparentUpgradeableProxy {\\n  /**\\n   * @dev Initializes an upgradeable proxy backed by the implementation at `_logic`.\\n   */\\n  constructor(\\n    address _logic,\\n    address _admin,\\n    bytes memory _data\\n  ) public payable TransparentUpgradeableProxy(_logic, _admin, _data) {}\\n\\n  /**\\n   * @dev Override to allow admin access the fallback function.\\n   */\\n  function _beforeFallback() internal override {}\\n}\\n\"\r\n    },\r\n    \"tornado-anonymity-mining/contracts/TornadoProxy.sol\": {\r\n      \"content\": \"// https://tornado.cash\\n/*\\n* d888888P                                           dP              a88888b.                   dP\\n*    88                                              88             d8'   `88                   88\\n*    88    .d8888b. 88d888b. 88d888b. .d8888b. .d888b88 .d8888b.    88        .d8888b. .d8888b. 88d888b.\\n*    88    88'  `88 88'  `88 88'  `88 88'  `88 88'  `88 88'  `88    88        88'  `88 Y8ooooo. 88'  `88\\n*    88    88.  .88 88       88    88 88.  .88 88.  .88 88.  .88 dP Y8.   .88 88.  .88       88 88    88\\n*    dP    `88888P' dP       dP    dP `88888P8 `88888P8 `88888P' 88  Y88888P' `88888P8 `88888P' dP    dP\\n* ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"./interfaces/ITornadoInstance.sol\\\";\\nimport \\\"./interfaces/ITornadoTrees.sol\\\";\\n\\ncontract TornadoProxy {\\n  using SafeERC20 for IERC20;\\n\\n  event EncryptedNote(address indexed sender, bytes encryptedNote);\\n  event InstanceStateUpdated(ITornadoInstance indexed instance, InstanceState state);\\n  event TornadoTreesUpdated(ITornadoTrees addr);\\n\\n  enum InstanceState { DISABLED, ENABLED, MINEABLE }\\n\\n  struct Instance {\\n    bool isERC20;\\n    IERC20 token;\\n    InstanceState state;\\n  }\\n\\n  struct Tornado {\\n    ITornadoInstance addr;\\n    Instance instance;\\n  }\\n\\n  ITornadoTrees public tornadoTrees;\\n  address public immutable governance;\\n  mapping(ITornadoInstance => Instance) public instances;\\n\\n  modifier onlyGovernance() {\\n    require(msg.sender == governance, \\\"Not authorized\\\");\\n    _;\\n  }\\n\\n  constructor(\\n    address _tornadoTrees,\\n    address _governance,\\n    Tornado[] memory _instances\\n  ) public {\\n    tornadoTrees = ITornadoTrees(_tornadoTrees);\\n    governance = _governance;\\n\\n    for (uint256 i = 0; i < _instances.length; i++) {\\n      _updateInstance(_instances[i]);\\n    }\\n  }\\n\\n  function deposit(\\n    ITornadoInstance _tornado,\\n    bytes32 _commitment,\\n    bytes calldata _encryptedNote\\n  ) external payable {\\n    Instance memory instance = instances[_tornado];\\n    require(instance.state != InstanceState.DISABLED, \\\"The instance is not supported\\\");\\n\\n    if (instance.isERC20) {\\n      instance.token.safeTransferFrom(msg.sender, address(this), _tornado.denomination());\\n    }\\n    _tornado.deposit{ value: msg.value }(_commitment);\\n\\n    if (instance.state == InstanceState.MINEABLE) {\\n      tornadoTrees.registerDeposit(address(_tornado), _commitment);\\n    }\\n    emit EncryptedNote(msg.sender, _encryptedNote);\\n  }\\n\\n  function withdraw(\\n    ITornadoInstance _tornado,\\n    bytes calldata _proof,\\n    bytes32 _root,\\n    bytes32 _nullifierHash,\\n    address payable _recipient,\\n    address payable _relayer,\\n    uint256 _fee,\\n    uint256 _refund\\n  ) external payable {\\n    Instance memory instance = instances[_tornado];\\n    require(instance.state != InstanceState.DISABLED, \\\"The instance is not supported\\\");\\n\\n    _tornado.withdraw{ value: msg.value }(_proof, _root, _nullifierHash, _recipient, _relayer, _fee, _refund);\\n    if (instance.state == InstanceState.MINEABLE) {\\n      tornadoTrees.registerWithdrawal(address(_tornado), _nullifierHash);\\n    }\\n  }\\n\\n  function backupNotes(bytes[] calldata _encryptedNotes) external {\\n    for (uint256 i = 0; i < _encryptedNotes.length; i++) {\\n      emit EncryptedNote(msg.sender, _encryptedNotes[i]);\\n    }\\n  }\\n\\n  function updateInstance(Tornado calldata _tornado) external onlyGovernance {\\n    _updateInstance(_tornado);\\n  }\\n\\n  function setTornadoTreesContract(ITornadoTrees _tornadoTrees) external onlyGovernance {\\n    tornadoTrees = _tornadoTrees;\\n    emit TornadoTreesUpdated(_tornadoTrees);\\n  }\\n\\n  /// @dev Method to claim junk and accidentally sent tokens\\n  function rescueTokens(\\n    IERC20 _token,\\n    address payable _to,\\n    uint256 _amount\\n  ) external onlyGovernance {\\n    require(_to != address(0), \\\"TORN: can not send to zero address\\\");\\n\\n    if (_token == IERC20(0)) {\\n      // for Ether\\n      uint256 totalBalance = address(this).balance;\\n      uint256 balance = Math.min(totalBalance, _amount);\\n      _to.transfer(balance);\\n    } else {\\n      // any other erc20\\n      uint256 totalBalance = _token.balanceOf(address(this));\\n      uint256 balance = Math.min(totalBalance, _amount);\\n      require(balance > 0, \\\"TORN: trying to send 0 balance\\\");\\n      _token.safeTransfer(_to, balance);\\n    }\\n  }\\n\\n  function _updateInstance(Tornado memory _tornado) internal {\\n    instances[_tornado.addr] = _tornado.instance;\\n    if (_tornado.instance.isERC20) {\\n      IERC20 token = IERC20(_tornado.addr.token());\\n      require(token == _tornado.instance.token, \\\"Incorrect token\\\");\\n      uint256 allowance = token.allowance(address(this), address(_tornado.addr));\\n\\n      if (_tornado.instance.state != InstanceState.DISABLED && allowance == 0) {\\n        token.safeApprove(address(_tornado.addr), uint256(-1));\\n      } else if (_tornado.instance.state == InstanceState.DISABLED && allowance != 0) {\\n        token.safeApprove(address(_tornado.addr), 0);\\n      }\\n    }\\n    emit InstanceStateUpdated(_tornado.addr, _tornado.instance.state);\\n  }\\n}\\n\"\r\n    },\r\n    \"tornado-anonymity-mining/contracts/interfaces/ITornadoInstance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface ITornadoInstance {\\n  function token() external view returns (address);\\n\\n  function denomination() external view returns (uint256);\\n\\n  function deposit(bytes32 commitment) external payable;\\n\\n  function withdraw(\\n    bytes calldata proof,\\n    bytes32 root,\\n    bytes32 nullifierHash,\\n    address payable recipient,\\n    address payable relayer,\\n    uint256 fee,\\n    uint256 refund\\n  ) external payable;\\n}\\n\"\r\n    },\r\n    \"torn-token/contracts/ENS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface ENS {\\n  function resolver(bytes32 node) external view returns (Resolver);\\n}\\n\\ninterface Resolver {\\n  function addr(bytes32 node) external view returns (address);\\n}\\n\\ncontract EnsResolve {\\n  function resolve(bytes32 node) public view virtual returns (address) {\\n    ENS Registry = ENS(\\n      getChainId() == 1 ? 0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e : 0x8595bFb0D940DfEDC98943FA8a907091203f25EE\\n    );\\n    return Registry.resolver(node).addr(node);\\n  }\\n\\n  function bulkResolve(bytes32[] memory domains) public view returns (address[] memory result) {\\n    result = new address[](domains.length);\\n    for (uint256 i = 0; i < domains.length; i++) {\\n      result[i] = resolve(domains[i]);\\n    }\\n  }\\n\\n  function getChainId() internal pure returns (uint256) {\\n    uint256 chainId;\\n    assembly {\\n      chainId := chainid()\\n    }\\n    return chainId;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITornadoProxyV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface ITornadoProxyV1 {\\n  function updateInstance(address _instance, bool _update) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades-core/contracts/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./UpgradeableProxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n * \\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n * \\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n * \\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n * \\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is UpgradeableProxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}.\\n     */\\n    constructor(address _logic, address admin_, bytes memory _data) public payable UpgradeableProxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _setAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _admin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     * \\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     * \\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _admin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     * \\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     * \\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     * \\n     * Emits an {AdminChanged} event.\\n     * \\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external ifAdmin {\\n        require(newAdmin != address(0), \\\"TransparentUpgradeableProxy: new admin is the zero address\\\");\\n        emit AdminChanged(_admin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     * \\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeTo(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     * \\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeTo(newImplementation);\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success,) = newImplementation.delegatecall(data);\\n        require(success);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view returns (address adm) {\\n        bytes32 slot = _ADMIN_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            adm := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        bytes32 slot = _ADMIN_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newAdmin)\\n        }\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal override virtual {\\n        require(msg.sender != _admin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/UpgradeableProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Proxy.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n * \\n * Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\\n * {TransparentUpgradeableProxy}.\\n */\\ncontract UpgradeableProxy is Proxy {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     * \\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) public payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _setImplementation(_logic);\\n        if(_data.length > 0) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success,) = _logic.delegatecall(_data);\\n            require(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal override view returns (address impl) {\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            impl := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Upgrades the proxy to a new implementation.\\n     * \\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableProxy: new implementation is not a contract\\\");\\n\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newImplementation)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n * \\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n * \\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     * \\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 { revert(0, returndatasize()) }\\n            default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal virtual view returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     * \\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback () external payable {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive () external payable {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     * \\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"tornado-anonymity-mining/contracts/interfaces/ITornadoTrees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface ITornadoTrees {\\n  function registerDeposit(address instance, bytes32 commitment) external;\\n\\n  function registerWithdrawal(address instance, bytes32 nullifier) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tornadoTrees\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract ITornadoInstance\",\"name\":\"addr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isERC20\",\"type\":\"bool\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum TornadoProxy.InstanceState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct TornadoProxy.Instance\",\"name\":\"instance\",\"type\":\"tuple\"}],\"internalType\":\"struct TornadoProxy.Tornado[]\",\"name\":\"_instances\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedNote\",\"type\":\"bytes\"}],\"name\":\"EncryptedNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ITornadoInstance\",\"name\":\"instance\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum TornadoProxy.InstanceState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"InstanceStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ITornadoTrees\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"TornadoTreesUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_encryptedNotes\",\"type\":\"bytes[]\"}],\"name\":\"backupNotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITornadoInstance\",\"name\":\"_tornado\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_encryptedNote\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITornadoInstance\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"instances\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isERC20\",\"type\":\"bool\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum TornadoProxy.InstanceState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITornadoTrees\",\"name\":\"_tornadoTrees\",\"type\":\"address\"}],\"name\":\"setTornadoTreesContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tornadoTrees\",\"outputs\":[{\"internalType\":\"contract ITornadoTrees\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract ITornadoInstance\",\"name\":\"addr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isERC20\",\"type\":\"bool\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum TornadoProxy.InstanceState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct TornadoProxy.Instance\",\"name\":\"instance\",\"type\":\"tuple\"}],\"internalType\":\"struct TornadoProxy.Tornado\",\"name\":\"_tornado\",\"type\":\"tuple\"}],\"name\":\"updateInstance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITornadoInstance\",\"name\":\"_tornado\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refund\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"TornadoProxy","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000527653ea119f3e6a1f5bd18fbf4714081d7b31ce0000000000000000000000005efda50f22d34f262c29268506c5fa42cb56a1ce0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000001300000000000000000000000012d66f87a04a9e220743712ce6d9bb1b5616b8fc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000047ce0c6ed5b0ce3d3a51fdb1c52dc66a7c3c2936000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000910cbd523d972eb0a6f4cae4618ad62622b39dbf000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000a160cdab225685da1d56aa342ad8841c3b53f291000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000d4b88df4d29f5cedd6857912842cff3b20c8cfa300000000000000000000000000000000000000000000000000000000000000010000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000fd8610d20aa15b7b2e3be39b396a1bc3516c714400000000000000000000000000000000000000000000000000000000000000010000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000000000000000000000000000000000000000000100000000000000000000000007687e702b410fa43f4cb4af7fa097918ffd273000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000000000000000000000000000000000000000000100000000000000000000000023773e65ed146a459791799d01336db287f2533400000000000000000000000000000000000000000000000000000000000000010000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000000000000000000000000000000000000000000100000000000000000000000022aaa7720ddd5388a3c0a3333430953c68f1849b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e3643000000000000000000000000000000000000000000000000000000000000000100000000000000000000000003893a7c7463ae47d46bc7f091665f189365600300000000000000000000000000000000000000000000000000000000000000010000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e364300000000000000000000000000000000000000000000000000000000000000010000000000000000000000002717c5e28cf931547b621a5dddb772ab6a35b70100000000000000000000000000000000000000000000000000000000000000010000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e36430000000000000000000000000000000000000000000000000000000000000001000000000000000000000000d21be7248e0197ee08e0c20d4a96debdac3d20af00000000000000000000000000000000000000000000000000000000000000010000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e36430000000000000000000000000000000000000000000000000000000000000001000000000000000000000000d96f2b1c14db8458374d9aca76e26c3d183643070000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000000010000000000000000000000004736dcf1b7a3d580672cce6e7c65cd5cc9cfba9d0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000001000000000000000000000000169ad27a470d064dede56a2d3ff727986b15d52b0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000836222f2b2b24a3f36f98668ed8f0b38d1a872f0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000000000000000000000000000000000000000000001000000000000000000000000178169b423a011fff22b9e3f3abea13414ddd0f100000000000000000000000000000000000000000000000000000000000000010000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c5990000000000000000000000000000000000000000000000000000000000000001000000000000000000000000610b717796ad172b316836ac95a2ffad065ceab400000000000000000000000000000000000000000000000000000000000000010000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c5990000000000000000000000000000000000000000000000000000000000000001000000000000000000000000bb93e510bbcd0b7beb5a853875f9ec60275cf49800000000000000000000000000000000000000000000000000000000000000010000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c5990000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}