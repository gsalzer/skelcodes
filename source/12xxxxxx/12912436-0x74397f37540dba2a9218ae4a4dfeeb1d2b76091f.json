{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}  \r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n\tfunction getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ncontract AllTimeHigh is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => uint256) private sellcooldown;\r\n    mapping (address => uint256) private buycooldown;\r\n    mapping (address => bool) private bots;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 1000000 * 10**18;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\tuint256 private _ATHPrice;\r\n\tuint256 private _ATHResetPrice;\r\n\tuint256 private _ATHResetPercent;\r\n\tuint256 private _maxTxAmount = _tTotal;\r\n\tuint256 private _minTxAmount = 0;\r\n    \r\n    uint8 private _ATHFee = 0;\r\n    uint8 private _devFee = 0;\r\n    uint8 private _previousATHFee = _ATHFee;\r\n    uint8 private _previousDevFee = _devFee;\r\n    \r\n    address payable private _devWallet;\r\n    address payable private _ATHWallet;\r\n    address payable private _marketingWallet;\r\n    \r\n    \r\n    string private constant _name = unicode\"All Time High \\xE2\\x8A\\x99_\\xE2\\x98\\x89\";\r\n    string private constant _symbol = \"ATH\";\r\n    uint8 private constant _decimals = 18;\r\n    \r\n    IUniswapV2Router02 private uniswapV2Router;\r\n\tIUniswapV2Pair private uniswapV2Pair;\r\n    address private _uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\t\r\n\t\r\n\tevent ATHUpdated(uint256 _ATHPrice, address _ATHWallet);\r\n\tevent MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n\tevent MinTxAmountUpdated(uint256 _minTxAmount);\r\n\tevent ATHPayout (uint256 amount, address _ATHWallet);\r\n\t\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    \r\n    receive() external payable {}   \r\n    \r\n    constructor (address mktWallet) {\r\n        _devWallet = payable(_msgSender());\r\n        _ATHWallet = payable(0);\r\n        _marketingWallet = payable(mktWallet);\r\n        _rOwned[address(this)] = _rTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_devWallet] = true;\r\n        _isExcludedFromFee[_marketingWallet] = true;\r\n\t\t_ATHPrice = 0;\r\n\t\t_ATHResetPrice = 0;\r\n\t\t_ATHResetPercent = 30;\r\n\t\temit Transfer(address(0), address(this), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n    \r\n    function ATHPrice() public view returns (uint256) {\r\n        return _ATHPrice;\r\n    }\r\n    \r\n    function ATHWallet() public view returns (address) {\r\n        return _ATHWallet;\r\n    }\r\n\t\r\n\tfunction pairAddress() public view returns (address) {\r\n        return _uniswapV2Pair;\r\n    }\r\n    \r\n    function ATHResetPrice() public view returns (uint256) {\r\n        return _ATHResetPrice;\r\n    }\r\n    \r\n    function maxTxAmount() public view returns (uint256) {\r\n        return _maxTxAmount;\r\n    }\r\n    \r\n    function minTxAmount() public view returns (uint256) {\r\n        return _minTxAmount;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) private view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\t\tif (owner != address(this)) {\r\n\t\t\trequire(tradingOpen, \"Trading not open yet\");\r\n\t\t}\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        if (from != owner() && to != owner()) {\r\n            require(!bots[from] && !bots[to]);\r\n            if (from == _uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to]) {\r\n                // Buying\r\n\t\t\t\trequire(tradingOpen, \"Trading not open yet\");\r\n                require(amount <= _maxTxAmount, \"Buy amount exceeds max TX amount\");\r\n\t\t\t\trequire(amount >= _minTxAmount, \"Buy amount under min TX amount\");\r\n\t\t\t\trequire(buycooldown[to] < block.timestamp, \"Buying again too soon\");\r\n\t\t\t\t\r\n\t\t\t\tsellcooldown[to] = block.timestamp + (5 minutes);\r\n\t\t\t\tbuycooldown[to] = block.timestamp + (3 minutes);\r\n\t\t\t\t\r\n\t\t\t\tuint256 currentPrice = getPrice();\r\n\t\t\t\tif (currentPrice > _ATHPrice) {\r\n\t\t\t\t\t// new ATH has been reached \r\n\t\t\t\t\t_ATHWallet = payable(to);\r\n\t\t\t\t\t_ATHPrice = currentPrice;\r\n\t\t\t\t\t_ATHResetPrice = currentPrice.sub(currentPrice.mul(_ATHResetPercent).div(10**2));\r\n\t\t\t\t\temit ATHUpdated(_ATHPrice, _ATHWallet);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n            if (from == _ATHWallet) {\r\n\t\t\t\t// Our ATH wallet holder is selling/transferring,\r\n\t\t\t\t// reset price so next buyer becomes ATH holder.\r\n\t\t\t\t_ATHPrice = 0;\r\n\t\t\t\t_ATHWallet = payable(0);\r\n\t\t\t\temit ATHUpdated(_ATHPrice, _ATHWallet);\r\n\t\t\t}\r\n            \r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && from != _uniswapV2Pair && swapEnabled) {\r\n                require(sellcooldown[from] < block.timestamp, \"Selling too soon\");\r\n                // Check to see if price has gone below ATH Reset price.\r\n                uint256 currentPrice = getPrice();\r\n                if (currentPrice < _ATHResetPrice) {\r\n                        _ATHPrice = 0;\r\n                        _ATHWallet = payable(0);\r\n                        _ATHResetPrice = 0;\r\n                }\r\n                swapTokensForEth(contractTokenBalance);\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0 && _ATHWallet != address(0)) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n\r\n        }\r\n        bool takeFee = true;\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n              takeFee = false;\r\n         }\r\n        _tokenTransfer(from,to,amount, takeFee);\r\n    }\r\n    \r\n    function airDrop(address[] calldata _addresses, uint256[] calldata _amounts) payable public onlyOwner() {\r\n        require(!tradingOpen);\r\n        require(_addresses.length == _amounts.length);\r\n        for (uint8 i; i < _addresses.length; i++) {\r\n             _tokenTransfer(address(this), _addresses[i], _amounts[i], false);\r\n        }\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n        \r\n    function sendETHToFee(uint256 amount) private {\r\n        \r\n        uint256 athAmount = amount.mul(50).div(100);\r\n        _ATHWallet.transfer(athAmount);\r\n        _devWallet.transfer(amount.mul(33).div(100));\r\n        _marketingWallet.transfer(amount.mul(17).div(100));\r\n        emit ATHPayout(athAmount, _ATHWallet);\r\n        \r\n    }\r\n    \r\n    function createPair() public onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(_uniswapV2Pair).approve(address(uniswapV2Router), type(uint256).max);\r\n    }\r\n    \r\n    function openTrading() public onlyOwner(){\r\n        require(!tradingOpen, \"trading is already open\");\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n        _ATHFee = 3;\r\n        _devFee = 3;\r\n    }\r\n    \r\n    function setATHResetPercent(uint256 newResetPercent) external onlyOwner() {\r\n        _ATHResetPercent = newResetPercent;\r\n    }\r\n    \r\n    function setBots(address[] memory bots_) public onlyOwner {\r\n        for (uint i = 0; i < bots_.length; i++) {\r\n            bots[bots_[i]] = true;\r\n        }\r\n    }\r\n    \r\n    function delBot(address notbot) public onlyOwner {\r\n        bots[notbot] = false;\r\n    }\r\n\t\r\n\tfunction setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\r\n        require(maxTxPercent > 0, \"Amount must be greater than 0\");\r\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(10**2);\r\n        emit MaxTxAmountUpdated(_maxTxAmount);\r\n    }\r\n    \r\n    function setMktWallet(address payable newMktWallet) external onlyOwner() {\r\n        _marketingWallet = payable(newMktWallet);\r\n    }\r\n    \r\n    function setMinTxAmount(uint256 minAmount) external onlyOwner() {\r\n        require(minAmount > 0, \"Amount must be greater than 0\");\r\n        _minTxAmount = minAmount;\r\n        emit MinTxAmountUpdated(_minTxAmount);\r\n    }\r\n        \r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n         if(!takeFee)\r\n            _removeAllFee();\r\n         _transferStandard(sender, recipient, amount);\r\n         if(!takeFee)\r\n            _restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n            (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);\r\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); \r\n            _takeTeam(tTeam);\r\n            _reflectFee(rFee, tFee);\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _takeTeam(uint256 tTeam) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n    \r\n    function _removeAllFee() private {\r\n        if(_ATHFee == 0 && _devFee == 0) return;\r\n        \r\n        _previousATHFee = _ATHFee;\r\n        _previousDevFee = _devFee;\r\n        \r\n        _ATHFee = 0;\r\n        _devFee = 0;\r\n    }\r\n    \r\n    function _restoreAllFee() private {\r\n         _ATHFee = _previousATHFee;\r\n         _devFee = _previousDevFee;\r\n    }\r\n\r\n    function manualswap() external {\r\n        require(_msgSender() == _devWallet);\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n    \r\n    function manualsend() external {\r\n        require(_msgSender() == _devWallet);\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendETHToFee(contractETHBalance);\r\n    }\r\n\t\r\n\tfunction getPrice() public view returns (uint256) {\r\n\t    require(tradingOpen,\"trading isn't open\");\r\n\t\tIUniswapV2Pair pair = IUniswapV2Pair(_uniswapV2Pair);\r\n\t\t(uint112 token0, uint112 token1,) = pair.getReserves();\r\n\t\t(uint256 tokenReserves, uint256 ethReserves) = (address(this) < uniswapV2Router.WETH()) ? (token0, token1) : (token1, token0);\r\n\t\treturn ethReserves.mul(10000000000).div(tokenReserves);\r\n\t}\r\n\t\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _devFee, _ATHFee);\r\n        uint256 currentRate =  _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, uint256 taxFee, uint256 TeamFee) private pure returns (uint256, uint256, uint256) {\r\n        uint256 tFee = tAmount.mul(taxFee).div(100);\r\n        uint256 tTeam = tAmount.mul(TeamFee).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\r\n        return (tTransferAmount, tFee, tTeam);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n\tfunction _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;      \r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\t\r\n\t\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mktWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_ATHWallet\",\"type\":\"address\"}],\"name\":\"ATHPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ATHPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_ATHWallet\",\"type\":\"address\"}],\"name\":\"ATHUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minTxAmount\",\"type\":\"uint256\"}],\"name\":\"MinTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ATHPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ATHResetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ATHWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"airDrop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notbot\",\"type\":\"address\"}],\"name\":\"delBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newResetPercent\",\"type\":\"uint256\"}],\"name\":\"setATHResetPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"setBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"setMinTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newMktWallet\",\"type\":\"address\"}],\"name\":\"setMktWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"AllTimeHigh","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ea2ca53c07d0e3d28ce376bad6c8467be9383a06","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5e1ec127a8888e0231280ef15191fb921f3bf108191e7f1d41f367e3e9550ead"}]}