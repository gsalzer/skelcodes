{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: contracts/interfaces/IERC20.sol\r\n\r\n// pragma solidity ^0.6.12;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n\r\n// Dependency file: contracts/Ownable.sol\r\n\r\n// pragma solidity ^0.6.12;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    // Let contract be functional for proxy contract initialization\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/libraries/Math.sol\r\n\r\n// pragma solidity ^0.6.12;\r\n\r\n// a library for performing various math operations\r\n\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/libraries/SafeMath.sol\r\n\r\n// pragma solidity ^0.6.12;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n// Dependency file: contracts/libraries/Address.sol\r\n\r\n// pragma solidity ^0.6.12;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [// importANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * // importANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/libraries/SafeERC20.sol\r\n\r\n// pragma solidity ^0.6.12;\r\n\r\n// import \"contracts/interfaces/IERC20.sol\";\r\n// import \"contracts/libraries/SafeMath.sol\";\r\n// import \"contracts/libraries/Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/interfaces/IStakingRewards.sol\r\n\r\n// pragma solidity ^0.6.12;\r\n\r\n\r\ninterface IStakingRewards {\r\n    // Views\r\n    function lastTimeRewardApplicable() external view returns (uint256);\r\n\r\n    function rewardPerToken() external view returns (uint256);\r\n\r\n    function earned(address account) external view returns (uint256);\r\n\r\n    function getRewardForDuration() external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    // Mutative\r\n\r\n    function stake(uint256 amount) external;\r\n\r\n    function withdraw(uint256 amount) external;\r\n\r\n    function getReward() external;\r\n\r\n    function exit() external;\r\n}\r\n\r\n// Dependency file: contracts/ReentrancyGuard.sol\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/staking/StakingRewardsV2.sol\r\n\r\n// pragma solidity ^0.6.12;\r\n\r\n\r\n// import 'contracts/libraries/Math.sol';\r\n// import 'contracts/libraries/SafeMath.sol';\r\n// import \"contracts/libraries/SafeERC20.sol\";\r\n\r\n// import 'contracts/interfaces/IERC20.sol';\r\n// import 'contracts/interfaces/IStakingRewards.sol';\r\n\r\n// import 'contracts/ReentrancyGuard.sol';\r\n\r\ncontract StakingRewardsV2 is ReentrancyGuard, IStakingRewards {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    bool public initialized;\r\n    IERC20 public rewardsToken;\r\n    IERC20 public stakingToken;\r\n    address public rewardsDistributor;\r\n    address public externalController;\r\n\r\n    struct RewardEpoch {\r\n        uint id;\r\n        uint totalSupply;\r\n        uint startEpoch;\r\n        uint finishEpoch;\r\n        uint rewardRate;\r\n        uint lastUpdateTime;\r\n        uint rewardPerTokenStored;\r\n    }\r\n    // epoch\r\n    mapping(uint => RewardEpoch) public epochData;\r\n    mapping(uint => mapping(address => uint)) public userRewardPerTokenPaid;\r\n    mapping(uint => mapping(address => uint)) public rewards;\r\n    mapping(uint => mapping(address => uint)) private _balances;\r\n    mapping(address => uint) public lastAccountEpoch;\r\n    uint public currentEpochId;\r\n\r\n    function initialize(\r\n        address _externalController,\r\n        address _rewardsDistributor,\r\n        address _rewardsToken,\r\n        address _stakingToken\r\n        ) external {\r\n            require(initialized == false, \"Contract already initialized.\");\r\n            rewardsToken = IERC20(_rewardsToken);\r\n            stakingToken = IERC20(_stakingToken);\r\n            rewardsDistributor = _rewardsDistributor;\r\n            externalController = _externalController;\r\n    }\r\n\r\n    function _totalSupply(uint epoch) internal view returns (uint) {\r\n        return epochData[epoch].totalSupply;\r\n    }\r\n\r\n    function _balanceOf(uint epoch, address account) public view returns (uint) {\r\n        return _balances[epoch][account];\r\n    }\r\n\r\n    function _lastTimeRewardApplicable(uint epoch) internal view returns (uint) {\r\n        if (block.timestamp < epochData[epoch].startEpoch) {\r\n            return 0;\r\n        }\r\n        return Math.min(block.timestamp, epochData[epoch].finishEpoch);\r\n    }\r\n\r\n    function totalSupply() external override view returns (uint) {\r\n        return _totalSupply(currentEpochId);\r\n    }\r\n\r\n    function balanceOf(address account) external override view returns (uint) {\r\n        return _balanceOf(currentEpochId, account);\r\n    }\r\n\r\n    function lastTimeRewardApplicable() public override view returns (uint) {\r\n        return _lastTimeRewardApplicable(currentEpochId);\r\n    }\r\n\r\n    function _rewardPerToken(uint _epoch) internal view returns (uint) {\r\n        RewardEpoch memory epoch = epochData[_epoch];\r\n        if (block.timestamp < epoch.startEpoch) {\r\n            return 0;\r\n        }\r\n        if (epoch.totalSupply == 0) {\r\n            return epoch.rewardPerTokenStored;\r\n        }\r\n        return\r\n            epoch.rewardPerTokenStored.add(\r\n                _lastTimeRewardApplicable(_epoch).sub(epoch.lastUpdateTime).mul(epoch.rewardRate).mul(1e18).div(epoch.totalSupply)\r\n            );\r\n    }\r\n\r\n    function rewardPerToken() public override view returns (uint) {\r\n        _rewardPerToken(currentEpochId);\r\n    }\r\n\r\n    function _earned(uint _epoch, address account) internal view returns (uint256) {\r\n        return _balances[_epoch][account].mul(_rewardPerToken(_epoch).sub(userRewardPerTokenPaid[_epoch][account])).div(1e18).add(rewards[_epoch][account]);\r\n    }\r\n\r\n    function earned(address account) public override view returns (uint256) {\r\n        return _earned(currentEpochId, account);\r\n    }\r\n\r\n    function getRewardForDuration() external override view returns (uint256) {\r\n        RewardEpoch memory epoch = epochData[currentEpochId];\r\n        return epoch.rewardRate.mul(epoch.finishEpoch - epoch.startEpoch);\r\n    }\r\n\r\n    function _stake(uint amount, bool withDepositTransfer) internal {\r\n        require(amount > 0, \"Cannot stake 0\");\r\n        require(lastAccountEpoch[msg.sender] == currentEpochId || lastAccountEpoch[msg.sender] == 0, \"Account should update epoch to stake.\");\r\n        epochData[currentEpochId].totalSupply = epochData[currentEpochId].totalSupply.add(amount);\r\n        _balances[currentEpochId][msg.sender] = _balances[currentEpochId][msg.sender].add(amount);\r\n        if(withDepositTransfer) {\r\n            stakingToken.safeTransferFrom(msg.sender, address(this), amount);\r\n        }\r\n        lastAccountEpoch[msg.sender] = currentEpochId;\r\n        emit Staked(msg.sender, amount, currentEpochId);\r\n    }\r\n\r\n    function stake(uint256 amount) nonReentrant updateReward(msg.sender) override external {\r\n        _stake(amount, true);\r\n    }\r\n\r\n    function withdraw(uint256 amount) override public nonReentrant updateReward(msg.sender) {\r\n        require(amount > 0, \"Cannot withdraw 0\");\r\n        uint lastEpoch = lastAccountEpoch[msg.sender];\r\n        epochData[lastEpoch].totalSupply = epochData[lastEpoch].totalSupply.sub(amount);\r\n        _balances[lastEpoch][msg.sender] = _balances[lastEpoch][msg.sender].sub(amount);\r\n        stakingToken.safeTransfer(msg.sender, amount);\r\n        emit Withdrawn(msg.sender, amount, lastEpoch);\r\n    }\r\n\r\n    function getReward() override public nonReentrant updateReward(msg.sender) {\r\n        uint lastEpoch = lastAccountEpoch[msg.sender];\r\n        uint reward = rewards[lastEpoch][msg.sender];\r\n        if (reward > 0) {\r\n            rewards[lastEpoch][msg.sender] = 0;\r\n            rewardsToken.safeTransfer(msg.sender, reward);\r\n            emit RewardPaid(msg.sender, reward);\r\n        }\r\n    }\r\n\r\n    function exit() override external {\r\n        withdraw(_balances[lastAccountEpoch[msg.sender]][msg.sender]);\r\n        getReward();\r\n    }\r\n\r\n    function updateStakingEpoch() public {\r\n        uint lastEpochId = lastAccountEpoch[msg.sender];\r\n        _updateRewardForEpoch(msg.sender, lastEpochId);\r\n\r\n        // Remove record about staking on last account epoch\r\n        uint stakedAmount = _balances[lastEpochId][msg.sender];\r\n        _balances[lastEpochId][msg.sender] = 0;\r\n        epochData[lastEpochId].totalSupply = epochData[lastEpochId].totalSupply.sub(stakedAmount);\r\n        // Move collected rewards from last epoch to the current\r\n        rewards[currentEpochId][msg.sender] = rewards[lastEpochId][msg.sender];\r\n        rewards[lastEpochId][msg.sender] = 0;\r\n\r\n        // Restake\r\n        lastAccountEpoch[msg.sender] = currentEpochId;\r\n        _stake(stakedAmount, false);\r\n    }\r\n\r\n    function _updateRewardForEpoch(address account, uint epoch) internal {\r\n        epochData[epoch].rewardPerTokenStored = _rewardPerToken(epoch);\r\n        epochData[epoch].lastUpdateTime = _lastTimeRewardApplicable(epoch);\r\n        if (account != address(0)) {\r\n            rewards[epoch][account] = _earned(epoch, account);\r\n            userRewardPerTokenPaid[epoch][account] = epochData[epoch].rewardPerTokenStored;\r\n        }\r\n    }\r\n\r\n\r\n    modifier updateReward(address account) {\r\n        uint lastEpoch = lastAccountEpoch[account];\r\n        if(account == address(0)) {\r\n            lastEpoch = currentEpochId;\r\n        }\r\n        _updateRewardForEpoch(account, lastEpoch);\r\n        _;\r\n    }\r\n\r\n    function notifyRewardAmount(uint reward, uint startEpoch, uint finishEpoch) nonReentrant external {\r\n        require(msg.sender == rewardsDistributor, \"Only reward distribured allowed.\");\r\n        require(startEpoch >= block.timestamp, \"Provided start date too late.\");\r\n        require(finishEpoch > startEpoch, \"Wrong end date epoch.\");\r\n        require(reward > 0, \"Wrong reward amount\");\r\n        uint rewardsDuration = finishEpoch - startEpoch;\r\n\r\n        RewardEpoch memory newEpoch;\r\n        // Initialize new epoch\r\n        currentEpochId++;\r\n        newEpoch.id = currentEpochId;\r\n        newEpoch.startEpoch = startEpoch;\r\n        newEpoch.finishEpoch = finishEpoch;\r\n        newEpoch.rewardRate = reward.div(rewardsDuration);\r\n        // last update time will be right when epoch starts\r\n        newEpoch.lastUpdateTime = startEpoch;\r\n\r\n        epochData[newEpoch.id] = newEpoch;\r\n\r\n        emit EpochAdded(newEpoch.id, startEpoch, finishEpoch, reward);\r\n    }\r\n\r\n    function externalWithdraw() external {\r\n        require(msg.sender == externalController, \"Only external controller allowed.\");\r\n        rewardsToken.transfer(msg.sender, rewardsToken.balanceOf(msg.sender));\r\n    }\r\n\r\n    event EpochAdded(uint epochId, uint startEpoch, uint finishEpoch, uint256 reward);\r\n    event Staked(address indexed user, uint amount, uint epoch);\r\n    event Withdrawn(address indexed user, uint amount, uint epoch);\r\n    event RewardPaid(address indexed user, uint reward);\r\n\r\n\r\n}\r\n\r\n// Dependency file: contracts/interfaces/IWSCustomProxy.sol\r\n\r\n// pragma solidity ^0.6.12;\r\n\r\ninterface IWSCustomProxy {\r\n    function initialize(address _implementation, address _admin, bytes calldata _data) external;\r\n    function upgradeStorageTo(address _proxy) external;\r\n    function upgradeStorageToAndCall(address _proxy, bytes calldata data) external payable;\r\n    function changeAdmin(address newAdmin) external;\r\n    function admin() external returns (address);\r\n    function implementation() external returns (address);\r\n}\r\n\r\n\r\n// Dependency file: contracts/proxy/WSCustomProxy.sol\r\n\r\n// pragma solidity ^0.6.12;\r\n\r\n// import 'contracts/interfaces/IWSCustomProxy.sol';\r\n\r\n/**\r\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\r\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\r\n * be specified by overriding the virtual {_implementation} function.\r\n * \r\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\r\n * different contract through the {_delegate} function.\r\n * \r\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\r\n */\r\nabstract contract Proxy {\r\n    /**\r\n     * @dev Delegates the current call to `implementation`.\r\n     * \r\n     * This function does not return to its internall call site, it will return directly to the external caller.\r\n     */\r\n    function _delegate(address implementation) internal {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize())\r\n\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize())\r\n\r\n            switch result\r\n            // delegatecall returns 0 on error.\r\n            case 0 { revert(0, returndatasize()) }\r\n            default { return(0, returndatasize()) }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\r\n     * and {_fallback} should delegate.\r\n     */\r\n    function _implementation() internal virtual returns (address);\r\n\r\n    /**\r\n     * @dev Delegates the current call to the address returned by `_implementation()`.\r\n     * \r\n     * This function does not return to its internall call site, it will return directly to the external caller.\r\n     */\r\n    function _fallback() internal {\r\n        _delegate(_implementation());\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\r\n     * function in the contract matches the call data.\r\n     */\r\n    fallback () payable external {\r\n        _delegate(_implementation());\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\r\n     * is empty.\r\n     */\r\n    receive () payable external {\r\n        _delegate(_implementation());\r\n    }\r\n}\r\n\r\n/**\r\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\r\n * implementation address that can be changed. This address is stored in storage in the location specified by\r\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\r\n * implementation behind the proxy.\r\n * \r\n * Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\r\n * {TransparentUpgradeableProxy}.\r\n */\r\ncontract UpgradeableCustomProxy is Proxy {\r\n    /**\r\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\r\n     * \r\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\r\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\r\n     */\r\n    constructor() public payable {\r\n        assert(_IMPLEMENTATION_STORAGE_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation_storage\")) - 1));\r\n    }\r\n\r\n    /**\r\n     * @dev Emitted when the implementation is upgraded.\r\n     */\r\n    event Upgraded(address indexed implementationStorage);\r\n\r\n    /**\r\n     * @dev Storage slot with the address of the current implementation.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 private constant _IMPLEMENTATION_STORAGE_SLOT = 0x32966ed17b28d3117e87cb2c15a847a3829937667aa3286f41cf85a257e10460;\r\n\r\n    /**\r\n     * @dev Returns the current implementation address.\r\n     */\r\n    function _implementation() internal virtual override returns (address impl) {\r\n        bytes32 slot = _IMPLEMENTATION_STORAGE_SLOT;\r\n        address storage_address;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            storage_address := sload(slot)\r\n        }\r\n        impl = ImplementationGetter(storage_address).getImplementationAddress();\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrades the proxy to a new implementation.\r\n     * \r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeStorageTo(address newImplementationStorage) virtual internal {\r\n        _setImplementationStorage(newImplementationStorage);\r\n        emit Upgraded(newImplementationStorage);\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 implementation slot.\r\n     */\r\n    function _setImplementationStorage(address newImplementationStorage) private {\r\n        bytes32 slot = _IMPLEMENTATION_STORAGE_SLOT;\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            sstore(slot, newImplementationStorage)\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev This contract implements a proxy that is upgradeable by an admin.\r\n * \r\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\r\n * clashing], which can potentially be used in an attack, this contract uses the\r\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\r\n * things that go hand in hand:\r\n * \r\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\r\n * that call matches one of the admin functions exposed by the proxy itself.\r\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\r\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\r\n * \"admin cannot fallback to proxy target\".\r\n * \r\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\r\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\r\n * to sudden errors when trying to call a function from the proxy implementation.\r\n * \r\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\r\n * you should think of the `ProxyAdmin` instance as the real administrative inerface of your proxy.\r\n */\r\ncontract TransparentUpgradeableCustomProxy is UpgradeableCustomProxy, IWSCustomProxy {\r\n    /**\r\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\r\n     * optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}.\r\n     */\r\n    constructor() public payable UpgradeableCustomProxy() {\r\n        require(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1), \"Wrong admin slot\");\r\n        _setAdmin(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Emitted when the admin account has changed.\r\n     */\r\n    event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n    /**\r\n     * @dev Storage slot with the admin of the contract.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n    /**\r\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\r\n     */\r\n    modifier ifAdmin() {\r\n        if (msg.sender == _admin()) {\r\n            _;\r\n        } else {\r\n            _fallback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     * \r\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\r\n     */\r\n    function admin() external override ifAdmin returns (address) {\r\n        return _admin();\r\n    }\r\n\r\n    function initialize(address _newImplementationStorage, address _admin, bytes calldata _data) external override ifAdmin {\r\n        _upgradeStorageTo(_newImplementationStorage);\r\n        _setAdmin(_admin);\r\n        if(_data.length > 0) {\r\n            // solhint-disable-next-line avoid-low-level-calls\r\n            (bool success,) = _implementation().delegatecall(_data);\r\n            require(success);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current implementation.\r\n     */\r\n    function implementation() external override ifAdmin returns (address) {\r\n        return _implementation();\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the admin of the proxy.\r\n     * \r\n     * Emits an {AdminChanged} event.\r\n     * \r\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\r\n     */\r\n    function changeAdmin(address newAdmin) external override ifAdmin {\r\n        require(newAdmin != _admin(), \"WSProxy: new admin is the same admin.\");\r\n        emit AdminChanged(_admin(), newAdmin);\r\n        _setAdmin(newAdmin);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy.\r\n     * \r\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\r\n     */\r\n    function upgradeStorageTo(address newImplementation) external override ifAdmin {\r\n        _upgradeStorageTo(newImplementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\r\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\r\n     * proxied contract.\r\n     * \r\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\r\n     */\r\n    function upgradeStorageToAndCall(address newImplementation, bytes calldata data) external override payable ifAdmin {\r\n        _upgradeStorageTo(newImplementation);\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success,) = newImplementation.delegatecall(data);\r\n        require(success);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     */\r\n    function _admin() internal view returns (address adm) {\r\n        bytes32 slot = _ADMIN_SLOT;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            adm := sload(slot)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 admin slot.\r\n     */\r\n    function _setAdmin(address newAdmin) private {\r\n        bytes32 slot = _ADMIN_SLOT;\r\n        // remove this protection\r\n        // require(newAdmin != address(0), \"WSProxy: Can't set admin to zero address.\");\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            sstore(slot, newAdmin)\r\n        }\r\n    }\r\n}\r\n\r\ninterface ImplementationGetter {\r\n    function getImplementationAddress() external returns(address);\r\n}\r\n\r\n// Dependency file: contracts/proxy/WSStakingRewardsProxy.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\n// pragma solidity ^0.6.12;\r\n\r\n// import \"contracts/proxy/WSCustomProxy.sol\";\r\n\r\ncontract StakingProxy is TransparentUpgradeableCustomProxy {\r\n    constructor() public payable TransparentUpgradeableCustomProxy() {\r\n    }\r\n}\r\n\r\n// Root file: contracts/staking/StakingRewardsFactoryV2.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n// import 'contracts/interfaces/IERC20.sol';\r\n// import 'contracts/Ownable.sol';\r\n\r\n// import 'contracts/staking/StakingRewardsV2.sol';\r\n// import 'contracts/proxy/WSStakingRewardsProxy.sol';\r\n\r\ncontract StakingRewardsFactoryV2 is Ownable {\r\n    uint public SEALED_TIME = 16 days;\r\n\r\n    bool public initialized;\r\n    address public implementationGetter;\r\n    address public externalController;\r\n    address public rewardsToken;\r\n    address[] public stakingTokens;\r\n    mapping(address => address payable) public stakingRewardsByStakingToken;\r\n\r\n    struct Epoch {\r\n        uint id;\r\n        uint startEpoch;\r\n        uint finishEpoch;\r\n        address[] stakingRewards;\r\n        uint[] rewards;\r\n        // could be used later\r\n        uint sealedTimestamp;\r\n        bool executed;\r\n    }\r\n    mapping(uint => Epoch) public stakingEpoch;\r\n    uint public currentEpochId;\r\n    uint public upcomingEpochId;\r\n\r\n    function initialize(address _rewardsToken, address _externalController, address _implementationGetter) external {\r\n        require(initialized == false, \"StakingRewardsFactoryV2::initialize:Contract already initialized.\");\r\n        rewardsToken = _rewardsToken;\r\n        externalController = _externalController;\r\n        implementationGetter = _implementationGetter;\r\n        super._transferOwnership(msg.sender);\r\n        initialized = true;\r\n    }\r\n\r\n    function setupNewEpoch(address[] memory stakingTokensEpoch, uint[] memory rewards, uint startEpoch, uint finishEpoch) onlyOwner external {\r\n        require(stakingTokensEpoch.length == rewards.length, \"StakingRewardsFactoryV2::setupNewEpoch:Array length should be equal.\");\r\n        require(stakingTokensEpoch.length > 0, \"StakingRewardsFactoryV2::setupNewEpoch:New epoch should not be empty.\");\r\n        Epoch storage newEpoch = stakingEpoch[currentEpochId + 1];\r\n        for(uint i = 0; i < stakingTokensEpoch.length; i++) {\r\n            address stakingReward = stakingRewardsByStakingToken[stakingTokensEpoch[i]];\r\n            require(stakingReward != address(0), \"StakingRewardsFactoryV2::setupNewEpoch:Wrong staking reward address\");\r\n            require(rewards[i] != 0, \"StakingRewardsFactoryV2::setupNewEpoch:Wrong staking reward amount\");\r\n            newEpoch.stakingRewards.push(stakingReward);\r\n            newEpoch.rewards.push(rewards[i]);\r\n        }\r\n        newEpoch.startEpoch = startEpoch;\r\n        newEpoch.finishEpoch = finishEpoch;\r\n        newEpoch.id = currentEpochId + 1;\r\n    }\r\n\r\n    function cancelNewEpoch() onlyOwner external {\r\n        delete stakingEpoch[currentEpochId + 1];\r\n    }\r\n\r\n    function executeNewEpoch() onlyOwner external {\r\n        currentEpochId++;\r\n        Epoch memory newEpoch = stakingEpoch[currentEpochId];\r\n        require(newEpoch.id == currentEpochId, \"StakingRewardsFactoryV2::notifyRewardAmount:New epoch should be configured before execution.\");\r\n        assert(newEpoch.executed == false);\r\n        for(uint i = 0; i < newEpoch.stakingRewards.length; i++) {\r\n            require(\r\n                IERC20(rewardsToken).transfer(newEpoch.stakingRewards[i], newEpoch.rewards[i]),\r\n                'StakingRewardsFactoryV2::notifyRewardAmount: transfer failed'\r\n            );\r\n            StakingRewardsV2(newEpoch.stakingRewards[i]).notifyRewardAmount(newEpoch.rewards[i], newEpoch.startEpoch, newEpoch.finishEpoch);\r\n        }\r\n        stakingEpoch[currentEpochId].executed = true;\r\n    }\r\n\r\n    function deploy(address stakingToken) onlyOwner external {\r\n        require(stakingRewardsByStakingToken[stakingToken] == address(0), 'StakingRewardsFactoryV2::deploy: already deployed');\r\n        stakingRewardsByStakingToken[stakingToken] = address(new StakingProxy());\r\n        // We set admin address to zero, because we can change implementation with implementationGetter\r\n        StakingProxy(stakingRewardsByStakingToken[stakingToken]).initialize(implementationGetter, address(0), '');\r\n        StakingRewardsV2(stakingRewardsByStakingToken[stakingToken]).initialize(externalController, address(this), rewardsToken, stakingToken);\r\n        stakingTokens.push(stakingToken);\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SEALED_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelNewEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeNewEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"externalController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementationGetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_externalController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_implementationGetter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stakingTokensEpoch\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"startEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finishEpoch\",\"type\":\"uint256\"}],\"name\":\"setupNewEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finishEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sealedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingRewardsByStakingToken\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upcomingEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakingRewardsFactoryV2","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d67e369b875fe4ea342ff053592de0db7336740f86446334923f540a1b928d97"}]}