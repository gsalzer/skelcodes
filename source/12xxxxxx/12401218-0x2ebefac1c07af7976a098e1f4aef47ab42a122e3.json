{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/E/Task/CalDex/Governance/SC/contracts/Vesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * @notice Copied from OpenZeppelin.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\n/**\\n * @dev A token holder contract that will allow a beneficiary to extract the\\n * tokens after a given release time.\\n *\\n * Useful for vesting schedules with cliff period.\\n */\\ncontract Vesting {\\n    // ERC20 basic token contract being held\\n    IERC20 private _token;\\n\\n    // Vesting struct to store address info\\n    struct VestingStruct {\\n        uint256 vestedTokens;\\n        uint256 cliffPeriod;\\n        uint256 vestingPeriod;\\n        uint256 vestingStartTime;\\n        uint256 withdrawalPerDay;\\n    }\\n\\n    // Mapping to store Balance and Release Time of Beneficiary\\n    mapping(address => VestingStruct) public addressInfo;\\n\\n    mapping(address => uint256) public tokensAlreadyWithdrawn;\\n\\n    /**\\n     * @dev Triggers on new deposit call\\n     */\\n    event TokenVested(\\n        address beneficary,\\n        uint256 amount,\\n        uint256 cliffPeriod,\\n        uint256 vestingPeriod,\\n        uint256 vestingStartTime,\\n        uint256 withdrawalPerDay\\n    );\\n\\n    /**\\n     * @dev Triggers on every release\\n     */\\n    event TokenReleased(address beneficary, uint256 amount);\\n\\n    /**\\n     * @dev Sets the token address to be vested.\\n     *\\n     * token_ value is immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(IERC20 token_) public {\\n        _token = token_;\\n    }\\n\\n    /**\\n     * @return the token being held.\\n     */\\n    function token() external view returns (IERC20) {\\n        return _token;\\n    }\\n\\n    /**\\n     * @return the total token stored in the contract\\n     */\\n    function totalTokensVested() external view returns (uint256) {\\n        return _token.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Deposit tokens for vesting.\\n     * @param beneficiary The address, who can release token after vesting duration.\\n     * @param amount The amount of token to be locked.\\n     * @param vestingPeriod Must be in days.\\n     */\\n    function deposit(\\n        address beneficiary,\\n        uint256 amount,\\n        uint256 cliffPeriod,\\n        uint256 vestingPeriod\\n    ) external returns (bool success) {\\n        VestingStruct memory result = addressInfo[msg.sender];\\n\\n        require(\\n            result.vestedTokens == 0,\\n            \\\"Vesting: Beneficiary already have vested token. Use another address\\\"\\n        );\\n\\n        require(\\n            _token.transferFrom(msg.sender, address(this), amount),\\n            \\\"Vesting: Please approve token first\\\"\\n        );\\n\\n        addressInfo[beneficiary] = VestingStruct(\\n            amount,\\n            cliffPeriod,\\n            vestingPeriod,\\n            block.timestamp,\\n            amount / vestingPeriod\\n        );\\n\\n        emit TokenVested(\\n            beneficiary,\\n            amount,\\n            cliffPeriod,\\n            vestingPeriod,\\n            block.timestamp,\\n            amount / vestingPeriod\\n        );\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfers tokens held by timelock to beneficiary.\\n     */\\n    function withdraw() external virtual {\\n        VestingStruct memory result = addressInfo[msg.sender];\\n\\n        require(\\n            result.vestedTokens > 0,\\n            \\\"Vesting: You don't have any vested token\\\"\\n        );\\n\\n        require(\\n            block.timestamp >=\\n                (result.vestingStartTime + (result.cliffPeriod * 1 days)),\\n            \\\"Vesting: Cliff period is not over yet\\\"\\n        );\\n\\n        uint256 tokensAvailable = getAvailableTokens(msg.sender);\\n        uint256 alreadyWithdrawn = tokensAlreadyWithdrawn[msg.sender];\\n\\n        require(\\n            tokensAvailable + alreadyWithdrawn <= result.vestedTokens,\\n            \\\"Vesting: Can't withdraw more than vested token amount\\\"\\n        );\\n\\n        if (tokensAvailable + alreadyWithdrawn == result.vestedTokens) {\\n            tokensAlreadyWithdrawn[msg.sender] = 0;\\n            addressInfo[msg.sender] = VestingStruct(0, 0, 0, 0, 0);\\n        } else {\\n            tokensAlreadyWithdrawn[msg.sender] += tokensAvailable;\\n        }\\n\\n        emit TokenReleased(msg.sender, tokensAvailable);\\n\\n        _token.transfer(msg.sender, tokensAvailable);\\n    }\\n\\n    function getAvailableTokens(address beneficiary)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        VestingStruct memory result = addressInfo[beneficiary];\\n\\n        if (result.vestedTokens > 0) {\\n            uint256 vestingEndTime =\\n                (result.vestingStartTime + (result.vestingPeriod * 1 days));\\n\\n            if (block.timestamp >= vestingEndTime) {\\n                return\\n                    result.vestedTokens - tokensAlreadyWithdrawn[beneficiary];\\n            } else {\\n                uint256 totalDays =\\n                    ((\\n                        block.timestamp > vestingEndTime\\n                            ? vestingEndTime\\n                            : block.timestamp\\n                    ) - result.vestingStartTime) / 1 days;\\n\\n                return\\n                    (totalDays * result.withdrawalPerDay) -\\n                    tokensAlreadyWithdrawn[beneficiary];\\n            }\\n        } else {\\n            return 0;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cliffPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalPerDay\",\"type\":\"uint256\"}],\"name\":\"TokenVested\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vestedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalPerDay\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPeriod\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getAvailableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensAlreadyWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensVested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Vesting","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003bebdce1219c394dfaa1df781f9aa31d179dff47","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}