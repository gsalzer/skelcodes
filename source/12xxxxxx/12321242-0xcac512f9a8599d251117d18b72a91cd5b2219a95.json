{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * // importANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/ICurveFiSwap.sol\r\n\r\n\r\n// pragma solidity >=0.7.5 <0.8.0;\r\npragma abicoder v2;\r\n\r\ninterface ICurveFiSwap {\r\n    event TokenExchange(\r\n        address indexed buyer,\r\n        address indexed receiver,\r\n        address indexed pool,\r\n        address token_sold,\r\n        address token_bought,\r\n        uint256 amount_sold,\r\n        uint256 amount_bought\r\n    );\r\n\r\n    function exchange_with_best_rate(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        uint256 _expected\r\n    ) external payable returns (uint256);\r\n\r\n    function exchange_with_best_rate(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        uint256 _expected,\r\n        address _receiver\r\n    ) external payable returns (uint256);\r\n\r\n    function exchange(\r\n        address _pool,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        uint256 _expected\r\n    ) external payable returns (uint256);\r\n\r\n    function exchange(\r\n        address _pool,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        uint256 _expected,\r\n        address _receiver\r\n    ) external payable returns (uint256);\r\n\r\n    function get_best_rate(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) view external returns (address, uint256);\r\n\r\n    function get_exchange_amount(\r\n        address _pool,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) view external returns (uint256);\r\n\r\n    function get_input_amount(\r\n        address _pool,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) view external returns (uint256);\r\n\r\n    function get_exchange_amounts(\r\n        address _pool,\r\n        address _from,\r\n        address _to,\r\n        uint256[100] calldata _amounts\r\n    ) view external returns (uint256[100] memory);\r\n\r\n    function get_calculator(address _pool) view external returns (address);\r\n\r\n    function update_registry_address() external returns (bool);\r\n\r\n    function set_calculator(address _pool, address _calculator) external returns (bool);\r\n\r\n    function set_default_calculator(address _calculator) external returns (bool);\r\n\r\n    function claim_balance(address _token) external returns (bool);\r\n\r\n    function set_killed(bool _is_killed) external returns (bool);\r\n\r\n    function registry() view external returns (address);\r\n\r\n    function default_calculator() view external returns (address);\r\n\r\n    function is_killed() view external returns (bool);\r\n}\r\n\r\n\r\n// Dependency file: contracts/libraries/Helper.sol\r\n\r\n// Helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary Helper {\r\n  function safeApprove(\r\n    address token,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n    require(\r\n      success && (data.length == 0 || abi.decode(data, (bool))),\r\n      'Helper::safeApprove: approve failed'\r\n    );\r\n  }\r\n\r\n  function safeTransfer(\r\n    address token,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n    require(\r\n      success && (data.length == 0 || abi.decode(data, (bool))),\r\n      'Helper::safeTransfer: transfer failed'\r\n    );\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    address token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n    require(\r\n      success && (data.length == 0 || abi.decode(data, (bool))),\r\n      'Helper::transferFrom: transferFrom failed'\r\n    );\r\n  }\r\n\r\n  function safeTransferETH(address to, uint256 value) internal {\r\n    (bool success, ) = to.call{value: value}(new bytes(0));\r\n    require(success, 'Helper::safeTransferETH: ETH transfer failed');\r\n  }\r\n}\r\n\r\n\r\n// Root file: contracts/DePayRouterV1CurveFiSwap01.sol\r\n\r\n\r\npragma solidity >=0.7.5 <0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import 'contracts/interfaces/ICurveFiSwap.sol';\r\n// import 'contracts/libraries/Helper.sol';\r\n\r\ncontract DePayRouterV1CurveFiSwap01 {\r\n  \r\n  using SafeMath for uint;\r\n\r\n  // Address representating ETH (e.g. in payment routing paths)\r\n  address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n  // MAXINT to be used only, to increase allowance from\r\n  // payment protocol contract towards known \r\n  // decentralized exchanges, not to dyanmically called contracts!!!\r\n  uint public immutable MAXINT = type(uint256).max;\r\n  \r\n  // Address of Synth sETH (sETH).\r\n  // They're mostly using sETH\r\n  // https://etherscan.io/address/0x5e74C9036fb86BD7eCdcb084a0673EFc32eA31cb\r\n  address public immutable SETH;\r\n\r\n  // Address of CurveFiSwap\r\n  address public immutable CurveFiSwap;\r\n\r\n  // Indicates that this plugin requires delegate call\r\n  bool public immutable delegate = true;\r\n\r\n  // Pass SETH and the _CurveFiSwap when deploying this contract.\r\n  constructor ( address _SETH, address _CurveFiSwap) {\r\n    SETH = _SETH;\r\n    CurveFiSwap = _CurveFiSwap;\r\n  }\r\n\r\n  // Swap tokenA<>tokenB, ETH<>sETH or sETH<>ETH on CureFi.\r\n  //\r\n  // path -> [from, to]\r\n  // amounts -> [amount, expected]\r\n  // addresses -> [pool]\r\n  //\r\n  //  function exchange(\r\n  //      address _pool,      # Pool address, could able to get from \r\n  //      address _from,      # From token address\r\n  //      address _to,        # To token address\r\n  //      uint256 _amount,    # Amount\r\n  //      uint256 _expected,  # Minimum amount of from token, like you expect to exchange for 1 USDT\r\n  //      address _receiver,  # Receiver address\r\n  //  ) payable returns (uint256);\r\n  //\r\n  function execute(\r\n    address[] calldata path,\r\n    uint[] calldata amounts,\r\n    address[] calldata addresses,\r\n    string[] calldata data\r\n  ) external payable returns(bool) {\r\n    // Make sure swapping the token within the payment protocol contract is approved on the CurveFiSwap.\r\n    if( \r\n      // from != ETH address\r\n      path[0] != ETH &&\r\n      IERC20(path[0]).allowance(address(this), CurveFiSwap) < amounts[0]\r\n    ) {\r\n      // Allow CurveFi transfer token\r\n      Helper.safeApprove(path[0], CurveFiSwap, MAXINT);\r\n    }\r\n\r\n    // From token is ETH, \r\n    if(path[0] == ETH) {\r\n      ICurveFiSwap(CurveFiSwap).exchange{value: amounts[0]}(\r\n        addresses[0], // pool\r\n        path[0],      // from token\r\n        path[1],      // to token\r\n        amounts[0],   // amount\r\n        amounts[1],   // expected\r\n        address(this) // receiver\r\n      );\r\n    } else {\r\n      ICurveFiSwap(CurveFiSwap).exchange(\r\n        addresses[0], // pool\r\n        path[0],      // from token\r\n        path[1],      // to token\r\n        amounts[0],   // amount\r\n        amounts[1],   // expected\r\n        address(this) // receiver\r\n      );\r\n    }\r\n\r\n    return true;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_SETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_CurveFiSwap\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CurveFiSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"data\",\"type\":\"string[]\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"DePayRouterV1CurveFiSwap01","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005e74c9036fb86bd7ecdcb084a0673efc32ea31cb0000000000000000000000002393c368c70b42f055a4932a3fbec2ac9c548011","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b7b5827f4fba1ba724cec98a8f5ea24c08847f6ea4f29e18ec0786c17c95f9eb"}]}