{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/metapriest/code/my_code/dotvote/contracts/contracts/identity/FixedPriceGate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.7.4;\\n\\nimport \\\"../interfaces/IGate.sol\\\";\\nimport \\\"../interfaces/IIncinerator.sol\\\";\\n\\ncontract FixedPriceGate is IGate {\\n\\n    uint public ethCost;\\n    address public management;\\n    address public burnToken;\\n\\n    IIncinerator public incinerator;\\n\\n    event ManagementUpdated(address oldManagement, address newManagement);\\n    event PriceUpdated(uint oldPrice, uint newPrice);\\n\\n    modifier managementOnly() {\\n        require (msg.sender == management, 'Only management may call this');\\n        _;\\n    }\\n\\n    constructor (uint _ethCost, address _management, address _incinerator, address _burnToken) {\\n        ethCost = _ethCost;\\n        management = _management;\\n        incinerator = IIncinerator(_incinerator);\\n        burnToken = _burnToken;\\n    }\\n\\n    // change the management key\\n    function setManagement(address newMgmt) external managementOnly {\\n        address oldMgmt =  management;\\n        management = newMgmt;\\n        emit ManagementUpdated(oldMgmt, newMgmt);\\n    }\\n\\n    function setPrice(uint newPrice) external managementOnly {\\n        uint oldPrice = ethCost;\\n        ethCost = newPrice;\\n        emit PriceUpdated(oldPrice, newPrice);\\n    }\\n\\n    function getCost() override external view returns (uint _ethCost) {\\n        return ethCost;\\n    }\\n\\n    function passThruGate() override external payable {\\n        require(msg.value >= ethCost, 'Please send more ETH');\\n\\n        // burn token cost\\n        if (msg.value > 0) {\\n            incinerator.incinerate{value: msg.value}(burnToken);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/metapriest/code/my_code/dotvote/contracts/contracts/interfaces/IGate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.7.4;\\n\\ninterface IGate {\\n\\n    function getCost() external view returns (uint ethCost);\\n\\n    function passThruGate() external payable;\\n}\\n\"\r\n    },\r\n    \"/home/metapriest/code/my_code/dotvote/contracts/contracts/interfaces/IIncinerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.7.4;\\n\\ninterface IIncinerator {\\n\\n    function incinerate(address tokenAddr) external payable;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethCost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_management\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_incinerator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burnToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldManagement\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newManagement\",\"type\":\"address\"}],\"name\":\"ManagementUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"burnToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethCost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incinerator\",\"outputs\":[{\"internalType\":\"contract IIncinerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"management\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"passThruGate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMgmt\",\"type\":\"address\"}],\"name\":\"setManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FixedPriceGate","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000288fe43139741f91a8cbb6f4add83811c794851b00000000000000000000000083ade5216489e4768b80227c4608c5b12179de4d00000000000000000000000045080a6531d671ddff20db42f93792a489685e32","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}