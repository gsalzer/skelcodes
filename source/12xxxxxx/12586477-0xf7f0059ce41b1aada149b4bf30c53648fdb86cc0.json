{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/strategies/HarvestFarmer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"../../libraries/Ownable.sol\\\";\\n\\nimport \\\"../../interfaces/IHFVault.sol\\\";\\nimport \\\"../../interfaces/IHFStake.sol\\\";\\nimport \\\"../../interfaces/IDAOVault2.sol\\\";\\nimport \\\"../../interfaces/IFARM.sol\\\";\\nimport \\\"../../interfaces/IUniswapV2Router02.sol\\\";\\n\\n/// @title Contract for yield token with Harvest Finance and utilize FARM token\\ncontract HarvestFarmer is OwnableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using SafeERC20Upgradeable for IHFVault;\\n    using SafeERC20Upgradeable for IFARM;\\n    using SafeMathUpgradeable for uint256;\\n\\n    bytes32 public strategyName;\\n    IERC20Upgradeable public token;\\n    IDAOVault2 public daoVault;\\n    IHFVault public hfVault;\\n    IHFStake public hfStake;\\n    IFARM public FARM;\\n    IUniswapV2Router02 public uniswapRouter;\\n    address public WETH;\\n    bool public isVesting;\\n    uint256 public pool;\\n\\n    // For Uniswap\\n    uint256 public amountOutMinPerc;\\n\\n    // Address to collect fees\\n    address public treasuryWallet;\\n    address public communityWallet;\\n\\n    uint256 public profileSharingFeePercentage;\\n\\n    event SetTreasuryWallet(address indexed oldTreasuryWallet, address indexed newTreasuryWallet);\\n    event SetCommunityWallet(address indexed oldCommunityWallet, address indexed newCommunityWallet);\\n    event SetProfileSharingFeePercentage(\\n        uint256 indexed oldProfileSharingFeePercentage, uint256 indexed newProfileSharingFeePercentage);\\n\\n    modifier notVesting {\\n        require(!isVesting, \\\"Contract in vesting state\\\");\\n        _;\\n    }\\n\\n    modifier onlyVault {\\n        require(msg.sender == address(daoVault), \\\"Only can call from Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Replace constructor function in clone contract\\n     * @dev modifier initializer: only allow run this function once\\n     * @param _strategyName Name of this strategy contract\\n     * @param _token Token to utilize\\n     * @param _hfVault Harvest Finance vault contract for _token\\n     * @param _hfStake Harvest Finance stake contract for _hfVault\\n     * @param _FARM FARM token contract\\n     * @param _uniswapRouter Uniswap Router contract that implement swap\\n     * @param _WETH WETH token contract\\n     * @param _owner Owner of this strategy contract\\n     */\\n    function init(\\n        bytes32 _strategyName, address _token, address _hfVault, address _hfStake, address _FARM, address _uniswapRouter, address _WETH, address _owner\\n    ) external initializer {\\n        __Ownable_init(_owner);\\n\\n        strategyName = _strategyName;\\n        token = IERC20Upgradeable(_token);\\n        hfVault = IHFVault(_hfVault);\\n        hfStake = IHFStake(_hfStake);\\n        FARM = IFARM(_FARM);\\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\\n        WETH = _WETH;\\n\\n        amountOutMinPerc = 0; // Set 0 to prevent transaction failed if FARM token price drop sharply and cause high slippage\\n        treasuryWallet = 0x59E83877bD248cBFe392dbB5A8a29959bcb48592;\\n        communityWallet = 0xdd6c35aFF646B2fB7d8A8955Ccbe0994409348d0;\\n        profileSharingFeePercentage = 1000;\\n        \\n        token.safeApprove(address(hfVault), type(uint256).max);\\n        hfVault.safeApprove(address(hfStake), type(uint256).max);\\n        FARM.safeApprove(address(uniswapRouter), type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Set Vault that interact with this contract\\n     * @dev This function call after deploy Vault contract and only able to call once\\n     * @dev This function is needed only if this is the first strategy to connect with Vault\\n     * @param _address Address of Vault\\n     * Requirements:\\n     * - Only owner of this contract can call this function\\n     * - Vault is not set yet\\n     */\\n    function setVault(address _address) external onlyOwner {\\n        require(address(daoVault) == address(0), \\\"Vault set\\\");\\n\\n        daoVault = IDAOVault2(_address);\\n    }\\n\\n    /**\\n     * @notice Set new treasury wallet address in contract\\n     * @param _treasuryWallet Address of new treasury wallet\\n     * Requirements:\\n     * - Only owner of this contract can call this function\\n     */\\n    function setTreasuryWallet(address _treasuryWallet) external onlyOwner {\\n        address oldTreasuryWallet = treasuryWallet;\\n        treasuryWallet = _treasuryWallet;\\n        emit SetTreasuryWallet(oldTreasuryWallet, _treasuryWallet);\\n    }\\n\\n    /**\\n     * @notice Set new community wallet address in contract\\n     * @param _communityWallet Address of new community wallet\\n     * Requirements:\\n     * - Only owner of this contract can call this function\\n     */\\n    function setCommunityWallet(address _communityWallet) external onlyOwner {\\n        address oldCommunityWallet = communityWallet;\\n        communityWallet = _communityWallet;\\n        emit SetCommunityWallet(oldCommunityWallet, _communityWallet);\\n    }\\n\\n    /**\\n     * @notice Set profile sharing fee\\n     * @param _percentage Integar (100 = 1%)\\n     * Requirements:\\n     * - Only owner of this contract can call this function\\n     * - Amount set must less than 3000 (30%)\\n     */\\n    function setProfileSharingFeePercentage(uint256 _percentage) external onlyOwner {\\n        require(_percentage < 3000, \\\"Profile sharing fee percentage cannot be more than 30%\\\");\\n\\n        uint256 oldProfileSharingFeePercentage = profileSharingFeePercentage;\\n        profileSharingFeePercentage = _percentage;\\n        emit SetProfileSharingFeePercentage(oldProfileSharingFeePercentage, _percentage);\\n    }\\n\\n    /**\\n     * @notice Set amount out minimum percentage for swap FARM token in Uniswap\\n     * @param _percentage Integar (100 = 1%)\\n     * Requirements:\\n     * - Only owner of this contract can call this function\\n     * - Percentage set must less than or equal 9700 (97%)\\n     */\\n    function setAmountOutMinPerc(uint256 _percentage) external onlyOwner {\\n        require(_percentage <= 9700, \\\"Amount out minimun > 97%\\\");\\n\\n        amountOutMinPerc = _percentage;\\n    }\\n\\n    /**\\n     * @notice Get current balance in contract\\n     * @param _address Address to query\\n     * @return result\\n     * Result == total user deposit balance after fee if not vesting state\\n     * Result == user available balance to refund including profit if in vesting state\\n     */\\n    function getCurrentBalance(address _address) external view returns (uint256 result) {\\n        uint256 _daoVaultTotalSupply = daoVault.totalSupply();\\n        if (0 < _daoVaultTotalSupply) {\\n            uint256 _shares = daoVault.balanceOf(_address);\\n            if (isVesting == false) {\\n                uint256 _fTokenBalance = (hfStake.balanceOf(address(this))).mul(_shares).div(_daoVaultTotalSupply);\\n                result = _fTokenBalance.mul(hfVault.getPricePerFullShare()).div(hfVault.underlyingUnit());\\n            } else {\\n                result = pool.mul(_shares).div(_daoVaultTotalSupply);\\n            }\\n        } else {\\n            result = 0;\\n        }\\n    }\\n\\n    function getPseudoPool() external view notVesting returns (uint256 pseudoPool) {\\n        pseudoPool = (hfStake.balanceOf(address(this))).mul(hfVault.getPricePerFullShare()).div(hfVault.underlyingUnit());\\n    }\\n\\n    /**\\n     * @notice Deposit token into Harvest Finance Vault\\n     * @param _amount Amount of token to deposit\\n     * Requirements:\\n     * - Only Vault can call this function\\n     * - This contract is not in vesting state\\n     */\\n    // function deposit(uint256 _amount) external onlyVault notVesting {\\n    //     token.safeTransferFrom(msg.sender, address(this), _amount);\\n    //     hfVault.deposit(_amount);\\n    //     pool = pool.add(_amount);\\n    //     hfStake.stake(hfVault.balanceOf(address(this)));\\n    // }\\n\\n    /**\\n     * @notice Withdraw token from Harvest Finance Vault, exchange distributed FARM token to token same as deposit token\\n     * @param _amount amount of token to withdraw\\n     * Requirements:\\n     * - Only Vault can call this function\\n     * - This contract is not in vesting state\\n     * - Amount of withdraw must lesser than or equal to total amount of deposit\\n     */\\n    function withdraw(uint256 _amount) external onlyVault notVesting returns (uint256) {\\n        uint256 _fTokenBalance = (hfStake.balanceOf(address(this))).mul(_amount).div(pool);\\n        hfStake.withdraw(_fTokenBalance);\\n        hfVault.withdraw(hfVault.balanceOf(address(this)));\\n\\n        uint256 _withdrawAmt = token.balanceOf(address(this));\\n        token.safeTransfer(msg.sender, _withdrawAmt);\\n        pool = pool.sub(_amount);\\n        return _withdrawAmt;\\n    }\\n\\n    /**\\n     * @notice Deposit token into Harvest Finance Vault and invest them\\n     * @param _toInvest Amount of token to deposit\\n     * Requirements:\\n     * - Only Vault can call this function\\n     * - This contract is not in vesting state\\n     */\\n    function invest(uint256 _toInvest) external onlyVault notVesting {\\n        if (_toInvest > 0) {\\n            token.safeTransferFrom(msg.sender, address(this), _toInvest);\\n        }\\n        uint256 _fromVault = token.balanceOf(address(this));\\n        if (0 < hfStake.balanceOf(address(this))) {\\n            hfStake.exit();\\n        }\\n        uint256 _fTokenBalance = hfVault.balanceOf(address(this));\\n        if (0 < _fTokenBalance) {\\n            hfVault.withdraw(_fTokenBalance);\\n        }\\n\\n        // Swap FARM token for token same as deposit token\\n        uint256 _balanceOfFARM = FARM.balanceOf(address(this));\\n        if (_balanceOfFARM > 0) {\\n            address[] memory _path = new address[](3);\\n            _path[0] = address(FARM);\\n            _path[1] = WETH;\\n            _path[2] = address(token);\\n            uint256[] memory _amountsOut = uniswapRouter.getAmountsOut(_balanceOfFARM, _path);\\n            if (_amountsOut[2] > 0) {\\n                uniswapRouter.swapExactTokensForTokens(\\n                    _balanceOfFARM, 0, _path, address(this), block.timestamp);\\n            }\\n        }\\n        uint256 _fromHarvest = (token.balanceOf(address(this))).sub(_fromVault);\\n        if (_fromHarvest > pool) {\\n            uint256 _earn = _fromHarvest.sub(pool);\\n            uint256 _fee = _earn.mul(profileSharingFeePercentage).div(10000 /*DENOMINATOR*/);\\n            uint256 treasuryFee = _fee.div(2); // 50% on profile sharing fee\\n            token.safeTransfer(treasuryWallet, treasuryFee);\\n            token.safeTransfer(communityWallet, _fee.sub(treasuryFee));\\n        }\\n\\n        uint256 _all = token.balanceOf(address(this));\\n        require(0 < _all, \\\"No balance of the deposited token\\\");\\n        pool = _all;\\n        hfVault.deposit(_all);\\n        hfStake.stake(hfVault.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Vesting this contract, withdraw all token from Harvest Finance and claim all FARM token\\n     * @notice Disabled the deposit and withdraw functions for public, only allowed users to do refund from this contract\\n     * Requirements:\\n     * - Only owner of this contract can call this function\\n     * - This contract is not in vesting state\\n     */\\n    function vesting() external onlyOwner notVesting {\\n        // Claim all distributed FARM token\\n        // and withdraw all fToken from Harvest Finance Stake contract\\n        if (hfStake.balanceOf(address(this)) > 0) {\\n            hfStake.exit();\\n        }\\n\\n        // Withdraw all token from Harvest Finance Vault contract\\n        uint256 _fTokenBalance = hfVault.balanceOf(address(this));\\n        if (_fTokenBalance > 0) {\\n            hfVault.withdraw(_fTokenBalance);\\n        }\\n\\n        // Swap all FARM token for token same as deposit token\\n        uint256 _FARMBalance = FARM.balanceOf(address(this));\\n        if (_FARMBalance > 0) {\\n            uint256 _amountIn = _FARMBalance;\\n\\n            address[] memory _path = new address[](3);\\n            _path[0] = address(FARM);\\n            _path[1] = WETH;\\n            _path[2] = address(token);\\n\\n            uint256[] memory _amountsOut = uniswapRouter.getAmountsOut(_amountIn, _path);\\n            if (_amountsOut[2] > 0) {\\n                uint256 _amountOutMin = _amountsOut[2].mul(amountOutMinPerc).div(10000 /*DENOMINATOR*/);\\n                uniswapRouter.swapExactTokensForTokens(\\n                    _amountIn, _amountOutMin, _path, address(this), block.timestamp);\\n            }\\n        }\\n\\n        // Collect all fees\\n        uint256 _allTokenBalance = token.balanceOf(address(this));\\n        if (_allTokenBalance > pool) {\\n            uint256 _profit = _allTokenBalance.sub(pool);\\n            uint256 _fee = _profit.mul(profileSharingFeePercentage).div(10000 /*DENOMINATOR*/);\\n            uint256 treasuryFee = _fee.div(2);\\n            token.safeTransfer(treasuryWallet, treasuryFee);\\n            token.safeTransfer(communityWallet, _fee.sub(treasuryFee));\\n        }\\n\\n        pool = token.balanceOf(address(this));\\n        isVesting = true;\\n    }\\n\\n    /**\\n     * @notice Refund all token including profit based on daoToken hold by sender\\n     * @notice Only available after contract in vesting state\\n     * Requirements:\\n     * - Only Vault can call this function\\n     * - This contract is in vesting state\\n     */\\n    function refund(uint256 _amount) external onlyVault {\\n        require(isVesting, \\\"Not in vesting state\\\");\\n\\n        token.safeTransfer(tx.origin, _amount);\\n        pool = pool.sub(_amount);\\n    }\\n\\n    /**\\n     * @notice Revert this contract to normal from vesting state\\n     * Requirements:\\n     * - Only owner of this contract can call this function\\n     * - This contract is in vesting state\\n     */\\n    function revertVesting() public onlyOwner {\\n        require(isVesting, \\\"Not in vesting state\\\");\\n\\n        // Re-deposit all token to Harvest Finance Vault contract\\n        // and re-stake all fToken to Harvest Finance Stake contract\\n        uint256 _amount = token.balanceOf(address(this));\\n        if (_amount > 0) {\\n            hfVault.deposit(_amount);\\n            hfStake.stake(hfVault.balanceOf(address(this)));\\n        }\\n\\n        isVesting = false;\\n    }\\n\\n    /**\\n     * @notice Approve Vault to migrate funds from this contract\\n     * Requirements:\\n     * - Only owner of this contract can call this function\\n     * - This contract is in vesting state\\n     */\\n    function approveMigrate() external onlyOwner {\\n        require(isVesting, \\\"Not in vesting state\\\");\\n\\n        if (token.allowance(address(this), address(daoVault)) == 0) {\\n            token.safeApprove(address(daoVault), type(uint256).max);\\n        }\\n    }\\n\\n    /**\\n     * @notice Reuse this contract after vesting and funds migrated\\n     * @dev Use this function only for fallback reason(new strategy failed)\\n     * Requirements:\\n     * - Only owner of this contract can call this function\\n     */\\n    function reuseContract() external onlyOwner {\\n        pool = token.balanceOf(address(this));\\n        revertVesting();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"libraries/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Modified from OpenZeppelin OwnableUpgradeable.sol to suite cloned contracts\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address owner_) internal initializer {\\n        _owner = owner_;\\n        emit OwnershipTransferred(address(0), owner_);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\"\r\n    },\r\n    \"interfaces/IHFVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IHFVault is IERC20Upgradeable {\\n    function deposit(uint256) external;\\n\\n    function withdraw(uint256) external;\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n    function underlyingUnit() external view returns(uint256);\\n}\\n\"\r\n    },\r\n    \"interfaces/IHFStake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface IHFStake {\\n    function stake(uint256) external;\\n\\n    function withdraw(uint256) external;\\n\\n    function getReward() external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function exit() external;\\n}\\n\"\r\n    },\r\n    \"interfaces/IDAOVault2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IDAOVault2 is IERC20Upgradeable {}\\n\"\r\n    },\r\n    \"interfaces/IFARM.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IFARM is IERC20Upgradeable {}\\n\"\r\n    },\r\n    \"interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface IUniswapV2Router02 {\\n    function getAmountsOut(uint256, address[] memory)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function swapExactTokensForTokens(\\n        uint256,\\n        uint256,\\n        address[] calldata,\\n        address,\\n        uint256\\n    ) external returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldCommunityWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCommunityWallet\",\"type\":\"address\"}],\"name\":\"SetCommunityWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldProfileSharingFeePercentage\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newProfileSharingFeePercentage\",\"type\":\"uint256\"}],\"name\":\"SetProfileSharingFeePercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTreasuryWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTreasuryWallet\",\"type\":\"address\"}],\"name\":\"SetTreasuryWallet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FARM\",\"outputs\":[{\"internalType\":\"contract IFARM\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountOutMinPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoVault\",\"outputs\":[{\"internalType\":\"contract IDAOVault2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getCurrentBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPseudoPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pseudoPool\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hfStake\",\"outputs\":[{\"internalType\":\"contract IHFStake\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hfVault\",\"outputs\":[{\"internalType\":\"contract IHFVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_strategyName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hfVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hfStake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_FARM\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toInvest\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVesting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profileSharingFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reuseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revertVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setAmountOutMinPerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityWallet\",\"type\":\"address\"}],\"name\":\"setCommunityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setProfileSharingFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HarvestFarmer","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}