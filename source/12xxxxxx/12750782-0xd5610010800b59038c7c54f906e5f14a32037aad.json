{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * Static call proxy\r\n *\r\n * Use case: Obtain the result of a contract write method from a view method without actually writing state\r\n * Context: In EVM versions Byzantium or newer view methods utilize the `staticcall` opcode which enforces state to\r\n *          remain unmodified as part of EVM execution. This proxy contract was made to allow easier access to write method\r\n *          output from a view method without modifying state in newer versions of the EVM.\r\n *\r\n * Given a destination address and calldata:\r\n * - Forward request to an internal method (readInternal)\r\n * - Perform an eth_call to the destination address using calldata\r\n * - Perform a revert to roll back state\r\n * - Save the result of the call in a the revert message\r\n * - Throw out the revert and return the revert message as a successful response\r\n *\r\n * Usage: IStaticCallProxy(proxyAddress).read(destination, abi.encodeWithSignature(\"method(uint256)\", arg));\r\n * \r\n * Based on previous work from axic: https://gist.github.com/axic/fc61daf7775c56da02d21368865a9416\r\n */\r\n\r\nlibrary StaticCallProxy {\r\n    function readInternal(address _destination, bytes _calldata) public returns (bytes32) {\r\n        uint256 _calldata_length = _calldata.length;\r\n        assembly {\r\n            pop(call(gas(), _destination, 0, add(_calldata, 0x20), _calldata_length, 0, 0))\r\n            returndatacopy(0, 0, returndatasize())\r\n            revert(0, 32)\r\n        }\r\n    }\r\n\r\n    function read(address _destination, bytes memory _calldata) public returns (bytes32) {\r\n        uint256 _calldata_length = _calldata.length;\r\n        assembly {\r\n            let _calldatasize := calldatasize()\r\n            calldatacopy(0, 0, _calldatasize)\r\n\r\n            let freeMemory := mload(64)\r\n            mstore8(0, 0x95)\r\n            mstore8(add(0, 1), 0x69)\r\n            mstore8(add(0, 2), 0xbf)\r\n            mstore8(add(0, 3), 0x28)\r\n            pop(call(gas(), 0xd5610010800b59038c7c54f906e5F14A32037aad, 0, 0, _calldatasize, 0, 0))\r\n            returndatacopy(0, 0, returndatasize())\r\n            return(0, 32)\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_destination\",\"type\":\"address\"},{\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"readInternal\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_destination\",\"type\":\"address\"},{\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"read\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StaticCallProxy","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d7fa628e05eb0dd1829478c31b8ca7a9e3e321db7e58866ef18bbd630ad61cab"}]}