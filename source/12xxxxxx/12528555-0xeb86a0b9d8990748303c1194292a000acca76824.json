{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PositionProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.6;\\n\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { IPositionProxy } from \\\"./interfaces/IPositionProxy.sol\\\";\\nimport { CErc20Interface } from \\\"./interfaces/CErc20Interface.sol\\\";\\nimport { IFuseMarginController } from \\\"./interfaces/IFuseMarginController.sol\\\";\\nimport { ComptrollerInterface } from \\\"./interfaces/ComptrollerInterface.sol\\\";\\n\\n/// @author Ganesh Gautham Elango\\n/// @title Position contract based on DSProxy, to be cloned for each position\\ncontract PositionProxy is IPositionProxy {\\n    /// @dev Points to immutable FuseMarginController instance\\n    IFuseMarginController public immutable override fuseMarginController;\\n    /// @dev FuseMarginController contract ERC721 interface\\n    IERC721 private immutable fuseMarginERC721;\\n\\n    /// @param _fuseMarginController Address of FuseMarginController\\n    constructor(address _fuseMarginController) {\\n        fuseMarginController = IFuseMarginController(_fuseMarginController);\\n        fuseMarginERC721 = IERC721(_fuseMarginController);\\n    }\\n\\n    /// @dev Fallback for reciving Ether\\n    receive() external payable {}\\n\\n    /// @dev Delegate call, to be called only from FuseMargin contracts\\n    /// @param _target Contract address to delegatecall\\n    /// @param _data ABI encoded function/params\\n    /// @return Return bytes\\n    function execute(address _target, bytes memory _data) external payable override returns (bytes memory) {\\n        require(fuseMarginController.approvedContracts(msg.sender), \\\"PositionProxy: Not approved contract\\\");\\n        (bool success, bytes memory response) = _target.delegatecall(_data);\\n        require(success, \\\"PositionProxy: delegatecall failed\\\");\\n        return response;\\n    }\\n\\n    /// @dev Delegate call, to be called only from position owner\\n    /// @param _target Contract address to delegatecall\\n    /// @param _data ABI encoded function/params\\n    /// @param tokenId tokenId of this position\\n    /// @return Return bytes\\n    function execute(\\n        address _target,\\n        bytes memory _data,\\n        uint256 tokenId\\n    ) external payable override returns (bytes memory) {\\n        require(address(this) == fuseMarginController.positions(tokenId), \\\"PositionProxy: Invalid position\\\");\\n        require(msg.sender == fuseMarginERC721.ownerOf(tokenId), \\\"PositionProxy: Not approved user\\\");\\n        require(fuseMarginController.approvedConnectors(_target), \\\"PositionProxy: Not valid connector\\\");\\n        (bool success, bytes memory response) = _target.delegatecall(_data);\\n        require(success, \\\"PositionProxy: delegatecall failed\\\");\\n        return response;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPositionProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0;\\n\\nimport { IFuseMarginController } from \\\"./IFuseMarginController.sol\\\";\\n\\n/// @author Ganesh Gautham Elango\\n/// @title Position interface\\ninterface IPositionProxy {\\n    /// @dev Points to immutable FuseMarginController instance\\n    function fuseMarginController() external view returns (IFuseMarginController);\\n\\n    /// @dev Delegate call, to be called only from FuseMargin contracts\\n    /// @param _target Contract address to delegatecall\\n    /// @param _data ABI encoded function/params\\n    /// @return Return bytes\\n    function execute(address _target, bytes memory _data) external payable returns (bytes memory);\\n\\n    /// @dev Delegate call, to be called only from position owner\\n    /// @param _target Contract address to delegatecall\\n    /// @param _data ABI encoded function/params\\n    /// @param tokenId tokenId of this position\\n    /// @return Return bytes\\n    function execute(\\n        address _target,\\n        bytes memory _data,\\n        uint256 tokenId\\n    ) external payable returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/CErc20Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.5.16;\\n\\ninterface CErc20Interface {\\n    function isCEther() external returns (bool);\\n\\n    /*** User Interface ***/\\n\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n    function balanceOfUnderlying(address account) external view returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFuseMarginController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0;\\n\\n/// @author Ganesh Gautham Elango\\n/// @title FuseMarginController Interface\\ninterface IFuseMarginController {\\n    /// @dev Emitted when support of FuseMargin contract is added\\n    /// @param contractAddress Address of FuseMargin contract added\\n    /// @param owner User who added the contract\\n    event AddMarginContract(address indexed contractAddress, address owner);\\n\\n    /// @dev Emitted when support of FuseMargin contract is removed\\n    /// @param contractAddress Address of FuseMargin contract removed\\n    /// @param owner User who removed the contract\\n    event RemoveMarginContract(address indexed contractAddress, address owner);\\n\\n    /// @dev Emitted when support of Connector contract is added\\n    /// @param contractAddress Address of Connector contract added\\n    /// @param owner User who added the contract\\n    event AddConnectorContract(address indexed contractAddress, address owner);\\n\\n    /// @dev Emitted when support of Connector contract is removed\\n    /// @param contractAddress Address of Connector contract removed\\n    /// @param owner User who removed the contract\\n    event RemoveConnectorContract(address indexed contractAddress, address owner);\\n\\n    /// @dev Emitted when a new Base URI is added\\n    /// @param _metadataBaseURI URL for position metadata\\n    event SetBaseURI(string indexed _metadataBaseURI);\\n\\n    /// @dev Creates a position NFT, to be called only from FuseMargin\\n    /// @param user User to give the NFT to\\n    /// @param position The position address\\n    /// @return tokenId of the position\\n    function newPosition(address user, address position) external returns (uint256);\\n\\n    /// @dev Burns the position at the index, to be called only from FuseMargin\\n    /// @param tokenId tokenId of position to close\\n    function closePosition(uint256 tokenId) external returns (address);\\n\\n    /// @dev Adds support for a new FuseMargin contract, to be called only from owner\\n    /// @param contractAddress Address of FuseMargin contract\\n    function addMarginContract(address contractAddress) external;\\n\\n    /// @dev Removes support for a new FuseMargin contract, to be called only from owner\\n    /// @param contractAddress Address of FuseMargin contract\\n    function removeMarginContract(address contractAddress) external;\\n\\n    /// @dev Adds support for a new Connector contract, to be called only from owner\\n    /// @param contractAddress Address of Connector contract\\n    function addConnectorContract(address contractAddress) external;\\n\\n    /// @dev Removes support for a Connector contract, to be called only from owner\\n    /// @param contractAddress Address of Connector contract\\n    function removeConnectorContract(address contractAddress) external;\\n\\n    /// @dev Modify NFT URL, to be called only from owner\\n    /// @param _metadataBaseURI URL for position metadata\\n    function setBaseURI(string memory _metadataBaseURI) external;\\n\\n    /// @dev Gets all approved margin contracts\\n    /// @return List of the addresses of the approved margin contracts\\n    function getMarginContracts() external view returns (address[] memory);\\n\\n    /// @dev Gets all tokenIds and positions a user holds, dont call this on chain since it is expensive\\n    /// @param user Address of user\\n    /// @return List of tokenIds the user holds\\n    /// @return List of positions the user holds\\n    function tokensOfOwner(address user) external view returns (uint256[] memory, address[] memory);\\n\\n    /// @dev Gets a position address given an index (index = tokenId)\\n    /// @param tokenId Index of position\\n    /// @return position address\\n    function positions(uint256 tokenId) external view returns (address);\\n\\n    /// @dev List of supported FuseMargin contracts\\n    /// @param index Get FuseMargin contract at index\\n    /// @return FuseMargin contract address\\n    function marginContracts(uint256 index) external view returns (address);\\n\\n    /// @dev Check if FuseMargin contract address is approved\\n    /// @param contractAddress Address of FuseMargin contract\\n    /// @return true if approved, false if not\\n    function approvedContracts(address contractAddress) external view returns (bool);\\n\\n    /// @dev Check if Connector contract address is approved\\n    /// @param contractAddress Address of Connector contract\\n    /// @return true if approved, false if not\\n    function approvedConnectors(address contractAddress) external view returns (bool);\\n\\n    /// @dev Returns number of positions created\\n    /// @return Length of positions array\\n    function positionsLength() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ComptrollerInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.5.16;\\n\\ninterface ComptrollerInterface {\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint256);\\n\\n    function getAssetsIn(address account) external view returns (address[] memory);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount\\n    ) external returns (uint256);\\n\\n    function mintWithinLimits(\\n        address cToken,\\n        uint256 exchangeRateMantissa,\\n        uint256 accountTokens,\\n        uint256 mintAmount\\n    ) external returns (uint256);\\n\\n    function mintVerify(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount,\\n        uint256 mintTokens\\n    ) external;\\n\\n    function redeemAllowed(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external returns (uint256);\\n\\n    function redeemVerify(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemTokens\\n    ) external;\\n\\n    function borrowAllowed(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external returns (uint256);\\n\\n    function borrowWithinLimits(address cToken, uint256 accountBorrowsNew) external returns (uint256);\\n\\n    function borrowVerify(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 borrowerIndex\\n    ) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function transferAllowed(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external returns (uint256);\\n\\n    function transferVerify(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint256 repayAmount\\n    ) external view returns (uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fuseMarginController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fuseMarginController\",\"outputs\":[{\"internalType\":\"contract IFuseMarginController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PositionProxy","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003735be391814adf23a7c46a02b4a2b4259af30bf","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}