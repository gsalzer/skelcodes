{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.6;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev ERC-1155 interface for accepting safe transfers.\r\n */\r\ninterface IERC1155TokenReceiver {\r\n  /**\r\n   * @notice Handle the receipt of a single ERC1155 token type\r\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\r\n   * This function MAY throw to revert and reject the transfer\r\n   * Return of other amount than the magic value MUST result in the transaction being reverted\r\n   * Note: The token contract address is always the message sender\r\n   * @param _operator  The address which called the `safeTransferFrom` function\r\n   * @param _from      The address which previously owned the token\r\n   * @param _id        The id of the token being transferred\r\n   * @param _amount    The amount of tokens being transferred\r\n   * @param _data      Additional data with no specified format\r\n   * @return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n   */\r\n  function onERC1155Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _id,\r\n    uint256 _amount,\r\n    bytes calldata _data\r\n  ) external returns (bytes4);\r\n\r\n  /**\r\n   * @notice Handle the receipt of multiple ERC1155 token types\r\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\r\n   * This function MAY throw to revert and reject the transfer\r\n   * Return of other amount than the magic value WILL result in the transaction being reverted\r\n   * Note: The token contract address is always the message sender\r\n   * @param _operator  The address which called the `safeBatchTransferFrom` function\r\n   * @param _from      The address which previously owned the token\r\n   * @param _ids       An array containing ids of each token being transferred\r\n   * @param _amounts   An array containing amounts of each token being transferred\r\n   * @param _data      Additional data with no specified format\r\n   * @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n   */\r\n  function onERC1155BatchReceived(\r\n    address _operator,\r\n    address _from,\r\n    uint256[] calldata _ids,\r\n    uint256[] calldata _amounts,\r\n    bytes calldata _data\r\n  ) external returns (bytes4);\r\n\r\n  /**\r\n   * @notice Indicates whether a contract implements the `ERC1155TokenReceiver` functions and so can accept ERC1155 token types.\r\n   * @param  interfaceID The ERC-165 interface ID that is queried for support.s\r\n   * @dev This function MUST return true if it implements the ERC1155TokenReceiver interface and ERC-165 interface.\r\n   *      This function MUST NOT consume more than 5,000 gas.\r\n   * @return Wheter ERC-165 or ERC1155TokenReceiver interfaces are supported.\r\n   */\r\n  function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface IERC165 {\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas\r\n   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId) external view returns (bool);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Implementation of Multi-Token Standard contract\r\n */\r\ncontract ERC1155 is IERC165 {\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n  /***********************************|\r\n  |        Variables and Events       |\r\n  |__________________________________*/\r\n\r\n  // onReceive function signatures\r\n  bytes4 internal constant ERC1155_RECEIVED_VALUE = 0xf23a6e61;\r\n  bytes4 internal constant ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\r\n\r\n  // Objects balances\r\n  mapping(address => mapping(uint256 => uint256)) internal balances;\r\n\r\n  // Operator Functions\r\n  mapping(address => mapping(address => bool)) internal operators;\r\n\r\n  // Events\r\n  event TransferSingle(\r\n    address indexed _operator,\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 _id,\r\n    uint256 _amount\r\n  );\r\n  event TransferBatch(\r\n    address indexed _operator,\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256[] _ids,\r\n    uint256[] _amounts\r\n  );\r\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n  event URI(string _uri, uint256 indexed _id);\r\n\r\n  /***********************************|\r\n  |     Public Transfer Functions     |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\r\n   * @param _from    Source address\r\n   * @param _to      Target address\r\n   * @param _id      ID of the token type\r\n   * @param _amount  Transfered amount\r\n   * @param _data    Additional data with no specified format, sent in call to `_to`\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _id,\r\n    uint256 _amount,\r\n    bytes memory _data\r\n  ) public {\r\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \"ERC1155#safeTransferFrom: INVALID_OPERATOR\");\r\n    require(_to != address(0), \"ERC1155#safeTransferFrom: INVALID_RECIPIENT\");\r\n    // require(_amount >= balances[_from][_id]) is not necessary since checked with safemath operations\r\n\r\n    _safeTransferFrom(_from, _to, _id, _amount);\r\n    _callonERC1155Received(_from, _to, _id, _amount, _data);\r\n  }\r\n\r\n  /**\r\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\r\n   * @param _from     Source addresses\r\n   * @param _to       Target addresses\r\n   * @param _ids      IDs of each token type\r\n   * @param _amounts  Transfer amounts per token type\r\n   * @param _data     Additional data with no specified format, sent in call to `_to`\r\n   */\r\n  function safeBatchTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256[] memory _ids,\r\n    uint256[] memory _amounts,\r\n    bytes memory _data\r\n  ) public {\r\n    // Requirements\r\n    require(\r\n      (msg.sender == _from) || isApprovedForAll(_from, msg.sender),\r\n      \"ERC1155#safeBatchTransferFrom: INVALID_OPERATOR\"\r\n    );\r\n    require(_to != address(0), \"ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT\");\r\n\r\n    _safeBatchTransferFrom(_from, _to, _ids, _amounts);\r\n    _callonERC1155BatchReceived(_from, _to, _ids, _amounts, _data);\r\n  }\r\n\r\n  /***********************************|\r\n  |    Internal Transfer Functions    |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\r\n   * @param _from    Source address\r\n   * @param _to      Target address\r\n   * @param _id      ID of the token type\r\n   * @param _amount  Transfered amount\r\n   */\r\n  function _safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _id,\r\n    uint256 _amount\r\n  ) internal {\r\n    // Update balances\r\n    balances[_from][_id] = balances[_from][_id].sub(_amount); // Subtract amount\r\n    balances[_to][_id] = balances[_to][_id].add(_amount); // Add amount\r\n\r\n    // Emit event\r\n    emit TransferSingle(msg.sender, _from, _to, _id, _amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155Received(...)\r\n   */\r\n  function _callonERC1155Received(\r\n    address _from,\r\n    address _to,\r\n    uint256 _id,\r\n    uint256 _amount,\r\n    bytes memory _data\r\n  ) internal {\r\n    // Check if recipient is contract\r\n    if (_to.isContract()) {\r\n      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155Received(msg.sender, _from, _id, _amount, _data);\r\n      require(retval == ERC1155_RECEIVED_VALUE, \"ERC1155#_callonERC1155Received: INVALID_ON_RECEIVE_MESSAGE\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\r\n   * @param _from     Source addresses\r\n   * @param _to       Target addresses\r\n   * @param _ids      IDs of each token type\r\n   * @param _amounts  Transfer amounts per token type\r\n   */\r\n  function _safeBatchTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256[] memory _ids,\r\n    uint256[] memory _amounts\r\n  ) internal {\r\n    require(_ids.length == _amounts.length, \"ERC1155#_safeBatchTransferFrom: INVALID_ARRAYS_LENGTH\");\r\n\r\n    // Number of transfer to execute\r\n    uint256 nTransfer = _ids.length;\r\n\r\n    // Executing all transfers\r\n    for (uint256 i = 0; i < nTransfer; i++) {\r\n      // Update storage balance of previous bin\r\n      balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);\r\n      balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\r\n    }\r\n\r\n    // Emit event\r\n    emit TransferBatch(msg.sender, _from, _to, _ids, _amounts);\r\n  }\r\n\r\n  /**\r\n   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155BatchReceived(...)\r\n   */\r\n  function _callonERC1155BatchReceived(\r\n    address _from,\r\n    address _to,\r\n    uint256[] memory _ids,\r\n    uint256[] memory _amounts,\r\n    bytes memory _data\r\n  ) internal {\r\n    // Pass data if recipient is contract\r\n    if (_to.isContract()) {\r\n      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155BatchReceived(msg.sender, _from, _ids, _amounts, _data);\r\n      require(\r\n        retval == ERC1155_BATCH_RECEIVED_VALUE,\r\n        \"ERC1155#_callonERC1155BatchReceived: INVALID_ON_RECEIVE_MESSAGE\"\r\n      );\r\n    }\r\n  }\r\n\r\n  /***********************************|\r\n  |         Operator Functions        |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Enable or disable approval for a third party (\"operator\") to manage all of caller's tokens\r\n   * @param _operator  Address to add to the set of authorized operators\r\n   * @param _approved  True if the operator is approved, false to revoke approval\r\n   */\r\n  function setApprovalForAll(address _operator, bool _approved) external {\r\n    // Update operator status\r\n    operators[msg.sender][_operator] = _approved;\r\n    emit ApprovalForAll(msg.sender, _operator, _approved);\r\n  }\r\n\r\n  /**\r\n   * @notice Queries the approval status of an operator for a given owner\r\n   * @param _owner     The owner of the Tokens\r\n   * @param _operator  Address of authorized operator\r\n   * @return isOperator True if the operator is approved, false if not\r\n   */\r\n  function isApprovedForAll(address _owner, address _operator) public view virtual returns (bool isOperator) {\r\n    return operators[_owner][_operator];\r\n  }\r\n\r\n  /***********************************|\r\n  |         Balance Functions         |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Get the balance of an account's Tokens\r\n   * @param _owner  The address of the token holder\r\n   * @param _id     ID of the Token\r\n   * @return The _owner's balance of the Token type requested\r\n   */\r\n  function balanceOf(address _owner, uint256 _id) public view returns (uint256) {\r\n    return balances[_owner][_id];\r\n  }\r\n\r\n  /**\r\n   * @notice Get the balance of multiple account/token pairs\r\n   * @param _owners The addresses of the token holders\r\n   * @param _ids    ID of the Tokens\r\n   * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\r\n   */\r\n  function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory) {\r\n    require(_owners.length == _ids.length, \"ERC1155#balanceOfBatch: INVALID_ARRAY_LENGTH\");\r\n\r\n    // Variables\r\n    uint256[] memory batchBalances = new uint256[](_owners.length);\r\n\r\n    // Iterate over each owner and token ID\r\n    for (uint256 i = 0; i < _owners.length; i++) {\r\n      batchBalances[i] = balances[_owners[i]][_ids[i]];\r\n    }\r\n\r\n    return batchBalances;\r\n  }\r\n\r\n  /***********************************|\r\n  |          ERC165 Functions         |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * INTERFACE_SIGNATURE_ERC165 = bytes4(keccak256(\"supportsInterface(bytes4)\"));\r\n   */\r\n  bytes4 private constant INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\r\n\r\n  /**\r\n   * INTERFACE_SIGNATURE_ERC1155 =\r\n   * bytes4(keccak256(\"safeTransferFrom(address,address,uint256,uint256,bytes)\")) ^\r\n   * bytes4(keccak256(\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\")) ^\r\n   * bytes4(keccak256(\"balanceOf(address,uint256)\")) ^\r\n   * bytes4(keccak256(\"balanceOfBatch(address[],uint256[])\")) ^\r\n   * bytes4(keccak256(\"setApprovalForAll(address,bool)\")) ^\r\n   * bytes4(keccak256(\"isApprovedForAll(address,address)\"));\r\n   */\r\n  bytes4 private constant INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceID  The interface identifier, as specified in ERC-165\r\n   * @return `true` if the contract implements `_interfaceID` and\r\n   */\r\n  function supportsInterface(bytes4 _interfaceID) external view override(IERC165) returns (bool) {\r\n    if (_interfaceID == INTERFACE_SIGNATURE_ERC165 || _interfaceID == INTERFACE_SIGNATURE_ERC1155) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @notice Contract that handles metadata related methods.\r\n * @dev Methods assume a deterministic generation of URI based on token IDs.\r\n *      Methods also assume that URI uses hex representation of token IDs.\r\n */\r\ncontract ERC1155Metadata {\r\n  // URI's default URI prefix\r\n  string internal baseMetadataURI;\r\n  event URI(string _uri, uint256 indexed _id);\r\n\r\n  /***********************************|\r\n  |     Metadata Public Function s    |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice A distinct Uniform Resource Identifier (URI) for a given token.\r\n   * @dev URIs are defined in RFC 3986.\r\n   *      URIs are assumed to be deterministically generated based on token ID\r\n   *      Token IDs are assumed to be represented in their hex format in URIs\r\n   * @return URI string\r\n   */\r\n  function uri(uint256 _id) public view virtual returns (string memory) {\r\n    return string(abi.encodePacked(baseMetadataURI, _uint2str(_id), \".json\"));\r\n  }\r\n\r\n  /***********************************|\r\n  |    Metadata Internal Functions    |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Will emit default URI log event for corresponding token _id\r\n   * @param _tokenIDs Array of IDs of tokens to log default URI\r\n   */\r\n  function _logURIs(uint256[] memory _tokenIDs) internal {\r\n    string memory baseURL = baseMetadataURI;\r\n    string memory tokenURI;\r\n\r\n    for (uint256 i = 0; i < _tokenIDs.length; i++) {\r\n      tokenURI = string(abi.encodePacked(baseURL, _uint2str(_tokenIDs[i]), \".json\"));\r\n      emit URI(tokenURI, _tokenIDs[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Will emit a specific URI log event for corresponding token\r\n   * @param _tokenIDs IDs of the token corresponding to the _uris logged\r\n   * @param _URIs    The URIs of the specified _tokenIDs\r\n   */\r\n  function _logURIs(uint256[] memory _tokenIDs, string[] memory _URIs) internal {\r\n    require(_tokenIDs.length == _URIs.length, \"ERC1155Metadata#_logURIs: INVALID_ARRAYS_LENGTH\");\r\n    for (uint256 i = 0; i < _tokenIDs.length; i++) {\r\n      emit URI(_URIs[i], _tokenIDs[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Will update the base URL of token's URI\r\n   * @param _newBaseMetadataURI New base URL of token's URI\r\n   */\r\n  function _setBaseMetadataURI(string memory _newBaseMetadataURI) internal {\r\n    baseMetadataURI = _newBaseMetadataURI;\r\n  }\r\n\r\n  /***********************************|\r\n  |    Utility Internal Functions     |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Convert uint256 to string\r\n   * @param _i Unsigned integer to convert to string\r\n   */\r\n  function _uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\r\n    if (_i == 0) {\r\n      return \"0\";\r\n    }\r\n\r\n    uint256 j = _i;\r\n    uint256 ii = _i;\r\n    uint256 len;\r\n\r\n    // Get number of bytes\r\n    while (j != 0) {\r\n      len++;\r\n      j /= 10;\r\n    }\r\n\r\n    bytes memory bstr = new bytes(len);\r\n    uint256 k = len - 1;\r\n\r\n    // Get each individual ASCII\r\n    while (ii != 0) {\r\n      bstr[k--] = bytes1(uint8(48 + (ii % 10)));\r\n      ii /= 10;\r\n    }\r\n\r\n    // Convert to string\r\n    return string(bstr);\r\n  }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Multi-Fungible Tokens with minting and burning methods. These methods assume\r\n *      a parent contract to be executed as they are `internal` functions\r\n */\r\ncontract ERC1155MintBurn is ERC1155 {\r\n  /****************************************|\r\n  |            Minting Functions           |\r\n  |_______________________________________*/\r\n\r\n  /**\r\n   * @notice Mint _amount of tokens of a given id\r\n   * @param _to      The address to mint tokens to\r\n   * @param _id      Token id to mint\r\n   * @param _amount  The amount to be minted\r\n   * @param _data    Data to pass if receiver is contract\r\n   */\r\n  function _mint(\r\n    address _to,\r\n    uint256 _id,\r\n    uint256 _amount,\r\n    bytes memory _data\r\n  ) internal {\r\n    // Add _amount\r\n    balances[_to][_id] = balances[_to][_id].add(_amount);\r\n\r\n    // Emit event\r\n    emit TransferSingle(msg.sender, address(0x0), _to, _id, _amount);\r\n\r\n    // Calling onReceive method if recipient is contract\r\n    _callonERC1155Received(address(0x0), _to, _id, _amount, _data);\r\n  }\r\n\r\n  /**\r\n   * @notice Mint tokens for each ids in _ids\r\n   * @param _to       The address to mint tokens to\r\n   * @param _ids      Array of ids to mint\r\n   * @param _amounts  Array of amount of tokens to mint per id\r\n   * @param _data    Data to pass if receiver is contract\r\n   */\r\n  function _batchMint(\r\n    address _to,\r\n    uint256[] memory _ids,\r\n    uint256[] memory _amounts,\r\n    bytes memory _data\r\n  ) internal {\r\n    require(_ids.length == _amounts.length, \"ERC1155MintBurn#batchMint: INVALID_ARRAYS_LENGTH\");\r\n\r\n    // Number of mints to execute\r\n    uint256 nMint = _ids.length;\r\n\r\n    // Executing all minting\r\n    for (uint256 i = 0; i < nMint; i++) {\r\n      // Update storage balance\r\n      balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\r\n    }\r\n\r\n    // Emit batch mint event\r\n    emit TransferBatch(msg.sender, address(0x0), _to, _ids, _amounts);\r\n\r\n    // Calling onReceive method if recipient is contract\r\n    _callonERC1155BatchReceived(address(0x0), _to, _ids, _amounts, _data);\r\n  }\r\n\r\n  /****************************************|\r\n  |            Burning Functions           |\r\n  |_______________________________________*/\r\n\r\n  /**\r\n   * @notice Burn _amount of tokens of a given token id\r\n   * @param _from    The address to burn tokens from\r\n   * @param _id      Token id to burn\r\n   * @param _amount  The amount to be burned\r\n   */\r\n  function _burn(\r\n    address _from,\r\n    uint256 _id,\r\n    uint256 _amount\r\n  ) internal {\r\n    //Substract _amount\r\n    balances[_from][_id] = balances[_from][_id].sub(_amount);\r\n\r\n    // Emit event\r\n    emit TransferSingle(msg.sender, _from, address(0x0), _id, _amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\r\n   * @param _from     The address to burn tokens from\r\n   * @param _ids      Array of token ids to burn\r\n   * @param _amounts  Array of the amount to be burned\r\n   */\r\n  function _batchBurn(\r\n    address _from,\r\n    uint256[] memory _ids,\r\n    uint256[] memory _amounts\r\n  ) internal {\r\n    require(_ids.length == _amounts.length, \"ERC1155MintBurn#batchBurn: INVALID_ARRAYS_LENGTH\");\r\n\r\n    // Number of mints to execute\r\n    uint256 nBurn = _ids.length;\r\n\r\n    // Executing all minting\r\n    for (uint256 i = 0; i < nBurn; i++) {\r\n      // Update storage balance\r\n      balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);\r\n    }\r\n\r\n    // Emit batch mint event\r\n    emit TransferBatch(msg.sender, _from, address(0x0), _ids, _amounts);\r\n  }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping(address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev Give an account access to this role.\r\n   */\r\n  function add(Role storage role, address account) internal {\r\n    require(!has(role, account), \"Roles: account already has role\");\r\n    role.bearer[account] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Remove an account's access to this role.\r\n   */\r\n  function remove(Role storage role, address account) internal {\r\n    require(has(role, account), \"Roles: account does not have role\");\r\n    role.bearer[account] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Check if an account has this role.\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address account) internal view returns (bool) {\r\n    require(account != address(0), \"Roles: account is the zero address\");\r\n    return role.bearer[account];\r\n  }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\ncontract MinterRole is Context {\r\n  using Roles for Roles.Role;\r\n\r\n  event MinterAdded(address indexed account);\r\n  event MinterRemoved(address indexed account);\r\n\r\n  Roles.Role private _minters;\r\n\r\n  constructor() internal {\r\n    _addMinter(_msgSender());\r\n  }\r\n\r\n  modifier onlyMinter() {\r\n    require(isMinter(_msgSender()), \"MinterRole: caller does not have the Minter role\");\r\n    _;\r\n  }\r\n\r\n  function isMinter(address account) public view returns (bool) {\r\n    return _minters.has(account);\r\n  }\r\n\r\n  function addMinter(address account) public onlyMinter {\r\n    _addMinter(account);\r\n  }\r\n\r\n  function renounceMinter() public {\r\n    _removeMinter(_msgSender());\r\n  }\r\n\r\n  function _addMinter(address account) internal {\r\n    _minters.add(account);\r\n    emit MinterAdded(account);\r\n  }\r\n\r\n  function _removeMinter(address account) internal {\r\n    _minters.remove(account);\r\n    emit MinterRemoved(account);\r\n  }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\nabstract contract Proxy {\r\n  event ReceivedEther(address indexed sender, uint256 amount);\r\n\r\n  /**\r\n   * @dev Tells the address of the implementation where every call will be delegated.\r\n   * @return address of the implementation to which it will be delegated\r\n   */\r\n  function implementation() public view virtual returns (address);\r\n\r\n  /**\r\n   * @dev Tells the type of proxy (EIP 897)\r\n   * @return Type of proxy, 2 for upgradeable proxy\r\n   */\r\n  function proxyType() public pure virtual returns (uint256);\r\n\r\n  /**\r\n   * @dev Fallback function allowing to perform a delegatecall to the given implementation.\r\n   * This function will return whatever the implementation call returns\r\n   */\r\n  fallback() external payable {\r\n    address _impl = implementation();\r\n    require(_impl != address(0));\r\n\r\n    assembly {\r\n      let ptr := mload(0x40)\r\n      calldatacopy(ptr, 0, calldatasize())\r\n      let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)\r\n      let size := returndatasize()\r\n      returndatacopy(ptr, 0, size)\r\n\r\n      switch result\r\n        case 0 {\r\n          revert(ptr, size)\r\n        }\r\n        default {\r\n          return(ptr, size)\r\n        }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Receive Ether and generate a log event\r\n   */\r\n  receive() external payable {\r\n    emit ReceivedEther(msg.sender, msg.value);\r\n  }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\ncontract OwnedUpgradeabilityStorage is Proxy {\r\n  // Current implementation\r\n  address internal _implementation;\r\n\r\n  // Owner of the contract\r\n  address private _upgradeabilityOwner;\r\n\r\n  /**\r\n   * @dev Tells the address of the owner\r\n   * @return the address of the owner\r\n   */\r\n  function upgradeabilityOwner() public view returns (address) {\r\n    return _upgradeabilityOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the address of the owner\r\n   */\r\n  function setUpgradeabilityOwner(address newUpgradeabilityOwner) internal {\r\n    _upgradeabilityOwner = newUpgradeabilityOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Tells the address of the current implementation\r\n   * @return address of the current implementation\r\n   */\r\n  function implementation() public view override returns (address) {\r\n    return _implementation;\r\n  }\r\n\r\n  /**\r\n   * @dev Tells the proxy type (EIP 897)\r\n   * @return Proxy type, 2 for forwarding proxy\r\n   */\r\n  function proxyType() public pure override returns (uint256) {\r\n    return 2;\r\n  }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\ncontract OwnedUpgradeabilityProxy is OwnedUpgradeabilityStorage {\r\n  /**\r\n   * @dev Event to show ownership has been transferred\r\n   * @param previousOwner representing the address of the previous owner\r\n   * @param newOwner representing the address of the new owner\r\n   */\r\n  event ProxyOwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n  /**\r\n   * @dev This event will be emitted every time the implementation gets upgraded\r\n   * @param implementation representing the address of the upgraded implementation\r\n   */\r\n  event Upgraded(address indexed implementation);\r\n\r\n  /**\r\n   * @dev Upgrades the implementation address\r\n   * @param implementation representing the address of the new implementation to be set\r\n   */\r\n  function _upgradeTo(address implementation) internal {\r\n    require(_implementation != implementation);\r\n    _implementation = implementation;\r\n    emit Upgraded(implementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyProxyOwner() {\r\n    require(msg.sender == proxyOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Tells the address of the proxy owner\r\n   * @return the address of the proxy owner\r\n   */\r\n  function proxyOwner() public view returns (address) {\r\n    return upgradeabilityOwner();\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferProxyOwnership(address newOwner) public onlyProxyOwner {\r\n    require(newOwner != address(0));\r\n    emit ProxyOwnershipTransferred(proxyOwner(), newOwner);\r\n    setUpgradeabilityOwner(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the upgradeability owner to upgrade the current implementation of the proxy.\r\n   * @param implementation representing the address of the new implementation to be set.\r\n   */\r\n  function upgradeTo(address implementation) public onlyProxyOwner {\r\n    _upgradeTo(implementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the upgradeability owner to upgrade the current implementation of the proxy\r\n   * and delegatecall the new implementation for initialization.\r\n   * @param implementation representing the address of the new implementation to be set.\r\n   * @param data represents the msg.data to bet sent in the low level call. This parameter may include the function\r\n   * signature of the implementation to be called with the needed payload\r\n   */\r\n  function upgradeToAndCall(address implementation, bytes memory data) public payable onlyProxyOwner {\r\n    upgradeTo(implementation);\r\n    (bool result, ) = address(this).delegatecall(data);\r\n    require(result);\r\n  }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\ncontract OwnableDelegateProxy is OwnedUpgradeabilityProxy {\r\n  constructor(\r\n    address owner,\r\n    address initialImplementation,\r\n    bytes memory callData\r\n  ) public {\r\n    setUpgradeabilityOwner(owner);\r\n    _upgradeTo(initialImplementation);\r\n    (bool result, ) = initialImplementation.delegatecall(callData);\r\n    require(result);\r\n  }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\ncontract ProxyRegistry is Ownable {\r\n  /* DelegateProxy implementation contract. Must be initialized. */\r\n  address public delegateProxyImplementation;\r\n\r\n  /* Authenticated proxies by user. */\r\n  mapping(address => OwnableDelegateProxy) public proxies;\r\n\r\n  /* Contracts pending access. */\r\n  mapping(address => uint256) public pending;\r\n\r\n  /* Contracts allowed to call those proxies. */\r\n  mapping(address => bool) public contracts;\r\n\r\n  /* Delay period for adding an authenticated contract.\r\n       This mitigates a particular class of potential attack on the Wyvern DAO (which owns this registry) - if at any point the value of assets held by proxy contracts exceeded the value of half the WYV supply (votes in the DAO),\r\n       a malicious but rational attacker could buy half the Wyvern and grant themselves access to all the proxy contracts. A delay period renders this attack nonthreatening - given two weeks, if that happened, users would have\r\n       plenty of time to notice and transfer their assets.\r\n    */\r\n  uint256 public DELAY_PERIOD = 2 weeks;\r\n\r\n  /**\r\n   * Start the process to enable access for specified contract. Subject to delay period.\r\n   *\r\n   * @dev ProxyRegistry owner only\r\n   * @param addr Address to which to grant permissions\r\n   */\r\n  function startGrantAuthentication(address addr) public onlyOwner {\r\n    require(!contracts[addr] && pending[addr] == 0);\r\n    pending[addr] = now;\r\n  }\r\n\r\n  /**\r\n   * End the process to nable access for specified contract after delay period has passed.\r\n   *\r\n   * @dev ProxyRegistry owner only\r\n   * @param addr Address to which to grant permissions\r\n   */\r\n  function endGrantAuthentication(address addr) public onlyOwner {\r\n    require(!contracts[addr] && pending[addr] != 0 && ((pending[addr] + DELAY_PERIOD) < now));\r\n    pending[addr] = 0;\r\n    contracts[addr] = true;\r\n  }\r\n\r\n  /**\r\n   * Revoke access for specified contract. Can be done instantly.\r\n   *\r\n   * @dev ProxyRegistry owner only\r\n   * @param addr Address of which to revoke permissions\r\n   */\r\n  function revokeAuthentication(address addr) public onlyOwner {\r\n    contracts[addr] = false;\r\n  }\r\n\r\n  /**\r\n   * Register a proxy contract with this registry\r\n   *\r\n   * @dev Must be called by the user which the proxy is for, creates a new AuthenticatedProxy\r\n   * @return proxy New AuthenticatedProxy contract\r\n   */\r\n  function registerProxy() public returns (OwnableDelegateProxy proxy) {\r\n    require(address(proxies[msg.sender]) == address(0));\r\n    proxy = new OwnableDelegateProxy(\r\n      msg.sender,\r\n      delegateProxyImplementation,\r\n      abi.encodeWithSignature(\"initialize(address,address)\", msg.sender, address(this))\r\n    );\r\n    proxies[msg.sender] = proxy;\r\n  }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\nlibrary Strings {\r\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\r\n  function strConcat(\r\n    string memory _a,\r\n    string memory _b,\r\n    string memory _c,\r\n    string memory _d,\r\n    string memory _e\r\n  ) internal pure returns (string memory) {\r\n    bytes memory _ba = bytes(_a);\r\n    bytes memory _bb = bytes(_b);\r\n    bytes memory _bc = bytes(_c);\r\n    bytes memory _bd = bytes(_d);\r\n    bytes memory _be = bytes(_e);\r\n    string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n    bytes memory babcde = bytes(abcde);\r\n    uint256 k = 0;\r\n    for (uint256 i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n    for (uint256 i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n    for (uint256 i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n    for (uint256 i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n    for (uint256 i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n    return string(babcde);\r\n  }\r\n\r\n  function strConcat(\r\n    string memory _a,\r\n    string memory _b,\r\n    string memory _c,\r\n    string memory _d\r\n  ) internal pure returns (string memory) {\r\n    return strConcat(_a, _b, _c, _d, \"\");\r\n  }\r\n\r\n  function strConcat(\r\n    string memory _a,\r\n    string memory _b,\r\n    string memory _c\r\n  ) internal pure returns (string memory) {\r\n    return strConcat(_a, _b, _c, \"\", \"\");\r\n  }\r\n\r\n  function strConcat(string memory _a, string memory _b) internal pure returns (string memory) {\r\n    return strConcat(_a, _b, \"\", \"\", \"\");\r\n  }\r\n\r\n  function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\r\n    if (_i == 0) {\r\n      return \"0\";\r\n    }\r\n    uint256 j = _i;\r\n    uint256 len;\r\n    while (j != 0) {\r\n      len++;\r\n      j /= 10;\r\n    }\r\n    bytes memory bstr = new bytes(len);\r\n    uint256 k = len - 1;\r\n    while (_i != 0) {\r\n      bstr[k--] = bytes1(uint8(48 + (_i % 10)));\r\n      _i /= 10;\r\n    }\r\n    return string(bstr);\r\n  }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @title WhitelistAdminRole\r\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\r\n */\r\ncontract WhitelistAdminRole is Context {\r\n  using Roles for Roles.Role;\r\n\r\n  event WhitelistAdminAdded(address indexed account);\r\n  event WhitelistAdminRemoved(address indexed account);\r\n\r\n  Roles.Role private _whitelistAdmins;\r\n\r\n  constructor() internal {\r\n    _addWhitelistAdmin(_msgSender());\r\n  }\r\n\r\n  modifier onlyWhitelistAdmin() {\r\n    require(isWhitelistAdmin(_msgSender()), \"WhitelistAdminRole: caller does not have the WhitelistAdmin role\");\r\n    _;\r\n  }\r\n\r\n  function isWhitelistAdmin(address account) public view returns (bool) {\r\n    return _whitelistAdmins.has(account);\r\n  }\r\n\r\n  function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\r\n    _addWhitelistAdmin(account);\r\n  }\r\n\r\n  function renounceWhitelistAdmin() public {\r\n    _removeWhitelistAdmin(_msgSender());\r\n  }\r\n\r\n  function _addWhitelistAdmin(address account) internal {\r\n    _whitelistAdmins.add(account);\r\n    emit WhitelistAdminAdded(account);\r\n  }\r\n\r\n  function _removeWhitelistAdmin(address account) internal {\r\n    _whitelistAdmins.remove(account);\r\n    emit WhitelistAdminRemoved(account);\r\n  }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @title ERC1155Tradable\r\n * ERC1155Tradable - ERC1155 contract that whitelists an operator address, \r\n * has create and mint functionality, and supports useful standards from OpenZeppelin,\r\n  like _exists(), name(), symbol(), and totalSupply()\r\n */\r\ncontract ERC1155Tradable is ERC1155, ERC1155MintBurn, ERC1155Metadata, Ownable, MinterRole, WhitelistAdminRole {\r\n  using Strings for string;\r\n\r\n  address proxyRegistryAddress;\r\n  uint256 private _currentTokenID = 0;\r\n  mapping(uint256 => address) public creators;\r\n  mapping(uint256 => uint256) public tokenSupply;\r\n  mapping(uint256 => uint256) public tokenMaxSupply;\r\n  // Contract name\r\n  string public name;\r\n  // Contract symbol\r\n  string public symbol;\r\n\r\n  constructor(\r\n    string memory _name,\r\n    string memory _symbol,\r\n    address _proxyRegistryAddress\r\n  ) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    proxyRegistryAddress = _proxyRegistryAddress;\r\n  }\r\n\r\n  function removeWhitelistAdmin(address account) public onlyOwner {\r\n    _removeWhitelistAdmin(account);\r\n  }\r\n\r\n  function removeMinter(address account) public onlyOwner {\r\n    _removeMinter(account);\r\n  }\r\n\r\n  function uri(uint256 _id) public view override returns (string memory) {\r\n    require(_exists(_id), \"ERC721Tradable#uri: NONEXISTENT_TOKEN\");\r\n    return Strings.strConcat(baseMetadataURI, Strings.uint2str(_id));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the total quantity for a token ID\r\n   * @param _id uint256 ID of the token to query\r\n   * @return amount of token in existence\r\n   */\r\n  function totalSupply(uint256 _id) public view returns (uint256) {\r\n    return tokenSupply[_id];\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the max quantity for a token ID\r\n   * @param _id uint256 ID of the token to query\r\n   * @return amount of token in existence\r\n   */\r\n  function maxSupply(uint256 _id) public view returns (uint256) {\r\n    return tokenMaxSupply[_id];\r\n  }\r\n\r\n  /**\r\n   * @dev Will update the base URL of token's URI\r\n   * @param _newBaseMetadataURI New base URL of token's URI\r\n   */\r\n  function setBaseMetadataURI(string memory _newBaseMetadataURI) public onlyWhitelistAdmin {\r\n    _setBaseMetadataURI(_newBaseMetadataURI);\r\n  }\r\n\r\n  /**\r\n   * @dev Creates a new token type and assigns _initialSupply to an address\r\n   * @param _maxSupply max supply allowed\r\n   * @param _initialSupply Optional amount to supply the first owner\r\n   * @param _uri Optional URI for this token type\r\n   * @param _data Optional data to pass if receiver is contract\r\n   * @return tokenId The newly created token ID\r\n   */\r\n  function create(\r\n    uint256 _maxSupply,\r\n    uint256 _initialSupply,\r\n    string calldata _uri,\r\n    bytes calldata _data\r\n  ) external onlyWhitelistAdmin returns (uint256 tokenId) {\r\n    require(_initialSupply <= _maxSupply, \"Initial supply cannot be more than max supply\");\r\n    uint256 _id = _getNextTokenID();\r\n    _incrementTokenTypeId();\r\n    creators[_id] = msg.sender;\r\n\r\n    if (bytes(_uri).length > 0) {\r\n      emit URI(_uri, _id);\r\n    }\r\n\r\n    if (_initialSupply != 0) _mint(msg.sender, _id, _initialSupply, _data);\r\n    tokenSupply[_id] = _initialSupply;\r\n    tokenMaxSupply[_id] = _maxSupply;\r\n    return _id;\r\n  }\r\n\r\n  /**\r\n   * @dev Mints some amount of tokens to an address\r\n   * @param _to          Address of the future owner of the token\r\n   * @param _id          Token ID to mint\r\n   * @param _quantity    Amount of tokens to mint\r\n   * @param _data        Data to pass if receiver is contract\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _id,\r\n    uint256 _quantity,\r\n    bytes memory _data\r\n  ) public onlyMinter {\r\n    uint256 tokenId = _id;\r\n    require(tokenSupply[tokenId].add(_quantity) <= tokenMaxSupply[tokenId], \"Max supply reached\");\r\n    _mint(_to, _id, _quantity, _data);\r\n    tokenSupply[_id] = tokenSupply[_id].add(_quantity);\r\n  }\r\n\r\n  /**\r\n   * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-free listings.\r\n   */\r\n  function isApprovedForAll(address _owner, address _operator) public view override returns (bool isOperator) {\r\n    // Whitelist OpenSea proxy contract for easy trading.\r\n    ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\r\n    if (address(proxyRegistry.proxies(_owner)) == _operator) {\r\n      return true;\r\n    }\r\n\r\n    return ERC1155.isApprovedForAll(_owner, _operator);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists by checking to see if it has a creator\r\n   * @param _id uint256 ID of the token to query the existence of\r\n   * @return bool whether the token exists\r\n   */\r\n  function _exists(uint256 _id) internal view returns (bool) {\r\n    return creators[_id] != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev calculates the next token ID based on value of _currentTokenID\r\n   * @return uint256 for the next token ID\r\n   */\r\n  function _getNextTokenID() private view returns (uint256) {\r\n    return _currentTokenID.add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev increments the value of _currentTokenID\r\n   */\r\n  function _incrementTokenTypeId() private {\r\n    _currentTokenID++;\r\n  }\r\n\r\n  /**\r\n   * @dev Updates token max supply\r\n   * @param id_ uint256 ID of the token to update\r\n   * @param maxSupply_ uint256 max supply allowed\r\n   */\r\n  function updateTokenMaxSupply(uint256 id_, uint256 maxSupply_) external onlyWhitelistAdmin {\r\n    require(_exists(id_), \"ERC1155Tradable#updateTokenMaxSupply: NONEXISTENT_TOKEN\");\r\n    require(tokenSupply[id_] <= maxSupply_, \"already minted > new maxSupply\");\r\n    tokenMaxSupply[id_] = maxSupply_;\r\n  }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @title EddaNft\r\n * EddaNft - Collect limited edition NFTs from Edda\r\n */\r\ncontract EddaNft is ERC1155Tradable {\r\n  string public contractURI;\r\n\r\n  constructor(\r\n    string memory _name, //// \"Meme Ltd.\"\r\n    string memory _symbol, //// \"MEMES\"\r\n    address _proxyRegistryAddress,\r\n    string memory _baseMetadataURI, //// \"https://api.dontbuymeme.com/memes/\"\r\n    string memory _contractURI //// \"https://api.dontbuymeme.com/contract/memes-erc1155\"\r\n  ) public ERC1155Tradable(_name, _symbol, _proxyRegistryAddress) {\r\n    contractURI = _contractURI;\r\n    _setBaseMetadataURI(_baseMetadataURI);\r\n  }\r\n\r\n  //// function contractURI() public pure returns (string memory) {\r\n  ////   return \"https://api.dontbuymeme.com/contract/memes-erc1155\";\r\n  //// }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_baseMetadataURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelistAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseMetadataURI\",\"type\":\"string\"}],\"name\":\"setBaseMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply_\",\"type\":\"uint256\"}],\"name\":\"updateTokenMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EddaNft","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000a5409ec958c83c3f309868babaca7c86dcb077c100000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000845444441204e46540000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007454444414e465400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d68747470733a2f2f6e66742e65646461737761702e636f6d2f6170692f000000000000000000000000000000000000000000000000000000000000000000002668747470733a2f2f6e66742e65646461737761702e636f6d2f636f6e74726163742f6e6674310000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b767742a601e71b9de17e81b53f4fa4a9c582be6d50f082a89a67cfdffc3b37e"}]}