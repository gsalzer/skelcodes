{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/access/Operator.sol\r\n\r\n\r\npragma solidity >=0.7.0 <0.8.0;\r\n\r\n\r\nabstract contract Operator is Context, Ownable {\r\n    address private _operator;\r\n\r\n    event OperatorTransferred(\r\n        address indexed previousOperator,\r\n        address indexed newOperator\r\n    );\r\n\r\n    constructor() {\r\n        _operator = _msgSender();\r\n        emit OperatorTransferred(address(0), _operator);\r\n    }\r\n\r\n    function operator() public view returns (address) {\r\n        return _operator;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(\r\n            _operator == _msgSender(),\r\n            'operator: caller is not the operator'\r\n        );\r\n        _;\r\n    }\r\n\r\n    function isOperator() public view returns (bool) {\r\n        return _msgSender() == _operator;\r\n    }\r\n\r\n    function transferOperator(address newOperator_) public onlyOwner {\r\n        _transferOperator(newOperator_);\r\n    }\r\n\r\n    function _transferOperator(address newOperator_) internal {\r\n        require(\r\n            newOperator_ != address(0),\r\n            'operator: zero address given for new operator'\r\n        );\r\n        emit OperatorTransferred(address(0), newOperator_);\r\n        _operator = newOperator_;\r\n    }\r\n}\r\n\r\n\r\n\r\n// File: @openzeppelin/contracts/math/Math.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/distribution/PoolStore.sol\r\n\r\n\r\npragma solidity >=0.7.0 <0.8.0;\r\n\r\n\r\n\r\n\r\ninterface IPoolStore {\r\n    /* ================= EVENTS ================= */\r\n    event Deposit(\r\n        address indexed operator,\r\n        address indexed owner,\r\n        uint256 indexed pid,\r\n        uint256 amount\r\n    );\r\n    event Withdraw(\r\n        address indexed operator,\r\n        address indexed owner,\r\n        uint256 indexed pid,\r\n        uint256 amount\r\n    );\r\n\r\n    /* ================= CALLS ================= */\r\n\r\n    // common\r\n    function totalWeight() external view returns (uint256);\r\n\r\n    function poolLength() external view returns (uint256);\r\n\r\n    // index\r\n    function poolIdsOf(address _token) external view returns (uint256[] memory);\r\n\r\n    // pool info\r\n    function nameOf(uint256 _pid) external view returns (string memory);\r\n\r\n    function tokenOf(uint256 _pid) external view returns (address);\r\n\r\n    function weightOf(uint256 _pid) external view returns (uint256);\r\n\r\n    function totalSupply(uint256 _pid) external view returns (uint256);\r\n\r\n    function balanceOf(uint256 _pid, address _owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /* ================= TXNS ================= */\r\n\r\n    function deposit(\r\n        uint256 _pid,\r\n        address _owner,\r\n        uint256 _amount\r\n    ) external;\r\n\r\n    function withdraw(\r\n        uint256 _pid,\r\n        address _owner,\r\n        uint256 _amount\r\n    ) external;\r\n\r\n    function emergencyWithdraw(uint256 _pid) external;\r\n}\r\n\r\ninterface IPoolStoreGov {\r\n    /* ================= EVENTS ================= */\r\n\r\n    event EmergencyReported(address indexed reporter);\r\n    event EmergencyResolved(address indexed resolver);\r\n\r\n    event WeightFeederChanged(\r\n        address indexed operator,\r\n        address indexed oldFeeder,\r\n        address indexed newFeeder\r\n    );\r\n\r\n    event PoolAdded(\r\n        address indexed operator,\r\n        uint256 indexed pid,\r\n        string name,\r\n        address token,\r\n        uint256 weight\r\n    );\r\n    event PoolWeightChanged(\r\n        address indexed operator,\r\n        uint256 indexed pid,\r\n        uint256 from,\r\n        uint256 to\r\n    );\r\n    event PoolNameChanged(\r\n        address indexed operator,\r\n        uint256 indexed pid,\r\n        string from,\r\n        string to\r\n    );\r\n\r\n    /* ================= TXNS ================= */\r\n\r\n    // emergency\r\n    function reportEmergency() external;\r\n\r\n    function resolveEmergency() external;\r\n\r\n    // feeder\r\n    function setWeightFeeder(address _newFeeder) external;\r\n\r\n    // pool setting\r\n    function addPool(\r\n        string memory _name,\r\n        IERC20 _token,\r\n        uint256 _weight\r\n    ) external;\r\n\r\n    function setPool(uint256 _pid, uint256 _weight) external;\r\n\r\n    function setPool(uint256 _pid, string memory _name) external;\r\n}\r\n\r\ncontract PoolStore is IPoolStore, IPoolStoreGov, Operator {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /* ================= DATA STRUCTURE ================= */\r\n\r\n    struct Pool {\r\n        string name;\r\n        IERC20 token;\r\n        uint256 weight;\r\n        uint256 totalSupply;\r\n    }\r\n\r\n    /* ================= STATES ================= */\r\n\r\n    uint256 public override totalWeight = 0;\r\n\r\n    Pool[] public pools;\r\n    mapping(uint256 => mapping(address => uint256)) balances;\r\n    mapping(address => uint256[]) public indexByToken;\r\n\r\n    bool public emergency = false;\r\n    address public weightFeeder;\r\n\r\n    constructor() Operator() {\r\n        weightFeeder = _msgSender();\r\n    }\r\n\r\n    /* ================= GOV - OWNER ONLY ================= */\r\n\r\n    /**\r\n     * @dev CAUTION: DO NOT USE IN NORMAL SITUATION\r\n     * @notice Enable emergency withdraw\r\n     */\r\n    function reportEmergency() public override onlyOwner {\r\n        emergency = true;\r\n        emit EmergencyReported(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev CAUTION: DO NOT USE IN NORMAL SITUATION\r\n     * @notice Disable emergency withdraw\r\n     */\r\n    function resolveEmergency() public override onlyOwner {\r\n        emergency = false;\r\n        emit EmergencyResolved(_msgSender());\r\n    }\r\n\r\n    /*\r\n     * @param _newFeeder weight feeder address to change\r\n     */\r\n    function setWeightFeeder(address _newFeeder) public override onlyOwner {\r\n        address oldFeeder = weightFeeder;\r\n        weightFeeder = _newFeeder;\r\n        emit WeightFeederChanged(_msgSender(), oldFeeder, _newFeeder);\r\n    }\r\n\r\n    /**\r\n     * @param _token pool token\r\n     * @param _weight pool weight\r\n     */\r\n    function addPool(\r\n        string memory _name,\r\n        IERC20 _token,\r\n        uint256 _weight\r\n    ) public override onlyOwner {\r\n        totalWeight = totalWeight.add(_weight);\r\n\r\n        uint256 index = pools.length;\r\n        indexByToken[address(_token)].push(index);\r\n\r\n        pools.push(\r\n            Pool({name: _name, token: _token, weight: _weight, totalSupply: 0})\r\n        );\r\n        emit PoolAdded(_msgSender(), index, _name, address(_token), _weight);\r\n    }\r\n\r\n    /**\r\n     * @param _pid pool id\r\n     * @param _weight target pool weight\r\n     */\r\n    function setPool(uint256 _pid, uint256 _weight)\r\n        public\r\n        override\r\n        onlyWeightFeeder\r\n        checkPoolId(_pid)\r\n    {\r\n        Pool memory pool = pools[_pid];\r\n\r\n        uint256 oldWeight = pool.weight;\r\n        totalWeight = totalWeight.add(_weight).sub(pool.weight);\r\n        pool.weight = _weight;\r\n\r\n        pools[_pid] = pool;\r\n\r\n        emit PoolWeightChanged(_msgSender(), _pid, oldWeight, _weight);\r\n    }\r\n\r\n    /**\r\n     * @param _pid pool id\r\n     * @param _name name of pool\r\n     */\r\n    function setPool(uint256 _pid, string memory _name)\r\n        public\r\n        override\r\n        checkPoolId(_pid)\r\n        onlyOwner\r\n    {\r\n        string memory oldName = pools[_pid].name;\r\n        pools[_pid].name = _name;\r\n\r\n        emit PoolNameChanged(_msgSender(), _pid, oldName, _name);\r\n    }\r\n\r\n    /* ================= MODIFIER ================= */\r\n\r\n    modifier onlyWeightFeeder {\r\n        require(_msgSender() == weightFeeder, 'PoolStore: unauthorized');\r\n\r\n        _;\r\n    }\r\n\r\n    modifier checkPoolId(uint256 _pid) {\r\n        require(_pid <= pools.length, 'PoolStore: invalid pid');\r\n\r\n        _;\r\n    }\r\n\r\n    /* ================= CALLS - ANYONE ================= */\r\n    /**\r\n     * @return total pool length\r\n     */\r\n    function poolLength() public view override returns (uint256) {\r\n        return pools.length;\r\n    }\r\n\r\n    /**\r\n     * @param _token pool token address\r\n     * @return pool id\r\n     */\r\n    function poolIdsOf(address _token)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256[] memory)\r\n    {\r\n        return indexByToken[_token];\r\n    }\r\n\r\n    /**\r\n     * @param _pid pool id\r\n     * @return name of pool\r\n     */\r\n    function nameOf(uint256 _pid)\r\n        public\r\n        view\r\n        override\r\n        checkPoolId(_pid)\r\n        returns (string memory)\r\n    {\r\n        return pools[_pid].name;\r\n    }\r\n\r\n    /**\r\n     * @param _pid pool id\r\n     * @return pool token\r\n     */\r\n    function tokenOf(uint256 _pid)\r\n        public\r\n        view\r\n        override\r\n        checkPoolId(_pid)\r\n        returns (address)\r\n    {\r\n        return address(pools[_pid].token);\r\n    }\r\n\r\n    /**\r\n     * @param _pid pool id\r\n     * @return pool weight\r\n     */\r\n    function weightOf(uint256 _pid)\r\n        public\r\n        view\r\n        override\r\n        checkPoolId(_pid)\r\n        returns (uint256)\r\n    {\r\n        return pools[_pid].weight;\r\n    }\r\n\r\n    /**\r\n     * @param _pid pool id\r\n     * @return total staked token amount\r\n     */\r\n    function totalSupply(uint256 _pid)\r\n        public\r\n        view\r\n        override\r\n        checkPoolId(_pid)\r\n        returns (uint256)\r\n    {\r\n        return pools[_pid].totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @param _pid pool id\r\n     * @param _sender staker address\r\n     * @return staked amount of user\r\n     */\r\n    function balanceOf(uint256 _pid, address _sender)\r\n        public\r\n        view\r\n        override\r\n        checkPoolId(_pid)\r\n        returns (uint256)\r\n    {\r\n        return balances[_pid][_sender];\r\n    }\r\n\r\n    /* ================= TXNS - OPERATOR ONLY ================= */\r\n\r\n    /**\r\n     * @param _pid pool id\r\n     * @param _owner stake address\r\n     * @param _amount stake amount\r\n     */\r\n    function deposit(\r\n        uint256 _pid,\r\n        address _owner,\r\n        uint256 _amount\r\n    ) public override checkPoolId(_pid) onlyOperator {\r\n        pools[_pid].totalSupply = pools[_pid].totalSupply.add(_amount);\r\n        balances[_pid][_owner] = balances[_pid][_owner].add(_amount);\r\n        IERC20(tokenOf(_pid)).safeTransferFrom(\r\n            _msgSender(),\r\n            address(this),\r\n            _amount\r\n        );\r\n\r\n        emit Deposit(_msgSender(), _owner, _pid, _amount);\r\n    }\r\n\r\n    function _withdraw(\r\n        uint256 _pid,\r\n        address _owner,\r\n        uint256 _amount\r\n    ) internal {\r\n        pools[_pid].totalSupply = pools[_pid].totalSupply.sub(_amount);\r\n        balances[_pid][_owner] = balances[_pid][_owner].sub(_amount);\r\n        IERC20(tokenOf(_pid)).safeTransfer(_msgSender(), _amount);\r\n\r\n        emit Withdraw(_msgSender(), _owner, _pid, _amount);\r\n    }\r\n\r\n    /**\r\n     * @param _pid pool id\r\n     * @param _owner stake address\r\n     * @param _amount stake amount\r\n     */\r\n    function withdraw(\r\n        uint256 _pid,\r\n        address _owner,\r\n        uint256 _amount\r\n    ) public override checkPoolId(_pid) onlyOperator {\r\n        _withdraw(_pid, _owner, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Anyone can withdraw its balance even if is not the operator\r\n     * @param _pid pool id\r\n     */\r\n    function emergencyWithdraw(uint256 _pid) public override checkPoolId(_pid) {\r\n        require(emergency, 'PoolStore: not in emergency');\r\n        _withdraw(_pid, msg.sender, balanceOf(_pid, _msgSender()));\r\n    }\r\n}\r\n\r\n// File: contracts/distribution/PoolStoreWrapper.sol\r\n\r\n\r\npragma solidity >=0.7.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n\r\nabstract contract PoolStoreWrapper is Context {\r\n    using SafeERC20 for IERC20;\r\n\r\n    IPoolStore public store;\r\n\r\n    function deposit(uint256 _pid, uint256 _amount) public virtual {\r\n        IERC20(store.tokenOf(_pid)).safeTransferFrom(\r\n            _msgSender(),\r\n            address(this),\r\n            _amount\r\n        );\r\n        store.deposit(_pid, _msgSender(), _amount);\r\n    }\r\n\r\n    function withdraw(uint256 _pid, uint256 _amount) public virtual {\r\n        store.withdraw(_pid, _msgSender(), _amount);\r\n        IERC20(store.tokenOf(_pid)).safeTransfer(_msgSender(), _amount);\r\n    }\r\n}\r\n\r\n// File: contracts/distribution/IPool.sol\r\n\r\n\r\npragma solidity >=0.7.0 <0.8.0;\r\n\r\ninterface IPool {\r\n    /* ================= EVENTS ================= */\r\n\r\n    event DepositToken(\r\n        address indexed owner,\r\n        uint256 indexed pid,\r\n        uint256 amount\r\n    );\r\n    event WithdrawToken(\r\n        address indexed owner,\r\n        uint256 indexed pid,\r\n        uint256 amount\r\n    );\r\n    event RewardClaimed(\r\n        address indexed owner,\r\n        uint256 indexed pid,\r\n        uint256 amount\r\n    );\r\n\r\n    /* ================= CALLS ================= */\r\n\r\n    function tokenOf(uint256 _pid) external view returns (address);\r\n\r\n    function poolIdsOf(address _token) external view returns (uint256[] memory);\r\n\r\n    function totalSupply(uint256 _pid) external view returns (uint256);\r\n\r\n    function balanceOf(uint256 _pid, address _owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function rewardRatePerPool(uint256 _pid) external view returns (uint256);\r\n\r\n    function rewardPerToken(uint256 _pid) external view returns (uint256);\r\n\r\n    function rewardEarned(uint256 _pid, address _target)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /* ================= TXNS ================= */\r\n\r\n    function massUpdate(uint256[] memory _pids) external;\r\n\r\n    function update(uint256 _pid) external;\r\n\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n\r\n    function withdraw(uint256 _pid, uint256 _amount) external;\r\n\r\n    function claimReward(uint256 _pid) external;\r\n\r\n    function exit(uint256 _pid) external;\r\n}\r\n\r\ninterface IPoolGov {\r\n    /* ================= EVENTS ================= */\r\n\r\n    event RewardNotified(\r\n        address indexed operator,\r\n        uint256 amount,\r\n        uint256 period\r\n    );\r\n\r\n    /* ================= TXNS ================= */\r\n\r\n    function setPeriod(uint256 _startTime, uint256 _period) external;\r\n\r\n    function setReward(uint256 _amount) external;\r\n\r\n    function setExtraRewardRate(uint256 _extra) external;\r\n\r\n    function stop() external;\r\n\r\n    function migrate(address _newPool, uint256 _amount) external;\r\n}\r\n\r\n\r\n\r\n// File: contracts/distribution/DistributionV2.sol\r\n\r\n\r\npragma solidity >=0.7.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DistributionV2 is IPool, IPoolGov, PoolStoreWrapper, Operator {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /* ================= DATA STRUCTURE ================= */\r\n\r\n    struct User {\r\n        uint256 amount;\r\n        uint256 reward;\r\n        uint256 rewardPerTokenPaid;\r\n    }\r\n    struct Pool {\r\n        bool initialized;\r\n        uint256 rewardRate;\r\n        uint256 lastUpdateTime;\r\n        uint256 rewardPerTokenStored;\r\n    }\r\n\r\n    /* ================= STATE VARIABLES ================= */\r\n\r\n    // share\r\n    address public share;\r\n    mapping(address => bool) public approvals;\r\n    // poolId => Pool\r\n    mapping(uint256 => Pool) public pools;\r\n    // poolId => sender => User\r\n    mapping(uint256 => mapping(address => User)) public users;\r\n\r\n    // poolId => sender => bool\r\n    mapping(uint256 => mapping(address => bool)) public oldPoolClaimed;\r\n    address oldPool;\r\n\r\n    bool public stopped = false;\r\n    uint256 public rewardRate = 0;\r\n    uint256 public rewardRateExtra = 0;\r\n\r\n    // halving\r\n    uint256 public rewardRateBeforeHalve = 0;\r\n    // year2=>4%, year3=>3.5%, year4=>3%\r\n    uint256[] public inflationRate = [0, 0, 400, 350, 300];\r\n    uint256 public year = 1;\r\n    uint256 public startSupply = 860210511822372000000000;\r\n\r\n    // control\r\n    uint256 public period = 0;\r\n    uint256 public periodFinish = 0;\r\n    uint256 public startTime = 0;\r\n\r\n    /* ================= CONSTRUCTOR ================= */\r\n\r\n    constructor(address _share, address _poolStore) Ownable() {\r\n        share = _share;\r\n        store = IPoolStore(_poolStore);\r\n    }\r\n\r\n    /* ================= GOV - OWNER ONLY ================= */\r\n\r\n    /**\r\n     * @param _startTime starting time to distribute\r\n     * @param _period distribution period\r\n     */\r\n    function setPeriod(uint256 _startTime, uint256 _period)\r\n        public\r\n        override\r\n        onlyOperator\r\n    {\r\n        // re-calc\r\n        if (startTime <= block.timestamp && block.timestamp < periodFinish) {\r\n            uint256 remaining = periodFinish.sub(block.timestamp);\r\n            uint256 leftover = remaining.mul(rewardRate);\r\n            rewardRate = leftover.div(_period);\r\n        }\r\n\r\n        period = _period;\r\n        startTime = _startTime;\r\n        periodFinish = _startTime.add(_period);\r\n    }\r\n\r\n    /**\r\n     * @param _amount token amount to distribute\r\n     */\r\n    function setReward(uint256 _amount) public override onlyOperator {\r\n        require(block.timestamp < periodFinish, 'BACPool: already finished');\r\n\r\n        if (startTime <= block.timestamp) {\r\n            uint256 remaining = periodFinish.sub(block.timestamp);\r\n            uint256 leftover = remaining.mul(rewardRate);\r\n            rewardRate = _amount.add(leftover).div(\r\n                periodFinish.sub(block.timestamp)\r\n            );\r\n        } else {\r\n            rewardRate = rewardRate.add(\r\n                _amount.div(periodFinish.sub(startTime))\r\n            );\r\n        }\r\n    }\r\n\r\n    function setExtraRewardRate(uint256 _extra) public override onlyOwner {\r\n        rewardRateExtra = _extra;\r\n    }\r\n\r\n    function setOldPool(address _oldPool) public onlyOwner {\r\n        oldPool = _oldPool;\r\n    }\r\n\r\n    /**\r\n     * @dev STOP DISTRIBUTION\r\n     */\r\n    function stop() public override onlyOwner {\r\n        periodFinish = block.timestamp;\r\n        stopped = true;\r\n    }\r\n\r\n    /**\r\n     * @dev MUST UPDATE ALL POOL REWARD BEFORE MIGRATION!!!!!\r\n     * @param _newPool new pool address to migrate\r\n     */\r\n    function migrate(address _newPool, uint256 _amount)\r\n        public\r\n        override\r\n        onlyOwner\r\n    {\r\n        require(stopped, 'BACPool: not stopped');\r\n        IERC20(share).safeTransfer(_newPool, _amount);\r\n\r\n        uint256 remaining = startTime.add(period).sub(periodFinish);\r\n        uint256 leftover = remaining.mul(rewardRate);\r\n        IPoolGov(_newPool).setPeriod(block.timestamp.add(1), remaining);\r\n        IPoolGov(_newPool).setReward(leftover);\r\n    }\r\n\r\n    /* ================= MODIFIER ================= */\r\n\r\n    /**\r\n     * @param _pid pool id\r\n     * @param _target update target. if is empty, skip individual update.\r\n     */\r\n    modifier updateReward(uint256 _pid, address _target) {\r\n        if (!approvals[store.tokenOf(_pid)]) {\r\n            IERC20(store.tokenOf(_pid)).safeApprove(\r\n                address(store),\r\n                type(uint256).max\r\n            );\r\n            approvals[store.tokenOf(_pid)] = true;\r\n        }\r\n\r\n        if (block.timestamp >= startTime) {\r\n            if (!pools[_pid].initialized) {\r\n                pools[_pid] = Pool({\r\n                    initialized: true,\r\n                    rewardRate: rewardRate,\r\n                    lastUpdateTime: startTime,\r\n                    rewardPerTokenStored: 0\r\n                });\r\n            }\r\n\r\n            // halve\r\n            if (!stopped && block.timestamp >= periodFinish) {\r\n                // 11% weekly decrease reward rate\r\n                if (block.timestamp < 1638144000) {\r\n                    // 2021-11-29 00:00:00 UTC\r\n                    rewardRateBeforeHalve = rewardRate;\r\n                    rewardRate = rewardRate.mul(89).div(100);\r\n                } else {\r\n                    period = 365 days;\r\n                    year += 1;\r\n                    uint256 periodAll =\r\n                        startSupply.mul(inflationRate[year]).div(10000);\r\n                    rewardRate = periodAll.div(31536000);\r\n                    rewardRateBeforeHalve = rewardRate;\r\n                    startSupply += periodAll;\r\n\r\n                    // 2% for the year5 and beyond\r\n                    inflationRate.push(200);\r\n                }\r\n\r\n                // set period\r\n                startTime = block.timestamp;\r\n                periodFinish = block.timestamp.add(period);\r\n            }\r\n\r\n            Pool memory pool = pools[_pid];\r\n            pool.rewardPerTokenStored = rewardPerToken(_pid);\r\n            if (pool.rewardRate == rewardRateBeforeHalve) {\r\n                pool.rewardRate = rewardRate;\r\n            }\r\n            pool.lastUpdateTime = applicableRewardTime();\r\n            pools[_pid] = pool;\r\n\r\n            if (_target != address(0x0)) {\r\n                User memory user = users[_pid][_target];\r\n                user.reward = rewardEarned(_pid, _target);\r\n                if (!oldPoolClaimed[_pid][_target]) {\r\n                    oldPoolClaimed[_pid][_target] = true;\r\n                }\r\n\r\n                user.rewardPerTokenPaid = pool.rewardPerTokenStored;\r\n                users[_pid][_target] = user;\r\n            }\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    /* ================= CALLS - ANYONE ================= */\r\n\r\n    /**\r\n     * @param _pid pool id\r\n     * @return pool token address\r\n     */\r\n    function tokenOf(uint256 _pid) external view override returns (address) {\r\n        return store.tokenOf(_pid);\r\n    }\r\n\r\n    /**\r\n     * @param _token pool token address\r\n     * @return pool id\r\n     */\r\n    function poolIdsOf(address _token)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256[] memory)\r\n    {\r\n        return store.poolIdsOf(_token);\r\n    }\r\n\r\n    /**\r\n     * @param _pid pool id\r\n     * @return pool's total staked amount\r\n     */\r\n    function totalSupply(uint256 _pid)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return store.totalSupply(_pid);\r\n    }\r\n\r\n    /**\r\n     * @param _owner staker address\r\n     * @return staker balance\r\n     */\r\n    function balanceOf(uint256 _pid, address _owner)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return store.balanceOf(_pid, _owner);\r\n    }\r\n\r\n    /**\r\n     * @return applicable reward time\r\n     */\r\n    function applicableRewardTime() public view returns (uint256) {\r\n        return Math.min(block.timestamp, periodFinish);\r\n    }\r\n\r\n    /**\r\n     * @param _pid pool id\r\n     * @param _crit reward rate\r\n     */\r\n    function _rewardRatePerPool(uint256 _pid, uint256 _crit)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _crit.mul(store.weightOf(_pid)).div(store.totalWeight());\r\n    }\r\n\r\n    /**\r\n     * @param _pid pool id\r\n     * @return calculated reward rate per pool\r\n     */\r\n    function rewardRatePerPool(uint256 _pid)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _rewardRatePerPool(_pid, rewardRate.add(rewardRateExtra));\r\n    }\r\n\r\n    /**\r\n     * @param _pid pool id\r\n     * @return RPT per pool\r\n     */\r\n    function rewardPerToken(uint256 _pid)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        Pool memory pool = pools[_pid];\r\n        if (store.totalSupply(_pid) == 0 || block.timestamp < startTime) {\r\n            return pool.rewardPerTokenStored;\r\n        }\r\n\r\n        if (pool.rewardRate != 0 && pool.rewardRate == rewardRateBeforeHalve) {\r\n            uint256 beforeHalve =\r\n                startTime\r\n                    .sub(pool.lastUpdateTime)\r\n                    .mul(_rewardRatePerPool(_pid, rewardRateBeforeHalve))\r\n                    .mul(1e18)\r\n                    .div(store.totalSupply(_pid));\r\n            uint256 afterHalve =\r\n                applicableRewardTime()\r\n                    .sub(startTime)\r\n                    .mul(rewardRatePerPool(_pid))\r\n                    .mul(1e18)\r\n                    .div(store.totalSupply(_pid));\r\n            return pool.rewardPerTokenStored.add(beforeHalve).add(afterHalve);\r\n        } else {\r\n            return\r\n                pool.rewardPerTokenStored.add(\r\n                    applicableRewardTime()\r\n                        .sub(pool.lastUpdateTime)\r\n                        .mul(rewardRatePerPool(_pid))\r\n                        .mul(1e18)\r\n                        .div(store.totalSupply(_pid))\r\n                );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param _pid pool id\r\n     * @param _target target address\r\n     * @return reward amount per pool\r\n     */\r\n    function rewardEarned(uint256 _pid, address _target)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        User memory user = users[_pid][_target];\r\n        uint256 oldUnclaim = 0;\r\n        if (oldPool != address(0x0) && !oldPoolClaimed[_pid][_target]) {\r\n            oldUnclaim += IPool(oldPool).rewardEarned(_pid, _target);\r\n        }\r\n        return\r\n            store\r\n                .balanceOf(_pid, _target)\r\n                .mul(rewardPerToken(_pid).sub(user.rewardPerTokenPaid))\r\n                .div(1e18)\r\n                .add(user.reward)\r\n                .add(oldUnclaim);\r\n    }\r\n\r\n    /* ================= TXNS - ANYONE ================= */\r\n\r\n    /**\r\n     * @param _pids array of pool ids\r\n     */\r\n    function massUpdate(uint256[] memory _pids) public override {\r\n        for (uint256 i = 0; i < _pids.length; i++) {\r\n            update(_pids[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param _pid pool id\r\n     */\r\n    function update(uint256 _pid)\r\n        public\r\n        override\r\n        updateReward(_pid, address(0x0))\r\n    {}\r\n\r\n    /**\r\n     * @param _pid pool id\r\n     * @param _amount deposit amount\r\n     */\r\n    function deposit(uint256 _pid, uint256 _amount)\r\n        public\r\n        override(IPool, PoolStoreWrapper)\r\n        updateReward(_pid, _msgSender())\r\n    {\r\n        require(!stopped, 'BASPool: stopped');\r\n        super.deposit(_pid, _amount);\r\n        emit DepositToken(_msgSender(), _pid, _amount);\r\n    }\r\n\r\n    /**\r\n     * @param _pid pool id\r\n     * @param _amount withdraw amount\r\n     */\r\n    function withdraw(uint256 _pid, uint256 _amount)\r\n        public\r\n        override(IPool, PoolStoreWrapper)\r\n        updateReward(_pid, _msgSender())\r\n    {\r\n        require(!stopped, 'BASPool: stopped');\r\n        super.withdraw(_pid, _amount);\r\n        emit WithdrawToken(_msgSender(), _pid, _amount);\r\n    }\r\n\r\n    /**\r\n     * @param _pid pool id\r\n     */\r\n    function claimReward(uint256 _pid)\r\n        public\r\n        override\r\n        updateReward(_pid, _msgSender())\r\n    {\r\n        claimReward(_pid, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @param _pid pool id\r\n     * @param _owner claim for owner\r\n     */\r\n    function claimReward(uint256 _pid, address _owner)\r\n        public\r\n        updateReward(_pid, _owner)\r\n    {\r\n        uint256 reward = users[_pid][_owner].reward;\r\n        if (reward > 0) {\r\n            users[_pid][_owner].reward = 0;\r\n            IERC20(share).safeTransfer(_owner, reward);\r\n            emit RewardClaimed(_owner, _pid, reward);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev withdraw + claim\r\n     * @param _pid pool id\r\n     */\r\n    function exit(uint256 _pid) external override {\r\n        withdraw(_pid, store.balanceOf(_pid, _msgSender()));\r\n        claimReward(_pid);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_share\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolStore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"RewardNotified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"applicableRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"inflationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"massUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oldPoolClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"poolIdsOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"rewardEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRateBeforeHalve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRateExtra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"rewardRatePerPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_extra\",\"type\":\"uint256\"}],\"name\":\"setExtraRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldPool\",\"type\":\"address\"}],\"name\":\"setOldPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"share\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"store\",\"outputs\":[{\"internalType\":\"contract IPoolStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"tokenOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator_\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenPaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"year\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DistributionV2","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000106538cc16f938776c7c180186975bca238752870000000000000000000000004bd3a0f66758f2f4ebe575f9dfd7874e80689f10","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0d42dce1de8b3c8202f19cb4eb4bcc416af0527afff9a4410819012a42b8e81b"}]}