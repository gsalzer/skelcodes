{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.2.0 https://hardhat.org\r\n\r\n// File contracts/IAmb.sol\r\n\r\n// SPDX-License-Identifier: MPL-2.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IAMB {\r\n    function messageSender() external view returns (address);\r\n    function maxGasPerTx() external view returns (uint256);\r\n    function transactionHash() external view returns (bytes32);\r\n    function messageId() external view returns (bytes32);\r\n    function messageSourceChainId() external view returns (bytes32);\r\n    function messageCallStatus(bytes32 _messageId) external view returns (bool);\r\n    function failedMessageDataHash(bytes32 _messageId) external view returns (bytes32);\r\n    function failedMessageReceiver(bytes32 _messageId) external view returns (address);\r\n    function failedMessageSender(bytes32 _messageId) external view returns (address);\r\n    function requireToPassMessage(address _contract, bytes calldata _data, uint256 _gas) external returns (bytes32);\r\n    function requireToConfirmMessage(address _contract, bytes calldata _data, uint256 _gas) external returns (bytes32);\r\n    function sourceChainId() external view returns (uint256);\r\n    function destinationChainId() external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/Forwarder.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract Forwarder {\r\n  event PassToEth(bytes32 indexed msgId, address mediator, bytes data);\r\n  event PassToBsc(bytes32 indexed msgId, address mediator, bytes data);\r\n  \r\n  IAMB bscAmb;\r\n  IAMB ethAmb;\r\n  \r\n  address ethMediator;\r\n  address bscMediator;\r\n  uint256 gasLimit;\r\n\r\n  bool isFrozen;\r\n  \r\n  constructor(address _bscAmb, address _ethAmb) {\r\n    bscAmb = IAMB(_bscAmb);\r\n    ethAmb = IAMB(_ethAmb);\r\n  }\r\n\r\n  function set(address _ethMediator,\r\n               address _bscMediator,\r\n               uint256 _gasLimit) public {\r\n    require(!isFrozen, \"Contract is frozen\");\r\n    ethMediator = _ethMediator;\r\n    bscMediator = _bscMediator;\r\n    gasLimit = _gasLimit;\r\n  }\r\n\r\n  function freeze() public {\r\n    isFrozen = true;\r\n  }\r\n\r\n  function forwardToEth(address _mediator, bytes calldata _data) public {\r\n    require(msg.sender == address(bscAmb), \"Only AMB can call.\");\r\n    require(bscAmb.messageSender() == bscMediator, \"Not receiving this from BSC Mediator.\");\r\n    bytes32 msgId = ethAmb.requireToPassMessage(\r\n        _mediator,\r\n        _data,\r\n        gasLimit\r\n    );\r\n    \r\n    emit PassToEth(msgId, _mediator, _data);\r\n  }\r\n\r\n  function forwardToBsc(address _mediator, bytes calldata _data) public {\r\n    require(msg.sender == address(ethAmb), \"Only AMB can call.\");\r\n    require(ethAmb.messageSender() == ethMediator, \"Not receiving this from ETH Mediator.\");\r\n    bytes32 msgId = bscAmb.requireToPassMessage(\r\n        _mediator,\r\n        _data,\r\n        gasLimit\r\n    );\r\n\r\n    emit PassToBsc(msgId, _mediator, _data);\r\n  }\r\n}\r\n\r\n\r\n// File contracts/IStrudel.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IStrudel {\r\n  function mint(address to, uint256 amount) external returns (bool);\r\n  function burn(address from, uint256 amount) external returns (bool);\r\n  function burnFrom(address from, uint256 amount) external;\r\n  function renounceMinter() external;\r\n}\r\n\r\n\r\n// File contracts/ITokenRecipient.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/// @title Interface of recipient contract for `approveAndCall` pattern.\r\n///        Implementors will be able to be used in an `approveAndCall`\r\n///        interaction with a supporting contract, such that a token approval\r\n///        can call the contract acting on that approval in a single\r\n///        transaction.\r\n///\r\n///        See the `FundingScript` and `RedemptionScript` contracts as examples.\r\ninterface ITokenRecipient {\r\n  /// Typically called from a token contract's `approveAndCall` method, this\r\n  /// method will receive the original owner of the token (`_from`), the\r\n  /// transferred `_value` (in the case of an ERC721, the token id), the token\r\n  /// address (`_token`), and a blob of `_extraData` that is informally\r\n  /// specified by the implementor of this method as a way to communicate\r\n  /// additional parameters.\r\n  ///\r\n  /// Token calls to `receiveApproval` should revert if `receiveApproval`\r\n  /// reverts, and reverts should remove the approval.\r\n  ///\r\n  /// @param _from The original owner of the token approved for transfer.\r\n  /// @param _value For an ERC20, the amount approved for transfer; for an\r\n  ///        ERC721, the id of the token approved for transfer.\r\n  /// @param _token The address of the contract for the token whose transfer\r\n  ///        was approved.\r\n  /// @param _extraData An additional data blob forwarded unmodified through\r\n  ///        `approveAndCall`, used to allow the token owner to pass\r\n  ///         additional parameters and data to this method. The structure of\r\n  ///         the extra data is informally specified by the implementor of\r\n  ///         this interface.\r\n  function receiveApproval(\r\n    address _from,\r\n    uint256 _value,\r\n    address _token,\r\n    bytes calldata _extraData\r\n  ) external;\r\n}\r\n\r\n\r\n// File contracts/StrudelMediator.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\ncontract StrudelMediator is ITokenRecipient {\r\n  event StartCross(bytes32 indexed msgId,\r\n                   address indexed sender,\r\n                   address indexed recipient,\r\n                   uint256 value);\r\n  event EndCross(address indexed recipient,\r\n                 uint256 value);\r\n  \r\n  IAMB public amb;\r\n\r\n  address public admin;\r\n  IStrudel public strudel;\r\n  address public otherMediator;\r\n  address public forwarder;\r\n  uint256 public gasLimit;\r\n  bool isMainnet;\r\n\r\n  constructor(address _amb) {\r\n    amb = IAMB(_amb);\r\n    admin = msg.sender;\r\n  }\r\n\r\n  function set(address _strudel,\r\n               address _otherMediator,\r\n               address _forwarder,\r\n               uint256 _gasLimit,\r\n               bool _isMainnet,\r\n               address _admin) public {\r\n    require(msg.sender == admin, \"Only admin\");\r\n    strudel = IStrudel(_strudel);\r\n    otherMediator = _otherMediator;\r\n    forwarder = _forwarder;\r\n    gasLimit = _gasLimit;\r\n    isMainnet = _isMainnet;\r\n    admin = _admin;\r\n  }\r\n\r\n  function renounceMinter() public {\r\n    require(msg.sender == admin, \"Only admin\");\r\n    strudel.renounceMinter();\r\n  }\r\n\r\n  function startCross(uint256 _value, address _recipient) public returns (bool) {\r\n\r\n    require(!isMainnet, \"Use approveAndCall on mainnet\");\r\n\r\n    bytes4 methodSelector = StrudelMediator(address(0)).endCross.selector;\r\n    bytes memory data = abi.encodeWithSelector(methodSelector, _value, _recipient);\r\n\r\n    bytes4 f_methodSelector = Forwarder(address(0)).forwardToEth.selector;\r\n    bytes memory f_data = abi.encodeWithSelector(f_methodSelector, otherMediator, data);\r\n    \r\n    bytes32 msgId = amb.requireToPassMessage(\r\n        forwarder,\r\n        f_data,\r\n        gasLimit\r\n    );\r\n    \r\n    strudel.burn(msg.sender, _value);\r\n    \r\n    emit StartCross(msgId, msg.sender, _recipient, _value);\r\n    return true;\r\n  }\r\n\r\n  function receiveApproval(address _from,\r\n                           uint256 _value,\r\n                           address _token,\r\n                           bytes calldata _extraData\r\n                           ) external override {\r\n    require(msg.sender == address(strudel), \"Only strudel can call.\");\r\n    require(_token == address(strudel), \"Only strudel can call.\");\r\n    require(isMainnet, \"Use startCross on BSC\");\r\n\r\n    address _recipient = getAddr(_extraData);\r\n\r\n    bytes4 methodSelector = StrudelMediator(address(0)).endCross.selector;\r\n    bytes memory data = abi.encodeWithSelector(methodSelector, _value, _recipient);\r\n\r\n    bytes4 f_methodSelector = Forwarder(address(0)).forwardToBsc.selector;\r\n    bytes memory f_data = abi.encodeWithSelector(f_methodSelector, otherMediator, data);\r\n    \r\n    bytes32 msgId = amb.requireToPassMessage(\r\n        forwarder,\r\n        f_data,\r\n        gasLimit\r\n    );\r\n\r\n    strudel.burnFrom(_from, _value);\r\n    emit StartCross(msgId, _from, _recipient, _value);\r\n  }\r\n\r\n  function endCross(uint256 _value, address _recipient) public returns (bool) {\r\n    require(msg.sender == address(amb), \"Only AMB can call.\");\r\n    require(amb.messageSender() == forwarder, \"Not receiving this from forwarder\");\r\n\r\n    strudel.mint(_recipient, _value);\r\n    \r\n    emit EndCross(_recipient, _value);\r\n    return true;\r\n  }\r\n\r\n  function getAddr(bytes memory _extraData) internal pure returns (address){\r\n    address addr;\r\n    assembly {\r\n      addr := mload(add(_extraData,20))\r\n    }\r\n    return addr;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_amb\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"EndCross\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"msgId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"StartCross\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amb\",\"outputs\":[{\"internalType\":\"contract IAMB\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"endCross\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otherMediator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strudel\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_otherMediator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isMainnet\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"startCross\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strudel\",\"outputs\":[{\"internalType\":\"contract IStrudel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StrudelMediator","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004c36d2919e407f0cc2ee3c993ccf8ac26d9ce64e","EVMVersion":"Default","Library":"","LicenseType":"MPL-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ffe64dd24f32f246f7712352899dde05609dda6b2fc9e73f9abfea74067005ad"}]}