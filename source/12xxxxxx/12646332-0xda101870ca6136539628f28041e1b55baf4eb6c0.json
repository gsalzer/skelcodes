{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/airdrop/merkle/compound/importConnector/main.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport { TokenInterface, AccountInterface } from \\\"../../../../common/interfaces.sol\\\";\\nimport { CTokenInterface } from \\\"./interfaces.sol\\\";\\nimport { Helpers } from \\\"./helpers.sol\\\";\\nimport { Events } from \\\"./events.sol\\\";\\nimport { Variables } from \\\"./variables.sol\\\";\\n\\n\\ncontract CompoundResolver is Helpers, Events {\\n    function _borrow(CTokenInterface[] memory ctokenContracts, uint[] memory amts, uint _length) internal {\\n        for (uint i = 0; i < _length; i++) {\\n            if (amts[i] > 0) {\\n                require(ctokenContracts[i].borrow(amts[i]) == 0, \\\"borrow-failed-collateral?\\\");\\n            }\\n        }\\n    }\\n\\n    function _paybackOnBehalf(\\n        address userAddress,\\n        CTokenInterface[] memory ctokenContracts,\\n        uint[] memory amts,\\n        uint _length\\n    ) internal {\\n        for (uint i = 0; i < _length; i++) {\\n            if (amts[i] > 0) {\\n                if (address(ctokenContracts[i]) == address(ceth)) {\\n                    ceth.repayBorrowBehalf{value: amts[i]}(userAddress);\\n                } else {\\n                    require(ctokenContracts[i].repayBorrowBehalf(userAddress, amts[i]) == 0, \\\"repayOnBehalf-failed\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function _transferCtokens(\\n        address userAccount,\\n        CTokenInterface[] memory ctokenContracts,\\n        uint[] memory amts,\\n        uint _length\\n    ) internal {\\n        for (uint i = 0; i < _length; i++) {\\n            if (amts[i] > 0) {\\n                // console.log(\\\"_transferCtokens\\\", ctokenContracts[i].allowance(userAccount, address(this)), amts[i], ctokenContracts[i].balanceOf(userAccount));\\n                require(ctokenContracts[i].transferFrom(userAccount, address(this), amts[i]), \\\"ctoken-transfer-failed-allowance?\\\");\\n            }\\n        }\\n    }\\n}\\n\\ncontract CompoundHelpers is CompoundResolver, Variables {\\n    constructor(address _instaCompoundMerkle) Variables(_instaCompoundMerkle) {}\\n    struct ImportData {\\n        uint[] supplyAmts;\\n        uint[] borrowAmts;\\n        uint[] supplySplitAmts;\\n        uint[] borrowSplitAmts;\\n        uint[] supplyFinalAmts;\\n        uint[] borrowFinalAmts;\\n        address[] ctokens;\\n        CTokenInterface[] supplyCtokens;\\n        CTokenInterface[] borrowCtokens;\\n        address[] supplyCtokensAddr;\\n        address[] borrowCtokensAddr;\\n    }\\n\\n    struct ImportInputData {\\n        uint256 index;\\n        address userAccount;\\n        string[] supplyIds;\\n        string[] borrowIds;\\n        uint256 times;\\n        bool isFlash;\\n        uint256 rewardAmount;\\n        uint256 networthAmount;\\n        bytes32[] merkleProof;\\n    }\\n\\n    function getBorrowAmounts (\\n        ImportInputData memory importInputData,\\n        ImportData memory data\\n    ) internal returns(ImportData memory) {\\n        if (importInputData.borrowIds.length > 0) {\\n            data.borrowAmts = new uint[](importInputData.borrowIds.length);\\n            data.borrowCtokens = new CTokenInterface[](importInputData.borrowIds.length);\\n            data.borrowSplitAmts = new uint[](importInputData.borrowIds.length);\\n            data.borrowFinalAmts = new uint[](importInputData.borrowIds.length);\\n            data.borrowCtokensAddr = new address[](importInputData.borrowIds.length);\\n\\n            for (uint i = 0; i < importInputData.borrowIds.length; i++) {\\n                bytes32 i_hash = keccak256(abi.encode(importInputData.borrowIds[i]));\\n                for (uint j = i; j < importInputData.borrowIds.length; j++) {\\n                    bytes32 j_hash = keccak256(abi.encode(importInputData.borrowIds[j]));\\n                    if (j != i) {\\n                        require(i_hash != j_hash, \\\"token-repeated\\\");\\n                    }\\n                }\\n            }\\n\\n            if (importInputData.times > 0) {\\n                for (uint i = 0; i < importInputData.borrowIds.length; i++) {\\n                    (address _token, address _ctoken) = compMapping.getMapping(importInputData.borrowIds[i]);\\n                    require(_token != address(0) && _ctoken != address(0), \\\"ctoken mapping not found\\\");\\n\\n                    data.ctokens[i] = _ctoken;\\n\\n                    data.borrowCtokens[i] = CTokenInterface(_ctoken);\\n                    data.borrowCtokensAddr[i] = (_ctoken);\\n                    data.borrowAmts[i] = data.borrowCtokens[i].borrowBalanceCurrent(importInputData.userAccount);\\n\\n                    if (_token != ethAddr && data.borrowAmts[i] > 0) {\\n                        TokenInterface(_token).approve(_ctoken, data.borrowAmts[i]);\\n                    }\\n\\n                    if (importInputData.times == 1) {\\n                        data.borrowFinalAmts = data.borrowAmts;\\n                    } else {\\n                        for (uint256 j = 0; j < data.borrowAmts.length; j++) {\\n                            data.borrowSplitAmts[j] = data.borrowAmts[j] / importInputData.times;\\n                            data.borrowFinalAmts[j] = sub(data.borrowAmts[j], mul(data.borrowSplitAmts[j], sub(importInputData.times, 1)));\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        return data;\\n    }\\n    \\n    function getSupplyAmounts (\\n        ImportInputData memory importInputData,\\n        ImportData memory data\\n    ) internal view returns(ImportData memory) {\\n        data.supplyAmts = new uint[](importInputData.supplyIds.length);\\n        data.supplyCtokens = new CTokenInterface[](importInputData.supplyIds.length);\\n        data.supplySplitAmts = new uint[](importInputData.supplyIds.length);\\n        data.supplyFinalAmts = new uint[](importInputData.supplyIds.length);\\n        data.supplyCtokensAddr = new address[](importInputData.supplyIds.length);\\n\\n        for (uint i = 0; i < importInputData.supplyIds.length; i++) {\\n            bytes32 i_hash = keccak256(abi.encode(importInputData.supplyIds[i]));\\n            for (uint j = i; j < importInputData.supplyIds.length; j++) {\\n                bytes32 j_hash = keccak256(abi.encode(importInputData.supplyIds[j]));\\n                if (j != i) {\\n                    require(i_hash != j_hash, \\\"token-repeated\\\");\\n                }\\n            }\\n        }\\n\\n        for (uint i = 0; i < importInputData.supplyIds.length; i++) {\\n            (address _token, address _ctoken) = compMapping.getMapping(importInputData.supplyIds[i]);\\n            require(_token != address(0) && _ctoken != address(0), \\\"ctoken mapping not found\\\");\\n\\n            uint _supplyIndex = add(i, importInputData.borrowIds.length);\\n\\n            data.ctokens[_supplyIndex] = _ctoken;\\n\\n            data.supplyCtokens[i] = CTokenInterface(_ctoken);\\n            data.supplyCtokensAddr[i] = (_ctoken);\\n            data.supplyAmts[i] = data.supplyCtokens[i].balanceOf(importInputData.userAccount);\\n\\n            if ((importInputData.times == 1 && importInputData.isFlash) || importInputData.times == 0) {\\n                data.supplyFinalAmts = data.supplyAmts;\\n            } else {\\n                for (uint j = 0; j < data.supplyAmts.length; j++) {\\n                    uint _times = importInputData.isFlash ? importInputData.times : importInputData.times + 1;\\n                    data.supplySplitAmts[j] = data.supplyAmts[j] / _times;\\n                    data.supplyFinalAmts[j] = sub(data.supplyAmts[j], mul(data.supplySplitAmts[j], sub(_times, 1)));\\n                }\\n\\n            }\\n        }\\n        return data;\\n    }\\n\\n}\\n\\ncontract CompoundImportResolver is CompoundHelpers {\\n    constructor(address _instaCompoundMerkle) CompoundHelpers(_instaCompoundMerkle) {}\\n\\n    function _importCompound(\\n        ImportInputData memory importInputData\\n    ) internal returns (string memory _eventName, bytes memory _eventParam) {\\n        require(AccountInterface(address(this)).isAuth(importInputData.userAccount), \\\"user-account-not-auth\\\");\\n\\n        require(importInputData.supplyIds.length > 0, \\\"0-length-not-allowed\\\");\\n\\n        ImportData memory data;\\n\\n        uint _length = add(importInputData.supplyIds.length, importInputData.borrowIds.length);\\n        data.ctokens = new address[](_length);\\n    \\n        data = getBorrowAmounts(importInputData, data);\\n        data = getSupplyAmounts(importInputData, data);\\n\\n        enterMarkets(data.ctokens);\\n\\n        if (!importInputData.isFlash && importInputData.times > 0) {\\n            _transferCtokens(importInputData.userAccount, data.supplyCtokens, data.supplySplitAmts, importInputData.supplyIds.length);\\n        } else if (importInputData.times == 0) {\\n            _transferCtokens(importInputData.userAccount, data.supplyCtokens, data.supplyFinalAmts, importInputData.supplyIds.length);\\n        }\\n        \\n        for (uint i = 0; i < importInputData.times; i++) {\\n            if (i == sub(importInputData.times, 1)) {\\n                _borrow(data.borrowCtokens, data.borrowFinalAmts, importInputData.borrowIds.length);\\n                _paybackOnBehalf(importInputData.userAccount, data.borrowCtokens, data.borrowFinalAmts, importInputData.borrowIds.length);\\n                _transferCtokens(importInputData.userAccount, data.supplyCtokens, data.supplyFinalAmts, importInputData.supplyIds.length);\\n            } else {\\n                _borrow(data.borrowCtokens, data.borrowSplitAmts, importInputData.borrowIds.length);\\n                _paybackOnBehalf(importInputData.userAccount, data.borrowCtokens, data.borrowSplitAmts, importInputData.borrowIds.length);\\n                _transferCtokens(importInputData.userAccount, data.supplyCtokens, data.supplySplitAmts, importInputData.supplyIds.length);\\n            }\\n        }\\n\\n        if (importInputData.index != 0) {\\n            instaCompoundMerkle.claim(\\n                importInputData.index,\\n                importInputData.userAccount,\\n                importInputData.rewardAmount,\\n                importInputData.networthAmount,\\n                importInputData.merkleProof,\\n                data.supplyCtokensAddr,\\n                data.borrowCtokensAddr,\\n                data.supplyAmts,\\n                data.borrowAmts\\n            );\\n        }\\n\\n        _eventName = \\\"LogCompoundImport(address,address[],string[],string[],uint256[],uint256[])\\\";\\n        _eventParam = abi.encode(\\n            importInputData.userAccount,\\n            data.ctokens,\\n            importInputData.supplyIds,\\n            importInputData.borrowIds,\\n            data.supplyAmts,\\n            data.borrowAmts\\n        );\\n    }\\n\\n    function importCompound(\\n        uint256 index,\\n        address userAccount,\\n        string[] memory supplyIds,\\n        string[] memory borrowIds,\\n        uint256 times,\\n        bool isFlash,\\n        uint256 rewardAmount,\\n        uint256 networthAmount,\\n        bytes32[] memory merkleProof\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        ImportInputData memory inputData = ImportInputData({\\n            index: index,\\n            userAccount: userAccount,\\n            supplyIds: supplyIds,\\n            borrowIds: borrowIds,\\n            times: times,\\n            isFlash: isFlash,\\n            rewardAmount: rewardAmount,\\n            networthAmount: networthAmount,\\n            merkleProof: merkleProof\\n        });\\n\\n        (_eventName, _eventParam) = _importCompound(inputData);\\n    }\\n\\n    function migrateCompound(\\n        uint256 index,\\n        string[] memory supplyIds,\\n        string[] memory borrowIds,\\n        uint256 times,\\n        bool isFlash,\\n        uint256 rewardAmount,\\n        uint256 networthAmount,\\n        bytes32[] memory merkleProof\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        ImportInputData memory inputData = ImportInputData({\\n            index: index,\\n            userAccount: msg.sender,\\n            supplyIds: supplyIds,\\n            borrowIds: borrowIds,\\n            times: times,\\n            isFlash: isFlash,\\n            rewardAmount: rewardAmount,\\n            networthAmount: networthAmount,\\n            merkleProof: merkleProof\\n        });\\n\\n        (_eventName, _eventParam) = _importCompound(inputData);\\n    }\\n}\\n\\ncontract ConnectV2CompoundMerkleImport is CompoundImportResolver {\\n    constructor(address _instaCompoundMerkle) public CompoundImportResolver(_instaCompoundMerkle) {}\\n\\n    string public constant name = \\\"Compound-Merkle-Import-v1\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/common/interfaces.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface TokenInterface {\\n    function approve(address, uint256) external;\\n    function transfer(address, uint) external;\\n    function transferFrom(address, address, uint) external;\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n    function balanceOf(address) external view returns (uint);\\n    function decimals() external view returns (uint);\\n}\\n\\ninterface MemoryInterface {\\n    function getUint(uint id) external returns (uint num);\\n    function setUint(uint id, uint val) external;\\n}\\n\\ninterface InstaMapping {\\n    function cTokenMapping(address) external view returns (address);\\n    function gemJoinMapping(bytes32) external view returns (address);\\n}\\n\\ninterface AccountInterface {\\n    function enable(address) external;\\n    function disable(address) external;\\n    function isAuth(address) external view returns (bool);\\n    function cast(\\n        string[] calldata _targets,\\n        bytes[] calldata _datas,\\n        address _origin\\n    ) external payable returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/airdrop/merkle/compound/importConnector/interfaces.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\ninterface TokenInterface {\\n    function balanceOf(address) external view returns (uint);\\n    function allowance(address, address) external view returns (uint);\\n    function approve(address, uint) external;\\n    function transfer(address, uint) external returns (bool);\\n    function transferFrom(address, address, uint) external returns (bool);\\n}\\n\\ninterface CTokenInterface {\\n    function mint(uint mintAmount) external returns (uint);\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint); // For ERC20\\n    function liquidateBorrow(address borrower, uint repayAmount, address cTokenCollateral) external returns (uint);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function exchangeRateCurrent() external returns (uint);\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n    function transferFrom(address, address, uint) external returns (bool);\\n    function allowance(address, address) external view returns (uint);\\n\\n}\\n\\ninterface CETHInterface {\\n    function mint() external payable;\\n    function repayBorrow() external payable;\\n    function repayBorrowBehalf(address borrower) external payable;\\n    function liquidateBorrow(address borrower, address cTokenCollateral) external payable;\\n}\\n\\ninterface ComptrollerInterface {\\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\\n    function exitMarket(address cTokenAddress) external returns (uint);\\n    function getAssetsIn(address account) external view returns (address[] memory);\\n    function getAccountLiquidity(address account) external view returns (uint, uint, uint);\\n}\\n\\ninterface CompoundMappingInterface {\\n    function cTokenMapping(string calldata tokenId) external view returns (address);\\n    function getMapping(string calldata tokenId) external view returns (address, address);\\n}\\n\\ninterface InstaCompoundMerkleInterface {\\n    function claim(\\n        uint256 index,\\n        address account,\\n        uint256 rewardAmount,\\n        uint256 networthAmount,\\n        bytes32[] calldata merkleProof,\\n        address[] memory supplyCtokens,\\n        address[] memory borrowCtokens,\\n        uint256[] memory supplyAmounts,\\n        uint256[] memory borrowAmounts\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/airdrop/merkle/compound/importConnector/helpers.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { DSMath } from \\\"../../../../common/math.sol\\\";\\nimport { Stores } from \\\"../../../../common/stores.sol\\\";\\n\\nimport { ComptrollerInterface, CETHInterface, CompoundMappingInterface } from \\\"./interfaces.sol\\\";\\n\\nabstract contract Helpers is DSMath, Stores {\\n    /**\\n     * @dev CETH Interface\\n     */\\n    CETHInterface constant internal ceth = CETHInterface(0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5);\\n\\n    /**\\n     * @dev Compound Comptroller\\n     */\\n    ComptrollerInterface constant internal troller = ComptrollerInterface(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\\n\\n    /**\\n     * @dev Compound Mapping\\n     */\\n    CompoundMappingInterface internal constant compMapping = CompoundMappingInterface(0xA8F9D4aA7319C54C04404765117ddBf9448E2082); // Update the address\\n\\n    /**\\n     * @dev enter compound market\\n     */\\n    function enterMarkets(address[] memory cErc20) internal {\\n        troller.enterMarkets(cErc20);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/airdrop/merkle/compound/importConnector/events.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ncontract Events {\\n    event LogCompoundImport(\\n        address indexed user,\\n        address[] ctokens,\\n        string[] supplyIds,\\n        string[] borrowIds,\\n        uint[] supplyAmts,\\n        uint[] borrowAmts\\n    );\\n}\"\r\n    },\r\n    \"contracts/airdrop/merkle/compound/importConnector/variables.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { InstaCompoundMerkleInterface } from \\\"./interfaces.sol\\\";\\n\\nabstract contract Variables {\\n    /**\\n     * @dev Insta Compound Merkle\\n     */\\n    InstaCompoundMerkleInterface immutable internal instaCompoundMerkle;\\n\\n    constructor(address _instaCompoundMerkle) {\\n        instaCompoundMerkle = InstaCompoundMerkleInterface(_instaCompoundMerkle);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/math.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract DSMath {\\n  uint constant WAD = 10 ** 18;\\n  uint constant RAY = 10 ** 27;\\n\\n  function add(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(x, y);\\n  }\\n\\n  function sub(uint x, uint y) internal virtual pure returns (uint z) {\\n    z = SafeMath.sub(x, y);\\n  }\\n\\n  function mul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.mul(x, y);\\n  }\\n\\n  function div(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.div(x, y);\\n  }\\n\\n  function wmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\\n  }\\n\\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\\n  }\\n\\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\\n  }\\n\\n  function rmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\\n  }\\n\\n  function toInt(uint x) internal pure returns (int y) {\\n    y = int(x);\\n    require(y >= 0, \\\"int-overflow\\\");\\n  }\\n\\n  function toRad(uint wad) internal pure returns (uint rad) {\\n    rad = mul(wad, 10 ** 27);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/common/stores.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { MemoryInterface, InstaMapping } from \\\"./interfaces.sol\\\";\\n\\n\\nabstract contract Stores {\\n\\n  /**\\n   * @dev Return ethereum address\\n   */\\n  address constant internal ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  /**\\n   * @dev Return Wrapped ETH address\\n   */\\n  address constant internal wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n  /**\\n   * @dev Return memory variable address\\n   */\\n  MemoryInterface constant internal instaMemory = MemoryInterface(0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F);\\n\\n  /**\\n   * @dev Return InstaDApp Mapping Addresses\\n   */\\n  InstaMapping constant internal instaMapping = InstaMapping(0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88);\\n\\n  /**\\n   * @dev Get Uint value from InstaMemory Contract.\\n   */\\n  function getUint(uint getId, uint val) internal returns (uint returnVal) {\\n    returnVal = getId == 0 ? val : instaMemory.getUint(getId);\\n  }\\n\\n  /**\\n  * @dev Set Uint value in InstaMemory Contract.\\n  */\\n  function setUint(uint setId, uint val) virtual internal {\\n    if (setId != 0) instaMemory.setUint(setId, val);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_instaCompoundMerkle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"ctokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"supplyIds\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"borrowIds\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"supplyAmts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"borrowAmts\",\"type\":\"uint256[]\"}],\"name\":\"LogCompoundImport\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAccount\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"supplyIds\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"borrowIds\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFlash\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"networthAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"importCompound\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"supplyIds\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"borrowIds\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFlash\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"networthAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"migrateCompound\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ConnectV2CompoundMerkleImport","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006300080a77ffff563b542978555d121ded05b896","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}