{"status":"1","message":"OK","result":[{"SourceCode":"// File: localhost/contracts/VaultParameters.sol\r\n\r\n// SPDX-License-Identifier: bsl-1.1\r\n\r\n/*\r\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\r\n*/\r\npragma solidity 0.7.6;\r\n\r\n\r\n\r\n/**\r\n * @title Auth\r\n * @dev Manages USDP's system access\r\n **/\r\ncontract Auth {\r\n\r\n    // address of the the contract with vault parameters\r\n    VaultParameters public vaultParameters;\r\n\r\n    constructor(address _parameters) {\r\n        vaultParameters = VaultParameters(_parameters);\r\n    }\r\n\r\n    // ensures tx's sender is a manager\r\n    modifier onlyManager() {\r\n        require(vaultParameters.isManager(msg.sender), \"Unit Protocol: AUTH_FAILED\");\r\n        _;\r\n    }\r\n\r\n    // ensures tx's sender is able to modify the Vault\r\n    modifier hasVaultAccess() {\r\n        require(vaultParameters.canModifyVault(msg.sender), \"Unit Protocol: AUTH_FAILED\");\r\n        _;\r\n    }\r\n\r\n    // ensures tx's sender is the Vault\r\n    modifier onlyVault() {\r\n        require(msg.sender == vaultParameters.vault(), \"Unit Protocol: AUTH_FAILED\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title VaultParameters\r\n **/\r\ncontract VaultParameters is Auth {\r\n\r\n    // map token to stability fee percentage; 3 decimals\r\n    mapping(address => uint) public stabilityFee;\r\n\r\n    // map token to liquidation fee percentage, 0 decimals\r\n    mapping(address => uint) public liquidationFee;\r\n\r\n    // map token to USDP mint limit\r\n    mapping(address => uint) public tokenDebtLimit;\r\n\r\n    // permissions to modify the Vault\r\n    mapping(address => bool) public canModifyVault;\r\n\r\n    // managers\r\n    mapping(address => bool) public isManager;\r\n\r\n    // enabled oracle types\r\n    mapping(uint => mapping (address => bool)) public isOracleTypeEnabled;\r\n\r\n    // address of the Vault\r\n    address payable public vault;\r\n\r\n    // The foundation address\r\n    address public foundation;\r\n\r\n    /**\r\n     * The address for an Ethereum contract is deterministically computed from the address of its creator (sender)\r\n     * and how many transactions the creator has sent (nonce). The sender and nonce are RLP encoded and then\r\n     * hashed with Keccak-256.\r\n     * Therefore, the Vault address can be pre-computed and passed as an argument before deployment.\r\n    **/\r\n    constructor(address payable _vault, address _foundation) Auth(address(this)) {\r\n        require(_vault != address(0), \"Unit Protocol: ZERO_ADDRESS\");\r\n        require(_foundation != address(0), \"Unit Protocol: ZERO_ADDRESS\");\r\n\r\n        isManager[msg.sender] = true;\r\n        vault = _vault;\r\n        foundation = _foundation;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Grants and revokes manager's status of any address\r\n     * @param who The target address\r\n     * @param permit The permission flag\r\n     **/\r\n    function setManager(address who, bool permit) external onlyManager {\r\n        isManager[who] = permit;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets the foundation address\r\n     * @param newFoundation The new foundation address\r\n     **/\r\n    function setFoundation(address newFoundation) external onlyManager {\r\n        require(newFoundation != address(0), \"Unit Protocol: ZERO_ADDRESS\");\r\n        foundation = newFoundation;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets ability to use token as the main collateral\r\n     * @param asset The address of the main collateral token\r\n     * @param stabilityFeeValue The percentage of the year stability fee (3 decimals)\r\n     * @param liquidationFeeValue The liquidation fee percentage (0 decimals)\r\n     * @param usdpLimit The USDP token issue limit\r\n     * @param oracles The enables oracle types\r\n     **/\r\n    function setCollateral(\r\n        address asset,\r\n        uint stabilityFeeValue,\r\n        uint liquidationFeeValue,\r\n        uint usdpLimit,\r\n        uint[] calldata oracles\r\n    ) external onlyManager {\r\n        setStabilityFee(asset, stabilityFeeValue);\r\n        setLiquidationFee(asset, liquidationFeeValue);\r\n        setTokenDebtLimit(asset, usdpLimit);\r\n        for (uint i=0; i < oracles.length; i++) {\r\n            setOracleType(oracles[i], asset, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets a permission for an address to modify the Vault\r\n     * @param who The target address\r\n     * @param permit The permission flag\r\n     **/\r\n    function setVaultAccess(address who, bool permit) external onlyManager {\r\n        canModifyVault[who] = permit;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets the percentage of the year stability fee for a particular collateral\r\n     * @param asset The address of the main collateral token\r\n     * @param newValue The stability fee percentage (3 decimals)\r\n     **/\r\n    function setStabilityFee(address asset, uint newValue) public onlyManager {\r\n        stabilityFee[asset] = newValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets the percentage of the liquidation fee for a particular collateral\r\n     * @param asset The address of the main collateral token\r\n     * @param newValue The liquidation fee percentage (0 decimals)\r\n     **/\r\n    function setLiquidationFee(address asset, uint newValue) public onlyManager {\r\n        require(newValue <= 100, \"Unit Protocol: VALUE_OUT_OF_RANGE\");\r\n        liquidationFee[asset] = newValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Enables/disables oracle types\r\n     * @param _type The type of the oracle\r\n     * @param asset The address of the main collateral token\r\n     * @param enabled The control flag\r\n     **/\r\n    function setOracleType(uint _type, address asset, bool enabled) public onlyManager {\r\n        isOracleTypeEnabled[_type][asset] = enabled;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets USDP limit for a specific collateral\r\n     * @param asset The address of the main collateral token\r\n     * @param limit The limit number\r\n     **/\r\n    function setTokenDebtLimit(address asset, uint limit) public onlyManager {\r\n        tokenDebtLimit[asset] = limit;\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/oracles/OracleRegistry.sol\r\n\r\n/*\r\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\r\n*/\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\n\r\ncontract OracleRegistry is Auth {\r\n    \r\n    struct Oracle {\r\n        uint oracleType;\r\n        address oracleAddress;\r\n    }\r\n\r\n    uint public maxOracleType;\r\n\r\n    address public immutable WETH;\r\n\r\n    // map asset to oracle type ID\r\n    mapping(address => uint) public oracleTypeByAsset;\r\n\r\n    // map oracle type ID to oracle address\r\n    mapping(uint => address) public oracleByType;\r\n\r\n    // map oracle address to oracle type ID\r\n    mapping(address => uint) public oracleTypeByOracle;\r\n\r\n    // list of keydonix oracleType IDs\r\n    uint[] public keydonixOracleTypes;\r\n\r\n    event AssetOracle(address indexed asset, uint indexed oracleType);\r\n    event OracleType(uint indexed oracleType, address indexed oracle);\r\n    event KeydonixOracleTypes();\r\n\r\n    modifier validAddress(address asset) {\r\n        require(asset != address(0), \"Unit Protocol: ZERO_ADDRESS\");\r\n        _;\r\n    }\r\n\r\n    modifier validType(uint _type) {\r\n        require(_type != 0, \"Unit Protocol: INVALID_TYPE\");\r\n        _;\r\n    }\r\n\r\n    constructor(address vaultParameters, address _weth)\r\n        Auth(vaultParameters)\r\n        validAddress(vaultParameters)\r\n        validAddress(_weth)\r\n    {\r\n        WETH = _weth;\r\n    }\r\n\r\n    function setKeydonixOracleTypes(uint[] calldata _keydonixOracleTypes) public onlyManager {\r\n        for (uint i = 0; i < _keydonixOracleTypes.length; i++) {\r\n            require(_keydonixOracleTypes[i] != 0, \"Unit Protocol: INVALID_TYPE\");\r\n            require(oracleByType[_keydonixOracleTypes[i]] != address(0), \"Unit Protocol: INVALID_ORACLE\");\r\n        }\r\n\r\n        keydonixOracleTypes = _keydonixOracleTypes;\r\n\r\n        emit KeydonixOracleTypes();\r\n    }\r\n\r\n    function setOracle(uint oracleType, address oracle) public\r\n        onlyManager\r\n        validType(oracleType)\r\n        validAddress(oracle)\r\n    {\r\n        if (oracleType > maxOracleType) {\r\n            maxOracleType = oracleType;\r\n        }\r\n\r\n        address oldOracle = oracleByType[oracleType];\r\n        if (oldOracle != address(0)) {\r\n            delete oracleTypeByOracle[oldOracle];\r\n        }\r\n\r\n        uint oldOracleType = oracleTypeByOracle[oracle];\r\n        if (oldOracleType != 0) {\r\n            delete oracleByType[oldOracleType];\r\n        }\r\n\r\n        oracleByType[oracleType] = oracle;\r\n        oracleTypeByOracle[oracle] = oracleType;\r\n\r\n        emit OracleType(oracleType, oracle);\r\n    }\r\n\r\n    function unsetOracle(uint oracleType) public onlyManager validType(oracleType) validAddress(oracleByType[oracleType]) {\r\n        address oracle = oracleByType[oracleType];\r\n        delete oracleByType[oracleType];\r\n        delete oracleTypeByOracle[oracle];\r\n\r\n        emit OracleType(oracleType, address(0));\r\n    }\r\n\r\n    function setOracleTypeForAsset(address asset, uint oracleType) public\r\n        onlyManager\r\n        validAddress(asset)\r\n        validType(oracleType)\r\n        validAddress(oracleByType[oracleType])\r\n    {\r\n        oracleTypeByAsset[asset] = oracleType;\r\n        emit AssetOracle(asset, oracleType);\r\n    }\r\n\r\n    function setOracleTypeForAssets(address[] calldata assets, uint oracleType) public {\r\n        for (uint i = 0; i < assets.length; i++) {\r\n            setOracleTypeForAsset(assets[i], oracleType);\r\n        }\r\n    }\r\n\r\n    function unsetOracleForAsset(address asset) public\r\n        onlyManager\r\n        validAddress(asset)\r\n        validType(oracleTypeByAsset[asset])\r\n    {\r\n        delete oracleTypeByAsset[asset];\r\n        emit AssetOracle(asset, 0);\r\n    }\r\n\r\n    function unsetOracleForAssets(address[] calldata assets) public {\r\n        for (uint i = 0; i < assets.length; i++) {\r\n            unsetOracleForAsset(assets[i]);\r\n        }\r\n    }\r\n\r\n    function getOracles() external view returns (Oracle[] memory foundOracles) {\r\n\r\n        Oracle[] memory allOracles = new Oracle[](maxOracleType);\r\n\r\n        uint actualOraclesCount;\r\n\r\n        for (uint _type = 1; _type <= maxOracleType; ++_type) {\r\n            if (oracleByType[_type] != address(0)) {\r\n                allOracles[actualOraclesCount++] = Oracle(_type, oracleByType[_type]);\r\n            }\r\n        }\r\n\r\n        foundOracles = new Oracle[](actualOraclesCount);\r\n\r\n        for (uint i = 0; i < actualOraclesCount; ++i) {\r\n            foundOracles[i] = allOracles[i];\r\n        }\r\n    }\r\n\r\n    function getKeydonixOracleTypes() external view returns (uint[] memory) {\r\n        return keydonixOracleTypes;\r\n    }\r\n\r\n    function oracleByAsset(address asset) external view returns (address) {\r\n        uint oracleType = oracleTypeByAsset[asset];\r\n        if (oracleType == 0) {\r\n            return address(0);\r\n        }\r\n        return oracleByType[oracleType];\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultParameters\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oracleType\",\"type\":\"uint256\"}],\"name\":\"AssetOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"KeydonixOracleTypes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oracleType\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleType\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKeydonixOracleTypes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracles\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"oracleType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"internalType\":\"struct OracleRegistry.Oracle[]\",\"name\":\"foundOracles\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"keydonixOracleTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxOracleType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"oracleByAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oracleByType\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oracleTypeByAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oracleTypeByOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_keydonixOracleTypes\",\"type\":\"uint256[]\"}],\"name\":\"setKeydonixOracleTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oracleType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"oracleType\",\"type\":\"uint256\"}],\"name\":\"setOracleTypeForAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"oracleType\",\"type\":\"uint256\"}],\"name\":\"setOracleTypeForAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oracleType\",\"type\":\"uint256\"}],\"name\":\"unsetOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"unsetOracleForAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"unsetOracleForAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultParameters\",\"outputs\":[{\"internalType\":\"contract VaultParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OracleRegistry","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b46f8cf42e504efe8bef895f848741daa55e9f1d000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://04a7d62688b9646e903f8111df12062e3d1acf6ebd524f4e2295987ba1f8be82"}]}