{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/Math.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/proxy/Initializable.sol\r\n\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity >=0.4.24 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        return !Address.isContract(address(this));\r\n    }\r\n}\r\n\r\n// File: contracts/governance/Governable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/// @title Governable\r\n/// @dev Governable is contract for governance role. Why don't use an AccessControl? Because the only one member exists\r\ncontract Governable {\r\n\r\n    /// @notice The government address getter\r\n    address public governance;\r\n\r\n    /// @notice Simple contstructor that initialize the governance address\r\n    constructor() public {\r\n        governance = msg.sender;\r\n    }\r\n\r\n    /// @dev Prevents other msg.sender than governance address\r\n    modifier onlyGovernance {\r\n        require(msg.sender == governance, \"!governance\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Setter for governance address\r\n    /// @param _newGovernance New value\r\n    function setGovernance(address _newGovernance) public onlyGovernance {\r\n        governance = _newGovernance;\r\n    }\r\n\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/governance/LPTokenWrapper.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/// @title LPTokenWrapper\r\n/// @notice Used as utility to simplify governance token operations in Governance contract\r\ncontract LPTokenWrapper {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice Wrapped governance token\r\n    IERC20 public governanceToken;\r\n\r\n    /// @notice Current balances\r\n    mapping(address => uint256) private _balances;\r\n\r\n    /// @notice Current total supply\r\n    uint256 private _totalSupply;\r\n\r\n    /// @notice Standard totalSupply method\r\n    function totalSupply() public view returns(uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /// @notice Standard balanceOf method\r\n    /// @param _account User address\r\n    function balanceOf(address _account) public view returns(uint256) {\r\n        return _balances[_account];\r\n    }\r\n\r\n    /// @notice Standard deposit (stake) method\r\n    /// @param _amount Amount governance tokens to stake (deposit)\r\n    function stake(uint256 _amount) public virtual {\r\n        _totalSupply = _totalSupply.add(_amount);\r\n        _balances[msg.sender] = _balances[msg.sender].add(_amount);\r\n        governanceToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n    }\r\n\r\n    /// @notice Standard withdraw method\r\n    /// @param _amount Amount governance tokens to withdraw\r\n    function withdraw(uint256 _amount) public virtual {\r\n        _totalSupply = _totalSupply.sub(_amount);\r\n        _balances[msg.sender] = _balances[msg.sender].sub(_amount);\r\n        governanceToken.transfer(msg.sender, _amount);\r\n    }\r\n\r\n    /// @notice Simple governance setter\r\n    /// @param _newGovernanceToken New value\r\n    function _setGovernanceToken(address _newGovernanceToken) internal {\r\n        governanceToken = IERC20(_newGovernanceToken);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IRewardDistributionRecipient.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\nabstract contract IRewardDistributionRecipient is Ownable {\r\n\r\n    address public rewardDistribution;\r\n\r\n    function notifyRewardAmount(uint256 reward) external virtual;\r\n\r\n    modifier onlyRewardDistribution {\r\n        require(msg.sender == rewardDistribution, \"!rewardDistribution\");\r\n        _;\r\n    }\r\n\r\n    function setRewardDistribution(address _rewardDistribution)\r\n        public\r\n        onlyOwner\r\n    {\r\n        rewardDistribution = _rewardDistribution;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IExecutor.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ninterface IExecutor {\r\n    function execute(uint256 _id, uint256 _for, uint256 _against, uint256 _quorum) external;\r\n}\r\n\r\n// File: contracts/governance/Governance.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Governance\r\n/// @notice\r\n/// @dev\r\ncontract Governance is Governable, IRewardDistributionRecipient, LPTokenWrapper, Initializable {\r\n\r\n    /// @notice The Proposal struct used to represent vote process.\r\n    struct Proposal {\r\n        uint256 id; // Unique ID of the proposal (here Counter lib can be used)\r\n        address proposer; // An address who created the proposal\r\n        mapping(address => uint256) forVotes; // Percentage (in base points) of governance token (votes) of 'for' side\r\n        mapping(address => uint256) againstVotes; // Percentage (in base points) of governance token (votes) of 'against' side\r\n        uint256 totalForVotes; // Total amount of governance token (votes) in side 'for'\r\n        uint256 totalAgainstVotes; // Total amount of governance token (votes) in side 'against'\r\n        uint256 start; // Block start\r\n        uint256 end; // Start + period\r\n        address executor; // Custom contract which can execute changes regarding to voting process end\r\n        string hash; // An IPFS hash of the proposal document\r\n        uint256 totalVotesAvailable; // Total amount votes that are not in voting process\r\n        uint256 quorum; // Current quorum (in base points)\r\n        uint256 quorumRequired; // Quorum to end the voting process\r\n        bool open; // Proposal status\r\n    }\r\n\r\n    /// @notice Emits when new proposal is created\r\n    /// @param _id ID of the proposal\r\n    /// @param _creator Address of proposal creator\r\n    /// @param _start Voting process start timestamp\r\n    /// @param _duration Seconds during which the voting process occurs\r\n    /// @param _executor Address of the the executor contract\r\n    event NewProposal(uint256 _id, address _creator, uint256 _start, uint256 _duration, address _executor);\r\n\r\n    /// @notice Emits when someone votes in proposal\r\n    /// @param _id ID of the proposal\r\n    /// @param _voter Voter address\r\n    /// @param _vote 'For' or 'Against' vote type\r\n    /// @param _weight Vote weight in percents (in base points)\r\n    event Vote(uint256 indexed _id, address indexed _voter, bool _vote, uint256 _weight);\r\n\r\n    /// @notice Emits when voting process finished\r\n    /// @param _id ID of the proposal\r\n    /// @param _for 'For' votes percentage in base points\r\n    /// @param _against 'Against' votes percentage in base points\r\n    /// @param _quorumReached Is quorum percents are above or equal to required quorum? (bool)\r\n    event ProposalFinished(uint256 indexed _id, uint256 _for, uint256 _against, bool _quorumReached);\r\n\r\n    /// @notice Emits when voter invoke registration method\r\n    /// @param _voter Voter address\r\n    /// @param _votes Governance tokens number to be placed as votes\r\n    /// @param _totalVotes Total governance token placed as votes for all users\r\n    event RegisterVoter(address _voter, uint256 _votes, uint256 _totalVotes);\r\n\r\n    /// @notice Emits when voter invoke revoke method\r\n    /// @param _voter Voter address\r\n    /// @param _votes Governance tokens number to be removed as votes\r\n    /// @param _totalVotes Total governance token removed as votes for all users\r\n    event RevokeVoter(address _voter, uint256 _votes, uint256 _totalVotes);\r\n\r\n    /// @notice Emits when reward for participation in voting processes is sent to governance contract\r\n    /// @param _reward Amount of staking reward tokens\r\n    event RewardAdded(uint256 _reward);\r\n\r\n    /// @notice Emits when sum of governance token staked to governance contract\r\n    /// @param _user User who stakes\r\n    /// @param _amount Amount of governance token to stake\r\n    event Staked(address indexed _user, uint256 _amount);\r\n\r\n    /// @notice Emits when sum of governance token withdrawn from governance contract\r\n    /// @param _user User who withdraw\r\n    /// @param _amount Amount of governance token to withdraw\r\n    event Withdrawn(address indexed _user, uint256 _amount);\r\n\r\n    /// @notice Emits when reward for participation in voting processes is sent to user.\r\n    /// @param _user Voter who receive rewards\r\n    /// @param _reward Amount of staking reward tokens\r\n    event RewardPaid(address indexed _user, uint256 _reward);\r\n\r\n    /// @notice Period that your sake is locked to keep it for voting\r\n    /// @dev voter => lock period\r\n    mapping(address => uint256) public voteLock;\r\n\r\n    /// @notice Exists to store proposals\r\n    /// @dev id => proposal struct\r\n    mapping(uint256 => Proposal) public proposals;\r\n\r\n    /// @notice Amount of governance tokens staked as votes for each voter\r\n    /// @dev voter => token amount\r\n    mapping(address => uint256) public votes;\r\n\r\n    /// @notice Exists to check if voter registered\r\n    /// @dev user => is voter?\r\n    mapping(address => bool) public voters;\r\n\r\n    /// @notice Exists to keep history of rewards paid\r\n    /// @dev voter => reward paid\r\n    mapping(address => uint256) public userRewardPerTokenPaid;\r\n\r\n    /// @notice Exists to track amounts of reward to be paid\r\n    /// @dev voter => reward to pay\r\n    mapping(address => uint256) public rewards;\r\n\r\n    /// @notice Allow users to claim rewards instantly regardless of any voting process\r\n    /// @dev Link (https://gov.yearn.finance/t/yip-47-release-fee-rewards/6013)\r\n    bool public breaker = false;\r\n\r\n    /// @notice Exists to generate ids for new proposals\r\n    uint256 public proposalCount;\r\n\r\n    /// @notice Voting period in blocks ~ 17280 3 days for 15s/block\r\n    uint256 public period = 17280;\r\n\r\n    /// @notice Vote lock in blocks ~ 17280 3 days for 15s/block\r\n    uint256 public lock = 17280;\r\n\r\n    /// @notice Minimal amount of governance token to allow proposal creation\r\n    uint256 public minimum = 1e18;\r\n\r\n    /// @notice Default quorum required in base points\r\n    uint256 public quorum = 2000;\r\n\r\n    /// @notice Total amount of governance tokens staked\r\n    uint256 public totalVotes;\r\n\r\n    /// @notice Token in which reward for voting will be paid\r\n    IERC20 public rewardsToken;\r\n\r\n    /// @notice Default duration of the voting process in seconds\r\n    uint256 public constant DURATION = 7 days;\r\n\r\n    /// @notice Time period in seconds during which rewards are paid\r\n    uint256 public periodFinish = 0;\r\n\r\n    /// @notice This variable regulates amount of staking reward token to be paid, it depends from period finish. The last claims the lowest reward\r\n    uint256 public rewardRate = 0;\r\n\r\n    /// @notice Amount of staking reward token per governance token staked\r\n    uint256 public rewardPerTokenStored = 0;\r\n\r\n    /// @notice Last time when rewards was added and recalculated\r\n    uint256 public lastUpdateTime;\r\n\r\n    /// @notice Default initialize method for solving migration linearization problem\r\n    /// @dev Called once only by deployer\r\n    /// @param _startId Starting ID (default 0)\r\n    /// @param _rewardsTokenAddress Token in which rewards are paid\r\n    /// @param _governance Governance address\r\n    /// @param _governanceToken Governance token address\r\n    function configure(\r\n            uint256 _startId,\r\n            address _rewardsTokenAddress,\r\n            address _governance,\r\n            address _governanceToken,\r\n            address _rewardDistribution\r\n    ) external initializer {\r\n        proposalCount = _startId;\r\n        rewardsToken = IERC20(_rewardsTokenAddress);\r\n        _setGovernanceToken(_governanceToken);\r\n        setGovernance(_governance);\r\n        setRewardDistribution(_rewardDistribution);\r\n    }\r\n\r\n    /// @dev This methods evacuates given funds to governance address\r\n    /// @param _token Exact token to evacuate\r\n    /// @param _amount Amount of token to evacuate\r\n    function seize(IERC20 _token, uint256 _amount) external onlyGovernance {\r\n        require(_token != rewardsToken, \"!rewardsToken\");\r\n        require(_token != governanceToken, \"!governanceToken\");\r\n        _token.safeTransfer(governance, _amount);\r\n    }\r\n\r\n    /// @notice Usual setter\r\n    /// @param _breaker New value\r\n    function setBreaker(bool _breaker) external onlyGovernance {\r\n        breaker = _breaker;\r\n    }\r\n\r\n    /// @notice Usual setter\r\n    /// @param _quorum New value\r\n    function setQuorum(uint256 _quorum) external onlyGovernance {\r\n        quorum = _quorum;\r\n    }\r\n\r\n    /// @notice Usual setter\r\n    /// @param _minimum New value\r\n    function setMinimum(uint256 _minimum) external onlyGovernance {\r\n        minimum = _minimum;\r\n    }\r\n\r\n    /// @notice Usual setter\r\n    /// @param _period New value\r\n    function setPeriod(uint256 _period) external onlyGovernance {\r\n        period = _period;\r\n    }\r\n\r\n    /// @notice Usual setter\r\n    /// @param _lock New value\r\n    function setLock(uint256 _lock) external onlyGovernance {\r\n        lock = _lock;\r\n    }\r\n\r\n    /// @notice Allows msg.sender exit from the whole governance process and withdraw all his rewards and governance tokens\r\n    function exit() external {\r\n        withdraw(balanceOf(_msgSender()));\r\n        getReward();\r\n    }\r\n\r\n    /// @notice Adds to governance contract staking reward tokens to be sent to vote process participants.\r\n    /// @param _reward Amount of staking rewards token in wei\r\n    function notifyRewardAmount(uint256 _reward)\r\n        external\r\n        onlyRewardDistribution\r\n        override\r\n        updateReward(address(0))\r\n    {\r\n        IERC20(rewardsToken).safeTransferFrom(_msgSender(), address(this), _reward);\r\n        if (block.timestamp >= periodFinish) {\r\n            rewardRate = _reward.div(DURATION);\r\n        } else {\r\n            uint256 remaining = periodFinish.sub(block.timestamp);\r\n            uint256 leftover = remaining.mul(rewardRate);\r\n            rewardRate = _reward.add(leftover).div(DURATION);\r\n        }\r\n        lastUpdateTime = block.timestamp;\r\n        periodFinish = block.timestamp.add(DURATION);\r\n        emit RewardAdded(_reward);\r\n    }\r\n\r\n    /// @notice Creates a proposal to vote\r\n    /// @param _executor Executor contract address\r\n    /// @param _hash IPFS hash of the proposal document\r\n    function propose(address _executor, string memory _hash) public {\r\n        require(votesOf(_msgSender()) > minimum, \"<minimum\");\r\n        proposals[proposalCount] = Proposal({\r\n            id: proposalCount,\r\n            proposer: _msgSender(),\r\n            totalForVotes: 0,\r\n            totalAgainstVotes: 0,\r\n            start: block.number,\r\n            end: period.add(block.number),\r\n            executor: _executor,\r\n            hash: _hash,\r\n            totalVotesAvailable: totalVotes,\r\n            quorum: 0,\r\n            quorumRequired: quorum,\r\n            open: true\r\n        });\r\n        emit NewProposal(\r\n            proposalCount,\r\n            _msgSender(),\r\n            block.number,\r\n            period,\r\n            _executor\r\n        );\r\n        proposalCount++;\r\n        voteLock[_msgSender()] = lock.add(block.number);\r\n    }\r\n\r\n    /// @notice Called by third party to execute the proposal conditions\r\n    /// @param _id ID of the proposal\r\n    function execute(uint256 _id) public {\r\n        (uint256 _for, uint256 _against, uint256 _quorum) = getStats(_id);\r\n        require(proposals[_id].quorumRequired < _quorum, \"!quorum\");\r\n        require(proposals[_id].end < block.number , \"!end\");\r\n        if (proposals[_id].open) {\r\n            tallyVotes(_id);\r\n        }\r\n        IExecutor(proposals[_id].executor).execute(_id, _for, _against, _quorum);\r\n    }\r\n\r\n    /// @notice Called by anyone to obtain the voting process statistics for specific proposal\r\n    /// @param _id ID of the proposal\r\n    /// @return _for 'For' percentage in base points\r\n    /// @return _against 'Against' percentage in base points\r\n    /// @return _quorum Current quorum percentage in base points\r\n    function getStats(uint256 _id)\r\n        public\r\n        view\r\n        returns(\r\n            uint256 _for,\r\n            uint256 _against,\r\n            uint256 _quorum\r\n        )\r\n    {\r\n        _for = proposals[_id].totalForVotes;\r\n        _against = proposals[_id].totalAgainstVotes;\r\n        uint256 _total = _for.add(_against);\r\n        if (_total == 0) {\r\n          _quorum = 0;\r\n        } else {\r\n          _for = _for.mul(10000).div(_total);\r\n          _against = _against.mul(10000).div(_total);\r\n          _quorum = _total.mul(10000).div(proposals[_id].totalVotesAvailable);\r\n        }\r\n    }\r\n\r\n    /// @notice Synonimus name countVotes, called to stop voting process\r\n    /// @param _id ID of the proposal to be closed\r\n    function tallyVotes(uint256 _id) public {\r\n        require(proposals[_id].open, \"!open\");\r\n        require(proposals[_id].end < block.number, \"!end\");\r\n        (uint256 _for, uint256 _against,) = getStats(_id);\r\n        proposals[_id].open = false;\r\n        emit ProposalFinished(\r\n            _id,\r\n            _for,\r\n            _against,\r\n            proposals[_id].quorum >= proposals[_id].quorumRequired\r\n        );\r\n    }\r\n\r\n    /// @notice Called to obtain votes count for specific voter\r\n    /// @param _voter To whom votes related\r\n    /// @return Governance token staked to governance contract as votes\r\n    function votesOf(address _voter) public view returns(uint256) {\r\n        return votes[_voter];\r\n    }\r\n\r\n    /// @notice Registers new user as voter and adds his votes\r\n    function register() public {\r\n        require(!voters[_msgSender()], \"voter\");\r\n        voters[_msgSender()] = true;\r\n        votes[_msgSender()] = balanceOf(_msgSender());\r\n        totalVotes = totalVotes.add(votes[_msgSender()]);\r\n        emit RegisterVoter(_msgSender(), votes[_msgSender()], totalVotes);\r\n    }\r\n\r\n    /// @notice Nullify (revoke) all the votes staked by msg.sender\r\n    function revoke() public {\r\n        require(voters[_msgSender()], \"!voter\");\r\n        voters[_msgSender()] = false;\r\n\r\n        /// @notice Edge case dealt with in openzeppelin trySub methods.\r\n        /// The case should be impossible, but this is defi.\r\n        (,totalVotes) = totalVotes.trySub(votes[_msgSender()]);\r\n\r\n        emit RevokeVoter(_msgSender(), votes[_msgSender()], totalVotes);\r\n        votes[_msgSender()] = 0;\r\n    }\r\n\r\n    /// @notice Allow registered voter to vote 'for' proposal\r\n    /// @param _id Proposal id\r\n    function voteFor(uint256 _id) public {\r\n        require(proposals[_id].start < block.number, \"<start\");\r\n        require(proposals[_id].end > block.number, \">end\");\r\n\r\n        uint256 _against = proposals[_id].againstVotes[_msgSender()];\r\n        if (_against > 0) {\r\n            proposals[_id].totalAgainstVotes = proposals[_id].totalAgainstVotes.sub(_against);\r\n            proposals[_id].againstVotes[_msgSender()] = 0;\r\n        }\r\n\r\n        uint256 vote = votesOf(_msgSender()).sub(proposals[_id].forVotes[_msgSender()]);\r\n        proposals[_id].totalForVotes = proposals[_id].totalForVotes.add(vote);\r\n        proposals[_id].forVotes[_msgSender()] = votesOf(_msgSender());\r\n\r\n        proposals[_id].totalVotesAvailable = totalVotes;\r\n        uint256 _votes = proposals[_id].totalForVotes.add(proposals[_id].totalAgainstVotes);\r\n        proposals[_id].quorum = _votes.mul(10000).div(totalVotes);\r\n\r\n        voteLock[_msgSender()] = lock.add(block.number);\r\n\r\n        emit Vote(_id, _msgSender(), true, vote);\r\n    }\r\n\r\n    /// @notice Allow registered voter to vote 'against' proposal\r\n    /// @param _id Proposal id\r\n    function voteAgainst(uint256 _id) public {\r\n        require(proposals[_id].start < block.number, \"<start\");\r\n        require(proposals[_id].end > block.number, \">end\");\r\n\r\n        uint256 _for = proposals[_id].forVotes[_msgSender()];\r\n        if (_for > 0) {\r\n            proposals[_id].totalForVotes = proposals[_id].totalForVotes.sub(_for);\r\n            proposals[_id].forVotes[_msgSender()] = 0;\r\n        }\r\n\r\n        uint256 vote = votesOf(_msgSender()).sub(proposals[_id].againstVotes[_msgSender()]);\r\n        proposals[_id].totalAgainstVotes = proposals[_id].totalAgainstVotes.add(vote);\r\n        proposals[_id].againstVotes[_msgSender()] = votesOf(_msgSender());\r\n\r\n        proposals[_id].totalVotesAvailable = totalVotes;\r\n        uint256 _votes = proposals[_id].totalForVotes.add(proposals[_id].totalAgainstVotes);\r\n        proposals[_id].quorum = _votes.mul(10000).div(totalVotes);\r\n\r\n        voteLock[_msgSender()] = lock.add(block.number);\r\n\r\n        emit Vote(_id, _msgSender(), false, vote);\r\n    }\r\n\r\n    /// @dev Modifier to update stats when reward either sent to governance contract or to voter\r\n    modifier updateReward(address _account) {\r\n        rewardPerTokenStored = rewardPerToken();\r\n        lastUpdateTime = lastTimeRewardApplicable();\r\n        if (_account != address(0)) {\r\n            rewards[_account] = earned(_account);\r\n            userRewardPerTokenPaid[_account] = rewardPerTokenStored;\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @notice Dynamic finish time getter\r\n    /// @return Recalculated time when voting process needs to be finished\r\n    function lastTimeRewardApplicable() public view returns(uint256) {\r\n        return Math.min(block.timestamp, periodFinish);\r\n    }\r\n\r\n    /// @notice Dynamic reward per token amount getter\r\n    /// @return Recalculated amount of staking reward tokens per governance token\r\n    function rewardPerToken() public view returns(uint256) {\r\n        if (totalSupply() == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n        return\r\n            rewardPerTokenStored.add(\r\n                lastTimeRewardApplicable()\r\n                    .sub(lastUpdateTime)\r\n                    .mul(rewardRate)\r\n                    .mul(1e18)\r\n                    .div(totalSupply())\r\n            );\r\n    }\r\n\r\n    /// @notice Calculate the size of reward for voter\r\n    /// @param _account Voter address\r\n    /// @return Amount of exact staking reward tokens to be paid\r\n    function earned(address _account) public view returns(uint256) {\r\n        return\r\n            balanceOf(_account)\r\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[_account]))\r\n                .div(1e18)\r\n                .add(rewards[_account]);\r\n    }\r\n\r\n    /// @notice Allow to add new governance tokens to voter weight, simultaneosly it recalculates reward size according to new weight\r\n    /// @param _amount Amount of governance token to stake\r\n    function stake(uint256 _amount) public override updateReward(_msgSender()) {\r\n        require(_amount > 0, \"!stake 0\");\r\n        if (voters[_msgSender()]) {\r\n            votes[_msgSender()] = votes[_msgSender()].add(_amount);\r\n            totalVotes = totalVotes.add(_amount);\r\n        }\r\n        super.stake(_amount);\r\n        emit Staked(_msgSender(), _amount);\r\n    }\r\n\r\n\r\n    /// @notice Allow to remove old governance tokens from voter weight, simultaneosly it recalculates reward size according to new weight\r\n    /// @param _amount Amount of governance token to withdraw\r\n    function withdraw(uint256 _amount) public override updateReward(_msgSender()) {\r\n        require(_amount > 0, \"!withdraw 0\");\r\n        if (voters[_msgSender()]) {\r\n            votes[_msgSender()] = votes[_msgSender()].sub(_amount);\r\n            totalVotes = totalVotes.sub(_amount);\r\n        }\r\n        if (!breaker) {\r\n            require(voteLock[_msgSender()] < block.number, \"!locked\");\r\n        }\r\n        super.withdraw(_amount);\r\n        emit Withdrawn(_msgSender(), _amount);\r\n    }\r\n\r\n    /// @notice Transfer staking reward tokens to voter (msg.sender), simultaneosly it recalculates reward size according to new weight and rewards remaining\r\n    function getReward() public updateReward(_msgSender()) {\r\n        if (!breaker) {\r\n            require(voteLock[_msgSender()] > block.number, \"!voted\");\r\n        }\r\n        uint256 reward = earned(_msgSender());\r\n        if (reward > 0) {\r\n            rewards[_msgSender()] = 0;\r\n            rewardsToken.transfer(_msgSender(), reward);\r\n            emit RewardPaid(_msgSender(), reward);\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"NewProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_for\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_against\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_quorumReached\",\"type\":\"bool\"}],\"name\":\"ProposalFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_votes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalVotes\",\"type\":\"uint256\"}],\"name\":\"RegisterVoter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_votes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalVotes\",\"type\":\"uint256\"}],\"name\":\"RevokeVoter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_vote\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"breaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardsTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governanceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardDistribution\",\"type\":\"address\"}],\"name\":\"configure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_for\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_against\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quorum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalForVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAgainstVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalVotesAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorumRequired\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_breaker\",\"type\":\"bool\"}],\"name\":\"setBreaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lock\",\"type\":\"uint256\"}],\"name\":\"setLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimum\",\"type\":\"uint256\"}],\"name\":\"setMinimum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quorum\",\"type\":\"uint256\"}],\"name\":\"setQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardDistribution\",\"type\":\"address\"}],\"name\":\"setRewardDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"tallyVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"voteAgainst\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"voteFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voteLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"votesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Governance","CompilerVersion":"v0.6.3+commit.8dda9521","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://00fd2042cb22466aa1776717d6a4ed5c53f702a6d8860927f6d1877b868580c7"}]}