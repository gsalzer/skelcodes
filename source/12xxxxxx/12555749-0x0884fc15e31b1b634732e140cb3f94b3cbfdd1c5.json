{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * Crypto stamp Bridge Data\r\n * Holding all data that is used across the bridge and connected contracts\r\n *\r\n * Developed by Capacity Blockchain Solutions GmbH <capacity.at>\r\n * for Ã–sterreichische Post AG <post.at>\r\n *\r\n * Any usage of or interaction with this set of contracts is subject to the\r\n * Terms & Conditions available at https://crypto.post.at/\r\n */\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n// File: contracts/ENSReverseRegistrarI.sol\r\n\r\n/*\r\n * Interfaces for ENS Reverse Registrar\r\n * See https://github.com/ensdomains/ens/blob/master/contracts/ReverseRegistrar.sol for full impl\r\n * Also see https://github.com/wealdtech/wealdtech-solidity/blob/master/contracts/ens/ENSReverseRegister.sol\r\n *\r\n * Use this as follows (registryAddress is the address of the ENS registry to use):\r\n * -----\r\n * // This hex value is caclulated by namehash('addr.reverse')\r\n * bytes32 public constant ENS_ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\r\n * function registerReverseENS(address registryAddress, string memory calldata) external {\r\n *     require(registryAddress != address(0), \"need a valid registry\");\r\n *     address reverseRegistrarAddress = ENSRegistryOwnerI(registryAddress).owner(ENS_ADDR_REVERSE_NODE)\r\n *     require(reverseRegistrarAddress != address(0), \"need a valid reverse registrar\");\r\n *     ENSReverseRegistrarI(reverseRegistrarAddress).setName(name);\r\n * }\r\n * -----\r\n * or\r\n * -----\r\n * function registerReverseENS(address reverseRegistrarAddress, string memory calldata) external {\r\n *    require(reverseRegistrarAddress != address(0), \"need a valid reverse registrar\");\r\n *     ENSReverseRegistrarI(reverseRegistrarAddress).setName(name);\r\n * }\r\n * -----\r\n * ENS deployments can be found at https://docs.ens.domains/ens-deployments\r\n * E.g. Etherscan can be used to look up that owner on those contracts.\r\n * namehash.hash(\"addr.reverse\") == \"0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2\"\r\n * Ropsten: ens.owner(namehash.hash(\"addr.reverse\")) == \"0x6F628b68b30Dc3c17f345c9dbBb1E483c2b7aE5c\"\r\n * Mainnet: ens.owner(namehash.hash(\"addr.reverse\")) == \"0x084b1c3C81545d370f3634392De611CaaBFf8148\"\r\n */\r\n\r\ninterface ENSRegistryOwnerI {\r\n    function owner(bytes32 node) external view returns (address);\r\n}\r\n\r\ninterface ENSReverseRegistrarI {\r\n    event NameChanged(bytes32 indexed node, string name);\r\n    /**\r\n     * @dev Sets the `name()` record for the reverse ENS record associated with\r\n     * the calling account.\r\n     * @param name The name to set for this address.\r\n     * @return The ENS node hash of the reverse record.\r\n     */\r\n    function setName(string calldata name) external returns (bytes32);\r\n}\r\n\r\n// File: contracts/BridgeDataI.sol\r\n\r\n/*\r\n * Interface for data storage of the bridge.\r\n */\r\n\r\ninterface BridgeDataI {\r\n\r\n    event AddressChanged(string name, address previousAddress, address newAddress);\r\n    event ConnectedChainChanged(string previousConnectedChainName, string newConnectedChainName);\r\n    event TokenURIBaseChanged(string previousTokenURIBase, string newTokenURIBase);\r\n    event TokenSunsetAnnounced(uint256 indexed timestamp);\r\n\r\n    /**\r\n     * @dev The name of the chain connected to / on the other side of this bridge head.\r\n     */\r\n    function connectedChainName() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev The name of our own chain, used in token URIs handed to deployed tokens.\r\n     */\r\n    function ownChainName() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev The base of ALL token URIs, e.g. https://example.com/\r\n     */\r\n    function tokenURIBase() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev The sunset timestamp for all deployed tokens.\r\n     * If 0, no sunset is in place. Otherwise, if older than block timestamp,\r\n     * all transfers of the tokens are frozen.\r\n     */\r\n    function tokenSunsetTimestamp() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Set a token sunset timestamp.\r\n     */\r\n    function setTokenSunsetTimestamp(uint256 _timestamp) external;\r\n\r\n    /**\r\n     * @dev Set an address for a name.\r\n     */\r\n    function setAddress(string memory name, address newAddress) external;\r\n\r\n    /**\r\n     * @dev Get an address for a name.\r\n     */\r\n    function getAddress(string memory name) external view returns (address);\r\n}\r\n\r\n// File: contracts/BridgeData.sol\r\n\r\n/*\r\n * Implements a data storage for the bridge.\r\n * Mostly used to storage addresses for various contracts in a common place\r\n * that all contracts can access, but also some other data commonly shared\r\n * between bridge-related contracts.\r\n * Liberally based on Optimistic Ethereum Lib_AddressManager.sol\r\n */\r\n\r\n\r\n\r\n\r\n\r\ncontract BridgeData is BridgeDataI {\r\n    // Chain names\r\n    string public override connectedChainName;\r\n    string public override ownChainName;\r\n    // Base for token URIs\r\n    string public override tokenURIBase;\r\n\r\n    // Token sunset\r\n    uint256 public override tokenSunsetTimestamp;\r\n    uint256 public immutable sunsetDelay;\r\n\r\n    // Various addresses, accessed via a name hash.\r\n    mapping (bytes32 => address) private addresses;\r\n\r\n    constructor(string memory _connectedChainName, string memory _ownChainName, string memory _tokenURIBase, uint256 _sunsetDelay, address _tokenAssignmentControl)\r\n    {\r\n        // During the deployment phase, set bridgeControl to deployer,\r\n        // at the end of deployment, switch to actual bridgeControl address.\r\n        _setAddress(\"bridgeControl\", msg.sender);\r\n        _setAddress(\"tokenAssignmentControl\", _tokenAssignmentControl);\r\n        sunsetDelay = _sunsetDelay;\r\n        connectedChainName = _connectedChainName;\r\n        ownChainName = _ownChainName;\r\n        tokenURIBase = _tokenURIBase;\r\n    }\r\n\r\n    modifier onlyBridgeControl()\r\n    {\r\n        require(msg.sender == getAddress(\"bridgeControl\"), \"bridgeControl key required for this function.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyBridge()\r\n    {\r\n        require(msg.sender == getAddress(\"bridgeControl\") || msg.sender == getAddress(\"bridgeHead\"), \"bridgeControl key or bridge head required for this function.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyTokenAssignmentControl() {\r\n        require(msg.sender == getAddress(\"tokenAssignmentControl\"), \"tokenAssignmentControl key required for this function.\");\r\n        _;\r\n    }\r\n\r\n    /*** Enable adjusting variables after deployment ***/\r\n\r\n    function setConnectedChain(string memory _newConnectedChainName)\r\n    external\r\n    onlyBridgeControl\r\n    {\r\n        require(bytes(_newConnectedChainName).length > 0, \"You need to provide an actual chain name string.\");\r\n        emit ConnectedChainChanged(connectedChainName, _newConnectedChainName);\r\n        connectedChainName = _newConnectedChainName;\r\n    }\r\n\r\n    function setTokenURIBase(string memory _newTokenURIBase)\r\n    external\r\n    onlyBridgeControl\r\n    {\r\n        require(bytes(_newTokenURIBase).length > 0, \"You need to provide an actual token URI base string.\");\r\n        emit TokenURIBaseChanged(tokenURIBase, _newTokenURIBase);\r\n        tokenURIBase = _newTokenURIBase;\r\n    }\r\n\r\n    // Set a sunset timestamp for bridged tokens. All transfers will be disabled after that.\r\n    // The timestamp has to be at least a delay duration in the future when not yet set.\r\n    // Once set, it can be pushed to the further future at any rate with no addittive delay.\r\n    // It also can be set to 0 at any point in time, which disables the sunset.\r\n    function setTokenSunsetTimestamp(uint256 _timestamp)\r\n    public override\r\n    onlyBridge\r\n    {\r\n        require(_timestamp == 0 || _timestamp >= block.timestamp + sunsetDelay ||\r\n                (tokenSunsetTimestamp > 0 && _timestamp >= tokenSunsetTimestamp && _timestamp >= block.timestamp),\r\n                \"Sunset needs to be 0 or (enough) in the future.\");\r\n        tokenSunsetTimestamp = _timestamp;\r\n        emit TokenSunsetAnnounced(_timestamp);\r\n    }\r\n\r\n    function setAddress(string memory _name, address _newAddress)\r\n    public override\r\n    onlyBridge\r\n    {\r\n        _setAddress(_name, _newAddress);\r\n    }\r\n\r\n    function _setAddress(string memory _name, address _newAddress)\r\n    internal\r\n    {\r\n        bytes32 nameHash = _getNameHash(_name);\r\n        require(_newAddress != address(0) || nameHash != _getNameHash(\"bridgeControl\"), \"bridgeControl cannot be the zero address.\");\r\n        emit AddressChanged(_name, addresses[nameHash], _newAddress);\r\n        addresses[nameHash] = _newAddress;\r\n    }\r\n\r\n    function getAddress(string memory _name)\r\n    public view override\r\n    returns (address)\r\n    {\r\n        return addresses[_getNameHash(_name)];\r\n    }\r\n\r\n    function _getNameHash(string memory _name)\r\n    internal pure\r\n    returns (bytes32 _hash)\r\n    {\r\n        return keccak256(abi.encodePacked(_name));\r\n    }\r\n\r\n    /*** Enable reverse ENS registration ***/\r\n\r\n    // Call this with the address of the reverse registrar for the respective network and the ENS name to register.\r\n    // The reverse registrar can be found as the owner of 'addr.reverse' in the ENS system.\r\n    // For Mainnet, the address needed is 0x9062c0a6dbd6108336bcbe4593a3d1ce05512069\r\n    function registerReverseENS(address _reverseRegistrarAddress, string calldata _name)\r\n    external\r\n    onlyTokenAssignmentControl\r\n    {\r\n        require(_reverseRegistrarAddress != address(0), \"need a valid reverse registrar\");\r\n        ENSReverseRegistrarI(_reverseRegistrarAddress).setName(_name);\r\n    }\r\n\r\n    /*** Make sure currency or NFT doesn't get stranded in this contract ***/\r\n\r\n    // If this contract gets a balance in some ERC20 contract after it's finished, then we can rescue it.\r\n    function rescueToken(address _foreignToken, address _to)\r\n    external\r\n    onlyTokenAssignmentControl\r\n    {\r\n        IERC20 erc20Token = IERC20(_foreignToken);\r\n        erc20Token.transfer(_to, erc20Token.balanceOf(address(this)));\r\n    }\r\n\r\n    // If this contract gets a balance in some ERC721 contract after it's finished, then we can rescue it.\r\n    function approveNFTrescue(IERC721 _foreignNFT, address _to)\r\n    external\r\n    onlyTokenAssignmentControl\r\n    {\r\n        _foreignNFT.setApprovalForAll(_to, true);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_connectedChainName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_ownChainName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenURIBase\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_sunsetDelay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAssignmentControl\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"previousConnectedChainName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newConnectedChainName\",\"type\":\"string\"}],\"name\":\"ConnectedChainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenSunsetAnnounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"previousTokenURIBase\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newTokenURIBase\",\"type\":\"string\"}],\"name\":\"TokenURIBaseChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_foreignNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"approveNFTrescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectedChainName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownChainName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reverseRegistrarAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"registerReverseENS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_foreignToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newConnectedChainName\",\"type\":\"string\"}],\"name\":\"setConnectedChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"setTokenSunsetTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newTokenURIBase\",\"type\":\"string\"}],\"name\":\"setTokenURIBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sunsetDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSunsetTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenURIBase\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BridgeData","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000278d00000000000000000000000000596e620e175c2c37a5f35a41d9f2305a991ffc89000000000000000000000000000000000000000000000000000000000000000478446169000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008457468657265756d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002068747470733a2f2f63727970746f2e706f73742e61742f657468657265756d2f","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://72027f3dfa9ed0aaa1c1aaa5673b222de04c7e1b0e6a6fa1641946b42d8c21c5"}]}