{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) =\r\n            target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    // function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n    //     unchecked {\r\n    //         uint256 oldAllowance = token.allowance(address(this), spender);\r\n    //         require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n    //         uint256 newAllowance = oldAllowance - value;\r\n    //         _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    //     }\r\n    // }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata =\r\n            address(token).functionCall(\r\n                data,\r\n                \"SafeERC20: low-level call failed\"\r\n            );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    address private _dev;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        _dev = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function dev() public view returns (address) {\r\n        return _dev;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyDev() {\r\n        require(_dev == _msgSender(), \"Ownable: caller is not the dev\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function transferDevship(address newDev) public virtual onlyDev {\r\n        require(newDev != address(0), \"Ownable: new dev is the zero address\");\r\n        _dev = newDev;\r\n    }\r\n}\r\n\r\nlibrary SafeMathUniswap {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n}\r\n\r\nlibrary UniswapV2Library {\r\n    using SafeMathUniswap for uint256;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB)\r\n        internal\r\n        pure\r\n        returns (address token0, address token1)\r\n    {\r\n        require(tokenA != tokenB, \"UniswapV2Library: IDENTICAL_ADDRESSES\");\r\n        (token0, token1) = tokenA < tokenB\r\n            ? (tokenA, tokenB)\r\n            : (tokenB, tokenA);\r\n        require(token0 != address(0), \"UniswapV2Library: ZERO_ADDRESS\");\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB\r\n    ) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(\r\n            uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        hex\"ff\",\r\n                        factory,\r\n                        keccak256(abi.encodePacked(token0, token1)),\r\n                        hex\"e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\" // init code hash\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB\r\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\r\n        (address token0, ) = sortTokens(tokenA, tokenB);\r\n        (uint256 reserve0, uint256 reserve1, ) =\r\n            IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0\r\n            ? (reserve0, reserve1)\r\n            : (reserve1, reserve0);\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) internal pure returns (uint256 amountB) {\r\n        require(amountA > 0, \"UniswapV2Library: INSUFFICIENT_AMOUNT\");\r\n        require(\r\n            reserveA > 0 && reserveB > 0,\r\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) internal pure returns (uint256 amountOut) {\r\n        require(amountIn > 0, \"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\");\r\n        require(\r\n            reserveIn > 0 && reserveOut > 0,\r\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n        uint256 amountInWithFee = amountIn.mul(997);\r\n        uint256 numerator = amountInWithFee.mul(reserveOut);\r\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) internal pure returns (uint256 amountIn) {\r\n        require(amountOut > 0, \"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\");\r\n        require(\r\n            reserveIn > 0 && reserveOut > 0,\r\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function getAmountsOut(\r\n        address factory,\r\n        uint256 amountIn,\r\n        address[] memory path\r\n    ) internal view returns (uint256[] memory amounts) {\r\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\r\n        amounts = new uint256[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint256 i; i < path.length - 1; i++) {\r\n            (uint256 reserveIn, uint256 reserveOut) =\r\n                getReserves(factory, path[i], path[i + 1]);\r\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n    function getAmountsIn(\r\n        address factory,\r\n        uint256 amountOut,\r\n        address[] memory path\r\n    ) internal view returns (uint256[] memory amounts) {\r\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\r\n        amounts = new uint256[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint256 i = path.length - 1; i > 0; i--) {\r\n            (uint256 reserveIn, uint256 reserveOut) =\r\n                getReserves(factory, path[i - 1], path[i]);\r\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n// Token interface\r\ninterface TokenInterface is IERC20 {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256) external;\r\n}\r\n\r\ncontract SwapBot is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using SafeERC20 for TokenInterface;\r\n\r\n    uint256 private _ownerAmount;\r\n    uint256 private _devAmount;\r\n    // States\r\n    uint16 private _devFee;\r\n\r\n    TokenInterface private _weth;\r\n\r\n    address[] public _routers;\r\n    address[] private _runners;\r\n\r\n    struct Root {\r\n        uint8[] routerIds;\r\n        address[] inTokens;\r\n        uint256 startAmount;\r\n    }\r\n\r\n    modifier onlyRunner() {\r\n        (bool exist, ) = checkRunner(_msgSender());\r\n        require(exist, \"caller is not the runner\");\r\n        _;\r\n    }\r\n\r\n    event BadRoots(uint256 startAmount);\r\n    event BadRoot(\r\n        address indexed startToken,\r\n        address indexed endToken,\r\n        uint256 startAmount\r\n    );\r\n    event GoldRoot(\r\n        address indexed startToken,\r\n        address indexed endToken,\r\n        uint256 startAmount\r\n    );\r\n    event TestRun(\r\n        uint8 routerId,\r\n        address inToken,\r\n        address outToken,\r\n        uint256 expectedOutAmount,\r\n        uint256 realAmountOut\r\n    );\r\n\r\n    constructor() {\r\n        _weth = TokenInterface(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n        _routers.push(address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D));\r\n        _routers.push(address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F));\r\n\r\n        _runners.push(_msgSender());\r\n\r\n        _ownerAmount = 0;\r\n        _devAmount = 0;\r\n        _devFee = 3000; // dev fee is 10%, must be divided by 10,000 when calculating\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function routerLength() public view returns (uint8) {\r\n        return uint8(_routers.length);\r\n    }\r\n\r\n    function checkRouter(address routerAddress)\r\n        public\r\n        view\r\n        returns (bool exist, uint8 index)\r\n    {\r\n        uint8 length = routerLength();\r\n        exist = false;\r\n        for (uint8 i = 0; i < length; i++) {\r\n            if (_routers[i] == routerAddress) {\r\n                exist = true;\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function addRouter(address routerAddress) external onlyDev {\r\n        (bool exist, ) = checkRouter(routerAddress);\r\n        require(!exist, \"This router address already exists.\");\r\n        require(routerAddress != address(0), \"Invalid router address.\");\r\n\r\n        _routers.push(address(routerAddress));\r\n    }\r\n\r\n    function setRouter(uint8 index, address routerAddress) external onlyDev {\r\n        uint8 length = routerLength();\r\n        require(index < length, \"Invalid index of router\");\r\n        require(routerAddress != address(0), \"Invalid router address.\");\r\n\r\n        _routers[index] = routerAddress;\r\n    }\r\n\r\n    function removeRouter(address routerAddress) external onlyDev {\r\n        require(routerAddress != address(0), \"Invalid router address.\");\r\n\r\n        uint8 length = routerLength();\r\n        for (uint8 i = 0; i < length; i++) {\r\n            if (_routers[i] == routerAddress) {\r\n                _routers[i] = address(0);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function runnerLength() public view returns (uint8) {\r\n        return uint8(_runners.length);\r\n    }\r\n\r\n    function checkRunner(address runner)\r\n        public\r\n        view\r\n        returns (bool exist, uint8 index)\r\n    {\r\n        uint8 length = runnerLength();\r\n        exist = false;\r\n        for (uint8 i = 0; i < length; i++) {\r\n            if (_runners[i] == runner) {\r\n                exist = true;\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function addRunner(address runner) external onlyDev {\r\n        (bool exist, ) = checkRunner(runner);\r\n        require(!exist, \"This runner address already exists.\");\r\n        require(runner != address(0), \"Invalid runner address.\");\r\n\r\n        _runners.push(address(runner));\r\n    }\r\n\r\n    function setRunner(uint8 index, address runner) external onlyDev {\r\n        uint8 length = runnerLength();\r\n        require(index < length, \"Invalid index of runner\");\r\n        require(runner != address(0), \"Invalid runner address.\");\r\n\r\n        _runners[index] = runner;\r\n    }\r\n\r\n    function removeRunner(address runner) external onlyDev {\r\n        require(runner != address(0), \"Invalid runner address.\");\r\n\r\n        uint8 length = runnerLength();\r\n        for (uint8 i = 0; i < length; i++) {\r\n            if (_runners[i] == runner) {\r\n                _runners[i] = address(0);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getDevFee() public view returns (uint16) {\r\n        return _devFee;\r\n    }\r\n\r\n    function setDevFee(uint16 fee) external onlyOwner {\r\n        _devFee = fee;\r\n    }\r\n\r\n    function ownerProfit() public view returns (uint256) {\r\n        return _ownerAmount;\r\n    }\r\n\r\n    function withdrawProfitOwner(address owner)\r\n        external\r\n        onlyOwner\r\n        returns (bool sent)\r\n    {\r\n        require(_ownerAmount > 0, \"Withdraw amount should be more than zero.\");\r\n\r\n        if (owner != address(0)) {\r\n            (sent, ) = owner.call{value: _ownerAmount}(\"\");\r\n            require(sent, \"Failed to send Ether\");\r\n            _ownerAmount = 0;\r\n        }\r\n    }\r\n\r\n    function devProfit() public view returns (uint256) {\r\n        return _devAmount;\r\n    }\r\n\r\n    function withdrawProfitDev(address dev)\r\n        external\r\n        onlyDev\r\n        returns (bool sent)\r\n    {\r\n        require(_devAmount > 0, \"Withdraw amount should be more than zero.\");\r\n        if (dev != address(0)) {\r\n            (sent, ) = dev.call{value: _devAmount}(\"\");\r\n            require(sent, \"Failed to send Ether\");\r\n            _devAmount = 0;\r\n        }\r\n    }\r\n\r\n    function emergencyWithdraw() external onlyDev {\r\n        require(_msgSender() != address(0), \"Invalid dev\");\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    function removeOddTokens(address[] memory tokens, address to)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(to != address(0), \"Invalid address to send odd tokens\");\r\n        uint256 len = tokens.length;\r\n\r\n        for (uint256 i = 0; i < len; i++) {\r\n            uint256 balance =\r\n                TokenInterface(tokens[i]).balanceOf(address(this));\r\n            if (balance > 0) {\r\n                if (tokens[i] == address(_weth)) {\r\n                    _weth.withdraw(balance);\r\n                    (bool sent, ) = to.call{value: balance}(\"\");\r\n                    require(sent, \"Failed to send ether\");\r\n                } else {\r\n                    TokenInterface(tokens[i]).transfer(to, balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function checkEstimatedProfit(\r\n        uint8[] memory routerIds,\r\n        uint256 startAmount,\r\n        address[] memory inTokens\r\n    ) public view returns (uint256 profit, uint256 endAmount) {\r\n        require(routerIds.length > 1, \"Est: Invalid router id array.\");\r\n        require(inTokens.length > 1, \"Est: Invalid token array.\");\r\n        require(\r\n            routerIds.length + 1 == inTokens.length,\r\n            \"Est: Rotuers and tokens must have same length.\"\r\n        );\r\n\r\n        uint256 len = inTokens.length;\r\n        uint256 amountIn = startAmount;\r\n\r\n        for (uint256 i = 0; i < len - 1; i++) {\r\n            IUniswapV2Router02 router =\r\n                IUniswapV2Router02(_routers[routerIds[i]]);\r\n            IUniswapV2Factory factory = IUniswapV2Factory(router.factory());\r\n\r\n            address inToken = inTokens[i];\r\n            address outToken = inTokens[i + 1];\r\n\r\n            IUniswapV2Pair pair =\r\n                IUniswapV2Pair(factory.getPair(inToken, outToken));\r\n\r\n            amountIn = getAmountOutFor(pair, amountIn, inToken);\r\n        }\r\n\r\n        profit = amountIn <= startAmount ? 0 : amountIn.sub(startAmount);\r\n        endAmount = amountIn;\r\n    }\r\n\r\n    function testCheckEstimatedOutPut(\r\n        uint8 routerId,\r\n        uint256 amountIn,\r\n        address inToken,\r\n        address outToken\r\n    ) public view returns (uint256 outAmount) {\r\n        IUniswapV2Router02 router = IUniswapV2Router02(_routers[routerId]);\r\n        IUniswapV2Factory factory = IUniswapV2Factory(router.factory());\r\n        IUniswapV2Pair pair =\r\n            IUniswapV2Pair(factory.getPair(inToken, outToken));\r\n\r\n        outAmount = getAmountOutFor(pair, amountIn, inToken);\r\n    }\r\n\r\n    function getAmountOutFor(\r\n        IUniswapV2Pair pair,\r\n        uint256 amountIn,\r\n        address inToken\r\n    ) internal view returns (uint256 outAmount) {\r\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\r\n\r\n        if (pair.token0() == inToken) {\r\n            outAmount = UniswapV2Library.getAmountOut(\r\n                amountIn,\r\n                reserve0,\r\n                reserve1\r\n            );\r\n        } else {\r\n            outAmount = UniswapV2Library.getAmountOut(\r\n                amountIn,\r\n                reserve1,\r\n                reserve0\r\n            );\r\n        }\r\n    }\r\n\r\n    function run(\r\n        uint8[] memory routerIds,\r\n        address[] memory inTokens,\r\n        uint256 startAmount\r\n    ) public onlyRunner returns (uint256) {\r\n        TokenInterface startToken = TokenInterface(inTokens[0]);\r\n        uint256 balanceForStartToken;\r\n        uint256 newBalanceForStartToken;\r\n\r\n        if (address(startToken) != address(_weth)) {\r\n            balanceForStartToken = startToken.balanceOf(address(this));\r\n        } else {\r\n            balanceForStartToken = address(this).balance;\r\n        }\r\n\r\n        require(\r\n            balanceForStartToken > 0 && balanceForStartToken >= startAmount,\r\n            \"run: Invalid swap amount\"\r\n        );\r\n\r\n        uint256 len = inTokens.length;\r\n        uint256 amountIn = startAmount;\r\n\r\n        for (uint256 i = 0; i < len - 1; i++) {\r\n            IUniswapV2Router02 iRouter =\r\n                IUniswapV2Router02(_routers[routerIds[i]]);\r\n            address inToken = inTokens[i];\r\n            address outToken = inTokens[i + 1];\r\n\r\n            if (inToken == address(_weth)) {\r\n                amountIn = _swapEthToToken(iRouter, amountIn, outToken);\r\n            } else if (outToken == address(_weth)) {\r\n                amountIn = _swapTokenToEth(iRouter, amountIn, inToken);\r\n            } else {\r\n                amountIn = _swapTokenToToken(\r\n                    iRouter,\r\n                    amountIn,\r\n                    inToken,\r\n                    outToken\r\n                );\r\n            }\r\n        }\r\n\r\n        if (address(startToken) != address(_weth)) {\r\n            newBalanceForStartToken = startToken.balanceOf(address(this));\r\n        } else {\r\n            newBalanceForStartToken = address(this).balance;\r\n        }\r\n\r\n        uint256 profit = newBalanceForStartToken.sub(balanceForStartToken);\r\n\r\n        return profit;\r\n    }\r\n\r\n    function bulkRun(Root[] memory roots)\r\n        external\r\n        onlyRunner\r\n        returns (bool)\r\n    {\r\n        uint256 length = roots.length;\r\n        require(length > 0, \"Invalid root data\");\r\n\r\n        uint256 maxProfit = 0;\r\n        uint256 goalRoot = 0;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            Root memory root = roots[i];\r\n\r\n            (uint256 profit, ) =\r\n                checkEstimatedProfit(\r\n                    root.routerIds,\r\n                    root.startAmount,\r\n                    root.inTokens\r\n                );\r\n\r\n            uint256 len = root.inTokens.length;\r\n\r\n            if (profit > 0) {\r\n                emit GoldRoot(\r\n                    root.inTokens[0],\r\n                    root.inTokens[len - 1],\r\n                    root.startAmount\r\n                );\r\n            } else {\r\n                emit BadRoot(\r\n                    root.inTokens[0],\r\n                    root.inTokens[len - 1],\r\n                    root.startAmount\r\n                );\r\n            }\r\n\r\n            if (profit > maxProfit) {\r\n                maxProfit = profit;\r\n                goalRoot = i;\r\n            }\r\n        }\r\n\r\n        if (maxProfit > 0) {\r\n            Root memory root = roots[goalRoot];\r\n            uint256 len = root.inTokens.length;\r\n            run(root.routerIds, root.inTokens, root.startAmount);\r\n            emit GoldRoot(\r\n                root.inTokens[0],\r\n                root.inTokens[len - 1],\r\n                root.startAmount\r\n            );\r\n        } else {\r\n            emit BadRoots(roots[0].startAmount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function swapEthToToken(\r\n        uint8 routerId,\r\n        uint256 ethAmount,\r\n        address token\r\n    ) external onlyRunner {\r\n        IUniswapV2Router02 iRouter = IUniswapV2Router02(_routers[routerId]);\r\n\r\n        _swapEthToToken(iRouter, ethAmount, token);\r\n    }\r\n\r\n    function swapTokenToETH(\r\n        uint8 routerId,\r\n        uint256 tokenAmount,\r\n        address tokenAddress\r\n    ) external onlyRunner {\r\n        IUniswapV2Router02 iRouter = IUniswapV2Router02(_routers[routerId]);\r\n\r\n        _swapTokenToEth(iRouter, tokenAmount, tokenAddress);\r\n    }\r\n\r\n    function swapTokenToToken(\r\n        uint8 routerId,\r\n        uint256 tokenInAmount,\r\n        address tokenIn,\r\n        address tokenOut\r\n    ) external onlyRunner {\r\n        IUniswapV2Router02 iRouter = IUniswapV2Router02(_routers[routerId]);\r\n\r\n        _swapTokenToToken(iRouter, tokenInAmount, tokenIn, tokenOut);\r\n    }\r\n\r\n    function _swapEthToToken(\r\n        IUniswapV2Router02 router,\r\n        uint256 ethAmount,\r\n        address token\r\n    ) private returns (uint256 amountOut) {\r\n        uint256 oldBalance = TokenInterface(token).balanceOf(address(this));\r\n\r\n        _swapETHForTokenOut(router, ethAmount, token);\r\n\r\n        amountOut = TokenInterface(token).balanceOf(address(this)).sub(\r\n            oldBalance\r\n        );\r\n    }\r\n\r\n    function _swapTokenToEth(\r\n        IUniswapV2Router02 router,\r\n        uint256 tokenAmount,\r\n        address token\r\n    ) private returns (uint256 amountOut) {\r\n        uint256 oldEthAmount = address(this).balance;\r\n\r\n        uint256 oldWEthAmount = _weth.balanceOf(address(this));\r\n        _swapTokenToETHOut(router, tokenAmount, token);\r\n        uint256 newWEthAmount = _weth.balanceOf(address(this));\r\n        _weth.withdraw(newWEthAmount.sub(oldWEthAmount));\r\n\r\n        uint256 newEthAmount = address(this).balance;\r\n        amountOut = newEthAmount.sub(oldEthAmount);\r\n    }\r\n\r\n    function _swapTokenToToken(\r\n        IUniswapV2Router02 router,\r\n        uint256 tokenInAmount,\r\n        address tokenIn,\r\n        address tokenOut\r\n    ) private returns (uint256 amountOut) {\r\n        uint256 oldTokenOutAmount =\r\n            TokenInterface(tokenOut).balanceOf(address(this));\r\n\r\n        _swapTokenForTokenOut(router, tokenInAmount, tokenIn, tokenOut);\r\n\r\n        uint256 newTokenOutAmount =\r\n            TokenInterface(tokenOut).balanceOf(address(this));\r\n        amountOut = newTokenOutAmount.sub(oldTokenOutAmount);\r\n    }\r\n\r\n    function _swapSupportingFeeOnTransferTokens(\r\n        IUniswapV2Pair pair,\r\n        address input,\r\n        address output,\r\n        address _to\r\n    ) internal virtual {\r\n        (address token0, ) = UniswapV2Library.sortTokens(input, output);\r\n\r\n        uint256 amountInput;\r\n        uint256 amountOutput;\r\n        {\r\n            // scope to avoid stack too deep errors\r\n            (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\r\n            (uint256 reserveInput, uint256 reserveOutput) =\r\n                input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n            amountInput = TokenInterface(input).balanceOf(address(pair)).sub(\r\n                reserveInput\r\n            );\r\n            amountOutput = UniswapV2Library.getAmountOut(\r\n                amountInput,\r\n                reserveInput,\r\n                reserveOutput\r\n            );\r\n        }\r\n        (uint256 amount0Out, uint256 amount1Out) =\r\n            input == token0\r\n                ? (uint256(0), amountOutput)\r\n                : (amountOutput, uint256(0));\r\n        pair.swap(amount0Out, amount1Out, _to, new bytes(0));\r\n    }\r\n\r\n    function _swapETHForTokenOut(\r\n        IUniswapV2Router02 router,\r\n        uint256 ethAmount,\r\n        address token\r\n    ) internal {\r\n        IUniswapV2Factory factory = IUniswapV2Factory(router.factory());\r\n        IUniswapV2Pair pair =\r\n            IUniswapV2Pair(factory.getPair(router.WETH(), token));\r\n\r\n        _weth.deposit{value: ethAmount}();\r\n\r\n        _weth.safeTransfer(address(pair), ethAmount);\r\n        _swapSupportingFeeOnTransferTokens(\r\n            pair,\r\n            router.WETH(),\r\n            token,\r\n            address(this)\r\n        );\r\n    }\r\n\r\n    function _swapTokenToETHOut(\r\n        IUniswapV2Router02 router,\r\n        uint256 tokenAmount,\r\n        address token\r\n    ) internal {\r\n        IUniswapV2Factory factory = IUniswapV2Factory(router.factory());\r\n        IUniswapV2Pair pair =\r\n            IUniswapV2Pair(factory.getPair(token, router.WETH()));\r\n\r\n        TokenInterface(token).safeTransfer(address(pair), tokenAmount);\r\n\r\n        _swapSupportingFeeOnTransferTokens(\r\n            pair,\r\n            token,\r\n            router.WETH(),\r\n            address(this)\r\n        );\r\n    }\r\n\r\n    function _swapTokenForTokenOut(\r\n        IUniswapV2Router02 router,\r\n        uint256 amountIn,\r\n        address tokenIn,\r\n        address tokenOut\r\n    ) internal {\r\n        IUniswapV2Factory factory = IUniswapV2Factory(router.factory());\r\n        IUniswapV2Pair pair =\r\n            IUniswapV2Pair(factory.getPair(tokenIn, tokenOut));\r\n\r\n        TokenInterface(tokenIn).safeTransfer(address(pair), amountIn);\r\n        _swapSupportingFeeOnTransferTokens(\r\n            pair,\r\n            tokenIn,\r\n            tokenOut,\r\n            address(this)\r\n        );\r\n    }\r\n\r\n    function sendProfit(uint256 amount) external onlyDev {\r\n        _sendProfit(_weth, amount);\r\n    }\r\n\r\n    function _sendProfit(TokenInterface token, uint256 amount)\r\n        private\r\n        returns (bool sent)\r\n    {\r\n        uint256 devAmount = amount.mul(_devFee).div(10000);\r\n\r\n        if (address(token) == address(_weth)) {\r\n            (sent, ) = dev().call{value: devAmount}(\"\");\r\n            require(sent, \"Failed to send Ether\");\r\n            (sent, ) = owner().call{value: amount.sub(devAmount)}(\"\");\r\n            require(sent, \"Failed to send Ether\");\r\n        } else {\r\n            token.transfer(dev(), devAmount);\r\n            token.transfer(owner(), amount.sub(devAmount));\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"endToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"}],\"name\":\"BadRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"}],\"name\":\"BadRoots\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"endToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"}],\"name\":\"GoldRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"routerId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expectedOutAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"realAmountOut\",\"type\":\"uint256\"}],\"name\":\"TestRun\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_routers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"name\":\"addRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"runner\",\"type\":\"address\"}],\"name\":\"addRunner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8[]\",\"name\":\"routerIds\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"inTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct SwapBot.Root[]\",\"name\":\"roots\",\"type\":\"tuple[]\"}],\"name\":\"bulkRun\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"routerIds\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"inTokens\",\"type\":\"address[]\"}],\"name\":\"checkEstimatedProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"name\":\"checkRouter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"runner\",\"type\":\"address\"}],\"name\":\"checkRunner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDevFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"removeOddTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"name\":\"removeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"runner\",\"type\":\"address\"}],\"name\":\"removeRunner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerLength\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"routerIds\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"inTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"}],\"name\":\"run\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"runnerLength\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"name\":\"setDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"runner\",\"type\":\"address\"}],\"name\":\"setRunner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"routerId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"swapEthToToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"routerId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"swapTokenToETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"routerId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenInAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"swapTokenToToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"routerId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outToken\",\"type\":\"address\"}],\"name\":\"testCheckEstimatedOutPut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDev\",\"type\":\"address\"}],\"name\":\"transferDevship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"}],\"name\":\"withdrawProfitDev\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdrawProfitOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SwapBot","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://85420ad2683b3790c2b7d089afca69c68b244cc2e29f96b02f1786df5f962f64"}]}