{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/Nutmeg.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n// Use upgradeable library.  These interfaces will work for tokens that\\n// are non-upgradeable\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport './lib/Governable.sol';\\nimport './lib/Math.sol';\\nimport \\\"./interfaces/IAdapter.sol\\\";\\nimport \\\"./interfaces/INutmeg.sol\\\";\\nimport \\\"./interfaces/INutDistributor.sol\\\";\\nimport \\\"./interfaces/IPriceOracle.sol\\\";\\n\\ncontract Nutmeg is Initializable, Governable, INutmeg {\\n    using SafeMath for uint;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    address public nutDistributor;\\n    address public nut;\\n\\n    uint private constant INVALID_POSITION_ID = type(uint).max;\\n    uint private constant NOT_LOCKED = 0;\\n    uint private constant LOCKED = 1;\\n    uint private constant TRANCHE_BBB = uint(Tranche.BBB);\\n    uint private constant TRANCHE_A = uint(Tranche.A);\\n    uint private constant TRANCHE_AA = uint(Tranche.AA);\\n\\n    uint private constant MULTIPLIER = 10**18;\\n    uint private constant NUM_BLOCK_PER_YEAR = 2102400;\\n    address private constant INVALID_ADAPTER = address(2);\\n\\n    uint public constant MAX_NUM_POOL = 256;\\n    uint public constant LIQUIDATION_COMMISSION = 5;\\n    // This are in fact interest rate per apy\\n    // but keeping old names for legacy front end\\n    uint public constant MAX_INTEREST_RATE_PER_BLOCK = 100000; // 1000.00%\\n    uint public constant MIN_INTEREST_RATE_PER_BLOCK = 500; // 5.00%\\n    uint public constant VERSION_ID = 1;\\n    uint public POOL_LOCK;\\n    uint public EXECUTION_LOCK;\\n    uint public STAKE_COUNTER;\\n    uint public POSITION_COUNTER;\\n    uint public CURR_POSITION_ID;\\n    address public CURR_SENDER;\\n    address public CURR_ADAPTER;\\n\\n    // treasury pool array and map\\n    address[] public pools; // array of treasury pools\\n    mapping(address => Pool) public poolMap; // baseToken => pool mapping.\\n\\n    // stake\\n    mapping(address => mapping (address => Stake[3])) public stakeMap; // baseToken => sender => tranche.\\n    mapping(address => uint[]) lenderStakeMap; // all stakes of a lender. address => stakeId\\n    mapping(uint => uint) nutStakedMap; // the number of nut tokens staked in a position\\n\\n    // adapter\\n    address[] public adapters;\\n    mapping(address => bool) public adapterMap;\\n\\n    // position\\n    mapping(uint => Position) public positionMap;\\n    mapping(address => uint[]) borrowerPositionMap; // all positions of a borrower. address => positionId\\n    mapping(address => mapping(address => uint)) minNut4Borrowers; // pool => adapter => uint\\n\\n    /// @dev Reentrancy lock guard.\\n    modifier poolLock() {\\n        require(POOL_LOCK == NOT_LOCKED, 'pl lck');\\n        POOL_LOCK = LOCKED;\\n        _;\\n        POOL_LOCK = NOT_LOCKED;\\n    }\\n\\n    /// @dev Reentrancy lock guard for execution.\\n    modifier inExecution() {\\n        require(CURR_POSITION_ID != INVALID_POSITION_ID, 'not exc');\\n        require(CURR_ADAPTER == msg.sender, 'bad adpr');\\n        require(EXECUTION_LOCK == NOT_LOCKED, 'exc lock');\\n        EXECUTION_LOCK = LOCKED;\\n        _;\\n        EXECUTION_LOCK = NOT_LOCKED;\\n    }\\n\\n    /// @dev Accrue interests in a pool\\n    modifier accrue(address token) {\\n        accrueInterest(token);\\n        _;\\n    }\\n\\n    /// @dev Initialize the smart contract, using msg.sender as the first governor.\\n    function initialize(address _governor, address _nutAddr, address _nutDistAddr) external initializer {\\n        __Governable__init(_governor);\\n        nut = _nutAddr;\\n        nutDistributor = _nutDistAddr;\\n        POOL_LOCK = NOT_LOCKED;\\n        EXECUTION_LOCK = NOT_LOCKED;\\n        STAKE_COUNTER = 1;\\n        POSITION_COUNTER = 1;\\n        CURR_POSITION_ID = INVALID_POSITION_ID;\\n        CURR_ADAPTER = INVALID_ADAPTER;\\n    }\\n\\n    function setNutDistributor(address addr) external onlyGov {\\n        nutDistributor = addr;\\n    }\\n\\n    function setNut(address addr) external onlyGov {\\n        nut = addr;\\n    }\\n\\n    function setMinNut4Borrowers(address poolAddr, address adapterAddr, uint val) external onlyGov {\\n        require(adapterMap[adapterAddr], 'setMin no adpr');\\n        Pool storage pool = poolMap[poolAddr];\\n        require(pool.isExists, 'setMin no pool');\\n        minNut4Borrowers[poolAddr][adapterAddr] = val;\\n    }\\n\\n    /// @notice Get all stake IDs of a lender\\n    function getStakeIds(address lender) external override view returns (uint[] memory){\\n        return lenderStakeMap[lender];\\n    }\\n\\n    /// @notice Get all position IDs of a borrower\\n    function getPositionIds(address borrower) external override view returns (uint[] memory){\\n        return borrowerPositionMap[borrower];\\n    }\\n\\n    /// @notice Return current position ID\\n    function getCurrPositionId() external override view returns (uint) {\\n        return CURR_POSITION_ID;\\n    }\\n\\n    /// @notice Return next position ID\\n    function getNextPositionId() external override view returns (uint) {\\n        return POSITION_COUNTER;\\n    }\\n\\n    /// @notice Get position information\\n    function getPosition(uint id) external override view returns (Position memory) {\\n        return positionMap[id];\\n    }\\n\\n    /// @dev get current sender\\n    function getCurrSender() external override view returns (address) {\\n        return CURR_SENDER;\\n    }\\n\\n\\n    /// @dev Get all treasury pools\\n    function getPools() external view returns (address[] memory) {\\n        return pools;\\n    }\\n\\n    /// @dev Get a specific pool given address\\n    function getPool(address addr) external view returns (Pool memory) {\\n        return poolMap[addr];\\n    }\\n\\n    /// @dev Add a new treasury pool.\\n    /// @param token The underlying base token for the pool, e.g., DAI.\\n    /// @param interestRate The interest rate per block of Tranche A.\\n    function addPool(address token, uint interestRate)\\n        external poolLock onlyGov {\\n        require(pools.length < MAX_NUM_POOL, 'addPl pl > max');\\n        require(_isInterestRateValid(interestRate), 'addPl bad ir');\\n        Pool storage pool = poolMap[token];\\n        require(!pool.isExists, 'addPl pool exts');\\n        pool.isExists = true;\\n        pool.baseToken = token;\\n        pool.interestRates = [interestRate.div(2), interestRate, interestRate.mul(2)];\\n        pools.push(token);\\n        emit addPoolEvent(token, interestRate);\\n        pool.lossMultiplier = [ MULTIPLIER, MULTIPLIER, MULTIPLIER ];\\n    }\\n\\n    /// @dev Update interest rate of the pool\\n    /// @param token The underlying base token for the pool, e.g., DAI.\\n    /// @param interestRate The interest rate per block of Tranche A. Input 316 for 3.16% APY\\n    function updateInterestRates(address token, uint interestRate)\\n        external poolLock onlyGov {\\n        require(_isInterestRateValid(interestRate), 'upIR bad ir');\\n        Pool storage pool = poolMap[token];\\n        require(pool.isExists, 'upIR no pool');\\n        pool.interestRates = [interestRate.div(2), interestRate, interestRate.mul(2)];\\n    }\\n\\n    function _isInterestRateValid(uint interestRate)\\n        internal pure returns(bool) {\\n        return (interestRate <= MAX_INTEREST_RATE_PER_BLOCK &&\\n            interestRate >= MIN_INTEREST_RATE_PER_BLOCK);\\n    }\\n\\n    /// @notice Stake to a treasury pool.\\n    /// @param token The contract address of the base token of the pool.\\n    /// @param tranche The tranche of the pool, 0 - AA, 1 - A, 2 - BBB.\\n    /// @param principal The amount of principal\\n    function stake(address token, uint tranche, uint principal)\\n        external poolLock accrue(token) {\\n        require(tranche < 3, 'stk bad trnch');\\n        require(principal > 0, 'stk bad prpl');\\n        Pool storage pool = poolMap[token];\\n        require(pool.isExists, 'stk no pool');\\n        if (tranche == TRANCHE_BBB) {\\n            require(principal.add(pool.principals[TRANCHE_BBB]) <= pool.principals[TRANCHE_AA],\\n                'stk BBB full');\\n        }\\n\\n        // 1. check pre-conditions\\n        Stake storage stk = stakeMap[token][msg.sender][tranche];\\n\\n        // 2. transfer the principal to the pool.\\n        IERC20Upgradeable(pool.baseToken).safeTransferFrom(msg.sender, address(this), principal);\\n\\n        // 3. add or update a stake\\n        uint sumIpp = pool.sumIpp[tranche];\\n        uint scaledPrincipal = 0;\\n\\n        if (stk.status != StakeStatus.Open) { // new stk\\n            stk.id = stk.status == StakeStatus.Closed ? stk.id : STAKE_COUNTER++;\\n            stk.status = StakeStatus.Open;\\n            stk.owner = msg.sender;\\n            stk.pool = token;\\n            stk.tranche = tranche;\\n            stk.sumIppStart = 0;\\n            stk.earnedInterest = 0;\\n            stk.lossMultiplierBase = 0;\\n            stk.lossZeroCounterBase = 0;\\n        } else { // add liquidity to an existing stk\\n\\t          scaledPrincipal = _scaleByLossMultiplier( stk, stk.principal );\\n            uint interest = scaledPrincipal.mul( sumIpp.sub(stk.sumIppStart)).div(MULTIPLIER);\\n            stk.earnedInterest = _scaleByLossMultiplier(stk, stk.earnedInterest ).add(interest);\\n        }\\n        stk.sumIppStart = sumIpp;\\n        stk.principal = scaledPrincipal.add(principal);\\n\\t      stk.lossZeroCounterBase = pool.lossZeroCounter[tranche];\\n\\t      stk.lossMultiplierBase = pool.lossMultiplier[tranche];\\n        lenderStakeMap[stk.owner].push(stk.id);\\n\\n        // update pool information\\n        pool.principals[tranche] = pool.principals[tranche].add(principal);\\n        updateInterestRateAdjustment(token);\\n        if (INutDistributor(nutDistributor).inNutDistribution()) {\\n            INutDistributor(nutDistributor).updateVtb(token, stk.owner, principal, 0);\\n        }\\n\\n        emit stakeEvent(token, msg.sender, tranche, principal, stk.id);\\n    }\\n\\n\\n\\n    /// @notice Unstake from a treasury pool.\\n    /// @param token The address of the pool.\\n    /// @param tranche The tranche of the pool, 0 - AA, 1 - A, 2 - BBB.\\n    /// @param amount The amount of principal that owner want to withdraw\\n    function unstake(address token, uint tranche, uint amount)\\n        external poolLock accrue(token) {\\n        require(tranche < 3, 'unstk bad trnch');\\n        Pool storage pool = poolMap[token];\\n        Stake storage stk = stakeMap[token][msg.sender][tranche];\\n        require(stk.id > 0, 'unstk no dpt');\\n        require(stk.status == StakeStatus.Open, 'unstk invalid status');\\n        uint activePrincipal = _scaleByLossMultiplier( stk, stk.principal );\\n        require(amount > 0 && amount <= activePrincipal, 'unstk bad amt');\\n        require(stk.status == StakeStatus.Open, 'unstk bad status');\\n        // get the available amount to remove\\n        uint withdrawAmt = _getWithdrawAmount(poolMap[stk.pool], amount);\\n        uint interest = activePrincipal.mul(pool.sumIpp[tranche].sub(stk.sumIppStart)).div(MULTIPLIER);\\n        uint totalInterest = _scaleByLossMultiplier(\\n            stk, stk.earnedInterest\\n        ).add(interest);\\n        if (totalInterest > pool.interests[tranche]) { // unlikely, but just in case.\\n            totalInterest = pool.interests[tranche];\\n        }\\n\\n        // transfer liquidity to the lender\\n        uint actualWithdrawAmt = withdrawAmt.add(totalInterest);\\n        IERC20Upgradeable(pool.baseToken).safeTransfer(msg.sender, actualWithdrawAmt);\\n\\n        // update stake information\\n        stk.principal = activePrincipal.sub(withdrawAmt);\\n        stk.sumIppStart = pool.sumIpp[tranche];\\n        stk.lossZeroCounterBase = pool.lossZeroCounter[tranche];\\n        stk.lossMultiplierBase = pool.lossMultiplier[tranche];\\n        stk.earnedInterest = 0;\\n        if (stk.principal == 0) {\\n            stk.status = StakeStatus.Closed;\\n        }\\n\\n        // update pool principal and interest information\\n        pool.principals[tranche] = pool.principals[tranche].sub(withdrawAmt);\\n        pool.interests[tranche] = pool.interests[tranche].sub(totalInterest);\\n        updateInterestRateAdjustment(token);\\n        if (INutDistributor(nutDistributor).inNutDistribution() && withdrawAmt > 0) {\\n            INutDistributor(nutDistributor).updateVtb(token, stk.owner, 0, withdrawAmt);\\n        }\\n\\n        emit unstakeEvent(token, msg.sender, tranche, withdrawAmt, stk.id);\\n    }\\n\\n    function _scaleByLossMultiplier(Stake memory stk, uint quantity) internal view returns (uint) {\\n\\t      Pool storage pool = poolMap[stk.pool];\\n\\t      return stk.lossZeroCounterBase < pool.lossZeroCounter[stk.tranche] ? 0 :\\n\\t          quantity.mul(\\n\\t          pool.lossMultiplier[stk.tranche]\\n\\t      ).div(\\n\\t          stk.lossMultiplierBase\\n\\t      );\\n    }\\n\\n    /// @notice Accrue interest for a given pool.\\n    /// @param token Address of the pool.\\n    function accrueInterest(address token) internal {\\n        Pool storage pool = poolMap[token];\\n        require(pool.isExists, 'accrIr no pool');\\n\\n        uint totalLoan = pool.loans[0].add(pool.loans[1]).add(pool.loans[2]);\\n        uint currBlock = block.number;\\n        if (currBlock <= pool.latestAccruedBlock) return;\\n        if (totalLoan > 0 ) {\\n            uint interestRate = pool.interestRates[TRANCHE_A];\\n            if (!pool.isIrAdjustPctNegative) {\\n                interestRate = interestRate.mul(pool.irAdjustPct.add(100)).div(100);\\n            } else {\\n                interestRate = interestRate.mul(uint(100).sub(pool.irAdjustPct)).div(100);\\n            }\\n            uint rtb = interestRate.mul(currBlock.sub(pool.latestAccruedBlock));\\n\\n            // update pool sumRtb.\\n            pool.sumRtb = pool.sumRtb.add(rtb);\\n\\n            uint totalWeightedLoan;\\n            for (uint idx = 0; idx < pool.loans.length; idx++) {\\n                totalWeightedLoan = totalWeightedLoan.add(pool.loans[idx].mul(2**idx));\\n            }\\n\\n            // update tranche sumIpp.\\n            for (uint idx = 0; idx < pool.loans.length; idx++) {\\n                if (pool.principals[idx] > 0) {\\n                    uint interest = (totalLoan.mul(pool.loans[idx]).mul(2**idx).mul(rtb)).div(NUM_BLOCK_PER_YEAR.mul(10000).mul(totalWeightedLoan));\\n                    pool.interests[idx] = pool.interests[idx].add(interest);\\n                    pool.sumIpp[idx]= pool.sumIpp[idx].add(interest.mul(MULTIPLIER).div(pool.principals[idx]));\\n                }\\n            }\\n        }\\n        pool.latestAccruedBlock = block.number;\\n    }\\n\\n    /// @notice Get pool information\\n    /// @param token The base token\\n    function getPoolInfo(address token) external view override returns(uint, uint, uint) {\\n        Pool storage pool = poolMap[token];\\n        require(pool.isExists, 'getPolInf no pol');\\n        return (Math.sumOf3UintArray(pool.principals),\\n                Math.sumOf3UintArray(pool.loans),\\n                pool.totalCollateral);\\n    }\\n\\n    /// @notice Get interest a position need to pay\\n    /// @param token Address of the pool.\\n    /// @param posId Position ID.\\n    function getPositionInterest(address token, uint posId) public override view returns(uint) {\\n        Pool storage pool = poolMap[token];\\n        require(pool.isExists, 'getPosIR no pool');\\n        Position storage pos = positionMap[posId];\\n        require(pos.baseToken == pool.baseToken, 'getPosIR bad match');\\n        return Math.sumOf3UintArray(pos.loans).mul(pool.sumRtb.sub(pos.sumRtbStart)).div(\\n            NUM_BLOCK_PER_YEAR.mul(10000)\\n        );\\n    }\\n\\n    /// @dev Update the interest rate adjustment of the pool\\n    /// @param token Address of the pool\\n    function updateInterestRateAdjustment(address token) public {\\n        Pool storage pool = poolMap[token];\\n        require(pool.isExists, 'updtIRAdj no pool');\\n\\n        uint totalPrincipal = pool.principals[0].add(pool.principals[1]).add(pool.principals[2]);\\n        uint totalLoan = pool.loans[0].add(pool.loans[1]).add(pool.loans[2]);\\n\\n        if (totalPrincipal > 0 ) {\\n            uint urPct = totalLoan >= totalPrincipal ? 100 : totalLoan.mul(100).div(totalPrincipal);\\n            if (urPct > 90) { // 0% + 50 * (UR - 90%)\\n                pool.irAdjustPct = urPct.sub(90).mul(50);\\n                pool.isIrAdjustPctNegative = false;\\n            } else if (urPct < 90) { // UR - 90%\\n                pool.irAdjustPct = (uint(90).sub(urPct));\\n                pool.isIrAdjustPctNegative = true;\\n            }\\n        }\\n    }\\n\\n    function _getWithdrawAmount(Pool memory pool, uint amount) internal pure returns (uint) {\\n        uint availPrincipal = Math.sumOf3UintArray(pool.principals).sub(\\n            Math.sumOf3UintArray(pool.loans)\\n        );\\n        return amount > availPrincipal ? availPrincipal : amount;\\n    }\\n\\n    /// @dev Get the collateral ratio of the pool.\\n    /// @param baseToken Base token of the pool.\\n    /// @param baseAmt The collateral from the borrower.\\n    function _getCollateralRatioPct(address baseToken, uint baseAmt) public view returns (uint) {\\n        Pool storage pool = poolMap[baseToken];\\n        require(pool.isExists, '_getCollRatPct no pool');\\n\\n        uint totalPrincipal = pool.principals[0].add(pool.principals[1]).add(pool.principals[2]);\\n        uint totalLoan = pool.loans[0].add(pool.loans[1]).add(pool.loans[2]);\\n\\n        uint urPct = (totalPrincipal == 0) ? 100 : ((totalLoan.add(baseAmt)).mul(100)).div(totalPrincipal);\\n        if (urPct > 100) { // not likely, but just in case.\\n            urPct = 100;\\n        }\\n\\n        if (urPct > 90) { // 10% + 9 * (UR - 90%)\\n            return (urPct.sub(90).mul(9)).add(10);\\n        }\\n        // 10% - 0.1 * (90% - UR)\\n        return (urPct.div(10)).add(1);\\n    }\\n\\n    /// @notice Get the maximum available borrow amount\\n    /// @param baseToken Base token of the pool\\n    /// @param baseAmt The collateral from the borrower\\n    function getMaxBorrowAmount(address baseToken, uint baseAmt)\\n        public override view returns (uint) {\\n        uint crPct = _getCollateralRatioPct(baseToken, baseAmt);\\n        return (baseAmt.mul(100).div(crPct)).sub(baseAmt);\\n    }\\n\\n\\n    /// @notice Get stakes of a user in a pool\\n    /// @param token The address of the pool\\n    /// @param owner The address of the owner\\n    function getStake(address token, address owner) public view returns (Stake[3] memory) {\\n        return stakeMap[token][owner];\\n    }\\n\\n    /// @dev Add adapter to Nutmeg\\n    /// @param token The address of the adapter\\n    function addAdapter(address token) external poolLock onlyGov {\\n        adapters.push(token);\\n        adapterMap[token] = true;\\n    }\\n\\n    /// @dev Remove adapter from Nutmeg\\n    /// @param token The address of the adapter\\n    function removeAdapter(address token) external poolLock onlyGov {\\n        adapterMap[token] = false;\\n    }\\n\\n    /// @notice Borrow tokens from the pool. Must only be called by adapter while under execution.\\n    /// @param baseToken The token to borrow from the pool.\\n    /// @param collToken The token borrowers got from the 3rd party pool.\\n    /// @param baseAmt The amount of collateral from borrower.\\n    /// @param borrowAmt The amount of tokens to borrow, x time leveraged already.\\n    function borrow(address baseToken, address collToken, uint baseAmt, uint borrowAmt)\\n        external override accrue(baseToken) inExecution {\\n        // check pool and position.\\n        Pool storage pool = poolMap[baseToken];\\n        require(pool.isExists, 'brw no pool');\\n        Position storage pos = positionMap[CURR_POSITION_ID];\\n        require(pos.baseToken == address(0), 'brw no rebrw');\\n\\n        // check borrowAmt\\n        uint maxBorrowAmt = getMaxBorrowAmount(baseToken, baseAmt);\\n        require(borrowAmt <= maxBorrowAmt, \\\"brw too bad\\\");\\n        require(borrowAmt >= baseAmt, \\\"brw brw < coll\\\");\\n\\n        // check available principal per tranche.\\n        uint[3] memory availPrincipals;\\n        for (uint i = 0; i < 3; i++) {\\n            availPrincipals[i] = pool.principals[i].sub(pool.loans[i]);\\n        }\\n        uint totalAvailPrincipal = Math.sumOf3UintArray(availPrincipals);\\n        require(borrowAmt <= totalAvailPrincipal, 'brw asset low');\\n\\n        // calculate loan amount from each tranche.\\n        uint[3] memory loans;\\n        loans[0] = borrowAmt.mul(availPrincipals[0]).div(totalAvailPrincipal);\\n        loans[1] = borrowAmt.mul(availPrincipals[1]).div(totalAvailPrincipal);\\n        loans[2] = borrowAmt.sub(loans[0].add(loans[1])); // handling rounding numbers\\n\\n        if (loans[2] > availPrincipals[2]) {\\n            loans[2] = availPrincipals[2];\\n            loans[1] = loans[1].add(loans[2]).sub(availPrincipals[2]);\\n        }\\n        if (loans[1] > availPrincipals[1]) {\\n            loans[1] = availPrincipals[1];\\n            loans[0] = loans[0].add(loans[1]).sub(availPrincipals[1]);\\n        }\\n\\n        // transfer base tokens from borrower to contract as the collateral.\\n        IERC20Upgradeable(pool.baseToken).safeApprove(address(this), 0);\\n        IERC20Upgradeable(pool.baseToken).safeApprove(address(this), baseAmt);\\n        IERC20Upgradeable(pool.baseToken).safeTransferFrom(pos.owner, address(this), baseAmt);\\n\\n        // transfer borrowed assets to the adapter\\n        IERC20Upgradeable(pool.baseToken).safeTransfer(msg.sender, borrowAmt);\\n\\n        // move over nut tokens\\n        uint nutStaked = minNut4Borrowers[baseToken][pos.adapter];\\n        if (nutStaked > 0) {\\n           nutStakedMap[pos.id] = nutStaked;\\n           IERC20Upgradeable(nut).safeApprove(address(this), 0);\\n           IERC20Upgradeable(nut).safeApprove(address(this), nutStaked);\\n           IERC20Upgradeable(nut).safeTransferFrom(pos.owner, address(this), nutStaked);\\n        }\\n\\n        // update position information\\n        pos.status = PositionStatus.Open;\\n        pos.baseToken = pool.baseToken;\\n        pos.collToken = collToken;\\n        pos.baseAmt = baseAmt;\\n        pos.borrowAmt = borrowAmt;\\n        pos.loans = loans;\\n        pos.sumRtbStart = pool.sumRtb;\\n\\n        borrowerPositionMap[pos.owner].push(pos.id);\\n\\n        // update pool information\\n        for (uint i = 0; i < 3; i++) {\\n            pool.loans[i] = pool.loans[i].add(loans[i]);\\n        }\\n        pool.totalCollateral = pool.totalCollateral.add(baseAmt);\\n        updateInterestRateAdjustment(baseToken);\\n    }\\n\\n    function _getRepayAmount(uint[3] memory loans, uint totalAmt)\\n        public pure returns(uint[3] memory) {\\n        uint totalLoan = Math.sumOf3UintArray(loans);\\n        uint amount = totalLoan < totalAmt ? totalLoan : totalAmt;\\n        uint[3] memory repays = [uint(0), uint(0), uint(0)];\\n        for (uint i; i < 3; i++) {\\n            repays[i] = (loans[i].mul(amount)).div(totalLoan);\\n        }\\n        repays[2] = amount.sub(repays[0].add(repays[1]));\\n\\n        return repays;\\n    }\\n\\n    /// @notice Repay tokens to the pool and close the position. Must only be called while under execution.\\n    /// @param baseToken The token to borrow from the pool.\\n    /// @param repayAmt The amount of base token repaid from adapter.\\n    function repay(address baseToken, uint repayAmt)\\n        external override accrue(baseToken) inExecution {\\n\\n        Position storage pos = positionMap[CURR_POSITION_ID];\\n        Pool storage pool = poolMap[pos.baseToken];\\n        require(pool.isExists, 'rpy no pool');\\n        require(adapterMap[pos.adapter] && msg.sender == pos.adapter, 'repay: no such adapter');\\n\\n        uint totalLoan = pos.loans[0].add(pos.loans[1]).add(pos.loans[2]); // owe to lenders\\n        uint interest = getPositionInterest(pool.baseToken, pos.id); // already paid to lenders\\n        uint totalRepayAmt = repayAmt.add(pos.baseAmt).sub(interest); // total amount used for repayment\\n        uint change = totalRepayAmt > totalLoan ? totalRepayAmt.sub(totalLoan) : 0; // profit of the borrower\\n\\n\\n        // transfer total redeemed amount from adapter to the pool\\n        IERC20Upgradeable(baseToken).safeTransferFrom(msg.sender, address(this), repayAmt);\\n        if (totalRepayAmt < totalLoan) {\\n            pos.repayDeficit = totalLoan.sub(totalRepayAmt);\\n        }\\n        uint[3] memory repays = _getRepayAmount(pos.loans, repayAmt);\\n        // update position information\\n        pos.status = PositionStatus.Closed;\\n        for (uint i; i < 3; i++) {\\n            pos.loans[i] = pos.loans[i].sub(repays[i]);\\n        }\\n\\n        // update pool information\\n        pool.totalCollateral = pool.totalCollateral.sub(pos.baseAmt);\\n        for (uint i; i < 3; i++) {\\n            pool.loans[i] = pool.loans[i].sub(repays[i]);\\n        }\\n\\n        // send profit, if any to the borrower.\\n        if (change > 0) {\\n            IERC20Upgradeable(baseToken).safeTransfer(pos.owner, change);\\n        }\\n        // return nut if any\\n        if (nutStakedMap[pos.id] > 0) {\\n            IERC20Upgradeable(nut).safeTransfer(pos.owner, nutStakedMap[pos.id]);\\n        }\\n    }\\n\\n    /// @notice Liquidate a position when conditions are satisfied\\n    /// @param baseToken The base token of the pool.\\n    /// @param liquidateAmt The repay amount from adapter.\\n    function liquidate( address baseToken, uint liquidateAmt)\\n        external override accrue(baseToken) inExecution {\\n        Position storage pos = positionMap[CURR_POSITION_ID];\\n        Pool storage pool = poolMap[baseToken];\\n        require(pool.isExists, 'lqt no pool');\\n        require(pool.baseToken == baseToken, \\\"lqt base no match\\\");\\n        require(adapterMap[pos.adapter] && msg.sender == pos.adapter, 'lqt no adpr');\\n        require(liquidateAmt > 0, 'lqt bad rpy');\\n\\n        // transfer liquidateAmt of base tokens from adapter to pool.\\n        IERC20Upgradeable(baseToken).safeTransferFrom(msg.sender, address(this), liquidateAmt);\\n\\n        uint totalLoan = pos.loans[0].add(pos.loans[1]).add(pos.loans[2]);\\n        uint interest = getPositionInterest(pool.baseToken, pos.id);\\n        uint totalRepayAmt = liquidateAmt.add(pos.baseAmt).sub(interest); // total base tokens from liquidated\\n        uint bonusAmt = LIQUIDATION_COMMISSION.mul(totalRepayAmt).div(100); // bonus for liquidator.\\n\\n        uint repayAmt = totalRepayAmt.sub(bonusAmt); // amount to pay lenders and the borrower\\n        uint change = totalLoan < repayAmt ? repayAmt.sub(totalLoan) : 0;\\n\\n        uint[3] memory repays = _getRepayAmount(pos.loans, liquidateAmt);\\n\\n        // transfer bonus to the liquidator.\\n        IERC20Upgradeable(baseToken).safeTransfer(CURR_SENDER, bonusAmt);\\n\\n        // update position information\\n        pos.status = PositionStatus.Liquidated;\\n        for (uint i; i < 3; i++) {\\n            pos.loans[i] = pos.loans[i].sub(repays[i]);\\n        }\\n\\n        // update pool information\\n        pool.totalCollateral = pool.totalCollateral.sub(pos.baseAmt);\\n        for (uint i; i < 3; i++) {\\n            pool.loans[i] = pool.loans[i].sub(repays[i]);\\n        }\\n\\n        // send leftover to position owner\\n        if (change > 0) {\\n            IERC20Upgradeable(baseToken).safeTransfer(pos.owner, change);\\n        }\\n        if (totalRepayAmt < totalLoan) {\\n            pos.repayDeficit = totalLoan.sub(totalRepayAmt);\\n        }\\n        if (nutStakedMap[pos.id] > 0) {\\n            IERC20Upgradeable(nut).safeTransfer(pos.owner, nutStakedMap[pos.id]);\\n        }\\n    }\\n\\n    /// @notice Settle credit event callback\\n    /// @param baseToken Base token of the pool.\\n    /// @param collateralLoss Loss to be distributed\\n    /// @param poolLoss Loss to be distributed\\n    function distributeCreditLosses( address baseToken, uint collateralLoss, uint poolLoss) external override accrue(baseToken) inExecution {\\n        Pool storage pool = poolMap[baseToken];\\n        require(pool.isExists, 'dstCrd no pool');\\n        require(collateralLoss <= pool.totalCollateral, 'dstCrd col high');\\n        if (collateralLoss >= 0) {\\n            pool.totalCollateral = pool.totalCollateral.sub(collateralLoss);\\n        }\\n\\n        if (poolLoss == 0) {\\n            return;\\n        }\\n\\n        uint totalPrincipal = pool.principals[0].add(pool.principals[1]).add(pool.principals[2]);\\n\\n        uint runningLoss = poolLoss;\\n        for (uint i = 0; i < 3; i++) {\\n            uint j = 3 - i - 1;\\n            // The running totals are based on the principal,\\n            // however, when I calculate the multipliers, I\\n            // take into account accured interest\\n            uint tranchePrincipal = pool.principals[j];\\n            uint trancheValue = pool.principals[j].add(pool.interests[j]);\\n            // Do not scale pool.sumIpp.  Since I am scaling the\\n            // principal, this will cause the interest rate\\n            // calcuations to take into account the losses when\\n            // a lender position is unstaked.\\n            if (runningLoss >= tranchePrincipal) {\\n                pool.principals[j] = 0;\\n                pool.interests[j] = 0;\\n                pool.lossZeroCounter[j] = block.number;\\n                pool.lossMultiplier[j] = MULTIPLIER;\\n                runningLoss = runningLoss.sub(tranchePrincipal);\\n            } else {\\n                uint valueRemaining = tranchePrincipal.sub(runningLoss);\\n\\t\\t            pool.principals[j] = pool.principals[j].mul(valueRemaining).div(trancheValue);\\n\\t\\t            pool.interests[j] = pool.interests[j].mul(valueRemaining).div(trancheValue);\\n\\t\\t            pool.lossMultiplier[j] = valueRemaining.mul(MULTIPLIER).div(trancheValue);\\n\\t\\t            break;\\n\\t          }\\n        }\\n\\n        // subtract the pool loss from the total loans\\n        // this keeps principal - loans the same so that\\n        // we have a correct accounting of the amount of\\n        // liquidity available for borrows.\\n\\n        uint totalLoans = pool.loans[0].add(pool.loans[1]).add(pool.loans[2]);\\n        totalPrincipal = (poolLoss <= totalPrincipal) ? totalPrincipal.sub(poolLoss) : 0;\\n        totalLoans = (poolLoss <= totalLoans) ? totalLoans.sub(poolLoss) : 0;\\n\\n        for (uint i = 0; i < pool.loans.length; i++) {\\n            pool.loans[i] = totalPrincipal == 0 ? 0 : totalLoans.mul(pool.principals[i]).div(totalPrincipal);\\n        }\\n    }\\n\\n    /// @notice Add collateral token to position. Must be called during execution.\\n    /// @param posId Position id\\n    /// @param collAmt The amount of the collateral token from 3rd party pool.\\n    function addCollToken(uint posId, uint collAmt)\\n        external override inExecution {\\n        Position storage pos = positionMap[CURR_POSITION_ID];\\n        require(pos.id == posId, \\\"addCollTk bad pos\\\");\\n\\n        pos.collAmt = collAmt;\\n    }\\n\\n    function getEarnedInterest( address token, address owner, Tranche tranche ) external view returns (uint256) {\\n        Pool storage pool = poolMap[token];\\n        require(pool.isExists, 'gtErndIr no pool');\\n        Stake memory stk = getStake(token, owner)[uint(tranche)];\\n        return _scaleByLossMultiplier(\\n            stk,\\n            stk.earnedInterest.add(\\n                stk.principal.mul(\\n                    pool.sumIpp[uint(tranche)].sub(stk.sumIppStart)\\n                ).div(MULTIPLIER))\\n        );\\n    }\\n\\n    /// -------------------------------------------------------------------\\n    /// functions to adapter\\n    function beforeExecution( uint posId, IAdapter adapter ) internal {\\n        require(POOL_LOCK == NOT_LOCKED, 'pol lck');\\n        POOL_LOCK = LOCKED;\\n        address adapterAddr = address(adapter);\\n        require(adapterMap[adapterAddr], 'no adpr');\\n\\n        if (posId == 0) {\\n            // create a new position\\n            posId = POSITION_COUNTER++;\\n            positionMap[posId].id = posId;\\n            positionMap[posId].owner = msg.sender;\\n            positionMap[posId].adapter = adapterAddr;\\n        } else {\\n            require(posId < POSITION_COUNTER, 'no pos');\\n            require(positionMap[posId].status == PositionStatus.Open, 'only open pos');\\n            require(positionMap[posId].adapter == adapterAddr, 'bad adpr');\\n        }\\n\\n        CURR_POSITION_ID = posId;\\n        CURR_ADAPTER = adapterAddr;\\n        CURR_SENDER = msg.sender;\\n    }\\n\\n    function afterExecution() internal {\\n        CURR_POSITION_ID = INVALID_POSITION_ID;\\n        CURR_ADAPTER = INVALID_ADAPTER;\\n        POOL_LOCK = NOT_LOCKED;\\n        CURR_SENDER = address(0);\\n    }\\n\\n    function openPosition( IAdapter adapter, address baseToken, address collToken, uint baseAmt, uint borrowAmt ) external {\\n        beforeExecution(0, adapter);\\n        adapter.openPosition( baseToken, collToken, baseAmt, borrowAmt );\\n        afterExecution();\\n    }\\n\\n    function closePosition( uint posId, IAdapter adapter ) external returns (uint) {\\n        beforeExecution(posId, adapter);\\n        uint redeemAmt = adapter.closePosition();\\n        afterExecution();\\n        return redeemAmt;\\n    }\\n\\n    function liquidatePosition( uint posId, IAdapter adapter ) external {\\n        beforeExecution(posId, adapter);\\n        adapter.liquidate();\\n        afterExecution();\\n    }\\n\\n    function settleCreditEvent( IAdapter adapter, address baseToken, uint collateralLoss, uint poolLoss ) onlyGov external {\\n        beforeExecution(0, adapter);\\n        adapter.settleCreditEvent( baseToken, collateralLoss, poolLoss );\\n        afterExecution();\\n    }\\n\\n    function getMaxUnstakePrincipal(address token, address owner, uint tranche) external view returns (uint) {\\n        Stake memory stk = stakeMap[token][owner][tranche];\\n        return _getWithdrawAmount(poolMap[stk.pool], stk.principal);\\n    }\\n\\n    function version() public virtual pure returns (string memory) {\\n        return \\\"1.0.0\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/lib/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\ncontract Governable is Initializable {\\n  address public governor;\\n  address public pendingGovernor;\\n\\n  modifier onlyGov() {\\n    require(msg.sender == governor, 'bad gov');\\n    _;\\n  }\\n\\n  function __Governable__init(address _governor) internal initializer {\\n    governor = _governor;\\n  }\\n\\n  /// @dev Set the pending governor, which will be the governor once accepted.\\n  /// @param addr The address of the pending governor.\\n  function setPendingGovernor(address addr) external onlyGov {\\n    pendingGovernor = addr;\\n  }\\n\\n  /// @dev Accept to become the new governor. Must be called by the pending governor.\\n  function acceptGovernor() external {\\n    require(msg.sender == pendingGovernor, 'no pend');\\n    pendingGovernor = address(0);\\n    governor = msg.sender;\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/lib/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary Math {\\n    using SafeMath for uint;\\n\\n    function sumOf3UintArray(uint[3] memory data) internal pure returns(uint) {\\n        return data[0].add(data[1]).add(data[2]);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/interfaces/IAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface IAdapter {\\n    function openPosition( address baseToken, address collToken, uint collAmount, uint borrowAmount ) external;\\n    function closePosition() external returns (uint);\\n    function liquidate() external;\\n    function settleCreditEvent(\\n        address baseToken, uint collateralLoss, uint poolLoss) external;\\n\\n    event openPositionEvent(uint positionId, address caller, uint baseAmt, uint borrowAmount);\\n    event closePositionEvent(uint positionId, address caller, uint amount);\\n    event liquidateEvent(uint positionId, address caller);\\n    event creditEvent(address token, uint collateralLoss, uint poolLoss);\\n}\\n\"\r\n    },\r\n    \"./contracts/interfaces/INutmeg.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface INutmeg {\\n    enum Tranche {AA, A, BBB}\\n    enum StakeStatus {Uninitialized, Open, Closed}\\n    enum PositionStatus {Uninitialized, Open, Closed, Liquidated}\\n\\n    struct Pool {\\n        bool isExists;\\n        address baseToken; // base token of this pool, e.g., WETH, DAI.\\n        uint[3] interestRates; // interest rate per block of each tranche. supposed to be updated everyday.\\n        uint[3] principals; // principals of each tranche, from lenders\\n        uint[3] loans; // loans of each tranche, from borrowers.\\n        uint[3] interests; // interests accrued from loans for each tranche.\\n\\n        uint totalCollateral; // total collaterals in base token from borrowers.\\n        uint latestAccruedBlock; // the block number of the latest interest accrual action.\\n        uint sumRtb; // sum of interest rate per block (after adjustment) times # of blocks\\n        uint irAdjustPct; // interest rate adjustment in percentage, e.g., 1, 99.\\n        bool isIrAdjustPctNegative; // whether interestRateAdjustPct is negative\\n        uint[3] sumIpp; // sum of interest per principal.\\n        uint[3] lossMultiplier;\\n        uint[3] lossZeroCounter;\\n    }\\n\\n    struct Stake {\\n        uint id;\\n        StakeStatus status;\\n        address owner;\\n        address pool;\\n        uint tranche; // tranche of the pool, 0 - AA, 1 - A, 2 - BBB.\\n        uint principal;\\n        uint sumIppStart;\\n        uint earnedInterest;\\n        uint lossMultiplierBase;\\n        uint lossZeroCounterBase;\\n    }\\n\\n    struct Position {\\n        uint id; // id of the position.\\n        PositionStatus status; // status of the position, Open, Close, and Liquidated.\\n        address owner; // borrower's address\\n        address adapter; // adapter's address\\n        address baseToken; // base token that the borrower borrows from the pool\\n        address collToken; // collateral token that the borrower got from 3rd party pool.\\n        uint[3] loans; // loans of all tranches\\n        uint baseAmt; // amount of the base token the borrower put into pool as the collateral.\\n        uint collAmt; // amount of collateral token the borrower got from 3rd party pool.\\n        uint borrowAmt; // amount of base tokens borrowed from the pool.\\n        uint sumRtbStart; // rate times block when the position is created.\\n        uint repayDeficit; // repay pool loss\\n    }\\n\\n    struct NutDist {\\n        uint endBlock;\\n        uint amount;\\n    }\\n\\n    /// @dev Get all stake IDs of a lender\\n    function getStakeIds(address lender) external view returns (uint[] memory);\\n\\n    /// @dev Get all position IDs of a borrower\\n    function getPositionIds(address borrower) external view returns (uint[] memory);\\n\\n    /// @dev Get the maximum available borrow amount\\n    function getMaxBorrowAmount(address token, uint collAmount) external view returns(uint);\\n\\n    /// @dev Get the current position while under execution.\\n    function getCurrPositionId() external view returns (uint);\\n\\n    /// @dev Get the next position ID while under execution.\\n    function getNextPositionId() external view returns (uint);\\n\\n    /// @dev Get the current sender while under execution\\n    function getCurrSender() external view returns (address);\\n\\n    function getPosition(uint id) external view returns (Position memory);\\n\\n    function getPositionInterest(address token, uint positionId) external view returns(uint);\\n\\n    function getPoolInfo(address token) external view returns(uint, uint, uint);\\n\\n    /// @dev Add Collateral token from the 3rd party pool to a position\\n    function addCollToken(uint posId, uint collAmt) external;\\n\\n    /// @dev Borrow tokens from the pool.\\n    function borrow(address token, address collAddr, uint baseAmount, uint borrowAmount) external;\\n\\n    /// @dev Repays tokens to the pool.\\n    function repay(address token, uint repayAmount) external;\\n\\n    /// @dev Liquidate a position when conditions are satisfied\\n    function liquidate(address token, uint repayAmount) external;\\n\\n    /// @dev Settle credit event\\n    function distributeCreditLosses( address baseToken, uint collateralLoss, uint poolLoss) external;\\n    event addPoolEvent(address bank, uint interestRateA);\\n    event stakeEvent(address bank, address owner, uint tranche, uint amount, uint depId);\\n    event unstakeEvent(address bank, address owner, uint tranche, uint amount, uint depId);\\n}\\n\"\r\n    },\r\n    \"./contracts/interfaces/INutDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface INutDistributor {\\n    function updateVtb(address token, address lender, uint incAmount, uint decAmount) external;\\n    function inNutDistribution() external view returns(bool);\\n}\\n\"\r\n    },\r\n    \"./contracts/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface IPriceOracle {\\n    function getPrice(address token) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bank\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestRateA\",\"type\":\"uint256\"}],\"name\":\"addPoolEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bank\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depId\",\"type\":\"uint256\"}],\"name\":\"stakeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bank\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depId\",\"type\":\"uint256\"}],\"name\":\"unstakeEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CURR_ADAPTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CURR_POSITION_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CURR_SENDER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXECUTION_LOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_COMMISSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_INTEREST_RATE_PER_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_NUM_POOL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_INTEREST_RATE_PER_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_LOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POSITION_COUNTER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_COUNTER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseAmt\",\"type\":\"uint256\"}],\"name\":\"_getCollateralRatioPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"loans\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"totalAmt\",\"type\":\"uint256\"}],\"name\":\"_getRepayAmount\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adapterMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adapters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"posId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collAmt\",\"type\":\"uint256\"}],\"name\":\"addCollToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmt\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"posId\",\"type\":\"uint256\"},{\"internalType\":\"contract IAdapter\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"closePosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralLoss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolLoss\",\"type\":\"uint256\"}],\"name\":\"distributeCreditLosses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrPositionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum INutmeg.Tranche\",\"name\":\"tranche\",\"type\":\"uint8\"}],\"name\":\"getEarnedInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseAmt\",\"type\":\"uint256\"}],\"name\":\"getMaxBorrowAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"}],\"name\":\"getMaxUnstakePrincipal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextPositionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPool\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isExists\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"interestRates\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"principals\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"loans\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"interests\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestAccruedBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sumRtb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"irAdjustPct\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isIrAdjustPctNegative\",\"type\":\"bool\"},{\"internalType\":\"uint256[3]\",\"name\":\"sumIpp\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"lossMultiplier\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"lossZeroCounter\",\"type\":\"uint256[3]\"}],\"internalType\":\"struct INutmeg.Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum INutmeg.PositionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collToken\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"loans\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"baseAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sumRtbStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayDeficit\",\"type\":\"uint256\"}],\"internalType\":\"struct INutmeg.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"getPositionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"posId\",\"type\":\"uint256\"}],\"name\":\"getPositionInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum INutmeg.StakeStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sumIppStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnedInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lossMultiplierBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lossZeroCounterBase\",\"type\":\"uint256\"}],\"internalType\":\"struct INutmeg.Stake[3]\",\"name\":\"\",\"type\":\"tuple[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"getStakeIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nutAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nutDistAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidateAmt\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"posId\",\"type\":\"uint256\"},{\"internalType\":\"contract IAdapter\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"liquidatePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nut\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nutDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAdapter\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmt\",\"type\":\"uint256\"}],\"name\":\"openPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExists\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestAccruedBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sumRtb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"irAdjustPct\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isIrAdjustPctNegative\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positionMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum INutmeg.PositionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sumRtbStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayDeficit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmt\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adapterAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setMinNut4Borrowers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setNut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setNutDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAdapter\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralLoss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolLoss\",\"type\":\"uint256\"}],\"name\":\"settleCreditEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum INutmeg.StakeStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sumIppStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnedInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lossMultiplierBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lossZeroCounterBase\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"updateInterestRateAdjustment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"}],\"name\":\"updateInterestRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"Nutmeg","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://41136efa8700ee98951b5d3a992ac84455b6d0e414060a0ef2057e036e2f3f73"}]}