{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at BscScan.com on 2021-03-22\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary Strings {\r\n\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        uint256 index = digits - 1;\r\n        temp = value;\r\n        while (temp != 0) {\r\n            buffer[index--] = byte(uint8(48 + temp % 10));\r\n            temp /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary EnumerableSet {\r\n\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n\r\nlibrary EnumerableMap {\r\n\r\n\r\n    struct MapEntry {\r\n        bytes32 _key;\r\n        bytes32 _value;\r\n    }\r\n\r\n    struct Map {\r\n        // Storage of map keys and values\r\n        MapEntry[] _entries;\r\n\r\n        // Position of the entry defined by a key in the `entries` array, plus 1\r\n        // because index 0 means a key is not in the map.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\r\n        // We read and store the key's index to prevent multiple reads from the same storage slot\r\n        uint256 keyIndex = map._indexes[key];\r\n\r\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\r\n            map._entries.push(MapEntry({ _key: key, _value: value }));\r\n            // The entry is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            map._indexes[key] = map._entries.length;\r\n            return true;\r\n        } else {\r\n            map._entries[keyIndex - 1]._value = value;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\r\n        // We read and store the key's index to prevent multiple reads from the same storage slot\r\n        uint256 keyIndex = map._indexes[key];\r\n\r\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\r\n\r\n\r\n            uint256 toDeleteIndex = keyIndex - 1;\r\n            uint256 lastIndex = map._entries.length - 1;\r\n\r\n\r\n            MapEntry storage lastEntry = map._entries[lastIndex];\r\n\r\n            // Move the last entry to the index where the entry to delete is\r\n            map._entries[toDeleteIndex] = lastEntry;\r\n            // Update the index for the moved entry\r\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved entry was stored\r\n            map._entries.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete map._indexes[key];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\r\n        return map._indexes[key] != 0;\r\n    }\r\n\r\n    function _length(Map storage map) private view returns (uint256) {\r\n        return map._entries.length;\r\n    }\r\n\r\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\r\n        require(map._entries.length > index, \"EnumerableMap: index out of bounds\");\r\n\r\n        MapEntry storage entry = map._entries[index];\r\n        return (entry._key, entry._value);\r\n    }\r\n\r\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\r\n        return _get(map, key, \"EnumerableMap: nonexistent key\");\r\n    }\r\n\r\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\r\n        uint256 keyIndex = map._indexes[key];\r\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\r\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\r\n    }\r\n\r\n    // UintToAddressMap\r\n\r\n    struct UintToAddressMap {\r\n        Map _inner;\r\n    }\r\n\r\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\r\n        return _set(map._inner, bytes32(key), bytes32(uint256(value)));\r\n    }\r\n\r\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\r\n        return _remove(map._inner, bytes32(key));\r\n    }\r\n\r\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\r\n        return _contains(map._inner, bytes32(key));\r\n    }\r\n\r\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\r\n        return _length(map._inner);\r\n    }\r\n\r\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\r\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\r\n        return (uint256(key), address(uint256(value)));\r\n    }\r\n\r\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\r\n        return address(uint256(_get(map._inner, bytes32(key))));\r\n    }\r\n\r\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\r\n        return address(uint256(_get(map._inner, bytes32(key), errorMessage)));\r\n    }\r\n}\r\n\r\n\r\nlibrary Counters {\r\n    using SafeMath for uint256;\r\n\r\n    struct Counter {\r\n\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\r\n        counter._value += 1;\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        counter._value = counter._value.sub(1);\r\n    }\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ninterface IERC165 {\r\n\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\nabstract contract ERC165 is IERC165 {\r\n\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface IERC721 is IERC165 {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\ninterface IERC721Receiver {\r\n\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\n\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n\r\ninterface IERC721Enumerable is IERC721 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\r\n    using Strings for uint256;\r\n\r\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    // Mapping from holder address to their (enumerable) set of owned tokens\r\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\r\n\r\n    // Enumerable mapping from token ids to their owners\r\n    EnumerableMap.UintToAddressMap private _tokenOwners;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Optional mapping for token URIs\r\n    mapping (uint256 => string) private _tokenURIs;\r\n\r\n    // Base URI\r\n    string private _baseURI;\r\n\r\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\r\n\r\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\r\n\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC721);\r\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\r\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\r\n    }\r\n\r\n    function balanceOf(address owner) public view override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n\r\n        return _holderTokens[owner].length();\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId) public view override returns (address) {\r\n        return _tokenOwners.get(tokenId, \"ERC721: owner query for nonexistent token\");\r\n    }\r\n\r\n    function name() public view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory _tokenURI = _tokenURIs[tokenId];\r\n\r\n        // If there is no base URI, return the token URI.\r\n        if (bytes(_baseURI).length == 0) {\r\n            return _tokenURI;\r\n        }\r\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\r\n        if (bytes(_tokenURI).length > 0) {\r\n            return string(abi.encodePacked(_baseURI, _tokenURI));\r\n        }\r\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\r\n        return string(abi.encodePacked(_baseURI, tokenId.toString()));\r\n    }\r\n\r\n    function baseURI() public view returns (string memory) {\r\n        return _baseURI;\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\r\n        return _holderTokens[owner].at(index);\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\r\n        return _tokenOwners.length();\r\n    }\r\n\r\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\r\n        (uint256 tokenId, ) = _tokenOwners.at(index);\r\n        return tokenId;\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    function getApproved(uint256 tokenId) public view override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return _tokenOwners.contains(tokenId);\r\n    }\r\n\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _holderTokens[to].add(tokenId);\r\n\r\n        _tokenOwners.set(tokenId, to);\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        // Clear metadata (if any)\r\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n            delete _tokenURIs[tokenId];\r\n        }\r\n\r\n        _holderTokens[owner].remove(tokenId);\r\n\r\n        _tokenOwners.remove(tokenId);\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\r\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _holderTokens[from].remove(tokenId);\r\n        _holderTokens[to].add(tokenId);\r\n\r\n        _tokenOwners.set(tokenId, to);\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\r\n        _tokenURIs[tokenId] = _tokenURI;\r\n    }\r\n\r\n    function _setBaseURI(string memory baseURI_) internal virtual {\r\n        _baseURI = baseURI_;\r\n    }\r\n\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n        private returns (bool)\r\n    {\r\n        if (!to.isContract()) {\r\n            return true;\r\n        }\r\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\r\n            IERC721Receiver(to).onERC721Received.selector,\r\n            _msgSender(),\r\n            from,\r\n            tokenId,\r\n            _data\r\n        ), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n        bytes4 retval = abi.decode(returndata, (bytes4));\r\n        return (retval == _ERC721_RECEIVED);\r\n    }\r\n\r\n    function _approve(address to, uint256 tokenId) private {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\r\n}\r\n\r\n\r\nabstract contract Initializable {\r\n\r\n    bool private _initialized;\r\n\r\n    bool private _initializing;\r\n\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n\r\n        address self = address(this);\r\n        uint256 cs;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { cs := extcodesize(self) }\r\n        return cs == 0;\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract LotteryOwnable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function initOwner(address owner) internal {\r\n        _owner = owner;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract LotteryNFT is ERC721, Ownable {\r\n    using Counters for Counters.Counter;\r\n    Counters.Counter private _tokenIds;\r\n\r\n    mapping (uint256 => uint8[4]) public lotteryInfo;\r\n    mapping (uint256 => uint256) public lotteryAmount;\r\n    mapping (uint256 => uint256) public issueIndex;\r\n    mapping (uint256 => bool) public claimInfo;\r\n\r\n    constructor() public ERC721(\"Atari Lottery Ticket\", \"ATRITK\") {}\r\n\r\n    function newLotteryItem(address player, uint8[4] memory _lotteryNumbers, uint256 _amount, uint256 _issueIndex)\r\n        public onlyOwner\r\n        returns (uint256)\r\n    {\r\n        _tokenIds.increment();\r\n\r\n        uint256 newItemId = _tokenIds.current();\r\n        _mint(player, newItemId);\r\n        lotteryInfo[newItemId] = _lotteryNumbers;\r\n        lotteryAmount[newItemId] = _amount;\r\n        issueIndex[newItemId] = _issueIndex;\r\n\r\n\r\n        return newItemId;\r\n    }\r\n\r\n    function getLotteryNumbers(uint256 tokenId) external view returns (uint8[4] memory) {\r\n        return lotteryInfo[tokenId];\r\n    }\r\n    function getLotteryAmount(uint256 tokenId) external view returns (uint256) {\r\n        return lotteryAmount[tokenId];\r\n    }\r\n    function getLotteryIssueIndex(uint256 tokenId) external view returns (uint256) {\r\n        return issueIndex[tokenId];\r\n    }\r\n    function claimReward(uint256 tokenId) external onlyOwner {\r\n        claimInfo[tokenId] = true;\r\n    }\r\n    function multiClaimReward(uint256[] memory _tokenIds) external onlyOwner {\r\n        for (uint i = 0; i < _tokenIds.length; i++) {\r\n            claimInfo[_tokenIds[i]] = true;\r\n        }\r\n    }\r\n    function burn(uint256 tokenId) external onlyOwner {\r\n        _burn(tokenId);\r\n    }\r\n    function getClaimStatus(uint256 tokenId) external view returns (bool) {\r\n        return claimInfo[tokenId];\r\n    }\r\n}\r\n\r\n\r\ncontract Lottery is LotteryOwnable, Initializable {\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint8;\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint8 constant keyLengthForEachBuy = 11;\r\n    // Allocation for first/sencond/third reward\r\n    uint8[3] public allocation;\r\n    // The TOKEN to buy lottery\r\n    IERC20 public atari;\r\n    // The Lottery NFT for tickets\r\n    LotteryNFT public lotteryNFT;\r\n    // adminAddress\r\n    address public adminAddress;\r\n    // maxNumber\r\n    uint8 public maxNumber;\r\n    // minPrice, if decimal is not 18, please reset it\r\n    uint256 public minPrice;\r\n    //remain balance fro last game\r\n    uint256 public remainBalance;\r\n\r\n    // =================================\r\n\r\n    // issueId => winningNumbers[numbers]\r\n    mapping (uint256 => uint8[4]) public historyNumbers;\r\n    // issueId => [tokenId]\r\n    mapping (uint256 => uint256[]) public lotteryInfo;\r\n    // issueId => [totalAmount, firstMatchAmount, secondMatchingAmount, thirdMatchingAmount]\r\n    mapping (uint256 => uint256[]) public historyAmount;\r\n    // issueId => nomatch\r\n    mapping (uint256 => uint256) public nomatch;\r\n\r\n    // issueId => trickyNumber => buyAmountSum\r\n    mapping (uint256 => mapping(uint64 => uint256)) public userBuyAmountSum;\r\n    // address => [tokenId]\r\n    mapping (address => uint256[]) public userInfo;\r\n\r\n    uint256 public issueIndex = 0;\r\n    uint256 public totalAddresses = 0;\r\n    uint256 public totalAmount = 0;\r\n    uint256 public lastTimestamp;\r\n    uint256 public nextPharse;\r\n    uint256 public nextDraw;\r\n    uint256 public DrawDuration;\r\n    uint256 public ParseDuration;\r\n\r\n    uint8[4] public winningNumbers;\r\n\r\n    // default false\r\n    bool public drawingPhase;\r\n\r\n    // =================================\r\n\r\n    event Buy(address indexed user, uint256 tokenId);\r\n    event Drawing(uint256 indexed issueIndex, uint8[4] winningNumbers);\r\n    event Claim(address indexed user, uint256 tokenid, uint256 amount);\r\n    event DevWithdraw(address indexed user, uint256 amount);\r\n    event Reset(uint256 indexed issueIndex);\r\n    event MultiClaim(address indexed user, uint256 amount);\r\n    event MultiBuy(address indexed user, uint256 amount);\r\n\r\n    constructor() public {\r\n    }\r\n\r\n    function initialize(\r\n        IERC20 _atari,\r\n        LotteryNFT _lottery,\r\n        uint256 _minPrice,\r\n        uint8 _maxNumber,\r\n        address _owner,\r\n        address _adminAddress\r\n    ) public initializer {\r\n        atari = _atari;\r\n        lotteryNFT = _lottery;\r\n        minPrice = _minPrice;\r\n        maxNumber = _maxNumber;\r\n        adminAddress = _adminAddress;\r\n        lastTimestamp = block.timestamp;\r\n        allocation = [60, 20, 10];\r\n        DrawDuration = 302400;\r\n        ParseDuration = 43200;\r\n        nextDraw=lastTimestamp.add(DrawDuration);\r\n        nextPharse=nextDraw.sub(ParseDuration);\r\n        initOwner(_owner);\r\n    }\r\n\r\n    uint8[4] private nullTicket = [0,0,0,0];\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == adminAddress, \"admin: wut?\");\r\n        _;\r\n    }\r\n\r\n    function drawed() public view returns(bool) {\r\n        return winningNumbers[0] != 0;\r\n    }\r\n\r\n    function reset() external onlyAdmin {\r\n        require(drawed(), \"drawed?\");\r\n        lastTimestamp = block.timestamp;\r\n        totalAddresses = 0;\r\n        totalAmount=0;\r\n        winningNumbers[0]=0;\r\n        winningNumbers[1]=0;\r\n        winningNumbers[2]=0;\r\n        winningNumbers[3]=0;\r\n        drawingPhase = false;\r\n        issueIndex = issueIndex +1;\r\n        if(remainBalance>0) {\r\n            internalBuy(remainBalance, nullTicket);\r\n        }\r\n        remainBalance = 0;\r\n        nextDraw=lastTimestamp.add(DrawDuration);\r\n        nextPharse=nextDraw.sub(ParseDuration);\r\n        emit Reset(issueIndex);\r\n    }\r\n\r\n    function enterDrawingPhase() external {\r\n        require(block.timestamp>=nextPharse||msg.sender==owner(),\"not parse time\");\r\n        require(!drawed(), 'drawed');\r\n        drawingPhase = true;\r\n    }\r\n\r\n    // add externalRandomNumber to prevent node validators exploiting\r\n    function drawing(uint256 _externalRandomNumber) external {\r\n        \r\n        require(block.timestamp>=nextDraw||msg.sender==owner(),\"not draw time\");\r\n        require(!drawed(), \"reset?\");\r\n        require(drawingPhase, \"enter drawing phase first\");\r\n        bytes32 _structHash;\r\n        uint256 _randomNumber;\r\n        uint8 _maxNumber = maxNumber;\r\n        bytes32 _blockhash = blockhash(block.number-1);\r\n\r\n        // waste some gas fee here\r\n        for (uint i = 0; i < 10; i++) {\r\n            getTotalRewards(issueIndex);\r\n        }\r\n        uint256 gasleft = gasleft();\r\n\r\n        // 1\r\n        _structHash = keccak256(\r\n            abi.encode(\r\n                _blockhash,\r\n                totalAddresses,\r\n                gasleft,\r\n                _externalRandomNumber\r\n            )\r\n        );\r\n        _randomNumber  = uint256(_structHash);\r\n        assembly {_randomNumber := add(mod(_randomNumber, _maxNumber),1)}\r\n        winningNumbers[0]=uint8(_randomNumber);\r\n\r\n        // 2\r\n        _structHash = keccak256(\r\n            abi.encode(\r\n                _blockhash,\r\n                totalAmount,\r\n                gasleft,\r\n                _externalRandomNumber\r\n            )\r\n        );\r\n        _randomNumber  = uint256(_structHash);\r\n        assembly {_randomNumber := add(mod(_randomNumber, _maxNumber),1)}\r\n        winningNumbers[1]=uint8(_randomNumber);\r\n\r\n        // 3\r\n        _structHash = keccak256(\r\n            abi.encode(\r\n                _blockhash,\r\n                lastTimestamp,\r\n                gasleft,\r\n                _externalRandomNumber\r\n            )\r\n        );\r\n        _randomNumber  = uint256(_structHash);\r\n        assembly {_randomNumber := add(mod(_randomNumber, _maxNumber),1)}\r\n        winningNumbers[2]=uint8(_randomNumber);\r\n\r\n        // 4\r\n        _structHash = keccak256(\r\n            abi.encode(\r\n                _blockhash,\r\n                gasleft,\r\n                _externalRandomNumber\r\n            )\r\n        );\r\n        _randomNumber  = uint256(_structHash);\r\n        assembly {_randomNumber := add(mod(_randomNumber, _maxNumber),1)}\r\n        winningNumbers[3]=uint8(_randomNumber);\r\n        historyNumbers[issueIndex] = winningNumbers;\r\n        historyAmount[issueIndex] = calculateMatchingRewardAmount();\r\n\r\n        //unmatched amount\r\n        if(historyAmount[issueIndex][0]==0){\r\n            nomatch[issueIndex] = 0;\r\n        }\r\n        else {\r\n        nomatch[issueIndex] = \r\n            ((historyAmount[issueIndex][0].mul(allocation[0])-historyAmount[issueIndex][1]).div(historyAmount[issueIndex][0])+\r\n            (historyAmount[issueIndex][0].mul(allocation[1])-historyAmount[issueIndex][2]).div(historyAmount[issueIndex][0])+\r\n            (historyAmount[issueIndex][0].mul(allocation[2])-historyAmount[issueIndex][3]).div(historyAmount[issueIndex][0]));\r\n        }\r\n        //matched number\r\n        remainBalance = getTotalRewards(issueIndex).mul(nomatch[issueIndex]).mul(85).div(10000);\r\n        drawingPhase = false;\r\n        emit Drawing(issueIndex, winningNumbers);\r\n    }\r\n\r\n    function internalBuy(uint256 _price, uint8[4] memory _numbers) internal {\r\n        require (!drawed(), 'drawed, can not buy now');\r\n        for (uint i = 0; i < 4; i++) {\r\n            require (_numbers[i] <= maxNumber, 'exceed the maximum');\r\n        }\r\n        uint256 tokenId = lotteryNFT.newLotteryItem(address(this), _numbers, _price, issueIndex);\r\n        lotteryInfo[issueIndex].push(tokenId);\r\n        totalAmount = totalAmount.add(_price);\r\n        lastTimestamp = block.timestamp;\r\n        emit Buy(address(this), tokenId);\r\n\r\n    }\r\n\r\n    function buy(uint256 _price, uint8[4] memory _numbers) external {\r\n        require(!drawed(), 'drawed, can not buy now');\r\n        require(!drawingPhase, 'drawing, can not buy now');\r\n        require (_price >= minPrice, 'price must above minPrice');\r\n        for (uint i = 0; i < 4; i++) {\r\n            require (_numbers[i] <= maxNumber, 'exceed number scope');\r\n        }\r\n        uint256 tokenId = lotteryNFT.newLotteryItem(msg.sender, _numbers, _price, issueIndex);\r\n        lotteryInfo[issueIndex].push(tokenId);\r\n        if (userInfo[msg.sender].length == 0) {\r\n            totalAddresses = totalAddresses + 1;\r\n        }\r\n        userInfo[msg.sender].push(tokenId);\r\n        totalAmount = totalAmount.add(_price);\r\n        lastTimestamp = block.timestamp;\r\n        uint64[keyLengthForEachBuy] memory userNumberIndex = generateNumberIndexKey(_numbers);\r\n        for (uint i = 0; i < keyLengthForEachBuy; i++) {\r\n            userBuyAmountSum[issueIndex][userNumberIndex[i]]=userBuyAmountSum[issueIndex][userNumberIndex[i]].add(_price);\r\n        }\r\n        atari.safeTransferFrom(address(msg.sender), address(this), _price);\r\n        emit Buy(msg.sender, tokenId);\r\n    }\r\n\r\n    function  multiBuy(uint256 _price, uint8[4][] memory _numbers) external {\r\n        require (!drawed(), 'drawed, can not buy now');\r\n        require(!drawingPhase, 'drawing, can not buy now');\r\n        require (_price >= minPrice, 'price must above minPrice');\r\n        uint256 totalPrice  = 0;\r\n        for (uint i = 0; i < _numbers.length; i++) {\r\n            for (uint j = 0; j < 4; j++) {\r\n                require (_numbers[i][j] <= maxNumber && _numbers[i][j] > 0, 'exceed number scope');\r\n            }\r\n            uint256 tokenId = lotteryNFT.newLotteryItem(msg.sender, _numbers[i], _price, issueIndex);\r\n            lotteryInfo[issueIndex].push(tokenId);\r\n            if (userInfo[msg.sender].length == 0) {\r\n                totalAddresses = totalAddresses + 1;\r\n            }\r\n            userInfo[msg.sender].push(tokenId);\r\n            totalAmount = totalAmount.add(_price);\r\n            lastTimestamp = block.timestamp;\r\n            totalPrice = totalPrice.add(_price);\r\n            uint64[keyLengthForEachBuy] memory numberIndexKey = generateNumberIndexKey(_numbers[i]);\r\n            for (uint k = 0; k < keyLengthForEachBuy; k++) {\r\n                userBuyAmountSum[issueIndex][numberIndexKey[k]]=userBuyAmountSum[issueIndex][numberIndexKey[k]].add(_price);\r\n            }\r\n        }\r\n        atari.safeTransferFrom(address(msg.sender), address(this), totalPrice);\r\n        emit MultiBuy(msg.sender, totalPrice);\r\n    }\r\n\r\n    function claimReward(uint256 _tokenId) external {\r\n        require(msg.sender == lotteryNFT.ownerOf(_tokenId), \"not from owner\");\r\n        require (!lotteryNFT.getClaimStatus(_tokenId), \"claimed\");\r\n        uint256 reward = getRewardView(_tokenId);\r\n        lotteryNFT.claimReward(_tokenId);\r\n        if(reward>0) {\r\n            atari.safeTransfer(address(msg.sender), reward);\r\n        }\r\n        emit Claim(msg.sender, _tokenId, reward);\r\n    }\r\n\r\n    function  multiClaim(uint256[] memory _tickets) external {\r\n        uint256 totalReward = 0;\r\n        for (uint i = 0; i < _tickets.length; i++) {\r\n            require (msg.sender == lotteryNFT.ownerOf(_tickets[i]), \"not from owner\");\r\n            require (!lotteryNFT.getClaimStatus(_tickets[i]), \"claimed\");\r\n            uint256 reward = getRewardView(_tickets[i]);\r\n            if(reward>0) {\r\n                totalReward = reward.add(totalReward);\r\n            }\r\n        }\r\n        lotteryNFT.multiClaimReward(_tickets);\r\n        if(totalReward>0) {\r\n            atari.safeTransfer(address(msg.sender), totalReward);\r\n        }\r\n        emit MultiClaim(msg.sender, totalReward);\r\n    }\r\n\r\n    function generateNumberIndexKey(uint8[4] memory number) public pure returns (uint64[keyLengthForEachBuy] memory) {\r\n        uint64[4] memory tempNumber;\r\n        tempNumber[0]=uint64(number[0]);\r\n        tempNumber[1]=uint64(number[1]);\r\n        tempNumber[2]=uint64(number[2]);\r\n        tempNumber[3]=uint64(number[3]);\r\n\r\n        uint64[keyLengthForEachBuy] memory result;\r\n        result[0] = tempNumber[0]*256*256*256*256*256*256 + 1*256*256*256*256*256 + tempNumber[1]*256*256*256*256 + 2*256*256*256 + tempNumber[2]*256*256 + 3*256 + tempNumber[3];\r\n\r\n        result[1] = tempNumber[0]*256*256*256*256 + 1*256*256*256 + tempNumber[1]*256*256 + 2*256+ tempNumber[2];\r\n        result[2] = tempNumber[0]*256*256*256*256 + 1*256*256*256 + tempNumber[1]*256*256 + 3*256+ tempNumber[3];\r\n        result[3] = tempNumber[0]*256*256*256*256 + 2*256*256*256 + tempNumber[2]*256*256 + 3*256 + tempNumber[3];\r\n        result[4] = 1*256*256*256*256*256 + tempNumber[1]*256*256*256*256 + 2*256*256*256 + tempNumber[2]*256*256 + 3*256 + tempNumber[3];\r\n\r\n        result[5] = tempNumber[0]*256*256 + 1*256+ tempNumber[1];\r\n        result[6] = tempNumber[0]*256*256 + 2*256+ tempNumber[2];\r\n        result[7] = tempNumber[0]*256*256 + 3*256+ tempNumber[3];\r\n        result[8] = 1*256*256*256 + tempNumber[1]*256*256 + 2*256 + tempNumber[2];\r\n        result[9] = 1*256*256*256 + tempNumber[1]*256*256 + 3*256 + tempNumber[3];\r\n        result[10] = 2*256*256*256 + tempNumber[2]*256*256 + 3*256 + tempNumber[3];\r\n\r\n        return result;\r\n    }\r\n\r\n    function calculateMatchingRewardAmount() internal view returns (uint256[4] memory) {\r\n        uint64[keyLengthForEachBuy] memory numberIndexKey = generateNumberIndexKey(winningNumbers);\r\n\r\n        uint256 totalAmout1 = userBuyAmountSum[issueIndex][numberIndexKey[0]];\r\n\r\n        uint256 sumForTotalAmout2 = userBuyAmountSum[issueIndex][numberIndexKey[1]];\r\n        sumForTotalAmout2 = sumForTotalAmout2.add(userBuyAmountSum[issueIndex][numberIndexKey[2]]);\r\n        sumForTotalAmout2 = sumForTotalAmout2.add(userBuyAmountSum[issueIndex][numberIndexKey[3]]);\r\n        sumForTotalAmout2 = sumForTotalAmout2.add(userBuyAmountSum[issueIndex][numberIndexKey[4]]);\r\n\r\n        uint256 totalAmout2 = sumForTotalAmout2.sub(totalAmout1.mul(4));\r\n\r\n        uint256 sumForTotalAmout3 = userBuyAmountSum[issueIndex][numberIndexKey[5]];\r\n        sumForTotalAmout3 = sumForTotalAmout3.add(userBuyAmountSum[issueIndex][numberIndexKey[6]]);\r\n        sumForTotalAmout3 = sumForTotalAmout3.add(userBuyAmountSum[issueIndex][numberIndexKey[7]]);\r\n        sumForTotalAmout3 = sumForTotalAmout3.add(userBuyAmountSum[issueIndex][numberIndexKey[8]]);\r\n        sumForTotalAmout3 = sumForTotalAmout3.add(userBuyAmountSum[issueIndex][numberIndexKey[9]]);\r\n        sumForTotalAmout3 = sumForTotalAmout3.add(userBuyAmountSum[issueIndex][numberIndexKey[10]]);\r\n\r\n        uint256 totalAmout3 = sumForTotalAmout3.add(totalAmout1.mul(6)).sub(sumForTotalAmout2.mul(3));\r\n \r\n        return [totalAmount, totalAmout1, totalAmout2, totalAmout3];\r\n    }\r\n\r\n    function getMatchingRewardAmount(uint256 _issueIndex, uint256 _matchingNumber) public view returns (uint256) {\r\n        return historyAmount[_issueIndex][5 - _matchingNumber];\r\n    }\r\n\r\n    function getTotalRewards(uint256 _issueIndex) public view returns(uint256) {\r\n        require (_issueIndex <= issueIndex, '_issueIndex <= issueIndex');\r\n\r\n        if(!drawed() && _issueIndex == issueIndex) {\r\n            return totalAmount;\r\n        }\r\n        return historyAmount[_issueIndex][0];\r\n    }\r\n\r\n    function getRewardView(uint256 _tokenId) public view returns(uint256) {\r\n        uint256 _issueIndex = lotteryNFT.getLotteryIssueIndex(_tokenId);\r\n        uint8[4] memory lotteryNumbers = lotteryNFT.getLotteryNumbers(_tokenId);\r\n        uint8[4] memory _winningNumbers = historyNumbers[_issueIndex];\r\n        require(_winningNumbers[0] != 0, \"not drawed\");\r\n\r\n        uint256 matchingNumber = 0;\r\n        for (uint i = 0; i < lotteryNumbers.length; i++) {\r\n            if (_winningNumbers[i] == lotteryNumbers[i]) {\r\n                matchingNumber= matchingNumber +1;\r\n            }\r\n        }\r\n        uint256 reward = 0;\r\n        if (matchingNumber > 1) {\r\n            uint256 amount = lotteryNFT.getLotteryAmount(_tokenId);\r\n            uint256 poolAmount = getTotalRewards(_issueIndex).mul(allocation[4-matchingNumber]).div(100);\r\n            reward = amount.mul(1e12).div(getMatchingRewardAmount(_issueIndex, matchingNumber)).mul(poolAmount);\r\n        }\r\n\r\n        //if nomatch 15% reward\r\n        if(nomatch[_issueIndex]>0){\r\n            uint256 amount = lotteryNFT.getLotteryAmount(_tokenId).mul(1e12);\r\n            reward = reward.add(amount.mul(nomatch[_issueIndex]).mul(15).div(10000));\r\n        }\r\n        return reward.div(1e12);\r\n    }\r\n\r\n    function getMatchingNumber (uint256 _tokenId) internal view returns(uint256) {\r\n        uint256 _issueIndex = lotteryNFT.getLotteryIssueIndex(_tokenId);\r\n        uint8[4] memory lotteryNumbers = lotteryNFT.getLotteryNumbers(_tokenId);\r\n        uint8[4] memory _winningNumbers = historyNumbers[_issueIndex];\r\n        require(_winningNumbers[0] != 0, \"not drawed\");\r\n\r\n        uint256 matchingNumber = 0;\r\n        for (uint i = 0; i < lotteryNumbers.length; i++) {\r\n            if (_winningNumbers[i] == lotteryNumbers[i]) {\r\n                matchingNumber= matchingNumber +1;\r\n            }\r\n        }\r\n        return matchingNumber;\r\n    }    \r\n\r\n\r\n    // Update admin address by the previous dev.\r\n    function setAdmin(address _adminAddress) public onlyOwner {\r\n        adminAddress = _adminAddress;\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function adminWithdraw(uint256 _amount) public onlyAdmin {\r\n        atari.safeTransfer(address(msg.sender), _amount);\r\n        emit DevWithdraw(msg.sender, _amount);\r\n    }\r\n\r\n    //safe balance withdraw\r\n    function adminWithdrawSafe() public onlyAdmin {\r\n        uint256 _amount = atari.balanceOf(address(this)).sub(getTotalRewards(issueIndex));\r\n        atari.safeTransfer(address(msg.sender),_amount);\r\n        emit DevWithdraw(msg.sender, _amount);\r\n    }\r\n\r\n    // Set the minimum price for one ticket\r\n    function setMinPrice(uint256 _price) external onlyAdmin {\r\n        minPrice = _price;\r\n    }\r\n\r\n    // Set the minimum price for one ticket\r\n    function setMaxNumber(uint8 _maxNumber) external onlyAdmin {\r\n        maxNumber = _maxNumber;\r\n    }\r\n\r\n    // Set the allocation for one reward\r\n    function setAllocation(uint8 _allcation1, uint8 _allcation2, uint8 _allcation3) external onlyAdmin {\r\n        allocation = [_allcation1, _allcation2, _allcation3];\r\n    }\r\n    \r\n    //function get userInfo\r\n    \r\n    function getUserInfo(address user) external view returns(uint256[] memory _userinfo){\r\n        _userinfo = userInfo[user];\r\n    }\r\n\r\n    function getHistoryNumbers(uint256 _issueIndex) external view returns(uint8[4] memory _historyNumbers){\r\n        _historyNumbers = historyNumbers[_issueIndex];\r\n    }\r\n    \r\n    function getHistoryAmounts(uint256 _issueIndex) external view returns(uint256[4] memory _historyAmount){\r\n        _historyAmount[0] = historyAmount[_issueIndex][0];\r\n        _historyAmount[1] = historyAmount[_issueIndex][1];\r\n        _historyAmount[2] = historyAmount[_issueIndex][2];\r\n        _historyAmount[3] = historyAmount[_issueIndex][3];\r\n    }\r\n}\r\n\r\ncontract multicall{\r\n    Lottery public lottery;\r\n    LotteryNFT public lotteryNFT;\r\n    \r\n    constructor(Lottery _lottery, LotteryNFT _lotteryNFT) public {\r\n        lottery = _lottery;\r\n        lotteryNFT = _lotteryNFT;\r\n    }\r\n    \r\n    function setPath(Lottery _lottery, LotteryNFT _lotteryNFT) external {\r\n        lottery = _lottery;\r\n        lotteryNFT = _lotteryNFT;        \r\n    }\r\n    \r\n    function ticketDatas(uint256[] memory _tickets)external view returns(uint256[] memory rewardAmounts,bool[] memory claimStatus,bool[] memory drawStatus,uint8[][] memory ticketNumber){\r\n        rewardAmounts= new uint256[](_tickets.length);\r\n        claimStatus = new bool[](_tickets.length);\r\n        drawStatus = new bool[](_tickets.length);\r\n        ticketNumber =new uint8[][](_tickets.length);\r\n        for (uint i = 0; i < _tickets.length; i++) {\r\n                    \r\n            uint256 _issueIndex = lotteryNFT.getLotteryIssueIndex(_tickets[i]);\r\n            \r\n            // ticket number\r\n            uint8[4] memory lotteryNumbers = lotteryNFT.getLotteryNumbers(_tickets[i]);\r\n            uint8[]  memory temp = new uint8[](4);\r\n            temp[0]=lotteryNumbers[0];\r\n            temp[1]=lotteryNumbers[1];\r\n            temp[2]=lotteryNumbers[2];\r\n            temp[3]=lotteryNumbers[3];\r\n            ticketNumber[i] = temp;      \r\n            \r\n            //winningNumbers\r\n            uint8[4] memory _winningNumbers =lottery.getHistoryNumbers(_issueIndex);\r\n            if(_winningNumbers[0] == 0)\r\n                {\r\n                    drawStatus[i] = false;\r\n                    rewardAmounts[i] = 0;\r\n                }\r\n            else \r\n                {\r\n                    drawStatus[i]=true;\r\n                    rewardAmounts[i] = lottery.getRewardView(_tickets[i]);\r\n                }\r\n            claimStatus[i] = lotteryNFT.getClaimStatus(_tickets[i]);\r\n        }\r\n    }\r\n    \r\n    function historyDatas(uint256[] memory _issueIndexs) external view returns(uint8[][] memory _historyNumbers ,uint256[][] memory _historyAmount) {\r\n        _historyNumbers = new uint8[][](_issueIndexs.length);\r\n        \r\n        for (uint i = 0; i < _issueIndexs.length; i++) {\r\n            uint8[4] memory _winningNumbers =lottery.getHistoryNumbers(_issueIndexs[i]);\r\n            uint8[] memory temp = new uint8[](4);\r\n            temp[0]=_winningNumbers[0];\r\n            temp[1]=_winningNumbers[1];\r\n            temp[2]=_winningNumbers[2];\r\n            temp[3]=_winningNumbers[3];\r\n            _historyNumbers[i]=temp;\r\n            \r\n        }\r\n        \r\n        _historyAmount = new uint256[][](_issueIndexs.length);\r\n        \r\n        for (uint i = 0; i < _issueIndexs.length; i++) {\r\n            uint256 issueIndex = lottery.issueIndex();\r\n            if(_issueIndexs[i]>issueIndex-1){\r\n                uint256[] memory temp = new uint256[](4);\r\n                temp[0]=0;\r\n                temp[1]=0;\r\n                temp[2]=0;\r\n                temp[3]=0;\r\n                _historyAmount[i]=temp;\r\n            }\r\n            else {\r\n                uint256[4] memory _winningAmounts =lottery.getHistoryAmounts(_issueIndexs[i]);\r\n                uint256[] memory temp = new uint256[](4);\r\n                temp[0]=_winningAmounts[0];\r\n                temp[1]=_winningAmounts[1];\r\n                temp[2]=_winningAmounts[2];\r\n                temp[3]=_winningAmounts[3];\r\n                _historyAmount[i]=temp;\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getClaimStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLotteryAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLotteryIssueIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLotteryNumbers\",\"outputs\":[{\"internalType\":\"uint8[4]\",\"name\":\"\",\"type\":\"uint8[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"issueIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryInfo\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"multiClaimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint8[4]\",\"name\":\"_lotteryNumbers\",\"type\":\"uint8[4]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_issueIndex\",\"type\":\"uint256\"}],\"name\":\"newLotteryItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LotteryNFT","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://43f4b897306f2d3f74f48a4335735212f943e6bf2e452599bf8f1a1d94a4550c"}]}