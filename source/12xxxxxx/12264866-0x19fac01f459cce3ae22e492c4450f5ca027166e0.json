{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract Plethori {\r\n    // @dev enter the value for each data required\r\n    // Token details would need to be inputed in the required fields makred \"*\"\r\n    // Note: only strings need the double quotation, uint details should be entered without the quotation marks\r\n    // Once the values have been set and contract deloyed, they cannot be changed\r\n    //Token totalSupply must have an additional 18 zeros because solidity does not make provision for decimals in code\r\n\r\n\r\n    // Token details\r\n    string public constant name = \"Plethori\";\r\n    string public constant symbol = \"PLE\";\r\n    uint8 public constant decimals = 18;  \r\n    uint256 public totalSupply = 100000000000000000000000000;\r\n    address public owner;\r\n\r\n\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n    \r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n    // The constructor sets the admin/owner which manages the tokens\r\n   constructor() public {  \r\n\tbalances[msg.sender] = totalSupply;\r\n    }  \r\n\r\n    \r\n    //Restricts select functions to onlyOwner\r\n    modifier onlyOwner(){\r\n    require(owner == msg.sender, \"You are not the owner\");\r\n        _;\r\n    }\r\n\r\n    // Functions\r\n    function totalSupply() external view returns (uint256) {\r\n\treturn totalSupply;\r\n    }\r\n\r\n    // *balanceOf reads the balance of the specified address\r\n    function balanceOf(address tokenOwner) external view returns (uint) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n\r\n    // allows a delegated smartcontract spend a specified amount of tokens on behalf of admin/owner\r\n    function transfer(address receiver, uint numTokens) external returns (bool) {\r\n        require(numTokens <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(numTokens);\r\n        balances[receiver] = balances[receiver].add(numTokens);\r\n        emit Transfer(msg.sender, receiver, numTokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // approves a delegated smartcontract to spend a specified amount of tokens on behalf of admin/owner\r\n    function approve(address delegate, uint numTokens) external returns (bool) {\r\n        allowed[msg.sender][delegate] = numTokens;\r\n        emit Approval(msg.sender, delegate, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address delegate) external view returns (uint) {\r\n        return allowed[_owner][delegate];\r\n    }\r\n\r\n\r\n    // allows a delegated smartcontract spend a specified amount of tokens on behalf of admin/owner\r\n    function transferFrom(address _owner, address buyer, uint numTokens) external returns (bool) {\r\n        require(numTokens <= balances[_owner]);    \r\n        require(numTokens <= allowed[_owner][msg.sender]);\r\n    \r\n        balances[_owner] = balances[owner].sub(numTokens);\r\n        allowed[_owner][msg.sender] = allowed[_owner][msg.sender].sub(numTokens);\r\n        balances[buyer] = balances[buyer].add(numTokens);\r\n        emit Transfer(_owner, buyer, numTokens);\r\n        return true;\r\n    }\r\n    \r\n    }\r\n    //SafeMath corrects overflow\r\n    library SafeMath { \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegate\",\"type\":\"address\"},{\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Plethori","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://1c8478cd18b62e8274062e253e00ef1f8963fc2b95c7f5f2659537d171087a86"}]}