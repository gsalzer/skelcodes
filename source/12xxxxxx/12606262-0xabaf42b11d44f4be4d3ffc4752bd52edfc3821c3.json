{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract KanaShop is Ownable {\r\n    address private kanaToken; //KanaToken address\r\n\r\n    string public _name = \"KanaToken shop\";\r\n    string public _symbol = \"KanaShop\";\r\n    uint8 private _decimalsKana = 8;\r\n    uint8 private _decimalsETH = 18;\r\n\r\n    uint256 _priceKanaAmount; //兑换比例；\r\n    uint256 _priceEthAmount; //兑换比例；\r\n\r\n    uint256 private _totalSellLimit = 200 * 10**uint256(_decimalsETH); //销售总量限制，200 ETH\r\n    uint256 private _totalsold; //已售出总量；\r\n\r\n    int256 _releaseIndex; //已释放数组记录的下标\r\n\r\n    struct OrderInfo {\r\n        address addrUser;\r\n        uint256 amount;\r\n        bool release; //是否释放\r\n        uint256 createTime; //购买时间；unixtime；精度，秒；\r\n        uint256 updateTime; //释放时间；unixtime；精度，秒；\r\n    }\r\n\r\n    struct OrderList {\r\n        address addrUser;\r\n        uint256[] arrOrderId;\r\n    }\r\n\r\n    uint256[] arrOrderTimeStamp; //订单时间戳数据；数组下标就是 orderId\r\n    mapping(uint256 => OrderInfo) private mapOrderInfo; //map<orderId, OrderInfo>\r\n    mapping(address => OrderList) private mapAddressOrderList; //map<address, OrderList>\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    event Approval(address indexed src, address indexed guy, uint256 wad);\r\n    event EventBuyKana(address indexed dst, uint256 wad);\r\n    event EventOwnerWithdraw(address indexed owner, uint256 amount);\r\n    event EventSetRawPrice(uint256 amountKana, uint256 amountEth);\r\n    event EventRelease(address indexed addr, uint256 amountKana);\r\n\r\n    constructor(address _kToken) public {\r\n        kanaToken = _kToken;\r\n        _totalsold = 0;\r\n        _releaseIndex = -1;\r\n\r\n        _priceKanaAmount = 0;\r\n        _priceEthAmount = 0;\r\n    }\r\n\r\n    fallback() external payable {\r\n        buyKana();\r\n    }\r\n\r\n    receive() external payable {\r\n        buyKana();\r\n    }\r\n\r\n    function buyKana() public payable {\r\n        uint256 min = 1 * 10**uint256(_decimalsETH);\r\n        uint256 max = 10 * 10**uint256(_decimalsETH);\r\n\r\n        uint256 tsOrder = now; //时间戳；\r\n\r\n        //单次购买限额\r\n        require(msg.value >= min && msg.value <= max, \"amount limit\");\r\n\r\n        //单地址购买总额限制\r\n        require(\r\n            balanceOf[msg.sender] + msg.value <= max,\r\n            \"address total limit error\"\r\n        );\r\n\r\n        //销售总量限制\r\n        require(_totalsold + msg.value <= _totalSellLimit, \"total sell limit\");\r\n\r\n        //订单信息\r\n        arrOrderTimeStamp.push(tsOrder);\r\n        uint256 currOrderId = arrOrderTimeStamp.length - 1;\r\n\r\n        mapOrderInfo[currOrderId].addrUser = msg.sender;\r\n        mapOrderInfo[currOrderId].amount = msg.value;\r\n        mapOrderInfo[currOrderId].release = false;\r\n        mapOrderInfo[currOrderId].createTime = tsOrder;\r\n        mapOrderInfo[currOrderId].updateTime = tsOrder;\r\n\r\n        //订单列表\r\n        mapAddressOrderList[msg.sender].addrUser = msg.sender;\r\n        mapAddressOrderList[msg.sender].arrOrderId.push(currOrderId);\r\n\r\n        //金额更新\r\n        balanceOf[msg.sender] += msg.value;\r\n        _totalsold += msg.value;\r\n\r\n        emit EventBuyKana(msg.sender, msg.value);\r\n    }\r\n\r\n    function getOrdersByAddress(address addrUser)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 totalOrders,\r\n            address[] memory addrUsers,\r\n            uint256[] memory amounts,\r\n            bool[] memory releases,\r\n            uint256[] memory createTimes,\r\n            uint256[] memory updateTimes\r\n        )\r\n    {\r\n        totalOrders = mapAddressOrderList[addrUser].arrOrderId.length;\r\n\r\n        address[] memory retAddrUsers = new address[](totalOrders);\r\n        uint256[] memory retAmounts = new uint256[](totalOrders);\r\n        bool[] memory retReleases = new bool[](totalOrders);\r\n        uint256[] memory retCreateTimes = new uint256[](totalOrders);\r\n        uint256[] memory retUpdateTimes = new uint256[](totalOrders);\r\n\r\n        for (uint256 i = 0; i < totalOrders; i++) {\r\n            uint256 currOrderId = mapAddressOrderList[addrUser].arrOrderId[i];\r\n\r\n            retAddrUsers[i] = mapOrderInfo[currOrderId].addrUser;\r\n            retAmounts[i] = mapOrderInfo[currOrderId].amount;\r\n            retReleases[i] = mapOrderInfo[currOrderId].release;\r\n            retCreateTimes[i] = mapOrderInfo[currOrderId].createTime;\r\n            retUpdateTimes[i] = mapOrderInfo[currOrderId].updateTime;\r\n        }\r\n\r\n        addrUsers = retAddrUsers;\r\n        amounts = retAmounts;\r\n        releases = retReleases;\r\n        createTimes = retCreateTimes;\r\n        updateTimes = retUpdateTimes;\r\n    }\r\n\r\n    function ownerWithdraw(uint256 wad) public onlyOwner {\r\n        payable(address(this.owner())).transfer(wad);\r\n        emit EventOwnerWithdraw(address(this.owner()), wad);\r\n    }\r\n\r\n    function release() public onlyOwner {\r\n        //     return IERC20(kanaToken).balanceOf(address(this));\r\n\r\n        require(_priceKanaAmount != 0, \"need to set price of kana\");\r\n        require(_priceEthAmount != 0, \"need to set price of eth\");\r\n\r\n        uint256 currIndex = uint256(_releaseIndex + 1);\r\n        for (uint256 i = currIndex; i < arrOrderTimeStamp.length; i++) {\r\n            if (true == mapOrderInfo[i].release) continue;\r\n\r\n            //兑换计算\r\n            uint256 amountKanaRelease =\r\n                (mapOrderInfo[i].amount * _priceKanaAmount) / _priceEthAmount;\r\n\r\n            IERC20(kanaToken).transfer(\r\n                mapOrderInfo[i].addrUser,\r\n                amountKanaRelease\r\n            );\r\n            mapOrderInfo[i].release = true;\r\n            mapOrderInfo[i].updateTime = now;\r\n            currIndex = i;\r\n\r\n            emit EventRelease(mapOrderInfo[i].addrUser, amountKanaRelease);\r\n        }\r\n\r\n        _releaseIndex = int256(currIndex);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function totalSellLimit() public view returns (uint256) {\r\n        return _totalSellLimit;\r\n    }\r\n\r\n    function totalSold() public view returns (uint256) {\r\n        return _totalsold;\r\n    }\r\n\r\n    function approve(address guy, uint256 wad) public returns (bool) {\r\n        allowance[msg.sender][guy] = wad;\r\n        emit Approval(msg.sender, guy, wad);\r\n        return true;\r\n    }\r\n\r\n    function decimalsETH() public view returns (uint8) {\r\n        return _decimalsETH;\r\n    }\r\n\r\n    function decimalsKana() public view returns (uint8) {\r\n        return _decimalsKana;\r\n    }\r\n\r\n    function setRawPrice(uint256 amountKana, uint256 amountEth)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_getRate(amountKana, amountEth) >= 1, \"kana price too high\");\r\n\r\n        _priceKanaAmount = amountKana;\r\n        _priceEthAmount = amountEth;\r\n    }\r\n\r\n    function getRawPrice()\r\n        public\r\n        view\r\n        returns (uint256 amountKana, uint256 amountEth)\r\n    {\r\n        amountKana = _priceKanaAmount;\r\n        amountEth = _priceEthAmount;\r\n    }\r\n\r\n    function _getRate(uint256 amountKana, uint256 amountEth)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(_decimalsETH >= _decimalsKana, \"decimal error\");\r\n\r\n        return\r\n            (amountKana * 10**uint256(_decimalsETH - _decimalsKana)) /\r\n            amountEth;\r\n    }\r\n\r\n    function getRate() public view returns (uint256) {\r\n        return _getRate(_priceKanaAmount, _priceEthAmount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"EventBuyKana\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EventOwnerWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountKana\",\"type\":\"uint256\"}],\"name\":\"EventRelease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountKana\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountEth\",\"type\":\"uint256\"}],\"name\":\"EventSetRawPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyKana\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalsETH\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalsKana\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addrUser\",\"type\":\"address\"}],\"name\":\"getOrdersByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalOrders\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"addrUsers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"releases\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"createTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"updateTimes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRawPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountKana\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountEth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"ownerWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountKana\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountEth\",\"type\":\"uint256\"}],\"name\":\"setRawPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"KanaShop","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004ba7bc3706807571f8b5dd325a70864457fbe205","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://152a73eede8ceef7300b4c13267a851b152f72bafbfae1ca6fc9c6e6993a5881"}]}