{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\nlibrary Math {\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function decimals() external view returns (uint256);\r\n    function symbol() external view returns (string memory);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface Oracle {\r\n    struct ReferenceData {\r\n        uint256 rate; // base/quote exchange rate, multiplied by 1e18.\r\n        uint256 lastUpdatedBase; // UNIX epoch of the last time when base price gets updated.\r\n        uint256 lastUpdatedQuote; // UNIX epoch of the last time when quote price gets updated.\r\n    }\r\n    \r\n    function getReferenceData(string memory _base, string memory _quote)\r\n        external\r\n        view\r\n        returns (ReferenceData memory);\r\n}\r\n\r\ninterface cToken {\r\n    function underlying() external view returns (address);\r\n}\r\n\r\ninterface comptroller {\r\n    function getAllMarkets() external view returns (address[] memory);\r\n    function markets(address _market) external view returns (bool isListed, uint256 collateralFactorMantissa, bool isComped);\r\n}\r\n\r\ninterface ibtroller {\r\n    function getAllMarkets() external view returns (address[] memory);\r\n    function markets(address _market) external view returns (bool isListed, uint256 collateralFactorMantissa);\r\n}\r\n\r\ninterface aavecore {\r\n    struct ReserveConfigurationMap {\r\n        //bit 0-15: LTV\r\n        //bit 16-31: Liq. threshold\r\n        //bit 32-47: Liq. bonus\r\n        //bit 48-55: Decimals\r\n        //bit 56: Reserve is active\r\n        //bit 57: reserve is frozen\r\n        //bit 58: borrowing is enabled\r\n        //bit 59: stable rate borrowing enabled\r\n        //bit 60-63: reserved\r\n        //bit 64-79: reserve factor\r\n        uint256 data;\r\n    }\r\n    function getReserveConfiguration(address _market) external view returns (uint, uint, uint, bool);\r\n    function getConfiguration(address _market) external view returns (ReserveConfigurationMap memory);\r\n}\r\n\r\ninterface vaultparams {\r\n    function initialCollateralRatio(address _token) external view returns (uint);\r\n}\r\n\r\ninterface SushiswapV2Router02 {\r\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ncontract FixedUSD {\r\n    string public constant name = \"Fixed USD\";\r\n    string public constant symbol = \"USDF\";\r\n    uint8 public constant decimals = 18;\r\n    \r\n    address constant _oracle = 0xDA7a001b254CD22e46d3eAB04d937489c93174C3;\r\n    address constant _stable = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    address constant _router = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\r\n    string constant _quote = \"USD\";\r\n    \r\n    uint constant _BASE = 100;\r\n    uint constant _LIQUIDITY_THRESHOLD = 5;\r\n    uint constant _LIQUIDATION_VALUE = 90;\r\n    uint constant _CACHE = 1 days;\r\n    uint constant _minLiquidity = 500000e18;\r\n    \r\n    /// @notice Total number of tokens in circulation\r\n    uint public totalSupply = 0;\r\n    \r\n    mapping(address => mapping (address => uint)) internal allowances;\r\n    mapping(address => uint) internal balances;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint amount);\r\n    event Approval(address indexed owner, address indexed spender, uint amount);\r\n    \r\n    mapping(address => mapping(address => uint)) public credit;\r\n    mapping(address => mapping(address => uint)) public collateral;\r\n    \r\n    mapping(address => uint) public credits;\r\n    mapping(address => uint) public collaterals;\r\n    \r\n    mapping(address => uint) public ltvs;\r\n    mapping(address => uint) _ltvCaches;\r\n    \r\n    mapping(address => uint) public liquidities;\r\n    mapping(address => uint) _liquidityCaches;\r\n    \r\n    mapping(address => uint) public fallbackQuote;\r\n    \r\n    uint public arb;\r\n    \r\n    event Mint(address indexed from, address indexed asset, address indexed to, uint amount);\r\n    event Burn(address indexed from, address indexed asset, address indexed to, uint amount);\r\n    event Liquidate(address indexed from, address indexed asset, address indexed to, uint amount);\r\n    \r\n    \r\n    function validateLTV(uint __ltv) public pure returns (bool) {\r\n        if ((__ltv == 60) || (__ltv == 65) || (__ltv == 70) || (__ltv == 75)) {\r\n            return true;\r\n        } else if ((__ltv == 80) || (__ltv == 85) || __ltv >= 90) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    function gentleRepaymentCalculator(uint __ltv, uint debt, uint value) public pure returns (uint repayment) {\r\n        if (__ltv == 60) {\r\n            return Math.min((debt - value) * 310 / _BASE, debt);\r\n        } else if (__ltv == 65) {\r\n            return Math.min((debt - value) * 370 / _BASE, debt);\r\n        } else if (__ltv == 70) {\r\n            return Math.min((debt - value) * 460 / _BASE, debt);\r\n        } else if (__ltv == 75) {\r\n            return Math.min((debt - value) * 610 / _BASE, debt);\r\n        } else if (__ltv == 80) {\r\n            return Math.min((debt - value) * 910 / _BASE, debt);\r\n        } else if (__ltv == 85) {\r\n            return Math.min((debt - value) * 1810 / _BASE, debt);\r\n        } else if (__ltv >= 90) {\r\n            return debt;\r\n        }\r\n    }\r\n    \r\n    function _lookup(address quoted, uint amount) internal returns (uint) {\r\n        uint _quoted = Oracle(_oracle).getReferenceData(IERC20(quoted).symbol(), _quote).rate;\r\n        if (_quoted == 0 && fallbackQuote[quoted] != 0) {\r\n            _quoted = fallbackQuote[quoted];\r\n        } else {\r\n            fallbackQuote[quoted] = _quoted;\r\n        }\r\n        return  _quoted * (amount * _ltv(quoted) / _BASE) / 10 ** IERC20(quoted).decimals();\r\n    }\r\n    \r\n    function lookup(address quoted, uint amount) public view returns (uint) {\r\n        uint _quoted = Oracle(_oracle).getReferenceData(IERC20(quoted).symbol(), _quote).rate;\r\n        if (_quoted == 0 && fallbackQuote[quoted] != 0) {\r\n            _quoted = fallbackQuote[quoted];\r\n        }\r\n        return _quoted * (amount * ltvs[quoted] / _BASE) / 10 ** IERC20(quoted).decimals();\r\n    }\r\n    \r\n    function lookup(address quoted) external view returns (uint) {\r\n        return Oracle(_oracle).getReferenceData(IERC20(quoted).symbol(), _quote).rate;\r\n    }\r\n    \r\n    function lookupLiq(address quoted, uint amount) public view returns (uint) {\r\n        return Oracle(_oracle).getReferenceData(IERC20(quoted).symbol(), _quote).rate * (amount * _LIQUIDATION_VALUE / _BASE) / 10 ** IERC20(quoted).decimals();\r\n    }\r\n    \r\n    function mintArb(uint amount) external {\r\n        _mintArb(amount, msg.sender);\r\n    }\r\n    \r\n    function mintArb(uint amount, address recipient) external {\r\n        _mintArb(amount, recipient);\r\n    }\r\n    \r\n    function _mintArb(uint amount, address recipient) internal {\r\n        _safeTransferFrom(_stable, msg.sender, address(this), amount);\r\n        _mint(recipient, amount);\r\n        arb += amount;\r\n        emit Mint(msg.sender, _stable, recipient, amount);\r\n    }\r\n    \r\n    function burnArb(uint amount) external {\r\n        _burnArb(amount, msg.sender);\r\n    }\r\n    \r\n    function burnArb(uint amount, address recipient) external {\r\n        _burnArb(amount, recipient);\r\n    }\r\n    \r\n    function _burnArb(uint amount, address recipient) internal {\r\n        _burn(msg.sender, amount);\r\n        _safeTransfer(_stable, recipient, amount);\r\n        arb -= amount;\r\n        emit Burn(msg.sender, _stable, recipient, amount);\r\n    }\r\n    \r\n    function mint(address asset, uint amount, uint minted) external {\r\n        _mint(asset, amount, minted, msg.sender);\r\n    }\r\n    \r\n    function mint(address asset, uint amount, uint minted, address recipient) external {\r\n        _mint(asset, amount, minted, recipient);\r\n    }\r\n    \r\n    function _mint(address asset, uint amount, uint minted, address recipient) internal {\r\n        if (amount > 0) {\r\n            _safeTransferFrom(asset, msg.sender, address(this), amount);\r\n        }\r\n        \r\n        collateral[msg.sender][asset] += amount;\r\n        collaterals[asset] += amount;\r\n        \r\n        credit[msg.sender][asset] += minted;\r\n        credits[asset] += minted;\r\n        \r\n        require(_liquidity(asset, collaterals[asset]) >= credits[asset]);\r\n        require(_lookup(asset, collateral[msg.sender][asset]) >= credit[msg.sender][asset]);\r\n        _mint(recipient, minted);\r\n        emit Mint(msg.sender, asset, recipient, amount);\r\n    }\r\n    \r\n    function burn(address asset, uint amount, uint burned) external {\r\n        _burn(asset, amount, burned, msg.sender);\r\n    }\r\n    \r\n    function burn(address asset, uint amount, uint burned, address recipient) external {\r\n        _burn(asset, amount, burned, recipient);\r\n    }\r\n    \r\n    function _burn(address asset, uint amount, uint burned, address recipient) internal {\r\n        _burn(msg.sender, burned);\r\n        \r\n        credit[msg.sender][asset] -= burned;\r\n        credits[asset] -= burned;\r\n        collateral[msg.sender][asset] -= amount;\r\n        collaterals[asset] -= amount;\r\n        \r\n        require(lookup(asset, collateral[msg.sender][asset]) >= credit[msg.sender][asset]);\r\n        \r\n        if (amount > 0) {\r\n            _safeTransfer(asset, recipient, amount);\r\n        }\r\n        emit Burn(msg.sender, asset, recipient, amount);\r\n    }\r\n    \r\n    function repaymentCalculator(address owner, address asset) external view returns (uint) {\r\n        uint _nominal = collateral[owner][asset];\r\n        \r\n        uint _backed = lookup(asset, _nominal);\r\n        uint _debt = credit[owner][asset];\r\n        if (_backed < _debt) {\r\n            return gentleRepaymentCalculator(ltvs[asset], _debt, _backed);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    function paymentCalculator(address owner, address asset) external view returns (uint) {\r\n        uint _nominal = collateral[owner][asset];\r\n        \r\n        uint _backed = lookup(asset, _nominal);\r\n        uint _debt = credit[owner][asset];\r\n        if (_backed < _debt) {\r\n            uint _repayment = gentleRepaymentCalculator(ltvs[asset], _debt, _backed);\r\n            return Math.min(_nominal * _repayment / lookupLiq(asset, _nominal), _nominal);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    function liquidate(address owner, address asset, uint max) external {\r\n        uint _nominal = collateral[owner][asset];\r\n        \r\n        uint _backed = _lookup(asset, _nominal);\r\n        uint _debt = credit[owner][asset];\r\n        require(_backed < _debt);\r\n        \r\n        uint _repayment = gentleRepaymentCalculator(_ltv(asset), _debt, _backed);\r\n        require(_repayment <= max);\r\n        uint _payment = Math.min(_nominal * _repayment / lookupLiq(asset, _nominal), _nominal);\r\n        \r\n        _burn(msg.sender, _repayment);\r\n        \r\n        credit[owner][asset] -= _repayment;\r\n        credits[asset] -= _repayment;\r\n        collateral[owner][asset] -= _payment;\r\n        collaterals[asset] -= _payment;\r\n        \r\n        require(_lookup(asset, collateral[owner][asset]) >= credit[owner][asset]);\r\n        \r\n        _safeTransfer(asset, msg.sender, _payment);\r\n        emit Liquidate(msg.sender, asset, owner, _repayment);\r\n    }\r\n    \r\n    function _mint(address dst, uint amount) internal {\r\n        // mint the amount\r\n        totalSupply += amount;\r\n        // transfer the amount to the recipient\r\n        balances[dst] += amount;\r\n        emit Transfer(address(0), dst, amount);\r\n    }\r\n    \r\n    function _burn(address dst, uint amount) internal {\r\n        // burn the amount\r\n        totalSupply -= amount;\r\n        // transfer the amount from the recipient\r\n        balances[dst] -= amount;\r\n        emit Transfer(dst, address(0), amount);\r\n    }\r\n    \r\n    function allowance(address account, address spender) external view returns (uint) {\r\n        return allowances[account][spender];\r\n    }\r\n\r\n    function approve(address spender, uint amount) external returns (bool) {\r\n        allowances[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address account) external view returns (uint) {\r\n        return balances[account];\r\n    }\r\n\r\n    function transfer(address dst, uint amount) external returns (bool) {\r\n        _transferTokens(msg.sender, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint amount) external returns (bool) {\r\n        address spender = msg.sender;\r\n        uint spenderAllowance = allowances[src][spender];\r\n\r\n        if (spender != src && spenderAllowance != type(uint).max) {\r\n            uint newAllowance = spenderAllowance - amount;\r\n            allowances[src][spender] = newAllowance;\r\n\r\n            emit Approval(src, spender, newAllowance);\r\n        }\r\n\r\n        _transferTokens(src, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transferTokens(address src, address dst, uint amount) internal {\r\n        balances[src] -= amount;\r\n        balances[dst] += amount;\r\n        \r\n        emit Transfer(src, dst, amount);\r\n    }\r\n    \r\n    function _safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n    \r\n    function _safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n    \r\n    address constant _aavev2 = address(0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9);\r\n    address constant _ib = address(0xAB1c342C7bf5Ec5F02ADEA1c2270670bCa144CbB);\r\n    address constant _unit = address(0x203153522B9EAef4aE17c6e99851EE7b2F7D312E);\r\n    address constant _weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    \r\n    uint256 constant _LTV_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000;\r\n    \r\n    function _getParamsMemory(aavecore.ReserveConfigurationMap memory self) internal pure returns (uint256) { \r\n        return (self.data & ~_LTV_MASK);\r\n    }\r\n    \r\n    function _lookupMarket(address _core, address _token) internal view returns (address) {\r\n        address[] memory _list = comptroller(_core).getAllMarkets();\r\n        for (uint i = 0; i < _list.length; i++) {\r\n            if (_list[i] != address(0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5) && _list[i] != address(0xD06527D5e56A3495252A528C4987003b712860eE)) {\r\n                if (cToken(_list[i]).underlying() == _token) {\r\n                    return _list[i];\r\n                }\r\n            }\r\n        }\r\n        return address(0x0);\r\n    }\r\n    \r\n    function _liquidityV(address token, uint amount) internal view returns (uint, bool) {\r\n        if (block.timestamp > _liquidityCaches[token]) {\r\n            if (token == _weth) {\r\n                return (_liquidityVWETH(amount), true);\r\n            } else {\r\n                address[] memory _path = new address[](3);\r\n                _path[0] = token;\r\n                _path[1] = _weth;\r\n                _path[2] = _stable;\r\n                uint _liq = SushiswapV2Router02(_router).getAmountsOut(amount, _path)[2];\r\n                uint _liquid = liquidities[token];\r\n                if (_liq > _liquid) {\r\n                    _liquid += _liquid * _LIQUIDITY_THRESHOLD / _BASE;\r\n                    _liq = Math.min(_liq, _liquid);\r\n                    _liq = _liq < _minLiquidity ? _minLiquidity : _liq;\r\n                }\r\n                return (_liq, true);\r\n            }\r\n        } else {\r\n            return (liquidities[token], false);\r\n        }\r\n    }\r\n    \r\n    function _liquidityVWETH(uint amount) internal view returns (uint) {\r\n        address[] memory _path = new address[](2);\r\n        _path[0] = _weth;\r\n        _path[1] = _stable;\r\n        uint _liq = SushiswapV2Router02(_router).getAmountsOut(amount, _path)[1];\r\n        uint _liquid = liquidities[_weth];\r\n        if (_liq > _liquid) {\r\n            _liquid += _liquid * _LIQUIDITY_THRESHOLD / _BASE;\r\n            _liq = Math.min(_liq, _liquid);\r\n            _liq = _liq < _minLiquidity ? _minLiquidity : _liq;\r\n        }\r\n        return _liq;\r\n    }\r\n    \r\n    function _liquidity(address token, uint amount) internal returns (uint) {\r\n        if (_liquidityCaches[token] == 0) {\r\n            liquidities[token] = _minLiquidity;\r\n        }\r\n        (uint _val, bool _updated) = _liquidityV(token, amount);\r\n        if (_updated) {\r\n            _liquidityCaches[token] = block.timestamp + _CACHE;\r\n            liquidities[token] = _val;\r\n        }\r\n        return _val;\r\n    }\r\n    \r\n    function liquidity(address token, uint amount) external view returns (uint val) {\r\n        (val,) = _liquidityV(token, amount);\r\n    }\r\n    \r\n    function _getLTVIB(address token) internal view returns (uint ib) {\r\n        (,ib) = ibtroller(_ib).markets(_lookupMarket(_ib, token));\r\n        ib = ib / 1e16;\r\n    }\r\n    \r\n    function _getLTVUnit(address _token) internal view returns (uint unit) {\r\n        unit = vaultparams(_unit).initialCollateralRatio(_token);\r\n    }\r\n    \r\n    function _getLTVAaveV2(address token) internal view returns (uint aavev2) {\r\n        (aavev2) = _getParamsMemory(aavecore(_aavev2).getConfiguration(token));\r\n        aavev2 = aavev2 / 1e2;\r\n    }\r\n    \r\n    function _ltv(address token) internal returns (uint) {\r\n        (uint _val, bool _updated) = _ltvV(token);\r\n        if (_updated) {\r\n            _ltvCaches[token] = block.timestamp + _CACHE;\r\n            ltvs[token] = _val;\r\n        }\r\n        return _val;\r\n    }\r\n    \r\n    function ltv(address token) external view returns (uint val) {\r\n        (val,) = _ltvV(token);\r\n    }\r\n    \r\n    function _ltvV(address token) internal view returns (uint, bool) {\r\n        if (block.timestamp > _ltvCaches[token]) {\r\n            uint _max = 0;\r\n            uint _tmp =  _getLTVIB(token);\r\n            if (_tmp > _max) {\r\n                _max = _tmp;\r\n            }\r\n            _tmp = _getLTVAaveV2(token);\r\n            if (_tmp > _max) {\r\n                _max = _tmp;\r\n            }\r\n            _tmp = _getLTVUnit(token);\r\n            if (_tmp > _max) {\r\n                _max = _tmp;\r\n            }\r\n            _max = _max / 5 * 5;\r\n            if (_max < 60) {\r\n                _max = 0;\r\n            }\r\n            return (_max, true);\r\n        } else {\r\n            return (ltvs[token], false);\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burned\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burned\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnArb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"burnArb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collaterals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"credit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"credits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fallbackQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"gentleRepaymentCalculator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"repayment\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidities\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"quoted\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"quoted\",\"type\":\"address\"}],\"name\":\"lookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"quoted\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lookupLiq\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ltv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ltvs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"mintArb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintArb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"paymentCalculator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"repaymentCalculator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__ltv\",\"type\":\"uint256\"}],\"name\":\"validateLTV\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"FixedUSD","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f448fd3c46f2001b91760f6d8f900b137ff8f1c2aedb6b4d965b037f168a1ba3"}]}