{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n *\r\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\r\n * metering changes introduced in the Istanbul hardfork.\r\n */\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: contracts/XDEX.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\ncontract XDEX is ERC20, ERC20Detailed {\r\n    address public core;\r\n\r\n    event SET_CORE(address indexed core, address indexed _core);\r\n\r\n    constructor() public ERC20Detailed(\"XDEFI Governance Token\", \"XDEX\", 18) {\r\n        core = msg.sender;\r\n    }\r\n\r\n    modifier onlyCore() {\r\n        require(msg.sender == core, \"Not Authorized\");\r\n        _;\r\n    }\r\n\r\n    function setCore(address _core) public onlyCore {\r\n        emit SET_CORE(core, _core);\r\n        core = _core;\r\n    }\r\n\r\n    function mint(address account, uint256 amount) public onlyCore {\r\n        _mint(account, amount);\r\n    }\r\n\r\n    function burnForSelf(uint256 amount) external {\r\n        _burn(msg.sender, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IXHalfLife.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\ninterface IXHalfLife {\r\n    function createStream(\r\n        address token,\r\n        address recipient,\r\n        uint256 depositAmount,\r\n        uint256 startBlock,\r\n        uint256 kBlock,\r\n        uint256 unlockRatio,\r\n        bool cancelable\r\n    ) external returns (uint256);\r\n\r\n    function createEtherStream(\r\n        address recipient,\r\n        uint256 startBlock,\r\n        uint256 kBlock,\r\n        uint256 unlockRatio,\r\n        bool cancelable\r\n    ) external payable returns (uint256);\r\n\r\n    function hasStream(uint256 streamId) external view returns (bool);\r\n\r\n    function getStream(uint256 streamId)\r\n        external\r\n        view\r\n        returns (\r\n            address sender,\r\n            address recipient,\r\n            address token,\r\n            uint256 depositAmount,\r\n            uint256 startBlock,\r\n            uint256 kBlock,\r\n            uint256 remaining,\r\n            uint256 withdrawable,\r\n            uint256 unlockRatio,\r\n            uint256 lastRewardBlock,\r\n            bool cancelable\r\n        );\r\n\r\n    function balanceOf(uint256 streamId)\r\n        external\r\n        view\r\n        returns (uint256 withdrawable, uint256 remaining);\r\n\r\n    function withdrawFromStream(uint256 streamId, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function cancelStream(uint256 streamId) external returns (bool);\r\n\r\n    function singleFundStream(uint256 streamId, uint256 amount)\r\n        external\r\n        payable\r\n        returns (bool);\r\n\r\n    function lazyFundStream(\r\n        uint256 streamId,\r\n        uint256 amount,\r\n        uint256 blockHeightDiff\r\n    ) external payable returns (bool);\r\n\r\n    function getVersion() external pure returns (bytes32);\r\n}\r\n\r\n// File: contracts/XdexStream.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\ncontract XdexStream is ReentrancyGuard {\r\n    uint256 constant ONE = 10**18;\r\n\r\n    //The XDEX Token!\r\n    address public xdex;\r\n    address public xdexFarmMaster;\r\n\r\n    /**\r\n     * @notice An interface of XHalfLife, the contract responsible for creating, funding and withdrawing from streams.\r\n     * No one could cancle the xdex resward stream except the recipient, because the stream sender is this contract.\r\n     */\r\n    IXHalfLife public halflife;\r\n\r\n    struct LockStream {\r\n        address depositor;\r\n        bool isEntity;\r\n        uint256 streamId;\r\n    }\r\n\r\n    //unlock ratio is 0.1% for both Voting and Normal Pool\r\n    uint256 private constant unlockRatio = 1;\r\n\r\n    //unlock k block for Voting Pool\r\n    uint256 private constant unlockKBlocksV = 540;\r\n    // key: recipient, value: Locked Stream\r\n    mapping(address => LockStream) private votingStreams;\r\n\r\n    //funds for Normal Pool\r\n    uint256 private constant unlockKBlocksN = 60;\r\n    // key: recipient, value: Locked Stream\r\n    mapping(address => LockStream) private normalStreams;\r\n\r\n    // non cancelable farm streams\r\n    bool private constant cancelable = false;\r\n\r\n    /**\r\n     * @notice User can have at most one votingStream and one normalStream.\r\n     * @param streamType The type of stream: 0 is votingStream, 1 is normalStream;\r\n     */\r\n    modifier lockStreamExists(address who, uint256 streamType) {\r\n        bool found = false;\r\n        if (streamType == 0) {\r\n            //voting stream\r\n            found = votingStreams[who].isEntity;\r\n        } else if (streamType == 1) {\r\n            //normal stream\r\n            found = normalStreams[who].isEntity;\r\n        }\r\n\r\n        require(found, \"the lock stream does not exist\");\r\n        _;\r\n    }\r\n\r\n    modifier validStreamType(uint256 streamType) {\r\n        require(\r\n            streamType == 0 || streamType == 1,\r\n            \"invalid stream type: 0 or 1\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _xdex,\r\n        address _halfLife,\r\n        address _farmMaster\r\n    ) public {\r\n        xdex = _xdex;\r\n        halflife = IXHalfLife(_halfLife);\r\n        xdexFarmMaster = _farmMaster;\r\n    }\r\n\r\n    /**\r\n     * If the user has VotingStream or has NormalStream.\r\n     */\r\n    function hasStream(address who)\r\n        public\r\n        view\r\n        returns (bool hasVotingStream, bool hasNormalStream)\r\n    {\r\n        hasVotingStream = votingStreams[who].isEntity;\r\n        hasNormalStream = normalStreams[who].isEntity;\r\n    }\r\n\r\n    /**\r\n     * @notice Get a user's voting or normal stream id.\r\n     * @dev stream id must > 0.\r\n     * @param streamType The type of stream: 0 is votingStream, 1 is normalStream;\r\n     */\r\n    function getStreamId(address who, uint256 streamType)\r\n        public\r\n        view\r\n        lockStreamExists(who, streamType)\r\n        returns (uint256 streamId)\r\n    {\r\n        if (streamType == 0) {\r\n            return votingStreams[who].streamId;\r\n        } else if (streamType == 1) {\r\n            return normalStreams[who].streamId;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a new stream funded by `msg.sender` and paid towards to `recipient`.\r\n     * @param streamType The type of stream: 0 is votingStream, 1 is normalStream;\r\n     */\r\n    function createStream(\r\n        address recipient,\r\n        uint256 depositAmount,\r\n        uint256 streamType,\r\n        uint256 startBlock\r\n    )\r\n        external\r\n        nonReentrant\r\n        validStreamType(streamType)\r\n        returns (uint256 streamId)\r\n    {\r\n        require(msg.sender == xdexFarmMaster, \"only farmMaster could create\");\r\n        require(recipient != address(0), \"stream to the zero address\");\r\n        require(recipient != address(this), \"stream to the contract itself\");\r\n        require(recipient != msg.sender, \"stream to the caller\");\r\n        require(depositAmount > 0, \"depositAmount is zero\");\r\n        require(startBlock >= block.number, \"start block before block.number\");\r\n\r\n        if (streamType == 0) {\r\n            require(\r\n                !(votingStreams[recipient].isEntity),\r\n                \"voting stream exists\"\r\n            );\r\n        }\r\n        if (streamType == 1) {\r\n            require(\r\n                !(normalStreams[recipient].isEntity),\r\n                \"normal stream exists\"\r\n            );\r\n        }\r\n\r\n        uint256 unlockKBlocks = unlockKBlocksN;\r\n        if (streamType == 0) {\r\n            unlockKBlocks = unlockKBlocksV;\r\n        }\r\n\r\n        /* Approve the XHalflife contract to spend. */\r\n        IERC20(xdex).approve(address(halflife), depositAmount);\r\n\r\n        /* Transfer the tokens to this contract. */\r\n        IERC20(xdex).transferFrom(msg.sender, address(this), depositAmount);\r\n\r\n        streamId = halflife.createStream(\r\n            xdex,\r\n            recipient,\r\n            depositAmount,\r\n            startBlock,\r\n            unlockKBlocks,\r\n            unlockRatio,\r\n            cancelable\r\n        );\r\n\r\n        if (streamType == 0) {\r\n            votingStreams[recipient] = LockStream({\r\n                depositor: msg.sender,\r\n                isEntity: true,\r\n                streamId: streamId\r\n            });\r\n        } else if (streamType == 1) {\r\n            normalStreams[recipient] = LockStream({\r\n                depositor: msg.sender,\r\n                isEntity: true,\r\n                streamId: streamId\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Send funds to the stream\r\n     * @param streamId The given stream id;\r\n     * @param amount New amount fund to add;\r\n     * @param blockHeightDiff diff of block.number and farmPool's lastRewardBlock;\r\n     */\r\n    function fundsToStream(\r\n        uint256 streamId,\r\n        uint256 amount,\r\n        uint256 blockHeightDiff\r\n    ) public returns (bool result) {\r\n        require(amount > 0, \"amount is zero\");\r\n\r\n        /* Approve the XHalflife contract to spend. */\r\n        IERC20(xdex).approve(address(halflife), amount);\r\n\r\n        /* Transfer the tokens to this contract. */\r\n        IERC20(xdex).transferFrom(msg.sender, address(this), amount);\r\n\r\n        result = halflife.lazyFundStream(streamId, amount, blockHeightDiff);\r\n    }\r\n}\r\n\r\n// File: contracts/FarmMaster.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// FarmMaster is the master of xDefi Farms.\r\ncontract FarmMaster is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 private constant ONE = 10**18;\r\n    uint256 private constant StreamTypeVoting = 0;\r\n    uint256 private constant StreamTypeNormal = 1;\r\n\r\n    //min and max lpToken count in one pool\r\n    uint256 private constant LpTokenMinCount = 1;\r\n    uint256 private constant LpTokenMaxCount = 8;\r\n\r\n    uint256 private constant LpRewardFixDec = 1e12;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt.\r\n    }\r\n\r\n    struct LpTokenInfo {\r\n        IERC20 lpToken; // Address of LP token contract.\r\n        // lpTokenType, Type of LP token\r\n        //      Type0: XPT;\r\n        //      Type1: UNI-LP;\r\n        //      Type2: BPT;\r\n        //      Type3: XLP;\r\n        uint256 lpTokenType;\r\n        uint256 lpFactor;\r\n        uint256 lpAccPerShare; // Accumulated XDEX per share, times 1e12. See below.\r\n        mapping(address => UserInfo) userInfo; // Info of each user that stakes LP tokens.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        LpTokenInfo[] LpTokenInfos;\r\n        uint256 poolFactor; // How many allocation factor assigned to this pool. XDEX to distribute per block.\r\n        uint256 lastRewardBlock; // Last block number that XDEX distribution occurs.\r\n    }\r\n\r\n    //key: hash(pid + lp address), value: index\r\n    mapping(bytes32 => uint256) private lpIndexInPool;\r\n\r\n    /*\r\n     * In [0, 60000) blocks, 160 XDEX per block, 9600000 XDEX distributed;\r\n     * In [60000, 180000) blocks, 80 XDEX per block, 9600000 XDEX distributed;\r\n     * In [180000, 420000) blocks, 40 XDEX per block, 9600000 XDEX distributed;\r\n     * In [420000, 900000) blocks, 20 XDEX per block, 9600000 XDEX distributed;\r\n     * After 900000 blocks, 8 XDEX distributed per block.\r\n     */\r\n    uint256[4] public bonusEndBlocks = [60000, 180000, 420000, 900000];\r\n\r\n    // 160, 80, 40, 20, 8 XDEX per block\r\n    uint256[5] public tokensPerBlock = [\r\n        uint256(160 * ONE),\r\n        uint256(80 * ONE),\r\n        uint256(40 * ONE),\r\n        uint256(20 * ONE),\r\n        uint256(8 * ONE)\r\n    ];\r\n\r\n    // First deposit incentive (once for each new user): 10 XDEX\r\n    uint256 public constant bonusFirstDeposit = 10 * ONE;\r\n\r\n    address public core;\r\n    // The XDEX TOKEN\r\n    XDEX public xdex;\r\n\r\n    // Secure Asset Fund for Users(SAFU) address, same as SAFU in xdefi-base/contracts/XConfig.sol\r\n    address public safu;\r\n\r\n    // whitelist of claimable airdrop tokens\r\n    mapping(address => bool) public claimableTokens;\r\n\r\n    // The Halflife Proxy Contract\r\n    XdexStream public stream;\r\n\r\n    // The main voting pool id\r\n    uint256 public votingPoolId;\r\n\r\n    // The block number when Token farming starts.\r\n    uint256 public startBlock;\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n\r\n    // Total allocation factors. Must be the sum of all allocation factors in all pools.\r\n    uint256 public totalXFactor = 0;\r\n\r\n    event AddPool(\r\n        uint256 indexed pid,\r\n        address indexed lpToken,\r\n        uint256 indexed lpType,\r\n        uint256 lpFactor\r\n    );\r\n\r\n    event AddLP(\r\n        uint256 indexed pid,\r\n        address indexed lpToken,\r\n        uint256 indexed lpType,\r\n        uint256 lpFactor\r\n    );\r\n\r\n    event UpdateFactor(\r\n        uint256 indexed pid,\r\n        address indexed lpToken,\r\n        uint256 lpFactor\r\n    );\r\n\r\n    event Deposit(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        address indexed lpToken,\r\n        uint256 amount\r\n    );\r\n\r\n    event Withdraw(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        address indexed lpToken,\r\n        uint256 amount\r\n    );\r\n\r\n    event EmergencyWithdraw(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        address indexed lpToken,\r\n        uint256 amount\r\n    );\r\n\r\n    event Claim(\r\n        address indexed to,\r\n        address indexed token,\r\n        uint256 indexed amount\r\n    );\r\n\r\n    event SetCore(address indexed _core, address indexed _coreNew);\r\n    event SetStream(address indexed _stream, address indexed _streamNew);\r\n    event SetVotingPool(uint256 indexed _pid);\r\n    event SetSafu(address indexed safu, address indexed _safu);\r\n\r\n    /**\r\n     * @dev Throws if the msg.sender unauthorized.\r\n     */\r\n    modifier onlyCore() {\r\n        require(msg.sender == core, \"Not authorized\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the pid does not point to a valid pool.\r\n     */\r\n    modifier poolExists(uint256 _pid) {\r\n        require(_pid < poolInfo.length, \"pool not exist\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        XDEX _xdex,\r\n        uint256 _startBlock,\r\n        address _safu\r\n    ) public {\r\n        require(_safu != address(0), \"ERR_ZERO_ADDRESS\");\r\n\r\n        xdex = _xdex;\r\n        startBlock = _startBlock;\r\n        core = msg.sender;\r\n        safu = _safu;\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    // Set the voting pool id.\r\n    function setVotingPool(uint256 _pid) external onlyCore {\r\n        votingPoolId = _pid;\r\n        emit SetVotingPool(_pid);\r\n    }\r\n\r\n    // Set the xdex stream proxy.\r\n    function setStream(address _stream) external onlyCore {\r\n        require(_stream != address(0), \"ERR_ZERO_ADDRESS\");\r\n        emit SetStream(address(stream), _stream);\r\n        stream = XdexStream(_stream);\r\n    }\r\n\r\n    // Set new core\r\n    function setCore(address _core) external onlyCore {\r\n        require(_core != address(0), \"ERR_ZERO_ADDRESS\");\r\n        emit SetCore(core, _core);\r\n        core = _core;\r\n    }\r\n\r\n    // Set new SAFU\r\n    function setSafu(address _safu) external onlyCore {\r\n        require(_safu != address(0), \"ERR_ZERO_ADDRESS\");\r\n        emit SetSafu(safu, _safu);\r\n        safu = _safu;\r\n    }\r\n\r\n    // Add a new lp to the pool. Can only be called by the core.\r\n    // DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n    function addPool(\r\n        IERC20 _lpToken,\r\n        uint256 _lpTokenType,\r\n        uint256 _lpFactor,\r\n        bool _withUpdate\r\n    ) external onlyCore {\r\n        require(_lpFactor > 0, \"Lp Token Factor is zero\");\r\n\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 _lastRewardBlock =\r\n            block.number > startBlock ? block.number : startBlock;\r\n\r\n        totalXFactor = totalXFactor.add(_lpFactor);\r\n\r\n        uint256 poolinfos_id = poolInfo.length++;\r\n        poolInfo[poolinfos_id].poolFactor = _lpFactor;\r\n        poolInfo[poolinfos_id].lastRewardBlock = _lastRewardBlock;\r\n        poolInfo[poolinfos_id].LpTokenInfos.push(\r\n            LpTokenInfo({\r\n                lpToken: _lpToken,\r\n                lpTokenType: _lpTokenType,\r\n                lpFactor: _lpFactor,\r\n                lpAccPerShare: 0\r\n            })\r\n        );\r\n        //The index in storage starts with 1, then need sub(1)\r\n        lpIndexInPool[keccak256(abi.encodePacked(poolinfos_id, _lpToken))] = 1;\r\n        emit AddPool(poolinfos_id, address(_lpToken), _lpTokenType, _lpFactor);\r\n    }\r\n\r\n    function addLpTokenToPool(\r\n        uint256 _pid,\r\n        IERC20 _lpToken,\r\n        uint256 _lpTokenType,\r\n        uint256 _lpFactor\r\n    ) public onlyCore poolExists(_pid) {\r\n        require(_lpFactor > 0, \"Lp Token Factor is zero\");\r\n\r\n        massUpdatePools();\r\n\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n        require(\r\n            lpIndexInPool[keccak256(abi.encodePacked(_pid, _lpToken))] == 0,\r\n            \"lp token already added\"\r\n        );\r\n\r\n        //check lpToken count\r\n        uint256 count = pool.LpTokenInfos.length;\r\n        require(\r\n            count >= LpTokenMinCount && count < LpTokenMaxCount,\r\n            \"pool lpToken length is bad\"\r\n        );\r\n\r\n        totalXFactor = totalXFactor.add(_lpFactor);\r\n\r\n        LpTokenInfo memory lpTokenInfo =\r\n            LpTokenInfo({\r\n                lpToken: _lpToken,\r\n                lpTokenType: _lpTokenType,\r\n                lpFactor: _lpFactor,\r\n                lpAccPerShare: 0\r\n            });\r\n        poolInfo[_pid].poolFactor = pool.poolFactor.add(_lpFactor);\r\n        poolInfo[_pid].LpTokenInfos.push(lpTokenInfo);\r\n\r\n        //save lpToken index\r\n        //The index in storage starts with 1, then need sub(1)\r\n        lpIndexInPool[keccak256(abi.encodePacked(_pid, _lpToken))] = count + 1;\r\n\r\n        emit AddLP(_pid, address(_lpToken), _lpTokenType, _lpFactor);\r\n    }\r\n\r\n    function getLpTokenInfosByPoolId(uint256 _pid)\r\n        external\r\n        view\r\n        poolExists(_pid)\r\n        returns (\r\n            address[] memory lpTokens,\r\n            uint256[] memory lpTokenTypes,\r\n            uint256[] memory lpFactors,\r\n            uint256[] memory lpAccPerShares\r\n        )\r\n    {\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n        uint256 length = pool.LpTokenInfos.length;\r\n        lpTokens = new address[](length);\r\n        lpTokenTypes = new uint256[](length);\r\n        lpFactors = new uint256[](length);\r\n        lpAccPerShares = new uint256[](length);\r\n        for (uint8 i = 0; i < length; i++) {\r\n            lpTokens[i] = address(pool.LpTokenInfos[i].lpToken);\r\n            lpTokenTypes[i] = pool.LpTokenInfos[i].lpTokenType;\r\n            lpFactors[i] = pool.LpTokenInfos[i].lpFactor;\r\n            lpAccPerShares[i] = pool.LpTokenInfos[i].lpAccPerShare;\r\n        }\r\n    }\r\n\r\n    // Update the given lpToken's lpFactor in the given pool. Can only be called by the owner.\r\n    // `_lpFactor` is 0, means the LpToken is soft deleted from pool.\r\n    function setLpFactor(\r\n        uint256 _pid,\r\n        IERC20 _lpToken,\r\n        uint256 _lpFactor,\r\n        bool _withUpdate\r\n    ) public onlyCore poolExists(_pid) {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        uint256 index = _getLpIndexInPool(_pid, _lpToken);\r\n        //update poolFactor and totalXFactor\r\n        uint256 poolFactorNew =\r\n            pool.poolFactor.sub(pool.LpTokenInfos[index].lpFactor).add(\r\n                _lpFactor\r\n            );\r\n        pool.LpTokenInfos[index].lpFactor = _lpFactor;\r\n\r\n        totalXFactor = totalXFactor.sub(poolInfo[_pid].poolFactor).add(\r\n            poolFactorNew\r\n        );\r\n        poolInfo[_pid].poolFactor = poolFactorNew;\r\n\r\n        emit UpdateFactor(_pid, address(_lpToken), _lpFactor);\r\n    }\r\n\r\n    // Update reward variables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint8 pid = 0; pid < length; ++pid) {\r\n            if (poolInfo[pid].poolFactor > 0) {\r\n                updatePool(pid);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public poolExists(_pid) {\r\n        if (block.number <= poolInfo[_pid].lastRewardBlock) {\r\n            return;\r\n        }\r\n\r\n        if (poolInfo[_pid].poolFactor == 0 || totalXFactor == 0) {\r\n            return;\r\n        }\r\n\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        (uint256 poolReward, , ) =\r\n            getXCountToReward(pool.lastRewardBlock, block.number);\r\n        poolReward = poolReward.mul(pool.poolFactor).div(totalXFactor);\r\n\r\n        uint256 totalLpSupply = 0;\r\n        for (uint8 i = 0; i < pool.LpTokenInfos.length; i++) {\r\n            LpTokenInfo memory lpInfo = pool.LpTokenInfos[i];\r\n            uint256 lpSupply = lpInfo.lpToken.balanceOf(address(this));\r\n            if (lpSupply == 0) {\r\n                continue;\r\n            }\r\n            totalLpSupply = totalLpSupply.add(lpSupply);\r\n            uint256 lpReward =\r\n                poolReward.mul(lpInfo.lpFactor).div(pool.poolFactor);\r\n            pool.LpTokenInfos[i].lpAccPerShare = lpInfo.lpAccPerShare.add(\r\n                lpReward.mul(LpRewardFixDec).div(lpSupply)\r\n            );\r\n        }\r\n\r\n        if (totalLpSupply == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        xdex.mint(address(this), poolReward);\r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n\r\n    // View function to see pending XDEX on frontend.\r\n    function pendingXDEX(uint256 _pid, address _user)\r\n        external\r\n        view\r\n        poolExists(_pid)\r\n        returns (uint256)\r\n    {\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n\r\n        uint256 totalPending = 0;\r\n        if (totalXFactor == 0 || pool.poolFactor == 0) {\r\n            for (uint8 i = 0; i < pool.LpTokenInfos.length; i++) {\r\n                UserInfo memory user =\r\n                    poolInfo[_pid].LpTokenInfos[i].userInfo[_user];\r\n                totalPending = totalPending.add(\r\n                    user\r\n                        .amount\r\n                        .mul(pool.LpTokenInfos[i].lpAccPerShare)\r\n                        .div(LpRewardFixDec)\r\n                        .sub(user.rewardDebt)\r\n                );\r\n            }\r\n\r\n            return totalPending;\r\n        }\r\n\r\n        (uint256 xdexReward, , ) =\r\n            getXCountToReward(pool.lastRewardBlock, block.number);\r\n\r\n        uint256 poolReward = xdexReward.mul(pool.poolFactor).div(totalXFactor);\r\n\r\n        for (uint8 i = 0; i < pool.LpTokenInfos.length; i++) {\r\n            LpTokenInfo memory lpInfo = pool.LpTokenInfos[i];\r\n            uint256 lpSupply = lpInfo.lpToken.balanceOf(address(this));\r\n            if (lpSupply == 0) {\r\n                continue;\r\n            }\r\n            if (block.number > pool.lastRewardBlock) {\r\n                uint256 lpReward =\r\n                    poolReward.mul(lpInfo.lpFactor).div(pool.poolFactor);\r\n                lpInfo.lpAccPerShare = lpInfo.lpAccPerShare.add(\r\n                    lpReward.mul(LpRewardFixDec).div(lpSupply)\r\n                );\r\n            }\r\n            UserInfo memory user =\r\n                poolInfo[_pid].LpTokenInfos[i].userInfo[_user];\r\n            totalPending = totalPending.add(\r\n                user.amount.mul(lpInfo.lpAccPerShare).div(LpRewardFixDec).sub(\r\n                    user.rewardDebt\r\n                )\r\n            );\r\n        }\r\n\r\n        return totalPending;\r\n    }\r\n\r\n    // Deposit LP tokens to FarmMaster for XDEX allocation.\r\n    function deposit(\r\n        uint256 _pid,\r\n        IERC20 _lpToken,\r\n        uint256 _amount\r\n    ) external poolExists(_pid) {\r\n        require(_amount > 0, \"not valid amount\");\r\n\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        uint256 index = _getLpIndexInPool(_pid, _lpToken);\r\n        uint256 blockHeightDiff = block.number.sub(pool.lastRewardBlock);\r\n\r\n        require(index < poolInfo[_pid].LpTokenInfos.length, \"not valid index\");\r\n\r\n        updatePool(_pid);\r\n\r\n        UserInfo storage user =\r\n            poolInfo[_pid].LpTokenInfos[index].userInfo[msg.sender];\r\n\r\n        if (user.amount > 0) {\r\n            uint256 pending =\r\n                user\r\n                    .amount\r\n                    .mul(pool.LpTokenInfos[index].lpAccPerShare)\r\n                    .div(LpRewardFixDec)\r\n                    .sub(user.rewardDebt);\r\n\r\n            if (pending > 0) {\r\n                //create the stream or add funds to stream\r\n                (bool hasVotingStream, bool hasNormalStream) =\r\n                    stream.hasStream(msg.sender);\r\n\r\n                if (_pid == votingPoolId) {\r\n                    if (hasVotingStream) {\r\n                        //add funds\r\n                        uint256 streamId =\r\n                            stream.getStreamId(msg.sender, StreamTypeVoting);\r\n                        require(streamId > 0, \"not valid stream id\");\r\n\r\n                        xdex.approve(address(stream), pending);\r\n                        stream.fundsToStream(\r\n                            streamId,\r\n                            pending,\r\n                            blockHeightDiff\r\n                        );\r\n                    }\r\n                } else {\r\n                    if (hasNormalStream) {\r\n                        //add funds\r\n                        uint256 streamId =\r\n                            stream.getStreamId(msg.sender, StreamTypeNormal);\r\n                        require(streamId > 0, \"not valid stream id\");\r\n\r\n                        xdex.approve(address(stream), pending);\r\n                        stream.fundsToStream(\r\n                            streamId,\r\n                            pending,\r\n                            blockHeightDiff\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            uint256 streamStart = block.number + 1;\r\n            if (block.number < startBlock) {\r\n                streamStart = startBlock;\r\n            }\r\n\r\n            //if it is the first deposit\r\n            (bool hasVotingStream, bool hasNormalStream) =\r\n                stream.hasStream(msg.sender);\r\n\r\n            //create the stream for First Deposit Bonus\r\n            if (_pid == votingPoolId) {\r\n                if (!hasVotingStream) {\r\n                    xdex.mint(address(this), bonusFirstDeposit);\r\n                    xdex.approve(address(stream), bonusFirstDeposit);\r\n                    stream.createStream(\r\n                        msg.sender,\r\n                        bonusFirstDeposit,\r\n                        StreamTypeVoting,\r\n                        streamStart\r\n                    );\r\n                }\r\n            } else {\r\n                if (!hasNormalStream) {\r\n                    xdex.mint(address(this), bonusFirstDeposit);\r\n                    xdex.approve(address(stream), bonusFirstDeposit);\r\n                    stream.createStream(\r\n                        msg.sender,\r\n                        bonusFirstDeposit,\r\n                        StreamTypeNormal,\r\n                        streamStart\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        pool.LpTokenInfos[index].lpToken.safeTransferFrom(\r\n            address(msg.sender),\r\n            address(this),\r\n            _amount\r\n        );\r\n        user.amount = user.amount.add(_amount);\r\n\r\n        user.rewardDebt = user\r\n            .amount\r\n            .mul(pool.LpTokenInfos[index].lpAccPerShare)\r\n            .div(LpRewardFixDec);\r\n\r\n        emit Deposit(msg.sender, _pid, address(_lpToken), _amount);\r\n    }\r\n\r\n    function withdraw(\r\n        uint256 _pid,\r\n        IERC20 _lpToken,\r\n        uint256 _amount\r\n    ) public poolExists(_pid) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        uint256 index = _getLpIndexInPool(_pid, _lpToken);\r\n        require(index < poolInfo[_pid].LpTokenInfos.length, \"not valid index\");\r\n        uint256 blockHeightDiff = block.number.sub(pool.lastRewardBlock);\r\n\r\n        updatePool(_pid);\r\n\r\n        UserInfo storage user =\r\n            poolInfo[_pid].LpTokenInfos[index].userInfo[msg.sender];\r\n        require(user.amount >= _amount, \"withdraw: _amount not good\");\r\n\r\n        uint256 pending =\r\n            user\r\n                .amount\r\n                .mul(pool.LpTokenInfos[index].lpAccPerShare)\r\n                .div(LpRewardFixDec)\r\n                .sub(user.rewardDebt);\r\n\r\n        if (pending > 0) {\r\n            //create the stream or add funds to stream\r\n            (bool hasVotingStream, bool hasNormalStream) =\r\n                stream.hasStream(msg.sender);\r\n\r\n            /* Approve the Stream contract to spend. */\r\n            xdex.approve(address(stream), pending);\r\n\r\n            if (_pid == votingPoolId) {\r\n                if (hasVotingStream) {\r\n                    //add fund\r\n                    uint256 streamId =\r\n                        stream.getStreamId(msg.sender, StreamTypeVoting);\r\n                    require(streamId > 0, \"not valid stream id\");\r\n\r\n                    xdex.approve(address(stream), pending);\r\n                    stream.fundsToStream(streamId, pending, blockHeightDiff);\r\n                }\r\n            } else {\r\n                if (hasNormalStream) {\r\n                    //add fund\r\n                    uint256 streamId =\r\n                        stream.getStreamId(msg.sender, StreamTypeNormal);\r\n                    require(streamId > 0, \"not valid stream id\");\r\n\r\n                    xdex.approve(address(stream), pending);\r\n                    stream.fundsToStream(streamId, pending, blockHeightDiff);\r\n                }\r\n            }\r\n        }\r\n        if (_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            pool.LpTokenInfos[index].lpToken.safeTransfer(\r\n                address(msg.sender),\r\n                _amount\r\n            );\r\n        }\r\n        user.rewardDebt = user\r\n            .amount\r\n            .mul(pool.LpTokenInfos[index].lpAccPerShare)\r\n            .div(LpRewardFixDec);\r\n\r\n        emit Withdraw(msg.sender, _pid, address(_lpToken), _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid)\r\n        external\r\n        nonReentrant\r\n        poolExists(_pid)\r\n    {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n\r\n        for (uint8 i = 0; i < pool.LpTokenInfos.length; i++) {\r\n            LpTokenInfo storage lpInfo = pool.LpTokenInfos[i];\r\n            UserInfo storage user = lpInfo.userInfo[msg.sender];\r\n\r\n            if (user.amount > 0) {\r\n                lpInfo.lpToken.safeTransfer(address(msg.sender), user.amount);\r\n\r\n                emit EmergencyWithdraw(\r\n                    msg.sender,\r\n                    _pid,\r\n                    address(lpInfo.lpToken),\r\n                    user.amount\r\n                );\r\n                user.amount = 0;\r\n                user.rewardDebt = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Batch collect function in pool on frontend\r\n    function batchCollectReward(uint256 _pid) external poolExists(_pid) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        uint256 length = pool.LpTokenInfos.length;\r\n\r\n        for (uint8 i = 0; i < length; i++) {\r\n            IERC20 lpToken = pool.LpTokenInfos[i].lpToken;\r\n            UserInfo storage user = pool.LpTokenInfos[i].userInfo[msg.sender];\r\n            if (user.amount > 0) {\r\n                //collect\r\n                withdraw(_pid, lpToken, 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    // View function to see user lpToken amount in pool on frontend.\r\n    function getUserLpAmounts(uint256 _pid, address _user)\r\n        external\r\n        view\r\n        poolExists(_pid)\r\n        returns (address[] memory lpTokens, uint256[] memory amounts)\r\n    {\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n        uint256 length = pool.LpTokenInfos.length;\r\n        lpTokens = new address[](length);\r\n        amounts = new uint256[](length);\r\n        for (uint256 i = 0; i < length; i++) {\r\n            lpTokens[i] = address(pool.LpTokenInfos[i].lpToken);\r\n            UserInfo memory user =\r\n                poolInfo[_pid].LpTokenInfos[i].userInfo[_user];\r\n            amounts[i] = user.amount;\r\n        }\r\n    }\r\n\r\n    function getXCountToReward(uint256 _from, uint256 _to)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 _totalReward,\r\n            uint256 _stageFrom,\r\n            uint256 _stageTo\r\n        )\r\n    {\r\n        require(_from <= _to, \"_from must <= _to\");\r\n\r\n        uint256 stageFrom = 0;\r\n        uint256 stageTo = 0;\r\n\r\n        if (_to < startBlock) {\r\n            return (0, stageFrom, stageTo);\r\n        }\r\n\r\n        if (\r\n            _from >= startBlock.add(bonusEndBlocks[bonusEndBlocks.length - 1])\r\n        ) {\r\n            return (\r\n                _to.sub(_from).mul(tokensPerBlock[tokensPerBlock.length - 1]),\r\n                bonusEndBlocks.length + 1,\r\n                bonusEndBlocks.length + 1\r\n            );\r\n        }\r\n\r\n        uint256 total = 0;\r\n\r\n        for (uint256 i = 0; i < bonusEndBlocks.length; i++) {\r\n            uint256 actualEndBlock = startBlock.add(bonusEndBlocks[i]);\r\n            if (_from > actualEndBlock) {\r\n                stageFrom = stageFrom.add(1);\r\n            }\r\n            if (_to > actualEndBlock) {\r\n                stageTo = stageTo.add(1);\r\n            }\r\n        }\r\n\r\n        uint256 tStageFrom = stageFrom;\r\n        while (_from < _to) {\r\n            if (_from < startBlock) {\r\n                _from = startBlock;\r\n            }\r\n            uint256 indexDiff = stageTo.sub(tStageFrom);\r\n            if (indexDiff == 0) {\r\n                total += (_to - _from) * tokensPerBlock[tStageFrom];\r\n                _from = _to;\r\n                break;\r\n            } else if (indexDiff > 0) {\r\n                uint256 actualRes = startBlock.add(bonusEndBlocks[tStageFrom]);\r\n                total += (actualRes - _from) * tokensPerBlock[tStageFrom];\r\n                _from = actualRes;\r\n                tStageFrom = tStageFrom.add(1);\r\n            } else {\r\n                //this never happen\r\n                break;\r\n            }\r\n        }\r\n\r\n        return (total, stageFrom, stageTo);\r\n    }\r\n\r\n    function getCurRewardPerBlock() external view returns (uint256) {\r\n        uint256 bnum = block.number;\r\n        if (bnum < startBlock) {\r\n            return 0;\r\n        }\r\n        if (bnum >= startBlock.add(bonusEndBlocks[bonusEndBlocks.length - 1])) {\r\n            return tokensPerBlock[tokensPerBlock.length - 1];\r\n        }\r\n        uint256 stage = 0;\r\n        for (uint256 i = 0; i < bonusEndBlocks.length; i++) {\r\n            uint256 actualEndBlock = startBlock.add(bonusEndBlocks[i]);\r\n            if (bnum >= actualEndBlock) {\r\n                stage = stage.add(1);\r\n            }\r\n        }\r\n\r\n        require(\r\n            stage >= 0 && stage < tokensPerBlock.length,\r\n            \"tokensPerBlock length not good\"\r\n        );\r\n        return tokensPerBlock[stage];\r\n    }\r\n\r\n    // Any airdrop tokens (in whitelist) sent to this contract, should transfer to safu\r\n    function claimRewards(address token, uint256 amount) external onlyCore {\r\n        require(claimableTokens[token], \"not claimable token\");\r\n\r\n        IERC20(token).safeTransfer(safu, amount);\r\n        emit Claim(core, token, amount);\r\n    }\r\n\r\n    function updateClaimableTokens(address token, bool claimable)\r\n        external\r\n        onlyCore\r\n    {\r\n        claimableTokens[token] = claimable;\r\n    }\r\n\r\n    // The index in storage starts with 1, then need sub(1)\r\n    function _getLpIndexInPool(uint256 _pid, IERC20 _lpToken)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 index =\r\n            lpIndexInPool[keccak256(abi.encodePacked(_pid, _lpToken))];\r\n        require(index > 0, \"deposit the lp token which not exist\");\r\n        return --index;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract XDEX\",\"name\":\"_xdex\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_safu\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lpType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpFactor\",\"type\":\"uint256\"}],\"name\":\"AddLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lpType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpFactor\",\"type\":\"uint256\"}],\"name\":\"AddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_coreNew\",\"type\":\"address\"}],\"name\":\"SetCore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"safu\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_safu\",\"type\":\"address\"}],\"name\":\"SetSafu\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stream\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_streamNew\",\"type\":\"address\"}],\"name\":\"SetStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"SetVotingPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpFactor\",\"type\":\"uint256\"}],\"name\":\"UpdateFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpTokenType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpFactor\",\"type\":\"uint256\"}],\"name\":\"addLpTokenToPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpTokenType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"addPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"batchCollectReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonusEndBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusFirstDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimableTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getLpTokenInfosByPoolId\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lpTokenTypes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lpFactors\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lpAccPerShares\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserLpAmounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getXCountToReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stageFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stageTo\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingXDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"safu\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"}],\"name\":\"setCore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"setLpFactor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safu\",\"type\":\"address\"}],\"name\":\"setSafu\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stream\",\"type\":\"address\"}],\"name\":\"setStream\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"setVotingPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stream\",\"outputs\":[{\"internalType\":\"contract XdexStream\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalXFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimable\",\"type\":\"bool\"}],\"name\":\"updateClaimableTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votingPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xdex\",\"outputs\":[{\"internalType\":\"contract XDEX\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FarmMaster","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000d0151e748d25b766e77efe2a6c830000000000000000000000000000000000000000000000000000000000b8bcf8000000000000000000000000ca38af77f513fcf6914b090eb9d9c18310d1fbd0","EVMVersion":"istanbul","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://78ee108f036656281c9cae1df9275aa0d39ab0646ad6e1bbf78df78b470efb30"}]}