{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private m_Owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        m_Owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return m_Owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_msgSender() == m_Owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }                                                                                          \r\n} \r\n\r\ninterface UniV2Token {                                                                          // This is the contract for UniswapV2Pair\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface DecisionToken {                                                                       // This is the contract of actual coin\r\n    function totalEarnings() external view returns (uint256);\r\n}\r\n\r\ncontract LiqLockToBurn is Context, Ownable {\r\n\r\n    UniV2Token private V2Token;\r\n    DecisionToken private DToken;\r\n    uint256 m_Balance;\r\n    uint256 m_Earnings;\r\n    uint256 m_EarningsLimit;\r\n    address m_InvestorAddressA;\r\n    address m_InvestorAddressB;\r\n    \r\n   constructor() {\r\n       UniV2Token _uniV2Token = UniV2Token(address(this));\r\n       V2Token = _uniV2Token;\r\n       DecisionToken _decisionToken = DecisionToken(address(this));\r\n       DToken = _decisionToken;\r\n    }\r\n   \r\n    function getBalance() public returns (uint256) {\r\n        m_Balance = V2Token.balanceOf(address(this));\r\n        return m_Balance;\r\n    }\r\n    \r\n    function checkEarnings() public returns (uint256) {\r\n        m_Earnings = DToken.totalEarnings();\r\n        return m_Earnings;\r\n    }\r\n\r\n    function executeTokenDecision() external onlyOwner() {\r\n        uint256 _amount;\r\n        \r\n        V2Token.approve(address(this), getBalance());\r\n        \r\n        if(checkEarnings() >= m_EarningsLimit){ // 10 ETH\r\n            _amount = m_Balance;\r\n            V2Token.transferFrom(address(this), address(0), _amount);\r\n        }\r\n        else{\r\n            _amount = m_Balance / 2;\r\n            V2Token.transferFrom(address(this), m_InvestorAddressA, _amount);\r\n            V2Token.transferFrom(address(this), m_InvestorAddressB, _amount);\r\n        }   \r\n    }\r\n    \r\n    function assignInvestorAddresses(address _addressA, address _addressB) external onlyOwner() {\r\n        m_InvestorAddressA = _addressA;\r\n        m_InvestorAddressB = _addressB;\r\n    }\r\n    \r\n    function assignV2Pair(address _address) external onlyOwner() {\r\n        UniV2Token _uniV2Token = UniV2Token(_address);\r\n        V2Token = _uniV2Token;\r\n    }\r\n    \r\n    function assignDecisionToken(address _address) external onlyOwner() {\r\n        DecisionToken _decisionToken = DecisionToken(_address);\r\n        DToken = _decisionToken;\r\n    }\r\n    \r\n    function assignEarningsLimit(uint256 _amount) external onlyOwner() {\r\n        m_EarningsLimit = _amount;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"assignDecisionToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"assignEarningsLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressB\",\"type\":\"address\"}],\"name\":\"assignInvestorAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"assignV2Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeTokenDecision\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LiqLockToBurn","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fd71b08b3d1aeaf360cb7ba052701d5ac65a74b1792ca23d5a316ac12aa20efb"}]}