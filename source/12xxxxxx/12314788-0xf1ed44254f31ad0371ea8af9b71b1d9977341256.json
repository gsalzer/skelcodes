{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.7.1;\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SignedSafeMath.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SignedSafeMath\r\n * @dev Signed math operations with safety checks that revert on error.\r\n */\r\nlibrary SignedSafeMath {\r\n    int256 constant private _INT256_MIN = -2**255;\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\r\n\r\n        int256 c = a * b;\r\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two signed integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0, \"SignedSafeMath: division by zero\");\r\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\r\n\r\n        int256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/SafeCast.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\r\n * checks.\r\n *\r\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n * reverting the transaction when such an operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n *\r\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\r\n * all math on `uint256` and `int256` and then downcasting.\r\n */\r\nlibrary SafeCast {\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n        return uint128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n        return uint64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n        return uint32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n        return uint16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n        return uint8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0.\r\n     */\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int128 from int256, reverting on\r\n     * overflow (when the input is less than smallest int128 or\r\n     * greater than largest int128).\r\n     *\r\n     * Counterpart to Solidity's `int128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt128(int256 value) internal pure returns (int128) {\r\n        require(value >= -2**127 && value < 2**127, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n        return int128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int64 from int256, reverting on\r\n     * overflow (when the input is less than smallest int64 or\r\n     * greater than largest int64).\r\n     *\r\n     * Counterpart to Solidity's `int64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt64(int256 value) internal pure returns (int64) {\r\n        require(value >= -2**63 && value < 2**63, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n        return int64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int32 from int256, reverting on\r\n     * overflow (when the input is less than smallest int32 or\r\n     * greater than largest int32).\r\n     *\r\n     * Counterpart to Solidity's `int32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt32(int256 value) internal pure returns (int32) {\r\n        require(value >= -2**31 && value < 2**31, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n        return int32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int16 from int256, reverting on\r\n     * overflow (when the input is less than smallest int16 or\r\n     * greater than largest int16).\r\n     *\r\n     * Counterpart to Solidity's `int16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt16(int256 value) internal pure returns (int16) {\r\n        require(value >= -2**15 && value < 2**15, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n        return int16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int8 from int256, reverting on\r\n     * overflow (when the input is less than smallest int8 or\r\n     * greater than largest int8).\r\n     *\r\n     * Counterpart to Solidity's `int8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt8(int256 value) internal pure returns (int8) {\r\n        require(value >= -2**7 && value < 2**7, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n        return int8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\r\n        return int256(value);\r\n    }\r\n}\r\n\r\n// File: contracts/Interfaces/StakingInterface.sol\r\n\r\n\r\n\r\n\r\ninterface StakingInterface {\r\n  function getStakingTokenAddress() external view returns (address);\r\n\r\n  function getTokenInfo()\r\n    external\r\n    view\r\n    returns (\r\n      uint256 currentTerm,\r\n      uint256 latestTerm,\r\n      uint256 totalRemainingRewards,\r\n      uint256 currentTermRewards,\r\n      uint256 nextTermRewards,\r\n      uint128 currentStaking,\r\n      uint128 nextTermStaking\r\n    );\r\n\r\n  function getConfigs() external view returns (uint256 startTimestamp, uint256 termInterval);\r\n\r\n  function getTermInfo(uint256 term)\r\n    external\r\n    view\r\n    returns (\r\n      int128 stakeAdd,\r\n      uint128 stakeSum,\r\n      uint256 rewardSum\r\n    );\r\n\r\n  function getAccountInfo(address account)\r\n    external\r\n    view\r\n    returns (\r\n      uint256 userTerm,\r\n      uint256 stakeAmount,\r\n      int128 nextAddedStakeAmount,\r\n      uint256 remaining,\r\n      uint256 currentTermUserRewards,\r\n      uint256 nextTermUserRewards,\r\n      uint128 depositAmount,\r\n      uint128 withdrawableStakingAmount\r\n    );\r\n}\r\n\r\n// File: contracts/Staking/Staking.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Staking is ReentrancyGuard, StakingInterface {\r\n  using SafeMath for uint256;\r\n  using SafeMath for uint128;\r\n  using SignedSafeMath for int256;\r\n  using SignedSafeMath for int128;\r\n  using SafeCast for uint256;\r\n  using SafeCast for uint128;\r\n  using SafeCast for int256;\r\n  using SafeCast for int128;\r\n  using SafeERC20 for IERC20;\r\n\r\n  /* ========== CONSTANT VARIABLES ========== */\r\n\r\n  uint256 internal constant MAX_TERM = 100;\r\n\r\n  IERC20 internal immutable _stakingToken;\r\n  uint256 internal immutable _startTimestamp; // timestamp of the term 0\r\n  uint256 internal immutable _termInterval; // time interval between terms in second\r\n\r\n  /* ========== STATE VARIABLES ========== */\r\n\r\n  uint256 internal _currentTerm; // the current term (all the info prior to this term is fixed)\r\n  uint256 internal _totalRemaining; // total unsettled amount of rewards and withdrawal\r\n  uint256 internal _totalRewardAdded; // total unsettled amount of rewards\r\n\r\n  struct AccountInfo {\r\n    int128 added; // the added amount of stake which will be merged to stakeAmount at the term+1.\r\n    uint128 stakeAmount; // active stake amount of the user at userTerm\r\n    uint256 remaining; // the total amount of rewards and withdrawal until userTerm\r\n    uint256 userTerm; // the term when the user executed any function last time (all the terms before the term has been already settled)\r\n  }\r\n\r\n  /**\r\n   * @dev account => data\r\n   */\r\n  mapping(address => AccountInfo) internal _accountInfoList;\r\n\r\n  struct TermInfo {\r\n    uint128 stakeAdd; // the total added amount of stake which will be merged to stakeSum at the term+1\r\n    uint128 stakeRemove;\r\n    uint128 stakeSum; // the total staking amount at the term\r\n    uint256 rewardSum; // the total amount of rewards at the term\r\n  }\r\n\r\n  /**\r\n   * @dev term => data\r\n   */\r\n  mapping(uint256 => TermInfo) internal _termInfoList;\r\n\r\n  /* ========== EVENTS ========== */\r\n\r\n  event Staked(address indexed account, uint128 amount);\r\n  event Withdrawn(address indexed account, uint128 amount);\r\n  event RewardPaid(address indexed account, uint256 amount);\r\n  event TermUpdated(uint256 currentTerm);\r\n  event RewardUpdated(address indexed account, uint256 currentTerm);\r\n  event RewardAdded(address indexed account, uint256 indexed term, uint256 amount);\r\n\r\n  /* ========== CONSTRUCTOR ========== */\r\n\r\n  constructor(\r\n    IERC20 stakingToken,\r\n    uint256 startTimestamp,\r\n    uint256 termInterval\r\n  ) {\r\n    require(startTimestamp <= block.timestamp, \"startTimestamp should be past time\");\r\n    _startTimestamp = startTimestamp;\r\n    _stakingToken = stakingToken;\r\n    _termInterval = termInterval;\r\n  }\r\n\r\n  /* ========== MODIFIERS ========== */\r\n\r\n  /**\r\n   * @dev Update the info up to the current term.\r\n   */\r\n  modifier updateTerm() {\r\n    uint256 latestTerm = _getLatestTerm();\r\n    if (_currentTerm < latestTerm) {\r\n      uint128 sendBackLater = _termInfoList[_currentTerm].stakeRemove;\r\n      uint128 nextStakeSum = _getNextStakeSum();\r\n      uint256 nextTerm = nextStakeSum == 0 ? latestTerm : _currentTerm + 1; // if next stakeSum is 0, skip to latest term\r\n      uint256 nextTermReward = _getNextTermReward();\r\n      _termInfoList[nextTerm] = TermInfo({\r\n        stakeAdd: 0,\r\n        stakeRemove: 0,\r\n        stakeSum: nextStakeSum,\r\n        rewardSum: nextTermReward\r\n      });\r\n\r\n      // write total stake amount since (nextTerm + 1) until latestTerm\r\n      if (nextTerm < latestTerm) {\r\n        // assert(_termInfoList[nextTerm].stakeSum != 0 && _termInfoList[nextTerm].stakeAdd == 0);\r\n        _termInfoList[latestTerm] = TermInfo({\r\n          stakeAdd: 0,\r\n          stakeRemove: 0,\r\n          stakeSum: nextStakeSum,\r\n          rewardSum: 0\r\n        });\r\n      }\r\n\r\n      _totalRemaining = _totalRemaining.add(_totalRewardAdded).add(sendBackLater);\r\n      _totalRewardAdded = 0;\r\n      _currentTerm = latestTerm;\r\n    }\r\n\r\n    emit TermUpdated(_currentTerm);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate total rewards of the account until the current term.\r\n   */\r\n  modifier updateReward(address account) {\r\n    AccountInfo memory accountInfo = _accountInfoList[account];\r\n    uint256 startTerm = accountInfo.userTerm;\r\n    for (uint256 term = startTerm; term < _currentTerm && term < startTerm + MAX_TERM; term++) {\r\n      TermInfo memory termInfo = _termInfoList[term];\r\n\r\n      if (termInfo.stakeSum != 0) {\r\n        require(\r\n          accountInfo.stakeAmount <= termInfo.stakeSum,\r\n          \"system error: stakeAmount is not more than stakeSum\"\r\n        );\r\n\r\n        // `(total rewards) * (your stake amount) / (total stake amount)` in each term\r\n        uint256 rewardsAdded = termInfo.rewardSum.mul(accountInfo.stakeAmount) / termInfo.stakeSum;\r\n        accountInfo.remaining = accountInfo.remaining.add(rewardsAdded);\r\n        emit RewardAdded(account, term, rewardsAdded);\r\n      }\r\n\r\n      accountInfo.stakeAmount = addDiff(accountInfo.stakeAmount, accountInfo.added).toUint128();\r\n      if (accountInfo.added < 0) {\r\n        accountInfo.remaining = addDiff(accountInfo.remaining, -accountInfo.added);\r\n      }\r\n      accountInfo.added = 0;\r\n\r\n      if (accountInfo.stakeAmount == 0) {\r\n        accountInfo.userTerm = _currentTerm;\r\n        break; // skip unnecessary term\r\n      }\r\n\r\n      accountInfo.userTerm = term + 1; // calculated until this term\r\n    }\r\n\r\n    _accountInfoList[account] = accountInfo;\r\n\r\n    // do not execute main function if `userTerm` is not the same with `_currentTerm`.\r\n    if (accountInfo.userTerm < _currentTerm) {\r\n      return;\r\n    }\r\n\r\n    emit RewardUpdated(account, _currentTerm);\r\n    _;\r\n  }\r\n\r\n  /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n  /**\r\n   * @notice Stake the staking token for the token to be paid as reward.\r\n   */\r\n  // function stake(uint128 amount)\r\n  //   external\r\n  //   override\r\n  //   nonReentrant\r\n  //   updateTerm()\r\n  //   updateReward(msg.sender)\r\n  // {\r\n  //   require(amount != 0, \"staking amount should be positive number\");\r\n\r\n  //   _stake(msg.sender, amount);\r\n  //   _stakingToken.safeTransferFrom(msg.sender, address(this), amount);\r\n  // }\r\n\r\n  /**\r\n   * @notice Withdraw the staking token for the token to be paid as reward.\r\n   */\r\n  // function withdraw(uint128 amount)\r\n  //   external\r\n  //   override\r\n  //   nonReentrant\r\n  //   updateTerm()\r\n  //   updateReward(msg.sender)\r\n  // {\r\n  //   require(amount != 0, \"withdrawing amount should be positive number\");\r\n\r\n  //   _withdraw(msg.sender, amount);\r\n  //   // _stakingToken.safeTransfer(msg.sender, amount);\r\n  // }\r\n\r\n  /**\r\n   * @notice Receive the reward and withdrawal from this contract.\r\n   */\r\n  // function receiveReward()\r\n  //   external\r\n  //   override\r\n  //   nonReentrant\r\n  //   updateTerm()\r\n  //   updateReward(msg.sender)\r\n  //   returns (uint256 remaining)\r\n  // {\r\n  //   remaining = _receiveReward(msg.sender);\r\n  //   if (remaining != 0) {\r\n  //     _stakingToken.safeTransfer(msg.sender, remaining);\r\n  //   }\r\n  //   return remaining;\r\n  // }\r\n\r\n  /**\r\n   * @notice Add the reward to this contract.\r\n   */\r\n  function addReward(uint128 amount) external nonReentrant updateTerm() {\r\n    _stakingToken.safeTransferFrom(msg.sender, address(this), amount);\r\n    return _addReward(msg.sender, amount);\r\n  }\r\n\r\n  /* ========== INTERNAL FUNCTIONS ========== */\r\n\r\n  /**\r\n   * @dev The stake amount of `account` increaases by `amount`.\r\n   * This function is staking if `amount` is positive, otherwise unstaking.\r\n   */\r\n  // function _stakeOrUnstake(address account, int128 amount) internal {\r\n  //   uint256 term = _currentTerm;\r\n  //   AccountInfo memory accountInfo = _accountInfoList[account];\r\n  //   require(\r\n  //     addDiff(accountInfo.stakeAmount, accountInfo.added) < type(uint128).max,\r\n  //     \"stake amount is out of range\"\r\n  //   );\r\n\r\n  //   _accountInfoList[account].added = _accountInfoList[account].added.add(amount).toInt128(); // added when the term is shifted (the user)\r\n  //   if (amount >= 0) {\r\n  //     _termInfoList[term].stakeAdd = _termInfoList[term].stakeAdd.add(amount.toUint256()).toUint128(); // added when the term is shifted (global)\r\n  //   } else {\r\n  //     _termInfoList[term].stakeRemove = _termInfoList[term].stakeRemove.sub(-amount.toUint256()).toUint128(); // added when the term is shifted (global)\r\n  //   }\r\n  // }\r\n\r\n  function _stake(address account, uint128 amount) internal returns (uint128 sendBack) {\r\n    sendBack = 0;\r\n    if (_accountInfoList[account].added < 0) {\r\n      uint128 added = uint128(-_accountInfoList[account].added);\r\n      sendBack = added < amount ? added : amount; // min(added, amount)\r\n    }\r\n\r\n    uint256 term = _currentTerm;\r\n    AccountInfo memory accountInfo = _accountInfoList[account];\r\n    require(\r\n      addDiff(accountInfo.stakeAmount, accountInfo.added) < type(uint128).max,\r\n      \"stake amount is out of range\"\r\n    );\r\n\r\n    _accountInfoList[account].added = _accountInfoList[account]\r\n      .added\r\n      .add(int256(amount))\r\n      .toInt128(); // added when the term is shifted (the user)\r\n    // assert(sendBack <= amount);\r\n    TermInfo memory termInfo = _termInfoList[term];\r\n    termInfo.stakeAdd = termInfo.stakeAdd.add(amount - sendBack).toUint128(); // added when the term is shifted (global)\r\n    termInfo.stakeRemove = termInfo.stakeRemove.sub(sendBack).toUint128(); // added when the term is shifted (global)\r\n    _termInfoList[term] = termInfo;\r\n    emit Staked(account, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Callee must send back staking token to sender instantly until `added` becomes zero.\r\n   *  One can use the return value `sendBack` for it.\r\n   */\r\n  function _withdraw(address account, uint128 amount) internal returns (uint128 sendBack) {\r\n    sendBack = 0;\r\n    if (_accountInfoList[account].added > 0) {\r\n      uint128 added = uint128(_accountInfoList[account].added);\r\n      sendBack = added < amount ? added : amount; // min(added, amount)\r\n    }\r\n\r\n    uint256 term = _currentTerm;\r\n    AccountInfo memory accountInfo = _accountInfoList[account];\r\n    require(\r\n      addDiff(accountInfo.stakeAmount, accountInfo.added) < type(uint128).max,\r\n      \"stake amount is out of range\"\r\n    );\r\n\r\n    _accountInfoList[account].added = _accountInfoList[account].added.sub(amount).toInt128(); // added when the term is shifted (the user)\r\n    // assert(sendBack <= amount);\r\n    TermInfo memory termInfo = _termInfoList[term];\r\n    termInfo.stakeAdd = termInfo.stakeAdd.sub(sendBack).toUint128(); // added when the term is shifted (global)\r\n    termInfo.stakeRemove = termInfo.stakeRemove.add(amount - sendBack).toUint128(); // added when the term is shifted (global)\r\n    _termInfoList[term] = termInfo;\r\n\r\n    emit Withdrawn(account, amount);\r\n  }\r\n\r\n  function _receiveReward(address account) internal returns (uint256 remaining) {\r\n    remaining = _accountInfoList[account].remaining;\r\n    if (remaining != 0) {\r\n      _totalRemaining = _totalRemaining.sub(remaining, \"system error: _totalRemaining is invalid\");\r\n      _accountInfoList[account].remaining = 0;\r\n      emit RewardPaid(account, remaining);\r\n    }\r\n  }\r\n\r\n  function _addReward(address, uint128 amount) internal {\r\n    _totalRewardAdded = _totalRewardAdded.add(amount);\r\n  }\r\n\r\n  function _getNextStakeSum() internal view returns (uint128 nextStakeSum) {\r\n    TermInfo memory currentTermInfo = _termInfoList[_currentTerm];\r\n    return\r\n      currentTermInfo\r\n        .stakeSum\r\n        .add(currentTermInfo.stakeAdd)\r\n        .sub(currentTermInfo.stakeRemove)\r\n        .toUint128();\r\n  }\r\n\r\n  function _getCarriedReward() internal view returns (uint256 carriedReward) {\r\n    TermInfo memory currentTermInfo = _termInfoList[_currentTerm];\r\n    return currentTermInfo.stakeSum == 0 ? currentTermInfo.rewardSum : 0; // if stakeSum is 0, carried forward until someone stakes\r\n  }\r\n\r\n  function _getNextTermReward() internal view returns (uint256 rewards) {\r\n    uint256 carriedReward = _getCarriedReward();\r\n    return _totalRewardAdded.add(carriedReward);\r\n  }\r\n\r\n  function _getLatestTerm() internal view returns (uint256) {\r\n    return (block.timestamp - _startTimestamp) / _termInterval;\r\n  }\r\n\r\n  /* ========== CALL FUNCTIONS ========== */\r\n\r\n  /**\r\n   * @return stakingTokenAddress is the token locked for staking\r\n   */\r\n  function getStakingTokenAddress() external view override returns (address stakingTokenAddress) {\r\n    return address(_stakingToken);\r\n  }\r\n\r\n  /**\r\n   * @return startTimestamp is the time when this contract was deployed\r\n   * @return termInterval is the duration of a term\r\n   */\r\n  function getConfigs()\r\n    external\r\n    view\r\n    override\r\n    returns (uint256 startTimestamp, uint256 termInterval)\r\n  {\r\n    startTimestamp = _startTimestamp;\r\n    termInterval = _termInterval;\r\n  }\r\n\r\n  function getTotalRewardAdded() external view returns (uint256 totalRewardAdded) {\r\n    return _totalRewardAdded;\r\n  }\r\n\r\n  /**\r\n   * @return currentTerm is the current latest term\r\n   * @return latestTerm is the potential latest term\r\n   * @return totalRemainingRewards is the as-of remaining rewards and withdrawal\r\n   * @return currentTermRewards is the total rewards at the current term\r\n   * @return nextTermRewards is the as-of total rewards to be paid at the next term\r\n   * @return currentStaking is the total active staking amount\r\n   * @return nextTermStaking is the total staking amount\r\n   */\r\n  function getTokenInfo()\r\n    external\r\n    view\r\n    override\r\n    returns (\r\n      uint256 currentTerm,\r\n      uint256 latestTerm,\r\n      uint256 totalRemainingRewards,\r\n      uint256 currentTermRewards,\r\n      uint256 nextTermRewards,\r\n      uint128 currentStaking,\r\n      uint128 nextTermStaking\r\n    )\r\n  {\r\n    currentTerm = _currentTerm;\r\n    latestTerm = _getLatestTerm();\r\n    totalRemainingRewards = _totalRemaining;\r\n    TermInfo memory termInfo = _termInfoList[_currentTerm];\r\n    currentTermRewards = termInfo.rewardSum;\r\n    nextTermRewards = _getNextTermReward();\r\n    currentStaking = termInfo.stakeSum;\r\n    nextTermStaking = termInfo\r\n      .stakeSum\r\n      .add(termInfo.stakeAdd)\r\n      .sub(termInfo.stakeRemove)\r\n      .toUint128();\r\n  }\r\n\r\n  /**\r\n   * @notice Returns _termInfoList[term].\r\n   */\r\n  function getTermInfo(uint256 term)\r\n    external\r\n    view\r\n    override\r\n    returns (\r\n      int128 stakeAdd,\r\n      uint128 stakeSum,\r\n      uint256 rewardSum\r\n    )\r\n  {\r\n    TermInfo memory termInfo = _termInfoList[term];\r\n    stakeAdd = int256(termInfo.stakeAdd).sub(termInfo.stakeRemove).toInt128();\r\n    stakeSum = termInfo.stakeSum;\r\n    if (term == _currentTerm.add(1)) {\r\n      rewardSum = _getNextTermReward();\r\n    } else {\r\n      rewardSum = termInfo.rewardSum;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return userTerm is the latest term the user has updated to\r\n   * @return stakeAmount is the latest amount of staking from the user has updated to\r\n   * @return nextAddedStakeAmount is the next amount of adding to stake from the user has updated to\r\n   * @return remaining is the reward and withdrawal getting by the user has updated to\r\n   * @return currentTermUserRewards is the as-of user rewards to be paid at `_currentTerm`\r\n   * @return nextTermUserRewards is the as-of user rewards to be paid at the next term of `_currentTerm`\r\n   * @return depositAmount is the staking amount\r\n   * @return withdrawableStakingAmount is the withdrawable staking amount\r\n   */\r\n  function getAccountInfo(address account)\r\n    external\r\n    view\r\n    override\r\n    returns (\r\n      uint256 userTerm,\r\n      uint256 stakeAmount,\r\n      int128 nextAddedStakeAmount,\r\n      uint256 remaining,\r\n      uint256 currentTermUserRewards,\r\n      uint256 nextTermUserRewards,\r\n      uint128 depositAmount,\r\n      uint128 withdrawableStakingAmount\r\n    )\r\n  {\r\n    AccountInfo memory accountInfo = _accountInfoList[account];\r\n    userTerm = accountInfo.userTerm;\r\n    stakeAmount = accountInfo.stakeAmount;\r\n    nextAddedStakeAmount = accountInfo.added;\r\n    depositAmount = addDiff(stakeAmount, nextAddedStakeAmount).toUint128();\r\n    withdrawableStakingAmount = depositAmount;\r\n    remaining = accountInfo.remaining;\r\n\r\n    TermInfo memory termInfo = _termInfoList[_currentTerm];\r\n    uint256 currentTermRewards = termInfo.rewardSum;\r\n    uint256 currentStakeSum = termInfo.stakeSum;\r\n    currentTermUserRewards = currentStakeSum == 0\r\n      ? 0\r\n      : currentTermRewards.mul(userTerm < _currentTerm ? depositAmount : stakeAmount) /\r\n        currentStakeSum;\r\n    uint256 nextTermRewards = _getNextTermReward();\r\n    uint256 nextStakeSum = currentStakeSum.add(termInfo.stakeAdd).sub(termInfo.stakeRemove);\r\n    nextTermUserRewards = nextStakeSum == 0 ? 0 : nextTermRewards.mul(depositAmount) / nextStakeSum;\r\n    // uint256 latestTermUserRewards = _getLatestTerm() > _currentTerm\r\n    //   ? nextTermUserRewards\r\n    //   : currentTermUserRewards;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns `base` added to `diff` which may be nagative number.\r\n   */\r\n  function addDiff(uint256 base, int256 diff) internal pure returns (uint256) {\r\n    if (diff >= 0) {\r\n      return base.add(uint256(diff));\r\n    } else {\r\n      return base.sub(uint256(-diff));\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/Staking/StakingWithAggregator.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract StakingWithAggregator is Ownable, Staking {\r\n  using SafeERC20 for IERC20;\r\n\r\n  event Recovered(address tokenAddress, uint256 tokenAmount);\r\n\r\n  constructor(\r\n    IERC20 stakingToken,\r\n    uint256 startTimestamp,\r\n    uint256 termInterval\r\n  ) Staking(stakingToken, startTimestamp, termInterval) {}\r\n\r\n  /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n  /**\r\n   * @notice Stake the staking token for the token to be paid as reward.\r\n   */\r\n  function stakeViaAggregator(address account, uint128 amount)\r\n    external\r\n    onlyOwner\r\n    nonReentrant\r\n    updateTerm()\r\n    updateReward(account)\r\n    returns (uint128 sendBack)\r\n  {\r\n    require(amount != 0, \"staking amount should be positive number\");\r\n\r\n    sendBack = _stake(account, amount);\r\n    // _stakingToken.safeTransferFrom(msg.sender, address(this), amount - sendBack);\r\n  }\r\n\r\n  /**\r\n   * @notice Withdraw the staking token for the token to be paid as reward.\r\n   */\r\n  function withdrawViaAggregator(address account, uint128 amount)\r\n    external\r\n    onlyOwner\r\n    nonReentrant\r\n    updateTerm()\r\n    updateReward(account)\r\n    returns (uint128 sendBack)\r\n  {\r\n    require(amount != 0, \"withdrawing amount should be positive number\");\r\n\r\n    return _withdraw(account, amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Receive the reward for your staking in the token.\r\n   */\r\n  function receiveRewardViaAggregator(address account)\r\n    external\r\n    onlyOwner\r\n    nonReentrant\r\n    updateTerm()\r\n    updateReward(account)\r\n    returns (uint256 remaining)\r\n  {\r\n    return _receiveReward(account);\r\n  }\r\n\r\n  function addRewardViaAggregator(address account, uint128 amount)\r\n    external\r\n    onlyOwner\r\n    nonReentrant\r\n    updateTerm()\r\n  {\r\n    // _stakingToken.safeTransferFrom(msg.sender, address(this), amount);\r\n    return _addReward(account, amount);\r\n  }\r\n\r\n  /**\r\n   * @notice If you have accidentally transferred token which is not `_stakingToken`,\r\n   * you can use this function to get it back.\r\n   */\r\n  function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\r\n    require(tokenAddress != address(_stakingToken), \"Cannot recover the staking token\");\r\n    IERC20(tokenAddress).safeTransfer(msg.sender, tokenAmount);\r\n    emit Recovered(tokenAddress, tokenAmount);\r\n  }\r\n}\r\n\r\n// File: contracts/Interfaces/StakingAggregatorInterface.sol\r\n\r\n\r\n\r\n\r\n\r\ninterface StakingAggregatorInterface {\r\n  function stake(uint128 amount) external returns (uint128 totalSendBack);\r\n\r\n  function withdraw(uint128 amount) external returns (uint256 totalSendBack);\r\n\r\n  function receiveReward() external returns (uint256 remaining);\r\n\r\n  function addReward(uint256 stakingContractIndex, uint128 amount) external;\r\n\r\n  function getStakingTokenAddress() external view returns (address);\r\n\r\n  function getStakingContracts() external view returns (StakingWithAggregator[] memory);\r\n\r\n  function getConfigs()\r\n    external\r\n    view\r\n    returns (uint256[] memory startTimestampList, uint256 termInterval);\r\n\r\n  function getTokenInfo()\r\n    external\r\n    view\r\n    returns (\r\n      uint256[] memory latestTermList,\r\n      uint256[] memory totalRemainingRewardsList,\r\n      uint256[] memory currentTermRewardsList,\r\n      uint256[] memory nextTermRewardsList,\r\n      uint128[] memory currentStakingList,\r\n      uint128[] memory nextTermStakingList\r\n    );\r\n\r\n  function getTermInfo(uint256 term)\r\n    external\r\n    view\r\n    returns (\r\n      int128[] memory stakeAddList,\r\n      uint128[] memory stakeSumList,\r\n      uint256[] memory rewardSumList\r\n    );\r\n\r\n  function getAccountInfo(address account)\r\n    external\r\n    view\r\n    returns (\r\n      uint256[] memory userTermList,\r\n      uint256[] memory stakeAmountList,\r\n      int128[] memory nextAddedStakeAmountList,\r\n      uint256[] memory currentTermUserRewardsList,\r\n      uint256[] memory nextTermUserRewardsList,\r\n      uint128[] memory withdrawableStakingAmountList\r\n    );\r\n}\r\n\r\n// File: contracts/Staking/StakingAggregator.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract StakingAggregator is StakingAggregatorInterface {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  /* ========== CONSTANT VARIABLES ========== */\r\n\r\n  uint256 internal immutable _termInterval;\r\n  IERC20 internal immutable _stakingToken;\r\n  StakingWithAggregator[] internal _stakingContracts; // immutable\r\n  uint256[] internal _startTimestampList; // immutable\r\n\r\n  /* ========== STATE VARIABLES ========== */\r\n\r\n  /**\r\n   * @dev if this contract is initialized\r\n   */\r\n  bool internal _enabled = false;\r\n\r\n  /* ========== CONSTRUCTOR ========== */\r\n\r\n  constructor(\r\n    IERC20 stakingToken,\r\n    uint256 termInterval,\r\n    StakingWithAggregator[] memory stakingContracts\r\n  ) {\r\n    require(stakingContracts.length != 0, \"staking contracts should not be empty\");\r\n    _stakingToken = stakingToken;\r\n    _termInterval = termInterval;\r\n    uint256 oldStartTimestamp = 0;\r\n    for (uint256 i = 0; i < stakingContracts.length; i++) {\r\n      require(\r\n        stakingContracts[i].getStakingTokenAddress() == address(stakingToken),\r\n        \"staking token address differ from expected\"\r\n      );\r\n      (uint256 ithStartTimestamp, uint256 ithTermInterval) = stakingContracts[i].getConfigs();\r\n      require(ithTermInterval == termInterval, \"term interval differ from expected\");\r\n      require(ithStartTimestamp > oldStartTimestamp, \"startTimestamp should be sorted\");\r\n      oldStartTimestamp = ithStartTimestamp;\r\n      _startTimestampList.push(ithStartTimestamp);\r\n      _stakingContracts.push(stakingContracts[i]);\r\n      // stakingToken.safeApprove(address(stakingContracts[i]), type(uint256).max);\r\n    }\r\n  }\r\n\r\n  modifier isEnabled() {\r\n    require(_enabled, \"aggregator is not initialized\");\r\n    _;\r\n  }\r\n\r\n  /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n  function init() external {\r\n    require(!_enabled, \"already initialized\");\r\n\r\n    for (uint256 i = 0; i < _stakingContracts.length; i++) {\r\n      require(_stakingContracts[i].owner() == address(this), \"not owner\");\r\n    }\r\n\r\n    _enabled = true;\r\n  }\r\n\r\n  /**\r\n   * @notice Stake the staking token for the token to be paid as reward.\r\n   */\r\n  function stake(uint128 amount) external override isEnabled returns (uint128 totalSendBack) {\r\n    uint256 maxUntilNextTerm;\r\n    uint256 nextStakingContractIndex;\r\n    for (uint256 i = 0; i < _startTimestampList.length; i++) {\r\n      // assert(_startTimestampList[i] <= block.timestamp);\r\n      uint256 untilNextTerm = (block.timestamp - _startTimestampList[i]) % _termInterval;\r\n      if (untilNextTerm > maxUntilNextTerm) {\r\n        maxUntilNextTerm = untilNextTerm;\r\n        nextStakingContractIndex = i;\r\n      }\r\n    }\r\n\r\n    totalSendBack = _stakingContracts[nextStakingContractIndex].stakeViaAggregator(\r\n      msg.sender,\r\n      amount\r\n    );\r\n\r\n    if (amount - totalSendBack != 0) {\r\n      _stakingToken.safeTransferFrom(msg.sender, address(this), amount - totalSendBack);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Withdraw the staking token for the token to be paid as reward.\r\n   * @return totalSendBack is the amount returned instantly.\r\n   */\r\n  function withdraw(uint128 amount) external override isEnabled returns (uint256 totalSendBack) {\r\n    require(amount != 0, \"withdrawing amount should be positive number\");\r\n\r\n    uint256 maxUntilNextTerm;\r\n    uint256 nextStakingContractIndex;\r\n    for (uint256 i = 0; i < _startTimestampList.length; i++) {\r\n      // assert(_startTimestampList[i] <= block.timestamp);\r\n      uint256 untilNextTerm = (block.timestamp - _startTimestampList[i]) % _termInterval;\r\n      if (untilNextTerm > maxUntilNextTerm) {\r\n        maxUntilNextTerm = untilNextTerm;\r\n        nextStakingContractIndex = i;\r\n      }\r\n    }\r\n\r\n    for (\r\n      uint256 i = nextStakingContractIndex;\r\n      i < nextStakingContractIndex + _startTimestampList.length && amount != 0;\r\n      i++\r\n    ) {\r\n      StakingWithAggregator ithStakingContract = _stakingContracts[i % _startTimestampList.length];\r\n      (, , , , , , uint128 withdrawableAmount, ) = ithStakingContract.getAccountInfo(msg.sender);\r\n      uint128 ithAmount = (amount < withdrawableAmount) ? amount : withdrawableAmount;\r\n      // assert(amount >= ithAmount);\r\n      amount -= ithAmount;\r\n\r\n      if (ithAmount != 0) {\r\n        uint128 sendBack = ithStakingContract.withdrawViaAggregator(msg.sender, ithAmount);\r\n        totalSendBack = totalSendBack.add(sendBack);\r\n      }\r\n    }\r\n\r\n    require(amount == 0, \"exceed withdrawable amount\");\r\n\r\n    if (totalSendBack != 0) {\r\n      _stakingToken.safeTransfer(msg.sender, totalSendBack);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Receive the reward for your staking in the token.\r\n   */\r\n  function receiveReward() external override isEnabled returns (uint256 remaining) {\r\n    for (uint256 i = 0; i < _stakingContracts.length; i++) {\r\n      remaining = remaining.add(_stakingContracts[i].receiveRewardViaAggregator(msg.sender));\r\n    }\r\n\r\n    if (remaining != 0) {\r\n      _stakingToken.safeTransfer(msg.sender, remaining);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Add the reward to this contract.\r\n   */\r\n  function addReward(uint256 stakingContractIndex, uint128 amount) external override isEnabled {\r\n    require(\r\n      stakingContractIndex < _stakingContracts.length,\r\n      \"stakingContractIndex is out of index\"\r\n    );\r\n    _stakingToken.safeTransferFrom(msg.sender, address(this), amount);\r\n    return _stakingContracts[stakingContractIndex].addRewardViaAggregator(msg.sender, amount);\r\n  }\r\n\r\n  function getStakingTokenAddress() external view override returns (address) {\r\n    return address(_stakingToken);\r\n  }\r\n\r\n  function getStakingContracts()\r\n    external\r\n    view\r\n    override\r\n    returns (StakingWithAggregator[] memory stakingContracts)\r\n  {\r\n    return _stakingContracts;\r\n  }\r\n\r\n  function getConfigs()\r\n    external\r\n    view\r\n    override\r\n    returns (uint256[] memory startTimestampList, uint256 termInterval)\r\n  {\r\n    startTimestampList = _startTimestampList;\r\n    termInterval = _termInterval;\r\n  }\r\n\r\n  function getTokenInfo()\r\n    external\r\n    view\r\n    override\r\n    returns (\r\n      uint256[] memory latestTermList,\r\n      uint256[] memory totalRemainingRewardsList,\r\n      uint256[] memory currentTermRewardsList,\r\n      uint256[] memory nextTermRewardsList,\r\n      uint128[] memory currentStakingList,\r\n      uint128[] memory nextTermStakingList\r\n    )\r\n  {\r\n    uint256 numOfStakingContracts = _stakingContracts.length;\r\n    latestTermList = new uint256[](numOfStakingContracts);\r\n    totalRemainingRewardsList = new uint256[](numOfStakingContracts);\r\n    currentTermRewardsList = new uint256[](numOfStakingContracts);\r\n    nextTermRewardsList = new uint256[](numOfStakingContracts);\r\n    currentStakingList = new uint128[](numOfStakingContracts);\r\n    nextTermStakingList = new uint128[](numOfStakingContracts);\r\n    for (uint256 i = 0; i < numOfStakingContracts; i++) {\r\n      (\r\n        ,\r\n        uint256 latestTerm,\r\n        uint256 totalRemainingRewards,\r\n        uint256 currentTermRewards,\r\n        uint256 nextTermRewards,\r\n        uint128 currentStaking,\r\n        uint128 nextTermStaking\r\n      ) = _stakingContracts[i].getTokenInfo();\r\n      latestTermList[i] = latestTerm;\r\n      totalRemainingRewardsList[i] = totalRemainingRewards;\r\n      currentTermRewardsList[i] = currentTermRewards;\r\n      nextTermRewardsList[i] = nextTermRewards;\r\n      currentStakingList[i] = currentStaking;\r\n      nextTermStakingList[i] = nextTermStaking;\r\n    }\r\n  }\r\n\r\n  function getTermInfo(uint256 term)\r\n    external\r\n    view\r\n    override\r\n    returns (\r\n      int128[] memory stakeAddList,\r\n      uint128[] memory stakeSumList,\r\n      uint256[] memory rewardSumList\r\n    )\r\n  {\r\n    uint256 numOfStakingContracts = _stakingContracts.length;\r\n    stakeAddList = new int128[](numOfStakingContracts);\r\n    stakeSumList = new uint128[](numOfStakingContracts);\r\n    rewardSumList = new uint256[](numOfStakingContracts);\r\n    for (uint256 i = 0; i < numOfStakingContracts; i++) {\r\n      (int128 stakeAdd, uint128 stakeSum, uint256 rewardSum) = _stakingContracts[i].getTermInfo(\r\n        term\r\n      );\r\n      stakeAddList[i] = stakeAdd;\r\n      stakeSumList[i] = stakeSum;\r\n      rewardSumList[i] = rewardSum;\r\n    }\r\n  }\r\n\r\n  function getAccountInfo(address account)\r\n    external\r\n    view\r\n    override\r\n    returns (\r\n      uint256[] memory userTermList,\r\n      uint256[] memory stakeAmountList,\r\n      int128[] memory nextAddedStakeAmountList,\r\n      uint256[] memory currentTermUserRewardsList,\r\n      uint256[] memory nextTermUserRewardsList,\r\n      uint128[] memory withdrawableStakingAmountList\r\n    )\r\n  {\r\n    uint256 numOfStakingContracts = _stakingContracts.length;\r\n    userTermList = new uint256[](numOfStakingContracts);\r\n    stakeAmountList = new uint256[](numOfStakingContracts);\r\n    nextAddedStakeAmountList = new int128[](numOfStakingContracts);\r\n    currentTermUserRewardsList = new uint256[](numOfStakingContracts);\r\n    nextTermUserRewardsList = new uint256[](numOfStakingContracts);\r\n    withdrawableStakingAmountList = new uint128[](numOfStakingContracts);\r\n    for (uint256 i = 0; i < numOfStakingContracts; i++) {\r\n      address accountTmp = account;\r\n      (\r\n        uint256 userTerm,\r\n        uint256 stakeAmount,\r\n        int128 nextAddedStakeAmount,\r\n        ,\r\n        uint256 currentTermUserRewards,\r\n        uint256 nextTermUserRewards,\r\n        ,\r\n        uint128 withdrawableStakingAmount\r\n      ) = _stakingContracts[i].getAccountInfo(accountTmp);\r\n      userTermList[i] = userTerm;\r\n      stakeAmountList[i] = stakeAmount;\r\n      nextAddedStakeAmountList[i] = nextAddedStakeAmount;\r\n      currentTermUserRewardsList[i] = currentTermUserRewards;\r\n      nextTermUserRewardsList[i] = nextTermUserRewards;\r\n      withdrawableStakingAmountList[i] = withdrawableStakingAmount;\r\n    }\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termInterval\",\"type\":\"uint256\"},{\"internalType\":\"contract StakingWithAggregator[]\",\"name\":\"stakingContracts\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingContractIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"userTermList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakeAmountList\",\"type\":\"uint256[]\"},{\"internalType\":\"int128[]\",\"name\":\"nextAddedStakeAmountList\",\"type\":\"int128[]\"},{\"internalType\":\"uint256[]\",\"name\":\"currentTermUserRewardsList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nextTermUserRewardsList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint128[]\",\"name\":\"withdrawableStakingAmountList\",\"type\":\"uint128[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfigs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"startTimestampList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"termInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingContracts\",\"outputs\":[{\"internalType\":\"contract StakingWithAggregator[]\",\"name\":\"stakingContracts\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"}],\"name\":\"getTermInfo\",\"outputs\":[{\"internalType\":\"int128[]\",\"name\":\"stakeAddList\",\"type\":\"int128[]\"},{\"internalType\":\"uint128[]\",\"name\":\"stakeSumList\",\"type\":\"uint128[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardSumList\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"latestTermList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalRemainingRewardsList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"currentTermRewardsList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nextTermRewardsList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint128[]\",\"name\":\"currentStakingList\",\"type\":\"uint128[]\"},{\"internalType\":\"uint128[]\",\"name\":\"nextTermStakingList\",\"type\":\"uint128[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"totalSendBack\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSendBack\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakingAggregator","CompilerVersion":"v0.7.1+commit.f4a555be","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"00000000000000000000000046ba9c1d2348315e7ed3d583d03a4ed9ec3baf850000000000000000000000000000000000000000000000000000000000002a30000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000060000000000000000000000007b1473a1a259cc5a086272551c303b50d5aa339400000000000000000000000089ca046b397739565bcc283d268a12e3b0f4067d000000000000000000000000ff4b9fe39ca710e494daffd465dcc9c4480492ad000000000000000000000000fe97a4e2b8d011165323d0bc3fb474f9c45e973e000000000000000000000000b9955ba4076393e56e72bb4302cb4442d24ef0e800000000000000000000000083d9bc3abedc207557729c91a4758e40171fb905","EVMVersion":"constantinople","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d5d53887da739289cfd6e78c2701a56db1f7e189075fecb84f093994f102a421"}]}