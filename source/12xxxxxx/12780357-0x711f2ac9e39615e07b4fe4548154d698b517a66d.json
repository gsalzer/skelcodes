{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Staking.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./IStaking.sol\\\";\\n\\ncontract Staking is IStaking, ReentrancyGuard {\\n    mapping(address => uint256) private _stakedBalances;\\n    mapping(address => uint256) private _unlockTimes;\\n\\n    address private tokenAddress;\\n    address private daoAddress;\\n    uint256 totalStakedBalance;\\n    bool shutdown=false;\\n\\n    event StakeChanged(address staker, uint256 newStakedBalance);\\n    event UnlockTimeIncreased(address staker, uint256 newUnlockBlock);\\n    event EmergencyShutdown(address calledBy, uint256 shutdownBlock);\\n\\n    modifier onlyDao() {\\n        require(msg.sender == daoAddress, \\\"only dao can call this function\\\");\\n        _;\\n    }\\n\\n    modifier notShutdown() {\\n        require(!shutdown, \\\"cannot be called after shutdown\\\");\\n        _;\\n    }\\n\\n    constructor(address _token, address _dao) {\\n        tokenAddress = _token;\\n        daoAddress = _dao;\\n    }\\n\\n    /**\\n     * @dev returns address of the token that can be staked\\n     *\\n     * @return the address of the token contract\\n     */\\n    function getTokenAddress() public view returns (address) {\\n        return tokenAddress;\\n    }\\n\\n    /**\\n     * @dev returns address of the DAO contract\\n     *\\n     * @return the address of the dao contract\\n     */\\n    function getDaoAddress() public view returns (address) {\\n        return daoAddress;\\n    }\\n\\n    /**\\n     * @dev Gets staker's staked balance (voting power)\\n     * @param staker                 The staker's address\\n     * @return (uint) staked token balance\\n     */\\n    function getStakedBalance(address staker) external view override returns(uint256) {\\n        return _stakedBalances[staker];\\n    }\\n\\n    /**\\n     * @dev Gets staker's unlock time\\n     * @param staker                 The staker's address\\n     * @return (uint) staker's unlock time in blocks\\n     */\\n    function getUnlockTime(address staker) external view override returns(uint256) {\\n        return _unlockTimes[staker];\\n    }\\n\\n    /**\\n     * @dev returns if staking contract is shutdown or not\\n     */\\n    function isShutdown() public view override returns(bool) {\\n        return shutdown;\\n    }\\n\\n    // Raphael calls this to lock tokens when vote() called\\n    function voted(\\n        address voter,\\n        uint256 endBlock\\n    ) external onlyDao notShutdown override returns(bool) {\\n        if(_unlockTimes[voter] < endBlock){\\n            _unlockTimes[voter] = endBlock;\\n\\n            emit UnlockTimeIncreased(voter, endBlock);\\n        }\\n \\n        return true;\\n    }\\n\\n    /**\\n     * @dev allows a user to stake and to increase their stake\\n     * @param amount the uint256 amount of native token being staked/added\\n     * @notice user must first approve staking contract for at least the amount\\n     */\\n    function stake(uint256 amount) external notShutdown override {\\n        IERC20 tokenContract = IERC20(tokenAddress);\\n        require(tokenContract.balanceOf(msg.sender) >= amount, \\\"Amount higher than user's balance\\\");\\n        require(tokenContract.allowance(msg.sender, address(this)) >= amount, 'Approved allowance too low');\\n        require(\\n            tokenContract.transferFrom(msg.sender, address(this), amount),\\n            \\\"staking tokens failed\\\"\\n        );\\n        totalStakedBalance += amount;\\n        _stakedBalances[msg.sender] += amount;\\n\\n        emit StakeChanged(msg.sender, _stakedBalances[msg.sender]);\\n    }\\n\\n    /**\\n     * @dev allows a user to withdraw their unlocked tokens\\n     * @param amount the uint256 amount of native token being withdrawn\\n     */\\n    function withdraw(uint256 amount) external override {\\n        if(!shutdown){\\n            require(_unlockTimes[msg.sender] < block.number, \\\"Tokens not unlocked yet\\\");\\n        }\\n        require(\\n            _stakedBalances[msg.sender] >= amount,\\n            \\\"Insufficient staked balance\\\"\\n        );\\n        require(totalStakedBalance >= amount, \\\"insufficient funds in contract\\\");\\n\\n        // Send unlocked tokens back to user\\n        totalStakedBalance -= amount;\\n        _stakedBalances[msg.sender] -= amount;\\n        IERC20 tokenContract = IERC20(tokenAddress);\\n        require(tokenContract.transfer(msg.sender, amount), \\\"withdraw failed\\\");\\n    }\\n\\n    function emergencyShutdown(address admin) external onlyDao notShutdown nonReentrant override {\\n        // when shutdown = true, it skips the locktime require in withdraw\\n        // so all users get their tokens unlocked immediately\\n        shutdown = true;\\n        emit EmergencyShutdown(admin, block.number);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IStaking.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IStaking{\\n    function getStakedBalance(address staker) external view returns(uint256);\\n    function getUnlockTime(address staker) external view returns(uint256);\\n    function isShutdown() external view returns(bool);\\n    function voted(address voter, uint256 endBlock) external returns(bool);\\n    function stake(uint256 amount) external;\\n    function withdraw(uint256 amount) external;\\n    function emergencyShutdown(address admin) external;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"calledBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shutdownBlock\",\"type\":\"uint256\"}],\"name\":\"EmergencyShutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStakedBalance\",\"type\":\"uint256\"}],\"name\":\"StakeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newUnlockBlock\",\"type\":\"uint256\"}],\"name\":\"UnlockTimeIncreased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"emergencyShutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDaoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"voted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Staking","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000081f8f0bb1cb2a06649e51913a151f0e7ef6fa3210000000000000000000000009abf28ab6f80c1ef666f983935437e717aafff7a","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}