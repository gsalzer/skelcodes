{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/ovdbigge/argent/contracts5/contracts/infrastructure/dapp/BaseFilter.sol\": {\r\n      \"content\": \"// Copyright (C) 2021  Argent Labs Ltd. <https://argent.xyz>\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IFilter.sol\\\";\\n\\nabstract contract BaseFilter is IFilter {\\n    function getMethod(bytes memory _data) internal pure returns (bytes4 method) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            method := mload(add(_data, 0x20))\\n        }\\n    }\\n}\"\r\n    },\r\n    \"/Users/ovdbigge/argent/contracts5/contracts/infrastructure/dapp/IFilter.sol\": {\r\n      \"content\": \"// Copyright (C) 2021  Argent Labs Ltd. <https://argent.xyz>\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.3;\\n\\ninterface IFilter {\\n    function isValid(address _wallet, address _spender, address _to, bytes calldata _data) external view returns (bool valid);\\n}\"\r\n    },\r\n    \"/Users/ovdbigge/argent/contracts5/contracts/infrastructure/dapp/paraswap/ParaswapUtils.sol\": {\r\n      \"content\": \"// Copyright (C) 2020  Argent Labs Ltd. <https://argent.xyz>\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.3;\\n\\n/**\\n * @title ParaswapUtils\\n * @notice Common methods used by Paraswap filters\\n */\\nlibrary ParaswapUtils {\\n    address constant internal ETH_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    struct ZeroExV2Order {\\n        address makerAddress;\\n        address takerAddress;\\n        address feeRecipientAddress;\\n        address senderAddress;\\n        uint256 makerAssetAmount;\\n        uint256 takerAssetAmount;\\n        uint256 makerFee;\\n        uint256 takerFee;\\n        uint256 expirationTimeSeconds;\\n        uint256 salt;\\n        bytes makerAssetData;\\n        bytes takerAssetData;\\n    }\\n\\n    struct ZeroExV2Data {\\n        ZeroExV2Order[] orders;\\n        bytes[] signatures;\\n    }\\n\\n    struct ZeroExV4Order {\\n        address makerToken;\\n        address takerToken;\\n        uint128 makerAmount;\\n        uint128 takerAmount;\\n        address maker;\\n        address taker;\\n        address txOrigin;\\n        bytes32 pool;\\n        uint64 expiry;\\n        uint256 salt;\\n    }\\n\\n    struct ZeroExV4Signature {\\n        uint8 signatureType;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct ZeroExV4Data {\\n        ZeroExV4Order order;\\n        ZeroExV4Signature signature;\\n    }\\n\\n    function hasValidUniV3Pool(\\n        address _fromToken,\\n        address _toToken,\\n        uint24 _fee,\\n        address _tokenRegistry,\\n        address _factory,\\n        bytes32 _initCode,\\n        address _weth\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        address poolToken = uniV3PoolFor(_fromToken, _toToken, _fee, _factory, _initCode, _weth);\\n        return hasTradableToken(_tokenRegistry, poolToken);\\n    }\\n\\n    function hasValidUniV2Path(\\n        address[] memory _path,\\n        address _tokenRegistry,\\n        address _factory,\\n        bytes32 _initCode,\\n        address _weth\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        address[] memory lpTokens = new address[](_path.length - 1);\\n        for(uint i = 0; i < lpTokens.length; i++) {\\n            lpTokens[i] = uniV2PairFor(_path[i], _path[i+1], _factory, _initCode, _weth);\\n        }\\n        return hasTradableTokens(_tokenRegistry, lpTokens);\\n    }\\n\\n    function uniV3PoolFor(\\n        address _tokenA,\\n        address _tokenB,\\n        uint24 _fee,\\n        address _factory,\\n        bytes32 _initCode,\\n        address _weth\\n    )\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        (address tokenA, address tokenB) = (_tokenA == ETH_TOKEN ? _weth : _tokenA, _tokenB == ETH_TOKEN ? _weth : _tokenB);\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        return(address(uint160(uint(keccak256(abi.encodePacked(\\n            hex\\\"ff\\\",\\n            _factory,\\n            keccak256(abi.encode(token0, token1, _fee)),\\n            _initCode\\n        ))))));\\n    }\\n\\n    function uniV2PairFor(address _tokenA, address _tokenB, address _factory, bytes32 _initCode, address _weth) internal pure returns (address) {\\n        (address tokenA, address tokenB) = (_tokenA == ETH_TOKEN ? _weth : _tokenA, _tokenB == ETH_TOKEN ? _weth : _tokenB);\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        return(address(uint160(uint(keccak256(abi.encodePacked(\\n            hex\\\"ff\\\",\\n            _factory,\\n            keccak256(abi.encodePacked(token0, token1)),\\n            _initCode\\n        ))))));\\n    }\\n\\n    function hasTradableTokens(address _tokenRegistry, address[] memory _tokens) internal view returns (bool) {\\n        (bool success, bytes memory res) = _tokenRegistry.staticcall(abi.encodeWithSignature(\\\"areTokensTradable(address[])\\\", _tokens));\\n        return success && abi.decode(res, (bool));\\n    \\n    }\\n    function hasTradableToken(address _tokenRegistry, address _token) internal view returns (bool) {\\n        (bool success, bytes memory res) = _tokenRegistry.staticcall(abi.encodeWithSignature(\\\"isTokenTradable(address)\\\", _token));\\n        return success && abi.decode(res, (bool));\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/ovdbigge/argent/contracts5/contracts/infrastructure/dapp/paraswap/UniswapV3RouterFilter.sol\": {\r\n      \"content\": \"// Copyright (C) 2021  Argent Labs Ltd. <https://argent.xyz>\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.3;\\n\\nimport \\\"../BaseFilter.sol\\\";\\nimport \\\"./ParaswapUtils.sol\\\";\\n\\n/**\\n * @title UniswapV3RouterFilter\\n * @notice Filter used for calls to UniswapV3 router (aka \\\"SwapRouter\\\").\\n    SwapRouter is deployed at 0xE592427A0AEce92De3Edee1F18E0157C05861564\\n * @author Olivier VDB - <olivier@argent.xyz>\\n */\\ncontract UniswapV3RouterFilter is BaseFilter {\\n\\n    bytes4 private constant SELL_SINGLE = bytes4(keccak256(\\\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\\\"));\\n    bytes4 private constant ERC20_APPROVE = bytes4(keccak256(\\\"approve(address,uint256)\\\"));\\n\\n    // The token registry\\n    address public immutable tokenRegistry;\\n    // The UniV3 factory\\n    address public immutable factory;\\n    // The UniV3 pool initCode\\n    bytes32 public immutable initCode;\\n    // The WETH address\\n    address public immutable weth;\\n\\n    constructor(address _tokenRegistry, address _factory, bytes32 _initCode, address _weth) {\\n        tokenRegistry = _tokenRegistry;\\n        factory = _factory;\\n        initCode = _initCode;\\n        weth = _weth;\\n    }\\n\\n    function isValid(address _wallet, address _spender, address _to, bytes calldata _data) external view override returns (bool valid) {\\n        // disable ETH transfer\\n        if (_data.length < 4) {\\n            return false;\\n        }\\n\\n        bytes4 methodId = getMethod(_data);\\n\\n        if(methodId == SELL_SINGLE) {\\n            (address tokenFrom, address tokenTo, uint24 fee, address recipient) = abi.decode(_data[4:], (address, address, uint24, address));\\n            return ParaswapUtils.hasValidUniV3Pool(tokenFrom, tokenTo, fee, tokenRegistry, factory, initCode, weth) && recipient == _wallet;\\n        } \\n        \\n        return methodId == ERC20_APPROVE && _spender != _to;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_initCode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initCode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"isValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UniswapV3RouterFilter","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"000000000000000000000000d270702a8344c4801afbd0951cf17a27987000460000000000000000000000001f98431c8ad98523631ae4a59f267346ea31f984e34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}