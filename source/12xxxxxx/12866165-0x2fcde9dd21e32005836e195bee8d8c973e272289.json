{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0\r\npragma solidity ^0.7.5;\r\npragma abicoder v2;\r\n\r\nlibrary DistributionTypes {\r\n  struct AssetConfigInput {\r\n    uint104 emissionPerSecond;\r\n    uint256 totalStaked;\r\n    address underlyingAsset;\r\n  }\r\n\r\n  struct UserStakeInput {\r\n    address underlyingAsset;\r\n    uint256 stakedByUser;\r\n    uint256 totalStaked;\r\n  }\r\n}\r\n\r\ninterface IAaveEcosystemReserveController {\r\n  function AAVE_RESERVE_ECOSYSTEM() external view returns (address);\r\n\r\n  function approve(\r\n    address token,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external;\r\n\r\n  function owner() external view returns (address);\r\n\r\n  function renounceOwnership() external;\r\n\r\n  function transfer(\r\n    address token,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external;\r\n\r\n  function transferOwnership(address newOwner) external;\r\n}\r\n\r\ninterface IAaveDistributionManager {\r\n  \r\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\r\n  event AssetIndexUpdated(address indexed asset, uint256 index);\r\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\r\n  event DistributionEndUpdated(uint256 newDistributionEnd);\r\n\r\n  /**\r\n  * @dev Sets the end date for the distribution\r\n  * @param distributionEnd The end date timestamp\r\n  **/\r\n  function setDistributionEnd(uint256 distributionEnd) external;\r\n\r\n  /**\r\n  * @dev Gets the end date for the distribution\r\n  * @return The end of the distribution\r\n  **/\r\n  function getDistributionEnd() external view returns (uint256);\r\n\r\n  /**\r\n  * @dev for backwards compatibility with the previous DistributionManager used\r\n  * @return The end of the distribution\r\n  **/\r\n  function DISTRIBUTION_END() external view returns(uint256);\r\n\r\n   /**\r\n   * @dev Returns the data of an user on a distribution\r\n   * @param user Address of the user\r\n   * @param asset The address of the reference asset of the distribution\r\n   * @return The new index\r\n   **/\r\n   function getUserAssetData(address user, address asset) external view returns (uint256);\r\n\r\n   /**\r\n   * @dev Returns the configuration of the distribution for a certain asset\r\n   * @param asset The address of the reference asset of the distribution\r\n   * @return The asset index, the emission per second and the last updated timestamp\r\n   **/\r\n   function getAssetData(address asset) external view returns (uint256, uint256, uint256);\r\n}\r\n\r\ninterface IAaveIncentivesController is IAaveDistributionManager {\r\n  \r\n  event RewardsAccrued(address indexed user, uint256 amount);\r\n  \r\n  event RewardsClaimed(\r\n    address indexed user,\r\n    address indexed to,\r\n    address indexed claimer,\r\n    uint256 amount\r\n  );\r\n\r\n  event ClaimerSet(address indexed user, address indexed claimer);\r\n\r\n  /**\r\n   * @dev Whitelists an address to claim the rewards on behalf of another address\r\n   * @param user The address of the user\r\n   * @param claimer The address of the claimer\r\n   */\r\n  function setClaimer(address user, address claimer) external;\r\n\r\n  /**\r\n   * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\r\n   * @param user The address of the user\r\n   * @return The claimer address\r\n   */\r\n  function getClaimer(address user) external view returns (address);\r\n\r\n  /**\r\n   * @dev Configure assets for a certain rewards emission\r\n   * @param assets The assets to incentivize\r\n   * @param emissionsPerSecond The emission for each asset\r\n   */\r\n  function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\r\n    external;\r\n\r\n\r\n  /**\r\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\r\n   * @param asset The address of the user\r\n   * @param userBalance The balance of the user of the asset in the lending pool\r\n   * @param totalSupply The total supply of the asset in the lending pool\r\n   **/\r\n  function handleAction(\r\n    address asset,\r\n    uint256 userBalance,\r\n    uint256 totalSupply\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Returns the total of rewards of an user, already accrued + not yet accrued\r\n   * @param user The address of the user\r\n   * @return The rewards\r\n   **/\r\n  function getRewardsBalance(address[] calldata assets, address user)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  /**\r\n   * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\r\n   * @param amount Amount of rewards to claim\r\n   * @param to Address that will be receiving the rewards\r\n   * @return Rewards claimed\r\n   **/\r\n  function claimRewards(\r\n    address[] calldata assets,\r\n    uint256 amount,\r\n    address to\r\n  ) external returns (uint256);\r\n\r\n  /**\r\n   * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\r\n   * be whitelisted via \"allowClaimOnBehalf\" function by the RewardsAdmin role manager\r\n   * @param amount Amount of rewards to claim\r\n   * @param user Address to check and claim rewards\r\n   * @param to Address that will be receiving the rewards\r\n   * @return Rewards claimed\r\n   **/\r\n  function claimRewardsOnBehalf(\r\n    address[] calldata assets,\r\n    uint256 amount,\r\n    address user,\r\n    address to\r\n  ) external returns (uint256);\r\n\r\n  /**\r\n   * @dev returns the unclaimed rewards of the user\r\n   * @param user the address of the user\r\n   * @return the unclaimed user rewards\r\n   */\r\n  function getUserUnclaimedRewards(address user) external view returns (uint256);\r\n\r\n  /**\r\n  * @dev for backward compatibility with previous implementation of the Incentives controller\r\n  */\r\n  function REWARD_TOKEN() external view returns (address);\r\n}\r\n\r\ncontract IncentivesExtensionProposal {\r\n\r\n  address constant AAVE_TOKEN = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\r\n  address constant ECO_RESERVE_ADDRESS = 0x1E506cbb6721B83B1549fa1558332381Ffa61A93;\r\n  address constant INCENTIVES_CONTROLLER_PROXY_ADDRESS = 0xd784927Ff2f95ba542BfC824c8a8a98F3495f6b5;\r\n\r\n  uint256 constant DISTRIBUTION_DURATION = 2592000; // 30 days\r\n  uint256 constant DISTRIBUTION_AMOUNT = 66000000000000000000000; // 66000 AAVE during 30 days\r\n\r\n  function execute() external {\r\n    \r\n    IAaveIncentivesController incentivesController =\r\n      IAaveIncentivesController(INCENTIVES_CONTROLLER_PROXY_ADDRESS);\r\n    IAaveEcosystemReserveController ecosystemReserveController =\r\n      IAaveEcosystemReserveController(ECO_RESERVE_ADDRESS);\r\n\r\n    // Transfer AAVE funds to the Incentives Controller\r\n    ecosystemReserveController.transfer(\r\n      AAVE_TOKEN,\r\n      INCENTIVES_CONTROLLER_PROXY_ADDRESS,\r\n      DISTRIBUTION_AMOUNT\r\n    );\r\n\r\n    // Sets the end date for the distribution\r\n    incentivesController.setDistributionEnd(block.timestamp + DISTRIBUTION_DURATION);\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"IncentivesExtensionProposal","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://97f0c7085dcceed0bdb2a30935e76872235ede5c18eb1ec620371d8982a89f2c"}]}