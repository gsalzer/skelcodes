{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\n- ✔️ Supply Name: Pearl of the Orient Seas - Creating a better life for everyone\r\n- ✔️ Symbol: PEARL\r\n- ✔️ Anti-Whale System (3% Sell Price Impact)\r\n- ✔️ Anti-Serial Selling System (Anti-Dump)\r\n- ✔️ Manual Burning and Buyback capability\r\n- ✔️ Send to Buyback Wallet per transaction: 2% (Sent on ETH)\r\n- ✔️ Send to Marketing Wallet per transaction: 1% (Sent on ETH)\r\n- ✔️ Send to Team Wallet per transaction: 5% (Sent on ETH)\r\n- ✔️ Send to Charity Wallet per transaction: 2% (Sent on ETH)\r\n- ✔️ Implemented Dynamic Sell Logic (Anti-Bot)\r\n\r\n       \r\n    Developed by Yiannos Christou     \r\n    Debugged, and Tested by Jay Pingul   \r\n    Team: Angelica Tresvalles, Leonard Bangco, Kriz Resurreccion, Edward Nguyen, and the one and only TITA MORIN  \r\n    \r\n*/\r\n\r\n\r\n\r\npragma solidity ^0.8.4;\r\n// SPDX-License-Identifier: MIT\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * It also provides the functionality to store the contract in VøidSwap's Cosmic Vault\r\n * using {storeInCosmicVault}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\n\r\ncontract CVOwnable is Context {\r\n    address private _owner;\r\n    uint256 private _unlockTime;\r\n    address private _previousOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"CVOwnable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the address of the previous owner.\r\n     */\r\n    function previousOwner() public view returns(address) {\r\n        return _previousOwner;\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the unlock time of the contracted stored in the Cosmic Vault.\r\n     */\r\n    function getUnlockTime() public view returns(uint256){\r\n        return _unlockTime;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to the Cosmic Vault (`cosmicVault`) and\r\n     * sets the time (`unlockTime`) at which the now stored contract can be transferred back to\r\n     * the previous owner.\r\n\r\n     * NOTE Can only be called by the current owner.\r\n     */\r\n    function storeInCosmicVault(address cosmicVault, uint256 unlockTime) public virtual onlyOwner {\r\n        require(cosmicVault != address(0), \"CVOwnable: new owner is the zero address\");\r\n        _previousOwner = _owner;\r\n        _unlockTime = unlockTime;\r\n        emit OwnershipTransferred(_previousOwner, cosmicVault);\r\n        _owner = cosmicVault;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\r\n     * NOTE Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"CVOwnable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        _previousOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(_previousOwner, newOwner);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n}\r\n\r\ncontract PEARL is Context, IERC20, CVOwnable { // Nominal name\r\n    using SafeMath for uint256;\r\n\r\n    string private constant _name = \"Pearl of the Orient Seas\"; // Token Name\r\n    string private constant _symbol = \"PEARL\";   // Token symbol\r\n    uint8 private constant _decimals = 9;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n\r\n    address public immutable deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    uint256 private constant _tTotal = 100000000000 * 10**9; // Total supply\r\n    uint256 public _teamFee = 10;\r\n    uint256 public _storedTeamFee = _teamFee;\r\n\r\n    uint256 public _teamCutPct = 5; // 5% cut to team\r\n    uint256 public _marketingCutPct = 1; //  1% cut to marketing funds\r\n    uint256 public _charityCutPct = 2; // 2% cut to Project Pearls\r\n    uint256 public _liquidityCutPct = 2; // 2% Buyback cut\r\n\r\n    mapping(address => uint256) private sellCooldown;\r\n    mapping(address => uint256) private firstSell;\r\n    mapping(address => uint256) private sellNumber;\r\n\r\n    address payable private _teamAddress;\r\n    address payable private _marketingAddress;\r\n    address payable private _charityAddress;\r\n    address payable private _liquidityAddress;\r\n    uint256 public minimumContractTokenBalanceToSwap = 10000000 * 10**9;   // 0.06% of total supply for both LQ and ETH distribution\r\n    uint256 public minimumContractEthBalanceToSwap = 3 * 10**16;\r\n    mapping(address => bool) private _isAdmin;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen = false;\r\n    bool private liquidityAdded = false;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n    uint256 private _maxTxAmount = _tTotal;\r\n\r\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity);\r\n    event SwapTokensForETH(uint256 amountIn, address[] path);\r\n    \r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor(address payable teamFunds, address payable marketingFunds, address payable charityFunds, address payable liquidityFunds) {\r\n        _teamAddress = teamFunds;\r\n        _marketingAddress = marketingFunds;\r\n        _charityAddress = charityFunds;\r\n        _liquidityAddress = liquidityFunds;\r\n        _balances[_msgSender()] = _tTotal;\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isAdmin[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isAdmin[address(this)] = true;\r\n        _isExcludedFromFee[_teamAddress] = true;\r\n        _isAdmin[_teamAddress] = true;\r\n        _isExcludedFromFee[_marketingAddress] = true;\r\n        _isAdmin[_marketingAddress] = true;\r\n        _isExcludedFromFee[_charityAddress] = true;\r\n        _isAdmin[_charityAddress] = true;\r\n        _isExcludedFromFee[_liquidityAddress] = true;\r\n        _isAdmin[_liquidityAddress] = true;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() external pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,\"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    \r\n    function removeAllFee() private {\r\n        if (_teamFee == 0) return;\r\n        _teamFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _teamFee = _storedTeamFee;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this)); // Get Token contract balance\r\n        bool overMinTokenBalance = contractTokenBalance >= minimumContractTokenBalanceToSwap;\r\n        uint256 contractETHBalance = address(this).balance; // Get ETH contract balance\r\n        bool overMinEthBalance = contractETHBalance >= minimumContractEthBalanceToSwap;\r\n\r\n        if (!_isAdmin[from] && !_isAdmin[from]) {\r\n            \r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExcludedFromFee[to]) { // Buying\r\n                require(tradingOpen);\r\n                _teamFee = 10; // BUYING 2% Charity, 2% Liquidity Fee, 1% Marketing, 5% Team Fee = 10\r\n            }\r\n\r\n            if (!inSwap && swapEnabled && to == uniswapV2Pair) { // Dynamic Selling Logic\r\n                require(amount <= balanceOf(uniswapV2Pair).mul(3).div(100) && amount <= _maxTxAmount);\r\n                require(sellCooldown[from] < block.timestamp);\r\n                if(firstSell[from] + (4 hours) < block.timestamp) {\r\n                    sellNumber[from] = 0;\r\n                }\r\n                if (sellNumber[from] == 0) { // Cooldown Timings\r\n                    _teamFee = 10; // BUYING 2% Charity, 2% Liquidity Fee, 1% Marketing, 5% Team Fee = 10\r\n                    sellNumber[from]++;\r\n                    firstSell[from] = block.timestamp;\r\n                    sellCooldown[from] = block.timestamp + (60 seconds); //from initial buy 60 seconds\r\n                }\r\n                else if (sellNumber[from] == 1) {\r\n                    _teamFee = 13; // BUYING 2% Charity, 4% Liquidity Fee, 1% Marketing, 6% Team Fee = 13\r\n                    sellNumber[from]++;\r\n                    sellCooldown[from] = block.timestamp + (30 minutes); //from 1st buy 30 minutes\r\n                }\r\n                else if (sellNumber[from] == 2) {\r\n                    _teamFee = 16; // BUYING 2% Charity, 6% Liquidity Fee, 1% Marketing, 7% Team Fee = 16\r\n                    sellNumber[from]++;\r\n                    sellCooldown[from] = block.timestamp + (2 hours); //from 2nd buy 2 hours\r\n                }\r\n                else if (sellNumber[from] == 3) {\r\n                    _teamFee = 19; // BUYING 2% Charity, 8% Liquidity Fee, 1% Marketing, 8% Team Fee = 19\r\n                    sellNumber[from]++;\r\n                    sellCooldown[from] = firstSell[from] + (4 hours); //from initial buy, 4 hours then resets to 60 seconds\r\n                }\r\n            }\r\n\r\n            if (!inSwap && from != uniswapV2Pair && swapEnabled) {\r\n                if (overMinTokenBalance) {\r\n                    swapTokensForEth(contractTokenBalance);\r\n                }\r\n\r\n                if (overMinEthBalance) {\r\n                    sendETHToFee(contractETHBalance);\r\n                } \r\n            }\r\n\r\n        }\r\n\r\n        bool takeFee = true;\r\n\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n        restoreAllFee;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\r\n        emit SwapTokensForETH(tokenAmount, path);\r\n    }\r\n    \r\n    function sendETHToFee(uint256 beforeSplit) private {\r\n        uint256 teamCut = beforeSplit.mul(50).div(100);\r\n        uint256 marketingCut = beforeSplit.mul(10).div(100);\r\n        uint256 charityCut = beforeSplit.mul(20).div(100);\r\n        uint256 liquidityCut = beforeSplit.mul(20).div(100);\r\n        _teamAddress.transfer(teamCut);\r\n        _marketingAddress.transfer(marketingCut);\r\n        _charityAddress.transfer(charityCut);\r\n        _liquidityAddress.transfer(liquidityCut);\r\n    }\r\n    \r\n    function openTrading() public onlyOwner {\r\n        require(liquidityAdded);\r\n        tradingOpen = true;\r\n    }\r\n\r\n    function addInitialLiquidity() external onlyOwner() {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); //Nominal router.\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this), balanceOf(address(this)), 0, 0, address(this), block.timestamp);\r\n        swapEnabled = true;\r\n        liquidityAdded = true;\r\n        _maxTxAmount = 30000000 * 10**9; // 0.3%\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router),type(uint256).max);\r\n    }\r\n\r\n    function manualTokenSwap() external {\r\n        require(_msgSender() == owner());\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n\r\n    function recoverEthFromContract() external {\r\n        require(_msgSender() == owner());\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendETHToFee(contractETHBalance);\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n        if (!takeFee) removeAllFee();\r\n        _transferStandard(sender, recipient, amount);\r\n        if (!takeFee) restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        ( uint256 tTransferAmount, uint256 tTeam) = _getValues(tAmount);\r\n        _balances[sender] = _balances[sender].sub(tAmount);\r\n        _balances[recipient] = _balances[recipient].add(tTransferAmount);\r\n        _takeTeam(tTeam);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _takeTeam(uint256 tTeam) private {\r\n        _balances[address(this)] = _balances[address(this)].add(tTeam);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tTeam) = _getTValues(tAmount, _teamFee);\r\n        return (tTransferAmount, tTeam);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, uint256 teamFee) private pure returns (uint256, uint256) {\r\n        uint256 tTeam = tAmount.mul(teamFee).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tTeam);\r\n        return (tTransferAmount, tTeam);\r\n    }\r\n\r\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\r\n        require(maxTxPercent > 0, \"Amount must be greater than 0\");\r\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(10**2);\r\n        emit MaxTxAmountUpdated(_maxTxAmount);\r\n    }\r\n\r\n    function manualBurn (uint256 amount) external onlyOwner() {\r\n        require(amount <= balanceOf(owner()), \"Amount exceeds available tokens.\");\r\n        _tokenTransfer(msg.sender, deadAddress, amount, false);\r\n    }\r\n\r\n    function setRouterAddress(address newRouter) public onlyOwner() {\r\n        IUniswapV2Router02 _newPancakeRouter = IUniswapV2Router02(newRouter);\r\n        uniswapV2Pair = IUniswapV2Factory(_newPancakeRouter.factory()).createPair(address(this), _newPancakeRouter.WETH());\r\n        uniswapV2Router = _newPancakeRouter;\r\n    }\r\n\r\n    function setTeamCutFee (uint256 _teamCut) external onlyOwner() {\r\n        _teamCutPct = _teamCut;\r\n        _teamFee = _teamCut.add(_marketingCutPct).add(_charityCutPct).add(_liquidityCutPct);\r\n        _storedTeamFee = _teamFee;\r\n    }\r\n\r\n    function setMarketingCutFee (uint256 _marketingCut) external onlyOwner() {\r\n        _marketingCutPct = _marketingCut;\r\n        _teamFee = _teamCutPct.add(_marketingCut).add(_charityCutPct).add(_liquidityCutPct);\r\n        _storedTeamFee = _teamFee;\r\n    }\r\n    function setCharityCutFee (uint256 _charityCut) external onlyOwner() {\r\n        _charityCutPct = _charityCut;\r\n        _teamFee = _teamCutPct.add(_marketingCutPct).add(_charityCut).add(_liquidityCutPct);\r\n        _storedTeamFee = _teamFee;\r\n    }\r\n    function setLiquidityCutFee (uint256 _liquidityCut) external onlyOwner() {\r\n        _liquidityCutPct = _liquidityCut;\r\n        _teamFee = _teamCutPct.add(_marketingCutPct).add(_charityCutPct).add(_liquidityCut);\r\n        _storedTeamFee = _teamFee;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"teamFunds\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"marketingFunds\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"charityFunds\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"liquidityFunds\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_charityCutPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityCutPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingCutPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_storedTeamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_teamCutPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_teamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addInitialLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualTokenSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumContractEthBalanceToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumContractTokenBalanceToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverEthFromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_charityCut\",\"type\":\"uint256\"}],\"name\":\"setCharityCutFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityCut\",\"type\":\"uint256\"}],\"name\":\"setLiquidityCutFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingCut\",\"type\":\"uint256\"}],\"name\":\"setMarketingCutFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_teamCut\",\"type\":\"uint256\"}],\"name\":\"setTeamCutFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cosmicVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"storeInCosmicVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PEARL","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000073a50fbb7c4d9e7e371542a75b187f95225c623e000000000000000000000000e6471f5d57513d896be2663763e5e9ccf54eb6a900000000000000000000000040b3629ae1ca45c71c69be09744abaf485dd5b2300000000000000000000000057e2a846eb47b6bac44b9124510dcf22ad8c933f","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d0bab3c74932cbb030ebe03ca8d5a518d8260da43c17a6c5f281fd52223ff3d5"}]}