{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.17;\r\n\r\ncontract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Contract for  allowing  removal of global supply of locked mintable erc20 tokens by converted from DAI using uniswap v2 router contract\r\n * @author Request Network\r\n */ \r\n \r\n \r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n/*interface*/ contract IBurnableErc20 is IERC20 {\r\n    function burn(uint value) external;\r\n}\r\n\r\n\r\n/** @title DaiBasedREQBurner\r\n * @notice A contract to burn REQ tokens from DAI.\r\n * @dev All DAIs sent to this contract can only be exchanged for REQs that are then burnt, using Uniswap.\r\n */\r\ncontract DaiBasedREQBurner is Ownable {\r\n\r\n    address constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    address constant REQ_ADDRESS = 0x8f8221aFbB33998d8584A2B05749bA73c37a938a;\r\n\r\n    address constant LOCKED_TOKEN_ADDRESS = DAI_ADDRESS;\r\n    address constant BURNABLE_TOKEN_ADDRESS = REQ_ADDRESS;\r\n    // swap router used to convert LOCKED into BURNABLE tokens\r\n    IUniswapV2Router02 public swapRouter;\r\n\r\n    /**\r\n     * @notice Constructor of the DAI based REQ burner\r\n     * @param _swapRouterAddress address of the uniswap token router (which follow the same method signature ).\r\n     */\r\n    constructor(address _swapRouterAddress) public {\r\n        require(_swapRouterAddress != address(0), \"The swap router address should not be 0\");\r\n        swapRouter = IUniswapV2Router02(_swapRouterAddress);\r\n    }\r\n\r\n    /// @dev gives the permission to uniswap to accept the swapping of the BURNABLE token \r\n    function approveRouterToSpend() public {\r\n        uint256 max = 2**256 - 1;\r\n        IERC20 dai = IERC20(LOCKED_TOKEN_ADDRESS);\r\n        dai.approve(address(swapRouter), max);\r\n    }\r\n\r\n\r\n    ///@dev the main function to be executed\r\n    ///@param _minReqBurnt  REQ token needed to be burned.\r\n    ///@param _deadline  maximum timestamp to accept the trade from the router\r\n    function burn(uint _minReqBurnt, uint256 _deadline)\r\n        external\r\n        returns(uint)\r\n    {\r\n        IERC20 dai = IERC20(LOCKED_TOKEN_ADDRESS);\r\n        IBurnableErc20 req = IBurnableErc20(BURNABLE_TOKEN_ADDRESS);\r\n        uint daiToConvert = dai.balanceOf(address(this));\r\n\r\n        if (_deadline == 0) {\r\n            _deadline = block.timestamp + 1000;\r\n        }\r\n\r\n        // 1 step swapping path (only works if there is a sufficient liquidity behind the router)\r\n        address[] memory path = new address[](2);\r\n        path[0] = LOCKED_TOKEN_ADDRESS;\r\n        path[1] = BURNABLE_TOKEN_ADDRESS;\r\n\r\n        // Do the swap and get the amount of REQ purchased\r\n        uint reqToBurn = swapRouter.swapExactTokensForTokens(\r\n          daiToConvert,\r\n          _minReqBurnt,\r\n          path,\r\n          address(this),\r\n          _deadline\r\n        )[1];\r\n\r\n        // Burn all the purchased REQ and return this amount\r\n        req.burn(reqToBurn);\r\n        return reqToBurn;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouterAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"approveRouterToSpend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minReqBurnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DaiBasedREQBurner","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://00742133aba6cbcaa806875862db8faa10433c57471a4f49e9c5e713739024e3"}]}