{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.6.0 <= 0.8.5;\r\n  \r\n// SPDX-License-Identifier: MIT\r\n// @title ERC20 Token\r\n// @created_by  Stonoex\r\n\r\n/**\r\n * \r\n * @dev Operations with Overflow chechs.\r\n * \r\n **/\r\n \r\nlibrary Math { \r\n    \r\n    /**\r\n     * \r\n     * @dev Return the subtraction of two integers, reverting with message on overflow\r\n     * \r\n     **/\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      require(b <= a, \"Subtraction overflow\");\r\n      return a - b;\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * @dev Return the addition of two integers, reverting with message on overflow\r\n     * \r\n     **/\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      require(c >= a, \"Addition overflow\");\r\n      return c;\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * @dev Return the multiplication of two two integers, reverting with message on overflow\r\n     * \r\n     **/\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"Multiplication overflow\");\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @dev Contract that guarantees exclusive access to specific functions for the owner\r\n * \r\n * */\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    address private _newOwner;\r\n    \r\n    event OwnerShipTransferred(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    /**\r\n     * \r\n     * @dev Setting the deployer as the initial owner.\r\n     * \r\n     */\r\n     \r\n    constructor() {\r\n        _owner = msg.sender;\r\n        _newOwner = msg.sender;\r\n        emit OwnerShipTransferred(address(0), _owner);\r\n    }\r\n    \r\n     /**\r\n     * \r\n     * @dev Returns the address of the current owner.\r\n     * \r\n     */\r\n    \r\n    function owner() public view returns(address){\r\n        return _owner;\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * @dev Reverting with message on overflow if called by any account other than the owner.\r\n     * \r\n     */\r\n    modifier onlyOwner(){\r\n        require(msg.sender == _owner, \"You are not the owner\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * @dev Set new owner to transfer ownership, reverting with message on overflow if account is not the owner\r\n     * \r\n     */\r\n    function transferOwnership(address newOwner_) public onlyOwner{\r\n        require(newOwner_ != address(0), \"Invalid address\");\r\n        _newOwner = newOwner_;\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * @dev Accept ownership, reverting with message on overflow if account is not the new owner\r\n     * \r\n     */\r\n    function acceptOwnership()public{\r\n        require(msg.sender == _newOwner, \"You are not the new owner\");\r\n        _transferOwnership(_newOwner);\r\n    }\r\n    \r\n    function _transferOwnership(address newOwner_) internal{\r\n        emit OwnerShipTransferred(_owner,newOwner_);\r\n        _owner = newOwner_;\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n * @dev Contract that guarantees pause and unpause specific functions\r\n * \r\n * */\r\n \r\n contract Pausable is Ownable{\r\n    event Pause();\r\n    event Unpause();\r\n     \r\n    bool private _isPaused = true;\r\n     \r\n    function isPaused() public view returns(bool){\r\n        return _isPaused;\r\n    }\r\n    \r\n    modifier whenNotPaused(){\r\n        require(!_isPaused, \"Contract is paused.\");\r\n        _;\r\n    }\r\n    \r\n    modifier whenPaused(){\r\n        require(_isPaused, \"Contract is not paused.\");\r\n        _;\r\n    }\r\n    \r\n    function pause()public onlyOwner whenNotPaused{\r\n        _isPaused = true;\r\n        emit Pause();\r\n    }\r\n    \r\n    function unpause()public onlyOwner whenPaused{\r\n        _isPaused = false;\r\n        emit Unpause();\r\n    }\r\n }\r\n \r\n interface IERC20 {\r\n    \r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  \r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract CollateralDetails is Ownable {\r\n    \r\n    event record(uint position, string document, string book, uint256 bags, uint256 tokens, string executionType);\r\n    \r\n    uint256 private _currentBags;\r\n    string private _docURL;\r\n    \r\n    struct Collateral {\r\n        string cda_wa_document;\r\n        string book;\r\n        uint256 bags;\r\n        uint256 tokenAmount;\r\n        string executionType;\r\n    }\r\n    \r\n    Collateral[] private _collateralList;\r\n    mapping(uint => Collateral) private _collateral;\r\n    \r\n    function getDocURL() public view returns(string memory){\r\n        return _docURL;\r\n    }\r\n    \r\n    function setDocURL(string memory url) public onlyOwner {\r\n        _docURL = url;\r\n    }\r\n    \r\n    function getCurrentBags() public view returns(uint256){\r\n        return _currentBags;\r\n    }\r\n    \r\n    function setCurrentBags(uint256 bags_) internal onlyOwner{\r\n        _currentBags = bags_;\r\n    }\r\n    \r\n    function getRecords(uint indexes_) public view returns(string [] memory documents, string[] memory books, uint256[] memory bags, uint256[] memory tokensAmounts,string[] memory executionTypes){\r\n     require(indexes_ <= _collateralList.length, \"Invalid indexes, value is greater than the _collateralList!\");\r\n       string [] memory _documents = new string[](indexes_);\r\n       string [] memory _books = new string[](indexes_);\r\n       uint256 [] memory _bags = new uint256[](indexes_);\r\n       uint256 [] memory _tokenAmount = new uint256[](indexes_);\r\n       string [] memory _executionTypes = new string[](indexes_);\r\n       \r\n       for( uint i = 0; i < indexes_; i++){\r\n           Collateral storage c = _collateral[i];\r\n           _documents[i] = c.cda_wa_document;\r\n           _books[i] = c.book;\r\n           _bags[i] = c.bags;\r\n           _tokenAmount[i] = c.tokenAmount;\r\n           _executionTypes[i] = c.executionType;\r\n       }\r\n       return(_documents,_books,_bags,_tokenAmount,_executionTypes);\r\n    }\r\n    \r\n    function getCollateral(uint position_) public view returns(string memory cda_wa_document, string memory book, uint256 bags, uint256 tokenAmount ,string memory executionType){\r\n        require(position_ <= _collateralList.length, \"Invalid position, value is greater than the _collateralList\");\r\n        Collateral storage c = _collateral[position_];\r\n        return (c.cda_wa_document, c.book, c.bags, c.tokenAmount,c.executionType);\r\n    }\r\n    \r\n    function lastId() public view returns(uint256){\r\n        return _collateralList.length-1;\r\n        \r\n    }\r\n    \r\n    function recordCollateral(string memory cda_wa_document_, string memory book_, uint256 bags_, uint256 tokenAmount_, string memory executionType_) internal onlyOwner{\r\n        _collateralList.push(Collateral(cda_wa_document_,book_,bags_,tokenAmount_,executionType_));\r\n        _collateral[_collateralList.length-1] = Collateral(cda_wa_document_,book_,bags_,tokenAmount_,executionType_);\r\n        emit record(_collateralList.length-1, cda_wa_document_,book_,bags_,tokenAmount_,executionType_);\r\n    }\r\n    \r\n}\r\n\r\ncontract CoffeeCoin is IERC20, Ownable, Pausable, CollateralDetails{\r\n    \r\n    using Math for uint256;\r\n    \r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _totalSupply;\r\n    \r\n    event Burn(address indexed account, uint256 value);\r\n    event Mint(address indexed from, address indexed to, uint256 value);\r\n    \r\n    constructor (string memory name_, string memory symbol_, uint256 totalSupply_, uint8 decimals_, string memory cda_wa_document_, string memory book_, uint256 bags_)  {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _totalSupply = totalSupply_.mul(10 ** decimals_);\r\n        _decimals = decimals_;\r\n        _balances[msg.sender] = _balances[msg.sender].add(_totalSupply);\r\n        recordCollateral(cda_wa_document_, book_, bags_, totalSupply_, \"INIT\");\r\n        setCurrentBags(bags_);\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n    \r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function transfer(address to, uint256 value) public override returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public override view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n    \r\n    function approve(address spender, uint256 value) public override returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 value) public override returns (bool) {\r\n        _transfer(sender, recipient, value);\r\n        _approve(sender, msg.sender, _allowed[sender][msg.sender].sub(value));\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function _transfer(address from_, address to_, uint256 amount_) internal{\r\n        require(from_ != address(0), \"Sender Invalid address\");\r\n        require(to_ != address(0), \"Recipient Invalid Address\");\r\n        _balances[from_] = _balances[from_].sub(amount_);\r\n        _balances[to_] = _balances[to_].add(amount_);\r\n        emit Transfer(from_, to_, amount_);\r\n    }\r\n    \r\n    function _approve(address owner_, address spender_, uint256 amount_) internal{\r\n        require(owner_ != address(0), \"Approve from the zero address\");\r\n        require(spender_ != address(0), \"Approve to the zero address\");\r\n        _allowed[owner_][spender_] = amount_;\r\n        emit Approval(owner_, spender_, amount_);\r\n    }\r\n    \r\n    /**\r\n    * \r\n    * @dev Destroy Tokens from the caller, reverting with message on overflow if caller is not the contract owner, event Burn will record CollateralDetails\r\n    * \r\n    */\r\n    function burn(uint256 amount_, string memory cda_wa_document_, string memory book_, uint256 bags_) public onlyOwner whenNotPaused{\r\n        require(msg.sender != address(0), \"Invalid account address\");\r\n         uint256 _amount = amount_.mul(10 ** _decimals);\r\n        _balances[msg.sender] = _balances[msg.sender].sub(_amount);\r\n        _totalSupply = _totalSupply.sub(_amount);\r\n        uint256 _currentBags = getCurrentBags();\r\n        setCurrentBags(_currentBags.sub(bags_));\r\n        recordCollateral(cda_wa_document_, book_, bags_, amount_, \"BURN\");\r\n        emit Burn(msg.sender, _amount);\r\n        emit Transfer(msg.sender, address(0), _amount);\r\n    }\r\n    \r\n    /**\r\n    * \r\n    * @dev Mint Tokens, reverting with message on overflow if caller is not the contract owner or the contract is not paused, event Mint will record CollateralDetails\r\n    * \r\n    */\r\n    function mint(uint256 amount_, string memory cda_wa_document_, string memory book_, uint256 bags_)public onlyOwner whenNotPaused{\r\n        uint256 _amount = amount_.mul(10 ** _decimals);\r\n        _totalSupply = _totalSupply.add(_amount);\r\n        _balances[msg.sender] = _balances[msg.sender].add(_amount);\r\n        uint256 _currentBags = getCurrentBags();\r\n        setCurrentBags(_currentBags.add(bags_));\r\n        recordCollateral(cda_wa_document_, book_, bags_, amount_, \"MINT\");\r\n        emit Mint(address(0), msg.sender, _amount);\r\n        emit Transfer(address(0), msg.sender, _amount);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"cda_wa_document_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"book_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"bags_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerShipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"document\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"book\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bags\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"executionType\",\"type\":\"string\"}],\"name\":\"record\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"cda_wa_document_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"book_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"bags_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"position_\",\"type\":\"uint256\"}],\"name\":\"getCollateral\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"cda_wa_document\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"book\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"bags\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"executionType\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBags\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDocURL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indexes_\",\"type\":\"uint256\"}],\"name\":\"getRecords\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"documents\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"books\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bags\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"executionTypes\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"cda_wa_document_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"book_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"bags_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"setDocURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CoffeeCoin","CompilerVersion":"v0.8.5+commit.a4f2e591","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000027240000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000000a7000000000000000000000000000000000000000000000000000000000000000b436f6666656520436f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005434f4642520000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009303132312f32303231000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000033030310000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a20c4b0fc726acd4c98073174ea70250c027952c74d215411d8c7de057ae1243"}]}