{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\ninterface IERC20 {\r\n    function allowance(address spender, address owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\ncontract AllowancesHelper {\r\n    struct Allowance {\r\n        address owner;\r\n        address spender;\r\n        uint256 amount;\r\n        address token;\r\n    }\r\n\r\n    function allowances(\r\n        address ownerAddress,\r\n        address[] memory tokensAddresses,\r\n        address[] memory spenderAddresses\r\n    ) external view returns (Allowance[] memory) {\r\n        uint256 spenderIdx;\r\n        uint256 tokenIdx;\r\n        uint256 numberOfAllowances;\r\n\r\n        // Calculate number of allowances\r\n        for (tokenIdx = 0; tokenIdx < tokensAddresses.length; tokenIdx++) {\r\n            for (\r\n                spenderIdx = 0;\r\n                spenderIdx < spenderAddresses.length;\r\n                spenderIdx++\r\n            ) {\r\n                address tokenAddress = tokensAddresses[tokenIdx];\r\n                address spenderAddress = spenderAddresses[spenderIdx];\r\n                IERC20 token = IERC20(tokenAddress);\r\n                uint256 amount = token.allowance(ownerAddress, spenderAddress);\r\n                if (amount > 0) {\r\n                    numberOfAllowances++;\r\n                }\r\n            }\r\n        }\r\n\r\n        Allowance[] memory _allowances = new Allowance[](numberOfAllowances);\r\n\r\n        // Fetch allowances\r\n        for (tokenIdx = 0; tokenIdx < tokensAddresses.length; tokenIdx++) {\r\n            for (\r\n                spenderIdx = 0;\r\n                spenderIdx < spenderAddresses.length;\r\n                spenderIdx++\r\n            ) {\r\n                uint256 allowanceIdx;\r\n                address spenderAddress = spenderAddresses[spenderIdx];\r\n                address tokenAddress = tokensAddresses[tokenIdx];\r\n                IERC20 token = IERC20(tokenAddress);\r\n                uint256 amount = token.allowance(ownerAddress, spenderAddress);\r\n                if (amount > 0) {\r\n                    Allowance memory allowance =\r\n                        Allowance({\r\n                            owner: ownerAddress,\r\n                            spender: spenderAddress,\r\n                            amount: amount,\r\n                            token: tokenAddress\r\n                        });\r\n                    _allowances[allowanceIdx] = allowance;\r\n                }\r\n            }\r\n        }\r\n        return _allowances;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokensAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"spenderAddresses\",\"type\":\"address[]\"}],\"name\":\"allowances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct AllowancesHelper.Allowance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AllowancesHelper","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7119e32d0b1eb8d34fa9b81b9f3053f18fe3529cf690d68bf2247fea9b3d995c"}]}