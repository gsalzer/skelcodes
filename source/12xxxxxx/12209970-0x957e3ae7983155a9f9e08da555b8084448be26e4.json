{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\ncontract AddressMergeHelper {\r\n    function mergeAddresses(address[][] memory addressesSets)\r\n        pure\r\n        public\r\n        returns (address[] memory)\r\n    {\r\n        bytes memory addressesPacked = new bytes(64);\r\n        uint256 addressesSetsLength = addressesSets.length;\r\n        assembly {\r\n            mstore(add(addressesPacked, 0x20), 0x20)\r\n        }\r\n        uint256 totalNumberOfAddresses;\r\n        for (\r\n            uint256 addressesSetIdx = 0;\r\n            addressesSetIdx < addressesSetsLength;\r\n            addressesSetIdx++\r\n        ) {\r\n            address[] memory addressesSet = addressesSets[addressesSetIdx];\r\n            uint256 addressesSetLength = addressesSet.length;\r\n            totalNumberOfAddresses += addressesSetLength;\r\n            for (\r\n                uint256 addressIdx = 0;\r\n                addressIdx < addressesSetLength;\r\n                addressIdx++\r\n            ) {\r\n                address currentAddress = addressesSet[addressIdx];\r\n                bytes memory spacer = new bytes(12);\r\n                addressesPacked = abi.encodePacked(\r\n                    addressesPacked,\r\n                    spacer,\r\n                    currentAddress\r\n                );\r\n            }\r\n        }\r\n        assembly {\r\n            mstore(add(addressesPacked, 0x40), totalNumberOfAddresses)\r\n        }\r\n        address[] memory addressesMerged =\r\n            abi.decode(addressesPacked, (address[]));\r\n        return addressesMerged;\r\n    }\r\n}\r\n","ABI":"[{\"inputs\":[{\"internalType\":\"address[][]\",\"name\":\"addressesSets\",\"type\":\"address[][]\"}],\"name\":\"mergeAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"AddressMergeHelper","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}