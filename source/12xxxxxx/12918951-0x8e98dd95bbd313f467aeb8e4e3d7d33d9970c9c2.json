{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/universe/facets/FuckYousAnnalist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSE\\npragma solidity ^0.8.0;\\n\\nimport { DiamondLib } from  \\\"../lib/DiamondLib.sol\\\";\\nimport { IDiamondLoupe } from \\\"../lib/interfaces/IDiamondLoupe.sol\\\";\\nimport { IERC165 } from \\\"../lib/interfaces/IERC165.sol\\\";\\n\\n\\n// The DiamondLoupeFacet contract\\n//\\n// This contract keeps track of all the contracts (facets)\\n// and their respective functions.\\n\\ncontract FuckYousAnnalist is IDiamondLoupe, IERC165 {\\n\\n\\t// Diamond Loupe Functions\\n\\t////////////////////////////////////////////////////////////////////\\n\\t/// These functions are expected to be called frequently by tools.\\n\\t//\\n\\t// struct Facet {\\n\\t//   address facetAddress;\\n\\t//   bytes4[] functionSelectors;\\n\\t// }\\n\\n\\t/// @notice Gets all facets and their selectors.\\n\\t/// @return facets_ Facet\\n\\tfunction facets() external override view returns (Facet[] memory facets_) {\\n\\t\\tDiamondLib.DiamondStorage storage ds = DiamondLib.diamondStorage();\\n\\t\\tfacets_ = new Facet[](ds.selectorCount);\\n\\t\\tuint8[] memory numFacetSelectors = new uint8[](ds.selectorCount);\\n\\t\\tuint256 numFacets;\\n\\t\\tuint256 selectorIndex;\\n\\t\\t// loop through function selectors\\n\\t\\tfor (uint256 slotIndex; selectorIndex < ds.selectorCount; slotIndex++) {\\n\\t\\t\\tbytes32 slot = ds.selectorSlots[slotIndex];\\n\\t\\t\\tfor (uint256 selectorSlotIndex; selectorSlotIndex < 8; selectorSlotIndex++) {\\n\\t\\t\\t\\tselectorIndex++;\\n\\t\\t\\t\\tif (selectorIndex > ds.selectorCount) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tbytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n\\t\\t\\t\\taddress facetAddress_ = address(bytes20(ds.facets[selector]));\\n\\t\\t\\t\\tbool continueLoop = false;\\n\\t\\t\\t\\tfor (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n\\t\\t\\t\\t\\tif (facets_[facetIndex].facetAddress == facetAddress_) {\\n\\t\\t\\t\\t\\t\\tfacets_[facetIndex].functionSelectors[numFacetSelectors[facetIndex]] = selector;\\n\\t\\t\\t\\t\\t\\t// probably will never have more than 256 functions from one facet contract\\n\\t\\t\\t\\t\\t\\trequire(numFacetSelectors[facetIndex] < 255);\\n\\t\\t\\t\\t\\t\\tnumFacetSelectors[facetIndex]++;\\n\\t\\t\\t\\t\\t\\tcontinueLoop = true;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (continueLoop) {\\n\\t\\t\\t\\t\\tcontinueLoop = false;\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfacets_[numFacets].facetAddress = facetAddress_;\\n\\t\\t\\t\\tfacets_[numFacets].functionSelectors = new bytes4[](ds.selectorCount);\\n\\t\\t\\t\\tfacets_[numFacets].functionSelectors[0] = selector;\\n\\t\\t\\t\\tnumFacetSelectors[numFacets] = 1;\\n\\t\\t\\t\\tnumFacets++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tfor (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n\\t\\t\\tuint256 numSelectors = numFacetSelectors[facetIndex];\\n\\t\\t\\tbytes4[] memory selectors = facets_[facetIndex].functionSelectors;\\n\\t\\t\\t// setting the number of selectors\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tmstore(selectors, numSelectors)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// setting the number of facets\\n\\t\\tassembly {\\n\\t\\t\\tmstore(facets_, numFacets)\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Gets all the function selectors supported by a specific facet.\\n\\t/// @param _facet The facet address.\\n\\t/// @return _facetFunctionSelectors The selectors associated with a facet address.\\n\\tfunction facetFunctionSelectors(address _facet) external override view returns (bytes4[] memory _facetFunctionSelectors) {\\n\\t\\tDiamondLib.DiamondStorage storage ds = DiamondLib.diamondStorage();\\n\\t\\tuint256 numSelectors;\\n\\t\\t_facetFunctionSelectors = new bytes4[](ds.selectorCount);\\n\\t\\tuint256 selectorIndex;\\n\\t\\t// loop through function selectors\\n\\t\\tfor (uint256 slotIndex; selectorIndex < ds.selectorCount; slotIndex++) {\\n\\t\\t\\tbytes32 slot = ds.selectorSlots[slotIndex];\\n\\t\\t\\tfor (uint256 selectorSlotIndex; selectorSlotIndex < 8; selectorSlotIndex++) {\\n\\t\\t\\t\\tselectorIndex++;\\n\\t\\t\\t\\tif (selectorIndex > ds.selectorCount) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tbytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n\\t\\t\\t\\taddress facet = address(bytes20(ds.facets[selector]));\\n\\t\\t\\t\\tif (_facet == facet) {\\n\\t\\t\\t\\t\\t_facetFunctionSelectors[numSelectors] = selector;\\n\\t\\t\\t\\t\\tnumSelectors++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Set the number of selectors in the array\\n\\t\\tassembly {\\n\\t\\t\\tmstore(_facetFunctionSelectors, numSelectors)\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Get all the facet addresses used by a diamond.\\n\\t/// @return facetAddresses_\\n\\tfunction facetAddresses() external override view returns (address[] memory facetAddresses_) {\\n\\t\\tDiamondLib.DiamondStorage storage ds = DiamondLib.diamondStorage();\\n\\t\\tfacetAddresses_ = new address[](ds.selectorCount);\\n\\t\\tuint256 numFacets;\\n\\t\\tuint256 selectorIndex;\\n\\t\\t// loop through function selectors\\n\\t\\tfor (uint256 slotIndex; selectorIndex < ds.selectorCount; slotIndex++) {\\n\\t\\t\\tbytes32 slot = ds.selectorSlots[slotIndex];\\n\\t\\t\\tfor (uint256 selectorSlotIndex; selectorSlotIndex < 8; selectorSlotIndex++) {\\n\\t\\t\\t\\tselectorIndex++;\\n\\t\\t\\t\\tif (selectorIndex > ds.selectorCount) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tbytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n\\t\\t\\t\\taddress facetAddress_ = address(bytes20(ds.facets[selector]));\\n\\t\\t\\t\\tbool continueLoop = false;\\n\\t\\t\\t\\tfor (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n\\t\\t\\t\\t\\tif (facetAddress_ == facetAddresses_[facetIndex]) {\\n\\t\\t\\t\\t\\t\\tcontinueLoop = true;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (continueLoop) {\\n\\t\\t\\t\\t\\tcontinueLoop = false;\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfacetAddresses_[numFacets] = facetAddress_;\\n\\t\\t\\t\\tnumFacets++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Set the number of facet addresses in the array\\n\\t\\tassembly {\\n\\t\\t\\tmstore(facetAddresses_, numFacets)\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Gets the facet that supports the given selector.\\n\\t/// @dev If facet is not found return address(0).\\n\\t/// @param _functionSelector The function selector.\\n\\t/// @return facetAddress_ The facet address.\\n\\tfunction facetAddress(bytes4 _functionSelector) external override view returns (address facetAddress_) {\\n\\t\\tDiamondLib.DiamondStorage storage ds = DiamondLib.diamondStorage();\\n\\t\\tfacetAddress_ = address(bytes20(ds.facets[_functionSelector]));\\n\\t}\\n\\n\\t// This implements ERC-165.\\n\\tfunction supportsInterface(bytes4 _interfaceId) external override view returns (bool) {\\n\\t\\tDiamondLib.DiamondStorage storage ds = DiamondLib.diamondStorage();\\n\\t\\treturn ds.supportedInterfaces[_interfaceId];\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/universe/lib/DiamondLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport { IDiamondCut } from './interfaces/IDiamondCut.sol';\\n\\n\\nlibrary DiamondLib {\\n\\tbytes32 constant DIAMOND_STORAGE_POSITION = keccak256('diamond.standard.diamond.storage');\\n\\n\\tstruct DiamondStorage {\\n\\t\\t// maps function selectors to the facets that execute the functions.\\n\\t\\t// and maps the selectors to their position in the selectorSlots array.\\n\\t\\t// func selector => address facet, selector position\\n\\t\\tmapping(bytes4 => bytes32) facets;\\n\\t\\t// array of slots of function selectors.\\n\\t\\t// each slot holds 8 function selectors.\\n\\t\\tmapping(uint256 => bytes32) selectorSlots;\\n\\t\\t// The number of function selectors in selectorSlots\\n\\t\\tuint16 selectorCount;\\n\\t\\t// Used to query if a contract implements an interface.\\n\\t\\t// Used to implement ERC-165.\\n\\t\\tmapping(bytes4 => bool) supportedInterfaces;\\n\\t\\t// owner of the contract\\n\\t\\taddress contractOwner;\\n\\t}\\n\\n\\tfunction diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n\\t\\tbytes32 position = DIAMOND_STORAGE_POSITION;\\n\\t\\tassembly {\\n\\t\\t\\tds.slot := position\\n\\t\\t}\\n\\t}\\n\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\tfunction setContractOwner(address _newOwner) internal {\\n\\t\\tDiamondStorage storage ds = diamondStorage();\\n\\t\\taddress previousOwner = ds.contractOwner;\\n\\t\\tds.contractOwner = _newOwner;\\n\\t\\temit OwnershipTransferred(previousOwner, _newOwner);\\n\\t}\\n\\n\\tfunction contractOwner() internal view returns (address contractOwner_) {\\n\\t\\tcontractOwner_ = diamondStorage().contractOwner;\\n\\t}\\n\\n\\tfunction enforceIsContractOwner() internal view {\\n\\t\\trequire(msg.sender == diamondStorage().contractOwner, 'DiamondLib: Must be contract owner');\\n\\t}\\n\\n\\tevent DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n\\tbytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n\\tbytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n\\t// Internal function version of diamondCut\\n\\t// This code is almost the same as the external diamondCut,\\n\\t// except it is using 'Facet[] memory _diamondCut' instead of\\n\\t// 'Facet[] calldata _diamondCut'.\\n\\t// The code is duplicated to prevent copying calldata to memory which\\n\\t// causes an error for a two dimensional array.\\n\\tfunction diamondCut(\\n\\t\\tIDiamondCut.FacetCut[] memory _diamondCut,\\n\\t\\taddress _init,\\n\\t\\tbytes memory _calldata\\n\\t) internal {\\n\\t\\tDiamondStorage storage ds = diamondStorage();\\n\\t\\tuint256 originalSelectorCount = ds.selectorCount;\\n\\t\\tuint256 selectorCount = originalSelectorCount;\\n\\t\\tbytes32 selectorSlot;\\n\\t\\t// Check if last selector slot is not full\\n\\t\\t// 'selectorCount & 7' is a gas efficient modulo by eight 'selectorCount % 8' \\n\\t\\tif (selectorCount & 7 > 0) {\\n\\t\\t\\t// get last selectorSlot\\n\\t\\t\\t// 'selectorSlot >> 3' is a gas efficient division by 8 'selectorSlot / 8'\\n\\t\\t\\tselectorSlot = ds.selectorSlots[selectorCount >> 3];\\n\\t\\t}\\n\\t\\t// loop through diamond cut\\n\\t\\tfor (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n\\t\\t\\t(selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n\\t\\t\\t\\tselectorCount,\\n\\t\\t\\t\\tselectorSlot,\\n\\t\\t\\t\\t_diamondCut[facetIndex].facetAddress,\\n\\t\\t\\t\\t_diamondCut[facetIndex].action,\\n\\t\\t\\t\\t_diamondCut[facetIndex].functionSelectors\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\tif (selectorCount != originalSelectorCount) {\\n\\t\\t\\tds.selectorCount = uint16(selectorCount);\\n\\t\\t}\\n\\t\\t// If last selector slot is not full\\n\\t\\t// 'selectorCount & 7' is a gas efficient modulo by eight 'selectorCount % 8' \\n\\t\\tif (selectorCount & 7 > 0) {\\n\\t\\t\\t// 'selectorSlot >> 3' is a gas efficient division by 8 'selectorSlot / 8'\\n\\t\\t\\tds.selectorSlots[selectorCount >> 3] = selectorSlot;\\n\\t\\t}\\n\\t\\temit DiamondCut(_diamondCut, _init, _calldata);\\n\\t\\tinitializeDiamondCut(_init, _calldata);\\n\\t}\\n\\n\\tfunction addReplaceRemoveFacetSelectors(\\n\\t\\tuint256 _selectorCount,\\n\\t\\tbytes32 _selectorSlot,\\n\\t\\taddress _newFacetAddress,\\n\\t\\tIDiamondCut.FacetCutAction _action,\\n\\t\\tbytes4[] memory _selectors\\n\\t) internal returns (uint256, bytes32) {\\n\\t\\tDiamondStorage storage ds = diamondStorage();\\n\\t\\trequire(_selectors.length > 0, 'DiamondLib.cut: No selectors in facet to cut');\\n\\t\\tif (_action == IDiamondCut.FacetCutAction.Add) {\\n\\t\\t\\tenforceHasContractCode(_newFacetAddress, 'DiamondLib.cut: Add facet has no code');\\n\\t\\t\\tfor (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n\\t\\t\\t\\tbytes4 selector = _selectors[selectorIndex];\\n\\t\\t\\t\\tbytes32 oldFacet = ds.facets[selector];\\n\\t\\t\\t\\trequire(address(bytes20(oldFacet)) == address(0), \\\"DiamondLib.cut: Can't add function that already exists\\\");\\n\\t\\t\\t\\t// add facet for selector\\n\\t\\t\\t\\tds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\n\\t\\t\\t\\t// '_selectorCount & 7' is a gas efficient modulo by eight '_selectorCount % 8' \\n\\t\\t\\t\\tuint256 selectorInSlotPosition = (_selectorCount & 7) << 5;\\n\\t\\t\\t\\t// clear selector position in slot and add selector\\n\\t\\t\\t\\t_selectorSlot = (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\\n\\t\\t\\t\\t// if slot is full then write it to storage\\n\\t\\t\\t\\tif (selectorInSlotPosition == 224) {\\n\\t\\t\\t\\t\\t// '_selectorSlot >> 3' is a gas efficient division by 8 '_selectorSlot / 8'\\n\\t\\t\\t\\t\\tds.selectorSlots[_selectorCount >> 3] = _selectorSlot;\\n\\t\\t\\t\\t\\t_selectorSlot = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t_selectorCount++;\\n\\t\\t\\t}\\n\\t\\t} else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n\\t\\t\\tenforceHasContractCode(_newFacetAddress, 'DiamondLib.cut: Replace facet has no code');\\n\\t\\t\\tfor (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n\\t\\t\\t\\tbytes4 selector = _selectors[selectorIndex];\\n\\t\\t\\t\\tbytes32 oldFacet = ds.facets[selector];\\n\\t\\t\\t\\taddress oldFacetAddress = address(bytes20(oldFacet));\\n\\t\\t\\t\\t// only useful if immutable functions exist\\n\\t\\t\\t\\trequire(oldFacetAddress != address(this), \\\"DiamondLib.cut: Can't replace immutable function\\\");\\n\\t\\t\\t\\trequire(oldFacetAddress != _newFacetAddress, \\\"DiamondLib.cut: Can't replace function with same function\\\");\\n\\t\\t\\t\\trequire(oldFacetAddress != address(0), \\\"DiamondLib.cut: Can't replace function that doesn't exist\\\");\\n\\t\\t\\t\\t// replace old facet address\\n\\t\\t\\t\\tds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\n\\t\\t\\t}\\n\\t\\t} else if (_action == IDiamondCut.FacetCutAction.Remove) {\\n\\t\\t\\trequire(_newFacetAddress == address(0), 'DiamondLib.cut: Remove facet address must be address(0)');\\n\\t\\t\\t// '_selectorCount >> 3' is a gas efficient division by 8 '_selectorCount / 8'\\n\\t\\t\\tuint256 selectorSlotCount = _selectorCount >> 3;\\n\\t\\t\\t// '_selectorCount & 7' is a gas efficient modulo by eight '_selectorCount % 8' \\n\\t\\t\\tuint256 selectorInSlotIndex = _selectorCount & 7;\\n\\t\\t\\tfor (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n\\t\\t\\t\\tif (_selectorSlot == 0) {\\n\\t\\t\\t\\t\\t// get last selectorSlot\\n\\t\\t\\t\\t\\tselectorSlotCount--;\\n\\t\\t\\t\\t\\t_selectorSlot = ds.selectorSlots[selectorSlotCount];\\n\\t\\t\\t\\t\\tselectorInSlotIndex = 7;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tselectorInSlotIndex--;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tbytes4 lastSelector;\\n\\t\\t\\t\\tuint256 oldSelectorsSlotCount;\\n\\t\\t\\t\\tuint256 oldSelectorInSlotPosition;\\n\\t\\t\\t\\t// adding a block here prevents stack too deep error\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tbytes4 selector = _selectors[selectorIndex];\\n\\t\\t\\t\\t\\tbytes32 oldFacet = ds.facets[selector];\\n\\t\\t\\t\\t\\trequire(address(bytes20(oldFacet)) != address(0), \\\"DiamondLib.cut: Can't remove function that doesn't exist\\\");\\n\\t\\t\\t\\t\\t// only useful if immutable functions exist\\n\\t\\t\\t\\t\\trequire(address(bytes20(oldFacet)) != address(this), \\\"DiamondLib.cut: Can't remove immutable function\\\");\\n\\t\\t\\t\\t\\t// replace selector with last selector in ds.facets\\n\\t\\t\\t\\t\\t// gets the last selector\\n\\t\\t\\t\\t\\tlastSelector = bytes4(_selectorSlot << (selectorInSlotIndex << 5));\\n\\t\\t\\t\\t\\tif (lastSelector != selector) {\\n\\t\\t\\t\\t\\t\\t// update last selector slot position info\\n\\t\\t\\t\\t\\t\\tds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tdelete ds.facets[selector];\\n\\t\\t\\t\\t\\tuint256 oldSelectorCount = uint16(uint256(oldFacet));\\n\\t\\t\\t\\t\\t// 'oldSelectorCount >> 3' is a gas efficient division by 8 'oldSelectorCount / 8'\\n\\t\\t\\t\\t\\toldSelectorsSlotCount = oldSelectorCount >> 3;\\n\\t\\t\\t\\t\\t// 'oldSelectorCount & 7' is a gas efficient modulo by eight 'oldSelectorCount % 8' \\n\\t\\t\\t\\t\\toldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (oldSelectorsSlotCount != selectorSlotCount) {\\n\\t\\t\\t\\t\\tbytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\n\\t\\t\\t\\t\\t// clears the selector we are deleting and puts the last selector in its place.\\n\\t\\t\\t\\t\\toldSelectorSlot =\\n\\t\\t\\t\\t\\t\\t(oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n\\t\\t\\t\\t\\t\\t(bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n\\t\\t\\t\\t\\t// update storage with the modified slot\\n\\t\\t\\t\\t\\tds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// clears the selector we are deleting and puts the last selector in its place.\\n\\t\\t\\t\\t\\t_selectorSlot =\\n\\t\\t\\t\\t\\t\\t(_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n\\t\\t\\t\\t\\t\\t(bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (selectorInSlotIndex == 0) {\\n\\t\\t\\t\\t\\tdelete ds.selectorSlots[selectorSlotCount];\\n\\t\\t\\t\\t\\t_selectorSlot = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t_selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;\\n\\t\\t} else {\\n\\t\\t\\trevert('DiamondLib.cut: Incorrect FacetCutAction');\\n\\t\\t}\\n\\t\\treturn (_selectorCount, _selectorSlot);\\n\\t}\\n\\n\\tfunction initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n\\t\\tif (_init == address(0)) {\\n\\t\\t\\trequire(_calldata.length == 0, 'DiamondLib.cut: _init is address(0) but_calldata is not empty');\\n\\t\\t} else {\\n\\t\\t\\trequire(_calldata.length > 0, 'DiamondLib.cut: _calldata is empty but _init is not address(0)');\\n\\t\\t\\tif (_init != address(this)) {\\n\\t\\t\\t\\tenforceHasContractCode(_init, 'DiamondLib.cut: _init address has no code');\\n\\t\\t\\t}\\n\\t\\t\\t(bool success, bytes memory error) = _init.delegatecall(_calldata);\\n\\t\\t\\tif (!success) {\\n\\t\\t\\t\\tif (error.length > 0) {\\n\\t\\t\\t\\t\\t// bubble up the error\\n\\t\\t\\t\\t\\trevert(string(error));\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\trevert('DiamondLib.cut: _init function reverted');\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n\\t\\tuint256 contractSize;\\n\\t\\tassembly {\\n\\t\\t\\tcontractSize := extcodesize(_contract)\\n\\t\\t}\\n\\t\\trequire(contractSize > 0, _errorMessage);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/universe/lib/interfaces/IDiamondLoupe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\"\r\n    },\r\n    \"contracts/universe/lib/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/universe/lib/interfaces/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_functionSelector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facetAddress_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"facetAddresses_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"_facetFunctionSelectors\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondLoupe.Facet[]\",\"name\":\"facets_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FuckYousAnnalist","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}