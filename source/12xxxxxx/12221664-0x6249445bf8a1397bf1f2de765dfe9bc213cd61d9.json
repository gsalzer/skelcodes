{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/projects/projects/dififunds/contracts/contracts/DifiFundsFactory.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2 <0.8.0;\\npragma experimental ABIEncoderV2;\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\ncontract DifiFundsInfo is Ownable {\\n\\n    uint256 private devFeePercentage = 1;\\n\\n    uint256 private minDevFeeInWei = 1 ether;\\n\\n    address[] private presaleAddresses;\\n\\n    constructor() public{\\n        transferOwnership(0xC666A2d73Dd26Ef496E75fD9CFC41eD02D7C2127);\\n    }\\n\\n    function addPresaleAddress(address _presale) external returns (uint256) {\\n        presaleAddresses.push(_presale);\\n        return presaleAddresses.length - 1;\\n    }\\n\\n    function getPresalesCount() external view returns (uint256) {\\n        return presaleAddresses.length;\\n    }\\n\\n    function getPresaleAddress(uint256 DifiId) external view returns (address) {\\n        return presaleAddresses[DifiId];\\n    }\\n\\n    function getDevFeePercentage() external view returns (uint256) {\\n        return devFeePercentage;\\n    }\\n\\n    function setDevFeePercentage(uint256 _devFeePercentage) external onlyOwner {\\n        devFeePercentage = _devFeePercentage;\\n    }\\n\\n    function getMinDevFeeInWei() external view returns (uint256) {\\n        return minDevFeeInWei;\\n    }\\n\\n    function setMinDevFeeInWei(uint256 _minDevFeeInWei) external onlyOwner {\\n        minDevFeeInWei = _minDevFeeInWei;\\n    }\\n}\\n\\n\\n\\n\\ninterface IUniswapV2Router02 {\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n    external\\n    payable\\n    returns (\\n        uint256 amountToken,\\n        uint256 amountETH,\\n        uint256 liquidity\\n    );\\n}\\n\\ncontract DifiFundsPresale {\\n    using SafeMath for uint256;\\n\\n    IUniswapV2Router02 private constant uniswapRouter =\\n    IUniswapV2Router02(address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D));\\n\\n    address payable internal DifiFactoryAddress; // address that creates the presale contracts\\n    address payable public DifiDevAddress; // address where dev fees will be transferred to\\n    address public DifiLiqLockAddress; // address where LP tokens will be locked\\n\\n    IERC20 public token; // token that will be sold\\n    address payable public presaleCreatorAddress; // address where percentage of invested wei will be transferred to\\n    address public unsoldTokensDumpAddress; // address where unsold tokens will be transferred to\\n\\n    mapping(address => uint256) public investments; // total wei invested per address\\n    mapping(address => bool) public whitelistedAddresses; // addresses eligible in presale\\n    mapping(address => bool) public claimed; // if true, it means investor already claimed the tokens or got a refund\\n\\n    uint256 private DifiDevFeePercentage; // dev fee to support the development of Difi Funds\\n    uint256 private DifiMinDevFeeInWei; // minimum fixed dev fee to support the development of Difi Investments\\n    uint256 public DifiId; // used for fetching presale without referencing its address\\n\\n    uint256 public totalInvestorsCount; // total investors count\\n    uint256 public presaleCreatorClaimWei; // wei to transfer to presale creator per investor claim\\n    uint256 public presaleCreatorClaimTime; // time when presale creator can collect funds raise\\n    uint256 public totalCollectedWei; // total wei collected\\n    uint256 public totalTokens; // total tokens to be sold\\n    uint256 public tokensLeft; // available tokens to be sold\\n    uint256 public tokenPriceInWei; // token presale wei price per 1 token\\n    uint256 public hardCapInWei; // maximum wei amount that can be invested in presale\\n    uint256 public softCapInWei; // minimum wei amount to invest in presale, if not met, invested wei will be returned\\n    uint256 public maxInvestInWei; // maximum wei amount that can be invested per wallet address\\n    uint256 public minInvestInWei; // minimum wei amount that can be invested per wallet address\\n    uint256 public openTime; // time when presale starts, investing is allowed\\n    uint256 public closeTime; // time when presale closes, investing is not allowed\\n    uint256 public uniListingPriceInWei; // token price when listed in Uniswap\\n    uint256 public uniLiquidityAddingTime; // time when adding of liquidity in uniswap starts, investors can claim their tokens afterwards\\n    uint256 public uniLPTokensLockDurationInDays; // how many days after the liquity is added the presale creator can unlock the LP tokens\\n    uint256 public uniLiquidityPercentageAllocation; // how many percentage of the total invested wei that will be added as liquidity\\n\\n    bool public uniLiquidityAdded = false; // if true, liquidity is added in Uniswap and lp tokens are locked\\n    bool public onlyWhitelistedAddressesAllowed = true; // if true, only whitelisted addresses can invest\\n    bool public DifiDevFeesExempted = false; // if true, presale will be exempted from dev fees\\n    bool public presaleCancelled = false; // if true, investing will not be allowed, investors can withdraw, presale creator can withdraw their tokens\\n\\n    bytes32 public saleTitle;\\n    bytes32 public linkTelegram;\\n    bytes32 public linkTwitter;\\n    bytes32 public linkDiscord;\\n    bytes32 public linkWebsite;\\n    bytes32 public linkTeam;\\n    bytes32 public auditReport;\\n    bytes32 public influencer;\\n\\n    constructor(address _DifiFactoryAddress, address _DifiDevAddress) public {\\n        require(_DifiFactoryAddress != address(0));\\n        require(_DifiDevAddress != address(0));\\n\\n        DifiFactoryAddress = payable(_DifiFactoryAddress);\\n        DifiDevAddress = payable(_DifiDevAddress);\\n    }\\n\\n    modifier onlyDifiDev() {\\n        require(DifiFactoryAddress == msg.sender || DifiDevAddress == msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyDifiFactory() {\\n        require(DifiFactoryAddress == msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyPresaleCreatorOrDifiFactory() {\\n        require(\\n            presaleCreatorAddress == msg.sender || DifiFactoryAddress == msg.sender,\\n            \\\"Not presale creator or factory\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyPresaleCreator() {\\n        require(presaleCreatorAddress == msg.sender, \\\"Not presale creator\\\");\\n        _;\\n    }\\n\\n    modifier whitelistedAddressOnly() {\\n        require(\\n            !onlyWhitelistedAddressesAllowed || whitelistedAddresses[msg.sender],\\n            \\\"Address not whitelisted\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier presaleIsNotCancelled() {\\n        require(!presaleCancelled, \\\"Cancelled\\\");\\n        _;\\n    }\\n\\n    modifier investorOnly() {\\n        require(investments[msg.sender] > 0, \\\"Not an investor\\\");\\n        _;\\n    }\\n\\n    modifier notYetClaimedOrRefunded() {\\n        require(!claimed[msg.sender], \\\"Already claimed or refunded\\\");\\n        _;\\n    }\\n\\n    function setAddressInfo(\\n        address _presaleCreator,\\n        address _tokenAddress,\\n        address _unsoldTokensDumpAddress\\n    ) external onlyDifiFactory {\\n        require(_presaleCreator != address(0));\\n        require(_tokenAddress != address(0));\\n        require(_unsoldTokensDumpAddress != address(0));\\n\\n        presaleCreatorAddress = payable(_presaleCreator);\\n        token = IERC20(_tokenAddress);\\n        unsoldTokensDumpAddress = _unsoldTokensDumpAddress;\\n    }\\n\\n    function setGeneralInfo(\\n        uint256 _totalTokens,\\n        uint256 _tokenPriceInWei,\\n        uint256 _hardCapInWei,\\n        uint256 _softCapInWei,\\n        uint256 _maxInvestInWei,\\n        uint256 _minInvestInWei,\\n        uint256 _openTime,\\n        uint256 _closeTime\\n    ) external onlyDifiFactory {\\n        require(_totalTokens > 0);\\n        require(_tokenPriceInWei > 0);\\n        require(_openTime > 0);\\n        require(_closeTime > 0);\\n        require(_hardCapInWei > 0);\\n\\n        // Hard cap > (token amount * token price)\\n        require(_hardCapInWei <= _totalTokens.mul(_tokenPriceInWei));\\n        // Soft cap > to hard cap\\n        require(_softCapInWei <= _hardCapInWei);\\n        //  Min. wei investment > max. wei investment\\n        require(_minInvestInWei <= _maxInvestInWei);\\n        // Open time >= close time\\n        require(_openTime < _closeTime);\\n\\n        totalTokens = _totalTokens;\\n        tokensLeft = _totalTokens;\\n        tokenPriceInWei = _tokenPriceInWei;\\n        hardCapInWei = _hardCapInWei;\\n        softCapInWei = _softCapInWei;\\n        maxInvestInWei = _maxInvestInWei;\\n        minInvestInWei = _minInvestInWei;\\n        openTime = _openTime;\\n        closeTime = _closeTime;\\n    }\\n\\n    function setUniswapInfo(\\n        uint256 _uniListingPriceInWei,\\n        uint256 _uniLiquidityAddingTime,\\n        uint256 _uniLPTokensLockDurationInDays,\\n        uint256 _uniLiquidityPercentageAllocation\\n    ) external onlyDifiFactory {\\n        require(_uniListingPriceInWei > 0);\\n        require(_uniLiquidityAddingTime > 0);\\n        require(_uniLPTokensLockDurationInDays > 0);\\n        require(_uniLiquidityPercentageAllocation > 0);\\n\\n        require(closeTime > 0);\\n        // Listing time < close time\\n        require(_uniLiquidityAddingTime >= closeTime);\\n\\n        uniListingPriceInWei = _uniListingPriceInWei;\\n        uniLiquidityAddingTime = _uniLiquidityAddingTime;\\n        uniLPTokensLockDurationInDays = _uniLPTokensLockDurationInDays;\\n        uniLiquidityPercentageAllocation = _uniLiquidityPercentageAllocation;\\n    }\\n\\n    function setStringInfo(\\n        bytes32 _saleTitle,\\n        bytes32 _linkTelegram,\\n        bytes32 _linkDiscord,\\n        bytes32 _linkTwitter,\\n        bytes32 _linkWebsite,\\n        bytes32 _auditReport,\\n        bytes32 _linkTeam,\\n        bytes32 _influencer\\n    ) external onlyPresaleCreatorOrDifiFactory {\\n        saleTitle = _saleTitle;\\n        linkTelegram = _linkTelegram;\\n        linkDiscord = _linkDiscord;\\n        linkTwitter = _linkTwitter;\\n        linkWebsite = _linkWebsite;\\n        linkTeam = _linkTeam;\\n        auditReport = _auditReport;\\n        influencer = _influencer;\\n    }\\n\\n    function setDifiInfo(\\n        address _DifiLiqLockAddress,\\n        uint256 _DifiDevFeePercentage,\\n        uint256 _DifiMinDevFeeInWei,\\n        uint256 _DifiId\\n    ) external onlyDifiDev {\\n        DifiLiqLockAddress = _DifiLiqLockAddress;\\n        DifiDevFeePercentage = _DifiDevFeePercentage;\\n        DifiMinDevFeeInWei = _DifiMinDevFeeInWei;\\n        DifiId = _DifiId;\\n    }\\n\\n    function setDifiDevFeesExempted(bool _DifiDevFeesExempted)\\n    external\\n    onlyDifiDev\\n    {\\n        DifiDevFeesExempted = _DifiDevFeesExempted;\\n    }\\n\\n    function setOnlyWhitelistedAddressesAllowed(bool _onlyWhitelistedAddressesAllowed)\\n    external\\n    onlyPresaleCreatorOrDifiFactory\\n    {\\n        onlyWhitelistedAddressesAllowed = _onlyWhitelistedAddressesAllowed;\\n    }\\n\\n    function addwhitelistedAddresses(address[] calldata _whitelistedAddresses)\\n    external\\n    onlyPresaleCreatorOrDifiFactory\\n    {\\n        onlyWhitelistedAddressesAllowed = _whitelistedAddresses.length > 0;\\n        for (uint256 i = 0; i < _whitelistedAddresses.length; i++) {\\n            whitelistedAddresses[_whitelistedAddresses[i]] = true;\\n        }\\n    }\\n\\n    function getTokenAmount(uint256 _weiAmount)\\n    internal\\n    view\\n    returns (uint256)\\n    {\\n        return _weiAmount.mul(1e18).div(tokenPriceInWei);\\n    }\\n\\n    function invest()\\n    public\\n    payable\\n    whitelistedAddressOnly\\n    presaleIsNotCancelled\\n    {\\n        require(block.timestamp >= openTime, \\\"Not yet opened\\\");\\n        require(block.timestamp < closeTime, \\\"Closed\\\");\\n        require(totalCollectedWei < hardCapInWei, \\\"Hard cap reached\\\");\\n        require(tokensLeft > 0);\\n        require(msg.value <= tokensLeft.mul(tokenPriceInWei));\\n        uint256 totalInvestmentInWei = investments[msg.sender].add(msg.value);\\n        require(totalInvestmentInWei >= minInvestInWei || totalCollectedWei >= hardCapInWei.sub(1 ether), \\\"Min investment not reached\\\");\\n        require(maxInvestInWei == 0 || totalInvestmentInWei <= maxInvestInWei, \\\"Max investment reached\\\");\\n\\n        if (investments[msg.sender] == 0) {\\n            totalInvestorsCount = totalInvestorsCount.add(1);\\n        }\\n\\n        totalCollectedWei = totalCollectedWei.add(msg.value);\\n        investments[msg.sender] = totalInvestmentInWei;\\n        tokensLeft = tokensLeft.sub(getTokenAmount(msg.value));\\n    }\\n\\n    receive() external payable {\\n        invest();\\n    }\\n\\n    function addLiquidityAndLockLPTokens() external presaleIsNotCancelled {\\n        require(totalCollectedWei > 0);\\n        require(!uniLiquidityAdded, \\\"Liquidity already added\\\");\\n        require(\\n            !onlyWhitelistedAddressesAllowed || whitelistedAddresses[msg.sender] || msg.sender == presaleCreatorAddress,\\n            \\\"Not whitelisted or not presale creator\\\"\\n        );\\n\\n        if (totalCollectedWei >= hardCapInWei.sub(1 ether) && block.timestamp < uniLiquidityAddingTime) {\\n            require(msg.sender == presaleCreatorAddress, \\\"Not presale creator\\\");\\n        } else if (block.timestamp >= uniLiquidityAddingTime) {\\n            require(\\n                msg.sender == presaleCreatorAddress || investments[msg.sender] > 0,\\n                \\\"Not presale creator or investor\\\"\\n            );\\n            require(totalCollectedWei >= softCapInWei, \\\"Soft cap not reached\\\");\\n        } else {\\n            revert(\\\"Liquidity cannot be added yet\\\");\\n        }\\n\\n        uniLiquidityAdded = true;\\n\\n        uint256 finalTotalCollectedWei = totalCollectedWei;\\n        uint256 DifiDevFeeInWei;\\n        if (!DifiDevFeesExempted) {\\n            uint256 pctDevFee = finalTotalCollectedWei.mul(DifiDevFeePercentage).div(100);\\n            DifiDevFeeInWei = pctDevFee > DifiMinDevFeeInWei || DifiMinDevFeeInWei >= finalTotalCollectedWei\\n            ? pctDevFee\\n            : DifiMinDevFeeInWei;\\n        }\\n        if (DifiDevFeeInWei > 0) {\\n            finalTotalCollectedWei = finalTotalCollectedWei.sub(DifiDevFeeInWei);\\n            DifiDevAddress.transfer(DifiDevFeeInWei);\\n        }\\n\\n        uint256 liqPoolEthAmount = finalTotalCollectedWei.mul(uniLiquidityPercentageAllocation).div(100);\\n        uint256 liqPoolTokenAmount = liqPoolEthAmount.mul(1e18).div(uniListingPriceInWei);\\n\\n        token.approve(address(uniswapRouter), liqPoolTokenAmount);\\n\\n        uniswapRouter.addLiquidityETH{value : liqPoolEthAmount}(\\n            address(token),\\n            liqPoolTokenAmount,\\n            0,\\n            0,\\n            DifiLiqLockAddress,\\n            block.timestamp.add(15 minutes)\\n        );\\n\\n        uint256 unsoldTokensAmount = token.balanceOf(address(this)).sub(getTokenAmount(totalCollectedWei));\\n        if (unsoldTokensAmount > 0) {\\n            token.transfer(unsoldTokensDumpAddress, unsoldTokensAmount);\\n        }\\n\\n        presaleCreatorClaimWei = address(this).balance.mul(1e18).div(totalInvestorsCount.mul(1e18));\\n        presaleCreatorClaimTime = block.timestamp + 1 days;\\n    }\\n\\n    function claimTokens()\\n    external\\n    whitelistedAddressOnly\\n    presaleIsNotCancelled\\n    investorOnly\\n    notYetClaimedOrRefunded\\n    {\\n        require(uniLiquidityAdded, \\\"Liquidity not yet added\\\");\\n\\n        claimed[msg.sender] = true; // make sure this goes first before transfer to prevent reentrancy\\n        token.transfer(msg.sender, getTokenAmount(investments[msg.sender]));\\n\\n        uint256 balance = address(this).balance;\\n        if (balance > 0) {\\n            uint256 funds = presaleCreatorClaimWei > balance ? balance : presaleCreatorClaimWei;\\n            presaleCreatorAddress.transfer(funds);\\n        }\\n    }\\n\\n    function getRefund()\\n    external\\n    whitelistedAddressOnly\\n    investorOnly\\n    notYetClaimedOrRefunded\\n    {\\n        if (!presaleCancelled) {\\n            require(block.timestamp >= openTime, \\\"Not yet opened\\\");\\n            require(block.timestamp >= closeTime, \\\"Not yet closed\\\");\\n            require(softCapInWei > 0, \\\"No soft cap\\\");\\n            require(totalCollectedWei < softCapInWei, \\\"Soft cap reached\\\");\\n        }\\n\\n        claimed[msg.sender] = true; // make sure this goes first before transfer to prevent reentrancy\\n        uint256 investment = investments[msg.sender];\\n        uint256 presaleBalance =  address(this).balance;\\n        require(presaleBalance > 0);\\n\\n        if (investment > presaleBalance) {\\n            investment = presaleBalance;\\n        }\\n\\n        if (investment > 0) {\\n            msg.sender.transfer(investment);\\n        }\\n    }\\n\\n    function cancelAndTransferTokensToPresaleCreator() external {\\n        if (!uniLiquidityAdded && presaleCreatorAddress != msg.sender && DifiDevAddress != msg.sender) {\\n            revert();\\n        }\\n        if (uniLiquidityAdded && DifiDevAddress != msg.sender) {\\n            revert();\\n        }\\n\\n        require(!presaleCancelled);\\n        presaleCancelled = true;\\n\\n        uint256 balance = token.balanceOf(address(this));\\n        if (balance > 0) {\\n            token.transfer(presaleCreatorAddress, balance);\\n        }\\n    }\\n\\n    function collectFundsRaised() onlyPresaleCreator external {\\n        require(uniLiquidityAdded);\\n        require(!presaleCancelled);\\n        require(block.timestamp >= presaleCreatorClaimTime);\\n\\n        if (address(this).balance > 0) {\\n            presaleCreatorAddress.transfer(address(this).balance);\\n        }\\n    }\\n\\n    function getInfo() view public returns(\\n        uint256[30] memory numbers,\\n        bool[10] memory booleans,\\n        bytes32[10] memory strings,\\n        address[10] memory addresses\\n    ){\\n        numbers[0] = DifiDevFeePercentage;\\n        numbers[1] = DifiMinDevFeeInWei;\\n        numbers[2] = DifiId;\\n\\n        numbers[3] = totalInvestorsCount;\\n        numbers[4] = presaleCreatorClaimWei;\\n        numbers[5] = presaleCreatorClaimTime;\\n        numbers[6] = totalCollectedWei;\\n        numbers[7] = totalTokens;\\n        numbers[8] = tokensLeft;\\n        numbers[9] = tokenPriceInWei;\\n        numbers[10] = hardCapInWei;\\n        numbers[11] = softCapInWei;\\n        numbers[12] = maxInvestInWei;\\n        numbers[13] = minInvestInWei;\\n        numbers[14] = openTime;\\n        numbers[15] = closeTime;\\n        numbers[16] = uniListingPriceInWei;\\n        numbers[17] = uniLiquidityAddingTime;\\n        numbers[18] = uniLPTokensLockDurationInDays;\\n        numbers[19] = uniLiquidityPercentageAllocation;\\n        numbers[20] = investments[msg.sender];\\n\\n        booleans[0] = uniLiquidityAdded;\\n        booleans[1] = onlyWhitelistedAddressesAllowed;\\n        booleans[2] = DifiDevFeesExempted;\\n        booleans[3] = presaleCancelled ;\\n        booleans[4] = claimed[msg.sender];\\n\\n        strings[0] = saleTitle;\\n        strings[1] = linkTelegram;\\n        strings[2] = linkTwitter;\\n        strings[3] = linkDiscord;\\n        strings[4] = linkWebsite;\\n        strings[5] = linkTeam;\\n        strings[6] = auditReport;\\n        strings[7] = influencer;\\n\\n        addresses[0] = address(token);\\n        addresses[1] = presaleCreatorAddress;\\n        addresses[2] = DifiLiqLockAddress;\\n        addresses[3] = unsoldTokensDumpAddress;\\n    }\\n}\\n\\n\\n\\n/**\\n * @dev A token holder contract that will allow a beneficiary to extract the\\n * tokens after a given release time.\\n *\\n * Useful for simple vesting schedules like \\\"advisors get all of their tokens\\n * after 1 year\\\".\\n */\\ncontract TokenTimelock {\\n    using SafeERC20 for IERC20;\\n\\n    // ERC20 basic token contract being held\\n    IERC20 private _token;\\n\\n    // beneficiary of tokens after they are released\\n    address private _beneficiary;\\n\\n    // timestamp when token release is enabled\\n    uint256 private _releaseTime;\\n\\n    constructor (IERC20 token, address beneficiary, uint256 releaseTime) public {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(releaseTime > block.timestamp, \\\"TokenTimelock: release time is before current time\\\");\\n        _token = token;\\n        _beneficiary = beneficiary;\\n        _releaseTime = releaseTime;\\n    }\\n\\n    /**\\n     * @return the token being held.\\n     */\\n    function token() public view returns (IERC20) {\\n        return _token;\\n    }\\n\\n    /**\\n     * @return the beneficiary of the tokens.\\n     */\\n    function beneficiary() public view returns (address) {\\n        return _beneficiary;\\n    }\\n\\n    /**\\n     * @return the time when the tokens are released.\\n     */\\n    function releaseTime() public view returns (uint256) {\\n        return _releaseTime;\\n    }\\n\\n    /**\\n     * @notice Transfers tokens held by timelock to beneficiary.\\n     */\\n    function release() public virtual {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp >= _releaseTime, \\\"TokenTimelock: current time is before release time\\\");\\n\\n        uint256 amount = _token.balanceOf(address(this));\\n        require(amount > 0, \\\"TokenTimelock: no tokens to release\\\");\\n\\n        _token.safeTransfer(_beneficiary, amount);\\n    }\\n}\\n\\n\\n\\ninterface IUniswapV2Factory {\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n}\\n\\ncontract DifiFundsLiquidityLock is TokenTimelock {\\n    constructor(\\n        IERC20 _token,\\n        address presaleCreator,\\n        uint256 _releaseTime\\n    ) public TokenTimelock(_token, presaleCreator, _releaseTime) {}\\n}\\n\\n\\ncontract DifiFundsFactory {\\n    using SafeMath for uint256;\\n\\n    event PresaleCreated(bytes32 title, uint256 DifiId, address creator);\\n\\n    IUniswapV2Factory public constant uniswapFactory =\\n        IUniswapV2Factory(address(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f));\\n    address public constant wethAddress = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n    DifiFundsInfo public immutable Difi;\\n\\n    constructor(address _DifiInfoAddress) public {\\n        Difi = DifiFundsInfo(_DifiInfoAddress);\\n    }\\n\\n    struct PresaleInfo {\\n        address tokenAddress;\\n        address unsoldTokensDumpAddress;\\n        address[] whitelistedAddresses;\\n        uint256 tokenPriceInWei;\\n        uint256 hardCapInWei;\\n        uint256 softCapInWei;\\n        uint256 maxInvestInWei;\\n        uint256 minInvestInWei;\\n        uint256 openTime;\\n        uint256 closeTime;\\n    }\\n\\n    struct PresaleUniswapInfo {\\n        uint256 listingPriceInWei;\\n        uint256 liquidityAddingTime;\\n        uint256 lpTokensLockDurationInDays;\\n        uint256 liquidityPercentageAllocation;\\n    }\\n\\n    struct PresaleStringInfo {\\n        bytes32 saleTitle;\\n        bytes32 linkTelegram;\\n        bytes32 linkDiscord;\\n        bytes32 linkTwitter;\\n        bytes32 linkWebsite;\\n        bytes32 linkTeam;\\n        bytes32 auditReport;\\n        bytes32 influencer;\\n    }\\n\\n    // copied from https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/libraries/UniswapV2Library.sol\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function uniV2LibPairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) public view returns (address pair) {\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        pair = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\" // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    function initializePresale(\\n        DifiFundsPresale _presale,\\n        uint256 _totalTokens,\\n        uint256 _finalTokenPriceInWei,\\n        PresaleInfo calldata _info,\\n        PresaleUniswapInfo calldata _uniInfo,\\n        PresaleStringInfo calldata _stringInfo\\n    ) internal {\\n        _presale.setAddressInfo(msg.sender, _info.tokenAddress, _info.unsoldTokensDumpAddress);\\n        _presale.setGeneralInfo(\\n            _totalTokens,\\n            _finalTokenPriceInWei,\\n            _info.hardCapInWei,\\n            _info.softCapInWei,\\n            _info.maxInvestInWei,\\n            _info.minInvestInWei,\\n            _info.openTime,\\n            _info.closeTime\\n        );\\n        _presale.setUniswapInfo(\\n            _uniInfo.listingPriceInWei,\\n            _uniInfo.liquidityAddingTime,\\n            _uniInfo.lpTokensLockDurationInDays,\\n            _uniInfo.liquidityPercentageAllocation\\n        );\\n        _presale.setStringInfo(\\n            _stringInfo.saleTitle,\\n            _stringInfo.linkTelegram,\\n            _stringInfo.linkDiscord,\\n            _stringInfo.linkTwitter,\\n            _stringInfo.linkWebsite,\\n            _stringInfo.linkTeam,\\n            _stringInfo.auditReport,\\n            _stringInfo.influencer\\n        );\\n\\n        _presale.addwhitelistedAddresses(_info.whitelistedAddresses);\\n    }\\n\\n    function createPresale(\\n        PresaleInfo calldata _info,\\n        PresaleUniswapInfo calldata _uniInfo,\\n        PresaleStringInfo calldata _stringInfo\\n    ) external {\\n        IERC20 token = IERC20(_info.tokenAddress);\\n\\n        DifiFundsPresale presale = new DifiFundsPresale(address(this), Difi.owner());\\n\\n        address existingPairAddress = uniswapFactory.getPair(address(token), wethAddress);\\n        require(existingPairAddress == address(0)); // token should not be listed in Uniswap\\n\\n        uint256 maxEthPoolTokenAmount = _info.hardCapInWei.mul(_uniInfo.liquidityPercentageAllocation).div(100);\\n        uint256 maxLiqPoolTokenAmount = maxEthPoolTokenAmount.mul(1e18).div(_uniInfo.listingPriceInWei);\\n\\n        uint256 maxTokensToBeSold = _info.hardCapInWei.mul(1e18).div(_info.tokenPriceInWei);\\n        uint256 requiredTokenAmount = maxLiqPoolTokenAmount.add(maxTokensToBeSold);\\n        token.transferFrom(msg.sender, address(presale), requiredTokenAmount);\\n\\n        initializePresale(presale, maxTokensToBeSold, _info.tokenPriceInWei, _info, _uniInfo, _stringInfo);\\n\\n        address pairAddress = uniV2LibPairFor(address(uniswapFactory), address(token), wethAddress);\\n        DifiFundsLiquidityLock liquidityLock = new DifiFundsLiquidityLock(\\n                IERC20(pairAddress),\\n                msg.sender,\\n                _uniInfo.liquidityAddingTime + (_uniInfo.lpTokensLockDurationInDays * 1 days)\\n            );\\n\\n        uint256 DifiId = Difi.addPresaleAddress(address(presale));\\n        \\n        presale.setDifiInfo(address(liquidityLock), Difi.getDevFeePercentage(), Difi.getMinDevFeeInWei(), DifiId);\\n\\n        emit PresaleCreated(_stringInfo.saleTitle, DifiId, msg.sender);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_presale\",\"type\":\"address\"}],\"name\":\"addPresaleAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDevFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinDevFeeInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"DifiId\",\"type\":\"uint256\"}],\"name\":\"getPresaleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPresalesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setDevFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDevFeeInWei\",\"type\":\"uint256\"}],\"name\":\"setMinDevFeeInWei\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DifiFundsInfo","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}