{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IRegistry.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IRegistry {\r\n    function handlers(address) external view returns (bytes32);\r\n    function callers(address) external view returns (bytes32);\r\n    function bannedAgents(address) external view returns (uint256);\r\n    function fHalt() external view returns (bool);\r\n    function isValidHandler(address handler) external view returns (bool);\r\n    function isValidCaller(address handler) external view returns (bool);\r\n}\r\n\r\n// File: contracts/Registry.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/// @notice The registry database for Furucombo\r\ncontract Registry is IRegistry, Ownable {\r\n    mapping(address => bytes32) public override handlers;\r\n    mapping(address => bytes32) public override callers;\r\n    mapping(address => uint256) public override bannedAgents;\r\n    bool public override fHalt;\r\n\r\n    bytes32 public constant DEPRECATED = bytes10(0x64657072656361746564);\r\n\r\n    event Registered(address indexed registration, bytes32 info);\r\n    event Unregistered(address indexed registration);\r\n    event CallerRegistered(address indexed registration, bytes32 info);\r\n    event CallerUnregistered(address indexed registration);\r\n    event Banned(address indexed agent);\r\n    event Unbanned(address indexed agent);\r\n    event Halted();\r\n    event Unhalted();\r\n\r\n    modifier isNotHalted() {\r\n        require(fHalt == false, \"Halted\");\r\n        _;\r\n    }\r\n\r\n    modifier isHalted() {\r\n        require(fHalt, \"Not halted\");\r\n        _;\r\n    }\r\n\r\n    modifier isNotBanned(address agent) {\r\n        require(bannedAgents[agent] == 0, \"Banned\");\r\n        _;\r\n    }\r\n\r\n    modifier isBanned(address agent) {\r\n        require(bannedAgents[agent] != 0, \"Not banned\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Register a handler with a bytes32 information.\r\n     * @param registration Handler address.\r\n     * @param info Info string.\r\n     */\r\n    function register(address registration, bytes32 info) external onlyOwner {\r\n        require(registration != address(0), \"zero address\");\r\n        require(info != DEPRECATED, \"unregistered info\");\r\n        require(handlers[registration] != DEPRECATED, \"unregistered\");\r\n        handlers[registration] = info;\r\n        emit Registered(registration, info);\r\n    }\r\n\r\n    /**\r\n     * @notice Unregister a handler. The handler will be deprecated.\r\n     * @param registration The handler to be unregistered.\r\n     */\r\n    function unregister(address registration) external onlyOwner {\r\n        require(registration != address(0), \"zero address\");\r\n        require(handlers[registration] != bytes32(0), \"no registration\");\r\n        require(handlers[registration] != DEPRECATED, \"unregistered\");\r\n        handlers[registration] = DEPRECATED;\r\n        emit Unregistered(registration);\r\n    }\r\n\r\n    /**\r\n     * @notice Register a caller with a bytes32 information.\r\n     * @param registration Caller address.\r\n     * @param info Info string.\r\n     * @dev Dapps that triggers callback function should be registered.\r\n     * In this case, registration is the Dapp address and the leading 20 bytes\r\n     * of info is the handler address.\r\n     */\r\n    function registerCaller(address registration, bytes32 info)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(registration != address(0), \"zero address\");\r\n        require(info != DEPRECATED, \"unregistered info\");\r\n        require(callers[registration] != DEPRECATED, \"unregistered\");\r\n        callers[registration] = info;\r\n        emit CallerRegistered(registration, info);\r\n    }\r\n\r\n    /**\r\n     * @notice Unregister a caller. The caller will be deprecated.\r\n     * @param registration The caller to be unregistered.\r\n     */\r\n    function unregisterCaller(address registration) external onlyOwner {\r\n        require(registration != address(0), \"zero address\");\r\n        require(callers[registration] != bytes32(0), \"no registration\");\r\n        require(callers[registration] != DEPRECATED, \"unregistered\");\r\n        callers[registration] = DEPRECATED;\r\n        emit CallerUnregistered(registration);\r\n    }\r\n\r\n    /**\r\n     * @notice Ban agent from query\r\n     *\r\n     */\r\n    function ban(address agent) external isNotBanned(agent) onlyOwner {\r\n        bannedAgents[agent] = 1;\r\n        emit Banned(agent);\r\n    }\r\n\r\n    /**\r\n     * @notice Unban agent from query\r\n     */\r\n    function unban(address agent) external isBanned(agent) onlyOwner {\r\n        bannedAgents[agent] = 0;\r\n        emit Unbanned(agent);\r\n    }\r\n\r\n    /**\r\n     * @notice Check if the handler is valid.\r\n     * @param handler The handler to be verified.\r\n     */\r\n    function isValidHandler(address handler)\r\n        external\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        return handlers[handler] != 0 && handlers[handler] != DEPRECATED;\r\n    }\r\n\r\n    /**\r\n     * @notice Check if the caller is valid.\r\n     * @param caller The caller to be verified.\r\n     */\r\n    function isValidCaller(address caller)\r\n        external\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        return callers[caller] != 0 && callers[caller] != DEPRECATED;\r\n    }\r\n\r\n    function halt() external isNotHalted onlyOwner {\r\n        fHalt = true;\r\n        emit Halted();\r\n    }\r\n\r\n    function unhalt() external isHalted onlyOwner {\r\n        fHalt = false;\r\n        emit Unhalted();\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"Banned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registration\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"info\",\"type\":\"bytes32\"}],\"name\":\"CallerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registration\",\"type\":\"address\"}],\"name\":\"CallerUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Halted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registration\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"info\",\"type\":\"bytes32\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"Unbanned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unhalted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registration\",\"type\":\"address\"}],\"name\":\"Unregistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEPRECATED\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"ban\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bannedAgents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"callers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fHalt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"handlers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"isValidCaller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"}],\"name\":\"isValidHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registration\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"info\",\"type\":\"bytes32\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registration\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"info\",\"type\":\"bytes32\"}],\"name\":\"registerCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"unban\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registration\",\"type\":\"address\"}],\"name\":\"unregister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registration\",\"type\":\"address\"}],\"name\":\"unregisterCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Registry","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://415b118bb96fb4fd11824f99a5d7c0a76d5898c49536e555a331be6aa4051eed"}]}