{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface ERC721 {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n    \r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function approve(address _approved, uint256 _tokenId) external;\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\ninterface ERC721Metadata {\r\n    function name() external view returns (string memory _name);\r\n    function symbol() external view returns (string memory _symbol);\r\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\r\n}\r\n\r\ninterface ERC165 {\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\ninterface ERC721TokenReceiver {\r\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns(bytes4);\r\n}\r\n\r\ncontract SupportsInterface is ERC165 {\r\n    mapping(bytes4 => bool) internal supportedInterfaces;\r\n    \r\n    constructor() {\r\n        supportedInterfaces[0x01ffc9a7] = true;     // ERC165\r\n    }\r\n    \r\n    function supportsInterface(bytes4 _interfaceID) external override view returns (bool) {\r\n        return supportedInterfaces[_interfaceID];\r\n    }\r\n}\r\n\r\n\r\ncontract HodlBag is ERC721, ERC721Metadata, SupportsInterface {\r\n    uint32 constant BASEPRICE = 1000000;            // 0.01 ETH, 8 decimals\r\n    uint32 constant INCREMENT = 30;                 // 3%\r\n    uint32 constant DECREMENT = 20;                 // 2%\r\n    uint8  constant DESIGNS   = 4;                  // Number of designs (BTC, ETH, DOGE, ???)\r\n    \r\n    string internal nftName;\r\n    string internal nftSymbol;\r\n    uint256 internal tokenCount;\r\n    \r\n    uint64[4] public nftPrices;                     // Price array for each design\r\n    address public admin;\r\n    \r\n    // Mapping from NFT ID to metadata uri.\r\n    mapping (uint256 => string) internal idToUri;\r\n    \r\n    // Mapping from NFT ID to the address that owns it.\r\n    mapping (uint256 => address) internal idToOwner;\r\n    \r\n    // Mapping from NFT ID to approved address.\r\n    mapping (uint256 => address) internal idToApproval;\r\n    \r\n    // Mapping from owner address to count of his tokens.\r\n    mapping (address => uint256) private ownerToNFTokenCount;\r\n    \r\n    // Mapping from owner address to mapping of operator addresses.\r\n    mapping (address => mapping (address => bool)) internal ownerToOperators;\r\n    \r\n    // Mapping from NFT ID to redeemed state.\r\n    mapping (uint256 => bool) public idToRedeemed;\r\n    \r\n    \r\n    // Guarantees that the msg.sender is an owner or operator of the given NFT.\r\n    modifier canOperate(uint256 _tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == msg.sender || ownerToOperators[tokenOwner][msg.sender], 'NOT_OWNER_OR_OPERATOR');\r\n        _;\r\n    }\r\n    \r\n    // Guarantees that the msg.sender is allowed to transfer NFT.\r\n    modifier canTransfer(uint256 _tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == msg.sender || idToApproval[_tokenId] == msg.sender || ownerToOperators[tokenOwner][msg.sender], 'NOT_OWNER_APPROVED_OR_OPERATOR');\r\n        _;\r\n    }\r\n    \r\n    // Guarantees that _tokenId is a valid Token.\r\n    modifier validNFToken(uint256 _tokenId) {\r\n        require(idToOwner[_tokenId] != address(0), 'NOT_VALID_NFT');\r\n        _;\r\n    }\r\n    \r\n    constructor() {\r\n        nftName = \"HODLbag NFT\";\r\n        nftSymbol = \"HDLN\";\r\n        \r\n        admin = msg.sender;\r\n        initPrices();\r\n    \r\n        supportedInterfaces[0x80ac58cd] = true; // ERC721\r\n        supportedInterfaces[0x5b5e139f] = true; // ERC721Metadata\r\n    }\r\n    \r\n    function initPrices() private {\r\n        for (uint i = 0; i < DESIGNS; i++) {\r\n            nftPrices[i] = BASEPRICE;\r\n        }\r\n    }\r\n    \r\n    function balanceOf(address _owner) external override view returns (uint256) {\r\n        require(_owner != address(0), 'ZERO_ADDRESS');\r\n        return ownerToNFTokenCount[_owner];\r\n    }\r\n    \r\n    function ownerOf(uint256 _tokenId) external override view returns (address _owner) {\r\n        _owner = idToOwner[_tokenId];\r\n        require(_owner != address(0), 'NOT_VALID_NFT');\r\n    }\r\n    \r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external override {\r\n        _safeTransferFrom(_from, _to, _tokenId, _data);\r\n    }\r\n    \r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external override {\r\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external override canTransfer(_tokenId) validNFToken(_tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == _from, 'NOT_OWNER');\r\n        require(_to != address(0), 'ZERO_ADDRESS');\r\n\r\n        _transfer(_to, _tokenId);\r\n    }\r\n    \r\n    function approve(address _approved, uint256 _tokenId) external override canOperate(_tokenId) validNFToken(_tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(_approved != tokenOwner, 'IS_OWNER');\r\n    \r\n        idToApproval[_tokenId] = _approved;\r\n        emit Approval(tokenOwner, _approved, _tokenId);\r\n    }\r\n    \r\n    function setApprovalForAll(address _operator, bool _approved) external override {\r\n        ownerToOperators[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n        \r\n    }\r\n    \r\n    function getApproved(uint256 _tokenId) external override view validNFToken(_tokenId) returns (address) {\r\n        return idToApproval[_tokenId];\r\n    }\r\n    \r\n    function isApprovedForAll(address _owner, address _operator) external override view returns (bool) {\r\n        return ownerToOperators[_owner][_operator];\r\n    }\r\n    \r\n    function totalSupply() external view returns (uint256 _totalsupply) {\r\n        _totalsupply = tokenCount;\r\n    }\r\n    \r\n    function name() external override view returns (string memory _name) {\r\n        _name = nftName;\r\n    }\r\n    \r\n    function symbol() external override view returns (string memory _symbol) {\r\n        _symbol = nftSymbol;\r\n    }\r\n    \r\n    // A distinct URI (RFC 3986) for a given NFT.\r\n    function tokenURI(uint256 _tokenId) external override view validNFToken(_tokenId) returns (string memory) {\r\n        return idToUri[_tokenId];\r\n    }\r\n    \r\n    function _setTokenUri(uint256 _tokenId, string memory _uri) internal validNFToken(_tokenId) {\r\n        idToUri[_tokenId] = _uri;\r\n    }\r\n    \r\n    function isContract(address _addr) internal view returns (bool addressCheck) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(_addr) } // solhint-disable-line\r\n        addressCheck = (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    \r\n    function _transfer(address _to, uint256 _tokenId) internal {\r\n        address from = idToOwner[_tokenId];\r\n        \r\n        // Clear approval\r\n        if (idToApproval[_tokenId] != address(0)) {\r\n            delete idToApproval[_tokenId];\r\n        }\r\n        \r\n        // Transfer\r\n        require(idToOwner[_tokenId] == from, 'NOT_OWNER');\r\n        \r\n        ownerToNFTokenCount[from]--;\r\n        idToOwner[_tokenId] = _to;\r\n        ownerToNFTokenCount[_to]++;\r\n        \r\n        emit Transfer(from, _to, _tokenId);\r\n    }\r\n    \r\n    function _safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory _data) private canTransfer(_tokenId) validNFToken(_tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == _from, 'NOT_OWNER');\r\n        require(_to != address(0), 'ZERO_ADDRESS');\r\n\r\n        _transfer(_to, _tokenId);\r\n        \r\n        if (isContract(_to)) {\r\n            bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\r\n            require(retval == 0x150b7a02, 'NOT_ABLE_TO_RECEIVE_NFT');\r\n        }\r\n    }\r\n    \r\n    function _mint(address _to, uint256 _tokenId) internal {\r\n        require(_to != address(0), 'ZERO_ADDRESS');\r\n        require(idToOwner[_tokenId] == address(0), 'NFT_ALREADY_EXISTS');\r\n        \r\n        idToOwner[_tokenId] = _to;\r\n        ownerToNFTokenCount[_to]++;\r\n        \r\n        emit Transfer(address(0), _to, _tokenId);\r\n    }\r\n    \r\n    function _setPrices(uint8 _designId) private {\r\n        for (uint i = 0; i < DESIGNS; i++) {\r\n            if (i == _designId) {\r\n                // Increase the price for the minted design\r\n                nftPrices[i] = nftPrices[i] * (1000 + INCREMENT) / 1000;\r\n            }\r\n            else {\r\n                // Decrease the price for every other designs\r\n                uint256 decrement = nftPrices[i] * DECREMENT / 1000 / (DESIGNS - 1);\r\n                nftPrices[i] -= uint32(decrement);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function getPrice(uint8 _designId) public view returns (uint256) {\r\n        require(_designId < DESIGNS, 'DESIGN_NOT_FOUND');\r\n        \r\n        return (uint256(nftPrices[_designId]) * 10 ** 10);\r\n    }\r\n    \r\n    function mint(address _to, uint8 _designId, string calldata _uri) external payable {\r\n        require(_designId < DESIGNS, 'DESIGN_NOT_FOUND');\r\n        require(msg.value == getPrice(_designId), 'WRONG_AMOUNT');\r\n        \r\n        uint256 _tokenId = tokenCount;\r\n        tokenCount++;\r\n        \r\n        _setPrices(_designId);\r\n        _mint(_to, _tokenId);\r\n        _setTokenUri(_tokenId, _uri);\r\n    }\r\n    \r\n    function adminWithdraw(address payable _address, uint256 _amount) external{\r\n        require(msg.sender == admin, 'NOT_ADMIN');\r\n        \r\n        _address.transfer(_amount);\r\n    }\r\n    \r\n    function redeem(uint256 _tokenId) canOperate(_tokenId) external {\r\n        require(!idToRedeemed[_tokenId], 'ALREADY_REDEEMED');\r\n        \r\n        idToRedeemed[_tokenId] = true;\r\n    }\r\n    \r\n    fallback() external payable {}\r\n    receive() external payable {}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"adminWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_designId\",\"type\":\"uint8\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToRedeemed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_designId\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftPrices\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalsupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"HodlBag","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://13707869182f9e484b3b7234ef4496caad4925783a042359a64212a3eb14ff30"}]}