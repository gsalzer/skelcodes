{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TBDETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport './interfaces/IHegicETHOptions.sol';\\nimport './interfaces/ICurve.sol';\\nimport './interfaces/IUniswapV2Router02.sol';\\nimport './interfaces/IChainlinkAggregatorV3.sol';\\nimport './interfaces/IERC20.sol';\\nimport './interfaces/IWETH.sol';\\nimport './interfaces/ITBD.sol';\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\ncontract TBDETH is ITBD {\\n    using SafeMath for uint256;\\n\\n    // Curve MetaPool used to convert alUSD to Dai\\n    ICurve alUSDMetaPool;\\n\\n    // Hegic ETH Options contract\\n    IHegicETHOptions hegicETHOptions;\\n\\n    // Uniswap router to convert Dai to Eth\\n    IUniswapV2Router02 uniswapV2Router02;\\n\\n    // alUSD, Dai and Weth ERC20 contracts\\n    IERC20 alUSD;\\n    IERC20 Dai;\\n    IWETH Weth;\\n\\n    // Store of created options\\n    mapping(address => ITBD.Option[]) public optionsByOwner;\\n\\n    // Uniswap exchange paths Dai => Eth\\n    address[] public uniswapExchangePath;\\n\\n    // Decimals for price values from aggregators\\n    uint256 constant PRICE_DECIMALS = 1e8;\\n\\n    constructor(\\n        address _hegicETHOptions,\\n        address _alUSD,\\n        address _Dai,\\n        address _Weth,\\n        address _alUSDMetaPool,\\n        address _uniswapV2Router02\\n    ) {\\n        alUSDMetaPool = ICurve(_alUSDMetaPool);\\n        hegicETHOptions = IHegicETHOptions(_hegicETHOptions);\\n        alUSD = IERC20(_alUSD);\\n        Dai = IERC20(_Dai);\\n        Weth = IWETH(_Weth);\\n        uniswapV2Router02 = IUniswapV2Router02(_uniswapV2Router02);\\n\\n        uniswapExchangePath = new address[](2);\\n        uniswapExchangePath[0] = _Dai;\\n        uniswapExchangePath[1] = _Weth;\\n    }\\n\\n    /// ITBD overriden functions\\n\\n    function purchaseOptionWithAlUSD(\\n        uint256 amount,\\n        uint256 strike,\\n        uint256 period,\\n        address owner,\\n        IHegicOptionTypes.OptionType optionType,\\n        uint256 minETH\\n    ) public override returns (uint256 optionID) {\\n        // Retrieve alUSD from user\\n        require(alUSD.transferFrom(msg.sender, address(this), amount), 'TBD/cannot-transfer-alusd');\\n\\n        // Compute curve output amount in Dai\\n        uint256 curveDyInDai = alUSDMetaPool.get_dy_underlying(0, 1, amount);\\n        // Approve alUSD for curve\\n        alUSD.approve(address(alUSDMetaPool), amount);\\n        // Swap alUSD to Dai\\n        require(\\n            alUSDMetaPool.exchange_underlying(int128(0), int128(1), amount, curveDyInDai) == curveDyInDai,\\n            'TBD/cannot-swap-alusd-to-dai'\\n        );\\n\\n        // Compute amount of Eth retrievable from Swap & check if above minimal Eth value provided\\n        // Doing it soon prevents extra gas usage in case of failure due to useless approvale and swap\\n        uint256[] memory uniswapAmounts = uniswapV2Router02.getAmountsOut(curveDyInDai, uniswapExchangePath);\\n        require(uniswapAmounts[1] > minETH, 'TBD/min-eth-not-reached');\\n\\n        // Approve Dai to Uniswap Router\\n        Dai.approve(address(uniswapV2Router02), curveDyInDai);\\n\\n        // Swap Dai for Eth\\n        uniswapAmounts =\\n            uniswapV2Router02.swapExactTokensForETH(\\n                curveDyInDai,\\n                minETH,\\n                uniswapExchangePath,\\n                address(this),\\n                block.timestamp\\n            );\\n\\n        // Reverse compute option amount\\n        uint256 optionAmount = getAmount(period, uniswapAmounts[1], strike, optionType);\\n\\n        // Create and send option to owner\\n        optionID = hegicETHOptions.create{value: uniswapAmounts[1]}(period, optionAmount, strike, optionType);\\n        hegicETHOptions.transfer(optionID, payable(owner));\\n\\n        emit PurchaseOption(owner, optionID, amount, address(alUSD), uniswapAmounts[1]);\\n\\n        // Store option\\n        optionsByOwner[msg.sender].push(ITBD.Option({id: optionID, priceInAlUSD: amount}));\\n\\n        return optionID;\\n    }\\n\\n    function getOptionsByOwner(address owner) external view override returns (ITBD.Option[] memory) {\\n        return optionsByOwner[owner];\\n    }\\n\\n    function getUnderlyingFeeFromAlUSD(uint256 amount) external view override returns (uint256) {\\n        uint256 curveDyInDai = alUSDMetaPool.get_dy_underlying(0, 1, amount);\\n        uint256[] memory uniswapWethOutput = uniswapV2Router02.getAmountsOut(curveDyInDai, uniswapExchangePath);\\n        return uniswapWethOutput[1];\\n    }\\n\\n    function getEthFeeFromAlUSD(uint256 amount) external view override returns (uint256) {\\n        uint256 curveDyInDai = alUSDMetaPool.get_dy_underlying(0, 1, amount);\\n        uint256[] memory uniswapWethOutput = uniswapV2Router02.getAmountsOut(curveDyInDai, uniswapExchangePath);\\n        return uniswapWethOutput[1];\\n    }\\n\\n    function getOptionAmountFromAlUSD(\\n        uint256 period,\\n        uint256 amount,\\n        uint256 strike,\\n        IHegicOptionTypes.OptionType optionType\\n    ) external view override returns (uint256) {\\n        uint256 curveDyInDai = alUSDMetaPool.get_dy_underlying(0, 1, amount);\\n        uint256[] memory uniswapWethOutput = uniswapV2Router02.getAmountsOut(curveDyInDai, uniswapExchangePath);\\n\\n        return getAmount(period, uniswapWethOutput[1], strike, optionType);\\n    }\\n\\n    function getAmount(\\n        uint256 period,\\n        uint256 fees,\\n        uint256 strike,\\n        IHegicOptionTypes.OptionType optionType\\n    ) public view override returns (uint256) {\\n        require(\\n            optionType == IHegicOptionTypes.OptionType.Put || optionType == IHegicOptionTypes.OptionType.Call,\\n            'invalid option type'\\n        );\\n        (, int256 latestPrice, , , ) = IChainlinkAggregatorV3(hegicETHOptions.priceProvider()).latestRoundData();\\n        uint256 currentPrice = uint256(latestPrice);\\n        uint256 iv = hegicETHOptions.impliedVolRate();\\n\\n        if (optionType == IHegicOptionTypes.OptionType.Put) {\\n            if (strike > currentPrice) {\\n                // ITM Put Fee\\n                uint256 nume = fees.mul(currentPrice).mul(PRICE_DECIMALS);\\n                uint256 sqrtPeriod = sqrt(period);\\n                uint256 denom = currentPrice.mul(PRICE_DECIMALS).div(100);\\n                denom = denom.add(sqrtPeriod.mul(iv).mul(strike));\\n                denom = denom.add(PRICE_DECIMALS.mul(strike.sub(currentPrice)));\\n                return nume.div(denom);\\n            } else {\\n                // OTM Put Fee\\n                uint256 nume = fees.mul(currentPrice).mul(PRICE_DECIMALS);\\n                uint256 sqrtPeriod = sqrt(period);\\n                uint256 denom = sqrtPeriod.mul(strike).mul(iv).add(currentPrice.mul(PRICE_DECIMALS).div(100));\\n                return nume.div(denom);\\n            }\\n        } else {\\n            if (strike < currentPrice) {\\n                // ITM Call Fee\\n                uint256 nume = fees.mul(strike).mul(PRICE_DECIMALS).mul(currentPrice);\\n                uint256 sqrtPeriod = sqrt(period);\\n                uint256 denom = strike.mul(PRICE_DECIMALS).div(100).mul(currentPrice);\\n                denom = denom.add(sqrtPeriod.mul(iv).mul(currentPrice).mul(currentPrice));\\n                denom = denom.add(strike.mul(PRICE_DECIMALS).mul(currentPrice.sub(strike)));\\n                return nume.div(denom);\\n            } else {\\n                // OTM Call Fee\\n                uint256 nume = fees.mul(strike).mul(PRICE_DECIMALS);\\n                uint256 sqrtPeriod = sqrt(period);\\n                uint256 denom = sqrtPeriod.mul(currentPrice).mul(iv).add(strike.mul(PRICE_DECIMALS).div(100));\\n                return nume.div(denom);\\n            }\\n        }\\n    }\\n\\n    /// Misc\\n\\n    function sqrt(uint256 x) private pure returns (uint256 result) {\\n        result = x;\\n        uint256 k = x.div(2).add(1);\\n        while (k < result) (result, k) = (k, x.div(k).add(k).div(2));\\n    }\\n\\n    receive() external payable {}\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHegicETHOptions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport './IHegicOptionTypes.sol';\\n\\ninterface IHegicETHOptions is IHegicOptionTypes {\\n    function priceProvider() external view returns (address);\\n\\n    function impliedVolRate() external view returns (uint256);\\n\\n    enum State {Inactive, Active, Exercised, Expired}\\n\\n    function exercise(uint256 optionID) external;\\n\\n    function options(uint256)\\n        external\\n        view\\n        returns (\\n            State state,\\n            address payable holder,\\n            uint256 strike,\\n            uint256 amount,\\n            uint256 lockedAmount,\\n            uint256 premium,\\n            uint256 expiration,\\n            IHegicOptionTypes.OptionType optionType\\n        );\\n\\n    struct Option {\\n        State state;\\n        address payable holder;\\n        uint256 strike;\\n        uint256 amount;\\n        uint256 lockedAmount;\\n        uint256 premium;\\n        uint256 expiration;\\n        IHegicOptionTypes.OptionType optionType;\\n    }\\n\\n    function fees(\\n        uint256 period,\\n        uint256 amount,\\n        uint256 strike,\\n        IHegicOptionTypes.OptionType optionType\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 total,\\n            uint256 settlementFee,\\n            uint256 strikeFee,\\n            uint256 periodFee\\n        );\\n\\n    function create(\\n        uint256 period,\\n        uint256 amount,\\n        uint256 strike,\\n        IHegicOptionTypes.OptionType optionType\\n    ) external payable returns (uint256 optionID);\\n\\n    function transfer(uint256 optionID, address payable newHolder) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICurve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface ICurve {\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface IUniswapV2Router02 {\\n    function getAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IChainlinkAggregatorV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface IChainlinkAggregatorV3 {\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface IERC20 {\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport './IERC20.sol';\\n\\ninterface IWETH is IERC20 {\\n    function withdraw(uint256 wad) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITBD.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport './IHegicOptionTypes.sol';\\n\\ninterface ITBD {\\n    event PurchaseOption(\\n        address indexed owner,\\n        uint256 optionID,\\n        uint256 purchasePrice,\\n        address purchaseToken,\\n        uint256 fees\\n    );\\n\\n    struct Option {\\n        uint256 id;\\n        uint256 priceInAlUSD;\\n    }\\n\\n    /// @notice Convert alUSD to Dai using Curve, Dai to Weth using Uniswap and purchases option on Hegic\\n    /// @param amount Amount of AlUSD paid\\n    /// @param strike Strike price (with 8 decimals)\\n    /// @param period Option period in seconds (min 1 day, max 28 days) \\n    /// @param owner Address where option is sent \\n    /// @param optionType 1 for PUT, 2 for CALL\\n    /// @param minETH Prevents high slippage by setting min eth after swaps\\n    function purchaseOptionWithAlUSD(\\n        uint256 amount,\\n        uint256 strike,\\n        uint256 period,\\n        address owner,\\n        IHegicOptionTypes.OptionType optionType,\\n        uint256 minETH\\n    ) external returns (uint256 optionID);\\n\\n    /// @notice Retrieve created options\\n    /// @param owner Owner of the options to retrieve\\n    function getOptionsByOwner(address owner) external view returns (Option[] memory);\\n\\n    /// @notice Retrieve option creation cost in the underlying token\\n    /// @param amount alUSD amount used\\n    function getUnderlyingFeeFromAlUSD(uint256 amount) external view returns (uint256);\\n\\n    /// @notice Retrieve option creation cost in eth\\n    /// @param amount alUSD amount used\\n    function getEthFeeFromAlUSD(uint256 amount) external view returns (uint256);\\n\\n    /// @notice Retrieve the option size depending on all parameters + alUSD paid\\n    /// @param amount Amount of AlUSD paid\\n    /// @param strike Strike price (with 8 decimals)\\n    /// @param period Option period in seconds (min 1 day, max 28 days) \\n    /// @param optionType 1 for PUT, 2 for CALL\\n    function getOptionAmountFromAlUSD(\\n        uint256 period,\\n        uint256 amount,\\n        uint256 strike,\\n        IHegicOptionTypes.OptionType optionType\\n    ) external view returns (uint256);\\n\\n    /// @notice Retrieve the option size from the raw eth fee paid to Hegic\\n    /// @param period Option period in seconds (min 1 day, max 28 days) \\n    /// @param fees Amount of Eth paid\\n    /// @param strike Strike price (with 8 decimals)\\n    /// @param optionType 1 for PUT, 2 for CALL\\n    function getAmount(\\n        uint256 period,\\n        uint256 fees,\\n        uint256 strike,\\n        IHegicOptionTypes.OptionType optionType\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHegicOptionTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface IHegicOptionTypes {\\n    enum OptionType {Invalid, Put, Call}\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hegicETHOptions\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_alUSD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_alUSDMetaPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2Router02\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchasePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"PurchaseOption\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"internalType\":\"enum IHegicOptionTypes.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"}],\"name\":\"getAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getEthFeeFromAlUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"internalType\":\"enum IHegicOptionTypes.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"}],\"name\":\"getOptionAmountFromAlUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOptionsByOwner\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInAlUSD\",\"type\":\"uint256\"}],\"internalType\":\"struct ITBD.Option[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getUnderlyingFeeFromAlUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"optionsByOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInAlUSD\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum IHegicOptionTypes.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minETH\",\"type\":\"uint256\"}],\"name\":\"purchaseOptionWithAlUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniswapExchangePath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"TBDETH","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000efc0eeadc1132a12c9487d800112693bf49ecfa2000000000000000000000000bc6da0fe9ad5f3b0d58160288917aa56653660e90000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000043b4fdfd4ff969587185cdb6f0bd875c5fc83f8c0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}