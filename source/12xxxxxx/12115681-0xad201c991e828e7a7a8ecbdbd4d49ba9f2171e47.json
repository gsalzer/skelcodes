{"status":"1","message":"OK","result":[{"SourceCode":"{\"Popswap.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0 License\\npragma solidity \\u003e=0.7.0 \\u003c0.8.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\n\\ninterface IERC721 {\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n}\\n\\ninterface IERC1155 {\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n}\\n\\ncontract Popswap is ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    event TradeOpened(\\n        uint256 indexed tradeId,\\n        address indexed tradeOpener\\n    );\\n\\n    event TradeCancelled(\\n        uint256 indexed tradeId,\\n        address indexed tradeCloser\\n    );\\n\\n    event TradeExecuted(\\n        uint256 indexed tradeId,\\n        address indexed tradeOpener,\\n        address indexed tradeCloser\\n    );\\n\\n    struct Trade {\\n        uint256 tradeId;\\n        address openingTokenAddress;\\n        uint256 openingTokenId;\\n        address closingTokenAddress;\\n        uint256 closingTokenId;\\n        uint256 expiryDate;\\n        uint256 successDate;\\n        address tradeOpener;\\n        address tradeCloser;\\n        bool active;\\n    }\\n\\n    Trade[] public trades;\\n\\n    mapping (uint256 =\\u003e address) private _tradeIdToTradeCloser;\\n  \\n    address private _devFund;\\n\\n    constructor(address devFund_) {\\n        _devFund = devFund_;\\n    }\\n\\n    function devFund() public view virtual returns (address) {\\n        return _devFund;\\n    }\\n\\n    function openNewTrade(\\n        address _openingTokenAddress,\\n        uint256 _openingTokenId,\\n        address _closingTokenAddress,\\n        uint256 _closingTokenId,\\n        uint256 _expiryDate\\n    ) public nonReentrant returns (uint256) {\\n        require(\\n            _expiryDate \\u003e block.timestamp,\\n            \\\"Popswap::openNewTrade: _expiryDate must be after current block.timestamp\\\"\\n        );\\n        uint256 tradeId = trades.length;\\n        trades.push(Trade(\\n            tradeId,\\n            _openingTokenAddress,\\n            _openingTokenId,\\n            _closingTokenAddress,\\n            _closingTokenId,\\n            _expiryDate,\\n            0,\\n            msg.sender,\\n            0x0000000000000000000000000000000000000000,\\n            true\\n        ));\\n        emit TradeOpened(tradeId, msg.sender);\\n        return tradeId;\\n    }\\n\\n    function getTradeByTradeId(uint256 _tradeId) public view returns(\\n        uint256,\\n        address,\\n        uint256,\\n        address,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address,\\n        address,\\n        bool\\n    ) {\\n        Trade memory trade = trades[_tradeId];\\n        return(\\n            trade.tradeId,\\n            trade.openingTokenAddress,\\n            trade.openingTokenId,\\n            trade.closingTokenAddress,\\n            trade.closingTokenId,\\n            trade.expiryDate,\\n            trade.successDate,\\n            trade.tradeOpener,\\n            trade.tradeCloser,\\n            trade.active\\n        );\\n    }\\n\\n    function getTradeCount() public view returns(uint256) {\\n        return trades.length;\\n    }\\n\\n    function cancelTrade(\\n        uint256 _tradeId\\n    ) public {\\n        Trade memory trade = trades[_tradeId];\\n        require(\\n            trade.tradeOpener == msg.sender,\\n            \\\"Popswap::cancelTrade: _tradeId must be trade created by msg.sender\\\"\\n        );\\n        require(\\n            trade.tradeCloser == 0x0000000000000000000000000000000000000000,\\n            \\\"Popswap::cancelTrade: _tradeCloser can\\u0027t already be non-zero address\\\"\\n        );\\n        require(\\n            trade.expiryDate \\u003e block.timestamp,\\n            \\\"Popswap::cancelTrade: trade.expiryDate must be after current block.timestamp\\\"\\n        );\\n        trades[_tradeId] = Trade(\\n            trade.tradeId,\\n            trade.openingTokenAddress,\\n            trade.openingTokenId,\\n            trade.closingTokenAddress,\\n            trade.closingTokenId,\\n            trade.expiryDate,\\n            trade.successDate,\\n            trade.tradeOpener,\\n            msg.sender,\\n            false\\n        );\\n        _tradeIdToTradeCloser[_tradeId] = msg.sender;\\n        emit TradeCancelled(trade.tradeId, msg.sender);\\n    }\\n\\n    function isTradeExecutable(uint256 _tradeId, uint8 _openingTokenType, uint8 _closingTokenType) public view returns (bool) {\\n        require(\\n            _openingTokenType \\u003c= 1,\\n            \\\"Popswap::isTradeExecutable: _openingTokenType must be either 0 or 1\\\"\\n        );\\n        require(\\n            _closingTokenType \\u003c= 1,\\n            \\\"Popswap::isTradeExecutable: _closingTokenType must be either 0 or 1\\\"\\n        );\\n        Trade memory trade = trades[_tradeId];\\n        if(trade.expiryDate \\u003c block.timestamp) {\\n            return false;\\n        }\\n        if(trade.active != true) {\\n            return false;\\n        }\\n        if(_openingTokenType == 0) {\\n            IERC721 openingToken = IERC721(trade.openingTokenAddress);\\n            if(openingToken.isApprovedForAll(trade.tradeOpener, address(this)) != true) {\\n                return false;\\n            }\\n            if(openingToken.ownerOf(trade.openingTokenId) != trade.tradeOpener) {\\n                return false;\\n            }\\n        }else if(_openingTokenType == 1) {\\n            IERC1155 openingToken = IERC1155(trade.openingTokenAddress);\\n            if(openingToken.isApprovedForAll(trade.tradeOpener, address(this)) != true) {\\n                return false;\\n            }\\n            if(openingToken.balanceOf(trade.tradeOpener, trade.openingTokenId) \\u003c 1) {\\n                return false;\\n            }\\n        }\\n        if(_closingTokenType == 0) {\\n            IERC721 closingToken = IERC721(trade.closingTokenAddress);\\n            if(closingToken.isApprovedForAll(msg.sender, address(this)) != true) {\\n                return false;\\n            }\\n            if(closingToken.ownerOf(trade.closingTokenId) != msg.sender) {\\n                return false;\\n            }\\n        }else if(_closingTokenType == 1) {\\n            IERC1155 closingToken = IERC1155(trade.closingTokenAddress);\\n            if(closingToken.isApprovedForAll(msg.sender, address(this)) != true) {\\n                return false;\\n            }\\n            if(closingToken.balanceOf(msg.sender, trade.closingTokenId) \\u003c 1) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function executeTrade(uint256 _tradeId, uint8 _openingTokenType, uint8 _closingTokenType) public nonReentrant returns (uint256) {\\n        require(\\n            _openingTokenType \\u003c= 1,\\n            \\\"Popswap::executeTrade: _openingTokenType must be either 0 or 1\\\"\\n        );\\n        require(\\n            _closingTokenType \\u003c= 1,\\n            \\\"Popswap::executeTrade: _closingTokenType must be either 0 or 1\\\"\\n        );\\n        Trade memory trade = trades[_tradeId];\\n        require(\\n            trade.active == true,\\n            \\\"Popswap::executeTrade: trade is no longer active\\\"\\n        );\\n        require(\\n            trade.expiryDate \\u003e block.timestamp,\\n            \\\"Popswap::executeTrade: trade has expired\\\"\\n        );\\n        if(_openingTokenType == 0) {\\n            IERC721 openingToken = IERC721(trade.openingTokenAddress);\\n            openingToken.safeTransferFrom(trade.tradeOpener, msg.sender, trade.openingTokenId);\\n        }else if(_openingTokenType == 1) {\\n            IERC1155 openingToken = IERC1155(trade.openingTokenAddress);\\n            openingToken.safeTransferFrom(trade.tradeOpener, msg.sender, trade.openingTokenId, 1, \\\"0000000000000000000000000000000000000000000000000000000000000000\\\");\\n        }\\n        if(_closingTokenType == 0) {\\n            IERC721 closingToken = IERC721(trade.closingTokenAddress);\\n            closingToken.safeTransferFrom(msg.sender, trade.tradeOpener, trade.closingTokenId);\\n        }else if(_closingTokenType == 1) {\\n            IERC1155 closingToken = IERC1155(trade.closingTokenAddress);\\n            closingToken.safeTransferFrom(msg.sender, trade.tradeOpener, trade.closingTokenId, 1, \\\"0000000000000000000000000000000000000000000000000000000000000000\\\");\\n        }\\n        trades[_tradeId] = Trade(\\n            trade.tradeId,\\n            trade.openingTokenAddress,\\n            trade.openingTokenId,\\n            trade.closingTokenAddress,\\n            trade.closingTokenId,\\n            trade.expiryDate,\\n            block.timestamp,\\n            trade.tradeOpener,\\n            msg.sender,\\n            false\\n        );\\n        _tradeIdToTradeCloser[_tradeId] = msg.sender;\\n        emit TradeExecuted(trade.tradeId, trade.tradeOpener, msg.sender);\\n        return trade.tradeId;\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.7.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.7.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c \\u003c a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b \\u003e a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"devFund_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tradeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradeCloser\",\"type\":\"address\"}],\"name\":\"TradeCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tradeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradeOpener\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradeCloser\",\"type\":\"address\"}],\"name\":\"TradeExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tradeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradeOpener\",\"type\":\"address\"}],\"name\":\"TradeOpened\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tradeId\",\"type\":\"uint256\"}],\"name\":\"cancelTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tradeId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_openingTokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_closingTokenType\",\"type\":\"uint8\"}],\"name\":\"executeTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tradeId\",\"type\":\"uint256\"}],\"name\":\"getTradeByTradeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTradeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tradeId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_openingTokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_closingTokenType\",\"type\":\"uint8\"}],\"name\":\"isTradeExecutable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_openingTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_openingTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_closingTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_closingTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiryDate\",\"type\":\"uint256\"}],\"name\":\"openNewTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trades\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"openingTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"openingTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"closingTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"closingTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"successDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tradeOpener\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradeCloser\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Popswap","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000043425a1387915663535d91ec6e280490b9c86be4","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9253a5f006593a2f8d332c5a8c2ada1aaf1a73a97dc0265a2a753a8ad7f7dabb"}]}