{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MahinNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/access/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Roles.sol\\\";\\nimport \\\"./Randomness.sol\\\";\\nimport \\\"./Fees.sol\\\";\\n\\n\\ncontract MahinNFT is Roles, ERC721(\\\"Mahin\\\", \\\"MAHIN\\\"), Randomness, HasFees  {\\n  event TokenDataStorage(\\n    uint256 indexed tokenId,\\n    bytes[] states\\n  );\\n\\n  event Diagnosed(\\n    uint256 indexed tokenId\\n  );\\n\\n  struct Piece {\\n    string name;\\n    bytes[] imageData;\\n    string[] ipfsHashes;\\n    string[] arweaveHashes;\\n    uint8 currentState;\\n  }\\n\\n  // The beneficiary (the charity or someone acting in their name) - receives royalties.\\n  address public beneficiary;\\n\\n  mapping(uint256 => Piece) public pieces;\\n\\n  constructor(VRFConfig memory vrfConfig) Randomness(vrfConfig) {\\n  }\\n\\n  function withdraw() public onlyOwner {\\n    address payable owner = payable(owner());\\n    owner.transfer(address(this).balance);\\n  }\\n\\n  function withdrawToken(address tokenAddress) public onlyOwner {\\n    IERC20 token = IERC20(tokenAddress);\\n    token.transfer(owner(), token.balanceOf(address(this)));\\n  }\\n\\n  // Returns the current SVG/PNG of the piece.\\n  function getImageData(uint256 tokenId) public view returns (bytes memory) {\\n    require(_exists(tokenId), \\\"not a valid token\\\");\\n    return pieces[tokenId].imageData[0];\\n  }\\n\\n  function setImageData(uint256 tokenId, bytes calldata state1, bytes calldata state2) public onlyOwner {\\n    pieces[tokenId].imageData[0] = state1;\\n    pieces[tokenId].imageData[1] = state2;\\n  }\\n\\n  // Will be used by the owner during setup to create all pieces of the work.\\n  // ipfsHashes - the ipfs location of each state - needed so provided an off-chain metadata url.\\n  function initToken(uint256 tokenId, string memory name, string[] memory arweaveHashes, string[] memory ipfsHashes) public onlyOwner {\\n    require(pieces[tokenId].ipfsHashes.length == 0, \\\"invalid id\\\");\\n\\n    pieces[tokenId].name = name;\\n    pieces[tokenId].ipfsHashes = ipfsHashes;\\n    pieces[tokenId].arweaveHashes = arweaveHashes;\\n    pieces[tokenId].currentState = 0;\\n  }\\n\\n  // Init multiple tokens at once\\n  function initTokens(uint256[] memory tokenIds, string[] memory names, string[][] memory arweaveHashSets, string[][] memory ipfsHashSets) public onlyOwner {\\n    for (uint256 i=0; i<tokenIds.length; i++) {\\n      uint256 tokenId = tokenIds[i];\\n      require(pieces[tokenId].ipfsHashes.length == 0, \\\"invalid id\\\");\\n\\n      pieces[tokenId].name = names[i];\\n      pieces[tokenId].ipfsHashes = ipfsHashSets[i];\\n      pieces[tokenId].arweaveHashes = arweaveHashSets[i];\\n      pieces[tokenId].currentState = 0;\\n    }\\n  }\\n\\n  // Allow contract owner&minter to mint a token and assigned to to anyone they please.\\n  function mintToken(uint256 tokenId, address firstOwner) public onlyMinterOrOwner {\\n    require(pieces[tokenId].ipfsHashes.length > 0, \\\"invalid id\\\");\\n    require(!_exists(tokenId), \\\"exists\\\");\\n\\n    _mint(firstOwner, tokenId);\\n  }\\n\\n  // Allow contract owner to set the IPFS host\\n  function setIPFSHost(string memory baseURI_) public onlyOwner {\\n    _setBaseURI(baseURI_);\\n  }\\n\\n  function setBeneficiary(address _beneficiary) public onlyOwner {\\n    beneficiary = _beneficiary;\\n  }\\n\\n  // Return the current IPFS link based on state\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n    require(pieces[tokenId].ipfsHashes.length > 0, \\\"invalid id\\\");\\n\\n    Piece memory piece = pieces[tokenId];\\n    string memory tokenPath = piece.ipfsHashes[piece.currentState];\\n    return string(abi.encodePacked(baseURI(), tokenPath));\\n  }\\n\\n  function onDiagnosed(uint256 tokenId) internal override {\\n    pieces[tokenId].currentState = 1;\\n    emit Diagnosed(tokenId);\\n  }\\n\\n  function diagnose(uint256 tokenId) public onlyDoctor {\\n    onDiagnosed(tokenId);\\n  }\\n\\n  function getBeneficiary() internal override view returns (address) {\\n    return beneficiary;\\n  }\\n\\n  function getFee(uint256 tokenId) override internal view returns (uint256) {\\n    if (pieces[tokenId].currentState >= 1) {\\n      return 15;\\n    } else {\\n      return 5;\\n    }\\n  }\\n}\\n\\n\"\r\n    },\r\n    \"contracts/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n// Copied from openzeppelin because we want to override the tokenURI() function\\n\\nimport \\\"openzeppelin-solidity/contracts/GSN/Context.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/introspection/ERC165.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/utils/Address.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/utils/EnumerableMap.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n  using SafeMath for uint256;\\n  using Address for address;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n  using EnumerableMap for EnumerableMap.UintToAddressMap;\\n  using Strings for uint256;\\n\\n  // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n  // Mapping from holder address to their (enumerable) set of owned tokens\\n  mapping (address => EnumerableSet.UintSet) private _holderTokens;\\n\\n  // Enumerable mapping from token ids to their owners\\n  EnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n  // Mapping from token ID to approved address\\n  mapping (uint256 => address) private _tokenApprovals;\\n\\n  // Mapping from owner to operator approvals\\n  mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n  // Token name\\n  string private _name;\\n\\n  // Token symbol\\n  string private _symbol;\\n\\n  // Optional mapping for token URIs\\n  mapping (uint256 => string) internal _tokenURIs;\\n\\n  // Base URI\\n  string private _baseURI;\\n\\n  /*\\n   *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n   *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n   *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n   *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n   *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n   *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n   *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n   *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n   *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n   *\\n   *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n   *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n   */\\n  bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n  /*\\n   *     bytes4(keccak256('name()')) == 0x06fdde03\\n   *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n   *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n   *\\n   *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n   */\\n  bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n  /*\\n   *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\n   *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\n   *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\n   *\\n   *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n   */\\n  bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n  /**\\n   * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n   */\\n  constructor (string memory name_, string memory symbol_) {\\n    _name = name_;\\n    _symbol = symbol_;\\n\\n    // register the supported interfaces to conform to ERC721 via ERC165\\n    _registerInterface(_INTERFACE_ID_ERC721);\\n    _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n    _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-balanceOf}.\\n   */\\n  function balanceOf(address owner) public view override returns (uint256) {\\n    require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n\\n    return _holderTokens[owner].length();\\n  }\\n\\n  /**\\n   * @dev See {IERC721-ownerOf}.\\n   */\\n  function ownerOf(uint256 tokenId) public view override returns (address) {\\n    return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-name}.\\n   */\\n  function name() public view override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-symbol}.\\n   */\\n  function symbol() public view override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n  * @dev Returns the base URI set via {_setBaseURI}. This will be\\n  * automatically added as a prefix in {tokenURI} to each token's URI, or\\n  * to the token ID if no specific URI is set for that token ID.\\n  */\\n  function baseURI() public view returns (string memory) {\\n    return _baseURI;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n   */\\n  function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\\n    return _holderTokens[owner].at(index);\\n  }\\n\\n  /**\\n   * @dev See {IERC721Enumerable-totalSupply}.\\n   */\\n  function totalSupply() public view override returns (uint256) {\\n    // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n    return _tokenOwners.length();\\n  }\\n\\n  /**\\n   * @dev See {IERC721Enumerable-tokenByIndex}.\\n   */\\n  function tokenByIndex(uint256 index) public view override returns (uint256) {\\n    (uint256 tokenId, ) = _tokenOwners.at(index);\\n    return tokenId;\\n  }\\n\\n  /**\\n   * @dev See {IERC721-approve}.\\n   */\\n  function approve(address to, uint256 tokenId) public virtual override {\\n    address owner = ownerOf(tokenId);\\n    require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n    require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n      \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n    );\\n\\n    _approve(to, tokenId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-getApproved}.\\n   */\\n  function getApproved(uint256 tokenId) public view override returns (address) {\\n    require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n    return _tokenApprovals[tokenId];\\n  }\\n\\n  /**\\n   * @dev See {IERC721-setApprovalForAll}.\\n   */\\n  function setApprovalForAll(address operator, bool approved) public virtual override {\\n    require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n    _operatorApprovals[_msgSender()][operator] = approved;\\n    emit ApprovalForAll(_msgSender(), operator, approved);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-isApprovedForAll}.\\n   */\\n  function isApprovedForAll(address owner, address operator) public view override returns (bool) {\\n    return _operatorApprovals[owner][operator];\\n  }\\n\\n  /**\\n   * @dev See {IERC721-transferFrom}.\\n   */\\n  function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n    //solhint-disable-next-line max-line-length\\n    require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n    _transfer(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n    safeTransferFrom(from, to, tokenId, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n    require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n    _safeTransfer(from, to, tokenId, _data);\\n  }\\n\\n  /**\\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n   *\\n   * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n   *\\n   * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n   * implement alternative mechanisms to perform token transfer, such as signature-based.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must exist and be owned by `from`.\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n    _transfer(from, to, tokenId);\\n    require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n  }\\n\\n  /**\\n   * @dev Returns whether `tokenId` exists.\\n   *\\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n   *\\n   * Tokens start existing when they are minted (`_mint`),\\n   * and stop existing when they are burned (`_burn`).\\n   */\\n  function _exists(uint256 tokenId) internal view returns (bool) {\\n    return _tokenOwners.contains(tokenId);\\n  }\\n\\n  /**\\n   * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   */\\n  function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\\n    require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n    address owner = ownerOf(tokenId);\\n    return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n  }\\n\\n  /**\\n   * @dev Safely mints `tokenId` and transfers it to `to`.\\n   *\\n   * Requirements:\\n   d*\\n   * - `tokenId` must not exist.\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _safeMint(address to, uint256 tokenId) internal virtual {\\n    _safeMint(to, tokenId, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n   * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n   */\\n  function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n    _mint(to, tokenId);\\n    require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n  }\\n\\n  /**\\n   * @dev Mints `tokenId` and transfers it to `to`.\\n   *\\n   * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must not exist.\\n   * - `to` cannot be the zero address.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _mint(address to, uint256 tokenId) internal virtual {\\n    require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n    require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n    _beforeTokenTransfer(address(0), to, tokenId);\\n\\n    _holderTokens[to].add(tokenId);\\n\\n    _tokenOwners.set(tokenId, to);\\n\\n    emit Transfer(address(0), to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Destroys `tokenId`.\\n   * The approval is cleared when the token is burned.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _burn(uint256 tokenId) internal virtual {\\n    address owner = ownerOf(tokenId);\\n\\n    _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n    // Clear approvals\\n    _approve(address(0), tokenId);\\n\\n    // Clear metadata (if any)\\n    if (bytes(_tokenURIs[tokenId]).length != 0) {\\n      delete _tokenURIs[tokenId];\\n    }\\n\\n    _holderTokens[owner].remove(tokenId);\\n\\n    _tokenOwners.remove(tokenId);\\n\\n    emit Transfer(owner, address(0), tokenId);\\n  }\\n\\n  /**\\n   * @dev Transfers `tokenId` from `from` to `to`.\\n   *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must be owned by `from`.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n    require(ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n    require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n    _beforeTokenTransfer(from, to, tokenId);\\n\\n    // Clear approvals from the previous owner\\n    _approve(address(0), tokenId);\\n\\n    _holderTokens[from].remove(tokenId);\\n    _holderTokens[to].add(tokenId);\\n\\n    _tokenOwners.set(tokenId, to);\\n\\n    emit Transfer(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   */\\n  function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n    require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n    _tokenURIs[tokenId] = _tokenURI;\\n  }\\n\\n  /**\\n   * @dev Internal function to set the base URI for all token IDs. It is\\n   * automatically added as a prefix to the value returned in {tokenURI},\\n   * or to the token ID if {tokenURI} is empty.\\n   */\\n  function _setBaseURI(string memory baseURI_) internal virtual {\\n    _baseURI = baseURI_;\\n  }\\n\\n  /**\\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n   * The call is not executed if the target address is not a contract.\\n   *\\n   * @param from address representing the previous owner of the given token ID\\n   * @param to target address that will receive the tokens\\n   * @param tokenId uint256 ID of the token to be transferred\\n   * @param _data bytes optional data to send along with the call\\n   * @return bool whether the call correctly returned the expected magic value\\n   */\\n  function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n  private returns (bool)\\n  {\\n    if (!to.isContract()) {\\n      return true;\\n    }\\n    bytes memory returndata = to.functionCall(abi.encodeWithSelector(\\n        IERC721Receiver(to).onERC721Received.selector,\\n        _msgSender(),\\n        from,\\n        tokenId,\\n        _data\\n      ), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    bytes4 retval = abi.decode(returndata, (bytes4));\\n    return (retval == _ERC721_RECEIVED);\\n  }\\n\\n  function _approve(address to, uint256 tokenId) private {\\n    _tokenApprovals[tokenId] = to;\\n    emit Approval(ownerOf(tokenId), to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any token transfer. This includes minting\\n   * and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n   * transferred to `to`.\\n   * - When `from` is zero, `tokenId` will be minted for `to`.\\n   * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/Roles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"openzeppelin-solidity/contracts/access/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/GSN/Context.sol\\\";\\n\\n/**\\n * @dev Uses the Ownable class and adds a second role called the minter.\\n *\\n * Owner: Can upload tokens, withdraw lost tokens, config ipfs hashes etc. Can also mint tokens.\\n     Can set the other roles.\\n * Minter: Can only mint tokens.\\n * Doctor: If set, can diagnose pieces. Replaces the builtin rand gen.\\n */\\nabstract contract Roles is Context, Ownable {\\n    address private _minter;\\n    address private _doctor;\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial minter.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _minter = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current minter.\\n     */\\n    function minter() public view returns (address) {\\n        return _minter;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the doctor.\\n     */\\n    function doctor() public view returns (address) {\\n        return _doctor;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the minter.\\n     */\\n    modifier onlyMinter() {\\n        require(_minter == _msgSender(), \\\"not minter\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the doctor.\\n     */\\n    modifier onlyDoctor() {\\n        require(_doctor == _msgSender(), \\\"not doctor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the minter or the owner.\\n     */\\n    modifier onlyMinterOrOwner() {\\n        require(_minter == _msgSender() || owner() == _msgSender(), \\\"not minter or owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers the minter role of the contract to a new account (`newMinter`).\\n     * Can only be called by the owner.\\n     */\\n    function setMinter(address newMinter) public virtual onlyOwner {\\n        require(newMinter != address(0), \\\"zero address\\\");\\n        _minter = newMinter;\\n    }\\n\\n    /**\\n     * @dev Assigns the doctor role, replacing the builtin rng.\\n     */\\n    function setDoctor(address newDoctor) public virtual onlyOwner {\\n        require(newDoctor != address(0), \\\"zero address\\\");\\n        _doctor = newDoctor;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Randomness.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n//import \\\"hardhat/console.sol\\\";\\nimport \\\"./ABDKMath64x64.sol\\\";\\nimport \\\"./ChainlinkVRF.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol\\\";\\nimport \\\"./Roles.sol\\\";\\n\\n\\nabstract contract Randomness is Roles, ChainlinkVRF, IERC721Enumerable {\\n    using SafeMath for uint256;\\n\\n    // Configuration Chainlink VRF\\n    struct VRFConfig {\\n        address coordinator;\\n        address token;\\n        bytes32 keyHash;\\n        uint256 price;\\n    }\\n\\n    event RollInProgress(\\n        int128 probability\\n    );\\n\\n    event RollComplete();\\n\\n    uint public constant projectRuntimeSeconds = 365 days * 5;   // Runs for 5 years\\n    uint public constant targetProbability     = 2000000000000000;  // 0.2% - over the course of the project\\n    uint public constant denominator           = 10000000000000000; // 100%\\n    // This has been pre-calculated based on the values above\\n    uint public constant probabilityPerSecond  = 14151671;        // 0.0000000014151671%\\n\\n    uint256 randomSeedBlock = 0;\\n    int128 public rollProbability = 0;\\n    uint256 public lastRollTime = 0;\\n\\n    bytes32 chainlinkRequestId = 0;\\n    uint256 chainlinkRandomNumber = 0;\\n    bytes32 internal chainlinkKeyHash;\\n    uint256 internal chainlinkFee;\\n\\n    constructor(VRFConfig memory config) ChainlinkVRF(config.coordinator, config.token) {\\n        chainlinkFee = config.price;\\n        chainlinkKeyHash = config.keyHash;\\n\\n        lastRollTime = block.timestamp;\\n    }\\n\\n    // Will return the probability of a (non-)diagnosis for an individual NFT, assuming the roll will happen at\\n    // `timestamp`. This will be based on the last time a roll happened, targeting a certain total probability\\n    // over the period the project is running.\\n    // Will return 0.80 to indicate that the probability of a diagnosis is 20%.\\n    function getProbability(uint256 timestamp) public view returns (int128 probability) {\\n        uint256 secondsSinceLastRoll = timestamp.sub(lastRollTime);\\n\\n        // Say we want totalProbability = 20% over the course of the project's runtime.\\n        // If we roll 12 times, what should be the probability of each roll so they compound to 20%?\\n        //    (1 - x) ** 12 = (1 - 20%)\\n        // Or generalized:\\n        //    (1 - x) ** numTries = (1 - totalProbability)\\n        // Solve by x:\\n        //     x = 1 - (1 - totalProbability) ** (1/numTries)\\n        //\\n\\n        // We use the 64.64 fixed point math library here. More info about this kind of math in Solidity:\\n        // https://medium.com/hackernoon/10x-better-fixed-point-math-in-solidity-32441fd25d43\\n        // https://ethereum.stackexchange.com/questions/83785/what-fixed-or-float-point-math-libraries-are-available-in-solidity\\n\\n        // We already pre-calculated the probability for a 1-second interval\\n        int128 _denominator = ABDKMath64x64.fromUInt(denominator);\\n        int128 _probabilityPerSecond = ABDKMath64x64.fromUInt(probabilityPerSecond);\\n\\n        // From the *probability per second* number, calculate the probability for this dice roll based on\\n        // the number of seconds since the last roll. randomNumber must be larger than this.\\n        probability = ABDKMath64x64.pow(\\n        // Convert from our fraction using our denominator, to a 64.64 fixed point number\\n            ABDKMath64x64.div(\\n            // reverse-probability of x: (1-x)\\n                ABDKMath64x64.sub(\\n                    _denominator,\\n                    _probabilityPerSecond\\n                ),\\n                _denominator\\n            ),\\n            secondsSinceLastRoll\\n        );\\n\\n        // `randomNumber / (2**64)` would now give us the random number as a 10-base decimal number.\\n        // To show it in Solidity, which does not support non-integers, we could multiply to shift the\\n        // decimal point, for example:\\n        //    console.log(\\\"randomNumber\\\",\\n        //      uint256(ABDKMath64x64.toUInt(\\n        //        ABDKMath64x64.mul(randomNumber, ABDKMath64x64.fromUInt(1000000))\\n        //      ))\\n        //    );\\n    }\\n\\n    // Anyone can roll, but the beneficiary is incentivized to do so.\\n    //\\n    // # When using Chainlink VRF:\\n    // Make sure you have previously funded the contract with LINK. Since anyone can start a request at\\n    // any time, do not prefund the contract; send the tokens when you want to enable a roll.\\n    //\\n    // # When using the blockhash-based fallback method:\\n    // A future block is picked, whose hash will provide the randomness.\\n    // We accept as low-impact that a miner mining this block could withhold it. A user seed/reveal system\\n    // to counteract miner withholding introduces too much complexity (need to penalize users etc).\\n    function requestRoll(bool useFallback) external {\\n        require(doctor() == address(0), \\\"rng-disabled\\\");\\n\\n        // If a roll is already scheduled, do nothing.\\n        if (isRolling()) { return; }\\n\\n        if (useFallback) {\\n            // Two blocks from now, the block hash will provide the randomness to decide the outcome\\n            randomSeedBlock = block.number + 2;\\n        }\\n        else {\\n            chainlinkRequestId = requestRandomness(chainlinkKeyHash, chainlinkFee, block.timestamp);\\n        }\\n\\n        // Calculate the probability for this roll, based on the current lastRollTime, before we update the latter.\\n        rollProbability = getProbability(block.timestamp);\\n\\n        // Set the last roll time, which \\\"consumes\\\" parts of the total probability for a diagnosis\\n        lastRollTime = block.timestamp;\\n\\n        emit RollInProgress(rollProbability);\\n    }\\n\\n    // Callback: randomness is returned from Chainlink VRF\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\n        require(requestId == chainlinkRequestId, \\\"invalid-request\\\");\\n        chainlinkRandomNumber = randomness;\\n    }\\n\\n    // Apply the results of the roll (run the randomness function, update NFTs).\\n    //\\n    // When using the block-hash based fallback randomness function:\\n    // If this is not called within 250 odd blocks, the hash of that block will no longer be accessible to us.\\n    // The roller thus has a possible reason *not* to call apply(), if the outcome is not as they desire.\\n    // We counteract this as follows:\\n    // - We consider an incomplete roll as a completed (which did not cause a state chance) for purposes of the\\n    //   compound probability. That is, you cannot increase the chance of any of the NFTs being diagnosed, you\\n    //   can only prevent it from happening. A caller looking to manipulate a roll would presumably desire a\\n    //   diagnosis, as they otherwise would simply do nothing.\\n    // - We counteract grieving (the repeated calling of pre-roll without calling apply, thus resetting the\\n    //   probability of a diagnosis) by letting anyone call `apply`, and emitting an event on `preroll`, to make\\n    //   it easy to watch for that.\\n    //\\n    // When using Chainlink VRF:\\n    //\\n    // In case we do not get a response from Chainlink within 2 hours, this can be called.\\n    //\\n    function applyRoll() external {\\n        require(isRolling(), \\\"no-roll\\\");\\n\\n        bytes32 randomness;\\n\\n        // Roll was started using the fallback random method based on the block hash\\n        if (randomSeedBlock > 0) {\\n            require(block.number > randomSeedBlock, \\\"too-early\\\");\\n            randomness = blockhash(randomSeedBlock);\\n\\n            // The seed block is no longer available. We act as if the roll led to zero diagnoses.\\n            if (randomness <= 0) {\\n                resetRoll();\\n                return;\\n            }\\n        }\\n\\n        // Roll was started using Chainlink VRF\\n        else {\\n            // No response from Chainlink\\n            if (chainlinkRandomNumber == 0 && block.timestamp - lastRollTime > 2 hours) {\\n                resetRoll();\\n                return;\\n            }\\n\\n            require(chainlinkRandomNumber > 0, \\\"too-early\\\");\\n            randomness = bytes32(chainlinkRandomNumber);\\n        }\\n\\n        _applyRandomness(randomness);\\n        resetRoll();\\n    }\\n\\n    function _applyRandomness(bytes32 randomness) internal {\\n        for (uint i=0; i<this.totalSupply(); i++) {\\n            uint256 tokenId = this.tokenByIndex(i);\\n\\n            // For each token, mix in the token id to get a new random number\\n            bytes32 hash = keccak256(abi.encodePacked(randomness, tokenId));\\n\\n            // Now we want to convert the token hash to a number between 0 and 1.\\n            // - 64.64-bit fixed point is a int128  which represents the fraction `{int128}/(64**2)`.\\n            // - Thus, the lowest 64 bits of the int128 are essentially what is after the decimal point -\\n            //   the fractional part of the number.\\n            // - So taking only the lowest 64 bits from a token hash essentially gives us a random number\\n            //   between 0 and 1.\\n\\n            // block hash is 256 bits - shift the left-most 64 bits into the right-most position, essentially\\n            // giving us a 64-bit number. Stored as an int128, this represents a fractional value between 0 and 1\\n            // in the format used by the 64.64 - fixed point library.\\n            int128 randomNumber = int128(uint256(hash) >> 192);\\n            //console.log(\\\"RANDOMNUMBER\\\", uint256(randomNumber));\\n\\n            if (randomNumber > rollProbability) {\\n                onDiagnosed(tokenId);\\n            }\\n        }\\n    }\\n\\n    function resetRoll() internal {\\n        randomSeedBlock = 0;\\n        rollProbability = 0;\\n        chainlinkRequestId = 0;\\n        chainlinkRandomNumber = 0;\\n        emit RollComplete();\\n    }\\n\\n    function isRolling() public view returns (bool) {\\n        return (randomSeedBlock > 0) || (chainlinkRequestId > 0);\\n    }\\n\\n    function onDiagnosed(uint256 tokenId) internal virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/Fees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"openzeppelin-solidity/contracts/introspection/ERC165.sol\\\";\\n\\nabstract contract IRoyalities {\\n    function getBeneficiary() internal virtual view returns (address);\\n    // Value between 0 and 100 (0% to 100%).\\n    function getFee(uint256 tokenId) virtual internal view returns (uint256);\\n}\\n\\ninterface IRaribleFees is IERC165 {\\n    // Rarible emits this when minting, we don't bother.\\n    //event SecondarySaleFees(uint256 tokenId, address[] recipients, uint[] bps);\\n\\n    function getFeeRecipients(uint256 id) external view returns (address payable[] memory);\\n    // 1000 = 10%\\n    function getFeeBps(uint256 id) external view returns (uint[] memory);\\n}\\n\\n/**\\n * @dev Implementation of royalties for 721s\\n *\\n */\\ninterface IERC2981 is IERC165 {\\n    /*\\n     * ERC165 bytes to add to interface array - set in parent contract implementing this standard\\n     *\\n     * bytes4(keccak256('royaltyInfo()')) == 0x46e80720\\n     * bytes4 private constant _INTERFACE_ID_ERC721ROYALTIES = 0x46e80720;\\n     * _registerInterface(_INTERFACE_ID_ERC721ROYALTIES);\\n     */\\n    /**\\n\\n    /**\\n     * @notice Called to return both the creator's address and the royalty percentage - this would be the main\\n     *   function called by marketplaces unless they specifically need just the royaltyAmount\\n     * @notice Percentage is calculated as a fixed point with a scaling factor of 10,000, such that 100% would be\\n     *   the value (1.000.000) where, 1.000.000/10.000 = 100. 1% would be the value 10.000/10.000 = 1\\n     */\\n    function royaltyInfo(uint256 _tokenId) external returns (address receiver, uint256 amount);\\n}\\n\\nabstract contract HasFees is ERC165, IRaribleFees, IRoyalities, IERC2981 {\\n    /*\\n     * bytes4(keccak256('getFeeBps(uint256)')) == 0x0ebd4c7f\\n     * bytes4(keccak256('getFeeRecipients(uint256)')) == 0xb9c4d9fb\\n     *\\n     * => 0x0ebd4c7f ^ 0xb9c4d9fb == 0xb7799584\\n     */\\n    bytes4 private constant _INTERFACE_ID_RARIBLE_FEES = 0xb7799584;\\n\\n    /*\\n     * ERC165 bytes to add to interface array - set in parent contract implementing this standard\\n     *\\n     * bytes4(keccak256('royaltyInfo()')) == 0x46e80720\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721ROYALTIES = 0x46e80720;\\n\\n    constructor() {\\n        _registerInterface(_INTERFACE_ID_RARIBLE_FEES);\\n        _registerInterface(_INTERFACE_ID_ERC721ROYALTIES);\\n    }\\n\\n    function getFeeRecipients(uint256) public override view returns (address payable[] memory) {\\n        address payable[] memory recipients = new address payable[](1);\\n        recipients[0] = payable(address(this));\\n        return recipients;\\n    }\\n    function getFeeBps(uint256 id) public override view returns (uint[] memory) {\\n        uint[] memory fees = new uint[](1);\\n        fees[0] = getFee(id) * 100;\\n        return fees;\\n    }\\n\\n    // Implements the current version of https://eips.ethereum.org/EIPS/eip-2981\\n    function royaltyInfo(uint256 _tokenId) external view override returns (address receiver, uint256 amount) {\\n        return (address(this), getFee(_tokenId) * 10000);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/EnumerableMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, \\\"EnumerableMap: nonexistent key\\\"); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/ABDKMath64x64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright © 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.7.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n    /*\\n     * Minimum value signed 64.64-bit fixed point number may have.\\n     */\\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n    /*\\n     * Maximum value signed 64.64-bit fixed point number may have.\\n     */\\n    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    /**\\n     * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function fromInt (int256 x) internal pure returns (int128) {\\n        require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n        return int128 (x << 64);\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n     * rounding down.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64-bit integer number\\n     */\\n    function toInt (int128 x) internal pure returns (int64) {\\n        return int64 (x >> 64);\\n    }\\n\\n    /**\\n     * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function fromUInt (uint256 x) internal pure returns (int128) {\\n        require (x <= 0x7FFFFFFFFFFFFFFF);\\n        return int128 (x << 64);\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n     * number rounding down.  Revert on underflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return unsigned 64-bit integer number\\n     */\\n    function toUInt (int128 x) internal pure returns (uint64) {\\n        require (x >= 0);\\n        return uint64 (x >> 64);\\n    }\\n\\n    /**\\n     * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n     * number rounding down.  Revert on overflow.\\n     *\\n     * @param x signed 128.128-bin fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function from128x128 (int256 x) internal pure returns (int128) {\\n        int256 result = x >> 64;\\n        require (result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128 (result);\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n     * number.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 128.128 fixed point number\\n     */\\n    function to128x128 (int128 x) internal pure returns (int256) {\\n        return int256 (x) << 64;\\n    }\\n\\n    /**\\n     * Calculate x + y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function add (int128 x, int128 y) internal pure returns (int128) {\\n        int256 result = int256(x) + y;\\n        require (result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128 (result);\\n    }\\n\\n    /**\\n     * Calculate x - y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function sub (int128 x, int128 y) internal pure returns (int128) {\\n        int256 result = int256(x) - y;\\n        require (result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128 (result);\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function mul (int128 x, int128 y) internal pure returns (int128) {\\n        int256 result = int256(x) * y >> 64;\\n        require (result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128 (result);\\n    }\\n\\n    /**\\n     * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n     * number and y is signed 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64 fixed point number\\n     * @param y signed 256-bit integer number\\n     * @return signed 256-bit integer number\\n     */\\n    function muli (int128 x, int256 y) internal pure returns (int256) {\\n        if (x == MIN_64x64) {\\n            require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n            y <= 0x1000000000000000000000000000000000000000000000000);\\n            return -y << 63;\\n        } else {\\n            bool negativeResult = false;\\n            if (x < 0) {\\n                x = -x;\\n                negativeResult = true;\\n            }\\n            if (y < 0) {\\n                y = -y; // We rely on overflow behavior here\\n                negativeResult = !negativeResult;\\n            }\\n            uint256 absoluteResult = mulu (x, uint256 (y));\\n            if (negativeResult) {\\n                require (absoluteResult <=\\n                    0x8000000000000000000000000000000000000000000000000000000000000000);\\n                return -int256 (absoluteResult); // We rely on overflow behavior here\\n            } else {\\n                require (absoluteResult <=\\n                    0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n                return int256 (absoluteResult);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64 fixed point number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 256-bit integer number\\n     */\\n    function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\n        if (y == 0) return 0;\\n\\n        require (x >= 0);\\n\\n        uint256 lo = (uint256 (x) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n        uint256 hi = uint256 (x) * (y >> 128);\\n\\n        require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        hi <<= 64;\\n\\n        require (hi <=\\n            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n        return hi + lo;\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n     * zero.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function div (int128 x, int128 y) internal pure returns (int128) {\\n        require (y != 0);\\n        int256 result = (int256 (x) << 64) / y;\\n        require (result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128 (result);\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @param y signed 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function divi (int256 x, int256 y) internal pure returns (int128) {\\n        require (y != 0);\\n\\n        bool negativeResult = false;\\n        if (x < 0) {\\n            x = -x; // We rely on overflow behavior here\\n            negativeResult = true;\\n        }\\n        if (y < 0) {\\n            y = -y; // We rely on overflow behavior here\\n            negativeResult = !negativeResult;\\n        }\\n        uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\n        if (negativeResult) {\\n            require (absoluteResult <= 0x80000000000000000000000000000000);\\n            return -int128 (absoluteResult); // We rely on overflow behavior here\\n        } else {\\n            require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            return int128 (absoluteResult); // We rely on overflow behavior here\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function divu (uint256 x, uint256 y) internal pure returns (int128) {\\n        require (y != 0);\\n        uint128 result = divuu (x, y);\\n        require (result <= uint128 (MAX_64x64));\\n        return int128 (result);\\n    }\\n\\n    /**\\n     * Calculate -x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function neg (int128 x) internal pure returns (int128) {\\n        require (x != MIN_64x64);\\n        return -x;\\n    }\\n\\n    /**\\n     * Calculate |x|.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function abs (int128 x) internal pure returns (int128) {\\n        require (x != MIN_64x64);\\n        return x < 0 ? -x : x;\\n    }\\n\\n    /**\\n     * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n     * zero.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function inv (int128 x) internal pure returns (int128) {\\n        require (x != 0);\\n        int256 result = int256 (0x100000000000000000000000000000000) / x;\\n        require (result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128 (result);\\n    }\\n\\n    /**\\n     * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function avg (int128 x, int128 y) internal pure returns (int128) {\\n        return int128 ((int256 (x) + int256 (y)) >> 1);\\n    }\\n\\n    /**\\n     * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n     * Revert on overflow or in case x * y is negative.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function gavg (int128 x, int128 y) internal pure returns (int128) {\\n        int256 m = int256 (x) * int256 (y);\\n        require (m >= 0);\\n        require (m <\\n            0x4000000000000000000000000000000000000000000000000000000000000000);\\n        return int128 (sqrtu (uint256 (m)));\\n    }\\n\\n    /**\\n     * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y uint256 value\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function pow (int128 x, uint256 y) internal pure returns (int128) {\\n        uint256 absoluteResult;\\n        bool negativeResult = false;\\n        if (x >= 0) {\\n            absoluteResult = powu (uint256 (x) << 63, y);\\n        } else {\\n            // We rely on overflow behavior here\\n            absoluteResult = powu (uint256 (uint128 (-x)) << 63, y);\\n            negativeResult = y & 1 > 0;\\n        }\\n\\n        absoluteResult >>= 63;\\n\\n        if (negativeResult) {\\n            require (absoluteResult <= 0x80000000000000000000000000000000);\\n            return -int128 (absoluteResult); // We rely on overflow behavior here\\n        } else {\\n            require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            return int128 (absoluteResult); // We rely on overflow behavior here\\n        }\\n    }\\n\\n    /**\\n     * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function sqrt (int128 x) internal pure returns (int128) {\\n        require (x >= 0);\\n        return int128 (sqrtu (uint256 (x) << 64));\\n    }\\n\\n    /**\\n     * Calculate binary logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function log_2 (int128 x) internal pure returns (int128) {\\n        require (x > 0);\\n\\n        int256 msb = 0;\\n        int256 xc = x;\\n        if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\n        if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n        if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n        if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n        if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n        if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n        if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n        int256 result = msb - 64 << 64;\\n        uint256 ux = uint256 (x) << uint256 (127 - msb);\\n        for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n            ux *= ux;\\n            uint256 b = ux >> 255;\\n            ux >>= 127 + b;\\n            result += bit * int256 (b);\\n        }\\n\\n        return int128 (result);\\n    }\\n\\n    /**\\n     * Calculate natural logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function ln (int128 x) internal pure returns (int128) {\\n        require (x > 0);\\n\\n        return int128 (\\n            uint256 (log_2 (x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128);\\n    }\\n\\n    /**\\n     * Calculate binary exponent of x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function exp_2 (int128 x) internal pure returns (int128) {\\n        require (x < 0x400000000000000000); // Overflow\\n\\n        if (x < -0x400000000000000000) return 0; // Underflow\\n\\n        uint256 result = 0x80000000000000000000000000000000;\\n\\n        if (x & 0x8000000000000000 > 0)\\n            result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n        if (x & 0x4000000000000000 > 0)\\n            result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n        if (x & 0x2000000000000000 > 0)\\n            result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n        if (x & 0x1000000000000000 > 0)\\n            result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n        if (x & 0x800000000000000 > 0)\\n            result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n        if (x & 0x400000000000000 > 0)\\n            result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n        if (x & 0x200000000000000 > 0)\\n            result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n        if (x & 0x100000000000000 > 0)\\n            result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n        if (x & 0x80000000000000 > 0)\\n            result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n        if (x & 0x40000000000000 > 0)\\n            result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n        if (x & 0x20000000000000 > 0)\\n            result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n        if (x & 0x10000000000000 > 0)\\n            result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n        if (x & 0x8000000000000 > 0)\\n            result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n        if (x & 0x4000000000000 > 0)\\n            result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n        if (x & 0x2000000000000 > 0)\\n            result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\n        if (x & 0x1000000000000 > 0)\\n            result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n        if (x & 0x800000000000 > 0)\\n            result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n        if (x & 0x400000000000 > 0)\\n            result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n        if (x & 0x200000000000 > 0)\\n            result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n        if (x & 0x100000000000 > 0)\\n            result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n        if (x & 0x80000000000 > 0)\\n            result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n        if (x & 0x40000000000 > 0)\\n            result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n        if (x & 0x20000000000 > 0)\\n            result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n        if (x & 0x10000000000 > 0)\\n            result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n        if (x & 0x8000000000 > 0)\\n            result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n        if (x & 0x4000000000 > 0)\\n            result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n        if (x & 0x2000000000 > 0)\\n            result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n        if (x & 0x1000000000 > 0)\\n            result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n        if (x & 0x800000000 > 0)\\n            result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n        if (x & 0x400000000 > 0)\\n            result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n        if (x & 0x200000000 > 0)\\n            result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n        if (x & 0x100000000 > 0)\\n            result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n        if (x & 0x80000000 > 0)\\n            result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n        if (x & 0x40000000 > 0)\\n            result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n        if (x & 0x20000000 > 0)\\n            result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n        if (x & 0x10000000 > 0)\\n            result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n        if (x & 0x8000000 > 0)\\n            result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n        if (x & 0x4000000 > 0)\\n            result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n        if (x & 0x2000000 > 0)\\n            result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n        if (x & 0x1000000 > 0)\\n            result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n        if (x & 0x800000 > 0)\\n            result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n        if (x & 0x400000 > 0)\\n            result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n        if (x & 0x200000 > 0)\\n            result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n        if (x & 0x100000 > 0)\\n            result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n        if (x & 0x80000 > 0)\\n            result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n        if (x & 0x40000 > 0)\\n            result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n        if (x & 0x20000 > 0)\\n            result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n        if (x & 0x10000 > 0)\\n            result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n        if (x & 0x8000 > 0)\\n            result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n        if (x & 0x4000 > 0)\\n            result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n        if (x & 0x2000 > 0)\\n            result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n        if (x & 0x1000 > 0)\\n            result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n        if (x & 0x800 > 0)\\n            result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n        if (x & 0x400 > 0)\\n            result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n        if (x & 0x200 > 0)\\n            result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n        if (x & 0x100 > 0)\\n            result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n        if (x & 0x80 > 0)\\n            result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n        if (x & 0x40 > 0)\\n            result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n        if (x & 0x20 > 0)\\n            result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\n        if (x & 0x10 > 0)\\n            result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n        if (x & 0x8 > 0)\\n            result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n        if (x & 0x4 > 0)\\n            result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n        if (x & 0x2 > 0)\\n            result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n        if (x & 0x1 > 0)\\n            result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n\\n        result >>= uint256 (63 - (x >> 64));\\n        require (result <= uint256 (MAX_64x64));\\n\\n        return int128 (result);\\n    }\\n\\n    /**\\n     * Calculate natural exponent of x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function exp (int128 x) internal pure returns (int128) {\\n        require (x < 0x400000000000000000); // Overflow\\n\\n        if (x < -0x400000000000000000) return 0; // Underflow\\n\\n        return exp_2 (\\n            int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 64.64-bit fixed point number\\n     */\\n    function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\n        require (y != 0);\\n\\n        uint256 result;\\n\\n        if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n            result = (x << 64) / y;\\n        else {\\n            uint256 msb = 192;\\n            uint256 xc = x >> 192;\\n            if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n            if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n            if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n            if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n            if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n            if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n            result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\n            require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n            uint256 hi = result * (y >> 128);\\n            uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n            uint256 xh = x >> 192;\\n            uint256 xl = x << 64;\\n\\n            if (xl < lo) xh -= 1;\\n            xl -= lo; // We rely on overflow behavior here\\n            lo = hi << 128;\\n            if (xl < lo) xh -= 1;\\n            xl -= lo; // We rely on overflow behavior here\\n\\n            assert (xh == hi >> 128);\\n\\n            result += xl / y;\\n        }\\n\\n        require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return uint128 (result);\\n    }\\n\\n    /**\\n     * Calculate x^y assuming 0^0 is 1, where x is unsigned 129.127 fixed point\\n     * number and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x unsigned 129.127-bit fixed point number\\n     * @param y uint256 value\\n     * @return unsigned 129.127-bit fixed point number\\n     */\\n    function powu (uint256 x, uint256 y) private pure returns (uint256) {\\n        if (y == 0) return 0x80000000000000000000000000000000;\\n        else if (x == 0) return 0;\\n        else {\\n            int256 msb = 0;\\n            uint256 xc = x;\\n            if (xc >= 0x100000000000000000000000000000000) { xc >>= 128; msb += 128; }\\n            if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\n            if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n            if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n            if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n            if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n            if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n            if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n            int256 xe = msb - 127;\\n            if (xe > 0) x >>= uint256 (xe);\\n            else x <<= uint256 (-xe);\\n\\n            uint256 result = 0x80000000000000000000000000000000;\\n            int256 re = 0;\\n\\n            while (y > 0) {\\n                if (y & 1 > 0) {\\n                    result = result * x;\\n                    y -= 1;\\n                    re += xe;\\n                    if (result >=\\n                        0x8000000000000000000000000000000000000000000000000000000000000000) {\\n                        result >>= 128;\\n                        re += 1;\\n                    } else result >>= 127;\\n                    if (re < -127) return 0; // Underflow\\n                    require (re < 128); // Overflow\\n                } else {\\n                    x = x * x;\\n                    y >>= 1;\\n                    xe <<= 1;\\n                    if (x >=\\n                        0x8000000000000000000000000000000000000000000000000000000000000000) {\\n                        x >>= 128;\\n                        xe += 1;\\n                    } else x >>= 127;\\n                    if (xe < -127) return 0; // Underflow\\n                    require (xe < 128); // Overflow\\n                }\\n            }\\n\\n            if (re > 0) result <<= uint256 (re);\\n            else if (re < 0) result >>= uint256 (-re);\\n\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n     * number.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return unsigned 128-bit integer number\\n     */\\n    function sqrtu (uint256 x) private pure returns (uint128) {\\n        if (x == 0) return 0;\\n        else {\\n            uint256 xx = x;\\n            uint256 r = 1;\\n            if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\n            if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\n            if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\n            if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\n            if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\n            if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\n            if (xx >= 0x8) { r <<= 1; }\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1; // Seven iterations should be enough\\n            uint256 r1 = x / r;\\n            return uint128 (r < r1 ? r : r1);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/ChainlinkVRF.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./LinkTokenInterface.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\n\\n\\n// See VRFConsumerBase.sol and VRFRequestIDBase.sol from Chainlink.\\nabstract contract ChainlinkVRF {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @notice fulfillRandomness handles the VRF response.\\n     */\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\n\\n    /**\\n     * @notice requestRandomness initiates a request for VRF output given _seed\\n     */\\n    function requestRandomness(bytes32 _keyHash, uint256 _fee, uint256 _seed)  internal returns (bytes32 requestId)\\n    {\\n        LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, _seed));\\n        // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n        // the hash of the block containing this request to obtain the seed/input\\n        // which is finally passed to the VRF cryptographic machinery.\\n        uint256 vRFSeed  = makeVRFInputSeed(_keyHash, _seed, address(this), nonces[_keyHash]);\\n        // nonces[_keyHash] must stay in sync with\\n        // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n        // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n        // This provides protection against the user repeating their input seed,\\n        // which would result in a predictable/duplicate output, if multiple such\\n        // requests appeared in the same block.\\n        nonces[_keyHash] = nonces[_keyHash].add(1);\\n        return makeRequestId(_keyHash, vRFSeed);\\n    }\\n\\n    LinkTokenInterface immutable internal LINK;\\n    address immutable private vrfCoordinator;\\n\\n    // Nonces for each VRF key from which randomness has been requested.\\n    //\\n    // Must stay in sync with VRFCoordinator[_keyHash][this]\\n    mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\\n\\n    /**\\n     * @param _vrfCoordinator address of VRFCoordinator contract\\n     * @param _link address of LINK token contract\\n     *\\n     * @dev https://docs.chain.link/docs/link-token-contracts\\n     */\\n    constructor(address _vrfCoordinator, address _link) {\\n        vrfCoordinator = _vrfCoordinator;\\n        LINK = LinkTokenInterface(_link);\\n    }\\n\\n    // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n    // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n    // the origin of the call\\n    function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n        require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n        fulfillRandomness(requestId, randomness);\\n    }\\n\\n    /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   */\\n    function makeVRFInputSeed(bytes32 _keyHash, uint256 _userSeed, address _requester, uint256 _nonce) internal pure returns (uint256)\\n    {\\n        return  uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n    }\\n\\n    /**\\n     * @notice Returns the id for this request\\n     */\\n    function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/LinkTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface LinkTokenInterface {\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n    function approve(address spender, uint256 value) external returns (bool success);\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n    function decimals() external view returns (uint8 decimalPlaces);\\n    function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n    function increaseApproval(address spender, uint256 subtractedValue) external;\\n    function name() external view returns (string memory tokenName);\\n    function symbol() external view returns (string memory tokenSymbol);\\n    function totalSupply() external view returns (uint256 totalTokensIssued);\\n    function transfer(address to, uint256 value) external returns (bool success);\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n    function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"coordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct Randomness.VRFConfig\",\"name\":\"vrfConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Diagnosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RollComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"probability\",\"type\":\"int128\"}],\"name\":\"RollInProgress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"states\",\"type\":\"bytes[]\"}],\"name\":\"TokenDataStorage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"applyRoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"diagnose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doctor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getFeeBps\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getFeeRecipients\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getImageData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getProbability\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"probability\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"arweaveHashes\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"ipfsHashes\",\"type\":\"string[]\"}],\"name\":\"initToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"string[][]\",\"name\":\"arweaveHashSets\",\"type\":\"string[][]\"},{\"internalType\":\"string[][]\",\"name\":\"ipfsHashSets\",\"type\":\"string[][]\"}],\"name\":\"initTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRolling\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRollTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"firstOwner\",\"type\":\"address\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pieces\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"currentState\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"probabilityPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectRuntimeSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"useFallback\",\"type\":\"bool\"}],\"name\":\"requestRoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollProbability\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDoctor\",\"type\":\"address\"}],\"name\":\"setDoctor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setIPFSHost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"state1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"state2\",\"type\":\"bytes\"}],\"name\":\"setImageData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetProbability\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MahinNFT","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f0d54349addcf704f77ae15b96510dea15cb7952000000000000000000000000514910771af9ca656af840dff83e8264ecf986caaa77729d3466ca35ae8d28b3bbac7cc36a5031efdc430821c02bc31a238af4450000000000000000000000000000000000000000000000001bc16d674ec80000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}