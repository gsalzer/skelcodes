{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract FundRaising is Ownable {\r\n\r\n    // use mantissa (ori * 10**18) to reserve precision\r\n    // price means x usdt per token\r\n    mapping(uint256 => uint256) public prices;\r\n    \r\n    address public usdt;\r\n    address public mis;\r\n\r\n    struct Round {\r\n        uint256 price;\r\n        uint start;\r\n        uint duration;\r\n        uint usdtMin;\r\n        uint usdtMax;\r\n        uint supply;\r\n    }\r\n    \r\n    struct Record {\r\n        uint256 lockedAmount;\r\n        uint256 lockStartTs;\r\n        bool useUnlockB;\r\n    }\r\n    // user => record amount\r\n    mapping(address => uint256) public recordsLen;\r\n    mapping(address => mapping(uint256 => Record)) public records;\r\n    // round, account => paid\r\n    mapping(uint => mapping(address => bool)) public paid;\r\n    Round[] public rounds;\r\n    // round => bought\r\n    mapping(uint256 => uint256) public bought;\r\n\r\n    // ============ Init ============ //\r\n    \r\n    constructor(address usdt_, address mis_) {\r\n        usdt = usdt_;\r\n        mis = mis_;\r\n\r\n        uint256 usdtDecimals = IERC20Metadata(usdt).decimals();\r\n        uint256 misDecimals = IERC20Metadata(mis).decimals();\r\n        \r\n        // 150 * 10**16 means 1.5 * 10**18\r\n\r\n        rounds.push(Round(\r\n            150 * 10**(16 + usdtDecimals - misDecimals),\r\n            block.timestamp, // start\r\n            72 * 3600,\r\n            20000 * 10**usdtDecimals,\r\n            50000 * 10**usdtDecimals,\r\n            270000 * 10**usdtDecimals // token supply in usdt\r\n        ));\r\n        rounds.push(Round(\r\n            200 * 10**(16 + usdtDecimals - misDecimals),\r\n            block.timestamp + 72 * 3600, // start\r\n            72 * 3600,\r\n            100 * 10**usdtDecimals,\r\n            1000 * 10**usdtDecimals,\r\n            216000 * 10**usdtDecimals // token supply in usdt\r\n        ));\r\n        rounds.push(Round(\r\n            250 * 10**(16 + usdtDecimals - misDecimals),\r\n            block.timestamp + 2 * 72 * 3600, // start\r\n            72 * 3600,\r\n            100 * 10**usdtDecimals,\r\n            1000 * 10**usdtDecimals,\r\n            180000 * 10**usdtDecimals // token supply in usdt\r\n        ));\r\n    }\r\n\r\n    // ============ Lock Rules ============ //\r\n    \r\n    // cliff\r\n    // n: now\r\n    // t: release ts\r\n    // a: total amount\r\n    // r: release rate\r\n    function cliff(uint256 n, uint256 t, uint256 a, uint256 r) internal pure returns(uint256) {\r\n        uint256 total = a * r / 10**18;\r\n        return n >= t ? total : 0;\r\n    }\r\n    \r\n    // linear\r\n    // n: now\r\n    // t0: release start ts\r\n    // t1: release end ts\r\n    // s: step length\r\n    // a: total amount\r\n    // r: release rate\r\n    function linear(uint256 n, uint256 t0, uint256 t1, uint256 s, uint256 a, uint256 r) internal pure returns(uint256) {\r\n        uint256 total = a * r / 10**18;\r\n        if (n < t0) {\r\n            return 0;\r\n        }\r\n        else if (n >= t1) {\r\n            return total;\r\n        }\r\n        else {\r\n            uint256 perStep = total / ((t1 - t0) / s);\r\n            uint passedSteps = (n - t0) / s;\r\n            return perStep * passedSteps;\r\n        }\r\n    }\r\n\r\n    function getUnlockA(uint totalLocked, uint lockStartTs) internal view returns(uint) {\r\n        uint256 n = block.timestamp;\r\n        uint256 t0 = lockStartTs + 1 * 30 * 86400;\r\n        uint256 t1 = lockStartTs + 6 * 30 * 86400;\r\n        uint256 r0 = 50 * 10**16;\r\n        uint256 r1 = 50 * 10**16;\r\n        uint256 s = 30 * 86400;\r\n        return cliff(n, t0, totalLocked, r0) + linear(n, t0, t1, s, totalLocked, r1);\r\n    }\r\n    \r\n    function getUnlockB(uint totalLocked, uint lockStartTs) internal view returns(uint) {\r\n        uint256 n = block.timestamp;\r\n        uint256 t0 = lockStartTs;\r\n        uint256 t1 = lockStartTs + 10 * 30 * 86400;\r\n        uint256 r = 100 * 10**16;\r\n        uint256 s = 30 * 86400;\r\n        return linear(n, t0, t1, s, totalLocked, r);\r\n    }\r\n\r\n    // ============ Admin ============ //\r\n\r\n    function deposit(address token, uint256 amount) public onlyOwner {\r\n        IERC20Metadata(token).transferFrom(msg.sender, address(this), amount);\r\n    }\r\n\r\n    function withdraw(address token, uint256 amount) public onlyOwner {\r\n        IERC20Metadata(token).transfer(msg.sender, amount);\r\n    }\r\n\r\n    function updateRound(\r\n        uint256 index,\r\n        uint256 price,\r\n        uint256 start,\r\n        uint256 duration,\r\n        uint256 usdtMin,\r\n        uint256 usdtMax,\r\n        uint256 supply\r\n    ) public onlyOwner {\r\n        Round memory round = Round(price, start, duration, usdtMin, usdtMax, supply);\r\n        if (index > 0 && index < rounds.length) {\r\n            rounds[index] = round;\r\n        }\r\n        else {\r\n            rounds.push(round);\r\n        }\r\n    }\r\n    \r\n    // ============ Anyone ============ //    \r\n\r\n    function _useUnlockPlanB(uint256 usdtAmount) public view returns(bool) {\r\n        return usdtAmount >= 20000 * 10**IERC20Metadata(usdt).decimals();\r\n    }\r\n    \r\n    function buy(uint256 roundId, uint256 usdtAmount) public {\r\n        \r\n        require(roundId < rounds.length, \"WRONG_ROUND_ID\");\r\n        require(!paid[roundId][msg.sender], \"ALREADY_BOUGHT\");\r\n        Round storage round = rounds[roundId];\r\n        require(usdtAmount >= round.usdtMin, \"LESS_THAN_MIN\");\r\n        require(usdtAmount <= round.usdtMax, \"MORE_THAN_MAX\");\r\n        require(bought[roundId] + usdtAmount <= round.supply, \"EXCEED_SUPPLY\");\r\n        \r\n        // transfer\r\n        IERC20Metadata(usdt).transferFrom(msg.sender, address(this), usdtAmount);\r\n        \r\n        // record\r\n        \r\n        records[msg.sender][recordsLen[msg.sender]] = Record(\r\n            10**18 * usdtAmount / round.price,\r\n            round.start + round.duration,\r\n            _useUnlockPlanB(usdtAmount)\r\n        );\r\n        recordsLen[msg.sender] += 1;\r\n        \r\n        // post\r\n        paid[roundId][msg.sender] = true;\r\n        bought[roundId] += usdtAmount;\r\n    }\r\n    \r\n    mapping(address => uint256) public claimed;\r\n    \r\n    function available(address account) public view returns(uint256) {\r\n        uint len = recordsLen[account];\r\n        uint total = 0;\r\n        for(uint256 i=0;i< len;i++) {\r\n            Record storage record = records[account][i];\r\n            if (record.useUnlockB) {\r\n                total += getUnlockB(record.lockedAmount, record.lockStartTs);\r\n            }\r\n            else {\r\n                total += getUnlockA(record.lockedAmount, record.lockStartTs);\r\n            }\r\n        }\r\n        return total - claimed[account];\r\n    }\r\n    \r\n    function claim() public {\r\n        uint a = available(msg.sender);\r\n        require(a > 0, \"NOTHING_TO_CLAIM\");\r\n        IERC20Metadata(mis).transfer(msg.sender, a);\r\n        claimed[msg.sender] += a;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usdt_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mis_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"_useUnlockPlanB\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mis\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"paid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"records\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockStartTs\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useUnlockB\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"recordsLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"updateRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FundRaising","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000007c3fe88b2fc999f871e96a878b4951895884d410","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4506f7b6c9a53ce8f91c8892cf29d1f2d251eb609cf395b100bcd2d4fdad2bb1"}]}