{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals()\r\n    external\r\n    view\r\n    returns (\r\n      uint8\r\n    );\r\n\r\n  function description()\r\n    external\r\n    view\r\n    returns (\r\n      string memory\r\n    );\r\n\r\n  function version()\r\n    external\r\n    view\r\n    returns (\r\n      uint256\r\n    );\r\n    \r\n    // 0x74825DbC8BF76CC4e9494d0ecB210f676Efa001D - DAI/ETH Testnet\r\n    // 0x773616E4d11A78F511299002da57A0a94577F1f4 - DAI/ETH Mainnet\r\n    // getRoundData and latestRoundData should both raise \"No data present\"\r\n    // if they do not have data to report, instead of returning unset values\r\n    // which could be misinterpreted as actual reported values.\r\n  function getRoundData(\r\n    uint80 _roundId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable  {\r\n    address payable public _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface Token {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n}\r\n\r\n\r\ncontract Buy_INH_Token is Ownable{\r\n    \r\n    using SafeMath for uint;\r\n\r\n    address public tokenAddr;\r\n    uint256 private ethAmount;\r\n    uint256 public tokenPriceEth; \r\n    uint256 public tokenDecimal = 18;\r\n    uint256 public ethDecimal = 18;\r\n    \r\n    AggregatorV3Interface internal priceFeed;\r\n\r\n\r\n    event TokenTransfer(address beneficiary, uint amount);\r\n    \r\n    mapping (address => uint256) public balances;\r\n    mapping(address => uint256) public tokenExchanged;\r\n\r\n    constructor(address _tokenAddr) public {\r\n        tokenAddr = _tokenAddr;\r\n        priceFeed = AggregatorV3Interface(0x773616E4d11A78F511299002da57A0a94577F1f4);\r\n\r\n    }\r\n    \r\n    \r\n    \r\n    function() payable external {\r\n        ExchangeETHforToken(msg.sender, msg.value);\r\n        balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n    }\r\n    \r\n    function getLatestPrice() public view returns (uint256) {\r\n        (\r\n            , \r\n            int price,\r\n            ,\r\n            ,\r\n        ) = priceFeed.latestRoundData();\r\n        return uint256(price);\r\n    }\r\n    \r\n    function ExchangeETHforToken(address _addr, uint256 _amount) private {\r\n        uint256 amount = _amount;\r\n        address userAdd = _addr;\r\n        \r\n        tokenPriceEth = getLatestPrice();\r\n        \r\n        ethAmount = ((amount.mul(10 ** uint256(tokenDecimal)).div(tokenPriceEth)).mul(10 ** uint256(tokenDecimal))).div(10 ** uint256(tokenDecimal));\r\n        require(Token(tokenAddr).balanceOf(address(this)) >= ethAmount, \"There is low token balance in contract\");\r\n        \r\n        require(Token(tokenAddr).transfer(userAdd, ethAmount));\r\n        emit TokenTransfer(userAdd, ethAmount);\r\n        tokenExchanged[msg.sender] = tokenExchanged[msg.sender].add(ethAmount);\r\n        _owner.transfer(amount);\r\n    }\r\n    \r\n    function ExchangeETHforTokenMannual() public payable {\r\n        uint256 amount = msg.value;\r\n        address userAdd = msg.sender;\r\n        \r\n        tokenPriceEth = getLatestPrice();\r\n        \r\n        ethAmount = ((amount.mul(10 ** uint256(tokenDecimal)).div(tokenPriceEth)).mul(10 ** uint256(tokenDecimal))).div(10 ** uint256(tokenDecimal));\r\n        require(Token(tokenAddr).balanceOf(address(this)) >= ethAmount, \"There is low token balance in contract\");\r\n        \r\n        require(Token(tokenAddr).transfer(userAdd, ethAmount));\r\n        balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n        emit TokenTransfer(userAdd, ethAmount);\r\n        tokenExchanged[msg.sender] = tokenExchanged[msg.sender].add(ethAmount);\r\n        _owner.transfer(amount);\r\n        \r\n    }\r\n    \r\n\r\n    function updateTokenDecimal(uint256 newDecimal) public onlyOwner {\r\n        tokenDecimal = newDecimal;\r\n    }\r\n    \r\n    function updateTokenAddress(address newTokenAddr) public onlyOwner {\r\n        tokenAddr = newTokenAddr;\r\n    }\r\n\r\n    function withdrawTokens(address beneficiary) public onlyOwner {\r\n        require(Token(tokenAddr).transfer(beneficiary, Token(tokenAddr).balanceOf(address(this))));\r\n    }\r\n\r\n    function withdrawCrypto(address payable beneficiary) public onlyOwner {\r\n        beneficiary.transfer(address(this).balance);\r\n    }\r\n    function tokenBalance() public view returns (uint256){\r\n        return Token(tokenAddr).balanceOf(address(this));\r\n    }\r\n    function ethBalance() public view returns (uint256){\r\n        return address(this).balance;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenTransfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"ExchangeETHforTokenMannual\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenExchanged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPriceEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTokenAddr\",\"type\":\"address\"}],\"name\":\"updateTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDecimal\",\"type\":\"uint256\"}],\"name\":\"updateTokenDecimal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawCrypto\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Buy_INH_Token","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000faef5ec70e18f0c37c70b8336e75ca3016ac656c","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a9bae6ef0872e9ce7a8da80c6979c5d03bfa02f4fbc4d7ddd18ea81d0dfbb83f"}]}