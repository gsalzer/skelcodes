{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\nimport {DataTypes} from './libraries/DataTypes.sol';\\nimport {Errors} from './libraries/Errors.sol';\\n\\n/**\\n * @title Aito Vault Contract\\n * @author Aito\\n *\\n * @notice A contract that holds a staking auction won NFT's associated stkAAVE.\\n */\\ncontract Vault {\\n    using Address for address;\\n\\n    address public immutable STAKING_AUCTION;\\n\\n    constructor(address stakingAuction) {\\n        STAKING_AUCTION = stakingAuction;\\n    }\\n\\n    modifier onlyStakingAuction() {\\n        require(msg.sender == STAKING_AUCTION, Errors.NOT_STAKING_AUCTION);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Executes the given low-level calls on given targets. Sender must be auction.\\n     *\\n     * @param targets The array of target addresses to call.\\n     * @param datas The array of abi encoded function data to call on each target.\\n     * @param callTypes The array of call types to execute, either regular call or delegateCall.\\n     */\\n    function execute(\\n        address[] calldata targets,\\n        bytes[] calldata datas,\\n        DataTypes.CallType[] calldata callTypes // The OpenZeppelin \\\"Address\\\" library handles reverting on failed calls.\\n    ) external onlyStakingAuction {\\n        require(\\n            targets.length == datas.length && datas.length == callTypes.length,\\n            Errors.VAULT_ARRAY_MISMATCH\\n        );\\n\\n        for (uint256 i = 0; i < targets.length; i++) {\\n            if (callTypes[i] == DataTypes.CallType.Call) {\\n                targets[i].functionCall(datas[i]);\\n            } else if (callTypes[i] == DataTypes.CallType.DelegateCall) {\\n                targets[i].functionDelegateCall(datas[i]);\\n            } else {\\n                revert(Errors.INVALID_CALL_TYPE);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/// Library containing data types needed for the NFT controller & vaults\\nlibrary DataTypes {\\n\\n    struct DistributionData {\\n        address recipient;\\n        uint256 bps;\\n    }\\n\\n    struct StakingAuctionFullData {\\n        StakingAuctionData auction;\\n        DistributionData[] distribution;\\n        uint256 auctionId;\\n        address auctioner;\\n        address vault;\\n    }\\n\\n    struct StakingAuctionData {\\n        uint256 currentBid;\\n        address currentBidder;\\n        uint40 startTimestamp;\\n        uint40 endTimestamp;\\n    }\\n\\n    struct StakingAuctionConfiguration {\\n        address vaultLogic;\\n        address treasury;\\n        uint40 minimumAuctionDuration;\\n        uint40 overtimeWindow;\\n        uint16 treasuryFeeBps;\\n        uint16 burnPenaltyBps;\\n    }\\n\\n    struct GenericAuctionFullData {\\n        GenericAuctionData auction;\\n        DistributionData[] distribution;\\n        uint256 auctionId;\\n        address auctioner;\\n    }\\n\\n    struct GenericAuctionData {\\n        uint256 currentBid;\\n        address currency;\\n        address currentBidder;\\n        uint40 startTimestamp;\\n        uint40 endTimestamp;\\n    }\\n\\n    struct GenericAuctionConfiguration {\\n        address treasury;\\n        uint40 minimumAuctionDuration;\\n        uint40 overtimeWindow;\\n        uint16 treasuryFeeBps;\\n    }\\n    \\n    struct RankedAuctionData {\\n        uint256 minPrice;\\n        address recipient;\\n        address currency;\\n        uint40 startTimestamp;\\n        uint40 endTimestamp;\\n    }\\n\\nstruct ReserveAuctionFullData {\\n        ReserveAuctionData auction;\\n        DistributionData[] distribution;\\n        uint256 auctionId;\\n        address auctioner;\\n    }\\n\\n    struct ReserveAuctionData {\\n        uint256 currentBid;\\n        uint256 buyNow;\\n        address currency;\\n        address currentBidder;\\n        uint40 duration;\\n        uint40 firstBidTimestamp;\\n        uint40 endTimestamp;\\n    }\\n\\n    struct OpenEditionFullData {\\n        DistributionData[] distribution;\\n        OpenEditionSaleData saleData;\\n    }\\n\\n    struct OpenEditionSaleData {\\n        uint256 price;\\n        address currency;\\n        address nft;\\n        uint40 startTimestamp;\\n        uint40 endTimestamp;\\n    }\\n\\n    struct OpenEditionConfiguration {\\n        address treasury;\\n        uint40 minimumAuctionDuration;\\n        uint16 treasuryFeeBps;\\n    }\\n\\n    struct OpenEditionBuyWithPermitParams {\\n        uint256 id;\\n        uint256 amount;\\n        uint256 permitAmount;\\n        uint256 deadline;\\n        address onBehalfOf;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct BidWithPermitParams {\\n        uint256 amount;\\n        uint256 deadline;\\n        uint256 nftId;\\n        address onBehalfOf;\\n        address nft;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct SimpleBidWithPermitParams {\\n        uint256 amount;\\n        uint256 deadline;\\n        address onBehalfOf;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    enum CallType {Call, DelegateCall}\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n// Contains error code strings\\n\\nlibrary Errors {\\n  string public constant INVALID_AUCTION_TIMESTAMPS = '1';\\n  string public constant INVALID_BID_TIMESTAMPS = '2';\\n  string public constant INVALID_BID_AMOUNT = '3';\\n  string public constant AUCTION_ONGOING = '4';\\n  string public constant VALID_BIDDER = '5';\\n  string public constant NONEXISTANT_VAULT = '6';\\n  string public constant INVALID_DISTRIBUTION_BPS = '7';\\n  string public constant AUCTION_EXISTS = '8';\\n  string public constant NOT_STAKING_AUCTION = '9';\\n  string public constant INVALID_CALL_TYPE = '10';\\n  string public constant INVALID_AUCTION_DURATION = '11';\\n  string public constant INVALID_BIDDER = '12';\\n  string public constant PAUSED = '13';\\n  string public constant NOT_ADMIN = '14';\\n  string public constant INVALID_INIT_PARAMS = '15';\\n  string public constant INVALID_DISTRIBUTION_COUNT = '16';\\n  string public constant ZERO_RECIPIENT = '17';\\n  string public constant ZERO_CURRENCY = '18';\\n  string public constant RA_NOT_OUTBID = '19';\\n  string public constant RA_OUTBID = '20';\\n  string public constant RA_CLAIMED = '21';\\n  string public constant NO_DISTRIBUTIONS = '22';\\n  string public constant VAULT_ARRAY_MISMATCH = '23';\\n  string public constant CURRENCY_NOT_WHITELSITED = '24';\\n  string public constant NOT_NFT_OWNER = '25';\\n  string public constant ZERO_NFT = '26';\\n  string public constant NOT_COLLECTION_CREATOR = '27';\\n  string public constant INVALID_BUY_NOW = '28';\\n  string public constant INVALID_RESERVE_PRICE = '29';\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingAuction\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"STAKING_AUCTION\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"},{\"internalType\":\"enum DataTypes.CallType[]\",\"name\":\"callTypes\",\"type\":\"uint8[]\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Vault","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c84dee6f63c142c52111c183de74f78f83e20bb1","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}