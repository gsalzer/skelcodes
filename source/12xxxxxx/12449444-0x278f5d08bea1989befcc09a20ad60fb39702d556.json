{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interface/ICoFiXV2DAO.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface ICoFiXV2DAO {\r\n\r\n    function setGovernance(address gov) external;\r\n    function start() external; \r\n\r\n    // function addETHReward() external payable; \r\n\r\n    event FlagSet(address gov, uint256 flag);\r\n    event CoFiBurn(address gov, uint256 amount);\r\n}\r\n// File: contracts/interface/ICoFiXV2Controller.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface ICoFiXV2Controller {\r\n\r\n    event NewK(address token, uint256 K, uint256 sigma, uint256 T, uint256 ethAmount, uint256 erc20Amount, uint256 blockNum);\r\n    event NewGovernance(address _new);\r\n    event NewOracle(address _priceOracle);\r\n    event NewKTable(address _kTable);\r\n    event NewTimespan(uint256 _timeSpan);\r\n    event NewKRefreshInterval(uint256 _interval);\r\n    event NewKLimit(int128 maxK0);\r\n    event NewGamma(int128 _gamma);\r\n    event NewTheta(address token, uint32 theta);\r\n    event NewK(address token, uint32 k);\r\n    event NewCGamma(address token, uint32 gamma);\r\n\r\n    function addCaller(address caller) external;\r\n\r\n    function setCGamma(address token, uint32 gamma) external;\r\n\r\n    function queryOracle(address token, uint8 op, bytes memory data) external payable returns (uint256 k, uint256 ethAmount, uint256 erc20Amount, uint256 blockNum, uint256 theta);\r\n\r\n    function getKInfo(address token) external view returns (uint32 k, uint32 updatedAt, uint32 theta);\r\n\r\n    function getLatestPriceAndAvgVola(address token) external payable returns (uint256, uint256, uint256, uint256);\r\n}\r\n\r\n// File: contracts/interface/ICoFiXV2Factory.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface ICoFiXV2Factory {\r\n    // All pairs: {ETH <-> ERC20 Token}\r\n    event PairCreated(address indexed token, address pair, uint256);\r\n    event NewGovernance(address _new);\r\n    event NewController(address _new);\r\n    event NewFeeReceiver(address _new);\r\n    event NewFeeVaultForLP(address token, address feeVault);\r\n    event NewVaultForLP(address _new);\r\n    event NewVaultForTrader(address _new);\r\n    event NewVaultForCNode(address _new);\r\n    event NewDAO(address _new);\r\n\r\n    /// @dev Create a new token pair for trading\r\n    /// @param  token the address of token to trade\r\n    /// @param  initToken0Amount the initial asset ratio (initToken0Amount:initToken1Amount)\r\n    /// @param  initToken1Amount the initial asset ratio (initToken0Amount:initToken1Amount)\r\n    /// @return pair the address of new token pair\r\n    function createPair(\r\n        address token,\r\n\t    uint256 initToken0Amount,\r\n        uint256 initToken1Amount\r\n        )\r\n        external\r\n        returns (address pair);\r\n\r\n    function getPair(address token) external view returns (address pair);\r\n    function allPairs(uint256) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function getTradeMiningStatus(address token) external view returns (bool status);\r\n    function setTradeMiningStatus(address token, bool status) external;\r\n    function getFeeVaultForLP(address token) external view returns (address feeVault); // for LPs\r\n    function setFeeVaultForLP(address token, address feeVault) external;\r\n\r\n    function setGovernance(address _new) external;\r\n    function setController(address _new) external;\r\n    function setFeeReceiver(address _new) external;\r\n    function setVaultForLP(address _new) external;\r\n    function setVaultForTrader(address _new) external;\r\n    function setVaultForCNode(address _new) external;\r\n    function setDAO(address _new) external;\r\n    function getController() external view returns (address controller);\r\n    function getFeeReceiver() external view returns (address feeReceiver); // For CoFi Holders\r\n    function getVaultForLP() external view returns (address vaultForLP);\r\n    function getVaultForTrader() external view returns (address vaultForTrader);\r\n    function getVaultForCNode() external view returns (address vaultForCNode);\r\n    function getDAO() external view returns (address dao);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/interface/ICoFiToken.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface ICoFiToken is IERC20 {\r\n\r\n    /// @dev An event thats emitted when a new governance account is set\r\n    /// @param  _new The new governance address\r\n    event NewGovernance(address _new);\r\n\r\n    /// @dev An event thats emitted when a new minter account is added\r\n    /// @param  _minter The new minter address added\r\n    event MinterAdded(address _minter);\r\n\r\n    /// @dev An event thats emitted when a minter account is removed\r\n    /// @param  _minter The minter address removed\r\n    event MinterRemoved(address _minter);\r\n\r\n    /// @dev Set governance address of CoFi token. Only governance has the right to execute.\r\n    /// @param  _new The new governance address\r\n    function setGovernance(address _new) external;\r\n\r\n    /// @dev Add a new minter account to CoFi token, who can mint tokens. Only governance has the right to execute.\r\n    /// @param  _minter The new minter address\r\n    function addMinter(address _minter) external;\r\n\r\n    /// @dev Remove a minter account from CoFi token, who can mint tokens. Only governance has the right to execute.\r\n    /// @param  _minter The minter address removed\r\n    function removeMinter(address _minter) external;\r\n\r\n    /// @dev mint is used to distribute CoFi token to users, minters are CoFi mining pools\r\n    /// @param  _to The receiver address\r\n    /// @param  _amount The amount of tokens minted\r\n    function mint(address _to, uint256 _amount) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/Math.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/TransferHelper.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/CoFiXV2DAO.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract CoFiXV2DAO is ICoFiXV2DAO, ReentrancyGuard {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /* ========== STATE ============== */\r\n\r\n    uint8 public flag; \r\n\r\n    uint32  public startedBlock;\r\n    // uint32  public lastCollectingBlock;\r\n    uint32 public lastBlock;\r\n    uint128 public redeemedAmount;\r\n    uint128 public quotaAmount;\r\n\r\n    uint8 constant DAO_FLAG_UNINITIALIZED    = 0;\r\n    uint8 constant DAO_FLAG_INITIALIZED      = 1;\r\n    uint8 constant DAO_FLAG_ACTIVE           = 2;\r\n    uint8 constant DAO_FLAG_NO_STAKING       = 3;\r\n    uint8 constant DAO_FLAG_PAUSED           = 4;\r\n    uint8 constant DAO_FLAG_SHUTDOWN         = 127;\r\n\r\n    /* ========== PARAMETERS ============== */\r\n\r\n    uint256 constant DAO_REPURCHASE_PRICE_DEVIATION = 5;  // price deviation < 5% \r\n    uint256 constant _oracleFee = 0.01 ether;\r\n\r\n\r\n    /* ========== ADDRESSES ============== */\r\n\r\n    address public cofiToken;\r\n\r\n    address public factory;\r\n\r\n    address public governance;\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    constructor(address _cofiToken, address _factory) public {\r\n        cofiToken = _cofiToken;\r\n        factory = _factory;\r\n        governance = msg.sender;\r\n        flag = DAO_FLAG_INITIALIZED;\r\n    }\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyGovernance() \r\n    {\r\n        require(msg.sender == governance, \"CDAO: not governance\");\r\n        _;\r\n    }\r\n\r\n    modifier whenActive() \r\n    {\r\n        require(flag == DAO_FLAG_ACTIVE, \"CDAO: not active\");\r\n        _;\r\n    }\r\n\r\n    /* ========== GOVERNANCE ========== */\r\n\r\n    function setGovernance(address _new) external override onlyGovernance {\r\n        governance = _new;\r\n    }\r\n\r\n    function start() override external onlyGovernance\r\n    {  \r\n        require(flag == DAO_FLAG_INITIALIZED, \"CDAO: not initialized\");\r\n\r\n        startedBlock = uint32(block.number);\r\n        flag = DAO_FLAG_ACTIVE;\r\n        emit FlagSet(address(msg.sender), uint256(DAO_FLAG_ACTIVE));\r\n    }\r\n\r\n    function pause() external onlyGovernance\r\n    {\r\n        flag = DAO_FLAG_PAUSED;\r\n        emit FlagSet(address(msg.sender), uint256(DAO_FLAG_PAUSED));\r\n    }\r\n\r\n    function resume() external onlyGovernance\r\n    {\r\n        flag = DAO_FLAG_ACTIVE;\r\n        emit FlagSet(address(msg.sender), uint256(DAO_FLAG_ACTIVE));\r\n    }\r\n\r\n    function totalETHRewards()\r\n        external view returns (uint256) \r\n    {\r\n       return address(this).balance;\r\n    }\r\n\r\n    function migrateTo(address _newDAO) external onlyGovernance\r\n    {\r\n        require(flag == DAO_FLAG_PAUSED, \"CDAO: not paused\");\r\n        \r\n        if(address(this).balance > 0) {\r\n            TransferHelper.safeTransferETH(_newDAO, address(this).balance);\r\n        }\r\n        // ICoFiXV2DAO(_newDAO).addETHReward{value: address(this).balance}();\r\n\r\n        uint256 _cofiTokenAmount = ICoFiToken(cofiToken).balanceOf(address(this));\r\n        if (_cofiTokenAmount > 0) {\r\n            ICoFiToken(cofiToken).transfer(_newDAO, _cofiTokenAmount);\r\n        }\r\n    }\r\n\r\n    function burnCofi(uint256 amount) external onlyGovernance {\r\n        require(amount > 0, \"CDAO: illegal amount\");\r\n\r\n        uint256 _cofiTokenAmount = ICoFiToken(cofiToken).balanceOf(address(this));\r\n\r\n        require(_cofiTokenAmount >= amount, \"CDAO: insufficient cofi\");\r\n\r\n        ICoFiToken(cofiToken).transfer(address(0x1), amount);\r\n        emit CoFiBurn(address(msg.sender), amount);\r\n    }\r\n\r\n    /* ========== MAIN ========== */\r\n\r\n    // function addETHReward() \r\n    //     override\r\n    //     external\r\n    //     payable\r\n    // { }\r\n\r\n    function redeem(uint256 amount) \r\n        external payable nonReentrant whenActive\r\n    {\r\n        require(address(this).balance > 0, \"CDAO: insufficient balance\");\r\n        require (msg.value == _oracleFee, \"CDAO: !oracleFee\");\r\n\r\n        // check the repurchasing quota\r\n        uint256 quota = quotaOf();\r\n\r\n        uint256 price;\r\n        {\r\n            // check if the price is steady\r\n            (uint256 ethAmount, uint256 tokenAmount, uint256 avg, ) = ICoFiXV2Controller(ICoFiXV2Factory(factory).getController())\r\n                    .getLatestPriceAndAvgVola{value: msg.value}(cofiToken);\r\n            price = tokenAmount.mul(1e18).div(ethAmount);\r\n\r\n            uint256 diff = price > avg ? (price - avg) : (avg - price);\r\n            bool isDeviated = (diff.mul(100) < avg.mul(DAO_REPURCHASE_PRICE_DEVIATION))? false : true;\r\n            require(isDeviated == false, \"CDAO: price deviation\"); // validate\r\n        }\r\n\r\n        // check if there is sufficient quota for repurchase\r\n        require (amount <= quota, \"CDAO: insufficient quota\");\r\n        require (amount.mul(1e18) <= address(this).balance.mul(price), \"CDAO: insufficient balance2\");\r\n\r\n        redeemedAmount = uint128(amount.add(redeemedAmount));\r\n        quotaAmount = uint128(quota.sub(amount));\r\n        lastBlock = uint32(block.number);\r\n\r\n        uint256 amountEthOut = amount.mul(1e18).div(price);\r\n\r\n        // transactions\r\n        ICoFiToken(cofiToken).transferFrom(address(msg.sender), address(this), amount);\r\n        TransferHelper.safeTransferETH(msg.sender, amountEthOut);\r\n    }\r\n\r\n    function _quota() internal view returns (uint256 quota) \r\n    {\r\n        uint256 n = 50;\r\n        uint256 intv = (lastBlock == 0) ? \r\n            (block.number).sub(startedBlock) : (block.number).sub(uint256(lastBlock));\r\n        uint256 _acc = (n * intv > 15_000) ? 15_000 : (n * intv);\r\n\r\n        // check if total amounts overflow\r\n        uint256 total = _acc.mul(1e18).add(quotaAmount);\r\n        if (total > uint256(15_000).mul(1e18)){\r\n            quota = uint256(15_000).mul(1e18);\r\n        } else{\r\n            quota = total;\r\n        }\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    function quotaOf() public view returns (uint256 quota) \r\n    {\r\n        return _quota();\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cofiToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gov\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CoFiBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gov\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"FlagSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnCofi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cofiToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flag\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBlock\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDAO\",\"type\":\"address\"}],\"name\":\"migrateTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quotaAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quotaOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quota\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemedAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startedBlock\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalETHRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CoFiXV2DAO","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"6666","ConstructorArguments":"0000000000000000000000001a23a6bfbadb59fa563008c0fb7cf96dfcf34ea100000000000000000000000039816b841436a57729723d9da127805755d2cb51","EVMVersion":"istanbul","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fbee4fbfe5dfbb70350d4dec302f0421aa4edcbe987c6ca9238023852c7d76f7"}]}