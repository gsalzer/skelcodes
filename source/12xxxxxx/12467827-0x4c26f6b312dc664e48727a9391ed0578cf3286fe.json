{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.4 <0.9.0;\r\n// stable coin based grants in next implementation\r\n// i am thinking of moving all beneficiary logic out of treasury in next implementation\r\ninterface I{function transfer(address to, uint value) external returns(bool);function balanceOf(address) external returns(uint);}\r\ncontract Treasury {\r\n\taddress private _governance;\r\n\tuint8 private _governanceSet;\r\n\tbool private _init;\r\n\r\n\tstruct Beneficiary {bool solid; uint88 amount; uint32 lastClaim; uint16 emission;}\r\n\tmapping (address => Beneficiary) public bens;\r\n\r\n\tfunction init() public {\r\n\t\trequire(_init == false && msg.sender == 0x2D9F853F1a71D0635E64FcC4779269A05BccE2E2);\r\n\t\t_init=true;\r\n\t\t_governance = msg.sender;\r\n\t\tsetBeneficiary(0x2D9F853F1a71D0635E64FcC4779269A05BccE2E2,true,32857142857e12,0,1e4);\r\n\t\tsetBeneficiary(0x174F4EbE08a7193833e985d4ef0Ad6ce50F7cBc4,true,28857142857e12,0,1e4);\r\n\t\tsetBeneficiary(0xFA9675E41a9457E8278B2701C504cf4d132Fe2c2,true,25285714286e12,0,1e4);\r\n\t}\r\n// so we assume that not only beneficiaries but also the governance is malicious\r\n// the function can overwrite some existing beneficiaries parameters\r\n// or we do it differently: a boolean that makes a grant editable/removable/irremovable, so that governance can express trust,\r\n// because if a malicious beneficiary scams governance, governance can ruin that beneficiary' reputation,\r\n// however if malicious governance scams a beneficiary, beneficiary can't do anything\r\n// best solution is yet to be found, design could change\r\n// another way could be is to disallow editing/removing grants at all but give those grants in small parts instead\r\n// so future small parts could be cancelled if required\r\n\tfunction setBeneficiary(address a, bool solid, uint amount, uint lastClaim, uint emission) public {\r\n\t\trequire(msg.sender == _governance && bens[a].solid == false && amount<=4e22 && lastClaim < block.number+1e6 && emission >= 1e2 && emission <=1e4);\r\n\t\tif(lastClaim < block.number) {lastClaim = block.number;}\r\n\t\tif(lastClaim < 12510400) {lastClaim = 12510400;}\r\n\t\tif(lastClaim > 12510400 && lastClaim < 1264e4) {lastClaim = 1264e4;}//so it adds even more convenience\r\n\t\tif (solid == true) {bens[a].solid = true;}\r\n\t\tuint lc = bens[a].lastClaim;\r\n\t\tif (lc == 0) {bens[a].lastClaim = uint32(lastClaim+129600);} // this 3 weeks delay disallows deployer to be malicious, can be removed after the governance will have control over treasury\r\n\t\tif (bens[a].amount == 0 && lc != 0) {bens[a].lastClaim = uint32(lastClaim);}\r\n\t\tbens[a].amount = uint88(amount);\r\n\t\tbens[a].emission = uint16(emission);\r\n\t}\r\n\r\n\tfunction getBeneficiaryRewards() external{\r\n\t\tuint lastClaim = bens[msg.sender].lastClaim; uint rate = 1e11; uint quarter = block.number/1e7;\r\n\t\tif (quarter>1) { for (uint i=1;i<quarter;i++) {rate=rate*3/4;} }\r\n\t\tuint toClaim = (block.number - lastClaim)*bens[msg.sender].emission*rate;\r\n\t\tbens[msg.sender].lastClaim = uint32(block.number);\r\n\t\tbens[msg.sender].amount -= uint88(toClaim);\r\n\t\tI(0x1565616E3994353482Eb032f7583469F5e0bcBEC).transfer(msg.sender, toClaim);\r\n\t}\r\n\r\n// these checks leave less room for deployer to be malicious\r\n\tfunction getRewards(address a,uint amount) external{ //for posters, providers and oracles\r\n\t\trequire(msg.sender == 0x109533F9e10d4AEEf6d74F1e2D59a9ed11266f27 || msg.sender == 0xEcCD8639eA31FAfe9e9646Fbf31310Ec489ad1C8 || msg.sender == 0xde97e5a2fAe859ac24F70D1f251B82D6A9B77296);\r\n\t\tif (msg.sender == 0xEcCD8639eA31FAfe9e9646Fbf31310Ec489ad1C8) {// if job market(posters)\r\n\t\t\t\tuint withd =  999e24 - I(0x1565616E3994353482Eb032f7583469F5e0bcBEC).balanceOf(address(this));// balanceOf(treasury)\r\n\t\t\t\tuint allowed = (block.number - 1264e4)*168e15 - withd;//40% of all emission max\r\n\t\t\t\trequire(amount <= allowed);\r\n\t\t}\r\n\t\tif (msg.sender == 0xde97e5a2fAe859ac24F70D1f251B82D6A9B77296) {// if oracle registry\r\n\t\t\t\tuint withd =  999e24 - I(0x1565616E3994353482Eb032f7583469F5e0bcBEC).balanceOf(address(this));// balanceOf(treasury)\r\n\t\t\t\tuint allowed = (block.number - 1264e4)*42e15 - withd;//10% of all emission max, maybe actually should be less, depends on stuff\r\n\t\t\t\trequire(amount <= allowed);\r\n\t\t}\r\n\t\tI(0x1565616E3994353482Eb032f7583469F5e0bcBEC).transfer(a, amount);\r\n\t}\r\n\r\n\tfunction setGovernance(address a) public {require(_governanceSet < 3 && msg.sender == _governance);_governanceSet += 1;_governance = a;}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"solid\",\"type\":\"bool\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"},{\"internalType\":\"uint32\",\"name\":\"lastClaim\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"emission\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeneficiaryRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"solid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emission\",\"type\":\"uint256\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Treasury","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d8f7cf37418da87b41440efc451f6717ba17001305d88f7ee028fbc796b2c87f"}]}