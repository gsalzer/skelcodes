{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/E/work_data/blockchain/Hoil/NewBuffV1/contracts/Official_BuffDoge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./utils/Context.sol\\\";\\nimport \\\"./utils/IUniswapV2Factory.sol\\\";\\nimport \\\"./utils/IUniswapV2Pair.sol\\\";\\nimport \\\"./utils/IUniswapV2Router02.sol\\\";\\nimport \\\"./utils/IERC20.sol\\\";\\nimport \\\"./utils/Ownable.sol\\\";\\nimport \\\"./utils/SafeMath.sol\\\";\\nimport \\\"./utils/TimeLock.sol\\\";\\n\\n/**\\n * @notice ERC20 token with cost basis tracking and restricted loss-taking\\n */\\ncontract Official_BuffDoge is Context, IERC20, Ownable, TimeLock {\\n    using SafeMath for uint256;\\n\\n    address private constant UNISWAP_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n    address private constant WETH           = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\\n\\n    mapping (address => uint256) private _rOwned;\\n    mapping (address => uint256) private _tOwned;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    mapping(address => uint256) private _basisOf;\\n    mapping(address => uint256) public cooldownOf;\\n    mapping (address => bool) private _isAllowedTransfer;\\n    mapping (address => bool) private _isExcluded;\\n    address[] private _excluded;\\n\\n    string  private _NAME;\\n    string  private _SYMBOL;\\n    uint256 private _DECIMALS;\\n   \\n    uint256 private _MAX = ~uint256(0);\\n    uint256 private _DECIMALFACTOR;\\n    uint256 private _GRANULARITY = 100;\\n    \\n    uint256 private _tTotal;\\n    uint256 private _rTotal;\\n    \\n    uint256 private _tFeeTotal;\\n    uint256 private _tBurnTotal;\\n    uint256 private _tMarketingFeeTotal;\\n\\n    uint256 public    _TAX_FEE; // 3%\\n    uint256 public   _BURN_FEE; // 3%\\n    uint256 public _MARKET_FEE; // 3%\\n\\n    // Track original fees to bypass fees for charity account\\n    uint256 private _maxTeamMintAmount = 1e8 ether;\\n    uint256 private _initialBasis;\\n    uint256 private mintedSupply;\\n\\n\\n    address private _shoppingCart;\\n    address private _rewardWallet;\\n    address private _presale;\\n    address private _pair;\\n\\n    bool private _paused;\\n    bool private _isEnableSwapTokenforEth;\\n\\n    struct Minting {\\n        address recipient;\\n        uint amount;\\n    }\\n\\n    struct StandardFees {\\n        uint taxFee;\\n        uint rewardFee;\\n        uint marketFee;\\n        uint taxPenaltyFee;\\n        uint rewardPenaltyFee;\\n        uint marketPenaltyFee;\\n    }\\n    StandardFees private _standardFees;\\n\\n    mapping(address => address) private _referralOwner;\\n    mapping(address => uint256) private _referralOwnerTotalFee;\\n\\n    constructor (string memory _name, string memory _symbol, uint256 _decimals, uint256 _supply) {\\n\\t\\t_NAME = _name;\\n\\t\\t_SYMBOL = _symbol;\\n\\t\\t_DECIMALS = _decimals;\\n\\t\\t_DECIMALFACTOR = 10 ** uint256(_DECIMALS);\\n\\t\\t_tTotal =_supply * _DECIMALFACTOR;\\n\\t\\t_rTotal = (_MAX - (_MAX % _tTotal));\\n\\n        // setup uniswap pair and store address\\n        _pair = IUniswapV2Factory(IUniswapV2Router02(UNISWAP_ROUTER).factory())\\n            .createPair(WETH, address(this));\\n        _rOwned[address(this)] = _rTotal;\\n        _excludeAccount(_msgSender());\\n        _excludeAccount(address(this));\\n        _excludeAccount(_pair);\\n        _excludeAccount(UNISWAP_ROUTER);\\n\\n        // prepare to add liquidity\\n        _approve(address(this), UNISWAP_ROUTER, _rTotal);\\n        _approve(_pair, UNISWAP_ROUTER, _rTotal);\\n        _approve(address(this), owner(), _rTotal);\\n\\n        // prepare to remove liquidity\\n        IERC20(_pair).approve(UNISWAP_ROUTER, type(uint256).max);\\n\\n        _paused = true;\\n        _isEnableSwapTokenforEth = false;\\n    }\\n\\n    modifier isNotPaused() {\\n        require(_paused == false, \\\"ERR: paused already\\\");\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function name() public view returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _SYMBOL;\\n    }\\n\\n    function decimals() public view returns (uint256) {\\n        return _DECIMALS;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        if (_isExcluded[account]) return _tOwned[account];\\n        return tokenFromReflection(_rOwned[account]);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"TOKEN20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"TOKEN20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    function isExcluded(address account) public view returns (bool) {\\n        return _isExcluded[account];\\n    }\\n    \\n    function totalFees() public view returns (uint256) {\\n        return _tFeeTotal;\\n    }\\n    \\n    function totalBurn() public view returns (uint256) {\\n        return _tBurnTotal;\\n    }\\n    \\n    function totalMarketingFees() public view returns (uint256) {\\n        return _tMarketingFeeTotal;\\n    }\\n\\n    function checkReferralReward(address referralOwner) public view returns (uint256) {\\n        return _referralOwnerTotalFee[referralOwner];\\n    }\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\\n        require(tAmount <= _tTotal, \\\"Amount must be less than supply\\\");\\n        if (!deductTransferFee) {\\n            (uint256 rAmount,,,,,,) = _getValues(tAmount);\\n            return rAmount;\\n        } else {\\n            (,uint256 rTransferAmount,,,,,) = _getValues(tAmount);\\n            return rTransferAmount;\\n        }\\n    }\\n\\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\\n        require(rAmount <= _rTotal, \\\"Amount must be less than total reflections\\\");\\n        uint256 currentRate =  _getRate();\\n        return rAmount.div(currentRate);\\n    }\\n\\n    function excludeAccount(address account) external onlyOwner {\\n       _excludeAccount(account);\\n    }\\n\\n    function _excludeAccount(address account) private {\\n        require(!_isExcluded[account], \\\"Account is already excluded\\\");\\n        if(_rOwned[account] > 0) {\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\n        }\\n        _isExcluded[account] = true;\\n        _excluded.push(account);\\n        _isAllowedTransfer[account] = true;\\n        excludeFromLock(account);\\n    }\\n\\n    function includeAccount(address account) external onlyOwner {\\n        require(_isExcluded[account], \\\"Account is already excluded\\\");\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_excluded[i] == account) {\\n                _excluded[i] = _excluded[_excluded.length - 1];\\n                _tOwned[account] = 0;\\n                _isExcluded[account] = false;\\n                _excluded.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"TOKEN20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"TOKEN20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function basisOf(address account) public view returns (uint256) {\\n        uint256 basis = _basisOf[account];\\n\\n        if (basis == 0 && balanceOf(account) > 0) {\\n            basis = _initialBasis;\\n        }\\n        return basis;\\n    }\\n\\n    function setBusinessWallet(address businessAddress) external onlyOwner isNotPaused returns (bool) {\\n        require(businessAddress != address(0), \\\"ERR: zero address\\\");\\n        _shoppingCart = businessAddress;\\n        uint256 cartAmount = 5e7 ether;\\n        excludeFromLock(businessAddress);\\n        _removeFee();\\n        _transferFromExcluded(address(this), businessAddress, cartAmount);\\n        _restoreAllFee();\\n        _approve(businessAddress, owner(), _MAX);\\n        _excludeAccount(businessAddress);\\n        _isAllowedTransfer[businessAddress] = true;\\n        return true;\\n    }\\n\\n    function setRewardAddress(address rewardAddress) external onlyOwner isNotPaused returns (bool) {\\n        require(rewardAddress != address(0), \\\"ERR: zero address\\\");\\n        _rewardWallet = rewardAddress;\\n        uint256 burnAmount = 35 * 1e7 ether;\\n        excludeFromLock(rewardAddress);\\n        _removeFee();\\n        _transferFromExcluded(address(this), rewardAddress, burnAmount);\\n        _restoreAllFee();\\n        _approve(rewardAddress, owner(), _MAX);\\n        _excludeAccount(rewardAddress);\\n        _isAllowedTransfer[rewardAddress] = true;\\n        return true;\\n    }\\n\\n    function setPreSaleAddress(address presaleAddress) external onlyOwner isNotPaused returns (bool) {\\n        require(presaleAddress != address(0), \\\"ERR: zero address\\\");\\n        _presale = presaleAddress;\\n        uint256 presaleAmount = 1e8 ether;\\n        excludeFromLock(presaleAddress);\\n        _removeFee();\\n        _transferFromExcluded(address(this), presaleAddress, presaleAmount);\\n        _restoreAllFee();\\n        _excludeAccount(presaleAddress);\\n        _isAllowedTransfer[presaleAddress] = true;\\n        return true;\\n    }\\n\\n    function setReferralOwner(address referralUser, address referralOwner) external returns (bool) {\\n        require(_referralOwner[referralUser] == address(0), 'ERR: address registered already');\\n        require(referralUser != address(0), 'ERR: zero address');\\n        require(referralOwner != address(0), 'ERR: zero address');\\n        _referralOwner[referralUser] = referralOwner;\\n        return true;\\n    }\\n\\n    function setStandardFee(StandardFees memory _standardFee) public onlyOwner isNotPaused returns (bool) {\\n        require (_standardFee.taxFee < 100 && _standardFee.rewardFee < 100 && _standardFee.marketFee < 100, 'ERR: Fee is so high');\\n        require (_standardFee.taxPenaltyFee < 100 && _standardFee.rewardPenaltyFee < 100 && _standardFee.marketPenaltyFee < 100, 'ERR: Fee is so high');\\n        _standardFees = _standardFee;\\n        return true;\\n    }\\n   \\n    function mintDev(Minting[] calldata mintings) external onlyOwner returns (bool) {\\n        require(mintings.length > 0, \\\"ERR: zero address array\\\");\\n        _removeFee();       \\n        for(uint i = 0; i < mintings.length; i++) {\\n            Minting memory m = mintings[i];\\n            uint amount = m.amount;\\n            address recipient = m.recipient;\\n\\n            mintedSupply += amount;\\n            require(mintedSupply <= _maxTeamMintAmount, \\\"ERR: exceed max team mint amount\\\");\\n            _transferFromExcluded(address(this), recipient, amount);\\n            lockAddress(recipient, uint64(180 days));\\n        }        \\n        _restoreAllFee();\\n        return true;\\n    }    \\n\\n    function timeLockFromPresale(address _lockAddress) public returns (bool) {\\n        require(_presale != address(0) && _msgSender() == _presale, 'ERR: not presale');\\n        lockAddress(_lockAddress, uint64(30 days));\\n        return true;\\n    }\\n\\n    function timeLockReleaseForPresale(address _lockAddress) public returns (bool) {\\n        require(_presale != address(0) && _msgSender() == _presale, 'ERR: not presale');\\n        if(!isUnLocked(_lockAddress)) {\\n            lockedRelease(_lockAddress);\\n        }\\n        return true;\\n    }\\n    \\n    function pausedEnable() external onlyOwner returns (bool) {\\n        require(_paused == false, \\\"ERR: already pause enabled\\\");\\n        _paused = true;\\n        return true;\\n    }\\n\\n    function pausedNotEnable() external onlyOwner returns (bool) {\\n        require(_paused == true, \\\"ERR: already pause disabled\\\");\\n        _paused = false;\\n        return true;\\n    }\\n\\n    function swapTokenForEthEnable() external onlyOwner isNotPaused returns (bool) {\\n        require(_isEnableSwapTokenforEth == false, \\\"ERR: already enabled\\\");\\n        _isEnableSwapTokenforEth = true;\\n        return true;\\n    }\\n\\n    function swapTokenForEthDisable() external onlyOwner isNotPaused returns (bool) {\\n        require(_isEnableSwapTokenforEth == true, \\\"ERR: already disabled\\\");\\n        _isEnableSwapTokenforEth = false;\\n        return true;\\n    }\\n\\n    function checkPairAddress()\\n        external\\n        view\\n        returns (address)\\n    {\\n        return _pair;\\n    }\\n\\n    function checkReferralOwner(address referralUser) public view returns (address) {\\n        require(referralUser != address(0), 'ERR: zero address');\\n        return _referralOwner[referralUser];\\n    }\\n\\n    function checkedTimeLock(address user) public view returns (bool) {\\n        return !isUnLocked(user);\\n    }\\n\\n    function checkAllowedTransfer(address user) public view returns (bool) {\\n        return _isAllowedTransfer[user];\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        // ignore minting and burning\\n        if (from == address(0) || to == address(0)) return;\\n        // ignore add/remove liquidity\\n        if (from == address(this) || to == address(this)) return;\\n        if (from == owner() || to == owner()) return;\\n        if (from == UNISWAP_ROUTER || to == UNISWAP_ROUTER) return;\\n\\n        require(\\n            msg.sender == UNISWAP_ROUTER ||\\n            msg.sender == _pair || msg.sender == owner() ||\\n            _isAllowedTransfer[from] || _isAllowedTransfer[to],\\n            \\\"ERR: sender must be uniswap or shoppingCart\\\"\\n        );\\n        address[] memory path = new address[](2);\\n        if (from == _pair && !_isExcluded[to]) {\\n            require(isUnLocked(to), \\\"ERR: address is locked(buy)\\\");\\n\\n            require(\\n                cooldownOf[to] < block.timestamp /* revert message not returned by Uniswap */\\n            );\\n            cooldownOf[to] = block.timestamp + (30 minutes);\\n\\n            path[0] = WETH;\\n            path[1] = address(this);\\n            uint256[] memory amounts =\\n                IUniswapV2Router02(UNISWAP_ROUTER).getAmountsIn(amount, path);\\n\\n            uint256 balance = balanceOf(to);\\n            uint256 fromBasis = ((1 ether) * amounts[0]) / amount;\\n            _basisOf[to] =\\n                (fromBasis * amount + basisOf(to) * balance) /\\n                (amount + balance);\\n\\n        } else if (to == _pair && !_isExcluded[from]) {\\n            require(isUnLocked(from), \\\"ERR: address is locked(sales)\\\");            \\n            // blacklist Vitalik Buterin\\n            require(\\n                from != 0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B /* revert message not returned by Uniswap */\\n            );\\n            require(\\n                cooldownOf[from] < block.timestamp /* revert message not returned by Uniswap */\\n            );\\n            cooldownOf[from] = block.timestamp + (30 minutes);            \\n        }\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        _beforeTokenTransfer(sender, recipient, amount);\\n        _transferWithFee(sender, recipient, amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _transferWithFee(\\n        address sender, address recipient, uint256 amount\\n    ) private returns (bool) {\\n        uint liquidityBalance = balanceOf(_pair);\\n\\n        if(sender == _pair && !_isAllowedTransfer[recipient]) {\\n            require(amount <= liquidityBalance.mul(100).div(10000), \\\"ERR: Exceed the 1% of current liquidity balance\\\");\\n            _restoreAllFee();\\n        }\\n        else if(recipient == _pair && !_isAllowedTransfer[sender]) {\\n            require(_isEnableSwapTokenforEth, 'ERR: disabled swap');\\n            require(amount <= liquidityBalance.mul(100).div(10000), \\\"ERR: Exceed the 1% of current liquidity balance\\\");\\n            address[] memory path = new address[](2);\\n            path[0] = address(this);\\n            path[1] = WETH;\\n            uint[] memory amounts = IUniswapV2Router02(UNISWAP_ROUTER).getAmountsOut(\\n                amount,\\n                path\\n            );\\n            if (basisOf(sender) <= (1 ether) * amounts[1] / amount) {\\n               _restoreAllFee();\\n            }\\n            else {\\n               _setPenaltyFee();\\n            }\\n        }\\n        else {\\n            _removeFee();\\n        }\\n\\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\\n            _transferFromExcluded(sender, recipient, amount);\\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\\n            if(recipient == _pair) {\\n                _transferToExcludedForSale(sender, recipient, amount);\\n            }\\n            else {\\n                _transferToExcluded(sender, recipient, amount);\\n            }\\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\\n            _transferStandard(sender, recipient, amount);\\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\\n            _transferBothExcluded(sender, recipient, amount);\\n        } else {\\n            _transferStandard(sender, recipient, amount);\\n        }\\n        _restoreAllFee();\\n        return true;\\n    }\\n\\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\\n        uint256 currentRate =  _getRate();\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tBurn, uint256 tMarket) = _getValues(tAmount);\\n        uint256 rBurn =  tBurn.mul(currentRate);\\n        uint256 rMarket = tMarket.mul(currentRate);     \\n        _standardTransferContent(sender, recipient, rAmount, rTransferAmount);\\n        if (tMarket > 0) {\\n            _sendToBusinees(tMarket, sender, recipient);\\n        }\\n        if (tBurn > 0) {\\n            _sendToBurn(tBurn, sender);\\n        }\\n        _reflectFee(rFee, rBurn, rMarket, tFee, tBurn, tMarket);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n    \\n    function _standardTransferContent(address sender, address recipient, uint256 rAmount, uint256 rTransferAmount) private {\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\n    }\\n    \\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\\n        uint256 currentRate =  _getRate();\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tBurn, uint256 tMarket) = _getValues(tAmount);\\n        uint256 rBurn =  tBurn.mul(currentRate);\\n        uint256 rMarket = tMarket.mul(currentRate);\\n        _excludedFromTransferContent(sender, recipient, tTransferAmount, rAmount, rTransferAmount);        \\n        if (tMarket > 0) {\\n            _sendToBusinees(tMarket, sender, recipient);\\n        }\\n        if (tBurn > 0) {\\n            _sendToBurn(tBurn, sender);\\n        }\\n        _reflectFee(rFee, rBurn, rMarket, tFee, tBurn, tMarket);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n    \\n    function _excludedFromTransferContent(address sender, address recipient, uint256 tTransferAmount, uint256 rAmount, uint256 rTransferAmount) private {\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);    \\n    }\\n    \\n    function _transferToExcludedForSale(address sender, address recipient, uint256 tAmount) private {\\n        uint256 currentRate =  _getRate();\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tBurn, uint256 tMarket) = _getValuesForSale(tAmount);\\n        uint256 rBurn =  tBurn.mul(currentRate);\\n        uint256 rMarket = tMarket.mul(currentRate);\\n        _excludedFromTransferContentForSale(sender, recipient, tAmount, rAmount, rTransferAmount);        \\n        if (tMarket > 0) {\\n            _sendToBusinees(tMarket, sender, recipient);\\n        }\\n        if (tBurn > 0) {\\n            _sendToBurn(tBurn, sender);\\n        }\\n        _reflectFee(rFee, rBurn, rMarket, tFee, tBurn, tMarket);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n    \\n    function _excludedFromTransferContentForSale(address sender, address recipient, uint256 tAmount, uint256 rAmount, uint256 rTransferAmount) private {\\n        _rOwned[sender] = _rOwned[sender].sub(rTransferAmount);\\n        _tOwned[recipient] = _tOwned[recipient].add(tAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rAmount);    \\n    }    \\n\\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\\n        uint256 currentRate =  _getRate();\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tBurn, uint256 tMarket) = _getValues(tAmount);\\n        uint256 rBurn =  tBurn.mul(currentRate);\\n        uint256 rMarket = tMarket.mul(currentRate);\\n        _excludedToTransferContent(sender, recipient, tAmount, rAmount, rTransferAmount);\\n        if (tMarket > 0) {\\n            _sendToBusinees(tMarket, sender, recipient);\\n        }\\n        if (tBurn > 0) {\\n            _sendToBurn(tBurn, sender);\\n        }\\n        _reflectFee(rFee, rBurn, rMarket, tFee, tBurn, tMarket);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n    \\n    function _excludedToTransferContent(address sender, address recipient, uint256 tAmount, uint256 rAmount, uint256 rTransferAmount) private {\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);  \\n    }\\n\\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\\n        uint256 currentRate =  _getRate();\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tBurn, uint256 tMarket) = _getValues(tAmount);\\n        uint256 rBurn =  tBurn.mul(currentRate);\\n        uint256 rMarket = tMarket.mul(currentRate);    \\n        _bothTransferContent(sender, recipient, tAmount, rAmount, tTransferAmount, rTransferAmount);  \\n        if (tMarket > 0) {\\n            _sendToBusinees(tMarket, sender, recipient);\\n        }\\n        if (tBurn > 0) {\\n            _sendToBurn(tBurn, sender);\\n        }\\n        _reflectFee(rFee, rBurn, rMarket, tFee, tBurn, tMarket);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n    \\n    function _bothTransferContent(address sender, address recipient, uint256 tAmount, uint256 rAmount, uint256 tTransferAmount, uint256 rTransferAmount) private {\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);  \\n    }\\n\\n    function _reflectFee(uint256 rFee, uint256 rBurn, uint256 rMarket, uint256 tFee, uint256 tBurn, uint256 tMarket) private {\\n        _rTotal = _rTotal.sub(rFee).sub(rBurn).sub(rMarket);\\n        _tFeeTotal = _tFeeTotal.add(tFee);\\n        _tBurnTotal = _tBurnTotal.add(tBurn);\\n        _tMarketingFeeTotal = _tMarketingFeeTotal.add(tMarket);\\n    }\\n\\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\\n        (uint256 tFee, uint256 tBurn, uint256 tMarket) = _getTBasics(tAmount, _TAX_FEE, _BURN_FEE, _MARKET_FEE);\\n        uint256 tTransferAmount = getTTransferAmount(tAmount, tFee, tBurn, tMarket);\\n        uint256 currentRate =  _getRate();\\n        (uint256 rAmount, uint256 rFee) = _getRBasics(tAmount, tFee, currentRate);\\n        uint256 rTransferAmount = _getRTransferAmount(rAmount, rFee, tBurn, tMarket, currentRate);\\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tBurn, tMarket);\\n    }\\n\\n    function _getValuesForSale(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\\n        (uint256 tFee, uint256 tBurn, uint256 tMarket) = _getTBasics(tAmount, _TAX_FEE, _BURN_FEE, _MARKET_FEE);\\n        uint256 tTransferAmountForSale = getTTransferAmountForSale(tAmount, tFee, tBurn, tMarket);\\n        uint256 currentRate =  _getRate();\\n        (uint256 rAmount, uint256 rFee) = _getRBasics(tAmount, tFee, currentRate);\\n        uint256 rTransferAmountForSale = _getRTransferAmountForSale(rAmount, rFee, tBurn, tMarket, currentRate);\\n        return (rAmount, rTransferAmountForSale, rFee, tTransferAmountForSale, tFee, tBurn, tMarket);\\n    }\\n    \\n    function _getTBasics(uint256 tAmount, uint256 taxFee, uint256 burnFee, uint256 marketFee) private view returns (uint256, uint256, uint256) {\\n        uint256 tFee = ((tAmount.mul(taxFee)).div(_GRANULARITY)).div(100);\\n        uint256 tBurn = ((tAmount.mul(burnFee)).div(_GRANULARITY)).div(100);\\n        uint256 tMarket = ((tAmount.mul(marketFee)).div(_GRANULARITY)).div(100);\\n        return (tFee, tBurn, tMarket);\\n    }\\n    \\n    function getTTransferAmount(uint256 tAmount, uint256 tFee, uint256 tBurn, uint256 tMarket) private pure returns (uint256) {\\n        return tAmount.sub(tFee).sub(tBurn).sub(tMarket);\\n    }\\n    function getTTransferAmountForSale(uint256 tAmount, uint256 tFee, uint256 tBurn, uint256 tMarket) private pure returns (uint256) {\\n        return tAmount.add(tFee).add(tBurn).add(tMarket);\\n    }\\n    \\n    function _getRBasics(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256) {\\n        uint256 rAmount = tAmount.mul(currentRate);\\n        uint256 rFee = tFee.mul(currentRate);\\n        return (rAmount, rFee);\\n    }\\n    \\n    function _getRTransferAmount(uint256 rAmount, uint256 rFee, uint256 tBurn, uint256 tMarket, uint256 currentRate) private pure returns (uint256) {\\n        uint256 rBurn = tBurn.mul(currentRate);\\n        uint256 rMarket = tMarket.mul(currentRate);\\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rBurn).sub(rMarket);\\n        return rTransferAmount;\\n    }\\n\\n    function _getRTransferAmountForSale(uint256 rAmount, uint256 rFee, uint256 tBurn, uint256 tMarket, uint256 currentRate) private pure returns (uint256) {\\n        uint256 rBurn = tBurn.mul(currentRate);\\n        uint256 rMarket = tMarket.mul(currentRate);\\n        uint256 rTransferAmountForSale = rAmount.add(rFee).add(rBurn).add(rMarket);\\n        return rTransferAmountForSale;\\n    }\\n\\n    function _getRate() private view returns(uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply.div(tSupply);\\n    }\\n\\n    function _getCurrentSupply() private view returns(uint256, uint256) {\\n        uint256 rSupply = _rTotal;\\n        uint256 tSupply = _tTotal;      \\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\\n        }\\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\n        return (rSupply, tSupply);\\n    }\\n\\n    function _sendToBusinees(uint256 tMarket, address sender, address recipient) private {\\n        uint256 currentRate = _getRate();\\n        uint256 rMarket = tMarket.mul(currentRate);\\n        if(sender == _pair && _referralOwner[recipient] != address(0)) {\\n            _sendToReferralOwner(tMarket, rMarket, _referralOwner[recipient]);\\n            emit Transfer(sender,  _referralOwner[recipient], tMarket);\\n        }\\n        else {\\n            _rOwned[_shoppingCart] = _rOwned[_shoppingCart].add(rMarket);\\n            _tOwned[_shoppingCart] = _tOwned[_shoppingCart].add(tMarket);\\n            emit Transfer(sender, _shoppingCart, tMarket);\\n        }\\n    }\\n\\n    function _sendToBurn(uint256 tBurn, address sender) private {\\n        uint256 currentRate = _getRate();\\n        uint256 rBurn = tBurn.mul(currentRate);\\n        _rOwned[_rewardWallet] = _rOwned[_rewardWallet].add(rBurn);\\n        _tOwned[_rewardWallet] = _tOwned[_rewardWallet].add(rBurn);\\n        emit Transfer(sender, _rewardWallet, tBurn);\\n    }\\n\\n    function _sendToReferralOwner(uint256 tMarket, uint256 rMarket, address owner) private {\\n        if(_isExcluded[owner]) {\\n            _rOwned[owner] = _rOwned[owner].add(rMarket);\\n            _tOwned[owner] = _tOwned[owner].add(tMarket);\\n        }\\n        else {\\n            _rOwned[owner] = _rOwned[owner].add(rMarket);\\n        }\\n        _referralOwnerTotalFee[owner] += tMarket;\\n    }\\n\\n    function _removeFee() private {\\n        if(_TAX_FEE == 0 && _BURN_FEE == 0 && _MARKET_FEE == 0) return;\\n        _TAX_FEE = 0;\\n        _BURN_FEE = 0;\\n        _MARKET_FEE = 0;\\n    }\\n\\n    function _restoreAllFee() private {\\n        _TAX_FEE = _standardFees.taxFee.mul(100);\\n        _BURN_FEE = _standardFees.rewardFee.mul(100);\\n        _MARKET_FEE = _standardFees.marketFee.mul(100);\\n    }\\n\\n    function _setPenaltyFee() private {\\n        _TAX_FEE = _standardFees.taxPenaltyFee.mul(100);\\n        _BURN_FEE = _standardFees.rewardPenaltyFee.mul(100);\\n        _MARKET_FEE = _standardFees.marketPenaltyFee.mul(100);\\n    }\\n}\"\r\n    },\r\n    \"/E/work_data/blockchain/Hoil/NewBuffV1/contracts/PreSaleBuff.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./utils/Ownable.sol\\\";\\r\\nimport \\\"./utils/SafeMath.sol\\\";\\r\\nimport \\\"./Official_BuffDoge.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice ERC20 token PreSale contract\\r\\n */\\r\\ncontract PreSaleBuff is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    Official_BuffDoge private _buffToken;\\r\\n\\r\\n    // Address where funds are collected\\r\\n    address payable public _wallet;\\r\\n\\r\\n    // How many token units a buyer gets per wei\\r\\n    uint256 public _rate;\\r\\n\\r\\n    // Amount of wei raised\\r\\n    uint256 public _weiRaised;\\r\\n\\r\\n    // Amount of token released\\r\\n    uint256 public _tokenReleased;\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    mapping ( address => uint256) private _tokenPurchased;\\r\\n\\r\\n    /**\\r\\n    * Event for token purchase logging\\r\\n    * @param purchaser who paid for the tokens\\r\\n    * @param beneficiary who got the tokens\\r\\n    * @param value weis paid for purchase\\r\\n    * @param amount amount of tokens purchased\\r\\n    */\\r\\n    event TokenPurchase(\\r\\n        address indexed purchaser,\\r\\n        address indexed beneficiary,\\r\\n        uint256 value,\\r\\n        uint256 amount\\r\\n    );\\r\\n    constructor (address payable buffToken, uint rate, address payable wallet) {\\r\\n        require(rate > 0);\\r\\n        require(wallet != address(0));\\r\\n        require(buffToken != address(0));\\r\\n        _buffToken = Official_BuffDoge(buffToken);\\r\\n        _rate = rate;\\r\\n        _wallet = wallet;\\r\\n        _paused = true;\\r\\n    }\\r\\n\\r\\n    modifier isNotPaused() {\\r\\n        require(_paused == false, \\\"ERR: paused already\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function pausedEnable() external onlyOwner returns (bool) {\\r\\n        require(_paused == false, \\\"ERR: already pause enabled\\\");\\r\\n        _paused = true;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function pausedNotEnable() external onlyOwner returns (bool) {\\r\\n        require(_paused == true, \\\"ERR: already pause disabled\\\");\\r\\n        _paused = false;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        buyTokens(msg.sender);\\r\\n    }\\r\\n\\r\\n    function buyTokens(address _beneficiary) public payable isNotPaused {\\r\\n        uint256 weiAmount = msg.value;\\r\\n        _preValidatePurchase(_beneficiary, weiAmount);\\r\\n\\r\\n        // calculate token amount to be created\\r\\n        uint256 tokens = _getTokenAmount(weiAmount);\\r\\n\\r\\n        // update state\\r\\n        _weiRaised = _weiRaised.add(weiAmount);\\r\\n\\r\\n        _processPurchase(_beneficiary, tokens);\\r\\n        emit TokenPurchase(\\r\\n            msg.sender,\\r\\n            _beneficiary,\\r\\n            weiAmount,\\r\\n            tokens\\r\\n        );\\r\\n\\r\\n        _updatePurchasingState(_beneficiary);\\r\\n\\r\\n        _forwardFunds();\\r\\n    }\\r\\n\\r\\n    function _preValidatePurchase(\\r\\n        address _beneficiary,\\r\\n        uint256 _weiAmount\\r\\n    )\\r\\n        internal\\r\\n    {\\r\\n        require(_beneficiary != address(0));\\r\\n        require(_weiAmount != 0);\\r\\n        require(_weiAmount <= 1 ether, 'ERR: Exceed presale plan ETH');\\r\\n        require(_weiAmount >= 0.1 ether, 'ERR: So less presale plan ETH');\\r\\n        uint256 tokenBalance = _buffToken.balanceOf(address(this));\\r\\n        uint256 tokens = _getTokenAmount(_weiAmount);\\r\\n        require(tokens <= tokenBalance, 'ERR: Exceed presale plan');\\r\\n        require(_tokenPurchased[_beneficiary].add(tokens) <= 1e7 ether, 'ERR: Exceed presale plan Buff');\\r\\n        _buffToken.timeLockReleaseForPresale(_beneficiary);\\r\\n    }\\r\\n\\r\\n    function _deliverTokens(\\r\\n        address _beneficiary,\\r\\n        uint256 _tokenAmount\\r\\n    )\\r\\n        internal\\r\\n    {\\r\\n        _buffToken.transfer(_beneficiary, _tokenAmount);\\r\\n        _tokenReleased = _tokenReleased.add(_tokenAmount);\\r\\n        _tokenPurchased[_beneficiary] = _tokenPurchased[_beneficiary].add(_tokenAmount);\\r\\n    }\\r\\n\\r\\n    function _processPurchase(\\r\\n        address _beneficiary,\\r\\n        uint256 _tokenAmount\\r\\n    )\\r\\n        internal\\r\\n    {\\r\\n        _deliverTokens(_beneficiary, _tokenAmount);\\r\\n    }\\r\\n\\r\\n    function _updatePurchasingState(\\r\\n        address _beneficiary\\r\\n    )\\r\\n        internal\\r\\n    {\\r\\n        _buffToken.timeLockFromPresale(_beneficiary);\\r\\n    }\\r\\n\\r\\n    function _getTokenAmount(uint256 _weiAmount)\\r\\n        internal view returns (uint256)\\r\\n    {\\r\\n        return _weiAmount.mul(_rate);\\r\\n    }\\r\\n\\r\\n    function _forwardFunds() internal {\\r\\n        _wallet.transfer(msg.value);\\r\\n    }\\r\\n\\r\\n    function setRate(uint rate) public onlyOwner isNotPaused {\\r\\n        require(rate > 0, 'ERR: zero rate');\\r\\n        _rate = rate;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/E/work_data/blockchain/Hoil/NewBuffV1/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"/E/work_data/blockchain/Hoil/NewBuffV1/contracts/utils/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"/E/work_data/blockchain/Hoil/NewBuffV1/contracts/utils/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.4;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"/E/work_data/blockchain/Hoil/NewBuffV1/contracts/utils/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.4;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"/E/work_data/blockchain/Hoil/NewBuffV1/contracts/utils/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.4;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"/E/work_data/blockchain/Hoil/NewBuffV1/contracts/utils/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.4;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"/E/work_data/blockchain/Hoil/NewBuffV1/contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"/E/work_data/blockchain/Hoil/NewBuffV1/contracts/utils/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"\r\n    },\r\n    \"/E/work_data/blockchain/Hoil/NewBuffV1/contracts/utils/TimeLock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\nabstract contract TimeLock is Ownable {\\r\\n    struct LockedAddress {\\r\\n        uint64 lockedPeriod;\\r\\n        uint64 endTime;\\r\\n    }\\r\\n    \\r\\n    mapping(address => LockedAddress) private _lockedList;\\r\\n    mapping (address => bool) private _isExlcludeFromLock;\\r\\n    constructor () { }\\r\\n    function lockAddress(address _lockAddress, uint64 lockTime) internal virtual {\\r\\n        require(_lockAddress != address(0), \\\"ERR: zero lock address\\\");\\r\\n        require(lockTime > 0, \\\"ERR: zero lock period\\\");\\r\\n        if (!_isExlcludeFromLock[_lockAddress]) {\\r\\n            _lockedList[_lockAddress].lockedPeriod = lockTime;\\r\\n            _lockedList[_lockAddress].endTime = uint64(block.timestamp) + lockTime;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function lockedRelease(address _lockAddress) internal virtual {\\r\\n        require(_lockAddress != address(0), \\\"ERR: zero lock address\\\");\\r\\n        if (_isExlcludeFromLock[_lockAddress]) return;\\r\\n\\r\\n        delete _lockedList[_lockAddress];\\r\\n    }\\r\\n\\r\\n    function checkRemainTime(address _lockAddress) internal view virtual returns (uint) {\\r\\n        require(_lockAddress != address(0), \\\"ERR: zero lock address\\\");\\r\\n        if (_isExlcludeFromLock[_lockAddress]) return 0;\\r\\n        if (_lockedList[_lockAddress].endTime == 0) return 0;\\r\\n        if(_lockedList[_lockAddress].endTime > uint64(block.timestamp)) {\\r\\n            return _lockedList[_lockAddress].endTime - uint64(block.timestamp);\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function isUnLocked(address _lockAddress) internal view virtual returns (bool) {\\r\\n        require(_lockAddress != address(0), \\\"ERR: zero lock address\\\");\\r\\n        if (_isExlcludeFromLock[_lockAddress]) return true;\\r\\n        return _lockedList[_lockAddress].endTime < uint64(block.timestamp);\\r\\n    }\\r\\n\\r\\n    function excludeFromLock(address _lockAddress) internal virtual {\\r\\n        require(_lockAddress != address(0), \\\"ERR: zero lock address\\\");\\r\\n        if (_isExlcludeFromLock[_lockAddress]) return;\\r\\n        _isExlcludeFromLock[_lockAddress] = true;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"buffToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_weiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausedEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausedNotEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PreSaleBuff","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000091e4d6e309e3e8a0cdf44acfc9e1afd18aefba9800000000000000000000000000000000000000000000000000000000009896800000000000000000000000005569bdf4e02cec3fe459796e3d0e741616029fa4","EVMVersion":"byzantium","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}