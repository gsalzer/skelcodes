{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/YearnV2SharePrice.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nimport \\\"./interfaces/IYVaultV2.sol\\\";\\nimport \\\"./interfaces/ITrigger.sol\\\";\\n\\n/**\\n * @notice Defines a trigger that is toggled if the price per share for the V2 yVault decreases between consecutive\\n * checks. Under normal operation, this value should only increase\\n */\\ncontract YearnV2SharePrice is ITrigger {\\n  uint256 internal constant WAD = 10**18;\\n\\n  /// @notice Vault this trigger is for\\n  IYVaultV2 public immutable market;\\n\\n  /// @notice Last read pricePerShare\\n  uint256 public lastPricePerShare;\\n\\n  /// @dev In Yearn V2 vaults, the pricePerShare decreases immediately after a harvest, and typically ramps up over the\\n  /// next six hours. Therefore we cannot simply check that the pricePerShare increases. Instead, we consider the vault\\n  /// triggered if the pricePerShare drops by more than 50% from it's previous value. This is conservative, but\\n  /// previous Yearn bugs resulted in pricePerShare drops of 0.5% â€“ 10%, and were only temporary drops with users able\\n  /// to be made whole. Therefore this trigger requires a large 50% drop to minimize false positives. The tolerance\\n  /// is defined such that we trigger if: currentPricePerShare < lastPricePerShare * tolerance / 1e18. This means\\n  /// if you want to trigger after a 20% drop, you should set the tolerance to 1e18 - 0.2e18 = 0.8e18 = 8e17\\n  uint256 public constant tolerance = 5e17; // 50%, represented on a scale where 1e18 = 100%\\n\\n  /**\\n   * @param _market Is the address of the Yearn V2 vault this trigger should protect\\n   * @dev For definitions of other constructor parameters, see ITrigger.sol\\n   */\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    string memory _description,\\n    uint256[] memory _platformIds,\\n    address _recipient,\\n    address _market\\n  ) ITrigger(_name, _symbol, _description, _platformIds, _recipient) {\\n    // Set vault\\n    market = IYVaultV2(_market);\\n\\n    // Save current share price (immutables can't be read at construction, so we don't use `market` directly)\\n    lastPricePerShare = IYVaultV2(_market).pricePerShare();\\n  }\\n\\n  /**\\n   * @dev Checks the yVault pricePerShare\\n   */\\n  function checkTriggerCondition() internal override returns (bool) {\\n    // Read this blocks share price\\n    uint256 _currentPricePerShare = market.pricePerShare();\\n\\n    // Check if current share price is below current share price, accounting for tolerance\\n    bool _status = _currentPricePerShare < ((lastPricePerShare * tolerance) / 1e18);\\n\\n    // Save the new share price\\n    lastPricePerShare = _currentPricePerShare;\\n\\n    // Return status\\n    return _status;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IYVaultV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\ninterface IYVaultV2 {\\n  function pricePerShare() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITrigger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\n/**\\n * @notice Abstract contract for creating or interacting with a Trigger contract\\n * @dev All trigger contracts created must inerit from this contract and conform to this interface\\n */\\nabstract contract ITrigger {\\n  /// @notice Trigger name, analgous to an ERC-20 token's name\\n  string public name;\\n\\n  /// @notice Trigger symbol, analgous to an ERC-20 token's symbol\\n  string public symbol;\\n\\n  /// @notice Trigger description\\n  string public description;\\n\\n  /// @notice Array of IDs of platforms covered by this trigger\\n  uint256[] public platformIds;\\n\\n  /// @notice Returns address of recipient who receives subsidies for creating a protection market using this trigger\\n  address public immutable recipient;\\n\\n  /// @notice Returns true if trigger condition has been met\\n  bool public isTriggered;\\n\\n  /// @notice Emitted when the trigger is activated\\n  event TriggerActivated();\\n\\n  /**\\n   * @notice Returns array of IDs, where each ID corresponds to a platform covered by this trigger\\n   * @dev See documentation for mapping of ID numbers to platforms\\n   */\\n  function getPlatformIds() external view returns (uint256[] memory) {\\n    return platformIds;\\n  }\\n\\n  /**\\n   * @dev Executes trigger-specific logic to check if market has been triggered\\n   * @return True if trigger condition occured, false otherwise\\n   */\\n  function checkTriggerCondition() internal virtual returns (bool);\\n\\n  /**\\n   * @notice Checks trigger condition, sets isTriggered flag to true if condition is met, and returns the trigger status\\n   * @return True if trigger condition occured, false otherwise\\n   */\\n  function checkAndToggleTrigger() external returns (bool) {\\n    // Return true if trigger already toggled\\n    if (isTriggered) return true;\\n\\n    // Return false if market has not been triggered\\n    if (!checkTriggerCondition()) return false;\\n\\n    // Otherwise, market has been triggered\\n    emit TriggerActivated();\\n    isTriggered = true;\\n    return isTriggered;\\n  }\\n\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    string memory _description,\\n    uint256[] memory _platformIds,\\n    address _recipient\\n  ) {\\n    name = _name;\\n    description = _description;\\n    symbol = _symbol;\\n    platformIds = _platformIds;\\n    recipient = _recipient;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"_platformIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TriggerActivated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"checkAndToggleTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlatformIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTriggered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"contract IYVaultV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"platformIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"YearnV2SharePrice","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000f07fa9f3d21fa32fad1b02f27ea4d8d2e64931a00000000000000000000000005f18c75abdae578b483e5f43f12a39cf75b973a90000000000000000000000000000000000000000000000000000000000000027596561726e2055534443205632205661756c74205368617265205072696365205472696767657200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001079555344432d56322d53502d5452494700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003b5472696767657273207768656e2074686520596561726e2055534443205632207661756c7420736861726520707269636520646563726561736573000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}