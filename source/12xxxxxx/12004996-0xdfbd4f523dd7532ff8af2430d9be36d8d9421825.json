{"status":"1","message":"OK","result":[{"SourceCode":"# @version ^0.2.0\r\n\r\ninterface UniswapV2Pair:\r\n    def sync(): nonpayable\r\n\r\ninterface Stakable:\r\n    def deposit(_account: address, _amount: uint256) -> bool: nonpayable\r\n    def stake(_reward: uint256) -> bool: nonpayable\r\n    def withdraw(_account: address) -> bool: nonpayable\r\n\r\nevent CommitOwnership:\r\n    owner: address\r\n\r\nevent ApplyOwnership:\r\n    owner: address\r\n\r\n\r\nTOKEN: constant(address) = 0x674C6Ad92Fd080e4004b2312b45f796a192D27a0\r\nMAX_PAIRS_LENGTH: constant(uint256) = 10 ** 3\r\n\r\n\r\nuniswapPairs: public(address[MAX_PAIRS_LENGTH])\r\nindexByPair: public(HashMap[address, uint256])\r\nlastPairIndex: public(uint256)\r\n\r\nauthor: public(address)\r\nowner: public(address)\r\nfutureOwner: public(address)\r\n\r\n\r\n@external\r\ndef __init__():\r\n    self.author = msg.sender\r\n    self.owner = msg.sender\r\n\r\n\r\n@external\r\ndef deposit(_account: address, _amount: uint256) -> bool:\r\n    assert msg.sender == self.owner or msg.sender == self.author, \"owner only\"\r\n    return Stakable(TOKEN).deposit(_account, _amount)\r\n\r\n\r\n@external\r\ndef stake(_reward: uint256) -> bool:\r\n    assert msg.sender == self.owner or msg.sender == self.author, \"owner only\"\r\n    assert Stakable(TOKEN).stake(_reward)\r\n\r\n    _lastPairIndex: uint256 = self.lastPairIndex\r\n    for i in range(1, MAX_PAIRS_LENGTH):\r\n        if i > _lastPairIndex:\r\n            break\r\n\r\n        UniswapV2Pair(self.uniswapPairs[i]).sync()\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef withdraw(_account: address) -> bool:\r\n    assert msg.sender == self.owner or msg.sender == self.author, \"owner only\"\r\n    return Stakable(TOKEN).withdraw(_account)\r\n\r\n\r\n@external\r\ndef addUniswapPair(_pair: address):\r\n    assert msg.sender == self.owner or msg.sender == self.author, \"owner only\"\r\n    assert _pair != ZERO_ADDRESS\r\n    pairIndex: uint256 = self.indexByPair[_pair]\r\n    assert pairIndex == 0, \"pair is exist\"\r\n\r\n    pairIndex = self.lastPairIndex + 1\r\n    self.uniswapPairs[pairIndex] = _pair\r\n    self.indexByPair[_pair] = pairIndex\r\n    self.lastPairIndex = pairIndex\r\n\r\n\r\n@external\r\ndef removeUniswapPair(_pair: address):\r\n    assert msg.sender == self.owner or msg.sender == self.author, \"owner only\"\r\n    pairIndex: uint256 = self.indexByPair[_pair]\r\n    assert pairIndex > 0, \"pair is not exist\"\r\n\r\n    recentPairIndex: uint256 = self.lastPairIndex\r\n    lastPair: address = self.uniswapPairs[recentPairIndex]\r\n\r\n    self.uniswapPairs[pairIndex] = lastPair\r\n    self.indexByPair[lastPair] = pairIndex\r\n    self.indexByPair[_pair] = 0\r\n    self.lastPairIndex = recentPairIndex - 1\r\n\r\n\r\n@external\r\ndef transferOwnership(_futureOwner: address):\r\n    assert msg.sender == self.owner or msg.sender == self.author, \"owner only\"\r\n    self.futureOwner = _futureOwner\r\n    log CommitOwnership(_futureOwner)\r\n\r\n\r\n@external\r\ndef applyOwnership():\r\n    assert msg.sender == self.owner or msg.sender == self.author, \"owner only\"\r\n    _owner: address = self.futureOwner\r\n    assert _owner != ZERO_ADDRESS, \"owner not set\"\r\n    self.owner = _owner\r\n    log ApplyOwnership(_owner)","ABI":"[{\"name\":\"CommitOwnership\",\"inputs\":[{\"type\":\"address\",\"name\":\"owner\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ApplyOwnership\",\"inputs\":[{\"type\":\"address\",\"name\":\"owner\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"deposit\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_account\"},{\"type\":\"uint256\",\"name\":\"_amount\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":3132},{\"name\":\"stake\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_reward\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":3610746},{\"name\":\"withdraw\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_account\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":3177},{\"name\":\"addUniswapPair\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pair\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":109540},{\"name\":\"removeUniswapPair\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_pair\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":130509},{\"name\":\"transferOwnership\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_futureOwner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":38591},{\"name\":\"applyOwnership\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":39447},{\"name\":\"uniswapPairs\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1380},{\"name\":\"indexByPair\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1516},{\"name\":\"lastPairIndex\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1331},{\"name\":\"author\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1361},{\"name\":\"owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1391},{\"name\":\"futureOwner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1421}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.8","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}