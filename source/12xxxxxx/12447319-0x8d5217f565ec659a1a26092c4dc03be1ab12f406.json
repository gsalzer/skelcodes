{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n/* Interface to allow Deafbeef owners to change token parameters all at once.\r\n   \r\n   Owners can also give editing access to up to 3 other users. \r\n   Signature can authenticate them on the deafbeef.com DAPP, to allow these\r\n   editors to perform off-chain previews of parameter changes without gas cost.\r\n\r\n   If editors have 'allowCommit' privilege, they can also commit those previews\r\n   permanently with setParams().\r\n\r\n*/\r\n\r\npragma solidity >=0.6.0 <0.8.2;\r\n\r\nabstract contract  extDeafbeef721  {\r\n  function numSeries() public pure virtual returns (uint256) ;\r\n  function mint(uint256 sid, address to) public virtual returns (uint256 _tokenId);\r\n  function setPrice(uint256 sid, uint256 p) public virtual;\r\n  function setTokenParam(uint256 tokenID, uint256 i, uint32 v) public virtual;\r\n  function ownerOf(uint256 tokenId) external virtual view returns (address owner);\r\n}\r\n\r\ncontract Changer {\r\n  extDeafbeef721 public deafbeef;\r\n  address admin_address;\r\n\r\n\r\n  event ParamsChanged(uint256 tokenID, uint32 p0,uint32 p1,uint32 p2,uint32 p3,uint32 p4,uint32 p5,uint32 p6);\r\n\r\n  //indexes which address/tokenID pairs have access to change params\r\n\r\n  struct EditStruct {\r\n    address[3] editors;\r\n    bool[3] allowCommit; //can editors also commit? or only preview\r\n    bool editingDisabled;\r\n  }\r\n  \r\n  //each tokenID can have up to 3 editor addresses\r\n  mapping(uint256 => EditStruct) editorAccess;\r\n\r\n  modifier requireOwner(uint256 tokenID) {\r\n    require(msg.sender == deafbeef.ownerOf(tokenID),\"Not owner of token\");\r\n    _;\r\n  }\r\n  modifier requireEditor(uint256 tokenID) {\r\n    if (editorAccess[tokenID].editingDisabled && msg.sender != deafbeef.ownerOf(tokenID)) {\r\n      revert(\"Editing, except by owner, is disabled\");\r\n    }\r\n    \r\n    require(msg.sender == deafbeef.ownerOf(tokenID) ||\r\n\t    msg.sender == editorAccess[tokenID].editors[0] ||\r\n\t    msg.sender == editorAccess[tokenID].editors[1] ||\r\n\t    msg.sender == editorAccess[tokenID].editors[2]\r\n\t    ,\"Not owner of token,nor token editor\");\r\n    _;\r\n  }\r\n\r\n  //only with commit access\r\n  modifier requireCommiter(uint256 tokenID) {\r\n    if (editorAccess[tokenID].editingDisabled && msg.sender != deafbeef.ownerOf(tokenID)) {\r\n      revert(\"Editing, except by owner, is disabled\");\r\n    }\r\n    \r\n    require(msg.sender == deafbeef.ownerOf(tokenID) ||\r\n\t    (msg.sender == editorAccess[tokenID].editors[0] && editorAccess[tokenID].allowCommit[0]) ||\r\n\t    (msg.sender == editorAccess[tokenID].editors[1] && editorAccess[tokenID].allowCommit[1]) ||\r\n\t    (msg.sender == editorAccess[tokenID].editors[2] && editorAccess[tokenID].allowCommit[2])\r\n\t    ,\"Not owner of token,nor token editor\");\r\n    _;\r\n  }\r\n  \r\n  modifier requireAdmin() {\r\n    require(admin_address == msg.sender,\"Requires admin privileges\");\r\n    _;\r\n  }\r\n  \r\n  constructor(address _contract_address) {\r\n    deafbeef = extDeafbeef721(_contract_address);\r\n    admin_address = msg.sender;\r\n  }\r\n\r\n  //Change the contract address this applies to. Probably never needed\r\n  function setDeafbeef(address _contract_address)  public requireAdmin virtual {\r\n    deafbeef = extDeafbeef721(_contract_address);    \r\n  }\r\n  \r\n  //only token owner can assign roles\r\n  function setEditRole(uint256 tokenID, uint256 i, address a, bool allowCommit) public requireOwner(tokenID) virtual {\r\n    editorAccess[tokenID].editors[i] = a;\r\n    editorAccess[tokenID].allowCommit[i] = allowCommit;    \r\n  }\r\n  \r\n  function getEditors(uint256 tokenID) public view returns(address editor0, address editor1, address editor2, bool allowCommit0, bool allowCommit1, bool allowCommit2, bool editingDisabled)  {\r\n    editingDisabled = editorAccess[tokenID].editingDisabled;\r\n    editor0 = editorAccess[tokenID].editors[0];\r\n    editor1 = editorAccess[tokenID].editors[1];\r\n    editor2 = editorAccess[tokenID].editors[2];\r\n\r\n    allowCommit0 = editorAccess[tokenID].allowCommit[0];\r\n    allowCommit1 = editorAccess[tokenID].allowCommit[1];\r\n    allowCommit2 = editorAccess[tokenID].allowCommit[2];    \r\n  }\r\n\r\n  // Master switch allowing owner to temporarily disable editing, without deleting the authentication list\r\n  function toggleEditing(uint256 tokenID, bool allowEditing) public requireOwner(tokenID) virtual {\r\n    editorAccess[tokenID].editingDisabled = !allowEditing;\r\n  }\r\n  \r\n  //sets many parameters at once. Must be an editor with allowCommit access\r\n  /*\r\n  function setParams(uint256 tokenID, uint[] memory i, uint32[] memory v) public requireCommiter(tokenID) virtual {\r\n    require(v.length == i.length);\r\n    for (uint j=0;j<v.length;j++) {\r\n      deafbeef.setTokenParam(tokenID,i[j],v[j]);\r\n    }\r\n  }\r\n  */\r\n  \r\n  function setParams(uint256 tokenID, uint32[] memory v) public requireCommiter(tokenID) virtual {\r\n    require(v.length==7,\"Must have all parameters in order from 0-6\");\r\n    for (uint j=0;j<v.length;j++) {\r\n      deafbeef.setTokenParam(tokenID,j,v[j]);\r\n    }\r\n    emit ParamsChanged(tokenID,v[0],v[1],v[2],v[3],v[4],v[5],v[6]);\r\n  }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"p0\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"p1\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"p2\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"p3\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"p4\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"p5\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"p6\",\"type\":\"uint32\"}],\"name\":\"ParamsChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"deafbeef\",\"outputs\":[{\"internalType\":\"contract extDeafbeef721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getEditors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"editor0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"editor1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"editor2\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowCommit0\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowCommit1\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowCommit2\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"editingDisabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract_address\",\"type\":\"address\"}],\"name\":\"setDeafbeef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowCommit\",\"type\":\"bool\"}],\"name\":\"setEditRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint32[]\",\"name\":\"v\",\"type\":\"uint32[]\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowEditing\",\"type\":\"bool\"}],\"name\":\"toggleEditing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Changer","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d754937672300ae6708a51229112de4017810934","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://84e2bc8d3e01e7ae5704cc0d17cbaeaac8e84c285347ff36fb2926262e3ffcc5"}]}