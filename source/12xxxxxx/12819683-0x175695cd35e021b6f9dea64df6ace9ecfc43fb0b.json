{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.8.0;\r\n\r\nlibrary SafeMath {\r\n  function add(uint a, uint b) internal pure returns (uint c) {\r\n    c = a + b;\r\n    require(c >= a);\r\n  }\r\n  function sub(uint a, uint b) internal pure returns (uint c) {\r\n    require(b <= a);\r\n    c = a - b;\r\n  }\r\n  function mul(uint a, uint b) internal pure returns (uint c) {\r\n    c = a * b;\r\n    require(a == 0 || c / a == b);\r\n  }\r\n  function div(uint a, uint b) internal pure returns (uint c) {\r\n    require(b > 0);\r\n    c = a / b;\r\n  }\r\n}\r\n\r\nabstract contract ERC20Interface {\r\n  function totalSupply() virtual public view returns (uint);\r\n  function balanceOf(address tokenOwner) virtual public view returns (uint balance);\r\n  function allowance(address tokenOwner, address spender) virtual public view returns (uint remaining);\r\n  function transfer(address to, uint tokens) virtual public returns (bool success);\r\n  function approve(address spender, uint tokens) virtual public returns (bool success);\r\n  function transferFrom(address from, address to, uint tokens) virtual public returns (bool success);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\nabstract contract ApproveAndCallFallBack {\r\n  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) virtual public;\r\n}\r\n\r\ncontract Owned {\r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n  constructor() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    newOwner = _newOwner;\r\n  }\r\n  function acceptOwnership() public {\r\n    require(msg.sender == newOwner);\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n    newOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract PastryChef is ERC20Interface, Owned{\r\n  using SafeMath for uint;\r\n\r\n  constructor() {\r\n    symbol = \"PANNA\";\r\n    name = \"Pannacotta\";\r\n    decimals = 18;\r\n    _totalSupply =  25 * 10**5 * 10**uint(decimals);\r\n    balances[owner] = _totalSupply;\r\n    activity[owner] = true;\r\n    emit Transfer(address(0), owner, _totalSupply);\r\n\r\n\r\n    ethToToken = 10**5;\r\n    saleCutOff = 2 * 10**7 * 10**uint(decimals);\r\n    softCapVal = 10**8 * 10**uint(decimals);\r\n\r\n    airdropTail = 10**uint(decimals) / 10**3;\r\n    airdropBase = 10**2 * 10**uint(decimals);\r\n    airdropCool = 50;\r\n\r\n    rewardTail = 1 * 10**uint(decimals);\r\n    rewardBase = 10**3 * 10**uint(decimals);\r\n    rewardPool = 256;\r\n    rewardMemo = 1 * 10**uint(decimals);\r\n  }\r\n\r\n\r\n  mapping(address => uint) public lastDrop;\r\n  mapping(address => bool) public activity;\r\n  mapping(uint => address) public prizeLog;\r\n\r\n  uint public ethToToken;\r\n  uint public saleCutOff;\r\n  uint public softCapVal;\r\n\r\n  uint public airdropTail;\r\n  uint public airdropBase;\r\n  uint public airdropCool;\r\n\r\n  uint public rewardTail;\r\n  uint public rewardBase;\r\n  uint public rewardPool;\r\n  uint public rewardMemo;\r\n\r\n  uint public pointer;\r\n  bool public wrapped;\r\n\r\n\r\n\r\n\r\n  function mint(address _addr, uint _amt) internal {\r\n    balances[_addr] = balances[_addr].add(_amt);\r\n    _totalSupply = _totalSupply.add(_amt);\r\n    emit Transfer(address(0), _addr, _amt);\r\n  }\r\n\r\n  function rewardRand(address _addr) internal view returns(address) {\r\n    uint _rand = uint256(keccak256(abi.encodePacked(block.timestamp, _addr, _totalSupply)));\r\n    uint _rewardnumber;\r\n    if(wrapped == false) {\r\n      _rewardnumber = _rand % pointer;\r\n    }\r\n    else {\r\n      _rewardnumber = _rand % rewardPool;\r\n    }\r\n    return(prizeLog[_rewardnumber]);\r\n  }\r\n\r\n  function rewardlistHandler(address _addr) internal {\r\n    if(pointer >= rewardPool) {\r\n      pointer = 0;\r\n      if(wrapped == false) {\r\n        wrapped = true;\r\n      }\r\n    }\r\n    prizeLog[pointer] = _addr;\r\n    pointer = pointer + 1;\r\n  }\r\n\r\n  function calcAirdrop() public view returns(uint){\r\n    if (_totalSupply >= softCapVal) {\r\n      return(airdropTail);\r\n    }\r\n    else {\r\n      uint _lesstkns = airdropBase * _totalSupply / softCapVal;\r\n      uint _tkns = airdropTail + airdropBase - _lesstkns;\r\n      return(_tkns);\r\n    }\r\n  }\r\n\r\n  function calcReward() public view returns(uint){\r\n    if (_totalSupply >= softCapVal) {\r\n      return(rewardTail);\r\n    }\r\n    else {\r\n      uint _lesstkns = rewardBase * _totalSupply / softCapVal;\r\n      uint _tkns = rewardTail +  rewardBase - _lesstkns;\r\n      return(_tkns);\r\n    }\r\n  }\r\n\r\n  function getAirdrop(address _addr) public {\r\n    require(_addr != msg.sender && activity[_addr] == false && _addr.balance != 0);\r\n    require(lastDrop[msg.sender] + airdropCool <= block.number);\r\n\r\n    uint _tkns = calcAirdrop();\r\n    lastDrop[msg.sender] = block.number;\r\n\r\n    if(activity[msg.sender] == false) {\r\n      activity[msg.sender] = true;\r\n    }\r\n\r\n    activity[_addr] = true;\r\n\r\n    mint(_addr, _tkns);\r\n    mint(msg.sender, _tkns);\r\n  }\r\n\r\n  function tokenSale() public payable {\r\n    require(_totalSupply < saleCutOff);\r\n    uint _eth = msg.value;\r\n    uint _tkns = _eth * ethToToken;\r\n    if(_totalSupply + _tkns > saleCutOff) {\r\n      revert();\r\n    }\r\n    if(activity[msg.sender] == false) {\r\n      activity[msg.sender] = true;\r\n    }\r\n    mint(msg.sender, _tkns);\r\n  }\r\n\r\n  function adminWithdrawal(ERC20Interface token, uint256 amount) public onlyOwner() {\r\n    token.transfer(msg.sender, amount);\r\n  }\r\n\r\n  function clearETH() public onlyOwner() {\r\n    address payable _owner = payable(msg.sender);\r\n    _owner.transfer(address(this).balance);\r\n  }\r\n\r\n\r\n  string public symbol;\r\n  string public name;\r\n  uint8  public decimals;\r\n  uint   _totalSupply;\r\n\r\n  mapping(address => uint) balances;\r\n  mapping(address => mapping(address => uint)) allowed;\r\n\r\n\r\n  function totalSupply() override public view returns (uint) {\r\n    return _totalSupply.sub(balances[address(0)]);\r\n  }\r\n\r\n  function balanceOf(address tokenOwner) override public view returns (uint balance) {\r\n      return balances[tokenOwner];\r\n  }\r\n\r\n  function transfer(address to, uint tokens) override public returns (bool success) {\r\n    balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n\r\n    if(activity[to] == false  && to.balance > 0) {\r\n      activity[to] = true;\r\n      if(tokens >= rewardMemo) {\r\n        rewardlistHandler(msg.sender);\r\n      }\r\n    }\r\n\r\n    uint _tkns = calcReward();\r\n    address _dropaddr = rewardRand(msg.sender);\r\n    mint(_dropaddr, _tkns);\r\n\r\n    emit Transfer(msg.sender, to, tokens);\r\n    return true;\r\n  }\r\n\r\n  function approve(address spender, uint tokens) override public returns (bool success) {\r\n    allowed[msg.sender][spender] = tokens;\r\n    emit Approval(msg.sender, spender, tokens);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint tokens) override public returns (bool success) {\r\n    balances[from] = balances[from].sub(tokens);\r\n    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n    emit Transfer(from, to, tokens);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address tokenOwner, address spender) override public view returns (uint remaining) {\r\n    return allowed[tokenOwner][spender];\r\n  }\r\n\r\n  function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\r\n    allowed[msg.sender][spender] = tokens;\r\n    emit Approval(msg.sender, spender, tokens);\r\n    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n    return true;\r\n  }\r\n\r\n\r\n  fallback () external payable {\r\n    revert();\r\n  }\r\n\r\n  receive() external payable {\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20Interface\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropCool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropTail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcAirdrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pointer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prizeLog\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardMemo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleCutOff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"softCapVal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PastryChef","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2f5e2bd2923c1aacf0ba17835466ef4f0438348e5ba882eba52604f35fe02bac"}]}