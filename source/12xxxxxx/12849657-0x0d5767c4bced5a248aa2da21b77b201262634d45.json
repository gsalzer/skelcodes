{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\ncontract HamsterTigerHype {\r\n\r\n    // структура пользователя, куда заносится информация о депозите пользователя, времени его инвестов и проверка на участие в программе\r\n    struct User {\r\n        uint256 deposit;\r\n        uint256 time;\r\n        uint256 timeDeposit;\r\n        uint256 round;\r\n        uint idx;\r\n    }\r\n\r\n    //Данный параметр хранит информацию о структурах всех пользователей, которые участвуют в проекте\r\n    mapping(address => User) users;\r\n    //Массив адресов инвесторов, у которых депозит больше минимального (minValueInvest - настройка)\r\n    address payable[] investors = new address payable[](5);\r\n    //Адрес последнего инвестораф\r\n    address payable lastInvestor;\r\n    //Рекламный адрес\r\n    address payable advertising;\r\n    //Баланс контракта\r\n    uint256 totalBalance;\r\n    //Время последней отправки процента на рекламный адрес\r\n    uint256 advertisingLast;\r\n    //Время последнего инвеста\r\n    uint256 lastInvest;\r\n    //Общая сумма необходиммая на вывод\r\n    uint256 withdrawSum;\r\n    //Время которое должно пройти для получения выплаты\r\n    uint256 withdrawTime = 1 minutes;\r\n    //Время которое должно пройти для получения выплаты на рекламный счёт\r\n    uint256 advertisingTime = 1 minutes;\r\n    //Время игры тигров\r\n    uint256 tigerGameTime = 2 minutes;\r\n    // Минимальная сумма для участия в режиме Тигров\r\n    uint256 minValueInvest = 0.05 ether;\r\n    // Раунд\r\n    uint256 round = 1;\r\n    //Тип игры Хомяки/Тигры\r\n    enum GameType {Hamster, Tiger}\r\n    GameType game = GameType.Hamster;\r\n    // Переменная для индексов инвесторов\r\n    uint index = 0;\r\n    // Подсчёт инвесторов\r\n    uint8 investedCount = 0;\r\n    // Событие старта игры Хомяков\r\n    event StartHamsterGame();\r\n    // Событие старта игры Тигров\r\n    event StartTigerGame();\r\n\r\n    constructor() {\r\n        advertising = payable(msg.sender);\r\n        advertisingLast = block.timestamp;\r\n        lastInvest = block.timestamp;\r\n    }\r\n\r\n    //Вывод средств или инвестирвоание\r\n    receive() external payable {\r\n        withdrawDividends();\r\n        if (msg.value > 0) {\r\n            invest();\r\n        } else {\r\n            withdraw();\r\n        }\r\n    }\r\n\r\n    //функция вывода средств(вызывается при отправке 0 eth)\r\n    function withdraw() internal {\r\n        User storage user = users[msg.sender];\r\n        if (user.round != round) {\r\n            user.round = round;\r\n            user.deposit = 0;\r\n            user.timeDeposit = 0;\r\n            user.time = 0;\r\n        }\r\n        uint256 payout = user.deposit / 5;\r\n        uint256 period = block.timestamp - user.time;\r\n        // при работе режима тигров функция не позволяет вывести средства\r\n        require(game == GameType.Hamster, \"Only invest\");\r\n        // если все условия соблюдены, то пользователю выплачивается сумма его ежедневных выплат\r\n        require(period > withdrawTime, \"Very early\");\r\n        require(payout > 0, \"Deposit is Zero\");\r\n        if (payable(msg.sender).send(payout)) {\r\n            user.time = block.timestamp;\r\n        }\r\n        if (withdrawSum > address(this).balance) {\r\n            game = GameType.Tiger;\r\n            emit StartTigerGame();\r\n            lastInvest = block.timestamp;\r\n        }\r\n    }\r\n\r\n    //функция инвест срабатывает при поступлении средств на контракт\r\n    function invest() internal {\r\n        uint balance = address(this).balance;\r\n        investmentOperations();\r\n        if (game == GameType.Hamster) {\r\n            if (withdrawSum > balance) {\r\n                //если больше 5 участников с депозитом больше (настройки-minValueInvest), то включается режим тигров\r\n                if (investors.length >= 5) {\r\n                    game = GameType.Tiger;\r\n                    emit StartTigerGame();\r\n                }\r\n            }\r\n        } else {\r\n            // если сумма баланса больше суммы которую нужно выплатить в 2 раза включается режим хомяков\r\n            if ((withdrawSum * 2) < balance) {\r\n                game = GameType.Hamster;\r\n                emit StartHamsterGame();\r\n            } else {\r\n                if (msg.value >= minValueInvest && block.timestamp - lastInvest > tigerGameTime) {\r\n                    multiplier();\r\n                    emit StartHamsterGame();\r\n                    game = GameType.Hamster;\r\n                }\r\n            }\r\n        }\r\n        if(msg.value >= minValueInvest){\r\n            lastInvest = block.timestamp;\r\n        }\r\n    }\r\n\r\n    //внутренняя логика функции инвест\r\n    function investmentOperations() internal {\r\n        User storage user = users[msg.sender];\r\n        if (user.round != round) {\r\n            user.round = round;\r\n            user.deposit = 0;\r\n            user.timeDeposit = 0;\r\n            user.time = 0;\r\n        }\r\n        // Если последний инвестор не мы заносим в список инвесторов\r\n        if (lastInvestor != msg.sender) {\r\n            if (msg.value >= minValueInvest) {\r\n                if (investors[user.idx] != msg.sender) {\r\n                    investedCount++;\r\n                    uint idx = addInvestor(payable(msg.sender));\r\n                    user.idx = idx;\r\n                }\r\n                lastInvestor = payable(msg.sender);\r\n            }\r\n        }\r\n        //Обновляем информация пользователя\r\n        user.deposit += msg.value;\r\n        user.timeDeposit = block.timestamp;\r\n        if(user.time == 0){\r\n            user.time = block.timestamp;\r\n        }\r\n\r\n        totalBalance += msg.value / 10;\r\n        withdrawSum += msg.value / 5;\r\n    }\r\n\r\n    // Получить следующий индекс для массива инветоров\r\n    function getIndex(uint num) internal view returns (uint){\r\n        return (index + num) % 5;\r\n    }\r\n\r\n    //Добовляем инвестора в список\r\n    function addInvestor(address payable investor) internal returns (uint) {\r\n        index = getIndex(1);\r\n        investors[index] = investor;\r\n        return index;\r\n    }\r\n\r\n    //Режим мультипликатора(срабатывает при превышении суммы ежедневных выплат над балансом контракта)\r\n    function multiplier() internal {\r\n        uint256 one = address(this).balance / 100;\r\n        uint256 fifty = one * 50;\r\n        uint256 seven = one * 7;\r\n        address payable[] memory sorted = sort();\r\n        for (uint256 i = 0; i < 5; i++) {\r\n            address payable to = sorted[i];\r\n            if (i == 0) {\r\n                to.transfer(fifty);\r\n            } else if (i >= 1 && i <= 4) {\r\n                to.transfer(seven);\r\n            }\r\n        }\r\n        advertising.transfer(one * 22);\r\n        investors = new address payable[](5);\r\n        withdrawSum = 0;\r\n        totalBalance = 0;\r\n        investedCount = 0;\r\n        round++;\r\n    }\r\n\r\n    //Функция отправки средств на рекламный адрес(вызывается при использовании внутренней логики контракта пользователями)\r\n    function withdrawDividends() internal {\r\n        if (totalBalance > 0 && address(this).balance > totalBalance && block.timestamp - advertisingLast > advertisingTime) {\r\n            advertising.transfer(totalBalance);\r\n            totalBalance = 0;\r\n            advertisingLast = block.timestamp;\r\n        }\r\n    }\r\n\r\n    // Функция сортировки инвесторов по времени инвестирования\r\n    function sort() internal view returns (address payable[] memory) {\r\n        address payable[] memory sorting = investors;\r\n        uint256 l = 5;\r\n        for(uint i = 0; i < l; i++) {\r\n            for(uint j = i+1; j < l ;j++) {\r\n                uint us1 = 0;\r\n                uint us2 = 0;\r\n                if(investors[i] != address(0)){\r\n                    us1 = users[sorting[i]].timeDeposit;\r\n                }\r\n                if(investors[j] != address(0)){\r\n                    us2 = users[sorting[j]].timeDeposit;\r\n                }\r\n                if(us1 < us2) {\r\n                    address payable temp = sorting[i];\r\n                    sorting[i] = sorting[j];\r\n                    sorting[j] = temp;\r\n                }\r\n            }\r\n        }\r\n        return sorting;\r\n    }\r\n\r\n    function getInvestors() public view returns (address payable [] memory) {\r\n        return investors;\r\n    }\r\n\r\n    function getDeposit(address _address) public view returns (uint256) {\r\n        return users[_address].round != round ? 0 : users[_address].deposit;\r\n    }\r\n\r\n    function getWithdrawSum() public view returns (uint256) {\r\n        return withdrawSum;\r\n    }\r\n\r\n    function getRound() public view returns (uint256) {\r\n        return round;\r\n    }\r\n\r\n    function getLastInvestor() public view returns (address payable) {\r\n        return lastInvestor;\r\n    }\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getGame() public view returns (GameType) {\r\n        return game;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StartHamsterGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StartTigerGame\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGame\",\"outputs\":[{\"internalType\":\"enum HamsterTigerHype.GameType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInvestors\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastInvestor\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"HamsterTigerHype","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6c2f58bcf353230b963e1f7e241bda0899437cfd6b9c5629ef0b7980131bc106"}]}