{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface IWithdrawalDelayer {\r\n    /**\r\n     * @notice Getter of the current `_litexGovernanceAddress`\r\n     * @return The `_litexGovernanceAddress` value\r\n     */\r\n    function getLitexGovernanceAddress() external view returns (address);\r\n\r\n    /**\r\n     * @dev Allows the current governance to set the pendingGovernance address.\r\n     * @param newGovernance The address to transfer governance to.\r\n     */\r\n    function transferGovernance(address newGovernance) external;\r\n\r\n    /**\r\n     * @dev Allows the pendingGovernance address to finalize the transfer.\r\n     */\r\n    function claimGovernance() external;\r\n\r\n    /**\r\n     * @notice Getter of the current `_emergencyCouncil`\r\n     * @return The `_emergencyCouncil` value\r\n     */\r\n    function getEmergencyCouncil() external view returns (address);\r\n\r\n    /**\r\n     * @dev Allows the current governance to set the pendingGovernance address.\r\n     * @param newEmergencyCouncil The address to transfer governance to.\r\n     */\r\n    function transferEmergencyCouncil(address payable newEmergencyCouncil)\r\n        external;\r\n\r\n    /**\r\n     * @dev Allows the pendingGovernance address to finalize the transfer.\r\n     */\r\n    function claimEmergencyCouncil() external;\r\n\r\n    /**\r\n     * @notice Getter of the current `_emergencyMode` status to know if the emergency mode is enable or disable\r\n     * @return The `_emergencyMode` value\r\n     */\r\n    function isEmergencyMode() external view returns (bool);\r\n\r\n    /**\r\n     * @notice Getter to obtain the current withdrawal delay\r\n     * @return the current withdrawal delay time in seconds: `_withdrawalDelay`\r\n     */\r\n    function getWithdrawalDelay() external view returns (uint64);\r\n\r\n    /**\r\n     * @notice Getter to obtain when emergency mode started\r\n     * @return the emergency mode starting time in seconds: `_emergencyModeStartingTime`\r\n     */\r\n    function getEmergencyModeStartingTime() external view returns (uint64);\r\n\r\n    /**\r\n     * @notice This function enables the emergency mode. Only the keeper of the system can enable this mode. This cannot\r\n     * be deactivated in any case so it will be irreversible.\r\n     * @dev The activation time is saved in `_emergencyModeStartingTime` and this function can only be called\r\n     * once if it has not been previously activated.\r\n     * Events: `EmergencyModeEnabled` event.\r\n     */\r\n    function enableEmergencyMode() external;\r\n\r\n    /**\r\n     * @notice This function allows the LitexKeeperAddress to change the withdrawal delay time, this is the time that\r\n     * anyone needs to wait until a withdrawal of the funds is allowed. Since this time is calculated at the time of\r\n     * withdrawal, this change affects existing deposits. Can never exceed `MAX_WITHDRAWAL_DELAY`\r\n     * @dev It changes `_withdrawalDelay` if `_newWithdrawalDelay` it is less than or equal to MAX_WITHDRAWAL_DELAY\r\n     * @param _newWithdrawalDelay new delay time in seconds\r\n     * Events: `NewWithdrawalDelay` event.\r\n     */\r\n    function changeWithdrawalDelay(uint64 _newWithdrawalDelay) external;\r\n\r\n    /**\r\n     * Returns the balance and the timestamp for a specific owner and token\r\n     * @param _owner who can claim the deposit once the delay time has expired (if not in emergency mode)\r\n     * @param _token address of the token to withdrawal (0x0 in case of Ether)\r\n     * @return `amount` Total amount withdrawable (if not in emergency mode)\r\n     * @return `depositTimestamp` Moment at which funds were deposited\r\n     */\r\n    function depositInfo(address payable _owner, address _token)\r\n        external\r\n        view\r\n        returns (uint192, uint64);\r\n\r\n    /**\r\n     * Function to make a deposit in the WithdrawalDelayer smartcontract, only the Litex rollup smartcontract can do it\r\n     * @dev In case of an Ether deposit, the address `0x0` will be used and the corresponding amount must be sent in the\r\n     * `msg.value`. In case of an ERC20 this smartcontract must have the approval to expend the token to\r\n     * deposit to be able to make a transferFrom to itself.\r\n     * @param _owner is who can claim the deposit once the withdrawal delay time has been exceeded\r\n     * @param _token address of the token deposited (`0x0` in case of Ether)\r\n     * @param _amount deposit amount\r\n     * Events: `Deposit`\r\n     */\r\n    function deposit(\r\n        address _owner,\r\n        address _token,\r\n        uint192 _amount\r\n    ) external payable;\r\n\r\n    /**\r\n     * This function allows the owner to withdawal the funds. Emergency mode cannot be enabled and it must have exceeded\r\n     * the withdrawal delay time\r\n     * @dev `NonReentrant` modifier is used as a protection despite the state is being previously updated\r\n     * @param _owner can claim the deposit once the delay time has expired\r\n     * @param _token address of the token to withdrawal (0x0 in case of Ether)\r\n     * Events: `Withdraw`\r\n     */\r\n    function withdrawal(address payable _owner, address _token) external;\r\n\r\n    /**\r\n     * Allows the Litex Governance to withdawal the funds in the event that emergency mode was enable.\r\n     * Note: An Aragon Court will have the right to veto over the call to this method\r\n     * @dev `NonReentrant` modifier is used as a protection despite the state is being previously updated and this is\r\n     * a security mechanism\r\n     * @param _to where the funds will be sent\r\n     * @param _token address of the token withdraw (0x0 in case of Ether)\r\n     * @param _amount the amount to send\r\n     * Events: `EscapeHatchWithdrawal`\r\n     */\r\n    function escapeHatchWithdrawal(\r\n        address _to,\r\n        address _token,\r\n        uint256 _amount\r\n    ) external;\r\n}\r\n\r\n\r\n\r\ncontract WithdrawalDelayer is ReentrancyGuard, IWithdrawalDelayer {\r\n    struct DepositState {\r\n        uint192 amount;\r\n        uint64 depositTimestamp;\r\n    }\r\n\r\n    // bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\r\n    bytes4 constant _TRANSFER_SIGNATURE = 0xa9059cbb;\r\n\r\n    // bytes4(keccak256(bytes(\"transferFrom(address,address,uint256)\")));\r\n    bytes4 constant _TRANSFERFROM_SIGNATURE = 0x23b872dd;\r\n\r\n    // bytes4(keccak256(bytes(\"deposit(address,address,uint192)\")));\r\n    bytes4 constant _DEPOSIT_SIGNATURE = 0xcfc0b641;\r\n\r\n    uint64 public constant MAX_WITHDRAWAL_DELAY = 2 weeks; // Maximum time that the return of funds can be delayed\r\n    uint64 public constant MAX_EMERGENCY_MODE_TIME = 26 weeks; // Maximum time in a state of emergency before a\r\n    // resolution and after which the emergency council can redeem the funds\r\n    uint64 private _withdrawalDelay; // Current delay\r\n    uint64 private _emergencyModeStartingTime; // When emergency mode has started\r\n    address private _litexGovernance; // Governance who control the system parameters\r\n    address public pendingGovernance;\r\n    address payable public pendingEmergencyCouncil;\r\n    address payable private _emergencyCouncil; // emergency council address who can redeem the funds after MAX_EMERGENCY_MODE_TIME\r\n    bool private _emergencyMode; // bool to set the emergency mode\r\n    address public litexRollupAddress; // litex Rollup Address who can send funds to this smart contract\r\n    mapping(bytes32 => DepositState) public deposits; // Mapping to keep track of deposits\r\n\r\n    event Deposit(\r\n        address indexed owner,\r\n        address indexed token,\r\n        uint192 amount,\r\n        uint64 depositTimestamp\r\n    );\r\n    event Withdraw(\r\n        address indexed token,\r\n        address indexed owner,\r\n        uint192 amount\r\n    );\r\n    event EmergencyModeEnabled();\r\n    event NewWithdrawalDelay(uint64 withdrawalDelay);\r\n    event EscapeHatchWithdrawal(\r\n        address indexed who,\r\n        address indexed to,\r\n        address indexed token,\r\n        uint256 amount\r\n    );\r\n\r\n    event NewEmergencyCouncil(address newEmergencyCouncil);\r\n    event NewLitexGovernanceAddress(address newLitexGovernanceAddress);\r\n\r\n    // Event emitted when the contract is initialized\r\n    event InitializeWithdrawalDelayerEvent(\r\n        uint64 initialWithdrawalDelay,\r\n        address initialLitexGovernanceAddress,\r\n        address initialEmergencyCouncil\r\n    );\r\n\r\n    /**\r\n     * @notice withdrawalDelayerInitializer (Constructor)\r\n     * @param _initialWithdrawalDelay Initial withdrawal delay time in seconds to be able to withdraw the funds\r\n     * @param _initialLitexRollup Smart contract responsible of making deposits and it's able to change the delay\r\n     * @param _initialLitexGovernanceAddress can claim the funds in an emergency mode\r\n     * @param _initialEmergencyCouncil can claim the funds in an emergency and MAX_EMERGENCY_MODE_TIME exceeded\r\n     */\r\n    constructor(\r\n        uint64 _initialWithdrawalDelay,\r\n        address _initialLitexRollup,\r\n        address _initialLitexGovernanceAddress,\r\n        address payable _initialEmergencyCouncil\r\n    ) public {\r\n        require(\r\n            _initialLitexRollup != address(0),\r\n            \"WithdrawalDelayer::withdrawalDelayerInitializer ADDRESS_0_NOT_VALID\"\r\n        );\r\n\r\n        _withdrawalDelay = _initialWithdrawalDelay;\r\n        litexRollupAddress = _initialLitexRollup;\r\n        _litexGovernance = _initialLitexGovernanceAddress;\r\n        _emergencyCouncil = _initialEmergencyCouncil;\r\n        _emergencyMode = false;\r\n\r\n        emit InitializeWithdrawalDelayerEvent(\r\n            _initialWithdrawalDelay,\r\n            _initialLitexGovernanceAddress,\r\n            _initialEmergencyCouncil\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Getter of the current `_litexGovernance`\r\n     * @return The `_litexGovernance` value\r\n     */\r\n    function getLitexGovernanceAddress()\r\n        external\r\n        override\r\n        view\r\n        returns (address)\r\n    {\r\n        return _litexGovernance;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current governance to set the pendingGovernance address.\r\n     * @param newGovernance The address to transfer governance to.\r\n     */\r\n    function transferGovernance(address newGovernance) public override {\r\n        require(\r\n            msg.sender == _litexGovernance,\r\n            \"WithdrawalDelayer::transferGovernance: ONLY_GOVERNANCE\"\r\n        );\r\n        pendingGovernance = newGovernance;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingGovernance address to finalize the transfer.\r\n     */\r\n    function claimGovernance() public override {\r\n        require(\r\n            msg.sender == pendingGovernance,\r\n            \"WithdrawalDelayer::claimGovernance: ONLY_PENDING_GOVERNANCE\"\r\n        );\r\n        _litexGovernance = pendingGovernance;\r\n        pendingGovernance = address(0);\r\n        emit NewLitexGovernanceAddress(_litexGovernance);\r\n    }\r\n\r\n    /**\r\n     * @notice Getter of the current `_emergencyCouncil`\r\n     * @return The `_emergencyCouncil` value\r\n     */\r\n    function getEmergencyCouncil() external override view returns (address) {\r\n        return _emergencyCouncil;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current governance to set the pendingGovernance address.\r\n     * @param newEmergencyCouncil The address to transfer governance to.\r\n     */\r\n    function transferEmergencyCouncil(address payable newEmergencyCouncil)\r\n        public\r\n        override\r\n    {\r\n        require(\r\n            msg.sender == _emergencyCouncil,\r\n            \"WithdrawalDelayer::transferEmergencyCouncil: ONLY_EMERGENCY_COUNCIL\"\r\n        );\r\n        pendingEmergencyCouncil = newEmergencyCouncil;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingGovernance address to finalize the transfer.\r\n     */\r\n    function claimEmergencyCouncil() public override {\r\n        require(\r\n            msg.sender == pendingEmergencyCouncil,\r\n            \"WithdrawalDelayer::claimEmergencyCouncil: ONLY_PENDING_GOVERNANCE\"\r\n        );\r\n        _emergencyCouncil = pendingEmergencyCouncil;\r\n        pendingEmergencyCouncil = address(0);\r\n        emit NewEmergencyCouncil(_emergencyCouncil);\r\n    }\r\n\r\n    /**\r\n     * @notice Getter of the current `_emergencyMode` status to know if the emergency mode is enable or disable\r\n     * @return The `_emergencyMode` value\r\n     */\r\n    function isEmergencyMode() external override view returns (bool) {\r\n        return _emergencyMode;\r\n    }\r\n\r\n    /**\r\n     * @notice Getter to obtain the current withdrawal delay\r\n     * @return the current withdrawal delay time in seconds: `_withdrawalDelay`\r\n     */\r\n    function getWithdrawalDelay() external override view returns (uint64) {\r\n        return _withdrawalDelay;\r\n    }\r\n\r\n    /**\r\n     * @notice Getter to obtain when emergency mode started\r\n     * @return the emergency mode starting time in seconds: `_emergencyModeStartingTime`\r\n     */\r\n    function getEmergencyModeStartingTime()\r\n        external\r\n        override\r\n        view\r\n        returns (uint64)\r\n    {\r\n        return _emergencyModeStartingTime;\r\n    }\r\n\r\n    /**\r\n     * @notice This function enables the emergency mode. Only the governance of the system can enable this mode. This cannot\r\n     * be deactivated in any case so it will be irreversible.\r\n     * @dev The activation time is saved in `_emergencyModeStartingTime` and this function can only be called\r\n     * once if it has not been previously activated.\r\n     * Events: `EmergencyModeEnabled` event.\r\n     */\r\n    function enableEmergencyMode() external override {\r\n        require(\r\n            msg.sender == _litexGovernance,\r\n            \"WithdrawalDelayer::enableEmergencyMode: ONLY_GOVERNANCE\"\r\n        );\r\n        require(\r\n            !_emergencyMode,\r\n            \"WithdrawalDelayer::enableEmergencyMode: ALREADY_ENABLED\"\r\n        );\r\n        _emergencyMode = true;\r\n        /* solhint-disable not-rely-on-time */\r\n        _emergencyModeStartingTime = uint64(now);\r\n        emit EmergencyModeEnabled();\r\n    }\r\n\r\n    /**\r\n     * @notice This function allows the governance to change the withdrawal delay time, this is the time that\r\n     * anyone needs to wait until a withdrawal of the funds is allowed. Since this time is calculated at the time of\r\n     * withdrawal, this change affects existing deposits. Can never exceed `MAX_WITHDRAWAL_DELAY`\r\n     * @dev It changes `_withdrawalDelay` if `_newWithdrawalDelay` it is less than or equal to MAX_WITHDRAWAL_DELAY\r\n     * @param _newWithdrawalDelay new delay time in seconds\r\n     * Events: `NewWithdrawalDelay` event.\r\n     */\r\n    function changeWithdrawalDelay(uint64 _newWithdrawalDelay)\r\n        external\r\n        override\r\n    {\r\n        require(\r\n            (msg.sender == _litexGovernance) ||\r\n                (msg.sender == litexRollupAddress),\r\n            \"WithdrawalDelayer::changeWithdrawalDelay: ONLY_ROLLUP_OR_GOVERNANCE\"\r\n        );\r\n        require(\r\n            _newWithdrawalDelay <= MAX_WITHDRAWAL_DELAY,\r\n            \"WithdrawalDelayer::changeWithdrawalDelay: EXCEEDS_MAX_WITHDRAWAL_DELAY\"\r\n        );\r\n        _withdrawalDelay = _newWithdrawalDelay;\r\n        emit NewWithdrawalDelay(_withdrawalDelay);\r\n    }\r\n\r\n    /**\r\n     * Returns the balance and the timestamp for a specific owner and token\r\n     * @param _owner who can claim the deposit once the delay time has expired (if not in emergency mode)\r\n     * @param _token address of the token to withdrawal (0x0 in case of Ether)\r\n     * @return `amount` Total amount withdrawable (if not in emergency mode)\r\n     * @return `depositTimestamp` Moment at which funds were deposited\r\n     */\r\n    function depositInfo(address payable _owner, address _token)\r\n        external\r\n        override\r\n        view\r\n        returns (uint192, uint64)\r\n    {\r\n        DepositState memory ds = deposits[keccak256(\r\n            abi.encodePacked(_owner, _token)\r\n        )];\r\n        return (ds.amount, ds.depositTimestamp);\r\n    }\r\n\r\n    /**\r\n     * Function to make a deposit in the WithdrawalDelayer smartcontract, only the Litex rollup smartcontract can do it\r\n     * @dev In case of an Ether deposit, the address `0x0` will be used and the corresponding amount must be sent in the\r\n     * `msg.value`. In case of an ERC20 this smartcontract must have the approval to expend the token to\r\n     * deposit to be able to make a transferFrom to itself.\r\n     * @param _owner is who can claim the deposit once the withdrawal delay time has been exceeded\r\n     * @param _token address of the token deposited (`0x0` in case of Ether)\r\n     * @param _amount deposit amount\r\n     * Events: `Deposit`\r\n     */\r\n    function deposit(\r\n        address _owner,\r\n        address _token,\r\n        uint192 _amount\r\n    ) external override payable nonReentrant {\r\n        require(\r\n            msg.sender == litexRollupAddress,\r\n            \"WithdrawalDelayer::deposit: ONLY_ROLLUP\"\r\n        );\r\n        if (msg.value != 0) {\r\n            require(\r\n                _token == address(0x0),\r\n                \"WithdrawalDelayer::deposit: WRONG_TOKEN_ADDRESS\"\r\n            );\r\n            require(\r\n                _amount == msg.value,\r\n                \"WithdrawalDelayer::deposit: WRONG_AMOUNT\"\r\n            );\r\n        } else {\r\n            require(\r\n                IERC20(_token).allowance(litexRollupAddress, address(this)) >=\r\n                    _amount,\r\n                \"WithdrawalDelayer::deposit: NOT_ENOUGH_ALLOWANCE\"\r\n            );\r\n            /* solhint-disable avoid-low-level-calls */\r\n            (bool success, bytes memory data) = address(_token).call(\r\n                abi.encodeWithSelector(\r\n                    _TRANSFERFROM_SIGNATURE,\r\n                    litexRollupAddress,\r\n                    address(this),\r\n                    _amount\r\n                )\r\n            );\r\n            // `transferFrom` method may return (bool) or nothing.\r\n            require(\r\n                success && (data.length == 0 || abi.decode(data, (bool))),\r\n                \"WithdrawalDelayer::deposit: TOKEN_TRANSFER_FAILED\"\r\n            );\r\n        }\r\n        _processDeposit(_owner, _token, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Internal call to make a deposit\r\n     * @param _owner is who can claim the deposit once the withdrawal delay time has been exceeded\r\n     * @param _token address of the token deposited (`0x0` in case of Ether)\r\n     * @param _amount deposit amount\r\n     * Events: `Deposit`\r\n     */\r\n    function _processDeposit(\r\n        address _owner,\r\n        address _token,\r\n        uint192 _amount\r\n    ) internal {\r\n        // We identify a deposit with the keccak of its owner and the token\r\n        bytes32 depositId = keccak256(abi.encodePacked(_owner, _token));\r\n        uint192 newAmount = deposits[depositId].amount + _amount;\r\n        require(\r\n            newAmount >= deposits[depositId].amount,\r\n            \"WithdrawalDelayer::_processDeposit: DEPOSIT_OVERFLOW\"\r\n        );\r\n\r\n        deposits[depositId].amount = newAmount;\r\n        deposits[depositId].depositTimestamp = uint64(now);\r\n\r\n        emit Deposit(\r\n            _owner,\r\n            _token,\r\n            _amount,\r\n            deposits[depositId].depositTimestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * This function allows the owner to withdawal the funds. Emergency mode cannot be enabled and it must have exceeded\r\n     * the withdrawal delay time\r\n     * @dev `NonReentrant` modifier is used as a protection despite the state is being previously updated\r\n     * @param _owner can claim the deposit once the delay time has expired\r\n     * @param _token address of the token to withdrawal (0x0 in case of Ether)\r\n     * Events: `Withdraw`\r\n     */\r\n    function withdrawal(address payable _owner, address _token)\r\n        external\r\n        override\r\n        nonReentrant\r\n    {\r\n        require(!_emergencyMode, \"WithdrawalDelayer::deposit: EMERGENCY_MODE\");\r\n        // We identify a deposit with the keccak of its owner and the token\r\n        bytes32 depositId = keccak256(abi.encodePacked(_owner, _token));\r\n        uint192 amount = deposits[depositId].amount;\r\n        require(amount > 0, \"WithdrawalDelayer::withdrawal: NO_FUNDS\");\r\n        require(\r\n            uint64(now) >=\r\n                deposits[depositId].depositTimestamp + _withdrawalDelay,\r\n            \"WithdrawalDelayer::withdrawal: WITHDRAWAL_NOT_ALLOWED\"\r\n        );\r\n\r\n        // Update the state\r\n        deposits[depositId].amount = 0;\r\n        deposits[depositId].depositTimestamp = 0;\r\n\r\n        // Make the transfer\r\n        if (_token == address(0x0)) {\r\n            _ethWithdrawal(_owner, uint256(amount));\r\n        } else {\r\n            _tokenWithdrawal(_token, _owner, uint256(amount));\r\n        }\r\n\r\n        emit Withdraw(_token, _owner, amount);\r\n    }\r\n\r\n    /**\r\n     * Allows the Litex Governance to withdawal the funds in the event that emergency mode was enable.\r\n     * @dev `NonReentrant` modifier is used as a protection despite the state is being previously updated and this is\r\n     * a security mechanism\r\n     * @param _to where the funds will be sent\r\n     * @param _token address of the token withdraw (0x0 in case of Ether)\r\n     * @param _amount the amount to send\r\n     * Events: `EscapeHatchWithdrawal`\r\n     */\r\n    function escapeHatchWithdrawal(\r\n        address _to,\r\n        address _token,\r\n        uint256 _amount\r\n    ) external override nonReentrant {\r\n        require(\r\n            _emergencyMode,\r\n            \"WithdrawalDelayer::escapeHatchWithdrawal: ONLY_EMODE\"\r\n        );\r\n        require(\r\n            msg.sender == _emergencyCouncil || msg.sender == _litexGovernance,\r\n            \"WithdrawalDelayer::escapeHatchWithdrawal: ONLY_GOVERNANCE\"\r\n        );\r\n        if (\r\n            msg.sender == _emergencyCouncil &&\r\n            _emergencyCouncil != _litexGovernance\r\n        ) {\r\n            require(\r\n                uint64(now) >=\r\n                    _emergencyModeStartingTime + MAX_EMERGENCY_MODE_TIME,\r\n                \"WithdrawalDelayer::escapeHatchWithdrawal: NO_MAX_EMERGENCY_MODE_TIME\"\r\n            );\r\n        }\r\n        if (_token == address(0x0)) {\r\n            _ethWithdrawal(_to, _amount);\r\n        } else {\r\n            _tokenWithdrawal(_token, _to, _amount);\r\n        }\r\n        emit EscapeHatchWithdrawal(msg.sender, _to, _token, _amount);\r\n    }\r\n\r\n    /**\r\n     * Internal function to perform a ETH Withdrawal\r\n     * @param to where the funds will be sent\r\n     * @param amount address of the token withdraw (0x0 in case of Ether)\r\n     */\r\n    function _ethWithdrawal(address to, uint256 amount) internal {\r\n        /* solhint-disable avoid-low-level-calls */\r\n        (bool success, ) = to.call{value: amount}(\"\");\r\n        require(success, \"WithdrawalDelayer::_ethWithdrawal: TRANSFER_FAILED\");\r\n    }\r\n\r\n    /**\r\n     * Internal function to perform a Token Withdrawal\r\n     * @param tokenAddress address of the token to transfer\r\n     * @param to where the funds will be sent\r\n     * @param amount address of the token withdraw (0x0 in case of Ether)\r\n     */\r\n    function _tokenWithdrawal(\r\n        address tokenAddress,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        /* solhint-disable avoid-low-level-calls */\r\n        (bool success, bytes memory data) = tokenAddress.call(\r\n            abi.encodeWithSelector(_TRANSFER_SIGNATURE, to, amount)\r\n        );\r\n\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"WithdrawalDelayer::_tokenWithdrawal: TOKEN_TRANSFER_FAILED\"\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_initialWithdrawalDelay\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_initialLitexRollup\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialLitexGovernanceAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_initialEmergencyCouncil\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint192\",\"name\":\"amount\",\"type\":\"uint192\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"depositTimestamp\",\"type\":\"uint64\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyModeEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EscapeHatchWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"initialWithdrawalDelay\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initialLitexGovernanceAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initialEmergencyCouncil\",\"type\":\"address\"}],\"name\":\"InitializeWithdrawalDelayerEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newEmergencyCouncil\",\"type\":\"address\"}],\"name\":\"NewEmergencyCouncil\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLitexGovernanceAddress\",\"type\":\"address\"}],\"name\":\"NewLitexGovernanceAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"withdrawalDelay\",\"type\":\"uint64\"}],\"name\":\"NewWithdrawalDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint192\",\"name\":\"amount\",\"type\":\"uint192\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_EMERGENCY_MODE_TIME\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAWAL_DELAY\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_newWithdrawalDelay\",\"type\":\"uint64\"}],\"name\":\"changeWithdrawalDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEmergencyCouncil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"_amount\",\"type\":\"uint192\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"depositInfo\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"amount\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"depositTimestamp\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableEmergencyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"escapeHatchWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmergencyCouncil\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmergencyModeStartingTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLitexGovernanceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawalDelay\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEmergencyMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"litexRollupAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingEmergencyCouncil\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newEmergencyCouncil\",\"type\":\"address\"}],\"name\":\"transferEmergencyCouncil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WithdrawalDelayer","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000e10000000000000000000000000b97aba10d14add33f97d9de1bc73d8bded2e569a000000000000000000000000fbc6e3e0e3d99f1559f99bd3b87448c86393f91a00000000000000000000000062d4a51cb037897a5064af9ac27e4414d024f8a0","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f749ad28556973d113e244c526767fafbb412da406db28cf10688dccce5272d4"}]}