{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.11\r\n\"\"\"\r\n@title Tokenized Gauge Wrapper: Unit Protocol Edition\r\n@author Curve Finance\r\n@license MIT\r\n@notice Tokenizes gauge deposits to allow claiming of CRV when\r\n        deposited as a collateral within the unit.xyz Vault\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\nimplements: ERC20\r\n\r\n\r\ninterface LiquidityGauge:\r\n    def lp_token() -> address: view\r\n    def minter() -> address: view\r\n    def crv_token() -> address: view\r\n    def deposit(_value: uint256): nonpayable\r\n    def withdraw(_value: uint256): nonpayable\r\n    def claimable_tokens(addr: address) -> uint256: nonpayable\r\n\r\ninterface Minter:\r\n    def mint(gauge_addr: address): nonpayable\r\n\r\ninterface UnitVault:\r\n    def collaterals(asset: address, user: address) -> uint256: nonpayable\r\n\r\n\r\nevent Deposit:\r\n    provider: indexed(address)\r\n    value: uint256\r\n\r\nevent Withdraw:\r\n    provider: indexed(address)\r\n    value: uint256\r\n\r\nevent Transfer:\r\n    _from: indexed(address)\r\n    _to: indexed(address)\r\n    _value: uint256\r\n\r\nevent Approval:\r\n    _owner: indexed(address)\r\n    _spender: indexed(address)\r\n    _value: uint256\r\n\r\n\r\nminter: public(address)\r\ncrv_token: public(address)\r\nlp_token: public(address)\r\ngauge: public(address)\r\n\r\nbalanceOf: public(HashMap[address, uint256])\r\ndepositedBalanceOf: public(HashMap[address, uint256])\r\ntotalSupply: public(uint256)\r\nallowances: HashMap[address, HashMap[address, uint256]]\r\n\r\nname: public(String[64])\r\nsymbol: public(String[32])\r\n\r\n# caller -> recipient -> can deposit?\r\napproved_to_deposit: public(HashMap[address, HashMap[address, bool]])\r\n\r\ncrv_integral: uint256\r\ncrv_integral_for: HashMap[address, uint256]\r\nclaimable_crv: public(HashMap[address, uint256])\r\n\r\n# [uint216 claimable balance][uint40 timestamp]\r\nlast_claim_data: uint256\r\n\r\n# https://github.com/unitprotocol/core/blob/master/contracts/Vault.sol\r\nUNIT_VAULT: constant(address) = 0xb1cFF81b9305166ff1EFc49A129ad2AfCd7BCf19\r\n\r\n\r\n@external\r\ndef __init__(\r\n    _name: String[64],\r\n    _symbol: String[32],\r\n    _gauge: address,\r\n):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @param _name Token full name\r\n    @param _symbol Token symbol\r\n    @param _gauge Liquidity gauge contract address\r\n    \"\"\"\r\n\r\n    self.name = _name\r\n    self.symbol = _symbol\r\n\r\n    lp_token: address = LiquidityGauge(_gauge).lp_token()\r\n    ERC20(lp_token).approve(_gauge, MAX_UINT256)\r\n\r\n    self.minter = LiquidityGauge(_gauge).minter()\r\n    self.crv_token = LiquidityGauge(_gauge).crv_token()\r\n    self.lp_token = lp_token\r\n    self.gauge = _gauge\r\n\r\n\r\n@external\r\ndef decimals() -> uint256:\r\n    return 18\r\n\r\n\r\n@internal\r\ndef _checkpoint(_user_addresses: address[2]):\r\n    claim_data: uint256 = self.last_claim_data\r\n    I: uint256 = self.crv_integral\r\n\r\n    if block.timestamp != claim_data % 2**40:\r\n        last_claimable: uint256 = shift(claim_data, -40)\r\n        claimable: uint256 = LiquidityGauge(self.gauge).claimable_tokens(self)\r\n        d_reward: uint256 = claimable - last_claimable\r\n        total_balance: uint256 = self.totalSupply\r\n        if total_balance > 0:\r\n            I += 10 ** 18 * d_reward / total_balance\r\n            self.crv_integral = I\r\n        self.last_claim_data = block.timestamp + shift(claimable, 40)\r\n\r\n    for addr in _user_addresses:\r\n        if addr in [ZERO_ADDRESS, UNIT_VAULT]:\r\n            # do not calculate an integral for the vault to ensure it cannot ever claim\r\n            continue\r\n        user_integral: uint256 = self.crv_integral_for[addr]\r\n        if user_integral < I:\r\n            user_balance: uint256 = self.balanceOf[addr] + self.depositedBalanceOf[addr]\r\n            self.claimable_crv[addr] += user_balance * (I - user_integral) / 10 ** 18\r\n            self.crv_integral_for[addr] = I\r\n\r\n\r\n@external\r\ndef user_checkpoint(addr: address) -> bool:\r\n    \"\"\"\r\n    @notice Record a checkpoint for `addr`\r\n    @param addr User address\r\n    @return bool success\r\n    \"\"\"\r\n    self._checkpoint([addr, ZERO_ADDRESS])\r\n    return True\r\n\r\n\r\n@external\r\ndef claimable_tokens(addr: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the number of claimable tokens per user\r\n    @dev This function should be manually changed to \"view\" in the ABI\r\n    @return uint256 number of claimable tokens per user\r\n    \"\"\"\r\n    self._checkpoint([addr, ZERO_ADDRESS])\r\n\r\n    return self.claimable_crv[addr]\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef claim_tokens(addr: address = msg.sender):\r\n    \"\"\"\r\n    @notice Claim mintable CRV\r\n    @param addr Address to claim for\r\n    \"\"\"\r\n    self._checkpoint([addr, ZERO_ADDRESS])\r\n\r\n    crv_token: address = self.crv_token\r\n    claimable: uint256 = self.claimable_crv[addr]\r\n    self.claimable_crv[addr] = 0\r\n\r\n    if ERC20(crv_token).balanceOf(self) < claimable:\r\n        Minter(self.minter).mint(self.gauge)\r\n        self.last_claim_data = block.timestamp\r\n\r\n    ERC20(crv_token).transfer(addr, claimable)\r\n\r\n\r\n@external\r\ndef set_approve_deposit(addr: address, can_deposit: bool):\r\n    \"\"\"\r\n    @notice Set whether `addr` can deposit tokens for `msg.sender`\r\n    @param addr Address to set approval on\r\n    @param can_deposit bool - can this account deposit for `msg.sender`?\r\n    \"\"\"\r\n    self.approved_to_deposit[addr][msg.sender] = can_deposit\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef deposit(_value: uint256, addr: address = msg.sender):\r\n    \"\"\"\r\n    @notice Deposit `_value` LP tokens\r\n    @param _value Number of tokens to deposit\r\n    @param addr Address to deposit for\r\n    \"\"\"\r\n    if addr != msg.sender:\r\n        assert self.approved_to_deposit[msg.sender][addr], \"Not approved\"\r\n\r\n    self._checkpoint([addr, ZERO_ADDRESS])\r\n\r\n    if _value != 0:\r\n        self.balanceOf[addr] += _value\r\n        self.totalSupply += _value\r\n\r\n        ERC20(self.lp_token).transferFrom(msg.sender, self, _value)\r\n        LiquidityGauge(self.gauge).deposit(_value)\r\n\r\n    log Deposit(addr, _value)\r\n    log Transfer(ZERO_ADDRESS, addr, _value)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef withdraw(_value: uint256):\r\n    \"\"\"\r\n    @notice Withdraw `_value` LP tokens\r\n    @param _value Number of tokens to withdraw\r\n    \"\"\"\r\n    self._checkpoint([msg.sender, ZERO_ADDRESS])\r\n\r\n    if _value != 0:\r\n        self.balanceOf[msg.sender] -= _value\r\n        self.totalSupply -= _value\r\n\r\n        LiquidityGauge(self.gauge).withdraw(_value)\r\n        ERC20(self.lp_token).transfer(msg.sender, _value)\r\n\r\n    log Withdraw(msg.sender, _value)\r\n    log Transfer(msg.sender, ZERO_ADDRESS, _value)\r\n\r\n\r\n@view\r\n@external\r\ndef allowance(_owner : address, _spender : address) -> uint256:\r\n    \"\"\"\r\n    @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    @param _owner The address which owns the funds.\r\n    @param _spender The address which will spend the funds.\r\n    @return An uint256 specifying the amount of tokens still available for the spender.\r\n    \"\"\"\r\n    return self.allowances[_owner][_spender]\r\n\r\n\r\n@internal\r\ndef _transfer(_from: address, _to: address, _value: uint256):\r\n    self._checkpoint([_from, _to])\r\n\r\n    if _value != 0:\r\n        self.balanceOf[_from] -= _value\r\n        self.balanceOf[_to] += _value\r\n\r\n    log Transfer(_from, _to, _value)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef transfer(_to : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n    @dev Transfer token for a specified address\r\n    @param _to The address to transfer to.\r\n    @param _value The amount to be transferred.\r\n    \"\"\"\r\n    self._transfer(msg.sender, _to, _value)\r\n\r\n    if msg.sender == UNIT_VAULT:\r\n        # when the transfer originates from the vault, consider it a withdrawal\r\n        # and adjust `depositedBalance` accordingly\r\n        self.depositedBalanceOf[_to] = UnitVault(UNIT_VAULT).collaterals(self, _to)\r\n\r\n    return True\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef transferFrom(_from : address, _to : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n     @dev Transfer tokens from one address to another.\r\n     @param _from address The address which you want to send tokens from\r\n     @param _to address The address which you want to transfer to\r\n     @param _value uint256 the amount of tokens to be transferred\r\n    \"\"\"\r\n    _allowance: uint256 = self.allowances[_from][msg.sender]\r\n    if _allowance != MAX_UINT256:\r\n        self.allowances[_from][msg.sender] = _allowance - _value\r\n\r\n    self._transfer(_from, _to, _value)\r\n\r\n    if _to == UNIT_VAULT:\r\n        # when a `transferFrom` directs into the vault, consider it a deposited\r\n        # balance so that the recipient may still claim CRV from it\r\n        self.depositedBalanceOf[_from] += _value\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef approve(_spender : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n    @notice Approve the passed address to transfer the specified amount of\r\n            tokens on behalf of msg.sender\r\n    @dev Beware that changing an allowance via this method brings the risk\r\n         that someone may use both the old and new allowance by unfortunate\r\n         transaction ordering. This may be mitigated with the use of\r\n         {increaseAllowance} and {decreaseAllowance}.\r\n         https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    @param _spender The address which will transfer the funds\r\n    @param _value The amount of tokens that may be transferred\r\n    @return bool success\r\n    \"\"\"\r\n    self.allowances[msg.sender][_spender] = _value\r\n    log Approval(msg.sender, _spender, _value)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef increaseAllowance(_spender: address, _added_value: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Increase the allowance granted to `_spender` by the caller\r\n    @dev This is alternative to {approve} that can be used as a mitigation for\r\n         the potential race condition\r\n    @param _spender The address which will transfer the funds\r\n    @param _added_value The amount of to increase the allowance\r\n    @return bool success\r\n    \"\"\"\r\n    allowance: uint256 = self.allowances[msg.sender][_spender] + _added_value\r\n    self.allowances[msg.sender][_spender] = allowance\r\n\r\n    log Approval(msg.sender, _spender, allowance)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef decreaseAllowance(_spender: address, _subtracted_value: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Decrease the allowance granted to `_spender` by the caller\r\n    @dev This is alternative to {approve} that can be used as a mitigation for\r\n         the potential race condition\r\n    @param _spender The address which will transfer the funds\r\n    @param _subtracted_value The amount of to decrease the allowance\r\n    @return bool success\r\n    \"\"\"\r\n    allowance: uint256 = self.allowances[msg.sender][_spender] - _subtracted_value\r\n    self.allowances[msg.sender][_spender] = allowance\r\n\r\n    log Approval(msg.sender, _spender, allowance)\r\n\r\n    return True","ABI":"[{\"name\":\"Deposit\",\"inputs\":[{\"name\":\"provider\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Withdraw\",\"inputs\":[{\"name\":\"provider\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Transfer\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_to\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approval\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_spender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_gauge\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":288},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"user_checkpoint\",\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":227223},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claimable_tokens\",\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":228168},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claim_tokens\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claim_tokens\",\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_approve_deposit\",\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"can_deposit\",\"type\":\"bool\"}],\"outputs\":[],\"gas\":35798},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"addr\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[],\"gas\":364124},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":1728},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":641438},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":678085},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":38031},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"increaseAllowance\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_added_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":39275},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"decreaseAllowance\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtracted_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":39299},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"minter\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":1478},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"crv_token\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":1508},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lp_token\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":1538},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"gauge\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":1568},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":1813},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"depositedBalanceOf\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":1843},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":1658},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"gas\":8090},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"gas\":7143},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"approved_to_deposit\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":2178},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"claimable_crv\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":1993}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.11","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000bfcf63294ad7105dea65aa58f8ae5be2d9d0952a000000000000000000000000000000000000000000000000000000000000003043757276652e66692033435256204761756765204465706f7369743a20556e69742e78797a20436f6c6c61746572616c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f334352562d47617567652d556e69740000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}