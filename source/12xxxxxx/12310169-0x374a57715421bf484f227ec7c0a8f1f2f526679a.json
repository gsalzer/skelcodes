{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.4;\r\n\r\ninterface IERC20{\r\n\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n  \r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  \r\n  function increaseAllowance(address spender, uint256 addedValue) external;\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) external;\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n}\r\n\r\ninterface contract2{\r\n    \r\n    function claimRewards(address user) external returns(bool);\r\n}\r\n\r\ninterface MCHstakingInterface {\r\n    \r\n    function stakingStats(address user) external view returns(uint256 amount, uint256 stakingBlock) ;\r\n    \r\n    function totalStaked() external view returns(uint256);\r\n    \r\n    function showBlackUser(address user) external view returns(bool) ;\r\n    \r\n    function allowance(address user) external view returns(bool) ;\r\n    \r\n    function transferOwnership(address to) external ;\r\n    \r\n    function giveAllowence(address user) external ;\r\n    \r\n    function removeAllowence(address user) external ;\r\n    \r\n    function addToBlackList(address user) external ;\r\n\r\n    function removeFromBlackList(address user) external ;\r\n    \r\n    function stakeMCH(uint256 amount) external ;\r\n    \r\n    function unstake(address user, uint256 amount) external ;\r\n    \r\n    function refreshBlock(address user) external ;    \r\n    \r\n    function setData(address user, uint256 staked, uint256 stakingBlock, uint256 stakedMCH) external ;    \r\n    \r\n    function transferMCH(address to, uint256 amount) external ;\r\n    \r\n    function emergencyWithdraw(uint256 amount) external ;    \r\n    \r\n    event Stake(address indexed staker, uint256 indexed amount);\r\n}\r\ncontract MCHstaking is MCHstakingInterface {\r\n    \r\n    address private _owner;\r\n    mapping (address => bool) private _allowence;\r\n    IERC20 MCH;\r\n    contract2 MCF;\r\n    \r\n    mapping (address => uint256) private _staking;\r\n    mapping (address => uint256) private _block;\r\n    \r\n    uint256 _totalStaked;\r\n    \r\n    mapping (address => bool) private _blackListed;\r\n    \r\n    constructor(address MCHtoken) {\r\n        MCH = IERC20(MCHtoken);\r\n        _owner = msg.sender;\r\n        _allowence[msg.sender] = true;\r\n    }\r\n    \r\n    function setMCFcontract(address contractAddress) external {\r\n        require(msg.sender == _owner);\r\n        MCF = contract2(contractAddress);\r\n        _allowence[contractAddress] = true;\r\n    }\r\n    \r\n    //staking stats of a user\r\n    function stakingStats(address user) external view override returns(uint256 amount, uint256 stakingBlock){\r\n        amount = _staking[user];\r\n        stakingBlock = _block[user];\r\n    }\r\n    \r\n    function totalStaked() external view override returns(uint256){\r\n        return _totalStaked;\r\n    }\r\n    //shows if a user is black listed or not\r\n    function showBlackUser(address user) external view override returns(bool){\r\n        require(_allowence[msg.sender]);\r\n        return _blackListed[user];\r\n    }\r\n    \r\n    //shows if a user has allowance or not\r\n    function allowance(address user) external view override returns(bool){\r\n        require(_allowence[msg.sender]);\r\n        return _allowence[user];\r\n    }\r\n    \r\n    //======================================================================================================================================================\r\n    \r\n    function transferOwnership(address to) external override {\r\n        require(_owner == msg.sender);\r\n        _owner = to;\r\n    }\r\n    \r\n    function giveAllowence(address user) external override {\r\n        require(msg.sender == _owner);\r\n        _allowence[user] = true;\r\n    }\r\n    \r\n    function removeAllowence(address user) external override {\r\n        require(msg.sender == _owner);\r\n        _allowence[user] = false;\r\n    }  \r\n    \r\n    function addToBlackList(address user) external override {\r\n        require(_owner == msg.sender);\r\n        _blackListed[user] = true;\r\n    }\r\n\r\n    function removeFromBlackList(address user) external override {\r\n        require(_owner == msg.sender);\r\n        _blackListed[user] = false;\r\n    }    \r\n    \r\n    function stakeMCH(uint256 amount) external override {\r\n        MCH.transferFrom(msg.sender, address(this), amount);\r\n            \r\n        if(address(MCF) != address(0)){MCF.claimRewards(msg.sender);}\r\n        _staking[msg.sender] += amount;\r\n        _block[msg.sender] = block.number;\r\n        _totalStaked += amount;\r\n        emit Stake(msg.sender, amount);\r\n    }\r\n    \r\n    function unstake(address user, uint256 amount) external override {\r\n        require(_allowence[msg.sender]);\r\n        _staking[user] -= amount;\r\n        _block[user] = block.number;\r\n        _totalStaked -= amount;\r\n    }\r\n    \r\n    function refreshBlock(address user) external override {\r\n        require(_allowence[msg.sender]);\r\n        _block[user] = block.number;\r\n    }\r\n    \r\n    function setData(address user, uint256 staked, uint256 stakingBlock, uint256 stakedMCH) external override {\r\n        require(_allowence[msg.sender]);\r\n        _staking[user] = staked;\r\n        _block[user] = stakingBlock;\r\n        _totalStaked = stakedMCH;\r\n        \r\n    }\r\n    \r\n    function transferMCH(address to, uint256 amount) external override {\r\n        require(_allowence[msg.sender]);\r\n        require(MCH.balanceOf(address(this)) - _totalStaked >= amount);\r\n        MCH.transfer(to, amount);\r\n    }\r\n    \r\n    function emergencyWithdraw(uint256 amount) external override {\r\n        require(msg.sender == _owner);\r\n        MCH.transfer(_owner, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"MCHtoken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addToBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"giveAllowence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"refreshBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeAllowence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeFromBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedMCH\",\"type\":\"uint256\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setMCFcontract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"showBlackUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeMCH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"stakingStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferMCH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MCHstaking","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000a5e262ec733051b14b38901901a82f2684637e78","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://70af9be7fba686345915b63ea3d3660a5334fb591834a23cdbb96024f29f6dcf"}]}