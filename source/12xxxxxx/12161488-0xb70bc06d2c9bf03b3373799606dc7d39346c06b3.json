{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-04-02\r\n*/\r\n\r\n// File: original_contracts/IWhitelisted.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\ninterface IWhitelisted {\r\n\r\n    function hasRole(\r\n        bytes32 role,\r\n        address account\r\n    )\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function WHITELISTED_ROLE() external view returns(bytes32);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: original_contracts/lib/IExchange.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n/**\r\n* @dev This interface should be implemented by all exchanges which needs to integrate with the paraswap protocol\r\n*/\r\ninterface IExchange {\r\n\r\n    /**\r\n   * @dev The function which performs the swap on an exchange.\r\n   * Exchange needs to implement this method in order to support swapping of tokens through it\r\n   * @param fromToken Address of the source token\r\n   * @param toToken Address of the destination token\r\n   * @param fromAmount Amount of source tokens to be swapped\r\n   * @param toAmount Minimum destination token amount expected out of this swap\r\n   * @param exchange Internal exchange or factory contract address for the exchange. For example Registry address for the Uniswap\r\n   * @param payload Any exchange specific data which is required can be passed in this argument in encoded format which\r\n   * will be decoded by the exchange. Each exchange will publish it's own decoding/encoding mechanism\r\n   */\r\n   //TODO: REMOVE RETURN STATEMENT\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        uint256 toAmount,\r\n        address exchange,\r\n        bytes calldata payload) external payable;\r\n\r\n  /**\r\n   * @dev The function which performs the swap on an exchange.\r\n   * Exchange needs to implement this method in order to support swapping of tokens through it\r\n   * @param fromToken Address of the source token\r\n   * @param toToken Address of the destination token\r\n   * @param fromAmount Max Amount of source tokens to be swapped\r\n   * @param toAmount Destination token amount expected out of this swap\r\n   * @param exchange Internal exchange or factory contract address for the exchange. For example Registry address for the Uniswap\r\n   * @param payload Any exchange specific data which is required can be passed in this argument in encoded format which\r\n   * will be decoded by the exchange. Each exchange will publish it's own decoding/encoding mechanism\r\n   */\r\n    function buy(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        uint256 toAmount,\r\n        address exchange,\r\n        bytes calldata payload) external payable;\r\n\r\n    /**\r\n   * @dev This function is used to perform onChainSwap. It build all the parameters onchain. Basically the information\r\n   * encoded in payload param of swap will calculated in this case\r\n   * Exchange needs to implement this method in order to support swapping of tokens through it\r\n   * @param fromToken Address of the source token\r\n   * @param toToken Address of the destination token\r\n   * @param fromAmount Amount of source tokens to be swapped\r\n   * @param toAmount Minimum destination token amount expected out of this swap\r\n   */\r\n    function onChainSwap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        uint256 toAmount\r\n    ) external payable returns (uint256);\r\n\r\n    /**\r\n    * @dev Certain adapters/exchanges needs to be initialized.\r\n    * This method will be called from Augustus\r\n    */\r\n    function initialize(bytes calldata data) external;\r\n\r\n    /**\r\n    * @dev Returns unique identifier for the adapter\r\n    */\r\n    function getKey() external pure returns(bytes32);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: original_contracts/lib/SafeERC20.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: original_contracts/ITokenTransferProxy.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\ninterface ITokenTransferProxy {\r\n\r\n    function transferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    )\r\n        external;\r\n\r\n    function freeReduxTokens(address user, uint256 tokensToFree) external;\r\n}\r\n\r\n// File: original_contracts/lib/Utils.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary Utils {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address constant ETH_ADDRESS = address(\r\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\n    );\r\n\r\n    address constant WETH_ADDRESS = address(\r\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\n    );\r\n\r\n    uint256 constant MAX_UINT = 2 ** 256 - 1;\r\n\r\n    /**\r\n   * @param fromToken Address of the source token\r\n   * @param toToken Address of the destination token\r\n   * @param fromAmount Amount of source tokens to be swapped\r\n   * @param toAmount Minimum destination token amount expected out of this swap\r\n   * @param expectedAmount Expected amount of destination tokens without slippage\r\n   * @param beneficiary Beneficiary address\r\n   * 0 then 100% will be transferred to beneficiary. Pass 10000 for 100%\r\n   * @param referrer referral id\r\n   * @param path Route to be taken for this swap to take place\r\n\r\n   */\r\n    struct SellData {\r\n        address fromToken;\r\n        uint256 fromAmount;\r\n        uint256 toAmount;\r\n        uint256 expectedAmount;\r\n        address payable beneficiary;\r\n        string referrer;\r\n        bool useReduxToken;\r\n        Utils.Path[] path;\r\n\r\n    }\r\n\r\n    struct MegaSwapSellData {\r\n        address fromToken;\r\n        uint256 fromAmount;\r\n        uint256 toAmount;\r\n        uint256 expectedAmount;\r\n        address payable beneficiary;\r\n        string referrer;\r\n        bool useReduxToken;\r\n        Utils.MegaSwapPath[] path;\r\n    }\r\n\r\n    struct BuyData {\r\n        address fromToken;\r\n        address toToken;\r\n        uint256 fromAmount;\r\n        uint256 toAmount;\r\n        address payable beneficiary;\r\n        string referrer;\r\n        bool useReduxToken;\r\n        Utils.BuyRoute[] route;\r\n    }\r\n\r\n    struct Route {\r\n        address payable exchange;\r\n        address targetExchange;\r\n        uint percent;\r\n        bytes payload;\r\n        uint256 networkFee;//Network fee is associated with 0xv3 trades\r\n    }\r\n\r\n    struct MegaSwapPath {\r\n        uint256 fromAmountPercent;\r\n        Path[] path;\r\n    }\r\n\r\n    struct Path {\r\n        address to;\r\n        uint256 totalNetworkFee;//Network fee is associated with 0xv3 trades\r\n        Route[] routes;\r\n    }\r\n\r\n    struct BuyRoute {\r\n        address payable exchange;\r\n        address targetExchange;\r\n        uint256 fromAmount;\r\n        uint256 toAmount;\r\n        bytes payload;\r\n        uint256 networkFee;//Network fee is associated with 0xv3 trades\r\n    }\r\n\r\n    function ethAddress() internal pure returns (address) {return ETH_ADDRESS;}\r\n\r\n    function wethAddress() internal pure returns (address) {return WETH_ADDRESS;}\r\n\r\n    function maxUint() internal pure returns (uint256) {return MAX_UINT;}\r\n\r\n    function approve(\r\n        address addressToApprove,\r\n        address token,\r\n        uint256 amount\r\n    ) internal {\r\n        if (token != ETH_ADDRESS) {\r\n            IERC20 _token = IERC20(token);\r\n\r\n            uint allowance = _token.allowance(address(this), addressToApprove);\r\n\r\n            if (allowance < amount) {\r\n                _token.safeApprove(addressToApprove, 0);\r\n                _token.safeIncreaseAllowance(addressToApprove, MAX_UINT);\r\n            }\r\n        }\r\n    }\r\n\r\n    function transferTokens(\r\n        address token,\r\n        address payable destination,\r\n        uint256 amount\r\n    )\r\n    internal\r\n    {\r\n        if (amount > 0) {\r\n            if (token == ETH_ADDRESS) {\r\n                (bool result, ) = destination.call{value: amount, gas: 4000}(\"\");\r\n                require(result, \"Failed to transfer Ether\");\r\n            }\r\n            else {\r\n                IERC20(token).safeTransfer(destination, amount);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function tokenBalance(\r\n        address token,\r\n        address account\r\n    )\r\n    internal\r\n    view\r\n    returns (uint256)\r\n    {\r\n        if (token == ETH_ADDRESS) {\r\n            return account.balance;\r\n        } else {\r\n            return IERC20(token).balanceOf(account);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Helper method to refund gas using gas tokens\r\n    */\r\n    function refundGas(\r\n        address account,\r\n        address tokenTransferProxy,\r\n        uint256 initialGas\r\n    )\r\n        internal\r\n    {\r\n        uint256 freeBase = 14154;\r\n        uint256 freeToken = 6870;\r\n        uint256 reimburse = 24000;\r\n\r\n        uint256 tokens = initialGas.sub(\r\n            gasleft()).add(freeBase).div(reimburse.mul(2).sub(freeToken)\r\n        );\r\n\r\n        freeGasTokens(account, tokenTransferProxy, tokens);\r\n    }\r\n\r\n    /**\r\n    * @dev Helper method to free gas tokens\r\n    */\r\n    function freeGasTokens(address account, address tokenTransferProxy, uint256 tokens) internal {\r\n\r\n        uint256 tokensToFree = tokens;\r\n        uint256 safeNumTokens = 0;\r\n        uint256 gas = gasleft();\r\n\r\n        if (gas >= 27710) {\r\n            safeNumTokens = gas.sub(27710).div(1148 + 5722 + 150);\r\n        }\r\n\r\n        if (tokensToFree > safeNumTokens) {\r\n            tokensToFree = safeNumTokens;\r\n        }\r\n        ITokenTransferProxy(tokenTransferProxy).freeReduxTokens(account, tokensToFree);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: original_contracts/IReduxToken.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\ninterface IReduxToken {\r\n\r\n    function freeUpTo(uint256 value) external returns (uint256 freed);\r\n\r\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\r\n\r\n    function mint(uint256 value) external;\r\n}\r\n\r\n// File: original_contracts/TokenTransferProxy.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Allows owner of the contract to transfer tokens on behalf of user.\r\n* User will need to approve this contract to spend tokens on his/her behalf\r\n* on Paraswap platform\r\n*/\r\ncontract TokenTransferProxy is Ownable, ITokenTransferProxy {\r\n    using SafeERC20 for IERC20;\r\n\r\n    IReduxToken public reduxToken;\r\n\r\n    constructor(address _reduxToken) public {\r\n        reduxToken = IReduxToken(_reduxToken);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows owner of the contract to transfer tokens on user's behalf\r\n    * @dev Swapper contract will be the owner of this contract\r\n    * @param token Address of the token\r\n    * @param from Address from which tokens will be transferred\r\n    * @param to Receipent address of the tokens\r\n    * @param amount Amount of tokens to transfer\r\n    */\r\n    function transferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    )\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        IERC20(token).safeTransferFrom(from, to, amount);\r\n    }\r\n\r\n    function freeReduxTokens(address user, uint256 tokensToFree) external override onlyOwner {\r\n        reduxToken.freeFromUpTo(user, tokensToFree);\r\n    }\r\n\r\n}\r\n\r\n// File: original_contracts/IPartnerRegistry.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\ninterface IPartnerRegistry {\r\n\r\n    function getPartnerContract(string calldata referralId) external view returns(address);\r\n\r\n}\r\n\r\n// File: original_contracts/IPartner.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\ninterface IPartner {\r\n\r\n    function getPartnerInfo() external view returns(\r\n        address payable feeWallet,\r\n        uint256 fee,\r\n        uint256 partnerShare,\r\n        uint256 paraswapShare,\r\n        bool positiveSlippageToUser,\r\n        bool noPositiveSlippage\r\n    );\r\n}\r\n\r\n// File: original_contracts/lib/TokenFetcherAugustus.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\ncontract TokenFetcherAugustus {\r\n\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    /**\r\n    * @dev Allows owner of the contract to transfer any tokens which are assigned to the contract\r\n    * This method is for safety if by any chance tokens or ETHs are assigned to the contract by mistake\r\n    * @dev token Address of the token to be transferred\r\n    * @dev destination Recepient of the token\r\n    * @dev amount Amount of tokens to be transferred\r\n    */\r\n    function transferTokens(\r\n        address token,\r\n        address payable destination,\r\n        uint256 amount\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        Utils.transferTokens(token, destination, amount);\r\n    }\r\n}\r\n\r\n// File: original_contracts/IWETH.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\nabstract contract IWETH is IERC20 {\r\n    function deposit() external virtual payable;\r\n    function withdraw(uint256 amount) external virtual;\r\n}\r\n\r\n// File: original_contracts/IUniswapProxy.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\ninterface IUniswapProxy {\r\n    function swapOnUniswap(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path\r\n    )\r\n        external\r\n        returns (uint256);\r\n\r\n    function swapOnUniswapFork(\r\n        address factory,\r\n        bytes32 initCode,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path\r\n    )\r\n        external\r\n        returns (uint256);\r\n\r\n    function buyOnUniswap(\r\n        uint256 amountInMax,\r\n        uint256 amountOut,\r\n        address[] calldata path\r\n    )\r\n        external\r\n        returns (uint256 tokensSold);\r\n\r\n    function buyOnUniswapFork(\r\n        address factory,\r\n        bytes32 initCode,\r\n        uint256 amountInMax,\r\n        uint256 amountOut,\r\n        address[] calldata path\r\n    )\r\n        external\r\n        returns (uint256 tokensSold);\r\n\r\n   function setupTokenSpender(address tokenSpender) external;\r\n\r\n}\r\n\r\n// File: original_contracts/AdapterStorage.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\ncontract AdapterStorage {\r\n\r\n    mapping (bytes32 => bool) internal adapterInitialized;\r\n    mapping (bytes32 => bytes) internal adapterVsData;\r\n    ITokenTransferProxy internal _tokenTransferProxy;\r\n\r\n    function isInitialized(bytes32 key) public view returns(bool) {\r\n        return adapterInitialized[key];\r\n    }\r\n\r\n    function getData(bytes32 key) public view returns(bytes memory) {\r\n        return adapterVsData[key];\r\n    }\r\n\r\n    function getTokenTransferProxy() public view returns (address) {\r\n        return address(_tokenTransferProxy);\r\n    }\r\n}\r\n\r\n// File: original_contracts/AugustusSwapper.sol\r\n\r\npragma solidity 0.7.5;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AugustusSwapper is AdapterStorage, TokenFetcherAugustus {\r\n    using SafeMath for uint256;\r\n\r\n    IWhitelisted private _whitelisted;\r\n\r\n    IPartnerRegistry private _partnerRegistry;\r\n\r\n    address payable private _feeWallet;\r\n\r\n    address private _uniswapProxy;\r\n\r\n    address private _pendingUniswapProxy;\r\n\r\n    uint256 private _changeRequestedBlock;\r\n\r\n    //Number of blocks after which UniswapProxy change can be confirmed\r\n    uint256 private _timelock;\r\n\r\n    event Swapped(\r\n        address initiator,\r\n        address indexed beneficiary,\r\n        address indexed srcToken,\r\n        address indexed destToken,\r\n        uint256 srcAmount,\r\n        uint256 receivedAmount,\r\n        uint256 expectedAmount,\r\n        string referrer\r\n    );\r\n\r\n    event Bought(\r\n        address initiator,\r\n        address indexed beneficiary,\r\n        address indexed srcToken,\r\n        address indexed destToken,\r\n        uint256 srcAmount,\r\n        uint256 receivedAmount,\r\n        string referrer\r\n    );\r\n\r\n    event FeeTaken(\r\n        uint256 fee,\r\n        uint256 partnerShare,\r\n        uint256 paraswapShare\r\n    );\r\n\r\n    event AdapterInitialized(address indexed adapter);\r\n\r\n    modifier onlySelf() {\r\n        require(\r\n            msg.sender == address(this),\r\n            \"AugustusSwapper: Invalid access\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    receive () payable external {\r\n\r\n    }\r\n\r\n    function getTimeLock() external view returns(uint256) {\r\n      return _timelock;\r\n    }\r\n\r\n    function initialize(\r\n        address whitelist,\r\n        address reduxToken,\r\n        address partnerRegistry,\r\n        address payable feeWallet,\r\n        address uniswapProxy,\r\n        uint256 timelock\r\n    )\r\n        external\r\n    {\r\n        require(address(_tokenTransferProxy) == address(0), \"Contract already initialized!!\");\r\n        _partnerRegistry = IPartnerRegistry(partnerRegistry);\r\n        TokenTransferProxy lTokenTransferProxy = new TokenTransferProxy(reduxToken);\r\n        _tokenTransferProxy = ITokenTransferProxy(lTokenTransferProxy);\r\n        _whitelisted = IWhitelisted(whitelist);\r\n        _feeWallet = feeWallet;\r\n        _uniswapProxy = uniswapProxy;\r\n        _owner = msg.sender;\r\n        _timelock = timelock;\r\n    }\r\n\r\n    function initializeAdapter(address adapter, bytes calldata data) external onlyOwner {\r\n\r\n        require(\r\n            _whitelisted.hasRole(_whitelisted.WHITELISTED_ROLE(), adapter),\r\n            \"Exchange not whitelisted\"\r\n        );\r\n        (bool success,) = adapter.delegatecall(abi.encodeWithSelector(IExchange.initialize.selector, data));\r\n        require(success, \"Failed to initialize adapter\");\r\n        emit AdapterInitialized(adapter);\r\n    }\r\n\r\n    function getPendingUniswapProxy() external view returns(address) {\r\n      return  _pendingUniswapProxy;\r\n    }\r\n\r\n    function getChangeRequestedBlock() external view returns(uint256) {\r\n      return _changeRequestedBlock;\r\n    }\r\n\r\n    function getUniswapProxy() external view returns(address) {\r\n        return _uniswapProxy;\r\n    }\r\n\r\n    function getVersion() external view returns(string memory) {\r\n        return \"4.0.0\";\r\n    }\r\n\r\n    function getPartnerRegistry() external view returns(address) {\r\n        return address(_partnerRegistry);\r\n    }\r\n\r\n    function getWhitelistAddress() external view returns(address) {\r\n        return address(_whitelisted);\r\n    }\r\n\r\n    function getFeeWallet() external view returns(address) {\r\n        return _feeWallet;\r\n    }\r\n\r\n    function changeUniswapProxy(address uniswapProxy) external onlyOwner {\r\n        require(uniswapProxy != address(0), \"Invalid address\");\r\n        _changeRequestedBlock = block.number;\r\n        _pendingUniswapProxy = uniswapProxy;\r\n    }\r\n\r\n    function confirmUniswapProxyChange() external onlyOwner {\r\n        require(\r\n            block.number >= _changeRequestedBlock.add(_timelock),\r\n            \"Time lock check failed\"\r\n        );\r\n\r\n        require(_pendingUniswapProxy != address(0), \"No pending request\");\r\n\r\n        _changeRequestedBlock = 0;\r\n        _uniswapProxy = _pendingUniswapProxy;\r\n        _pendingUniswapProxy = address(0);\r\n    }\r\n\r\n    function setFeeWallet(address payable feeWallet) external onlyOwner {\r\n        require(feeWallet != address(0), \"Invalid address\");\r\n        _feeWallet = feeWallet;\r\n    }\r\n\r\n    function setPartnerRegistry(address partnerRegistry) external onlyOwner {\r\n        require(partnerRegistry != address(0), \"Invalid address\");\r\n        _partnerRegistry = IPartnerRegistry(partnerRegistry);\r\n    }\r\n\r\n    function setWhitelistAddress(address whitelisted) external onlyOwner {\r\n        require(whitelisted != address(0), \"Invalid whitelist address\");\r\n        _whitelisted = IWhitelisted(whitelisted);\r\n    }\r\n\r\n    function swapOnUniswap(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        uint8 referrer\r\n    )\r\n        external\r\n        payable\r\n    {\r\n        //DELEGATING CALL TO THE ADAPTER\r\n        (bool success, bytes memory result) = _uniswapProxy.delegatecall(\r\n            abi.encodeWithSelector(\r\n                IUniswapProxy.swapOnUniswap.selector,\r\n                amountIn,\r\n                amountOutMin,\r\n                path\r\n            )\r\n        );\r\n        require(success, \"Call to uniswap proxy failed\");\r\n\r\n    }\r\n\r\n    function buyOnUniswap(\r\n        uint256 amountInMax,\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        uint8 referrer\r\n    )\r\n        external\r\n        payable\r\n    {\r\n        //DELEGATING CALL TO THE ADAPTER\r\n        (bool success, bytes memory result) = _uniswapProxy.delegatecall(\r\n            abi.encodeWithSelector(\r\n                IUniswapProxy.buyOnUniswap.selector,\r\n                amountInMax,\r\n                amountOut,\r\n                path\r\n            )\r\n        );\r\n        require(success, \"Call to uniswap proxy failed\");\r\n\r\n    }\r\n\r\n    function buyOnUniswapFork(\r\n        address factory,\r\n        bytes32 initCode,\r\n        uint256 amountInMax,\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        uint8 referrer\r\n    )\r\n        external\r\n        payable\r\n    {\r\n        //DELEGATING CALL TO THE ADAPTER\r\n        (bool success, bytes memory result) = _uniswapProxy.delegatecall(\r\n            abi.encodeWithSelector(\r\n                IUniswapProxy.buyOnUniswapFork.selector,\r\n                factory,\r\n                initCode,\r\n                amountInMax,\r\n                amountOut,\r\n                path\r\n            )\r\n        );\r\n        require(success, \"Call to uniswap proxy failed\");\r\n\r\n    }\r\n\r\n    function swapOnUniswapFork(\r\n        address factory,\r\n        bytes32 initCode,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        uint8 referrer\r\n    )\r\n        external\r\n        payable\r\n\r\n    {\r\n        //DELEGATING CALL TO THE ADAPTER\r\n        (bool success, bytes memory result) = _uniswapProxy.delegatecall(\r\n            abi.encodeWithSelector(\r\n                IUniswapProxy.swapOnUniswapFork.selector,\r\n                factory,\r\n                initCode,\r\n                amountIn,\r\n                amountOutMin,\r\n                path\r\n            )\r\n        );\r\n        require(success, \"Call to uniswap proxy failed\");\r\n\r\n    }\r\n\r\n    function simplBuy(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 fromAmount,\r\n        uint256 toAmount,\r\n        address[] memory callees,\r\n        bytes memory exchangeData,\r\n        uint256[] memory startIndexes,\r\n        uint256[] memory values,\r\n        address payable beneficiary,\r\n        string memory referrer,\r\n        bool useReduxToken\r\n    )\r\n        external\r\n        payable\r\n\r\n    {\r\n        beneficiary = beneficiary == address(0) ? msg.sender : beneficiary;\r\n        uint receivedAmount = performSimpleSwap(\r\n            fromToken,\r\n            toToken,\r\n            fromAmount,\r\n            toAmount,\r\n            toAmount,//expected amount and to amount are same in case of buy\r\n            callees,\r\n            exchangeData,\r\n            startIndexes,\r\n            values,\r\n            beneficiary,\r\n            referrer,\r\n            useReduxToken\r\n        );\r\n\r\n        uint256 remainingAmount = Utils.tokenBalance(\r\n            fromToken,\r\n            address(this)\r\n        );\r\n\r\n        if (remainingAmount > 0) {\r\n            Utils.transferTokens(address(fromToken), msg.sender, remainingAmount);\r\n        }\r\n\r\n        emit Bought(\r\n            msg.sender,\r\n            beneficiary,\r\n            fromToken,\r\n            toToken,\r\n            fromAmount,\r\n            receivedAmount,\r\n            referrer\r\n        );\r\n    }\r\n\r\n    function approve(\r\n        address token,\r\n        address to,\r\n        uint256 amount\r\n    )\r\n        external\r\n        onlySelf\r\n    {\r\n        Utils.approve(to, token, amount);\r\n    }\r\n\r\n    function simpleSwap(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 fromAmount,\r\n        uint256 toAmount,\r\n        uint256 expectedAmount,\r\n        address[] memory callees,\r\n        bytes memory exchangeData,\r\n        uint256[] memory startIndexes,\r\n        uint256[] memory values,\r\n        address payable beneficiary,\r\n        string memory referrer,\r\n        bool useReduxToken\r\n    )\r\n        public\r\n        payable\r\n        returns (uint256 receivedAmount)\r\n    {\r\n        beneficiary = beneficiary == address(0) ? msg.sender : beneficiary;\r\n        receivedAmount = performSimpleSwap(\r\n            fromToken,\r\n            toToken,\r\n            fromAmount,\r\n            toAmount,\r\n            expectedAmount,\r\n            callees,\r\n            exchangeData,\r\n            startIndexes,\r\n            values,\r\n            beneficiary,\r\n            referrer,\r\n            useReduxToken\r\n        );\r\n\r\n        emit Swapped(\r\n            msg.sender,\r\n            beneficiary,\r\n            fromToken,\r\n            toToken,\r\n            fromAmount,\r\n            receivedAmount,\r\n            expectedAmount,\r\n            referrer\r\n        );\r\n\r\n        return receivedAmount;\r\n    }\r\n\r\n    function transferTokensFromProxy(\r\n        address token,\r\n        uint256 amount\r\n    )\r\n      private\r\n    {\r\n        if (token != Utils.ethAddress()) {\r\n            _tokenTransferProxy.transferFrom(\r\n                token,\r\n                msg.sender,\r\n                address(this),\r\n                amount\r\n            );\r\n        }\r\n    }\r\n\r\n    function performSimpleSwap(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 fromAmount,\r\n        uint256 toAmount,\r\n        uint256 expectedAmount,\r\n        address[] memory callees,\r\n        bytes memory exchangeData,\r\n        uint256[] memory startIndexes,\r\n        uint256[] memory values,\r\n        address payable beneficiary,\r\n        string memory referrer,\r\n        bool useReduxToken\r\n    )\r\n        private\r\n        returns (uint256 receivedAmount)\r\n    {\r\n        require(toAmount > 0, \"toAmount is too low\");\r\n        require(\r\n            callees.length + 1 == startIndexes.length,\r\n            \"Start indexes must be 1 greater then number of callees\"\r\n        );\r\n\r\n        uint initialGas = gasleft();\r\n\r\n        //If source token is not ETH than transfer required amount of tokens\r\n        //from sender to this contract\r\n        transferTokensFromProxy(fromToken, fromAmount);\r\n\r\n        for (uint256 i = 0; i < callees.length; i++) {\r\n            require(\r\n                callees[i] != address(_tokenTransferProxy),\r\n                \"Can not call TokenTransferProxy Contract\"\r\n            );\r\n\r\n            bool result = externalCall(\r\n                callees[i], //destination\r\n                values[i], //value to send\r\n                startIndexes[i], // start index of call data\r\n                startIndexes[i + 1].sub(startIndexes[i]), // length of calldata\r\n                exchangeData// total calldata\r\n            );\r\n            require(result, \"External call failed\");\r\n        }\r\n\r\n        receivedAmount = Utils.tokenBalance(\r\n            toToken,\r\n            address(this)\r\n        );\r\n\r\n        require(\r\n            receivedAmount >= toAmount,\r\n            \"Received amount of tokens are less then expected\"\r\n        );\r\n\r\n        takeFeeAndTransferTokens(\r\n            toToken,\r\n            expectedAmount,\r\n            receivedAmount,\r\n            beneficiary,\r\n            referrer\r\n        );\r\n\r\n        if (useReduxToken) {\r\n            Utils.refundGas(msg.sender, address(_tokenTransferProxy), initialGas);\r\n        }\r\n\r\n        return receivedAmount;\r\n    }\r\n\r\n    /**\r\n   * @dev This function sends the WETH returned during the exchange to the user.\r\n   * @param token: The WETH Address\r\n   */\r\n    function withdrawAllWETH(IWETH token) external onlySelf {\r\n        uint256 amount = token.balanceOf(address(this));\r\n        token.withdraw(amount);\r\n    }\r\n\r\n    /**\r\n   * @dev The function which performs the multi path swap.\r\n   * @param data Data required to perform swap.\r\n   */\r\n    function multiSwap(\r\n        Utils.SellData memory data\r\n    )\r\n        public\r\n        payable\r\n        returns (uint256)\r\n    {\r\n        uint initialGas = gasleft();\r\n\r\n        address fromToken = data.fromToken;\r\n        uint256 fromAmount = data.fromAmount;\r\n        uint256 toAmount = data.toAmount;\r\n        uint256 expectedAmount = data.expectedAmount;\r\n        address payable beneficiary = data.beneficiary == address(0) ? msg.sender : data.beneficiary;\r\n        string memory referrer = data.referrer;\r\n        Utils.Path[] memory path = data.path;\r\n        address toToken = path[path.length - 1].to;\r\n        bool useReduxToken = data.useReduxToken;\r\n\r\n        //Referral can never be empty\r\n        require(bytes(referrer).length > 0, \"Invalid referrer\");\r\n\r\n        require(toAmount > 0, \"To amount can not be 0\");\r\n\r\n        //if fromToken is not ETH then transfer tokens from user to this contract\r\n        if (fromToken != Utils.ethAddress()) {\r\n            _tokenTransferProxy.transferFrom(\r\n                fromToken,\r\n                msg.sender,\r\n                address(this),\r\n                fromAmount\r\n            );\r\n        }\r\n\r\n        performSwap(\r\n            fromToken,\r\n            fromAmount,\r\n            path\r\n        );\r\n\r\n\r\n        uint256 receivedAmount = Utils.tokenBalance(\r\n            toToken,\r\n            address(this)\r\n        );\r\n\r\n        require(\r\n            receivedAmount >= toAmount,\r\n            \"Received amount of tokens are less then expected\"\r\n        );\r\n\r\n\r\n        takeFeeAndTransferTokens(\r\n            toToken,\r\n            expectedAmount,\r\n            receivedAmount,\r\n            beneficiary,\r\n            referrer\r\n        );\r\n\r\n        if (useReduxToken) {\r\n            Utils.refundGas(msg.sender, address(_tokenTransferProxy), initialGas);\r\n        }\r\n\r\n        emit Swapped(\r\n            msg.sender,\r\n            beneficiary,\r\n            fromToken,\r\n            toToken,\r\n            fromAmount,\r\n            receivedAmount,\r\n            expectedAmount,\r\n            referrer\r\n        );\r\n\r\n        return receivedAmount;\r\n    }\r\n\r\n    /**\r\n   * @dev The function which performs the mega path swap.\r\n   * @param data Data required to perform swap.\r\n   */\r\n    function megaSwap(\r\n        Utils.MegaSwapSellData memory data\r\n    )\r\n        public\r\n        payable\r\n        returns (uint256)\r\n    {\r\n        uint initialGas = gasleft();\r\n\r\n        address fromToken = data.fromToken;\r\n        uint256 fromAmount = data.fromAmount;\r\n        uint256 toAmount = data.toAmount;\r\n        uint256 expectedAmount = data.expectedAmount;\r\n        address payable beneficiary = data.beneficiary == address(0) ? msg.sender : data.beneficiary;\r\n        string memory referrer = data.referrer;\r\n        Utils.MegaSwapPath[] memory path = data.path;\r\n        address toToken = path[0].path[path[0].path.length - 1].to;\r\n        bool useReduxToken = data.useReduxToken;\r\n\r\n        //Referral can never be empty\r\n        require(bytes(referrer).length > 0, \"Invalid referrer\");\r\n\r\n        require(toAmount > 0, \"To amount can not be 0\");\r\n\r\n        //if fromToken is not ETH then transfer tokens from user to this contract\r\n        if (fromToken != Utils.ethAddress()) {\r\n            _tokenTransferProxy.transferFrom(\r\n                fromToken,\r\n                msg.sender,\r\n                address(this),\r\n                fromAmount\r\n            );\r\n        }\r\n\r\n        for (uint8 i = 0; i < uint8(path.length); i++) {\r\n            uint256 _fromAmount = fromAmount.mul(path[i].fromAmountPercent).div(10000);\r\n            if (i == path.length - 1) {\r\n                _fromAmount = Utils.tokenBalance(address(fromToken), address(this));\r\n            }\r\n            performSwap(\r\n                fromToken,\r\n                _fromAmount,\r\n                path[i].path\r\n            );\r\n        }\r\n\r\n        uint256 receivedAmount = Utils.tokenBalance(\r\n            toToken,\r\n            address(this)\r\n        );\r\n\r\n        require(\r\n            receivedAmount >= toAmount,\r\n            \"Received amount of tokens are less then expected\"\r\n        );\r\n\r\n\r\n        takeFeeAndTransferTokens(\r\n            toToken,\r\n            expectedAmount,\r\n            receivedAmount,\r\n            beneficiary,\r\n            referrer\r\n        );\r\n\r\n        if (useReduxToken) {\r\n            Utils.refundGas(msg.sender, address(_tokenTransferProxy), initialGas);\r\n        }\r\n\r\n        emit Swapped(\r\n            msg.sender,\r\n            beneficiary,\r\n            fromToken,\r\n            toToken,\r\n            fromAmount,\r\n            receivedAmount,\r\n            expectedAmount,\r\n            referrer\r\n        );\r\n\r\n        return receivedAmount;\r\n    }\r\n\r\n    /**\r\n   * @dev The function which performs the single path buy.\r\n   * @param data Data required to perform swap.\r\n   */\r\n    function buy(\r\n        Utils.BuyData memory data\r\n    )\r\n        public\r\n        payable\r\n        returns (uint256)\r\n    {\r\n\r\n        address fromToken = data.fromToken;\r\n        uint256 fromAmount = data.fromAmount;\r\n        uint256 toAmount = data.toAmount;\r\n        address payable beneficiary = data.beneficiary == address(0) ? msg.sender : data.beneficiary;\r\n        string memory referrer = data.referrer;\r\n        Utils.BuyRoute[] memory route = data.route;\r\n        address toToken = data.toToken;\r\n        bool useReduxToken = data.useReduxToken;\r\n\r\n        //Referral id can never be empty\r\n        require(bytes(referrer).length > 0, \"Invalid referrer\");\r\n\r\n        require(toAmount > 0, \"To amount can not be 0\");\r\n\r\n        uint256 receivedAmount = performBuy(\r\n            fromToken,\r\n            toToken,\r\n            fromAmount,\r\n            toAmount,\r\n            route,\r\n            useReduxToken\r\n        );\r\n\r\n        takeFeeAndTransferTokens(\r\n            toToken,\r\n            toAmount,\r\n            receivedAmount,\r\n            beneficiary,\r\n            referrer\r\n        );\r\n\r\n        uint256 remainingAmount = Utils.tokenBalance(\r\n            fromToken,\r\n            address(this)\r\n        );\r\n\r\n        if (remainingAmount > 0) {\r\n            Utils.transferTokens(fromToken, msg.sender, remainingAmount);\r\n        }\r\n\r\n        emit Bought(\r\n            msg.sender,\r\n            beneficiary,\r\n            fromToken,\r\n            toToken,\r\n            fromAmount,\r\n            receivedAmount,\r\n            referrer\r\n        );\r\n\r\n        return receivedAmount;\r\n    }\r\n\r\n    //Helper function to transfer final amount to the beneficiaries\r\n    function takeFeeAndTransferTokens(\r\n        address toToken,\r\n        uint256 expectedAmount,\r\n        uint256 receivedAmount,\r\n        address payable beneficiary,\r\n        string memory referrer\r\n\r\n    )\r\n        private\r\n    {\r\n        uint256 remainingAmount = receivedAmount;\r\n\r\n        address partnerContract = _partnerRegistry.getPartnerContract(referrer);\r\n\r\n        //Take partner fee\r\n        ( uint256 fee ) = _takeFee(\r\n            toToken,\r\n            receivedAmount,\r\n            expectedAmount,\r\n            partnerContract\r\n        );\r\n        remainingAmount = receivedAmount.sub(fee);\r\n\r\n        //If there is a positive slippage after taking partner fee then 50% goes to paraswap and 50% to the user\r\n        if ((remainingAmount > expectedAmount) && fee == 0) {\r\n            uint256 positiveSlippageShare = remainingAmount.sub(expectedAmount).div(2);\r\n            remainingAmount = remainingAmount.sub(positiveSlippageShare);\r\n            Utils.transferTokens(toToken, _feeWallet, positiveSlippageShare);\r\n        }\r\n\r\n        Utils.transferTokens(toToken, beneficiary, remainingAmount);\r\n\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev Source take from GNOSIS MultiSigWallet\r\n    * @dev https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol\r\n    */\r\n    function externalCall(\r\n        address destination,\r\n        uint256 value,\r\n        uint256 dataOffset,\r\n        uint dataLength,\r\n        bytes memory data\r\n    )\r\n    private\r\n    returns (bool)\r\n    {\r\n        bool result = false;\r\n\r\n        assembly {\r\n            let x := mload(0x40)   // \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\r\n\r\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\r\n            result := call(\r\n                sub(gas(), 34710), // 34710 is the value that solidity is currently emitting\r\n                // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\r\n                // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\r\n                destination,\r\n                value,\r\n                add(d, dataOffset),\r\n                dataLength, // Size of the input (in bytes) - this is what fixes the padding problem\r\n                x,\r\n                0                  // Output is ignored, therefore the output size is zero\r\n            )\r\n        }\r\n        return result;\r\n    }\r\n\r\n    //Helper function to perform swap\r\n    function performSwap(\r\n        address fromToken,\r\n        uint256 fromAmount,\r\n        Utils.Path[] memory path\r\n    )\r\n        private\r\n    {\r\n\r\n        require(path.length > 0, \"Path not provided for swap\");\r\n\r\n        //Assuming path will not be too long to reach out of gas exception\r\n        for (uint i = 0; i < path.length; i++) {\r\n            //_fromToken will be either fromToken or toToken of the previous path\r\n            address _fromToken = i > 0 ? path[i - 1].to : fromToken;\r\n            address _toToken = path[i].to;\r\n\r\n            uint256 _fromAmount = i > 0 ? Utils.tokenBalance(_fromToken, address(this)) : fromAmount;\r\n            if (i > 0 && _fromToken == Utils.ethAddress()) {\r\n                _fromAmount = _fromAmount.sub(path[i].totalNetworkFee);\r\n            }\r\n\r\n            for (uint j = 0; j < path[i].routes.length; j++) {\r\n                Utils.Route memory route = path[i].routes[j];\r\n\r\n                //Check if exchange is supported\r\n                require(\r\n                    _whitelisted.hasRole(_whitelisted.WHITELISTED_ROLE(), route.exchange),\r\n                    \"Exchange not whitelisted\"\r\n                );\r\n\r\n                //Calculating tokens to be passed to the relevant exchange\r\n                //percentage should be 200 for 2%\r\n                uint fromAmountSlice = _fromAmount.mul(route.percent).div(10000);\r\n                uint256 value = route.networkFee;\r\n\r\n                if (i > 0 && j == path[i].routes.length.sub(1)) {\r\n                    uint256 remBal = Utils.tokenBalance(address(_fromToken), address(this));\r\n\r\n                    fromAmountSlice = remBal;\r\n\r\n                    if (address(_fromToken) == Utils.ethAddress()) {\r\n                        //subtract network fee\r\n                        fromAmountSlice = fromAmountSlice.sub(value);\r\n                    }\r\n                }\r\n\r\n                //DELEGATING CALL TO THE ADAPTER\r\n                (bool success,) = route.exchange.delegatecall(\r\n                    abi.encodeWithSelector(\r\n                        IExchange.swap.selector,\r\n                        _fromToken,\r\n                        _toToken,\r\n                        fromAmountSlice,\r\n                        1,\r\n                        route.targetExchange,\r\n                        route.payload\r\n                    )\r\n                );\r\n\r\n                require(success, \"Call to adapter failed\");\r\n            }\r\n        }\r\n    }\r\n\r\n    //Helper function to perform swap\r\n    function performBuy(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 fromAmount,\r\n        uint256 toAmount,\r\n        Utils.BuyRoute[] memory routes,\r\n        bool useReduxToken\r\n    )\r\n        private\r\n        returns(uint256)\r\n    {\r\n        uint initialGas = gasleft();\r\n\r\n        //if fromToken is not ETH then transfer tokens from user to this contract\r\n        if (fromToken != Utils.ethAddress()) {\r\n            _tokenTransferProxy.transferFrom(\r\n                fromToken,\r\n                msg.sender,\r\n                address(this),\r\n                fromAmount\r\n            );\r\n        }\r\n\r\n        for (uint j = 0; j < routes.length; j++) {\r\n            Utils.BuyRoute memory route = routes[j];\r\n\r\n            //Check if exchange is supported\r\n            require(\r\n                _whitelisted.hasRole(_whitelisted.WHITELISTED_ROLE(), route.exchange),\r\n                \"Exchange not whitelisted\"\r\n            );\r\n\r\n            //delegate Call to the exchange\r\n            (bool success,) = route.exchange.delegatecall(\r\n                abi.encodeWithSelector(\r\n                    IExchange.buy.selector,\r\n                    fromToken,\r\n                    toToken,\r\n                    route.fromAmount,\r\n                    route.toAmount,\r\n                    route.targetExchange,\r\n                    route.payload\r\n                )\r\n            );\r\n            require(success, \"Call to adapter failed\");\r\n        }\r\n\r\n        uint256 receivedAmount = Utils.tokenBalance(\r\n            toToken,\r\n            address(this)\r\n        );\r\n        require(\r\n            receivedAmount >= toAmount,\r\n            \"Received amount of tokens are less then expected tokens\"\r\n        );\r\n\r\n        if (useReduxToken) {\r\n            Utils.refundGas(msg.sender, address(_tokenTransferProxy), initialGas);\r\n        }\r\n        return receivedAmount;\r\n    }\r\n\r\n    function _takeFee(\r\n        address toToken,\r\n        uint256 receivedAmount,\r\n        uint256 expectedAmount,\r\n        address partnerContract\r\n    )\r\n        private\r\n        returns(uint256 fee)\r\n    {\r\n        //If there is no partner associated with the referral id then no fee will be taken\r\n        if (partnerContract == address(0)) {\r\n            return (0);\r\n        }\r\n\r\n        (\r\n            address payable partnerFeeWallet,\r\n            uint256 feePercent,\r\n            uint256 partnerSharePercent,\r\n            ,\r\n            bool positiveSlippageToUser,\r\n            bool noPositiveSlippage\r\n        ) = IPartner(partnerContract).getPartnerInfo();\r\n\r\n        uint256 partnerShare = 0;\r\n        uint256 paraswapShare = 0;\r\n\r\n        if (!noPositiveSlippage && feePercent <= 50 && receivedAmount > expectedAmount) {\r\n            uint256 halfPositiveSlippage = receivedAmount.sub(expectedAmount).div(2);\r\n            //Calculate total fee to be taken\r\n            fee = expectedAmount.mul(feePercent).div(10000);\r\n            //Calculate partner's share\r\n            partnerShare = fee.mul(partnerSharePercent).div(10000);\r\n            //All remaining fee is paraswap's share\r\n            paraswapShare = fee.sub(partnerShare);\r\n            paraswapShare = paraswapShare.add(halfPositiveSlippage);\r\n\r\n            fee = fee.add(halfPositiveSlippage);\r\n\r\n            if (!positiveSlippageToUser) {\r\n                partnerShare = partnerShare.add(halfPositiveSlippage);\r\n                fee = fee.add(halfPositiveSlippage);\r\n            }\r\n        }\r\n        else {\r\n            //Calculate total fee to be taken\r\n            fee = receivedAmount.mul(feePercent).div(10000);\r\n            //Calculate partner's share\r\n            partnerShare = fee.mul(partnerSharePercent).div(10000);\r\n            //All remaining fee is paraswap's share\r\n            paraswapShare = fee.sub(partnerShare);\r\n        }\r\n        Utils.transferTokens(toToken, partnerFeeWallet, partnerShare);\r\n        Utils.transferTokens(toToken, _feeWallet, paraswapShare);\r\n\r\n        emit FeeTaken(fee, partnerShare, paraswapShare);\r\n        return (fee);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reduxToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokensToFree\",\"type\":\"uint256\"}],\"name\":\"freeReduxTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reduxToken\",\"outputs\":[{\"internalType\":\"contract IReduxToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenTransferProxy","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"25000","ConstructorArguments":"000000000000000000000000000000000000cb2d80a37898be43579c7b616844","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ab62661474abad01a8ead0fb0a1c72f0b0032e0f272241e9e47d63d3fc96b431"}]}