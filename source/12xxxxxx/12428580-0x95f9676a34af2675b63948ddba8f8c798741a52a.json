{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier:  AGPL-3.0-or-later // hevm: flattened sources of contracts/library/Util.sol\r\npragma solidity =0.6.11 >=0.6.0 <0.8.0;\r\n\r\n////// lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\r\n/* pragma solidity >=0.6.0 <0.8.0; */\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n////// contracts/interfaces/IERC20Details.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\"; */\r\n\r\ninterface IERC20Details is IERC20 {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint256);\r\n\r\n}\r\n\r\n////// contracts/interfaces/IMapleGlobals.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\ninterface IMapleGlobals {\r\n\r\n    function pendingGovernor() external view returns (address);\r\n\r\n    function governor() external view returns (address);\r\n\r\n    function globalAdmin() external view returns (address);\r\n\r\n    function mpl() external view returns (address);\r\n\r\n    function mapleTreasury() external view returns (address);\r\n\r\n    function isValidBalancerPool(address) external view returns (bool);\r\n\r\n    function treasuryFee() external view returns (uint256);\r\n\r\n    function investorFee() external view returns (uint256);\r\n\r\n    function defaultGracePeriod() external view returns (uint256);\r\n\r\n    function fundingPeriod() external view returns (uint256);\r\n\r\n    function swapOutRequired() external view returns (uint256);\r\n\r\n    function isValidLiquidityAsset(address) external view returns (bool);\r\n\r\n    function isValidCollateralAsset(address) external view returns (bool);\r\n\r\n    function isValidPoolDelegate(address) external view returns (bool);\r\n\r\n    function validCalcs(address) external view returns (bool);\r\n\r\n    function isValidCalc(address, uint8) external view returns (bool);\r\n\r\n    function getLpCooldownParams() external view returns (uint256, uint256);\r\n\r\n    function isValidLoanFactory(address) external view returns (bool);\r\n\r\n    function isValidSubFactory(address, address, uint8) external view returns (bool);\r\n\r\n    function isValidPoolFactory(address) external view returns (bool);\r\n    \r\n    function getLatestPrice(address) external view returns (uint256);\r\n    \r\n    function defaultUniswapPath(address, address) external view returns (address);\r\n\r\n    function minLoanEquity() external view returns (uint256);\r\n    \r\n    function maxSwapSlippage() external view returns (uint256);\r\n\r\n    function protocolPaused() external view returns (bool);\r\n\r\n    function stakerCooldownPeriod() external view returns (uint256);\r\n\r\n    function lpCooldownPeriod() external view returns (uint256);\r\n\r\n    function stakerUnstakeWindow() external view returns (uint256);\r\n\r\n    function lpWithdrawWindow() external view returns (uint256);\r\n\r\n    function oracleFor(address) external view returns (address);\r\n\r\n    function validSubFactories(address, address) external view returns (bool);\r\n\r\n    function setStakerCooldownPeriod(uint256) external;\r\n\r\n    function setLpCooldownPeriod(uint256) external;\r\n\r\n    function setStakerUnstakeWindow(uint256) external;\r\n\r\n    function setLpWithdrawWindow(uint256) external;\r\n\r\n    function setMaxSwapSlippage(uint256) external;\r\n\r\n    function setGlobalAdmin(address) external;\r\n\r\n    function setValidBalancerPool(address, bool) external;\r\n\r\n    function setProtocolPause(bool) external;\r\n\r\n    function setValidPoolFactory(address, bool) external;\r\n\r\n    function setValidLoanFactory(address, bool) external;\r\n\r\n    function setValidSubFactory(address, address, bool) external;\r\n\r\n    function setDefaultUniswapPath(address, address, address) external;\r\n\r\n    function setPoolDelegateAllowlist(address, bool) external;\r\n\r\n    function setCollateralAsset(address, bool) external;\r\n\r\n    function setLiquidityAsset(address, bool) external;\r\n\r\n    function setCalc(address, bool) external;\r\n\r\n    function setInvestorFee(uint256) external;\r\n\r\n    function setTreasuryFee(uint256) external;\r\n\r\n    function setMapleTreasury(address) external;\r\n\r\n    function setDefaultGracePeriod(uint256) external;\r\n\r\n    function setMinLoanEquity(uint256) external;\r\n\r\n    function setFundingPeriod(uint256) external;\r\n\r\n    function setSwapOutRequired(uint256) external;\r\n\r\n    function setPriceOracle(address, address) external;\r\n\r\n    function setPendingGovernor(address) external;\r\n\r\n    function acceptGovernor() external;\r\n\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/math/SafeMath.sol\r\n/* pragma solidity >=0.6.0 <0.8.0; */\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n////// contracts/library/Util.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"../interfaces/IERC20Details.sol\"; */\r\n/* import \"../interfaces/IMapleGlobals.sol\"; */\r\n/* import \"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\"; */\r\n\r\n/// @title Util is a library that contains utility functions.\r\nlibrary Util {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n        @dev    Calculates the minimum amount from a swap (adjustable for price slippage).\r\n        @param  globals   Instance of a MapleGlobals.\r\n        @param  fromAsset Address of ERC-20 that will be swapped.\r\n        @param  toAsset   Address of ERC-20 that will returned from swap.\r\n        @param  swapAmt   Amount of `fromAsset` to be swapped.\r\n        @return Expected amount of `toAsset` to receive from swap based on current oracle prices.\r\n    */\r\n    function calcMinAmount(IMapleGlobals globals, address fromAsset, address toAsset, uint256 swapAmt) external view returns (uint256) {\r\n        return \r\n            swapAmt\r\n                .mul(globals.getLatestPrice(fromAsset))           // Convert from `fromAsset` value.\r\n                .mul(10 ** IERC20Details(toAsset).decimals())     // Convert to `toAsset` decimal precision.\r\n                .div(globals.getLatestPrice(toAsset))             // Convert to `toAsset` value.\r\n                .div(10 ** IERC20Details(fromAsset).decimals());  // Convert from `fromAsset` decimal precision.\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IMapleGlobals\",\"name\":\"globals\",\"type\":\"IMapleGlobals\"},{\"internalType\":\"address\",\"name\":\"fromAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmt\",\"type\":\"uint256\"}],\"name\":\"calcMinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Util","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a8496a6b628f112cca91c35b74d306d90befa3f23ceae759070c25d1c6793a13"}]}