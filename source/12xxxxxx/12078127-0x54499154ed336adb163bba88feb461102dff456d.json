{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n *\r\n*/\r\n \r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n \r\n  function ceil(uint a, uint m) internal pure returns (uint r) {\r\n    return (a + m - 1) / m * m;\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\nabstract contract ERC20Interface {\r\n    function totalSupply() public virtual view returns (uint);\r\n    function balanceOf(address tokenOwner) public virtual view returns (uint256 balance);\r\n    function allowance(address tokenOwner, address spender) public virtual view returns (uint256 remaining);\r\n    function transfer(address to, uint256 tokens) public virtual returns (bool success);\r\n    function approve(address spender, uint256 tokens) public virtual returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) public virtual returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n}\r\n\r\n\r\ncontract HedgeHog is ERC20Interface, Owned {\r\n    using SafeMath for uint256;\r\n   \r\n    string public symbol = \"HHOG\";\r\n    string public  name = \"HedgeHog\";\r\n    uint256 public decimals = 18;\r\n    \r\n    uint256 _totalSupply = 1e9 * 10 ** (decimals); // 1,000,000,000\r\n    \r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n   \r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor (address owner) public {\r\n        \r\n        owner = 0x5E220057920Dcc7826AB5e5EB5Cf4Bb41C6CD902;\r\n        \r\n        balances[address(owner)] =  1000000000 * 10 ** (18); // 1,000,000,000\r\n        emit Transfer(address(0), address(owner), 1000000000 * 10 ** (18));\r\n    }\r\n\r\n   \r\n    /** ERC20Interface function's implementation **/\r\n   \r\n    function totalSupply() public override view returns (uint256){\r\n       return _totalSupply;\r\n    }\r\n   \r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public override view returns (uint256 balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint256 tokens) public override returns (bool success){\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender,spender,tokens);\r\n        return true;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public override view returns (uint256 remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint256 tokens) public override returns (bool success) {\r\n        // prevent transfer to 0x0, use burn instead\r\n        require(address(to) != address(0));\r\n        require(balances[msg.sender] >= tokens );\r\n        require(balances[to] + tokens >= balances[to]);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n       \r\n        uint256 deduction = deductionsToApply(tokens);\r\n        applyDeductions(deduction);\r\n        \r\n        balances[to] = balances[to].add(tokens.sub(deduction));\r\n        emit Transfer(msg.sender, to, tokens.sub(deduction));\r\n        return true;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    //\r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint256 tokens) public override returns (bool success){\r\n        require(tokens <= allowed[from][msg.sender]); //check allowance\r\n        require(balances[from] >= tokens);\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n      \r\n        uint256 deduction = deductionsToApply(tokens);\r\n        applyDeductions(deduction);\r\n       \r\n        balances[to] = balances[to].add(tokens.sub(deduction));\r\n        emit Transfer(from, to, tokens.sub(tokens));\r\n        return true;\r\n    }\r\n    \r\n    function _transfer(address to, uint256 tokens, bool rewards) internal returns(bool){\r\n        // prevent transfer to 0x0, use burn instead\r\n        require(address(to) != address(0));\r\n        require(balances[address(this)] >= tokens );\r\n        require(balances[to] + tokens >= balances[to]);\r\n        \r\n        balances[address(this)] = balances[address(this)].sub(tokens);\r\n        \r\n        uint256 deduction = 0;\r\n        \r\n        if(!rewards){\r\n            deduction = deductionsToApply(tokens);\r\n            applyDeductions(deduction);\r\n        }\r\n        \r\n        balances[to] = balances[to].add(tokens.sub(deduction));\r\n            \r\n        emit Transfer(address(this),to,tokens.sub(deduction));\r\n        \r\n        return true;\r\n    }\r\n\r\n    function deductionsToApply(uint256 tokens) private view returns(uint256){\r\n        uint256 deduction = 0;\r\n        uint256 minSupply = 100000 * 10 ** (18);\r\n        \r\n        if(_totalSupply > minSupply){\r\n        \r\n            deduction = onePercent(tokens).mul(5); // 5% transaction cost\r\n        \r\n            if(_totalSupply.sub(deduction) < minSupply)\r\n                deduction = _totalSupply.sub(minSupply);\r\n        }\r\n        \r\n        return deduction;\r\n    }\r\n    \r\n    function applyDeductions(uint256 deduction) private{\r\n        if(stakedCoins == 0){\r\n            burnTokens(deduction);\r\n        }\r\n        else{\r\n            burnTokens(deduction.div(2));\r\n            disburse(deduction.div(2));\r\n        }\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Burn the ``value` amount of tokens from the `account`\r\n    // ------------------------------------------------------------------------\r\n    function burnTokens(uint256 value) internal{\r\n        require(_totalSupply >= value); // burn only unsold tokens\r\n        _totalSupply = _totalSupply.sub(value);\r\n        emit Transfer(msg.sender, address(0), value);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Calculates onePercent of the uint256 amount sent\r\n    // ------------------------------------------------------------------------\r\n    function onePercent(uint256 _tokens) internal pure returns (uint256){\r\n        uint256 roundValue = _tokens.ceil(100);\r\n        uint onePercentofTokens = roundValue.mul(100).div(100 * 10**uint(2));\r\n        return onePercentofTokens;\r\n    }\r\n    \r\n    \r\n    /********************************STAKING CONTRACT**********************************/\r\n    \r\n    uint256 deployTime;\r\n    uint256 private totalDividentPoints;\r\n    uint256 private unclaimedDividendPoints;\r\n    uint256 pointMultiplier = 1000000000000000000;\r\n    uint256 public stakedCoins;\r\n    \r\n    uint256 public totalStakes;\r\n    uint256 public totalRewardsClaimed;\r\n    \r\n    bool public stakingOpen;\r\n    \r\n    struct  Account {\r\n        uint256 balance;\r\n        uint256 lastDividentPoints;\r\n        uint256 timeInvest;\r\n        uint256 lastClaimed;\r\n        uint256 rewardsClaimed;\r\n        uint256 pending;\r\n    }\r\n\r\n    mapping(address => Account) accounts;\r\n    \r\n    function openStaking() external onlyOwner{\r\n        require(!stakingOpen, \"staking already open\");\r\n        stakingOpen = true;\r\n    }\r\n    \r\n    function STAKE(uint256 _tokens) external returns(bool){\r\n        require(stakingOpen, \"staking is close\");\r\n\r\n        require(transfer(address(this), _tokens), \"In sufficient tokens in user wallet\");\r\n        \r\n        uint256 owing = dividendsOwing(msg.sender);\r\n        \r\n        if(owing > 0) // early stakes\r\n            accounts[msg.sender].pending = owing;\r\n            \r\n        uint256 deduction = deductionsToApply(_tokens);\r\n        \r\n        stakedCoins = stakedCoins.add(_tokens.sub(deduction));\r\n        accounts[msg.sender].balance = accounts[msg.sender].balance.add(_tokens.sub(deduction));\r\n        accounts[msg.sender].lastDividentPoints = totalDividentPoints;\r\n        accounts[msg.sender].timeInvest = now;\r\n        accounts[msg.sender].lastClaimed = now;\r\n        \r\n        totalStakes = totalStakes.add(_tokens.sub(deduction));\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function pendingReward(address _user) external view returns(uint256){\r\n        uint256 owing = dividendsOwing(_user);\r\n        return owing;\r\n    }\r\n    \r\n    function dividendsOwing(address investor) internal view returns (uint256){\r\n        uint256 newDividendPoints = totalDividentPoints.sub(accounts[investor].lastDividentPoints);\r\n        return (((accounts[investor].balance).mul(newDividendPoints)).div(pointMultiplier)).add(accounts[investor].pending);\r\n    }\r\n   \r\n    function updateDividend(address investor) internal returns(uint256){\r\n        uint256 owing = dividendsOwing(investor);\r\n        if (owing > 0){\r\n            unclaimedDividendPoints = unclaimedDividendPoints.sub(owing);\r\n            accounts[investor].lastDividentPoints = totalDividentPoints;\r\n        }\r\n        return owing;\r\n    }\r\n   \r\n    function activeStake(address _user) external view returns (uint256){\r\n        return accounts[_user].balance;\r\n    }\r\n   \r\n    function UNSTAKE() external returns (bool){\r\n        require(accounts[msg.sender].balance > 0);\r\n        \r\n        uint256 owing = updateDividend(msg.sender);\r\n        if(owing > 0) // unclaimed reward\r\n            accounts[msg.sender].pending = owing;\r\n        \r\n        stakedCoins = stakedCoins.sub(accounts[msg.sender].balance);\r\n\r\n        require(_transfer(msg.sender, accounts[msg.sender].balance, false));\r\n       \r\n        accounts[msg.sender].balance = 0;\r\n        return true;\r\n    }\r\n   \r\n    function disburse(uint256 amount) internal{\r\n        balances[address(this)] = balances[address(this)].add(amount);\r\n        \r\n        uint256 unnormalized = amount.mul(pointMultiplier);\r\n        totalDividentPoints = totalDividentPoints.add(unnormalized.div(stakedCoins));\r\n        unclaimedDividendPoints = unclaimedDividendPoints.add(amount);\r\n    }\r\n   \r\n    function claimReward() external returns(bool){\r\n        uint256 owing = updateDividend(msg.sender);\r\n        \r\n        require(owing > 0);\r\n\r\n        require(_transfer(msg.sender, owing, true));\r\n        \r\n        accounts[msg.sender].rewardsClaimed = accounts[msg.sender].rewardsClaimed.add(owing);\r\n       \r\n        totalRewardsClaimed = totalRewardsClaimed.add(owing);\r\n        return true;\r\n    }\r\n    \r\n    function rewardsClaimed(address _user) external view returns(uint256 rewardClaimed){\r\n        return accounts[_user].rewardsClaimed;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"STAKE\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"activeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"rewardsClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedCoins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HedgeHog","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005e220057920dcc7826ab5e5eb5cf4bb41c6cd902","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0a8b30364728ddfa52639e50bb24665be9db4f731e48706a24d32777ae142954"}]}