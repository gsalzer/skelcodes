{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/haydenshively/Developer/Compound-WBTC-Migrator/ethereum/contracts/CERC20Migrator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// Import Compound components\\nimport \\\"./external/compound/CERC20.sol\\\";\\nimport \\\"./external/compound/CEther.sol\\\";\\nimport \\\"./external/compound/Comptroller.sol\\\";\\nimport \\\"./external/compound/UniswapAnchoredView.sol\\\";\\n\\n// Import AAVE components\\nimport \\\"./external/aave/FlashLoanReceiverBase.sol\\\";\\nimport \\\"./external/aave/ILendingPoolAddressesProvider.sol\\\";\\n\\n// Import KeeperDAO components\\nimport \\\"./external/keeperdao/ILiquidityPool.sol\\\";\\n\\nimport \\\"./external/IWETH.sol\\\";\\n\\n\\ncontract CERC20Migrator is FlashLoanReceiverBase {\\n    using SafeERC20 for IERC20;\\n\\n    event Migrated(address indexed account, uint256 underlyingV1, uint256 underlyingV2);\\n\\n    event GasUsed(address indexed account, uint256 gas, uint256 gasPrice, uint256 dollarsPerETH);\\n\\n    address payable private constant KEEPER_LIQUIDITY_POOL = payable(0x35fFd6E268610E764fF6944d07760D0EFe5E40E5);\\n    address private constant KEEPER_BORROW_PROXY = 0xde92742213FEa5f78c6840B6EcBf214115ea8002;\\n    address private constant CETH = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\\n\\n    Comptroller public immutable COMPTROLLER;\\n\\n    UniswapAnchoredView public immutable PRICEORACLE;\\n\\n    address public immutable UNDERLYING;\\n\\n    address public immutable CTOKENV1;\\n\\n    address public immutable CTOKENV2;\\n\\n    receive() external payable {}\\n\\n    constructor(ILendingPoolAddressesProvider _provider, Comptroller _comptroller, address _cTokenV1, address _cTokenV2) FlashLoanReceiverBase(_provider) {\\n        COMPTROLLER = _comptroller;\\n        PRICEORACLE = UniswapAnchoredView(_comptroller.oracle());\\n\\n        address underlying = CERC20Storage(_cTokenV1).underlying();\\n        require(underlying == CERC20Storage(_cTokenV2).underlying(), \\\"cTokens have different underlying ERC20s\\\");\\n        UNDERLYING = underlying;\\n        CTOKENV1 = _cTokenV1;\\n        CTOKENV2 = _cTokenV2;\\n\\n        // Enter the cETH market now so that we don't have to do it ad-hoc during KeeperDAO loans\\n        address[] memory markets = new address[](1);\\n        markets[0] = CETH;\\n        _comptroller.enterMarkets(markets);\\n    }\\n\\n    modifier gasTracked() {\\n        uint256 gasStart = gasleft();\\n        _;\\n        uint256 gasSpent = 21000 + gasStart - gasleft(); // don't account for msg.data.length, as that could be manipulated\\n        emit GasUsed(msg.sender, gasSpent, tx.gasprice, PRICEORACLE.price(\\\"ETH\\\"));\\n    }\\n\\n    /**\\n     * @notice Like `migrate()`, allows msg.sender to migrate collateral from v1 to v2,\\n     *      so long as msg.sender has already approved this contract to transfer their v1.\\n     *\\n     *      This version of the function returns early if it detects that msg.sender can't\\n     *      be migrated. It also looks for UNDERLYING dust after the transaction, and if any\\n     *      exists it will be sent back to msg.sender\\n     *\\n     * @param gasOptimized When true, borrow UNDERLYING directly (from AAVE, 0.09% fee).\\n     *      When false, get UNDERLYING indirectly (from KeeperDAO, higher gas usage).\\n     */\\n    function migrateWithExtraChecks(bool gasOptimized) external {\\n        if (CERC20(CTOKENV1).balanceOf(msg.sender) == 0) return;\\n\\n        ( , , uint256 shortfall) = COMPTROLLER.getAccountLiquidity(msg.sender);\\n        if (shortfall != 0) return;\\n\\n        address[] memory enteredMarkets = COMPTROLLER.getAssetsIn(msg.sender);\\n        for (uint256 i = 0; i < enteredMarkets.length; i++) {\\n            if (enteredMarkets[i] != CTOKENV2) continue;\\n\\n            migrate(gasOptimized);\\n\\n            uint256 dust = IERC20(UNDERLYING).balanceOf(address(this));\\n            if (dust != 0) IERC20(UNDERLYING).transfer(msg.sender, dust);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows msg.sender to migrate collateral from v1 to v2, so long as msg.sender has\\n     *      already approved this contract to transfer their v1.\\n     *\\n     *      WARNING: This is made possible by AAVE flash loans, which means migration will incur\\n     *      a 0.09% loss in underlying UNDERLYING if gasOptimized=true\\n     *\\n     * @param gasOptimized When true, borrow UNDERLYING directly (from AAVE, 0.09% fee).\\n     *      When false, get UNDERLYING indirectly (from KeeperDAO, higher gas usage).\\n     */\\n    function migrate(bool gasOptimized) public gasTracked {\\n        uint256 supplyV1 = CERC20(CTOKENV1).balanceOf(msg.sender);\\n        require(supplyV1 > 0, \\\"0 balance no migration needed\\\");\\n        require(IERC20(CTOKENV1).allowance(msg.sender, address(this)) >= supplyV1, \\\"Please approve for v1 cToken transfers\\\");\\n\\n        // fetch the flash loan premium from AAVE. (ex. 0.09% fee would show up as `9` here)\\n        uint256 premium = LENDING_POOL.FLASHLOAN_PREMIUM_TOTAL();\\n        uint256 exchangeRateV1 = CERC20(CTOKENV1).exchangeRateCurrent();\\n\\n        uint supplyV2Underlying;\\n\\n        if (gasOptimized) {\\n            supplyV2Underlying = supplyV1 * exchangeRateV1 * (10_000 - premium) / 1e22;\\n            bytes memory params = abi.encode(msg.sender, supplyV1);\\n\\n            initiateAAVEFlashLoan(UNDERLYING, supplyV2Underlying, params);\\n\\n        } else {\\n            supplyV2Underlying = supplyV1 * exchangeRateV1 / 1e18;\\n            ( , uint256 collatFact, ) = COMPTROLLER.markets(CETH);\\n            uint256 dollarsPerETH = PRICEORACLE.getUnderlyingPrice(CETH);\\n            uint256 dollarsPerBTC = PRICEORACLE.getUnderlyingPrice(CTOKENV1);\\n            uint256 requiredETH = supplyV2Underlying * 1e18 * dollarsPerBTC / dollarsPerETH / collatFact;\\n            supplyV2Underlying -= 1;\\n\\n            initiateKeeperFlashloan(msg.sender, requiredETH, supplyV1, supplyV2Underlying);\\n        }\\n        \\n        emit Migrated(msg.sender, supplyV1 * exchangeRateV1 / 1e18, supplyV2Underlying);\\n    }\\n\\n    /// @dev When this is called, contract's UNDERLYING balance should be _supplyV2Underlying. After this has run,\\n    ///      the contract's UNDERLYING balance will be _supplyV1 * exchangeRateV1.\\n    function flashloanInner(\\n        address _account,\\n        uint256 _supplyV1,\\n        uint256 _supplyV2Underlying\\n    ) internal {\\n        // Mint v2 tokens and send them to _account\\n        IERC20(UNDERLYING).approve(CTOKENV2, _supplyV2Underlying);\\n        require(CERC20(CTOKENV2).mint(_supplyV2Underlying) == 0, \\\"Failed to mint v2 cToken\\\");\\n        require(IERC20(CTOKENV2).transfer(_account, IERC20(CTOKENV2).balanceOf(address(this))), \\\"Failed to send v2 cToken\\\");\\n\\n        // Pull and redeem v1 tokens from _account\\n        require(IERC20(CTOKENV1).transferFrom(_account, address(this), _supplyV1), \\\"Failed to receive v1 cToken\\\");\\n        require(CERC20(CTOKENV1).redeem(_supplyV1) == 0, \\\"Failed to redeem v1 cToken\\\");\\n    }\\n\\n    /// @dev Meant to be called by AAVE Lending Pool, but be careful since anyone might call it\\n    function executeOperation(\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        address initiator,\\n        bytes calldata params\\n    ) external override returns (bool) {\\n        require(msg.sender == address(LENDING_POOL), \\\"Flash loan initiated by outsider\\\");\\n        require(initiator == address(this), \\\"Flash loan initiated by outsider\\\");\\n        (address account, uint256 supplyV1) = abi.decode(params, (address, uint256));\\n\\n        // Execute main migration logic\\n        flashloanInner(account, supplyV1, amounts[0]);\\n        \\n        // Get ready to repay flashloan\\n        IERC20(UNDERLYING).approve(address(LENDING_POOL), amounts[0] + premiums[0]);\\n        // Finish up\\n        return true;\\n    }\\n\\n    function initiateAAVEFlashLoan(address _token, uint256 _amount, bytes memory params) internal {\\n        address[] memory assets = new address[](1);\\n        assets[0] = _token;\\n\\n        uint256[] memory amounts = new uint256[](1);\\n        amounts[0] = _amount;\\n\\n        uint256[] memory modes = new uint256[](1);\\n        modes[0] = 0; // 0 = no debt, 1 = stable, 2 = variable\\n\\n        LENDING_POOL.flashLoan(\\n            address(this),\\n            assets,\\n            amounts,\\n            modes,\\n            address(this),\\n            params,\\n            0\\n        );\\n    }\\n\\n    /// @dev Meant to be called by KeeperDAO Borrow Proxy, but be careful since anyone might call it\\n    function keeperFlashloanCallback(address _account, uint256 _amountETH, uint256 _supplyV1, uint256 _supplyV2Underlying) external {\\n        require(msg.sender == KEEPER_BORROW_PROXY, \\\"Flashloan initiated by outsider\\\");\\n\\n        // Use the borrowed ETH to get UNDERLYING\\n        CEther(CETH).mint{value: _amountETH}();\\n        require(CERC20(CTOKENV2).borrow(_supplyV2Underlying) == 0, \\\"Failed to borrow UNDERLYING\\\");\\n\\n        // Execute main migration logic\\n        flashloanInner(_account, _supplyV1, _supplyV2Underlying);\\n\\n        // Get ready to repay flashloan (get original ETH back)\\n        IERC20(UNDERLYING).approve(CTOKENV2, _supplyV2Underlying);\\n        require(CERC20(CTOKENV2).repayBorrow(_supplyV2Underlying) == 0, \\\"Failed to repay UNDERLYING borrow\\\");\\n        require(CEther(CETH).redeemUnderlying(_amountETH) == 0, \\\"Failed to retrieve original ETH\\\");\\n        // Finish up\\n        KEEPER_LIQUIDITY_POOL.send(_amountETH + 1);\\n    }\\n\\n    function initiateKeeperFlashloan(address _account, uint256 _amountETH, uint256 _supplyV1, uint256 _supplyV2Underlying) internal {\\n        ILiquidityPool(KEEPER_LIQUIDITY_POOL).borrow(\\n            // Address of the token we want to borrow. Using this address\\n            // means that we want to borrow ETH.\\n            0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE,\\n            // The amount of WEI that we will borrow. We have to return at least\\n            // more than this amount.\\n            _amountETH,\\n            // Encode the callback into calldata. This will be used to call a\\n            // function on this contract.\\n            abi.encodeWithSelector(\\n                // Function selector of the callback function.\\n                this.keeperFlashloanCallback.selector,\\n                // Function arguments\\n                _account,\\n                _amountETH,\\n                _supplyV1,\\n                _supplyV2Underlying\\n            )\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/haydenshively/Developer/Compound-WBTC-Migrator/ethereum/contracts/external/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n    function balanceOf(address account) external view returns (uint);\\n    function deposit() external payable;\\n    function transfer(address recipient, uint amount) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"/home/haydenshively/Developer/Compound-WBTC-Migrator/ethereum/contracts/external/aave/FlashLoanReceiverBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./IFlashLoanReceiver.sol\\\";\\nimport \\\"./ILendingPool.sol\\\";\\nimport \\\"./ILendingPoolAddressesProvider.sol\\\";\\n\\nabstract contract FlashLoanReceiverBase is IFlashLoanReceiver {\\n    using SafeERC20 for IERC20;\\n\\n    ILendingPoolAddressesProvider public immutable ADDRESSES_PROVIDER;\\n    ILendingPool public immutable LENDING_POOL;\\n\\n    constructor(ILendingPoolAddressesProvider provider) {\\n        ADDRESSES_PROVIDER = provider;\\n        LENDING_POOL = ILendingPool(provider.getLendingPool());\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/haydenshively/Developer/Compound-WBTC-Migrator/ethereum/contracts/external/aave/IFlashLoanReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IFlashLoanReceiver {\\n    function executeOperation(\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        address initiator,\\n        bytes calldata params\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"/home/haydenshively/Developer/Compound-WBTC-Migrator/ethereum/contracts/external/aave/ILendingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface ILendingPool {\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/home/haydenshively/Developer/Compound-WBTC-Migrator/ethereum/contracts/external/aave/ILendingPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface ILendingPoolAddressesProvider {\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function getLendingPool() external view returns (address);\\n\\n    function setLendingPoolImpl(address pool) external;\\n\\n    function getLendingPoolConfigurator() external view returns (address);\\n\\n    function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n    function getLendingPoolCollateralManager() external view returns (address);\\n\\n    function setLendingPoolCollateralManager(address manager) external;\\n\\n    function getPoolAdmin() external view returns (address);\\n\\n    function setPoolAdmin(address admin) external;\\n\\n    function getEmergencyAdmin() external view returns (address);\\n\\n    function setEmergencyAdmin(address admin) external;\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function setPriceOracle(address priceOracle) external;\\n\\n    function getLendingRateOracle() external view returns (address);\\n\\n    function setLendingRateOracle(address lendingRateOracle) external;\\n}\\n\"\r\n    },\r\n    \"/home/haydenshively/Developer/Compound-WBTC-Migrator/ethereum/contracts/external/compound/CERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface CERC20 {\\n    function accrueInterest() external returns (uint);\\n    function accrualBlockNumber() external view returns (uint);\\n    function exchangeRateStored() external view returns (uint);\\n    function exchangeRateCurrent() external returns (uint);\\n\\n    function mint(uint mintAmount) external returns (uint);\\n\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n    function liquidateBorrow(address borrower, uint repayAmount, address collateral) external returns (uint);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function borrowBalanceStored(address account) external view returns (uint);\\n    function balanceOf(address account) external view returns (uint);\\n    function balanceOfUnderlying(address account) external returns (uint);\\n    function getAccountSnapshot(address account) external view returns (uint error, uint cTokenBalance, uint borrowBalance, uint exchangeRateMantissa);\\n\\n    function comptroller() external view returns (address);\\n}\\n\\ninterface CERC20Storage {\\n    function underlying() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"/home/haydenshively/Developer/Compound-WBTC-Migrator/ethereum/contracts/external/compound/CEther.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface CEther {\\n    function mint() external payable;\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow() external payable;\\n    function repayBorrowBehalf(address borrower) external payable;\\n    function liquidateBorrow(address borrower, address cTokenCollateral) external payable;\\n    function balanceOfUnderlying(address account) external returns (uint);\\n}\\n\"\r\n    },\r\n    \"/home/haydenshively/Developer/Compound-WBTC-Migrator/ethereum/contracts/external/compound/Comptroller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface Comptroller {\\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\\n    function exitMarket(address cToken) external returns (uint);\\n    function getAssetsIn(address account) external view returns (address[] memory);\\n    \\n    function getAccountLiquidity(address account) external view returns (uint, uint, uint);\\n    function closeFactorMantissa() external view returns (uint);\\n    function liquidationIncentiveMantissa() external view returns (uint);\\n\\n    function oracle() external view returns (address);\\n\\n    function markets(address cTokenAddress) external view returns (bool, uint, bool);\\n    function getAllMarkets() external view returns (address[] memory);\\n\\n    function seizeGuardianPaused() external view returns (bool);\\n\\n    function redeemAllowed(address cTokenAddress, address account, uint amount) external returns (uint);\\n}\\n\"\r\n    },\r\n    \"/home/haydenshively/Developer/Compound-WBTC-Migrator/ethereum/contracts/external/compound/UniswapAnchoredView.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface UniswapAnchoredView {\\n    function price(string calldata symbol) external view returns (uint);\\n    function getUnderlyingPrice(address cToken) external view returns (uint);\\n    function postPrices(bytes[] calldata messages, bytes[] calldata signatures, string[] calldata symbols) external;\\n\\n    function priceData() external view returns (address);\\n    function reporter() external view returns (address);\\n\\n    function getTokenConfigByCToken(address _cToken) external view returns (\\n        address cToken,\\n        address underlying,\\n        bytes32 symbolHash,\\n        uint256 baseUnit,\\n        uint8 priceSource,\\n        uint256 fixedPrice,\\n        address uniswapMarket,\\n        bool isUniswapReversed\\n    );\\n}\\n\"\r\n    },\r\n    \"/home/haydenshively/Developer/Compound-WBTC-Migrator/ethereum/contracts/external/keeperdao/ILiquidityPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @dev This interfaces defines the functions of the KeeperDAO liquidity pool\\n/// that our contract needs to know about. The only function we need is the\\n/// borrow function, which allows us to take flash loans from the liquidity\\n/// pool.\\ninterface ILiquidityPool {\\n    /// @dev Borrow ETH/ERC20s from the liquidity pool. This function will (1)\\n    /// send an amount of tokens to the `msg.sender`, (2) call\\n    /// `msg.sender.call(_data)` from the KeeperDAO borrow proxy, and then (3)\\n    /// check that the balance of the liquidity pool is greater than it was\\n    /// before the borrow.\\n    ///\\n    /// @param _token The address of the ERC20 to be borrowed. ETH can be\\n    /// borrowed by specifying \\\"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\\\".\\n    /// @param _amount The amount of the ERC20 (or ETH) to be borrowed. At least\\n    /// more than this amount must be returned to the liquidity pool before the\\n    /// end of the transaction, otherwise the transaction will revert.\\n    /// @param _data The calldata that encodes the callback to be called on the\\n    /// `msg.sender`. This is the mechanism through which the borrower is able\\n    /// to implement their custom keeper logic. The callback will be called from\\n    /// the KeeperDAO borrow proxy.\\n    function borrow(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1337\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"contract Comptroller\",\"name\":\"_comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cTokenV1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cTokenV2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dollarsPerETH\",\"type\":\"uint256\"}],\"name\":\"GasUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingV1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingV2\",\"type\":\"uint256\"}],\"name\":\"Migrated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPTROLLER\",\"outputs\":[{\"internalType\":\"contract Comptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CTOKENV1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CTOKENV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LENDING_POOL\",\"outputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICEORACLE\",\"outputs\":[{\"internalType\":\"contract UniswapAnchoredView\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNDERLYING\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supplyV1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supplyV2Underlying\",\"type\":\"uint256\"}],\"name\":\"keeperFlashloanCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"gasOptimized\",\"type\":\"bool\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"gasOptimized\",\"type\":\"bool\"}],\"name\":\"migrateWithExtraChecks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CERC20Migrator","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"1337","ConstructorArguments":"000000000000000000000000b53c1a33016b2dc2ff3653530bff1848a515c8c50000000000000000000000003d9819210a31b4961b30ef54be2aed79b9c9cd3b000000000000000000000000c11b1268c1a384e55c48c2391d8d480264a3a7f4000000000000000000000000ccf4429db6322d5c611ee964527d42e5d685dd6a","EVMVersion":"byzantium","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}