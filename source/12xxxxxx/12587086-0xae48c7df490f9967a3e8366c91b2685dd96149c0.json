{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity =0.7.6;  \r\npragma experimental ABIEncoderV2;\r\n\r\n\r\nabstract contract IDSProxy {\r\n    // function execute(bytes memory _code, bytes memory _data)\r\n    //     public\r\n    //     payable\r\n    //     virtual\r\n    //     returns (address, bytes32);\r\n\r\n    function execute(address _target, bytes memory _data) public payable virtual returns (bytes32);\r\n\r\n    function setCache(address _cacheAddr) public payable virtual returns (bool);\r\n\r\n    function owner() public view virtual returns (address);\r\n}  \r\n\r\n\r\n\r\nabstract contract DSGuard {\r\n    function canCall(\r\n        address src_,\r\n        address dst_,\r\n        bytes4 sig\r\n    ) public view virtual returns (bool);\r\n\r\n    function permit(\r\n        bytes32 src,\r\n        bytes32 dst,\r\n        bytes32 sig\r\n    ) public virtual;\r\n\r\n    function forbid(\r\n        bytes32 src,\r\n        bytes32 dst,\r\n        bytes32 sig\r\n    ) public virtual;\r\n\r\n    function permit(\r\n        address src,\r\n        address dst,\r\n        bytes32 sig\r\n    ) public virtual;\r\n\r\n    function forbid(\r\n        address src,\r\n        address dst,\r\n        bytes32 sig\r\n    ) public virtual;\r\n}\r\n\r\nabstract contract DSGuardFactory {\r\n    function newGuard() public virtual returns (DSGuard guard);\r\n}  \r\n\r\n\r\n\r\nabstract contract DSAuthority {\r\n    function canCall(\r\n        address src,\r\n        address dst,\r\n        bytes4 sig\r\n    ) public view virtual returns (bool);\r\n}  \r\n\r\n\r\n\r\n\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority(address indexed authority);\r\n    event LogSetOwner(address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority public authority;\r\n    address public owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_) public auth {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_) public auth {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig), \"Not authorized\");\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}  \r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DSProxyView {\r\n    function checkDSGuardOwner(address _proxy) public view returns (bool) {\r\n        address currAuthority = address(DSAuth(_proxy).authority());\r\n\r\n        return DSAuth(currAuthority).owner() == _proxy;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"checkDSGuardOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DSProxyView","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://12b91eb7b7bba18bd718279abcc0aa029fec08e80c6bb84f522c24d61d04cc33"}]}