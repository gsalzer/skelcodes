{"status":"1","message":"OK","result":[{"SourceCode":"{\"CpuOods.sol\":{\"content\":\"/*\\n  Copyright 2019-2021 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\n// ---------- The following code was auto-generated. PLEASE DO NOT EDIT. ----------\\n// SPDX-License-Identifier: Apache-2.0.\\npragma solidity ^0.6.11;\\n\\nimport \\\"MemoryMap.sol\\\";\\nimport \\\"StarkParameters.sol\\\";\\n\\ncontract CpuOods is MemoryMap, StarkParameters {\\n    // For each query point we want to invert (2 + N_ROWS_IN_MASK) items:\\n    //  The query point itself (x).\\n    //  The denominator for the constraint polynomial (x-z^constraintDegree)\\n    //  [(x-(g^rowNumber)z) for rowNumber in mask].\\n    uint256 constant internal BATCH_INVERSE_CHUNK = (2 + N_ROWS_IN_MASK);\\n    uint256 constant internal BATCH_INVERSE_SIZE = MAX_N_QUERIES * BATCH_INVERSE_CHUNK;\\n\\n    /*\\n      Builds and sums boundary constraints that check that the prover provided the proper evaluations\\n      out of domain evaluations for the trace and composition columns.\\n\\n      The inputs to this function are:\\n          The verifier context.\\n\\n      The boundary constraints for the trace enforce claims of the form f(g^k*z) = c by\\n      requiring the quotient (f(x) - c)/(x-g^k*z) to be a low degree polynomial.\\n\\n      The boundary constraints for the composition enforce claims of the form h(z^d) = c by\\n      requiring the quotient (h(x) - c)/(x-z^d) to be a low degree polynomial.\\n      Where:\\n            f is a trace column.\\n            h is a composition column.\\n            z is the out of domain sampling point.\\n            g is the trace generator\\n            k is the offset in the mask.\\n            d is the degree of the composition polynomial.\\n            c is the evaluation sent by the prover.\\n    */\\n    fallback() external {\\n        // This funciton assumes that the calldata contains the context as defined in MemoryMap.sol.\\n        // Note that ctx is a variable size array so the first uint256 cell contrains it\\u0027s length.\\n        uint256[] memory ctx;\\n        assembly {\\n            let ctxSize := mul(add(calldataload(0), 1), 0x20)\\n            ctx := mload(0x40)\\n            mstore(0x40, add(ctx, ctxSize))\\n            calldatacopy(ctx, 0, ctxSize)\\n        }\\n        uint256[] memory batchInverseArray = new uint256[](2 * BATCH_INVERSE_SIZE);\\n\\n        oodsPrepareInverses(ctx, batchInverseArray);\\n\\n        uint256 kMontgomeryRInv_ = PrimeFieldElement0.K_MONTGOMERY_R_INV;\\n\\n        assembly {\\n            let PRIME := 0x800000000000011000000000000000000000000000000000000000000000001\\n            let kMontgomeryRInv := kMontgomeryRInv_\\n            let context := ctx\\n            let friQueue := /*friQueue*/ add(context, 0xdc0)\\n            let friQueueEnd := add(friQueue,  mul(/*n_unique_queries*/ mload(add(context, 0x140)), 0x60))\\n            let traceQueryResponses := /*traceQueryQesponses*/ add(context, 0x6f80)\\n\\n            let compositionQueryResponses := /*composition_query_responses*/ add(context, 0xab80)\\n\\n            // Set denominatorsPtr to point to the batchInverseOut array.\\n            // The content of batchInverseOut is described in oodsPrepareInverses.\\n            let denominatorsPtr := add(batchInverseArray, 0x20)\\n\\n            for {} lt(friQueue, friQueueEnd) {friQueue := add(friQueue, 0x60)} {\\n                // res accumulates numbers modulo PRIME. Since 31*PRIME \\u003c 2**256, we may add up to\\n                // 31 numbers without fear of overflow, and use addmod modulo PRIME only every\\n                // 31 iterations, and once more at the very end.\\n                let res := 0\\n\\n                // Trace constraints.\\n\\n                // Mask items for column #0.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(traceQueryResponses), kMontgomeryRInv, PRIME)\\n\\n                // res += c_0*(f_0(x) - f_0(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[0]*/ mload(add(context, 0x5ea0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[0]*/ mload(add(context, 0x47c0)))),\\n                           PRIME))\\n\\n                // res += c_1*(f_0(x) - f_0(g * z)) / (x - g * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g * z)^(-1)*/ mload(add(denominatorsPtr, 0x20)),\\n                                  /*oods_coefficients[1]*/ mload(add(context, 0x5ec0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[1]*/ mload(add(context, 0x47e0)))),\\n                           PRIME))\\n\\n                // res += c_2*(f_0(x) - f_0(g^2 * z)) / (x - g^2 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^2 * z)^(-1)*/ mload(add(denominatorsPtr, 0x40)),\\n                                  /*oods_coefficients[2]*/ mload(add(context, 0x5ee0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[2]*/ mload(add(context, 0x4800)))),\\n                           PRIME))\\n\\n                // res += c_3*(f_0(x) - f_0(g^3 * z)) / (x - g^3 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^3 * z)^(-1)*/ mload(add(denominatorsPtr, 0x60)),\\n                                  /*oods_coefficients[3]*/ mload(add(context, 0x5f00)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[3]*/ mload(add(context, 0x4820)))),\\n                           PRIME))\\n\\n                // res += c_4*(f_0(x) - f_0(g^4 * z)) / (x - g^4 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^4 * z)^(-1)*/ mload(add(denominatorsPtr, 0x80)),\\n                                  /*oods_coefficients[4]*/ mload(add(context, 0x5f20)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[4]*/ mload(add(context, 0x4840)))),\\n                           PRIME))\\n\\n                // res += c_5*(f_0(x) - f_0(g^5 * z)) / (x - g^5 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^5 * z)^(-1)*/ mload(add(denominatorsPtr, 0xa0)),\\n                                  /*oods_coefficients[5]*/ mload(add(context, 0x5f40)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[5]*/ mload(add(context, 0x4860)))),\\n                           PRIME))\\n\\n                // res += c_6*(f_0(x) - f_0(g^6 * z)) / (x - g^6 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^6 * z)^(-1)*/ mload(add(denominatorsPtr, 0xc0)),\\n                                  /*oods_coefficients[6]*/ mload(add(context, 0x5f60)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[6]*/ mload(add(context, 0x4880)))),\\n                           PRIME))\\n\\n                // res += c_7*(f_0(x) - f_0(g^7 * z)) / (x - g^7 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^7 * z)^(-1)*/ mload(add(denominatorsPtr, 0xe0)),\\n                                  /*oods_coefficients[7]*/ mload(add(context, 0x5f80)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[7]*/ mload(add(context, 0x48a0)))),\\n                           PRIME))\\n\\n                // res += c_8*(f_0(x) - f_0(g^8 * z)) / (x - g^8 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^8 * z)^(-1)*/ mload(add(denominatorsPtr, 0x100)),\\n                                  /*oods_coefficients[8]*/ mload(add(context, 0x5fa0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[8]*/ mload(add(context, 0x48c0)))),\\n                           PRIME))\\n\\n                // res += c_9*(f_0(x) - f_0(g^9 * z)) / (x - g^9 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^9 * z)^(-1)*/ mload(add(denominatorsPtr, 0x120)),\\n                                  /*oods_coefficients[9]*/ mload(add(context, 0x5fc0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[9]*/ mload(add(context, 0x48e0)))),\\n                           PRIME))\\n\\n                // res += c_10*(f_0(x) - f_0(g^10 * z)) / (x - g^10 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^10 * z)^(-1)*/ mload(add(denominatorsPtr, 0x140)),\\n                                  /*oods_coefficients[10]*/ mload(add(context, 0x5fe0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[10]*/ mload(add(context, 0x4900)))),\\n                           PRIME))\\n\\n                // res += c_11*(f_0(x) - f_0(g^11 * z)) / (x - g^11 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^11 * z)^(-1)*/ mload(add(denominatorsPtr, 0x160)),\\n                                  /*oods_coefficients[11]*/ mload(add(context, 0x6000)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[11]*/ mload(add(context, 0x4920)))),\\n                           PRIME))\\n\\n                // res += c_12*(f_0(x) - f_0(g^12 * z)) / (x - g^12 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^12 * z)^(-1)*/ mload(add(denominatorsPtr, 0x180)),\\n                                  /*oods_coefficients[12]*/ mload(add(context, 0x6020)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[12]*/ mload(add(context, 0x4940)))),\\n                           PRIME))\\n\\n                // res += c_13*(f_0(x) - f_0(g^13 * z)) / (x - g^13 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^13 * z)^(-1)*/ mload(add(denominatorsPtr, 0x1a0)),\\n                                  /*oods_coefficients[13]*/ mload(add(context, 0x6040)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[13]*/ mload(add(context, 0x4960)))),\\n                           PRIME))\\n\\n                // res += c_14*(f_0(x) - f_0(g^14 * z)) / (x - g^14 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^14 * z)^(-1)*/ mload(add(denominatorsPtr, 0x1c0)),\\n                                  /*oods_coefficients[14]*/ mload(add(context, 0x6060)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[14]*/ mload(add(context, 0x4980)))),\\n                           PRIME))\\n\\n                // res += c_15*(f_0(x) - f_0(g^15 * z)) / (x - g^15 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^15 * z)^(-1)*/ mload(add(denominatorsPtr, 0x1e0)),\\n                                  /*oods_coefficients[15]*/ mload(add(context, 0x6080)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[15]*/ mload(add(context, 0x49a0)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #1.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0x20)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_16*(f_1(x) - f_1(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[16]*/ mload(add(context, 0x60a0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[16]*/ mload(add(context, 0x49c0)))),\\n                           PRIME))\\n\\n                // res += c_17*(f_1(x) - f_1(g * z)) / (x - g * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g * z)^(-1)*/ mload(add(denominatorsPtr, 0x20)),\\n                                  /*oods_coefficients[17]*/ mload(add(context, 0x60c0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[17]*/ mload(add(context, 0x49e0)))),\\n                           PRIME))\\n\\n                // res += c_18*(f_1(x) - f_1(g^255 * z)) / (x - g^255 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^255 * z)^(-1)*/ mload(add(denominatorsPtr, 0x6e0)),\\n                                  /*oods_coefficients[18]*/ mload(add(context, 0x60e0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[18]*/ mload(add(context, 0x4a00)))),\\n                           PRIME))\\n\\n                // res += c_19*(f_1(x) - f_1(g^256 * z)) / (x - g^256 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^256 * z)^(-1)*/ mload(add(denominatorsPtr, 0x700)),\\n                                  /*oods_coefficients[19]*/ mload(add(context, 0x6100)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[19]*/ mload(add(context, 0x4a20)))),\\n                           PRIME))\\n\\n                // res += c_20*(f_1(x) - f_1(g^511 * z)) / (x - g^511 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^511 * z)^(-1)*/ mload(add(denominatorsPtr, 0x7e0)),\\n                                  /*oods_coefficients[20]*/ mload(add(context, 0x6120)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[20]*/ mload(add(context, 0x4a40)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #2.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0x40)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_21*(f_2(x) - f_2(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[21]*/ mload(add(context, 0x6140)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[21]*/ mload(add(context, 0x4a60)))),\\n                           PRIME))\\n\\n                // res += c_22*(f_2(x) - f_2(g * z)) / (x - g * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g * z)^(-1)*/ mload(add(denominatorsPtr, 0x20)),\\n                                  /*oods_coefficients[22]*/ mload(add(context, 0x6160)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[22]*/ mload(add(context, 0x4a80)))),\\n                           PRIME))\\n\\n                // res += c_23*(f_2(x) - f_2(g^255 * z)) / (x - g^255 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^255 * z)^(-1)*/ mload(add(denominatorsPtr, 0x6e0)),\\n                                  /*oods_coefficients[23]*/ mload(add(context, 0x6180)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[23]*/ mload(add(context, 0x4aa0)))),\\n                           PRIME))\\n\\n                // res += c_24*(f_2(x) - f_2(g^256 * z)) / (x - g^256 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^256 * z)^(-1)*/ mload(add(denominatorsPtr, 0x700)),\\n                                  /*oods_coefficients[24]*/ mload(add(context, 0x61a0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[24]*/ mload(add(context, 0x4ac0)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #3.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0x60)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_25*(f_3(x) - f_3(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[25]*/ mload(add(context, 0x61c0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[25]*/ mload(add(context, 0x4ae0)))),\\n                           PRIME))\\n\\n                // res += c_26*(f_3(x) - f_3(g^255 * z)) / (x - g^255 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^255 * z)^(-1)*/ mload(add(denominatorsPtr, 0x6e0)),\\n                                  /*oods_coefficients[26]*/ mload(add(context, 0x61e0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[26]*/ mload(add(context, 0x4b00)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #4.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0x80)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_27*(f_4(x) - f_4(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[27]*/ mload(add(context, 0x6200)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[27]*/ mload(add(context, 0x4b20)))),\\n                           PRIME))\\n\\n                // res += c_28*(f_4(x) - f_4(g * z)) / (x - g * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g * z)^(-1)*/ mload(add(denominatorsPtr, 0x20)),\\n                                  /*oods_coefficients[28]*/ mload(add(context, 0x6220)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[28]*/ mload(add(context, 0x4b40)))),\\n                           PRIME))\\n\\n                // res += c_29*(f_4(x) - f_4(g^192 * z)) / (x - g^192 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^192 * z)^(-1)*/ mload(add(denominatorsPtr, 0x580)),\\n                                  /*oods_coefficients[29]*/ mload(add(context, 0x6240)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[29]*/ mload(add(context, 0x4b60)))),\\n                           PRIME))\\n\\n                // res += c_30*(f_4(x) - f_4(g^193 * z)) / (x - g^193 * z).\\n                res := addmod(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^193 * z)^(-1)*/ mload(add(denominatorsPtr, 0x5a0)),\\n                                  /*oods_coefficients[30]*/ mload(add(context, 0x6260)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[30]*/ mload(add(context, 0x4b80)))),\\n                           PRIME),\\n                    PRIME)\\n\\n                // res += c_31*(f_4(x) - f_4(g^196 * z)) / (x - g^196 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^196 * z)^(-1)*/ mload(add(denominatorsPtr, 0x5c0)),\\n                                  /*oods_coefficients[31]*/ mload(add(context, 0x6280)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[31]*/ mload(add(context, 0x4ba0)))),\\n                           PRIME))\\n\\n                // res += c_32*(f_4(x) - f_4(g^197 * z)) / (x - g^197 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^197 * z)^(-1)*/ mload(add(denominatorsPtr, 0x5e0)),\\n                                  /*oods_coefficients[32]*/ mload(add(context, 0x62a0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[32]*/ mload(add(context, 0x4bc0)))),\\n                           PRIME))\\n\\n                // res += c_33*(f_4(x) - f_4(g^251 * z)) / (x - g^251 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^251 * z)^(-1)*/ mload(add(denominatorsPtr, 0x6a0)),\\n                                  /*oods_coefficients[33]*/ mload(add(context, 0x62c0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[33]*/ mload(add(context, 0x4be0)))),\\n                           PRIME))\\n\\n                // res += c_34*(f_4(x) - f_4(g^252 * z)) / (x - g^252 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^252 * z)^(-1)*/ mload(add(denominatorsPtr, 0x6c0)),\\n                                  /*oods_coefficients[34]*/ mload(add(context, 0x62e0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[34]*/ mload(add(context, 0x4c00)))),\\n                           PRIME))\\n\\n                // res += c_35*(f_4(x) - f_4(g^256 * z)) / (x - g^256 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^256 * z)^(-1)*/ mload(add(denominatorsPtr, 0x700)),\\n                                  /*oods_coefficients[35]*/ mload(add(context, 0x6300)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[35]*/ mload(add(context, 0x4c20)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #5.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0xa0)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_36*(f_5(x) - f_5(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[36]*/ mload(add(context, 0x6320)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[36]*/ mload(add(context, 0x4c40)))),\\n                           PRIME))\\n\\n                // res += c_37*(f_5(x) - f_5(g * z)) / (x - g * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g * z)^(-1)*/ mload(add(denominatorsPtr, 0x20)),\\n                                  /*oods_coefficients[37]*/ mload(add(context, 0x6340)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[37]*/ mload(add(context, 0x4c60)))),\\n                           PRIME))\\n\\n                // res += c_38*(f_5(x) - f_5(g^2 * z)) / (x - g^2 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^2 * z)^(-1)*/ mload(add(denominatorsPtr, 0x40)),\\n                                  /*oods_coefficients[38]*/ mload(add(context, 0x6360)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[38]*/ mload(add(context, 0x4c80)))),\\n                           PRIME))\\n\\n                // res += c_39*(f_5(x) - f_5(g^3 * z)) / (x - g^3 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^3 * z)^(-1)*/ mload(add(denominatorsPtr, 0x60)),\\n                                  /*oods_coefficients[39]*/ mload(add(context, 0x6380)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[39]*/ mload(add(context, 0x4ca0)))),\\n                           PRIME))\\n\\n                // res += c_40*(f_5(x) - f_5(g^4 * z)) / (x - g^4 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^4 * z)^(-1)*/ mload(add(denominatorsPtr, 0x80)),\\n                                  /*oods_coefficients[40]*/ mload(add(context, 0x63a0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[40]*/ mload(add(context, 0x4cc0)))),\\n                           PRIME))\\n\\n                // res += c_41*(f_5(x) - f_5(g^5 * z)) / (x - g^5 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^5 * z)^(-1)*/ mload(add(denominatorsPtr, 0xa0)),\\n                                  /*oods_coefficients[41]*/ mload(add(context, 0x63c0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[41]*/ mload(add(context, 0x4ce0)))),\\n                           PRIME))\\n\\n                // res += c_42*(f_5(x) - f_5(g^6 * z)) / (x - g^6 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^6 * z)^(-1)*/ mload(add(denominatorsPtr, 0xc0)),\\n                                  /*oods_coefficients[42]*/ mload(add(context, 0x63e0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[42]*/ mload(add(context, 0x4d00)))),\\n                           PRIME))\\n\\n                // res += c_43*(f_5(x) - f_5(g^7 * z)) / (x - g^7 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^7 * z)^(-1)*/ mload(add(denominatorsPtr, 0xe0)),\\n                                  /*oods_coefficients[43]*/ mload(add(context, 0x6400)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[43]*/ mload(add(context, 0x4d20)))),\\n                           PRIME))\\n\\n                // res += c_44*(f_5(x) - f_5(g^8 * z)) / (x - g^8 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^8 * z)^(-1)*/ mload(add(denominatorsPtr, 0x100)),\\n                                  /*oods_coefficients[44]*/ mload(add(context, 0x6420)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[44]*/ mload(add(context, 0x4d40)))),\\n                           PRIME))\\n\\n                // res += c_45*(f_5(x) - f_5(g^9 * z)) / (x - g^9 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^9 * z)^(-1)*/ mload(add(denominatorsPtr, 0x120)),\\n                                  /*oods_coefficients[45]*/ mload(add(context, 0x6440)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[45]*/ mload(add(context, 0x4d60)))),\\n                           PRIME))\\n\\n                // res += c_46*(f_5(x) - f_5(g^12 * z)) / (x - g^12 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^12 * z)^(-1)*/ mload(add(denominatorsPtr, 0x180)),\\n                                  /*oods_coefficients[46]*/ mload(add(context, 0x6460)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[46]*/ mload(add(context, 0x4d80)))),\\n                           PRIME))\\n\\n                // res += c_47*(f_5(x) - f_5(g^13 * z)) / (x - g^13 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^13 * z)^(-1)*/ mload(add(denominatorsPtr, 0x1a0)),\\n                                  /*oods_coefficients[47]*/ mload(add(context, 0x6480)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[47]*/ mload(add(context, 0x4da0)))),\\n                           PRIME))\\n\\n                // res += c_48*(f_5(x) - f_5(g^16 * z)) / (x - g^16 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^16 * z)^(-1)*/ mload(add(denominatorsPtr, 0x200)),\\n                                  /*oods_coefficients[48]*/ mload(add(context, 0x64a0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[48]*/ mload(add(context, 0x4dc0)))),\\n                           PRIME))\\n\\n                // res += c_49*(f_5(x) - f_5(g^38 * z)) / (x - g^38 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^38 * z)^(-1)*/ mload(add(denominatorsPtr, 0x2c0)),\\n                                  /*oods_coefficients[49]*/ mload(add(context, 0x64c0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[49]*/ mload(add(context, 0x4de0)))),\\n                           PRIME))\\n\\n                // res += c_50*(f_5(x) - f_5(g^39 * z)) / (x - g^39 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^39 * z)^(-1)*/ mload(add(denominatorsPtr, 0x2e0)),\\n                                  /*oods_coefficients[50]*/ mload(add(context, 0x64e0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[50]*/ mload(add(context, 0x4e00)))),\\n                           PRIME))\\n\\n                // res += c_51*(f_5(x) - f_5(g^70 * z)) / (x - g^70 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^70 * z)^(-1)*/ mload(add(denominatorsPtr, 0x3a0)),\\n                                  /*oods_coefficients[51]*/ mload(add(context, 0x6500)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[51]*/ mload(add(context, 0x4e20)))),\\n                           PRIME))\\n\\n                // res += c_52*(f_5(x) - f_5(g^71 * z)) / (x - g^71 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^71 * z)^(-1)*/ mload(add(denominatorsPtr, 0x3c0)),\\n                                  /*oods_coefficients[52]*/ mload(add(context, 0x6520)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[52]*/ mload(add(context, 0x4e40)))),\\n                           PRIME))\\n\\n                // res += c_53*(f_5(x) - f_5(g^134 * z)) / (x - g^134 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^134 * z)^(-1)*/ mload(add(denominatorsPtr, 0x500)),\\n                                  /*oods_coefficients[53]*/ mload(add(context, 0x6540)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[53]*/ mload(add(context, 0x4e60)))),\\n                           PRIME))\\n\\n                // res += c_54*(f_5(x) - f_5(g^135 * z)) / (x - g^135 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^135 * z)^(-1)*/ mload(add(denominatorsPtr, 0x520)),\\n                                  /*oods_coefficients[54]*/ mload(add(context, 0x6560)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[54]*/ mload(add(context, 0x4e80)))),\\n                           PRIME))\\n\\n                // res += c_55*(f_5(x) - f_5(g^198 * z)) / (x - g^198 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^198 * z)^(-1)*/ mload(add(denominatorsPtr, 0x600)),\\n                                  /*oods_coefficients[55]*/ mload(add(context, 0x6580)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[55]*/ mload(add(context, 0x4ea0)))),\\n                           PRIME))\\n\\n                // res += c_56*(f_5(x) - f_5(g^199 * z)) / (x - g^199 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^199 * z)^(-1)*/ mload(add(denominatorsPtr, 0x620)),\\n                                  /*oods_coefficients[56]*/ mload(add(context, 0x65a0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[56]*/ mload(add(context, 0x4ec0)))),\\n                           PRIME))\\n\\n                // res += c_57*(f_5(x) - f_5(g^262 * z)) / (x - g^262 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^262 * z)^(-1)*/ mload(add(denominatorsPtr, 0x720)),\\n                                  /*oods_coefficients[57]*/ mload(add(context, 0x65c0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[57]*/ mload(add(context, 0x4ee0)))),\\n                           PRIME))\\n\\n                // res += c_58*(f_5(x) - f_5(g^263 * z)) / (x - g^263 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^263 * z)^(-1)*/ mload(add(denominatorsPtr, 0x740)),\\n                                  /*oods_coefficients[58]*/ mload(add(context, 0x65e0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[58]*/ mload(add(context, 0x4f00)))),\\n                           PRIME))\\n\\n                // res += c_59*(f_5(x) - f_5(g^326 * z)) / (x - g^326 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^326 * z)^(-1)*/ mload(add(denominatorsPtr, 0x760)),\\n                                  /*oods_coefficients[59]*/ mload(add(context, 0x6600)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[59]*/ mload(add(context, 0x4f20)))),\\n                           PRIME))\\n\\n                // res += c_60*(f_5(x) - f_5(g^390 * z)) / (x - g^390 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^390 * z)^(-1)*/ mload(add(denominatorsPtr, 0x780)),\\n                                  /*oods_coefficients[60]*/ mload(add(context, 0x6620)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[60]*/ mload(add(context, 0x4f40)))),\\n                           PRIME))\\n\\n                // res += c_61*(f_5(x) - f_5(g^391 * z)) / (x - g^391 * z).\\n                res := addmod(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^391 * z)^(-1)*/ mload(add(denominatorsPtr, 0x7a0)),\\n                                  /*oods_coefficients[61]*/ mload(add(context, 0x6640)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[61]*/ mload(add(context, 0x4f60)))),\\n                           PRIME),\\n                    PRIME)\\n\\n                // res += c_62*(f_5(x) - f_5(g^454 * z)) / (x - g^454 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^454 * z)^(-1)*/ mload(add(denominatorsPtr, 0x7c0)),\\n                                  /*oods_coefficients[62]*/ mload(add(context, 0x6660)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[62]*/ mload(add(context, 0x4f80)))),\\n                           PRIME))\\n\\n                // res += c_63*(f_5(x) - f_5(g^518 * z)) / (x - g^518 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^518 * z)^(-1)*/ mload(add(denominatorsPtr, 0x800)),\\n                                  /*oods_coefficients[63]*/ mload(add(context, 0x6680)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[63]*/ mload(add(context, 0x4fa0)))),\\n                           PRIME))\\n\\n                // res += c_64*(f_5(x) - f_5(g^16774 * z)) / (x - g^16774 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^16774 * z)^(-1)*/ mload(add(denominatorsPtr, 0x900)),\\n                                  /*oods_coefficients[64]*/ mload(add(context, 0x66a0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[64]*/ mload(add(context, 0x4fc0)))),\\n                           PRIME))\\n\\n                // res += c_65*(f_5(x) - f_5(g^16775 * z)) / (x - g^16775 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^16775 * z)^(-1)*/ mload(add(denominatorsPtr, 0x920)),\\n                                  /*oods_coefficients[65]*/ mload(add(context, 0x66c0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[65]*/ mload(add(context, 0x4fe0)))),\\n                           PRIME))\\n\\n                // res += c_66*(f_5(x) - f_5(g^33158 * z)) / (x - g^33158 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^33158 * z)^(-1)*/ mload(add(denominatorsPtr, 0xa40)),\\n                                  /*oods_coefficients[66]*/ mload(add(context, 0x66e0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[66]*/ mload(add(context, 0x5000)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #6.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0xc0)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_67*(f_6(x) - f_6(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[67]*/ mload(add(context, 0x6700)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[67]*/ mload(add(context, 0x5020)))),\\n                           PRIME))\\n\\n                // res += c_68*(f_6(x) - f_6(g * z)) / (x - g * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g * z)^(-1)*/ mload(add(denominatorsPtr, 0x20)),\\n                                  /*oods_coefficients[68]*/ mload(add(context, 0x6720)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[68]*/ mload(add(context, 0x5040)))),\\n                           PRIME))\\n\\n                // res += c_69*(f_6(x) - f_6(g^2 * z)) / (x - g^2 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^2 * z)^(-1)*/ mload(add(denominatorsPtr, 0x40)),\\n                                  /*oods_coefficients[69]*/ mload(add(context, 0x6740)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[69]*/ mload(add(context, 0x5060)))),\\n                           PRIME))\\n\\n                // res += c_70*(f_6(x) - f_6(g^3 * z)) / (x - g^3 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^3 * z)^(-1)*/ mload(add(denominatorsPtr, 0x60)),\\n                                  /*oods_coefficients[70]*/ mload(add(context, 0x6760)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[70]*/ mload(add(context, 0x5080)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #7.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0xe0)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_71*(f_7(x) - f_7(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[71]*/ mload(add(context, 0x6780)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[71]*/ mload(add(context, 0x50a0)))),\\n                           PRIME))\\n\\n                // res += c_72*(f_7(x) - f_7(g * z)) / (x - g * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g * z)^(-1)*/ mload(add(denominatorsPtr, 0x20)),\\n                                  /*oods_coefficients[72]*/ mload(add(context, 0x67a0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[72]*/ mload(add(context, 0x50c0)))),\\n                           PRIME))\\n\\n                // res += c_73*(f_7(x) - f_7(g^2 * z)) / (x - g^2 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^2 * z)^(-1)*/ mload(add(denominatorsPtr, 0x40)),\\n                                  /*oods_coefficients[73]*/ mload(add(context, 0x67c0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[73]*/ mload(add(context, 0x50e0)))),\\n                           PRIME))\\n\\n                // res += c_74*(f_7(x) - f_7(g^3 * z)) / (x - g^3 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^3 * z)^(-1)*/ mload(add(denominatorsPtr, 0x60)),\\n                                  /*oods_coefficients[74]*/ mload(add(context, 0x67e0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[74]*/ mload(add(context, 0x5100)))),\\n                           PRIME))\\n\\n                // res += c_75*(f_7(x) - f_7(g^4 * z)) / (x - g^4 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^4 * z)^(-1)*/ mload(add(denominatorsPtr, 0x80)),\\n                                  /*oods_coefficients[75]*/ mload(add(context, 0x6800)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[75]*/ mload(add(context, 0x5120)))),\\n                           PRIME))\\n\\n                // res += c_76*(f_7(x) - f_7(g^5 * z)) / (x - g^5 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^5 * z)^(-1)*/ mload(add(denominatorsPtr, 0xa0)),\\n                                  /*oods_coefficients[76]*/ mload(add(context, 0x6820)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[76]*/ mload(add(context, 0x5140)))),\\n                           PRIME))\\n\\n                // res += c_77*(f_7(x) - f_7(g^6 * z)) / (x - g^6 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^6 * z)^(-1)*/ mload(add(denominatorsPtr, 0xc0)),\\n                                  /*oods_coefficients[77]*/ mload(add(context, 0x6840)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[77]*/ mload(add(context, 0x5160)))),\\n                           PRIME))\\n\\n                // res += c_78*(f_7(x) - f_7(g^7 * z)) / (x - g^7 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^7 * z)^(-1)*/ mload(add(denominatorsPtr, 0xe0)),\\n                                  /*oods_coefficients[78]*/ mload(add(context, 0x6860)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[78]*/ mload(add(context, 0x5180)))),\\n                           PRIME))\\n\\n                // res += c_79*(f_7(x) - f_7(g^8 * z)) / (x - g^8 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^8 * z)^(-1)*/ mload(add(denominatorsPtr, 0x100)),\\n                                  /*oods_coefficients[79]*/ mload(add(context, 0x6880)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[79]*/ mload(add(context, 0x51a0)))),\\n                           PRIME))\\n\\n                // res += c_80*(f_7(x) - f_7(g^9 * z)) / (x - g^9 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^9 * z)^(-1)*/ mload(add(denominatorsPtr, 0x120)),\\n                                  /*oods_coefficients[80]*/ mload(add(context, 0x68a0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[80]*/ mload(add(context, 0x51c0)))),\\n                           PRIME))\\n\\n                // res += c_81*(f_7(x) - f_7(g^11 * z)) / (x - g^11 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^11 * z)^(-1)*/ mload(add(denominatorsPtr, 0x160)),\\n                                  /*oods_coefficients[81]*/ mload(add(context, 0x68c0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[81]*/ mload(add(context, 0x51e0)))),\\n                           PRIME))\\n\\n                // res += c_82*(f_7(x) - f_7(g^12 * z)) / (x - g^12 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^12 * z)^(-1)*/ mload(add(denominatorsPtr, 0x180)),\\n                                  /*oods_coefficients[82]*/ mload(add(context, 0x68e0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[82]*/ mload(add(context, 0x5200)))),\\n                           PRIME))\\n\\n                // res += c_83*(f_7(x) - f_7(g^13 * z)) / (x - g^13 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^13 * z)^(-1)*/ mload(add(denominatorsPtr, 0x1a0)),\\n                                  /*oods_coefficients[83]*/ mload(add(context, 0x6900)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[83]*/ mload(add(context, 0x5220)))),\\n                           PRIME))\\n\\n                // res += c_84*(f_7(x) - f_7(g^15 * z)) / (x - g^15 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^15 * z)^(-1)*/ mload(add(denominatorsPtr, 0x1e0)),\\n                                  /*oods_coefficients[84]*/ mload(add(context, 0x6920)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[84]*/ mload(add(context, 0x5240)))),\\n                           PRIME))\\n\\n                // res += c_85*(f_7(x) - f_7(g^17 * z)) / (x - g^17 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^17 * z)^(-1)*/ mload(add(denominatorsPtr, 0x220)),\\n                                  /*oods_coefficients[85]*/ mload(add(context, 0x6940)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[85]*/ mload(add(context, 0x5260)))),\\n                           PRIME))\\n\\n                // res += c_86*(f_7(x) - f_7(g^23 * z)) / (x - g^23 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^23 * z)^(-1)*/ mload(add(denominatorsPtr, 0x240)),\\n                                  /*oods_coefficients[86]*/ mload(add(context, 0x6960)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[86]*/ mload(add(context, 0x5280)))),\\n                           PRIME))\\n\\n                // res += c_87*(f_7(x) - f_7(g^25 * z)) / (x - g^25 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^25 * z)^(-1)*/ mload(add(denominatorsPtr, 0x260)),\\n                                  /*oods_coefficients[87]*/ mload(add(context, 0x6980)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[87]*/ mload(add(context, 0x52a0)))),\\n                           PRIME))\\n\\n                // res += c_88*(f_7(x) - f_7(g^31 * z)) / (x - g^31 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^31 * z)^(-1)*/ mload(add(denominatorsPtr, 0x280)),\\n                                  /*oods_coefficients[88]*/ mload(add(context, 0x69a0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[88]*/ mload(add(context, 0x52c0)))),\\n                           PRIME))\\n\\n                // res += c_89*(f_7(x) - f_7(g^39 * z)) / (x - g^39 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^39 * z)^(-1)*/ mload(add(denominatorsPtr, 0x2e0)),\\n                                  /*oods_coefficients[89]*/ mload(add(context, 0x69c0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[89]*/ mload(add(context, 0x52e0)))),\\n                           PRIME))\\n\\n                // res += c_90*(f_7(x) - f_7(g^44 * z)) / (x - g^44 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^44 * z)^(-1)*/ mload(add(denominatorsPtr, 0x300)),\\n                                  /*oods_coefficients[90]*/ mload(add(context, 0x69e0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[90]*/ mload(add(context, 0x5300)))),\\n                           PRIME))\\n\\n                // res += c_91*(f_7(x) - f_7(g^47 * z)) / (x - g^47 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^47 * z)^(-1)*/ mload(add(denominatorsPtr, 0x320)),\\n                                  /*oods_coefficients[91]*/ mload(add(context, 0x6a00)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[91]*/ mload(add(context, 0x5320)))),\\n                           PRIME))\\n\\n                // res += c_92*(f_7(x) - f_7(g^55 * z)) / (x - g^55 * z).\\n                res := addmod(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^55 * z)^(-1)*/ mload(add(denominatorsPtr, 0x340)),\\n                                  /*oods_coefficients[92]*/ mload(add(context, 0x6a20)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[92]*/ mload(add(context, 0x5340)))),\\n                           PRIME),\\n                    PRIME)\\n\\n                // res += c_93*(f_7(x) - f_7(g^63 * z)) / (x - g^63 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^63 * z)^(-1)*/ mload(add(denominatorsPtr, 0x360)),\\n                                  /*oods_coefficients[93]*/ mload(add(context, 0x6a40)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[93]*/ mload(add(context, 0x5360)))),\\n                           PRIME))\\n\\n                // res += c_94*(f_7(x) - f_7(g^71 * z)) / (x - g^71 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^71 * z)^(-1)*/ mload(add(denominatorsPtr, 0x3c0)),\\n                                  /*oods_coefficients[94]*/ mload(add(context, 0x6a60)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[94]*/ mload(add(context, 0x5380)))),\\n                           PRIME))\\n\\n                // res += c_95*(f_7(x) - f_7(g^76 * z)) / (x - g^76 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^76 * z)^(-1)*/ mload(add(denominatorsPtr, 0x3e0)),\\n                                  /*oods_coefficients[95]*/ mload(add(context, 0x6a80)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[95]*/ mload(add(context, 0x53a0)))),\\n                           PRIME))\\n\\n                // res += c_96*(f_7(x) - f_7(g^79 * z)) / (x - g^79 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^79 * z)^(-1)*/ mload(add(denominatorsPtr, 0x400)),\\n                                  /*oods_coefficients[96]*/ mload(add(context, 0x6aa0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[96]*/ mload(add(context, 0x53c0)))),\\n                           PRIME))\\n\\n                // res += c_97*(f_7(x) - f_7(g^95 * z)) / (x - g^95 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^95 * z)^(-1)*/ mload(add(denominatorsPtr, 0x440)),\\n                                  /*oods_coefficients[97]*/ mload(add(context, 0x6ac0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[97]*/ mload(add(context, 0x53e0)))),\\n                           PRIME))\\n\\n                // res += c_98*(f_7(x) - f_7(g^103 * z)) / (x - g^103 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^103 * z)^(-1)*/ mload(add(denominatorsPtr, 0x480)),\\n                                  /*oods_coefficients[98]*/ mload(add(context, 0x6ae0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[98]*/ mload(add(context, 0x5400)))),\\n                           PRIME))\\n\\n                // res += c_99*(f_7(x) - f_7(g^108 * z)) / (x - g^108 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^108 * z)^(-1)*/ mload(add(denominatorsPtr, 0x4a0)),\\n                                  /*oods_coefficients[99]*/ mload(add(context, 0x6b00)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[99]*/ mload(add(context, 0x5420)))),\\n                           PRIME))\\n\\n                // res += c_100*(f_7(x) - f_7(g^119 * z)) / (x - g^119 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^119 * z)^(-1)*/ mload(add(denominatorsPtr, 0x4c0)),\\n                                  /*oods_coefficients[100]*/ mload(add(context, 0x6b20)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[100]*/ mload(add(context, 0x5440)))),\\n                           PRIME))\\n\\n                // res += c_101*(f_7(x) - f_7(g^140 * z)) / (x - g^140 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^140 * z)^(-1)*/ mload(add(denominatorsPtr, 0x540)),\\n                                  /*oods_coefficients[101]*/ mload(add(context, 0x6b40)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[101]*/ mload(add(context, 0x5460)))),\\n                           PRIME))\\n\\n                // res += c_102*(f_7(x) - f_7(g^172 * z)) / (x - g^172 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^172 * z)^(-1)*/ mload(add(denominatorsPtr, 0x560)),\\n                                  /*oods_coefficients[102]*/ mload(add(context, 0x6b60)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[102]*/ mload(add(context, 0x5480)))),\\n                           PRIME))\\n\\n                // res += c_103*(f_7(x) - f_7(g^204 * z)) / (x - g^204 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^204 * z)^(-1)*/ mload(add(denominatorsPtr, 0x640)),\\n                                  /*oods_coefficients[103]*/ mload(add(context, 0x6b80)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[103]*/ mload(add(context, 0x54a0)))),\\n                           PRIME))\\n\\n                // res += c_104*(f_7(x) - f_7(g^236 * z)) / (x - g^236 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^236 * z)^(-1)*/ mload(add(denominatorsPtr, 0x680)),\\n                                  /*oods_coefficients[104]*/ mload(add(context, 0x6ba0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[104]*/ mload(add(context, 0x54c0)))),\\n                           PRIME))\\n\\n                // res += c_105*(f_7(x) - f_7(g^16335 * z)) / (x - g^16335 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^16335 * z)^(-1)*/ mload(add(denominatorsPtr, 0x820)),\\n                                  /*oods_coefficients[105]*/ mload(add(context, 0x6bc0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[105]*/ mload(add(context, 0x54e0)))),\\n                           PRIME))\\n\\n                // res += c_106*(f_7(x) - f_7(g^16343 * z)) / (x - g^16343 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^16343 * z)^(-1)*/ mload(add(denominatorsPtr, 0x840)),\\n                                  /*oods_coefficients[106]*/ mload(add(context, 0x6be0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[106]*/ mload(add(context, 0x5500)))),\\n                           PRIME))\\n\\n                // res += c_107*(f_7(x) - f_7(g^16367 * z)) / (x - g^16367 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^16367 * z)^(-1)*/ mload(add(denominatorsPtr, 0x860)),\\n                                  /*oods_coefficients[107]*/ mload(add(context, 0x6c00)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[107]*/ mload(add(context, 0x5520)))),\\n                           PRIME))\\n\\n                // res += c_108*(f_7(x) - f_7(g^16375 * z)) / (x - g^16375 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^16375 * z)^(-1)*/ mload(add(denominatorsPtr, 0x880)),\\n                                  /*oods_coefficients[108]*/ mload(add(context, 0x6c20)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[108]*/ mload(add(context, 0x5540)))),\\n                           PRIME))\\n\\n                // res += c_109*(f_7(x) - f_7(g^16383 * z)) / (x - g^16383 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^16383 * z)^(-1)*/ mload(add(denominatorsPtr, 0x8a0)),\\n                                  /*oods_coefficients[109]*/ mload(add(context, 0x6c40)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[109]*/ mload(add(context, 0x5560)))),\\n                           PRIME))\\n\\n                // res += c_110*(f_7(x) - f_7(g^16391 * z)) / (x - g^16391 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^16391 * z)^(-1)*/ mload(add(denominatorsPtr, 0x8c0)),\\n                                  /*oods_coefficients[110]*/ mload(add(context, 0x6c60)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[110]*/ mload(add(context, 0x5580)))),\\n                           PRIME))\\n\\n                // res += c_111*(f_7(x) - f_7(g^16423 * z)) / (x - g^16423 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^16423 * z)^(-1)*/ mload(add(denominatorsPtr, 0x8e0)),\\n                                  /*oods_coefficients[111]*/ mload(add(context, 0x6c80)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[111]*/ mload(add(context, 0x55a0)))),\\n                           PRIME))\\n\\n                // res += c_112*(f_7(x) - f_7(g^32719 * z)) / (x - g^32719 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^32719 * z)^(-1)*/ mload(add(denominatorsPtr, 0x9c0)),\\n                                  /*oods_coefficients[112]*/ mload(add(context, 0x6ca0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[112]*/ mload(add(context, 0x55c0)))),\\n                           PRIME))\\n\\n                // res += c_113*(f_7(x) - f_7(g^32727 * z)) / (x - g^32727 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^32727 * z)^(-1)*/ mload(add(denominatorsPtr, 0x9e0)),\\n                                  /*oods_coefficients[113]*/ mload(add(context, 0x6cc0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[113]*/ mload(add(context, 0x55e0)))),\\n                           PRIME))\\n\\n                // res += c_114*(f_7(x) - f_7(g^32751 * z)) / (x - g^32751 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^32751 * z)^(-1)*/ mload(add(denominatorsPtr, 0xa00)),\\n                                  /*oods_coefficients[114]*/ mload(add(context, 0x6ce0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[114]*/ mload(add(context, 0x5600)))),\\n                           PRIME))\\n\\n                // res += c_115*(f_7(x) - f_7(g^32759 * z)) / (x - g^32759 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^32759 * z)^(-1)*/ mload(add(denominatorsPtr, 0xa20)),\\n                                  /*oods_coefficients[115]*/ mload(add(context, 0x6d00)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[115]*/ mload(add(context, 0x5620)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #8.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0x100)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_116*(f_8(x) - f_8(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[116]*/ mload(add(context, 0x6d20)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[116]*/ mload(add(context, 0x5640)))),\\n                           PRIME))\\n\\n                // res += c_117*(f_8(x) - f_8(g^16 * z)) / (x - g^16 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^16 * z)^(-1)*/ mload(add(denominatorsPtr, 0x200)),\\n                                  /*oods_coefficients[117]*/ mload(add(context, 0x6d40)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[117]*/ mload(add(context, 0x5660)))),\\n                           PRIME))\\n\\n                // res += c_118*(f_8(x) - f_8(g^32 * z)) / (x - g^32 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^32 * z)^(-1)*/ mload(add(denominatorsPtr, 0x2a0)),\\n                                  /*oods_coefficients[118]*/ mload(add(context, 0x6d60)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[118]*/ mload(add(context, 0x5680)))),\\n                           PRIME))\\n\\n                // res += c_119*(f_8(x) - f_8(g^64 * z)) / (x - g^64 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^64 * z)^(-1)*/ mload(add(denominatorsPtr, 0x380)),\\n                                  /*oods_coefficients[119]*/ mload(add(context, 0x6d80)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[119]*/ mload(add(context, 0x56a0)))),\\n                           PRIME))\\n\\n                // res += c_120*(f_8(x) - f_8(g^80 * z)) / (x - g^80 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^80 * z)^(-1)*/ mload(add(denominatorsPtr, 0x420)),\\n                                  /*oods_coefficients[120]*/ mload(add(context, 0x6da0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[120]*/ mload(add(context, 0x56c0)))),\\n                           PRIME))\\n\\n                // res += c_121*(f_8(x) - f_8(g^96 * z)) / (x - g^96 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^96 * z)^(-1)*/ mload(add(denominatorsPtr, 0x460)),\\n                                  /*oods_coefficients[121]*/ mload(add(context, 0x6dc0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[121]*/ mload(add(context, 0x56e0)))),\\n                           PRIME))\\n\\n                // res += c_122*(f_8(x) - f_8(g^128 * z)) / (x - g^128 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^128 * z)^(-1)*/ mload(add(denominatorsPtr, 0x4e0)),\\n                                  /*oods_coefficients[122]*/ mload(add(context, 0x6de0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[122]*/ mload(add(context, 0x5700)))),\\n                           PRIME))\\n\\n                // res += c_123*(f_8(x) - f_8(g^192 * z)) / (x - g^192 * z).\\n                res := addmod(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^192 * z)^(-1)*/ mload(add(denominatorsPtr, 0x580)),\\n                                  /*oods_coefficients[123]*/ mload(add(context, 0x6e00)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[123]*/ mload(add(context, 0x5720)))),\\n                           PRIME),\\n                    PRIME)\\n\\n                // res += c_124*(f_8(x) - f_8(g^224 * z)) / (x - g^224 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^224 * z)^(-1)*/ mload(add(denominatorsPtr, 0x660)),\\n                                  /*oods_coefficients[124]*/ mload(add(context, 0x6e20)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[124]*/ mload(add(context, 0x5740)))),\\n                           PRIME))\\n\\n                // res += c_125*(f_8(x) - f_8(g^32640 * z)) / (x - g^32640 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^32640 * z)^(-1)*/ mload(add(denominatorsPtr, 0x940)),\\n                                  /*oods_coefficients[125]*/ mload(add(context, 0x6e40)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[125]*/ mload(add(context, 0x5760)))),\\n                           PRIME))\\n\\n                // res += c_126*(f_8(x) - f_8(g^32656 * z)) / (x - g^32656 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^32656 * z)^(-1)*/ mload(add(denominatorsPtr, 0x960)),\\n                                  /*oods_coefficients[126]*/ mload(add(context, 0x6e60)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[126]*/ mload(add(context, 0x5780)))),\\n                           PRIME))\\n\\n                // res += c_127*(f_8(x) - f_8(g^32672 * z)) / (x - g^32672 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^32672 * z)^(-1)*/ mload(add(denominatorsPtr, 0x980)),\\n                                  /*oods_coefficients[127]*/ mload(add(context, 0x6e80)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[127]*/ mload(add(context, 0x57a0)))),\\n                           PRIME))\\n\\n                // res += c_128*(f_8(x) - f_8(g^32704 * z)) / (x - g^32704 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^32704 * z)^(-1)*/ mload(add(denominatorsPtr, 0x9a0)),\\n                                  /*oods_coefficients[128]*/ mload(add(context, 0x6ea0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[128]*/ mload(add(context, 0x57c0)))),\\n                           PRIME))\\n                }\\n\\n                // Mask items for column #9.\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(traceQueryResponses, 0x120)), kMontgomeryRInv, PRIME)\\n\\n                // res += c_129*(f_9(x) - f_9(z)) / (x - z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z)^(-1)*/ mload(denominatorsPtr),\\n                                  /*oods_coefficients[129]*/ mload(add(context, 0x6ec0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[129]*/ mload(add(context, 0x57e0)))),\\n                           PRIME))\\n\\n                // res += c_130*(f_9(x) - f_9(g * z)) / (x - g * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g * z)^(-1)*/ mload(add(denominatorsPtr, 0x20)),\\n                                  /*oods_coefficients[130]*/ mload(add(context, 0x6ee0)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[130]*/ mload(add(context, 0x5800)))),\\n                           PRIME))\\n\\n                // res += c_131*(f_9(x) - f_9(g^2 * z)) / (x - g^2 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^2 * z)^(-1)*/ mload(add(denominatorsPtr, 0x40)),\\n                                  /*oods_coefficients[131]*/ mload(add(context, 0x6f00)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[131]*/ mload(add(context, 0x5820)))),\\n                           PRIME))\\n\\n                // res += c_132*(f_9(x) - f_9(g^5 * z)) / (x - g^5 * z).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - g^5 * z)^(-1)*/ mload(add(denominatorsPtr, 0xa0)),\\n                                  /*oods_coefficients[132]*/ mload(add(context, 0x6f20)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*oods_values[132]*/ mload(add(context, 0x5840)))),\\n                           PRIME))\\n                }\\n\\n                // Advance traceQueryResponses by amount read (0x20 * nTraceColumns).\\n                traceQueryResponses := add(traceQueryResponses, 0x140)\\n\\n                // Composition constraints.\\n\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(compositionQueryResponses), kMontgomeryRInv, PRIME)\\n                // res += c_133*(h_0(x) - C_0(z^2)) / (x - z^2).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z^2)^(-1)*/ mload(add(denominatorsPtr, 0xa60)),\\n                                  /*oods_coefficients[133]*/ mload(add(context, 0x6f40)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*composition_oods_values[0]*/ mload(add(context, 0x5860)))),\\n                           PRIME))\\n                }\\n\\n                {\\n                // Read the next element.\\n                let columnValue := mulmod(mload(add(compositionQueryResponses, 0x20)), kMontgomeryRInv, PRIME)\\n                // res += c_134*(h_1(x) - C_1(z^2)) / (x - z^2).\\n                res := add(\\n                    res,\\n                    mulmod(mulmod(/*(x - z^2)^(-1)*/ mload(add(denominatorsPtr, 0xa60)),\\n                                  /*oods_coefficients[134]*/ mload(add(context, 0x6f60)),\\n                                  PRIME),\\n                           add(columnValue, sub(PRIME, /*composition_oods_values[1]*/ mload(add(context, 0x5880)))),\\n                           PRIME))\\n                }\\n\\n                // Advance compositionQueryResponses by amount read (0x20 * constraintDegree).\\n                compositionQueryResponses := add(compositionQueryResponses, 0x40)\\n\\n                // Append the friValue, which is the sum of the out-of-domain-sampling boundary\\n                // constraints for the trace and composition polynomials, to the friQueue array.\\n                mstore(add(friQueue, 0x20), mod(res, PRIME))\\n\\n                // Append the friInvPoint of the current query to the friQueue array.\\n                mstore(add(friQueue, 0x40), /*friInvPoint*/ mload(add(denominatorsPtr,0xa80)))\\n\\n                // Advance denominatorsPtr by chunk size (0x20 * (2+N_ROWS_IN_MASK)).\\n                denominatorsPtr := add(denominatorsPtr, 0xaa0)\\n            }\\n            return(/*friQueue*/ add(context, 0xdc0), 0x1200)\\n        }\\n    }\\n\\n    /*\\n      Computes and performs batch inverse on all the denominators required for the out of domain\\n      sampling boundary constraints.\\n\\n      Since the friEvalPoints are calculated during the computation of the denominators\\n      this function also adds those to the batch inverse in prepartion for the fri that follows.\\n\\n      After this function returns, the batch_inverse_out array holds #queries\\n      chunks of size (2 + N_ROWS_IN_MASK) with the following structure:\\n      0..(N_ROWS_IN_MASK-1):   [(x - g^i * z)^(-1) for i in rowsInMask]\\n      N_ROWS_IN_MASK:          (x - z^constraintDegree)^-1\\n      N_ROWS_IN_MASK+1:        friEvalPointInv.\\n    */\\n    function oodsPrepareInverses(\\n        uint256[] memory context, uint256[] memory batchInverseArray)\\n        internal view {\\n        uint256 evalCosetOffset_ = PrimeFieldElement0.GENERATOR_VAL;\\n        // The array expmodsAndPoints stores subexpressions that are needed\\n        // for the denominators computation.\\n        // The array is segmented as follows:\\n        //    expmodsAndPoints[0:21] (.expmods) expmods used during calculations of the points below.\\n        //    expmodsAndPoints[21:104] (.points) points used during the denominators calculation.\\n        uint256[104] memory expmodsAndPoints;\\n        assembly {\\n            function expmod(base, exponent, modulus) -\\u003e result {\\n              let p := mload(0x40)\\n              mstore(p, 0x20)                 // Length of Base.\\n              mstore(add(p, 0x20), 0x20)      // Length of Exponent.\\n              mstore(add(p, 0x40), 0x20)      // Length of Modulus.\\n              mstore(add(p, 0x60), base)      // Base.\\n              mstore(add(p, 0x80), exponent)  // Exponent.\\n              mstore(add(p, 0xa0), modulus)   // Modulus.\\n              // Call modexp precompile.\\n              if iszero(staticcall(not(0), 0x05, p, 0xc0, p, 0x20)) {\\n                revert(0, 0)\\n              }\\n              result := mload(p)\\n            }\\n\\n            let traceGenerator := /*trace_generator*/ mload(add(context, 0x2b60))\\n            let PRIME := 0x800000000000011000000000000000000000000000000000000000000000001\\n\\n            // Prepare expmods for computations of trace generator powers.\\n\\n            // expmodsAndPoints.expmods[0] = traceGenerator^2.\\n            mstore(expmodsAndPoints,\\n                   mulmod(traceGenerator, // traceGenerator^1\\n                          traceGenerator, // traceGenerator^1\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[1] = traceGenerator^3.\\n            mstore(add(expmodsAndPoints, 0x20),\\n                   mulmod(mload(expmodsAndPoints), // traceGenerator^2\\n                          traceGenerator, // traceGenerator^1\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[2] = traceGenerator^5.\\n            mstore(add(expmodsAndPoints, 0x40),\\n                   mulmod(mload(add(expmodsAndPoints, 0x20)), // traceGenerator^3\\n                          mload(expmodsAndPoints), // traceGenerator^2\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[3] = traceGenerator^6.\\n            mstore(add(expmodsAndPoints, 0x60),\\n                   mulmod(mload(add(expmodsAndPoints, 0x40)), // traceGenerator^5\\n                          traceGenerator, // traceGenerator^1\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[4] = traceGenerator^7.\\n            mstore(add(expmodsAndPoints, 0x80),\\n                   mulmod(mload(add(expmodsAndPoints, 0x60)), // traceGenerator^6\\n                          traceGenerator, // traceGenerator^1\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[5] = traceGenerator^8.\\n            mstore(add(expmodsAndPoints, 0xa0),\\n                   mulmod(mload(add(expmodsAndPoints, 0x80)), // traceGenerator^7\\n                          traceGenerator, // traceGenerator^1\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[6] = traceGenerator^9.\\n            mstore(add(expmodsAndPoints, 0xc0),\\n                   mulmod(mload(add(expmodsAndPoints, 0xa0)), // traceGenerator^8\\n                          traceGenerator, // traceGenerator^1\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[7] = traceGenerator^11.\\n            mstore(add(expmodsAndPoints, 0xe0),\\n                   mulmod(mload(add(expmodsAndPoints, 0xc0)), // traceGenerator^9\\n                          mload(expmodsAndPoints), // traceGenerator^2\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[8] = traceGenerator^12.\\n            mstore(add(expmodsAndPoints, 0x100),\\n                   mulmod(mload(add(expmodsAndPoints, 0xe0)), // traceGenerator^11\\n                          traceGenerator, // traceGenerator^1\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[9] = traceGenerator^15.\\n            mstore(add(expmodsAndPoints, 0x120),\\n                   mulmod(mload(add(expmodsAndPoints, 0x100)), // traceGenerator^12\\n                          mload(add(expmodsAndPoints, 0x20)), // traceGenerator^3\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[10] = traceGenerator^16.\\n            mstore(add(expmodsAndPoints, 0x140),\\n                   mulmod(mload(add(expmodsAndPoints, 0x120)), // traceGenerator^15\\n                          traceGenerator, // traceGenerator^1\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[11] = traceGenerator^20.\\n            mstore(add(expmodsAndPoints, 0x160),\\n                   mulmod(mload(add(expmodsAndPoints, 0x120)), // traceGenerator^15\\n                          mload(add(expmodsAndPoints, 0x40)), // traceGenerator^5\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[12] = traceGenerator^24.\\n            mstore(add(expmodsAndPoints, 0x180),\\n                   mulmod(mload(add(expmodsAndPoints, 0x140)), // traceGenerator^16\\n                          mload(add(expmodsAndPoints, 0xa0)), // traceGenerator^8\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[13] = traceGenerator^32.\\n            mstore(add(expmodsAndPoints, 0x1a0),\\n                   mulmod(mload(add(expmodsAndPoints, 0x180)), // traceGenerator^24\\n                          mload(add(expmodsAndPoints, 0xa0)), // traceGenerator^8\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[14] = traceGenerator^57.\\n            mstore(add(expmodsAndPoints, 0x1c0),\\n                   mulmod(mload(add(expmodsAndPoints, 0x1a0)), // traceGenerator^32\\n                          mulmod(mload(add(expmodsAndPoints, 0x180)), // traceGenerator^24\\n                                 traceGenerator, // traceGenerator^1\\n                                 PRIME),\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[15] = traceGenerator^63.\\n            mstore(add(expmodsAndPoints, 0x1e0),\\n                   mulmod(mload(add(expmodsAndPoints, 0x1c0)), // traceGenerator^57\\n                          mload(add(expmodsAndPoints, 0x60)), // traceGenerator^6\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[16] = traceGenerator^64.\\n            mstore(add(expmodsAndPoints, 0x200),\\n                   mulmod(mload(add(expmodsAndPoints, 0x1e0)), // traceGenerator^63\\n                          traceGenerator, // traceGenerator^1\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[17] = traceGenerator^351.\\n            mstore(add(expmodsAndPoints, 0x220),\\n                   mulmod(mload(add(expmodsAndPoints, 0x200)), // traceGenerator^64\\n                          mulmod(mload(add(expmodsAndPoints, 0x200)), // traceGenerator^64\\n                                 mulmod(mload(add(expmodsAndPoints, 0x200)), // traceGenerator^64\\n                                        mulmod(mload(add(expmodsAndPoints, 0x200)), // traceGenerator^64\\n                                               mulmod(mload(add(expmodsAndPoints, 0x1e0)), // traceGenerator^63\\n                                                      mload(add(expmodsAndPoints, 0x1a0)), // traceGenerator^32\\n                                                      PRIME),\\n                                               PRIME),\\n                                        PRIME),\\n                                 PRIME),\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[18] = traceGenerator^399.\\n            mstore(add(expmodsAndPoints, 0x240),\\n                   mulmod(mload(add(expmodsAndPoints, 0x220)), // traceGenerator^351\\n                          mulmod(mload(add(expmodsAndPoints, 0x1a0)), // traceGenerator^32\\n                                 mload(add(expmodsAndPoints, 0x140)), // traceGenerator^16\\n                                 PRIME),\\n                          PRIME))\\n\\n            // expmodsAndPoints.expmods[19] = traceGenerator^15817.\\n            mstore(add(expmodsAndPoints, 0x260),\\n                   expmod(traceGenerator, 15817, PRIME))\\n\\n            // expmodsAndPoints.expmods[20] = traceGenerator^15865.\\n            mstore(add(expmodsAndPoints, 0x280),\\n                   mulmod(mload(add(expmodsAndPoints, 0x260)), // traceGenerator^15817\\n                          mulmod(mload(add(expmodsAndPoints, 0x1a0)), // traceGenerator^32\\n                                 mload(add(expmodsAndPoints, 0x140)), // traceGenerator^16\\n                                 PRIME),\\n                          PRIME))\\n\\n            let oodsPoint := /*oods_point*/ mload(add(context, 0x2b80))\\n            {\\n              // point = -z.\\n              let point := sub(PRIME, oodsPoint)\\n              // Compute denominators for rows with nonconst mask expression.\\n              // We compute those first because for the const rows we modify the point variable.\\n\\n              // Compute denominators for rows with const mask expression.\\n\\n              // expmods_and_points.points[0] = -z.\\n              mstore(add(expmodsAndPoints, 0x2a0), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[1] = -(g * z).\\n              mstore(add(expmodsAndPoints, 0x2c0), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[2] = -(g^2 * z).\\n              mstore(add(expmodsAndPoints, 0x2e0), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[3] = -(g^3 * z).\\n              mstore(add(expmodsAndPoints, 0x300), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[4] = -(g^4 * z).\\n              mstore(add(expmodsAndPoints, 0x320), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[5] = -(g^5 * z).\\n              mstore(add(expmodsAndPoints, 0x340), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[6] = -(g^6 * z).\\n              mstore(add(expmodsAndPoints, 0x360), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[7] = -(g^7 * z).\\n              mstore(add(expmodsAndPoints, 0x380), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[8] = -(g^8 * z).\\n              mstore(add(expmodsAndPoints, 0x3a0), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[9] = -(g^9 * z).\\n              mstore(add(expmodsAndPoints, 0x3c0), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[10] = -(g^10 * z).\\n              mstore(add(expmodsAndPoints, 0x3e0), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[11] = -(g^11 * z).\\n              mstore(add(expmodsAndPoints, 0x400), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[12] = -(g^12 * z).\\n              mstore(add(expmodsAndPoints, 0x420), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[13] = -(g^13 * z).\\n              mstore(add(expmodsAndPoints, 0x440), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[14] = -(g^14 * z).\\n              mstore(add(expmodsAndPoints, 0x460), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[15] = -(g^15 * z).\\n              mstore(add(expmodsAndPoints, 0x480), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[16] = -(g^16 * z).\\n              mstore(add(expmodsAndPoints, 0x4a0), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[17] = -(g^17 * z).\\n              mstore(add(expmodsAndPoints, 0x4c0), point)\\n\\n              // point *= g^6.\\n              point := mulmod(point, /*traceGenerator^6*/ mload(add(expmodsAndPoints, 0x60)), PRIME)\\n              // expmods_and_points.points[18] = -(g^23 * z).\\n              mstore(add(expmodsAndPoints, 0x4e0), point)\\n\\n              // point *= g^2.\\n              point := mulmod(point, /*traceGenerator^2*/ mload(expmodsAndPoints), PRIME)\\n              // expmods_and_points.points[19] = -(g^25 * z).\\n              mstore(add(expmodsAndPoints, 0x500), point)\\n\\n              // point *= g^6.\\n              point := mulmod(point, /*traceGenerator^6*/ mload(add(expmodsAndPoints, 0x60)), PRIME)\\n              // expmods_and_points.points[20] = -(g^31 * z).\\n              mstore(add(expmodsAndPoints, 0x520), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[21] = -(g^32 * z).\\n              mstore(add(expmodsAndPoints, 0x540), point)\\n\\n              // point *= g^6.\\n              point := mulmod(point, /*traceGenerator^6*/ mload(add(expmodsAndPoints, 0x60)), PRIME)\\n              // expmods_and_points.points[22] = -(g^38 * z).\\n              mstore(add(expmodsAndPoints, 0x560), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[23] = -(g^39 * z).\\n              mstore(add(expmodsAndPoints, 0x580), point)\\n\\n              // point *= g^5.\\n              point := mulmod(point, /*traceGenerator^5*/ mload(add(expmodsAndPoints, 0x40)), PRIME)\\n              // expmods_and_points.points[24] = -(g^44 * z).\\n              mstore(add(expmodsAndPoints, 0x5a0), point)\\n\\n              // point *= g^3.\\n              point := mulmod(point, /*traceGenerator^3*/ mload(add(expmodsAndPoints, 0x20)), PRIME)\\n              // expmods_and_points.points[25] = -(g^47 * z).\\n              mstore(add(expmodsAndPoints, 0x5c0), point)\\n\\n              // point *= g^8.\\n              point := mulmod(point, /*traceGenerator^8*/ mload(add(expmodsAndPoints, 0xa0)), PRIME)\\n              // expmods_and_points.points[26] = -(g^55 * z).\\n              mstore(add(expmodsAndPoints, 0x5e0), point)\\n\\n              // point *= g^8.\\n              point := mulmod(point, /*traceGenerator^8*/ mload(add(expmodsAndPoints, 0xa0)), PRIME)\\n              // expmods_and_points.points[27] = -(g^63 * z).\\n              mstore(add(expmodsAndPoints, 0x600), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[28] = -(g^64 * z).\\n              mstore(add(expmodsAndPoints, 0x620), point)\\n\\n              // point *= g^6.\\n              point := mulmod(point, /*traceGenerator^6*/ mload(add(expmodsAndPoints, 0x60)), PRIME)\\n              // expmods_and_points.points[29] = -(g^70 * z).\\n              mstore(add(expmodsAndPoints, 0x640), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[30] = -(g^71 * z).\\n              mstore(add(expmodsAndPoints, 0x660), point)\\n\\n              // point *= g^5.\\n              point := mulmod(point, /*traceGenerator^5*/ mload(add(expmodsAndPoints, 0x40)), PRIME)\\n              // expmods_and_points.points[31] = -(g^76 * z).\\n              mstore(add(expmodsAndPoints, 0x680), point)\\n\\n              // point *= g^3.\\n              point := mulmod(point, /*traceGenerator^3*/ mload(add(expmodsAndPoints, 0x20)), PRIME)\\n              // expmods_and_points.points[32] = -(g^79 * z).\\n              mstore(add(expmodsAndPoints, 0x6a0), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[33] = -(g^80 * z).\\n              mstore(add(expmodsAndPoints, 0x6c0), point)\\n\\n              // point *= g^15.\\n              point := mulmod(point, /*traceGenerator^15*/ mload(add(expmodsAndPoints, 0x120)), PRIME)\\n              // expmods_and_points.points[34] = -(g^95 * z).\\n              mstore(add(expmodsAndPoints, 0x6e0), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[35] = -(g^96 * z).\\n              mstore(add(expmodsAndPoints, 0x700), point)\\n\\n              // point *= g^7.\\n              point := mulmod(point, /*traceGenerator^7*/ mload(add(expmodsAndPoints, 0x80)), PRIME)\\n              // expmods_and_points.points[36] = -(g^103 * z).\\n              mstore(add(expmodsAndPoints, 0x720), point)\\n\\n              // point *= g^5.\\n              point := mulmod(point, /*traceGenerator^5*/ mload(add(expmodsAndPoints, 0x40)), PRIME)\\n              // expmods_and_points.points[37] = -(g^108 * z).\\n              mstore(add(expmodsAndPoints, 0x740), point)\\n\\n              // point *= g^11.\\n              point := mulmod(point, /*traceGenerator^11*/ mload(add(expmodsAndPoints, 0xe0)), PRIME)\\n              // expmods_and_points.points[38] = -(g^119 * z).\\n              mstore(add(expmodsAndPoints, 0x760), point)\\n\\n              // point *= g^9.\\n              point := mulmod(point, /*traceGenerator^9*/ mload(add(expmodsAndPoints, 0xc0)), PRIME)\\n              // expmods_and_points.points[39] = -(g^128 * z).\\n              mstore(add(expmodsAndPoints, 0x780), point)\\n\\n              // point *= g^6.\\n              point := mulmod(point, /*traceGenerator^6*/ mload(add(expmodsAndPoints, 0x60)), PRIME)\\n              // expmods_and_points.points[40] = -(g^134 * z).\\n              mstore(add(expmodsAndPoints, 0x7a0), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[41] = -(g^135 * z).\\n              mstore(add(expmodsAndPoints, 0x7c0), point)\\n\\n              // point *= g^5.\\n              point := mulmod(point, /*traceGenerator^5*/ mload(add(expmodsAndPoints, 0x40)), PRIME)\\n              // expmods_and_points.points[42] = -(g^140 * z).\\n              mstore(add(expmodsAndPoints, 0x7e0), point)\\n\\n              // point *= g^32.\\n              point := mulmod(point, /*traceGenerator^32*/ mload(add(expmodsAndPoints, 0x1a0)), PRIME)\\n              // expmods_and_points.points[43] = -(g^172 * z).\\n              mstore(add(expmodsAndPoints, 0x800), point)\\n\\n              // point *= g^20.\\n              point := mulmod(point, /*traceGenerator^20*/ mload(add(expmodsAndPoints, 0x160)), PRIME)\\n              // expmods_and_points.points[44] = -(g^192 * z).\\n              mstore(add(expmodsAndPoints, 0x820), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[45] = -(g^193 * z).\\n              mstore(add(expmodsAndPoints, 0x840), point)\\n\\n              // point *= g^3.\\n              point := mulmod(point, /*traceGenerator^3*/ mload(add(expmodsAndPoints, 0x20)), PRIME)\\n              // expmods_and_points.points[46] = -(g^196 * z).\\n              mstore(add(expmodsAndPoints, 0x860), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[47] = -(g^197 * z).\\n              mstore(add(expmodsAndPoints, 0x880), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[48] = -(g^198 * z).\\n              mstore(add(expmodsAndPoints, 0x8a0), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[49] = -(g^199 * z).\\n              mstore(add(expmodsAndPoints, 0x8c0), point)\\n\\n              // point *= g^5.\\n              point := mulmod(point, /*traceGenerator^5*/ mload(add(expmodsAndPoints, 0x40)), PRIME)\\n              // expmods_and_points.points[50] = -(g^204 * z).\\n              mstore(add(expmodsAndPoints, 0x8e0), point)\\n\\n              // point *= g^20.\\n              point := mulmod(point, /*traceGenerator^20*/ mload(add(expmodsAndPoints, 0x160)), PRIME)\\n              // expmods_and_points.points[51] = -(g^224 * z).\\n              mstore(add(expmodsAndPoints, 0x900), point)\\n\\n              // point *= g^12.\\n              point := mulmod(point, /*traceGenerator^12*/ mload(add(expmodsAndPoints, 0x100)), PRIME)\\n              // expmods_and_points.points[52] = -(g^236 * z).\\n              mstore(add(expmodsAndPoints, 0x920), point)\\n\\n              // point *= g^15.\\n              point := mulmod(point, /*traceGenerator^15*/ mload(add(expmodsAndPoints, 0x120)), PRIME)\\n              // expmods_and_points.points[53] = -(g^251 * z).\\n              mstore(add(expmodsAndPoints, 0x940), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[54] = -(g^252 * z).\\n              mstore(add(expmodsAndPoints, 0x960), point)\\n\\n              // point *= g^3.\\n              point := mulmod(point, /*traceGenerator^3*/ mload(add(expmodsAndPoints, 0x20)), PRIME)\\n              // expmods_and_points.points[55] = -(g^255 * z).\\n              mstore(add(expmodsAndPoints, 0x980), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[56] = -(g^256 * z).\\n              mstore(add(expmodsAndPoints, 0x9a0), point)\\n\\n              // point *= g^6.\\n              point := mulmod(point, /*traceGenerator^6*/ mload(add(expmodsAndPoints, 0x60)), PRIME)\\n              // expmods_and_points.points[57] = -(g^262 * z).\\n              mstore(add(expmodsAndPoints, 0x9c0), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[58] = -(g^263 * z).\\n              mstore(add(expmodsAndPoints, 0x9e0), point)\\n\\n              // point *= g^63.\\n              point := mulmod(point, /*traceGenerator^63*/ mload(add(expmodsAndPoints, 0x1e0)), PRIME)\\n              // expmods_and_points.points[59] = -(g^326 * z).\\n              mstore(add(expmodsAndPoints, 0xa00), point)\\n\\n              // point *= g^64.\\n              point := mulmod(point, /*traceGenerator^64*/ mload(add(expmodsAndPoints, 0x200)), PRIME)\\n              // expmods_and_points.points[60] = -(g^390 * z).\\n              mstore(add(expmodsAndPoints, 0xa20), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[61] = -(g^391 * z).\\n              mstore(add(expmodsAndPoints, 0xa40), point)\\n\\n              // point *= g^63.\\n              point := mulmod(point, /*traceGenerator^63*/ mload(add(expmodsAndPoints, 0x1e0)), PRIME)\\n              // expmods_and_points.points[62] = -(g^454 * z).\\n              mstore(add(expmodsAndPoints, 0xa60), point)\\n\\n              // point *= g^57.\\n              point := mulmod(point, /*traceGenerator^57*/ mload(add(expmodsAndPoints, 0x1c0)), PRIME)\\n              // expmods_and_points.points[63] = -(g^511 * z).\\n              mstore(add(expmodsAndPoints, 0xa80), point)\\n\\n              // point *= g^7.\\n              point := mulmod(point, /*traceGenerator^7*/ mload(add(expmodsAndPoints, 0x80)), PRIME)\\n              // expmods_and_points.points[64] = -(g^518 * z).\\n              mstore(add(expmodsAndPoints, 0xaa0), point)\\n\\n              // point *= g^15817.\\n              point := mulmod(point, /*traceGenerator^15817*/ mload(add(expmodsAndPoints, 0x260)), PRIME)\\n              // expmods_and_points.points[65] = -(g^16335 * z).\\n              mstore(add(expmodsAndPoints, 0xac0), point)\\n\\n              // point *= g^8.\\n              point := mulmod(point, /*traceGenerator^8*/ mload(add(expmodsAndPoints, 0xa0)), PRIME)\\n              // expmods_and_points.points[66] = -(g^16343 * z).\\n              mstore(add(expmodsAndPoints, 0xae0), point)\\n\\n              // point *= g^24.\\n              point := mulmod(point, /*traceGenerator^24*/ mload(add(expmodsAndPoints, 0x180)), PRIME)\\n              // expmods_and_points.points[67] = -(g^16367 * z).\\n              mstore(add(expmodsAndPoints, 0xb00), point)\\n\\n              // point *= g^8.\\n              point := mulmod(point, /*traceGenerator^8*/ mload(add(expmodsAndPoints, 0xa0)), PRIME)\\n              // expmods_and_points.points[68] = -(g^16375 * z).\\n              mstore(add(expmodsAndPoints, 0xb20), point)\\n\\n              // point *= g^8.\\n              point := mulmod(point, /*traceGenerator^8*/ mload(add(expmodsAndPoints, 0xa0)), PRIME)\\n              // expmods_and_points.points[69] = -(g^16383 * z).\\n              mstore(add(expmodsAndPoints, 0xb40), point)\\n\\n              // point *= g^8.\\n              point := mulmod(point, /*traceGenerator^8*/ mload(add(expmodsAndPoints, 0xa0)), PRIME)\\n              // expmods_and_points.points[70] = -(g^16391 * z).\\n              mstore(add(expmodsAndPoints, 0xb60), point)\\n\\n              // point *= g^32.\\n              point := mulmod(point, /*traceGenerator^32*/ mload(add(expmodsAndPoints, 0x1a0)), PRIME)\\n              // expmods_and_points.points[71] = -(g^16423 * z).\\n              mstore(add(expmodsAndPoints, 0xb80), point)\\n\\n              // point *= g^351.\\n              point := mulmod(point, /*traceGenerator^351*/ mload(add(expmodsAndPoints, 0x220)), PRIME)\\n              // expmods_and_points.points[72] = -(g^16774 * z).\\n              mstore(add(expmodsAndPoints, 0xba0), point)\\n\\n              // point *= g.\\n              point := mulmod(point, traceGenerator, PRIME)\\n              // expmods_and_points.points[73] = -(g^16775 * z).\\n              mstore(add(expmodsAndPoints, 0xbc0), point)\\n\\n              // point *= g^15865.\\n              point := mulmod(point, /*traceGenerator^15865*/ mload(add(expmodsAndPoints, 0x280)), PRIME)\\n              // expmods_and_points.points[74] = -(g^32640 * z).\\n              mstore(add(expmodsAndPoints, 0xbe0), point)\\n\\n              // point *= g^16.\\n              point := mulmod(point, /*traceGenerator^16*/ mload(add(expmodsAndPoints, 0x140)), PRIME)\\n              // expmods_and_points.points[75] = -(g^32656 * z).\\n              mstore(add(expmodsAndPoints, 0xc00), point)\\n\\n              // point *= g^16.\\n              point := mulmod(point, /*traceGenerator^16*/ mload(add(expmodsAndPoints, 0x140)), PRIME)\\n              // expmods_and_points.points[76] = -(g^32672 * z).\\n              mstore(add(expmodsAndPoints, 0xc20), point)\\n\\n              // point *= g^32.\\n              point := mulmod(point, /*traceGenerator^32*/ mload(add(expmodsAndPoints, 0x1a0)), PRIME)\\n              // expmods_and_points.points[77] = -(g^32704 * z).\\n              mstore(add(expmodsAndPoints, 0xc40), point)\\n\\n              // point *= g^15.\\n              point := mulmod(point, /*traceGenerator^15*/ mload(add(expmodsAndPoints, 0x120)), PRIME)\\n              // expmods_and_points.points[78] = -(g^32719 * z).\\n              mstore(add(expmodsAndPoints, 0xc60), point)\\n\\n              // point *= g^8.\\n              point := mulmod(point, /*traceGenerator^8*/ mload(add(expmodsAndPoints, 0xa0)), PRIME)\\n              // expmods_and_points.points[79] = -(g^32727 * z).\\n              mstore(add(expmodsAndPoints, 0xc80), point)\\n\\n              // point *= g^24.\\n              point := mulmod(point, /*traceGenerator^24*/ mload(add(expmodsAndPoints, 0x180)), PRIME)\\n              // expmods_and_points.points[80] = -(g^32751 * z).\\n              mstore(add(expmodsAndPoints, 0xca0), point)\\n\\n              // point *= g^8.\\n              point := mulmod(point, /*traceGenerator^8*/ mload(add(expmodsAndPoints, 0xa0)), PRIME)\\n              // expmods_and_points.points[81] = -(g^32759 * z).\\n              mstore(add(expmodsAndPoints, 0xcc0), point)\\n\\n              // point *= g^399.\\n              point := mulmod(point, /*traceGenerator^399*/ mload(add(expmodsAndPoints, 0x240)), PRIME)\\n              // expmods_and_points.points[82] = -(g^33158 * z).\\n              mstore(add(expmodsAndPoints, 0xce0), point)\\n            }\\n\\n\\n            let evalPointsPtr := /*oodsEvalPoints*/ add(context, 0x58a0)\\n            let evalPointsEndPtr := add(evalPointsPtr,\\n                                           mul(/*n_unique_queries*/ mload(add(context, 0x140)), 0x20))\\n            let productsPtr := add(batchInverseArray, 0x20)\\n            let valuesPtr := add(add(batchInverseArray, 0x20), 0x1fe00)\\n            let partialProduct := 1\\n            let minusPointPow := sub(PRIME, mulmod(oodsPoint, oodsPoint, PRIME))\\n            for {} lt(evalPointsPtr, evalPointsEndPtr)\\n                     {evalPointsPtr := add(evalPointsPtr, 0x20)} {\\n                let evalPoint := mload(evalPointsPtr)\\n\\n                // Shift evalPoint to evaluation domain coset.\\n                let shiftedEvalPoint := mulmod(evalPoint, evalCosetOffset_, PRIME)\\n\\n                {\\n                // Calculate denominator for row 0: x - z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x2a0)))\\n                mstore(productsPtr, partialProduct)\\n                mstore(valuesPtr, denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 1: x - g * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x2c0)))\\n                mstore(add(productsPtr, 0x20), partialProduct)\\n                mstore(add(valuesPtr, 0x20), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 2: x - g^2 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x2e0)))\\n                mstore(add(productsPtr, 0x40), partialProduct)\\n                mstore(add(valuesPtr, 0x40), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 3: x - g^3 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x300)))\\n                mstore(add(productsPtr, 0x60), partialProduct)\\n                mstore(add(valuesPtr, 0x60), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 4: x - g^4 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x320)))\\n                mstore(add(productsPtr, 0x80), partialProduct)\\n                mstore(add(valuesPtr, 0x80), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 5: x - g^5 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x340)))\\n                mstore(add(productsPtr, 0xa0), partialProduct)\\n                mstore(add(valuesPtr, 0xa0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 6: x - g^6 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x360)))\\n                mstore(add(productsPtr, 0xc0), partialProduct)\\n                mstore(add(valuesPtr, 0xc0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 7: x - g^7 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x380)))\\n                mstore(add(productsPtr, 0xe0), partialProduct)\\n                mstore(add(valuesPtr, 0xe0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 8: x - g^8 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x3a0)))\\n                mstore(add(productsPtr, 0x100), partialProduct)\\n                mstore(add(valuesPtr, 0x100), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 9: x - g^9 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x3c0)))\\n                mstore(add(productsPtr, 0x120), partialProduct)\\n                mstore(add(valuesPtr, 0x120), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 10: x - g^10 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x3e0)))\\n                mstore(add(productsPtr, 0x140), partialProduct)\\n                mstore(add(valuesPtr, 0x140), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 11: x - g^11 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x400)))\\n                mstore(add(productsPtr, 0x160), partialProduct)\\n                mstore(add(valuesPtr, 0x160), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 12: x - g^12 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x420)))\\n                mstore(add(productsPtr, 0x180), partialProduct)\\n                mstore(add(valuesPtr, 0x180), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 13: x - g^13 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x440)))\\n                mstore(add(productsPtr, 0x1a0), partialProduct)\\n                mstore(add(valuesPtr, 0x1a0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 14: x - g^14 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x460)))\\n                mstore(add(productsPtr, 0x1c0), partialProduct)\\n                mstore(add(valuesPtr, 0x1c0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 15: x - g^15 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x480)))\\n                mstore(add(productsPtr, 0x1e0), partialProduct)\\n                mstore(add(valuesPtr, 0x1e0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 16: x - g^16 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x4a0)))\\n                mstore(add(productsPtr, 0x200), partialProduct)\\n                mstore(add(valuesPtr, 0x200), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 17: x - g^17 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x4c0)))\\n                mstore(add(productsPtr, 0x220), partialProduct)\\n                mstore(add(valuesPtr, 0x220), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 23: x - g^23 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x4e0)))\\n                mstore(add(productsPtr, 0x240), partialProduct)\\n                mstore(add(valuesPtr, 0x240), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 25: x - g^25 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x500)))\\n                mstore(add(productsPtr, 0x260), partialProduct)\\n                mstore(add(valuesPtr, 0x260), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 31: x - g^31 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x520)))\\n                mstore(add(productsPtr, 0x280), partialProduct)\\n                mstore(add(valuesPtr, 0x280), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 32: x - g^32 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x540)))\\n                mstore(add(productsPtr, 0x2a0), partialProduct)\\n                mstore(add(valuesPtr, 0x2a0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 38: x - g^38 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x560)))\\n                mstore(add(productsPtr, 0x2c0), partialProduct)\\n                mstore(add(valuesPtr, 0x2c0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 39: x - g^39 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x580)))\\n                mstore(add(productsPtr, 0x2e0), partialProduct)\\n                mstore(add(valuesPtr, 0x2e0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 44: x - g^44 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x5a0)))\\n                mstore(add(productsPtr, 0x300), partialProduct)\\n                mstore(add(valuesPtr, 0x300), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 47: x - g^47 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x5c0)))\\n                mstore(add(productsPtr, 0x320), partialProduct)\\n                mstore(add(valuesPtr, 0x320), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 55: x - g^55 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x5e0)))\\n                mstore(add(productsPtr, 0x340), partialProduct)\\n                mstore(add(valuesPtr, 0x340), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 63: x - g^63 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x600)))\\n                mstore(add(productsPtr, 0x360), partialProduct)\\n                mstore(add(valuesPtr, 0x360), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 64: x - g^64 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x620)))\\n                mstore(add(productsPtr, 0x380), partialProduct)\\n                mstore(add(valuesPtr, 0x380), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 70: x - g^70 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x640)))\\n                mstore(add(productsPtr, 0x3a0), partialProduct)\\n                mstore(add(valuesPtr, 0x3a0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 71: x - g^71 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x660)))\\n                mstore(add(productsPtr, 0x3c0), partialProduct)\\n                mstore(add(valuesPtr, 0x3c0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 76: x - g^76 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x680)))\\n                mstore(add(productsPtr, 0x3e0), partialProduct)\\n                mstore(add(valuesPtr, 0x3e0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 79: x - g^79 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x6a0)))\\n                mstore(add(productsPtr, 0x400), partialProduct)\\n                mstore(add(valuesPtr, 0x400), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 80: x - g^80 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x6c0)))\\n                mstore(add(productsPtr, 0x420), partialProduct)\\n                mstore(add(valuesPtr, 0x420), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 95: x - g^95 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x6e0)))\\n                mstore(add(productsPtr, 0x440), partialProduct)\\n                mstore(add(valuesPtr, 0x440), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 96: x - g^96 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x700)))\\n                mstore(add(productsPtr, 0x460), partialProduct)\\n                mstore(add(valuesPtr, 0x460), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 103: x - g^103 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x720)))\\n                mstore(add(productsPtr, 0x480), partialProduct)\\n                mstore(add(valuesPtr, 0x480), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 108: x - g^108 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x740)))\\n                mstore(add(productsPtr, 0x4a0), partialProduct)\\n                mstore(add(valuesPtr, 0x4a0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 119: x - g^119 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x760)))\\n                mstore(add(productsPtr, 0x4c0), partialProduct)\\n                mstore(add(valuesPtr, 0x4c0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 128: x - g^128 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x780)))\\n                mstore(add(productsPtr, 0x4e0), partialProduct)\\n                mstore(add(valuesPtr, 0x4e0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 134: x - g^134 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x7a0)))\\n                mstore(add(productsPtr, 0x500), partialProduct)\\n                mstore(add(valuesPtr, 0x500), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 135: x - g^135 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x7c0)))\\n                mstore(add(productsPtr, 0x520), partialProduct)\\n                mstore(add(valuesPtr, 0x520), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 140: x - g^140 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x7e0)))\\n                mstore(add(productsPtr, 0x540), partialProduct)\\n                mstore(add(valuesPtr, 0x540), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 172: x - g^172 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x800)))\\n                mstore(add(productsPtr, 0x560), partialProduct)\\n                mstore(add(valuesPtr, 0x560), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 192: x - g^192 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x820)))\\n                mstore(add(productsPtr, 0x580), partialProduct)\\n                mstore(add(valuesPtr, 0x580), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 193: x - g^193 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x840)))\\n                mstore(add(productsPtr, 0x5a0), partialProduct)\\n                mstore(add(valuesPtr, 0x5a0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 196: x - g^196 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x860)))\\n                mstore(add(productsPtr, 0x5c0), partialProduct)\\n                mstore(add(valuesPtr, 0x5c0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 197: x - g^197 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x880)))\\n                mstore(add(productsPtr, 0x5e0), partialProduct)\\n                mstore(add(valuesPtr, 0x5e0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 198: x - g^198 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x8a0)))\\n                mstore(add(productsPtr, 0x600), partialProduct)\\n                mstore(add(valuesPtr, 0x600), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 199: x - g^199 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x8c0)))\\n                mstore(add(productsPtr, 0x620), partialProduct)\\n                mstore(add(valuesPtr, 0x620), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 204: x - g^204 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x8e0)))\\n                mstore(add(productsPtr, 0x640), partialProduct)\\n                mstore(add(valuesPtr, 0x640), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 224: x - g^224 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x900)))\\n                mstore(add(productsPtr, 0x660), partialProduct)\\n                mstore(add(valuesPtr, 0x660), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 236: x - g^236 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x920)))\\n                mstore(add(productsPtr, 0x680), partialProduct)\\n                mstore(add(valuesPtr, 0x680), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 251: x - g^251 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x940)))\\n                mstore(add(productsPtr, 0x6a0), partialProduct)\\n                mstore(add(valuesPtr, 0x6a0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 252: x - g^252 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x960)))\\n                mstore(add(productsPtr, 0x6c0), partialProduct)\\n                mstore(add(valuesPtr, 0x6c0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 255: x - g^255 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x980)))\\n                mstore(add(productsPtr, 0x6e0), partialProduct)\\n                mstore(add(valuesPtr, 0x6e0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 256: x - g^256 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x9a0)))\\n                mstore(add(productsPtr, 0x700), partialProduct)\\n                mstore(add(valuesPtr, 0x700), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 262: x - g^262 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x9c0)))\\n                mstore(add(productsPtr, 0x720), partialProduct)\\n                mstore(add(valuesPtr, 0x720), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 263: x - g^263 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0x9e0)))\\n                mstore(add(productsPtr, 0x740), partialProduct)\\n                mstore(add(valuesPtr, 0x740), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 326: x - g^326 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xa00)))\\n                mstore(add(productsPtr, 0x760), partialProduct)\\n                mstore(add(valuesPtr, 0x760), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 390: x - g^390 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xa20)))\\n                mstore(add(productsPtr, 0x780), partialProduct)\\n                mstore(add(valuesPtr, 0x780), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 391: x - g^391 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xa40)))\\n                mstore(add(productsPtr, 0x7a0), partialProduct)\\n                mstore(add(valuesPtr, 0x7a0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 454: x - g^454 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xa60)))\\n                mstore(add(productsPtr, 0x7c0), partialProduct)\\n                mstore(add(valuesPtr, 0x7c0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 511: x - g^511 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xa80)))\\n                mstore(add(productsPtr, 0x7e0), partialProduct)\\n                mstore(add(valuesPtr, 0x7e0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 518: x - g^518 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xaa0)))\\n                mstore(add(productsPtr, 0x800), partialProduct)\\n                mstore(add(valuesPtr, 0x800), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 16335: x - g^16335 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xac0)))\\n                mstore(add(productsPtr, 0x820), partialProduct)\\n                mstore(add(valuesPtr, 0x820), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 16343: x - g^16343 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xae0)))\\n                mstore(add(productsPtr, 0x840), partialProduct)\\n                mstore(add(valuesPtr, 0x840), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 16367: x - g^16367 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xb00)))\\n                mstore(add(productsPtr, 0x860), partialProduct)\\n                mstore(add(valuesPtr, 0x860), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 16375: x - g^16375 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xb20)))\\n                mstore(add(productsPtr, 0x880), partialProduct)\\n                mstore(add(valuesPtr, 0x880), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 16383: x - g^16383 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xb40)))\\n                mstore(add(productsPtr, 0x8a0), partialProduct)\\n                mstore(add(valuesPtr, 0x8a0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 16391: x - g^16391 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xb60)))\\n                mstore(add(productsPtr, 0x8c0), partialProduct)\\n                mstore(add(valuesPtr, 0x8c0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 16423: x - g^16423 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xb80)))\\n                mstore(add(productsPtr, 0x8e0), partialProduct)\\n                mstore(add(valuesPtr, 0x8e0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 16774: x - g^16774 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xba0)))\\n                mstore(add(productsPtr, 0x900), partialProduct)\\n                mstore(add(valuesPtr, 0x900), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 16775: x - g^16775 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xbc0)))\\n                mstore(add(productsPtr, 0x920), partialProduct)\\n                mstore(add(valuesPtr, 0x920), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 32640: x - g^32640 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xbe0)))\\n                mstore(add(productsPtr, 0x940), partialProduct)\\n                mstore(add(valuesPtr, 0x940), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 32656: x - g^32656 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xc00)))\\n                mstore(add(productsPtr, 0x960), partialProduct)\\n                mstore(add(valuesPtr, 0x960), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 32672: x - g^32672 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xc20)))\\n                mstore(add(productsPtr, 0x980), partialProduct)\\n                mstore(add(valuesPtr, 0x980), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 32704: x - g^32704 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xc40)))\\n                mstore(add(productsPtr, 0x9a0), partialProduct)\\n                mstore(add(valuesPtr, 0x9a0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 32719: x - g^32719 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xc60)))\\n                mstore(add(productsPtr, 0x9c0), partialProduct)\\n                mstore(add(valuesPtr, 0x9c0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 32727: x - g^32727 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xc80)))\\n                mstore(add(productsPtr, 0x9e0), partialProduct)\\n                mstore(add(valuesPtr, 0x9e0), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 32751: x - g^32751 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xca0)))\\n                mstore(add(productsPtr, 0xa00), partialProduct)\\n                mstore(add(valuesPtr, 0xa00), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 32759: x - g^32759 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xcc0)))\\n                mstore(add(productsPtr, 0xa20), partialProduct)\\n                mstore(add(valuesPtr, 0xa20), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate denominator for row 33158: x - g^33158 * z.\\n                let denominator := add(shiftedEvalPoint, mload(add(expmodsAndPoints, 0xce0)))\\n                mstore(add(productsPtr, 0xa40), partialProduct)\\n                mstore(add(valuesPtr, 0xa40), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                {\\n                // Calculate the denominator for the composition polynomial columns: x - z^2.\\n                let denominator := add(shiftedEvalPoint, minusPointPow)\\n                mstore(add(productsPtr, 0xa60), partialProduct)\\n                mstore(add(valuesPtr, 0xa60), denominator)\\n                partialProduct := mulmod(partialProduct, denominator, PRIME)\\n                }\\n\\n                // Add evalPoint to batch inverse inputs.\\n                // inverse(evalPoint) is going to be used by FRI.\\n                mstore(add(productsPtr, 0xa80), partialProduct)\\n                mstore(add(valuesPtr, 0xa80), evalPoint)\\n                partialProduct := mulmod(partialProduct, evalPoint, PRIME)\\n\\n                // Advance pointers.\\n                productsPtr := add(productsPtr, 0xaa0)\\n                valuesPtr := add(valuesPtr, 0xaa0)\\n            }\\n\\n            let productsToValuesOffset := 0x1fe00\\n            let firstPartialProductPtr := add(batchInverseArray, 0x20)\\n            // Compute the inverse of the product.\\n            let prodInv := expmod(partialProduct, sub(PRIME, 2), PRIME)\\n\\n            if eq(prodInv, 0) {\\n                // Solidity generates reverts with reason that look as follows:\\n                // 1. 4 bytes with the constant 0x08c379a0 (== Keccak256(b\\u0027Error(string)\\u0027)[:4]).\\n                // 2. 32 bytes offset bytes (always 0x20 as far as i can tell).\\n                // 3. 32 bytes with the length of the revert reason.\\n                // 4. Revert reason string.\\n\\n                mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n                mstore(0x4, 0x20)\\n                mstore(0x24, 0x1e)\\n                mstore(0x44, \\\"Batch inverse product is zero.\\\")\\n                revert(0, 0x62)\\n            }\\n\\n            // Compute the inverses.\\n            // Loop over denominator_invs in reverse order.\\n            // currentPartialProductPtr is initialized to one past the end.\\n            let currentPartialProductPtr := productsPtr\\n            // Loop in blocks of size 8 as much as possible: we can loop over a full block as long as\\n            // currentPartialProductPtr \\u003e= firstPartialProductPtr + 8*0x20, or equivalently,\\n            // currentPartialProductPtr \\u003e firstPartialProductPtr + 7*0x20.\\n            // We use the latter comparison since there is no \\u003e= evm opcode.\\n            let midPartialProductPtr := add(firstPartialProductPtr, 0xe0)\\n            for { } gt(currentPartialProductPtr, midPartialProductPtr) { } {\\n                currentPartialProductPtr := sub(currentPartialProductPtr, 0x20)\\n                // Store 1/d_{i} = (d_0 * ... * d_{i-1}) * 1/(d_0 * ... * d_{i}).\\n                mstore(currentPartialProductPtr,\\n                       mulmod(mload(currentPartialProductPtr), prodInv, PRIME))\\n                // Update prodInv to be 1/(d_0 * ... * d_{i-1}) by multiplying by d_i.\\n                prodInv := mulmod(prodInv,\\n                                   mload(add(currentPartialProductPtr, productsToValuesOffset)),\\n                                   PRIME)\\n\\n                currentPartialProductPtr := sub(currentPartialProductPtr, 0x20)\\n                // Store 1/d_{i} = (d_0 * ... * d_{i-1}) * 1/(d_0 * ... * d_{i}).\\n                mstore(currentPartialProductPtr,\\n                       mulmod(mload(currentPartialProductPtr), prodInv, PRIME))\\n                // Update prodInv to be 1/(d_0 * ... * d_{i-1}) by multiplying by d_i.\\n                prodInv := mulmod(prodInv,\\n                                   mload(add(currentPartialProductPtr, productsToValuesOffset)),\\n                                   PRIME)\\n\\n                currentPartialProductPtr := sub(currentPartialProductPtr, 0x20)\\n                // Store 1/d_{i} = (d_0 * ... * d_{i-1}) * 1/(d_0 * ... * d_{i}).\\n                mstore(currentPartialProductPtr,\\n                       mulmod(mload(currentPartialProductPtr), prodInv, PRIME))\\n                // Update prodInv to be 1/(d_0 * ... * d_{i-1}) by multiplying by d_i.\\n                prodInv := mulmod(prodInv,\\n                                   mload(add(currentPartialProductPtr, productsToValuesOffset)),\\n                                   PRIME)\\n\\n                currentPartialProductPtr := sub(currentPartialProductPtr, 0x20)\\n                // Store 1/d_{i} = (d_0 * ... * d_{i-1}) * 1/(d_0 * ... * d_{i}).\\n                mstore(currentPartialProductPtr,\\n                       mulmod(mload(currentPartialProductPtr), prodInv, PRIME))\\n                // Update prodInv to be 1/(d_0 * ... * d_{i-1}) by multiplying by d_i.\\n                prodInv := mulmod(prodInv,\\n                                   mload(add(currentPartialProductPtr, productsToValuesOffset)),\\n                                   PRIME)\\n\\n                currentPartialProductPtr := sub(currentPartialProductPtr, 0x20)\\n                // Store 1/d_{i} = (d_0 * ... * d_{i-1}) * 1/(d_0 * ... * d_{i}).\\n                mstore(currentPartialProductPtr,\\n                       mulmod(mload(currentPartialProductPtr), prodInv, PRIME))\\n                // Update prodInv to be 1/(d_0 * ... * d_{i-1}) by multiplying by d_i.\\n                prodInv := mulmod(prodInv,\\n                                   mload(add(currentPartialProductPtr, productsToValuesOffset)),\\n                                   PRIME)\\n\\n                currentPartialProductPtr := sub(currentPartialProductPtr, 0x20)\\n                // Store 1/d_{i} = (d_0 * ... * d_{i-1}) * 1/(d_0 * ... * d_{i}).\\n                mstore(currentPartialProductPtr,\\n                       mulmod(mload(currentPartialProductPtr), prodInv, PRIME))\\n                // Update prodInv to be 1/(d_0 * ... * d_{i-1}) by multiplying by d_i.\\n                prodInv := mulmod(prodInv,\\n                                   mload(add(currentPartialProductPtr, productsToValuesOffset)),\\n                                   PRIME)\\n\\n                currentPartialProductPtr := sub(currentPartialProductPtr, 0x20)\\n                // Store 1/d_{i} = (d_0 * ... * d_{i-1}) * 1/(d_0 * ... * d_{i}).\\n                mstore(currentPartialProductPtr,\\n                       mulmod(mload(currentPartialProductPtr), prodInv, PRIME))\\n                // Update prodInv to be 1/(d_0 * ... * d_{i-1}) by multiplying by d_i.\\n                prodInv := mulmod(prodInv,\\n                                   mload(add(currentPartialProductPtr, productsToValuesOffset)),\\n                                   PRIME)\\n\\n                currentPartialProductPtr := sub(currentPartialProductPtr, 0x20)\\n                // Store 1/d_{i} = (d_0 * ... * d_{i-1}) * 1/(d_0 * ... * d_{i}).\\n                mstore(currentPartialProductPtr,\\n                       mulmod(mload(currentPartialProductPtr), prodInv, PRIME))\\n                // Update prodInv to be 1/(d_0 * ... * d_{i-1}) by multiplying by d_i.\\n                prodInv := mulmod(prodInv,\\n                                   mload(add(currentPartialProductPtr, productsToValuesOffset)),\\n                                   PRIME)\\n            }\\n\\n            // Loop over the remainder.\\n            for { } gt(currentPartialProductPtr, firstPartialProductPtr) { } {\\n                currentPartialProductPtr := sub(currentPartialProductPtr, 0x20)\\n                // Store 1/d_{i} = (d_0 * ... * d_{i-1}) * 1/(d_0 * ... * d_{i}).\\n                mstore(currentPartialProductPtr,\\n                       mulmod(mload(currentPartialProductPtr), prodInv, PRIME))\\n                // Update prodInv to be 1/(d_0 * ... * d_{i-1}) by multiplying by d_i.\\n                prodInv := mulmod(prodInv,\\n                                   mload(add(currentPartialProductPtr, productsToValuesOffset)),\\n                                   PRIME)\\n            }\\n        }\\n    }\\n}\\n// ---------- End of auto-generated code. ----------\\n\"},\"MemoryMap.sol\":{\"content\":\"/*\\n  Copyright 2019-2021 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\n// SPDX-License-Identifier: Apache-2.0.\\npragma solidity ^0.6.11;\\n\\ncontract MemoryMap {\\n    /*\\n      We store the state of the verifer in a contiguous chunk of memory.\\n      The offsets of the different fields are listed below.\\n      E.g. The offset of the i\\u0027th hash is [mm_hashes + i].\\n    */\\n    uint256 constant internal CHANNEL_STATE_SIZE = 3;\\n    uint256 constant internal MAX_N_QUERIES =  48;\\n    uint256 constant internal FRI_QUEUE_SIZE = MAX_N_QUERIES;\\n\\n    uint256 constant internal MAX_SUPPORTED_MAX_FRI_STEP = 4;\\n\\n    uint256 constant internal MM_EVAL_DOMAIN_SIZE =                          0x0;\\n    uint256 constant internal MM_BLOW_UP_FACTOR =                            0x1;\\n    uint256 constant internal MM_LOG_EVAL_DOMAIN_SIZE =                      0x2;\\n    uint256 constant internal MM_PROOF_OF_WORK_BITS =                        0x3;\\n    uint256 constant internal MM_EVAL_DOMAIN_GENERATOR =                     0x4;\\n    uint256 constant internal MM_PUBLIC_INPUT_PTR =                          0x5;\\n    uint256 constant internal MM_TRACE_COMMITMENT =                          0x6; // uint256[2]\\n    uint256 constant internal MM_OODS_COMMITMENT =                           0x8;\\n    uint256 constant internal MM_N_UNIQUE_QUERIES =                          0x9;\\n    uint256 constant internal MM_CHANNEL =                                   0xa; // uint256[3]\\n    uint256 constant internal MM_MERKLE_QUEUE =                              0xd; // uint256[96]\\n    uint256 constant internal MM_FRI_QUEUE =                                0x6d; // uint256[144]\\n    uint256 constant internal MM_FRI_QUERIES_DELIMITER =                    0xfd;\\n    uint256 constant internal MM_FRI_CTX =                                  0xfe; // uint256[40]\\n    uint256 constant internal MM_FRI_STEPS_PTR =                           0x126;\\n    uint256 constant internal MM_FRI_EVAL_POINTS =                         0x127; // uint256[10]\\n    uint256 constant internal MM_FRI_COMMITMENTS =                         0x131; // uint256[10]\\n    uint256 constant internal MM_FRI_LAST_LAYER_DEG_BOUND =                0x13b;\\n    uint256 constant internal MM_FRI_LAST_LAYER_PTR =                      0x13c;\\n    uint256 constant internal MM_CONSTRAINT_POLY_ARGS_START =              0x13d;\\n    uint256 constant internal MM_PERIODIC_COLUMN__PEDERSEN__POINTS__X =    0x13d;\\n    uint256 constant internal MM_PERIODIC_COLUMN__PEDERSEN__POINTS__Y =    0x13e;\\n    uint256 constant internal MM_PERIODIC_COLUMN__ECDSA__GENERATOR_POINTS__X = 0x13f;\\n    uint256 constant internal MM_PERIODIC_COLUMN__ECDSA__GENERATOR_POINTS__Y = 0x140;\\n    uint256 constant internal MM_TRACE_LENGTH =                            0x141;\\n    uint256 constant internal MM_OFFSET_SIZE =                             0x142;\\n    uint256 constant internal MM_HALF_OFFSET_SIZE =                        0x143;\\n    uint256 constant internal MM_INITIAL_AP =                              0x144;\\n    uint256 constant internal MM_INITIAL_PC =                              0x145;\\n    uint256 constant internal MM_FINAL_AP =                                0x146;\\n    uint256 constant internal MM_FINAL_PC =                                0x147;\\n    uint256 constant internal MM_MEMORY__MULTI_COLUMN_PERM__PERM__INTERACTION_ELM = 0x148;\\n    uint256 constant internal MM_MEMORY__MULTI_COLUMN_PERM__HASH_INTERACTION_ELM0 = 0x149;\\n    uint256 constant internal MM_MEMORY__MULTI_COLUMN_PERM__PERM__PUBLIC_MEMORY_PROD = 0x14a;\\n    uint256 constant internal MM_RC16__PERM__INTERACTION_ELM =             0x14b;\\n    uint256 constant internal MM_RC16__PERM__PUBLIC_MEMORY_PROD =          0x14c;\\n    uint256 constant internal MM_RC_MIN =                                  0x14d;\\n    uint256 constant internal MM_RC_MAX =                                  0x14e;\\n    uint256 constant internal MM_PEDERSEN__SHIFT_POINT_X =                 0x14f;\\n    uint256 constant internal MM_PEDERSEN__SHIFT_POINT_Y =                 0x150;\\n    uint256 constant internal MM_INITIAL_PEDERSEN_ADDR =                   0x151;\\n    uint256 constant internal MM_INITIAL_RC_ADDR =                         0x152;\\n    uint256 constant internal MM_ECDSA__SIG_CONFIG_ALPHA =                 0x153;\\n    uint256 constant internal MM_ECDSA__SIG_CONFIG_SHIFT_POINT_X =         0x154;\\n    uint256 constant internal MM_ECDSA__SIG_CONFIG_SHIFT_POINT_Y =         0x155;\\n    uint256 constant internal MM_ECDSA__SIG_CONFIG_BETA =                  0x156;\\n    uint256 constant internal MM_INITIAL_ECDSA_ADDR =                      0x157;\\n    uint256 constant internal MM_INITIAL_CHECKPOINTS_ADDR =                0x158;\\n    uint256 constant internal MM_FINAL_CHECKPOINTS_ADDR =                  0x159;\\n    uint256 constant internal MM_TRACE_GENERATOR =                         0x15a;\\n    uint256 constant internal MM_OODS_POINT =                              0x15b;\\n    uint256 constant internal MM_INTERACTION_ELEMENTS =                    0x15c; // uint256[3]\\n    uint256 constant internal MM_COEFFICIENTS =                            0x15f; // uint256[222]\\n    uint256 constant internal MM_OODS_VALUES =                             0x23d; // uint256[133]\\n    uint256 constant internal MM_CONSTRAINT_POLY_ARGS_END =                0x2c2;\\n    uint256 constant internal MM_COMPOSITION_OODS_VALUES =                 0x2c2; // uint256[2]\\n    uint256 constant internal MM_OODS_EVAL_POINTS =                        0x2c4; // uint256[48]\\n    uint256 constant internal MM_OODS_COEFFICIENTS =                       0x2f4; // uint256[135]\\n    uint256 constant internal MM_TRACE_QUERY_RESPONSES =                   0x37b; // uint256[480]\\n    uint256 constant internal MM_COMPOSITION_QUERY_RESPONSES =             0x55b; // uint256[96]\\n    uint256 constant internal MM_LOG_N_STEPS =                             0x5bb;\\n    uint256 constant internal MM_N_PUBLIC_MEM_ENTRIES =                    0x5bc;\\n    uint256 constant internal MM_N_PUBLIC_MEM_PAGES =                      0x5bd;\\n    uint256 constant internal MM_CONTEXT_SIZE =                            0x5be;\\n}\\n\"},\"PrimeFieldElement0.sol\":{\"content\":\"/*\\n  Copyright 2019-2021 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\n// SPDX-License-Identifier: Apache-2.0.\\npragma solidity ^0.6.11;\\n\\n\\ncontract PrimeFieldElement0 {\\n    uint256 constant internal K_MODULUS =\\n    0x800000000000011000000000000000000000000000000000000000000000001;\\n    uint256 constant internal K_MODULUS_MASK =\\n    0x0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n    uint256 constant internal K_MONTGOMERY_R =\\n    0x7fffffffffffdf0ffffffffffffffffffffffffffffffffffffffffffffffe1;\\n    uint256 constant internal K_MONTGOMERY_R_INV =\\n    0x40000000000001100000000000012100000000000000000000000000000000;\\n    uint256 constant internal GENERATOR_VAL = 3;\\n    uint256 constant internal ONE_VAL = 1;\\n    uint256 constant internal GEN1024_VAL =\\n    0x659d83946a03edd72406af6711825f5653d9e35dc125289a206c054ec89c4f1;\\n\\n    function fromMontgomery(uint256 val) internal pure returns (uint256 res) {\\n        // uint256 res = fmul(val, kMontgomeryRInv);\\n        assembly {\\n            res := mulmod(val,\\n                          0x40000000000001100000000000012100000000000000000000000000000000,\\n                          0x800000000000011000000000000000000000000000000000000000000000001)\\n        }\\n        return res;\\n    }\\n\\n    function fromMontgomeryBytes(bytes32 bs) internal pure returns (uint256) {\\n        // Assuming bs is a 256bit bytes object, in Montgomery form, it is read into a field\\n        // element.\\n        uint256 res = uint256(bs);\\n        return fromMontgomery(res);\\n    }\\n\\n    function toMontgomeryInt(uint256 val) internal pure returns (uint256 res) {\\n        //uint256 res = fmul(val, kMontgomeryR);\\n        assembly {\\n            res := mulmod(val,\\n                          0x7fffffffffffdf0ffffffffffffffffffffffffffffffffffffffffffffffe1,\\n                          0x800000000000011000000000000000000000000000000000000000000000001)\\n        }\\n        return res;\\n    }\\n\\n    function fmul(uint256 a, uint256 b) internal pure returns (uint256 res) {\\n        //uint256 res = mulmod(a, b, kModulus);\\n        assembly {\\n            res := mulmod(a, b,\\n                0x800000000000011000000000000000000000000000000000000000000000001)\\n        }\\n        return res;\\n    }\\n\\n    function fadd(uint256 a, uint256 b) internal pure returns (uint256 res) {\\n        // uint256 res = addmod(a, b, kModulus);\\n        assembly {\\n            res := addmod(a, b,\\n                0x800000000000011000000000000000000000000000000000000000000000001)\\n        }\\n        return res;\\n    }\\n\\n    function fsub(uint256 a, uint256 b) internal pure returns (uint256 res) {\\n        // uint256 res = addmod(a, kModulus - b, kModulus);\\n        assembly {\\n            res := addmod(\\n                a,\\n                sub(0x800000000000011000000000000000000000000000000000000000000000001, b),\\n                0x800000000000011000000000000000000000000000000000000000000000001)\\n        }\\n        return res;\\n    }\\n\\n    function fpow(uint256 val, uint256 exp) internal view returns (uint256) {\\n        return expmod(val, exp, K_MODULUS);\\n    }\\n\\n    function expmod(uint256 base, uint256 exponent, uint256 modulus)\\n        internal view returns (uint256 res)\\n    {\\n        assembly {\\n            let p := mload(0x40)\\n            mstore(p, 0x20)                  // Length of Base.\\n            mstore(add(p, 0x20), 0x20)       // Length of Exponent.\\n            mstore(add(p, 0x40), 0x20)       // Length of Modulus.\\n            mstore(add(p, 0x60), base)       // Base.\\n            mstore(add(p, 0x80), exponent)   // Exponent.\\n            mstore(add(p, 0xa0), modulus)    // Modulus.\\n            // Call modexp precompile.\\n            if iszero(staticcall(gas(), 0x05, p, 0xc0, p, 0x20)) {\\n                revert(0, 0)\\n            }\\n            res := mload(p)\\n        }\\n    }\\n\\n    function inverse(uint256 val) internal view returns (uint256) {\\n        return expmod(val, K_MODULUS - 2, K_MODULUS);\\n    }\\n}\\n\"},\"StarkParameters.sol\":{\"content\":\"/*\\n  Copyright 2019-2021 StarkWare Industries Ltd.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\").\\n  You may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  https://www.starkware.co/open-source-license/\\n\\n  Unless required by applicable law or agreed to in writing,\\n  software distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions\\n  and limitations under the License.\\n*/\\n// ---------- The following code was auto-generated. PLEASE DO NOT EDIT. ----------\\n// SPDX-License-Identifier: Apache-2.0.\\npragma solidity ^0.6.11;\\n\\nimport \\\"PrimeFieldElement0.sol\\\";\\n\\ncontract StarkParameters is PrimeFieldElement0 {\\n    uint256 constant internal N_COEFFICIENTS = 222;\\n    uint256 constant internal N_INTERACTION_ELEMENTS = 3;\\n    uint256 constant internal MASK_SIZE = 133;\\n    uint256 constant internal N_ROWS_IN_MASK = 83;\\n    uint256 constant internal N_COLUMNS_IN_MASK = 10;\\n    uint256 constant internal N_COLUMNS_IN_TRACE0 = 9;\\n    uint256 constant internal N_COLUMNS_IN_TRACE1 = 1;\\n    uint256 constant internal CONSTRAINTS_DEGREE_BOUND = 2;\\n    uint256 constant internal N_OODS_VALUES = MASK_SIZE + CONSTRAINTS_DEGREE_BOUND;\\n    uint256 constant internal N_OODS_COEFFICIENTS = N_OODS_VALUES;\\n    uint256 constant internal MAX_FRI_STEP = 3;\\n\\n    // ---------- // Air specific constants. ----------\\n    uint256 constant internal PUBLIC_MEMORY_STEP = 8;\\n    uint256 constant internal PEDERSEN_BUILTIN_RATIO = 32;\\n    uint256 constant internal PEDERSEN_BUILTIN_REPETITIONS = 1;\\n    uint256 constant internal RC_BUILTIN_RATIO = 16;\\n    uint256 constant internal RC_N_PARTS = 8;\\n    uint256 constant internal ECDSA_BUILTIN_RATIO = 2048;\\n    uint256 constant internal ECDSA_BUILTIN_REPETITIONS = 1;\\n    uint256 constant internal LAYOUT_CODE = 2073345364981693374828;\\n    uint256 constant internal LOG_CPU_COMPONENT_HEIGHT = 4;\\n}\\n// ---------- End of auto-generated code. ----------\\n\"}}","ABI":"[{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"}]","ContractName":"CpuOods","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://79709f3ab0c3fdea996f04990e9694cef4e2f4ee3a8861bb284b8d94a4990481"}]}