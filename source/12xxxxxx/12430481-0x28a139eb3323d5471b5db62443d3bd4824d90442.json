{"status":"1","message":"OK","result":[{"SourceCode":"// File contracts/base/snx-base/interfaces/SNXRewardInterface.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface SNXRewardInterface {\r\n    function withdraw(uint) external;\r\n    function getReward() external;\r\n    function stake(uint) external;\r\n    function balanceOf(address) external view returns (uint256);\r\n    function earned(address account) external view returns (uint256);\r\n    function exit() external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/Math.sol@v2.5.1\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v2.5.1\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v2.5.1\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/ERC20Detailed.sol@v2.5.1\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v2.5.1\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/SafeERC20.sol@v2.5.1\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/base/interface/IController.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface IController {\r\n\r\n    event SharePriceChangeLog(\r\n      address indexed vault,\r\n      address indexed strategy,\r\n      uint256 oldSharePrice,\r\n      uint256 newSharePrice,\r\n      uint256 timestamp\r\n    );\r\n\r\n    // [Grey list]\r\n    // An EOA can safely interact with the system no matter what.\r\n    // If you're using Metamask, you're using an EOA.\r\n    // Only smart contracts may be affected by this grey list.\r\n    //\r\n    // This contract will not be able to ban any EOA from the system\r\n    // even if an EOA is being added to the greyList, he/she will still be able\r\n    // to interact with the whole system as if nothing happened.\r\n    // Only smart contracts will be affected by being added to the greyList.\r\n    // This grey list is only used in Vault.sol, see the code there for reference\r\n    function greyList(address _target) external view returns(bool);\r\n\r\n    function addVaultAndStrategy(address _vault, address _strategy) external;\r\n    function doHardWork(address _vault) external;\r\n    function hasVault(address _vault) external returns(bool);\r\n\r\n    function salvage(address _token, uint256 amount) external;\r\n    function salvageStrategy(address _strategy, address _token, uint256 amount) external;\r\n\r\n    function notifyFee(address _underlying, uint256 fee) external;\r\n    function profitSharingNumerator() external view returns (uint256);\r\n    function profitSharingDenominator() external view returns (uint256);\r\n\r\n    function feeRewardForwarder() external view returns(address);\r\n    function setFeeRewardForwarder(address _value) external;\r\n\r\n    function addHardWorker(address _worker) external;\r\n}\r\n\r\n\r\n// File contracts/base/interface/IFeeRewardForwarderV6.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface IFeeRewardForwarderV6 {\r\n    function poolNotifyFixedTarget(address _token, uint256 _amount) external;\r\n\r\n    function notifyFeeAndBuybackAmounts(uint256 _feeAmount, address _pool, uint256 _buybackAmount) external;\r\n    function notifyFeeAndBuybackAmounts(address _token, uint256 _feeAmount, address _pool, uint256 _buybackAmount) external;\r\n    function profitSharingPool() external view returns (address);\r\n    function configureLiquidation(address[] calldata _path, bytes32[] calldata _dexes) external;\r\n}\r\n\r\n\r\n// File contracts/base/inheritance/Storage.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ncontract Storage {\r\n\r\n  address public governance;\r\n  address public controller;\r\n\r\n  constructor() public {\r\n    governance = msg.sender;\r\n  }\r\n\r\n  modifier onlyGovernance() {\r\n    require(isGovernance(msg.sender), \"Not governance\");\r\n    _;\r\n  }\r\n\r\n  function setGovernance(address _governance) public onlyGovernance {\r\n    require(_governance != address(0), \"new governance shouldn't be empty\");\r\n    governance = _governance;\r\n  }\r\n\r\n  function setController(address _controller) public onlyGovernance {\r\n    require(_controller != address(0), \"new controller shouldn't be empty\");\r\n    controller = _controller;\r\n  }\r\n\r\n  function isGovernance(address account) public view returns (bool) {\r\n    return account == governance;\r\n  }\r\n\r\n  function isController(address account) public view returns (bool) {\r\n    return account == controller;\r\n  }\r\n}\r\n\r\n\r\n// File contracts/base/inheritance/Governable.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ncontract Governable {\r\n\r\n  Storage public store;\r\n\r\n  constructor(address _store) public {\r\n    require(_store != address(0), \"new storage shouldn't be empty\");\r\n    store = Storage(_store);\r\n  }\r\n\r\n  modifier onlyGovernance() {\r\n    require(store.isGovernance(msg.sender), \"Not governance\");\r\n    _;\r\n  }\r\n\r\n  function setStorage(address _store) public onlyGovernance {\r\n    require(_store != address(0), \"new storage shouldn't be empty\");\r\n    store = Storage(_store);\r\n  }\r\n\r\n  function governance() public view returns (address) {\r\n    return store.governance();\r\n  }\r\n}\r\n\r\n\r\n// File contracts/base/inheritance/Controllable.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ncontract Controllable is Governable {\r\n\r\n  constructor(address _storage) Governable(_storage) public {\r\n  }\r\n\r\n  modifier onlyController() {\r\n    require(store.isController(msg.sender), \"Not a controller\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyControllerOrGovernance(){\r\n    require((store.isController(msg.sender) || store.isGovernance(msg.sender)),\r\n      \"The caller must be controller or governance\");\r\n    _;\r\n  }\r\n\r\n  function controller() public view returns (address) {\r\n    return store.controller();\r\n  }\r\n}\r\n\r\n\r\n// File contracts/base/inheritance/RewardTokenProfitNotifier.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract RewardTokenProfitNotifier is Controllable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  uint256 public profitSharingNumerator;\r\n  uint256 public profitSharingDenominator;\r\n  address public rewardToken;\r\n\r\n  constructor(\r\n    address _storage,\r\n    address _rewardToken\r\n  ) public Controllable(_storage){\r\n    rewardToken = _rewardToken;\r\n    // persist in the state for immutability of the fee\r\n    profitSharingNumerator = 30; //IController(controller()).profitSharingNumerator();\r\n    profitSharingDenominator = 100; //IController(controller()).profitSharingDenominator();\r\n    require(profitSharingNumerator < profitSharingDenominator, \"invalid profit share\");\r\n  }\r\n\r\n  event ProfitLogInReward(uint256 profitAmount, uint256 feeAmount, uint256 timestamp);\r\n  event ProfitAndBuybackLog(uint256 profitAmount, uint256 feeAmount, uint256 timestamp);\r\n\r\n  function notifyProfitInRewardToken(uint256 _rewardBalance) internal {\r\n    if( _rewardBalance > 0 ){\r\n      uint256 feeAmount = _rewardBalance.mul(profitSharingNumerator).div(profitSharingDenominator);\r\n      emit ProfitLogInReward(_rewardBalance, feeAmount, block.timestamp);\r\n      IERC20(rewardToken).safeApprove(controller(), 0);\r\n      IERC20(rewardToken).safeApprove(controller(), feeAmount);\r\n\r\n      IController(controller()).notifyFee(\r\n        rewardToken,\r\n        feeAmount\r\n      );\r\n    } else {\r\n      emit ProfitLogInReward(0, 0, block.timestamp);\r\n    }\r\n  }\r\n\r\n  function notifyProfitAndBuybackInRewardToken(uint256 _rewardBalance, address pool, uint256 _buybackRatio) internal {\r\n    if( _rewardBalance > 0 ){\r\n      uint256 feeAmount = _rewardBalance.mul(profitSharingNumerator).div(profitSharingDenominator);\r\n      address forwarder = IController(controller()).feeRewardForwarder();\r\n      emit ProfitAndBuybackLog(_rewardBalance, feeAmount, block.timestamp);\r\n      IERC20(rewardToken).safeApprove(forwarder, 0);\r\n      IERC20(rewardToken).safeApprove(forwarder, _rewardBalance);\r\n\r\n      IFeeRewardForwarderV6(forwarder).notifyFeeAndBuybackAmounts(\r\n        rewardToken,\r\n        feeAmount,\r\n        pool,\r\n        _rewardBalance.sub(feeAmount).mul(_buybackRatio).div(10000)\r\n      );\r\n    } else {\r\n      emit ProfitAndBuybackLog(0, 0, block.timestamp);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// File contracts/base/interface/IStrategy.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface IStrategy {\r\n    \r\n    function unsalvagableTokens(address tokens) external view returns (bool);\r\n    \r\n    function governance() external view returns (address);\r\n    function controller() external view returns (address);\r\n    function underlying() external view returns (address);\r\n    function vault() external view returns (address);\r\n\r\n    function withdrawAllToVault() external;\r\n    function withdrawToVault(uint256 amount) external;\r\n\r\n    function investedUnderlyingBalance() external view returns (uint256); // itsNotMuch()\r\n\r\n    // should only be called by controller\r\n    function salvage(address recipient, address token, uint256 amount) external;\r\n\r\n    function doHardWork() external;\r\n    function depositArbCheck() external view returns(bool);\r\n}\r\n\r\n\r\n// File contracts/base/StrategyBaseClaimable.sol\r\n\r\n//SPDX-License-Identifier: Unlicense\r\npragma solidity 0.5.16;\r\n\r\n\r\ncontract StrategyBaseClaimable is IStrategy, RewardTokenProfitNotifier  {\r\n\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  event ProfitsNotCollected(address);\r\n  event Liquidating(address, uint256);\r\n\r\n  address public underlying;\r\n  address public vault;\r\n  mapping (address => bool) public unsalvagableTokens;\r\n  address public uniswapRouterV2;\r\n\r\n  address public rewardTokenForLiquidation;\r\n  bool public allowedRewardClaimable = false;\r\n  address public multiSig = 0xF49440C1F012d041802b25A73e5B0B9166a75c02;\r\n\r\n  modifier restricted() {\r\n    require(msg.sender == vault || msg.sender == address(controller()) || msg.sender == address(governance()),\r\n      \"The sender has to be the controller or vault or governance\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyMultiSigOrGovernance() {\r\n    require(msg.sender == multiSig || msg.sender == governance(), \"The sender has to be multiSig or governance\");\r\n    _;\r\n  }\r\n\r\n  constructor(\r\n    address _storage,\r\n    address _underlying,\r\n    address _vault,\r\n    address _rewardTokenForLiquidation,\r\n    address _rewardTokenForProfitSharing,\r\n    address _uniswap\r\n  ) RewardTokenProfitNotifier(_storage, _rewardTokenForProfitSharing) public {\r\n    rewardTokenForLiquidation = _rewardTokenForLiquidation;\r\n    underlying = _underlying;\r\n    vault = _vault;\r\n    unsalvagableTokens[_rewardTokenForLiquidation] = true;\r\n    unsalvagableTokens[_underlying] = true;\r\n    uniswapRouterV2 = _uniswap;\r\n    require(underlying != _rewardTokenForLiquidation, \"reward token cannot be the same as underlying for StrategyBaseClaimable\");\r\n  }\r\n\r\n  function setMultiSig(address _address) public onlyGovernance {\r\n    multiSig = _address;\r\n  }\r\n\r\n  // reward claiming by multiSig for some strategies\r\n  function claimReward() public onlyMultiSigOrGovernance {\r\n    require(allowedRewardClaimable, \"reward claimable is not allowed\");\r\n    _getReward();\r\n    uint256 rewardBalance = IERC20(rewardTokenForLiquidation).balanceOf(address(this));\r\n    IERC20(rewardTokenForLiquidation).safeTransfer(msg.sender, rewardBalance);\r\n  }\r\n\r\n  function setRewardClaimable(bool flag) public onlyGovernance {\r\n    allowedRewardClaimable = flag;\r\n  }\r\n\r\n  function _getReward() internal {\r\n    revert(\"Should be implemented in the derived contract\");\r\n  }\r\n}\r\n\r\n\r\n// File contracts/base/interface/uniswap/IUniswapV2Router01.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n// File contracts/base/interface/uniswap/IUniswapV2Router02.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/base/interface/IVault.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface IVault {\r\n\r\n    function initializeVault(\r\n      address _storage,\r\n      address _underlying,\r\n      uint256 _toInvestNumerator,\r\n      uint256 _toInvestDenominator\r\n    ) external ;\r\n\r\n    function balanceOf(address) external view returns (uint256);\r\n\r\n    function underlyingBalanceInVault() external view returns (uint256);\r\n    function underlyingBalanceWithInvestment() external view returns (uint256);\r\n\r\n    // function store() external view returns (address);\r\n    function governance() external view returns (address);\r\n    function controller() external view returns (address);\r\n    function underlying() external view returns (address);\r\n    function strategy() external view returns (address);\r\n\r\n    function setStrategy(address _strategy) external;\r\n    function announceStrategyUpdate(address _strategy) external;\r\n    function setVaultFractionToInvest(uint256 numerator, uint256 denominator) external;\r\n\r\n    function deposit(uint256 amountWei) external;\r\n    function depositFor(uint256 amountWei, address holder) external;\r\n\r\n    function withdrawAll() external;\r\n    function withdraw(uint256 numberOfShares) external;\r\n    function getPricePerFullShare() external view returns (uint256);\r\n\r\n    function underlyingBalanceWithInvestmentForHolder(address holder) view external returns (uint256);\r\n\r\n    // hard work should be callable only by the controller (by the hard worker) or by governance\r\n    function doHardWork() external;\r\n}\r\n\r\n\r\n// File contracts/base/interface/IRewardDistributionSwitcher.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ncontract IRewardDistributionSwitcher {\r\n\r\n  function switchingAllowed(address) external returns(bool);\r\n  function returnOwnership(address poolAddr) external;\r\n  function enableSwitchers(address[] calldata switchers) external;\r\n  function setSwithcer(address switcher, bool allowed) external;\r\n  function setPoolRewardDistribution(address poolAddr, address newRewardDistributor) external;\r\n\r\n}\r\n\r\n\r\n// File contracts/base/interface/uniswap/IUniswapV2Pair.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n *Submitted for verification at Etherscan.io on 2020-05-05\r\n*/\r\n\r\n// File: contracts/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n// File contracts/base/interface/INoMintRewardPool.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface INoMintRewardPool {\r\n    function withdraw(uint) external;\r\n    function getReward() external;\r\n    function stake(uint) external;\r\n    function balanceOf(address) external view returns (uint256);\r\n    function earned(address account) external view returns (uint256);\r\n    function exit() external;\r\n\r\n    function rewardDistribution() external view returns (address);\r\n    function lpToken() external view returns(address);\r\n    function rewardToken() external view returns(address);\r\n\r\n    // only owner\r\n    function setRewardDistribution(address _rewardDistributor) external;\r\n    function transferOwnership(address _owner) external;\r\n    function notifyRewardAmount(uint256 _reward) external;\r\n}\r\n\r\n\r\n// File contracts/base/snx-base/SNXReward2FarmStrategy.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n*   This is a general strategy for yields that are based on the synthetix reward contract\r\n*   for example, yam, spaghetti, ham, shrimp.\r\n*\r\n*   One strategy is deployed for one underlying asset, but the design of the contract\r\n*   should allow it to switch between different reward contracts.\r\n*\r\n*   It is important to note that not all SNX reward contracts that are accessible via the same interface are\r\n*   suitable for this Strategy. One concrete example is CREAM.finance, as it implements a \"Lock\" feature and\r\n*   would not allow the user to withdraw within some timeframe after the user have deposited.\r\n*   This would be problematic to user as our \"invest\" function in the vault could be invoked by anyone anytime\r\n*   and thus locking/reverting on subsequent withdrawals. Another variation is the YFI Governance: it can\r\n*   activate a vote lock to stop withdrawal.\r\n*\r\n*   Ref:\r\n*   1. CREAM https://etherscan.io/address/0xc29e89845fa794aa0a0b8823de23b760c3d766f5#code\r\n*   2. YAM https://etherscan.io/address/0x8538E5910c6F80419CD3170c26073Ff238048c9E#code\r\n*   3. SHRIMP https://etherscan.io/address/0x9f83883FD3cadB7d2A83a1De51F9Bf483438122e#code\r\n*   4. BASED https://etherscan.io/address/0x5BB622ba7b2F09BF23F1a9b509cd210A818c53d7#code\r\n*   5. YFII https://etherscan.io/address/0xb81D3cB2708530ea990a287142b82D058725C092#code\r\n*   6. YFIGovernance https://etherscan.io/address/0xBa37B002AbaFDd8E89a1995dA52740bbC013D992#code\r\n*\r\n*\r\n*\r\n*   Respecting the current system design of choosing the best strategy under the vault, and also rewarding/funding\r\n*   the public key that invokes the switch of strategies, this smart contract should be deployed twice and linked\r\n*   to the same vault. When the governance want to rotate the crop, they would set the reward source on the strategy\r\n*   that is not active, then set that apy higher and this one lower.\r\n*\r\n*   Consequently, in the smart contract we restrict that we can only set a new reward source when it is not active.\r\n*\r\n*/\r\n\r\ncontract SNXReward2FarmStrategy is StrategyBaseClaimable {\r\n\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  address public farm;\r\n  address public distributionPool;\r\n  address public distributionSwitcher;\r\n  address public rewardToken;\r\n  bool public pausedInvesting = false; // When this flag is true, the strategy will not be able to invest. But users should be able to withdraw.\r\n\r\n  SNXRewardInterface public rewardPool;\r\n\r\n  // a flag for disabling selling for simplified emergency exit\r\n  bool public sell = true;\r\n  uint256 public sellFloor = 1e6;\r\n\r\n  mapping (address => address[]) public uniswapRoutes;\r\n\r\n  event ProfitsNotCollected();\r\n\r\n  // This is only used in `investAllUnderlying()`\r\n  // The user can still freely withdraw from the strategy\r\n  modifier onlyNotPausedInvesting() {\r\n    require(!pausedInvesting, \"Action blocked as the strategy is in emergency state\");\r\n    _;\r\n  }\r\n\r\n  constructor(\r\n    address _storage,\r\n    address _underlying,\r\n    address _vault,\r\n    address _rewardPool,\r\n    address _rewardToken,\r\n    address _uniswapRouterV2,\r\n    address _farm,\r\n    address _distributionPool,\r\n    address _distributionSwitcher\r\n  )\r\n  StrategyBaseClaimable(_storage, _underlying, _vault, _rewardToken, _farm, _uniswapRouterV2)\r\n  public {\r\n    require(_vault == INoMintRewardPool(_distributionPool).lpToken(), \"distribution pool's lp must be the vault\");\r\n    require(_farm == INoMintRewardPool(_distributionPool).rewardToken(), \"distribution pool's reward must be FARM\");\r\n    farm = _farm;\r\n    distributionPool = _distributionPool;\r\n    rewardToken = _rewardToken;\r\n    distributionSwitcher = _distributionSwitcher;\r\n    rewardPool = SNXRewardInterface(_rewardPool);\r\n  }\r\n\r\n  function depositArbCheck() public view returns(bool) {\r\n    return true;\r\n  }\r\n\r\n  /*\r\n  *   In case there are some issues discovered about the pool or underlying asset\r\n  *   Governance can exit the pool properly\r\n  *   The function is only used for emergency to exit the pool\r\n  */\r\n  function emergencyExit() public onlyGovernance {\r\n    rewardPool.exit();\r\n    pausedInvesting = true;\r\n  }\r\n\r\n  /*\r\n  *   Resumes the ability to invest into the underlying reward pools\r\n  */\r\n\r\n  function continueInvesting() public onlyGovernance {\r\n    pausedInvesting = false;\r\n  }\r\n\r\n\r\n  function setLiquidationPaths(address [] memory _uniswapRouteFarm) public onlyGovernance {\r\n    uniswapRoutes[farm] = _uniswapRouteFarm;\r\n  }\r\n\r\n  // We assume that all the tradings can be done on Uniswap\r\n  function _liquidateReward() internal {\r\n    uint256 rewardBalance = IERC20(rewardToken).balanceOf(address(this));\r\n    if (!sell || rewardBalance < sellFloor) {\r\n      // Profits can be disabled for possible simplified and rapid exit\r\n      emit ProfitsNotCollected();\r\n      return;\r\n    }\r\n\r\n    // allow Uniswap to sell our reward\r\n    uint256 amountOutMin = 1;\r\n\r\n    IERC20(rewardToken).safeApprove(uniswapRouterV2, 0);\r\n    IERC20(rewardToken).safeApprove(uniswapRouterV2, rewardBalance);\r\n\r\n    // sell reward token to FARM\r\n    // we can accept 1 as minimum because this is called only by a trusted role\r\n\r\n    uint256 farmAmount;\r\n    if (uniswapRoutes[farm].length > 1) {\r\n      IUniswapV2Router02(uniswapRouterV2).swapExactTokensForTokens(\r\n        rewardBalance,\r\n        amountOutMin,\r\n        uniswapRoutes[farm],\r\n        address(this),\r\n        block.timestamp\r\n      );\r\n\r\n      farmAmount = IERC20(farm).balanceOf(address(this));\r\n    } else {\r\n      revert(\"The liquidation path for [Reward -> FARM] must be set.\");\r\n    }\r\n\r\n    // Use farm as protif sharing base, sending it\r\n    notifyProfitInRewardToken(farmAmount);\r\n\r\n    // The remaining farms should be distributed to the distribution pool\r\n    farmAmount = IERC20(farm).balanceOf(address(this));\r\n\r\n    // Switch reward distribution temporarily, notify reward, switch it back\r\n    address prevRewardDistribution = INoMintRewardPool(distributionPool).rewardDistribution();\r\n    IRewardDistributionSwitcher(distributionSwitcher).setPoolRewardDistribution(distributionPool, address(this));\r\n    // transfer and notify with the remaining farm amount\r\n    IERC20(farm).safeTransfer(distributionPool, farmAmount);\r\n    INoMintRewardPool(distributionPool).notifyRewardAmount(farmAmount);\r\n    IRewardDistributionSwitcher(distributionSwitcher).setPoolRewardDistribution(distributionPool, prevRewardDistribution);\r\n  }\r\n\r\n  /*\r\n  *   Stakes everything the strategy holds into the reward pool\r\n  */\r\n  function investAllUnderlying() internal onlyNotPausedInvesting {\r\n    // this check is needed, because most of the SNX reward pools will revert if\r\n    // you try to stake(0).\r\n    if(IERC20(underlying).balanceOf(address(this)) > 0) {\r\n      IERC20(underlying).approve(address(rewardPool), IERC20(underlying).balanceOf(address(this)));\r\n      rewardPool.stake(IERC20(underlying).balanceOf(address(this)));\r\n    }\r\n  }\r\n\r\n  /*\r\n  *   Withdraws all the asset to the vault\r\n  */\r\n  function withdrawAllToVault() public restricted {\r\n    if (address(rewardPool) != address(0)) {\r\n      if (rewardPool.balanceOf(address(this)) > 0) {\r\n        rewardPool.exit();\r\n      }\r\n    }\r\n    _liquidateReward();\r\n\r\n    if (IERC20(underlying).balanceOf(address(this)) > 0) {\r\n      IERC20(underlying).safeTransfer(vault, IERC20(underlying).balanceOf(address(this)));\r\n    }\r\n  }\r\n\r\n  /*\r\n  *   Withdraws all the asset to the vault\r\n  */\r\n  function withdrawToVault(uint256 amount) public restricted {\r\n    // Typically there wouldn't be any amount here\r\n    // however, it is possible because of the emergencyExit\r\n    if(amount > IERC20(underlying).balanceOf(address(this))){\r\n      // While we have the check above, we still using SafeMath below\r\n      // for the peace of mind (in case something gets changed in between)\r\n      uint256 needToWithdraw = amount.sub(IERC20(underlying).balanceOf(address(this)));\r\n      rewardPool.withdraw(Math.min(rewardPool.balanceOf(address(this)), needToWithdraw));\r\n    }\r\n\r\n    IERC20(underlying).safeTransfer(vault, amount);\r\n  }\r\n\r\n  /*\r\n  *   Note that we currently do not have a mechanism here to include the\r\n  *   amount of reward that is accrued.\r\n  */\r\n  function investedUnderlyingBalance() external view returns (uint256) {\r\n    if (address(rewardPool) == address(0)) {\r\n      return IERC20(underlying).balanceOf(address(this));\r\n    }\r\n    // Adding the amount locked in the reward pool and the amount that is somehow in this contract\r\n    // both are in the units of \"underlying\"\r\n    // The second part is needed because there is the emergency exit mechanism\r\n    // which would break the assumption that all the funds are always inside of the reward pool\r\n    return rewardPool.balanceOf(address(this)).add(IERC20(underlying).balanceOf(address(this)));\r\n  }\r\n\r\n  /*\r\n  *   Governance or Controller can claim coins that are somehow transferred into the contract\r\n  *   Note that they cannot come in take away coins that are used and defined in the strategy itself\r\n  *   Those are protected by the \"unsalvagableTokens\". To check, see where those are being flagged.\r\n  */\r\n  function salvage(address recipient, address token, uint256 amount) external onlyControllerOrGovernance {\r\n     // To make sure that governance cannot come in and take away the coins\r\n    require(!unsalvagableTokens[token], \"token is defined as not salvagable\");\r\n    IERC20(token).safeTransfer(recipient, amount);\r\n  }\r\n\r\n  /*\r\n  *   Get the reward, sell it in exchange for underlying, invest what you got.\r\n  *   It's not much, but it's honest work.\r\n  *\r\n  *   Note that although `onlyNotPausedInvesting` is not added here,\r\n  *   calling `investAllUnderlying()` affectively blocks the usage of `doHardWork`\r\n  *   when the investing is being paused by governance.\r\n  */\r\n  function doHardWork() external onlyNotPausedInvesting restricted {\r\n    rewardPool.getReward();\r\n    _liquidateReward();\r\n    investAllUnderlying();\r\n  }\r\n\r\n  /**\r\n  * Can completely disable claiming UNI rewards and selling. Good for emergency withdraw in the\r\n  * simplest possible way.\r\n  */\r\n  function setSell(bool s) public onlyGovernance {\r\n    sell = s;\r\n  }\r\n\r\n  /**\r\n  * Sets the minimum amount of CRV needed to trigger a sale.\r\n  */\r\n  function setSellFloor(uint256 floor) public onlyGovernance {\r\n    sellFloor = floor;\r\n  }\r\n\r\n  // If there are multiple reward tokens, they should all be liquidated to\r\n  // rewardToken.\r\n  function _getReward() internal {\r\n    if (address(rewardPool) != address(0)) {\r\n      rewardPool.getReward();\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// File contracts/strategies/mirror-finance/MirrorMainnet_mAMZN_UST.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\ncontract MirrorMainnet_mAMZN_UST is SNXReward2FarmStrategy {\r\n\r\n  address public mAMZN_UST = address(0x0Ae8cB1f57e3b1b7f4f5048743710084AA69E796);\r\n  address public rewardPool = address(0x1fABef2C2DAB77f01053E9600F70bE1F3F657F51);\r\n  address public constant uniswapRouterAddress = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n  address public mir = address(0x09a3EcAFa817268f77BE1283176B946C4ff2E608);\r\n  address public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n  address public farm = address(0xa0246c9032bC3A600820415aE600c6388619A14D);\r\n\r\n  constructor(\r\n    address _storage,\r\n    address _vault,\r\n    address _distributionPool,\r\n    address _distributionSwitcher\r\n  )\r\n  SNXReward2FarmStrategy(_storage, mAMZN_UST, _vault, rewardPool, mir, uniswapRouterAddress, farm, _distributionPool, _distributionSwitcher)\r\n  public {\r\n    require(IVault(_vault).underlying() == mAMZN_UST, \"Underlying mismatch\");\r\n    uniswapRoutes[farm] = [mir, weth, farm];\r\n\r\n    // adding ability to liquidate reward tokens manually if there is no liquidity\r\n    unsalvagableTokens[mir] = false;\r\n    allowedRewardClaimable = true;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributionPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributionSwitcher\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Liquidating\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProfitAndBuybackLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProfitLogInReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ProfitsNotCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ProfitsNotCollected\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowedRewardClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"continueInvesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositArbCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionSwitcher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doHardWork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"farm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investedUnderlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mAMZN_UST\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mir\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiSig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pausedInvesting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitSharingDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitSharingNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardTokenForLiquidation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"salvage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellFloor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_uniswapRouteFarm\",\"type\":\"address[]\"}],\"name\":\"setLiquidationPaths\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setMultiSig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setRewardClaimable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"s\",\"type\":\"bool\"}],\"name\":\"setSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"floor\",\"type\":\"uint256\"}],\"name\":\"setSellFloor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_store\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"store\",\"outputs\":[{\"internalType\":\"contract Storage\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapRouterV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniswapRoutes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unsalvagableTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAllToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MirrorMainnet_mAMZN_UST","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c95cbe4ca30055c787cb784be99d6a8494d0d1970000000000000000000000008334a61012a779169725fcc43adcff1f581350b70000000000000000000000008dc427cbcc75cae58dd4f386979eba6662f5c158000000000000000000000000c27100c8e424505bfb4106dd5cee9d10ad4c2923","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c982b0c5314a3c070895a9ca7c5a39670ebed6ae246aa510d049cd2cffd115a7"}]}