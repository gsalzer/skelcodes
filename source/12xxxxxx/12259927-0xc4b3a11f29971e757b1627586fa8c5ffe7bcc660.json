{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\n\n\n// Part: IERC721\n\ninterface IERC721 {\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n    ///  THEY MAY BE PERMANENTLY LOST\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n    ///  `_tokenId` is not a valid NFT.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) external;\n    \n    function setApprovalForAll(address operator, bool approved) external;\n\n    function approve(address to, uint256 tokenId) external;\n    \n    function isApprovedForAll(address owner, address operator) external returns (bool);\n}\n\n// Part: IMakersPlace\n\ninterface IMakersPlace {\n    function purchase(uint256 _tokenId, address _referredBy) payable external;\n}\n\n// File: MakersPlaceMarket.sol\n\nlibrary MakersPlaceMarket {\n\n    address public constant MAKERSPLACE = 0x7e3abdE9D9E80fA2d1A02c89E0eae91b233CDE35;\n\n    struct MakersPlaceBuy {\n        uint256 tokenId;\n        uint256 price;\n    }\n\n    function buyAssetsForEth(bytes memory data, address recipient) public {\n        MakersPlaceBuy[] memory makersPlaceBuys;\n        (makersPlaceBuys) = abi.decode(\n            data,\n            (MakersPlaceBuy[])\n        );\n\n        for (uint256 i = 0; i < makersPlaceBuys.length; i++) {\n            _buyAssetForEth(makersPlaceBuys[i].tokenId, makersPlaceBuys[i].price, recipient);\n        }\n    }\n\n    function _buyAssetForEth(uint256 _tokenId, uint256 _price, address _recipient) internal {\n        bytes memory _data = abi.encodeWithSelector(IMakersPlace(MAKERSPLACE).purchase.selector, _tokenId, 0x2A46f2fFD99e19a89476E2f62270e0a35bBf0756);\n\n        (bool success, ) = MAKERSPLACE.call{value:_price}(_data);\n        require(success, \"_buyAssetForEth: makersPlace buy failed.\");\n\n        IERC721(0x2A46f2fFD99e19a89476E2f62270e0a35bBf0756).transferFrom(address(this), _recipient, _tokenId);\n    }\n}\n","ABI":"[{\"inputs\":[],\"name\":\"MAKERSPLACE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MakersPlaceMarket","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}