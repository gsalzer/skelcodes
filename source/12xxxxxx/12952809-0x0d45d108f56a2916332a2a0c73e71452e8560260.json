{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\ninterface ISateNFT {\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n    function creators(uint256 tokenId) external view returns (address);\r\n    function isApproved(uint256 _tokenId, address _operator) external view returns (bool);\r\n    function sateInfo(uint256 tokenId) external view returns (uint256, uint256, uint256, uint256, uint8, uint8);\r\n\r\n    function setPrimarySalePrice(uint256 _tokenId, uint256 _salePrice) external;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @notice Primary sale auction contract for SATE NFTs\r\n */\r\ncontract SateAuction is Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address payable;\r\n    using SafeERC20 for IERC20;\r\n\r\n\r\n    event AuctionCreated(\r\n        uint256 indexed tokenId,\r\n        uint256 reservePrice,\r\n        uint256 startTimestamp,\r\n        uint256 endTimestamp\r\n    );\r\n\r\n    event UpdateAuctionEndTime(\r\n        uint256 indexed tokenId,\r\n        uint256 endTime\r\n    );\r\n\r\n    event UpdateAuctionStartTime(\r\n        uint256 indexed tokenId,\r\n        uint256 startTime\r\n    );\r\n\r\n    event UpdateAuctionReservePrice(\r\n        uint256 indexed tokenId,\r\n        uint256 reservePrice\r\n    );\r\n\r\n    event UpdateMinBidIncrement(\r\n        uint256 minBidIncrement\r\n    );\r\n\r\n    event UpdateBidWithdrawalLockTime(\r\n        uint256 bidWithdrawalLockTime\r\n    );\r\n\r\n    event BidPlaced(\r\n        uint256 indexed tokenId,\r\n        address indexed bidder,\r\n        uint256 bid\r\n    );\r\n\r\n    event BidWithdrawn(\r\n        uint256 indexed tokenId,\r\n        address indexed bidder,\r\n        uint256 bid\r\n    );\r\n\r\n    event BidRefunded(\r\n        address indexed bidder,\r\n        uint256 bid\r\n    );\r\n\r\n    event AuctionResulted(\r\n        uint256 indexed tokenId,\r\n        address indexed winner,\r\n        uint256 winningBid\r\n    );\r\n\r\n    event AuctionCancelled(\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /// @notice Parameters of an auction\r\n    struct Auction {\r\n        uint256 reservePrice;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        bool resulted;\r\n    }\r\n\r\n    /// @notice Information about the sender that placed a bid on an auction\r\n    struct HighestBid {\r\n        address payable bidder;\r\n        uint256 bid;\r\n        uint256 lastBidTime;\r\n    }\r\n\r\n    /// @notice SATE Token ID -> Auction Parameters\r\n    mapping(uint256 => Auction) public auctions;\r\n\r\n    /// @notice SATE Token ID -> highest bidder info (if a bid has been received)\r\n    mapping(uint256 => HighestBid) public highestBids;\r\n\r\n    /// @notice SATE NFT - the only NFT that can be auctioned in this contract\r\n    ISateNFT public sateNft;\r\n\r\n    /// @notice STARL erc20 token\r\n    IERC20 public token;\r\n\r\n    /// @notice globally and across all auctions, the amount by which a bid has to increase\r\n    uint256 public minBidIncrement = 100000000 * (10 ** 18);\r\n\r\n    /// @notice global bid withdrawal lock time\r\n    uint256 public bidWithdrawalLockTime = 30 minutes;\r\n\r\n    /// @notice designer fee, assumed to always be to 1 decimal place i.e. 200 = 20%\r\n    uint256 public designerFee = 200;\r\n\r\n    /// @notice Vault fee, assumed to always be to 1 decimal place i.e. 300 = 30%\r\n    uint256 public vaultFee = 300;\r\n\r\n    /// @notice Fee recipient that represents volunteer devs\r\n    address payable public devFeeRecipient;\r\n\r\n    /// @notice Starlink rewards vault contract\r\n    address payable public vault;\r\n\r\n    constructor(\r\n        ISateNFT _sateNft,\r\n        IERC20 _token,\r\n        address payable _devFeeRecipient,\r\n        address payable _vault\r\n    ) public {\r\n        require(address(_sateNft) != address(0), \"Invalid NFT\");\r\n        require(address(_token) != address(0), \"Invalid Token\");\r\n        require(_devFeeRecipient != address(0), \"Invalid Dev Fee Recipient\");\r\n        require(_vault != address(0), \"Invalid Vault\");\r\n\r\n        sateNft = _sateNft;\r\n        token = _token;\r\n        devFeeRecipient = _devFeeRecipient;\r\n        vault = _vault;\r\n    }\r\n\r\n    /**\r\n     @notice Creates a new auction for a given nft\r\n     @dev Only the owner of a nft can create an auction and must have approved the contract\r\n     @dev End time for the auction must be in the future.\r\n     @param _tokenId Token ID of the nft being auctioned\r\n     @param _reservePrice Nft cannot be sold for less than this or minBidIncrement, whichever is higher\r\n     @param _startTimestamp Unix epoch in seconds for the auction start time\r\n     @param _endTimestamp Unix epoch in seconds for the auction end time.\r\n     */\r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _reservePrice,\r\n        uint256 _startTimestamp,\r\n        uint256 _endTimestamp\r\n    ) external onlyOwner {\r\n        // Check owner of the token is the creator and approved\r\n        require(\r\n            sateNft.isApproved(_tokenId, address(this)),\r\n            \"Not approved\"\r\n        );\r\n\r\n        _createAuction(\r\n            _tokenId,\r\n            _reservePrice,\r\n            _startTimestamp,\r\n            _endTimestamp\r\n        );\r\n    }\r\n\r\n\r\n    /**\r\n     @notice Places a new bid, out bidding the existing bidder if found and criteria is reached\r\n     @dev Only callable when the auction is open\r\n     @dev Bids from smart contracts are prohibited to prevent griefing with always reverting receiver\r\n     @param _tokenId Token ID of the NFT being auctioned\r\n     @param _amount Bid STARL amount\r\n     */\r\n    function placeBid(uint256 _tokenId, uint256 _amount) external payable {\r\n        require(_msgSender().isContract() == false, \"No contracts permitted\");\r\n\r\n        // Check the auction to see if this is a valid bid\r\n        Auction storage auction = auctions[_tokenId];\r\n\r\n        // Ensure auction is in flight\r\n        require(\r\n            _getNow() >= auction.startTime && _getNow() <= auction.endTime,\r\n            \"Bidding outside of the auction window\"\r\n        );\r\n\r\n        // Ensure bid adheres to outbid increment and threshold\r\n        HighestBid storage highestBid = highestBids[_tokenId];\r\n        uint256 minBidRequired = highestBid.bid.add(minBidIncrement);\r\n        require(_amount >= auction.reservePrice, \"Failed to outbid min bid price\");\r\n        require(_amount >= minBidRequired, \"Failed to outbid highest bidder\");\r\n\r\n        // Transfer STARL token\r\n        token.safeTransferFrom(_msgSender(), address(this), _amount);\r\n\r\n        // Refund existing top bidder if found\r\n        if (highestBid.bidder != address(0)) {\r\n            _refundHighestBidder(highestBid.bidder, highestBid.bid);\r\n        }\r\n\r\n        // assign top bidder and bid time\r\n        highestBid.bidder = _msgSender();\r\n        highestBid.bid = _amount;\r\n        highestBid.lastBidTime = _getNow();\r\n\r\n        emit BidPlaced(_tokenId, _msgSender(), _amount);\r\n    }\r\n\r\n    /**\r\n     @notice Given a sender who has the highest bid on a NFT, allows them to withdraw their bid\r\n     @dev Only callable by the existing top bidder\r\n     @param _tokenId Token ID of the NFT being auctioned\r\n     */\r\n    function withdrawBid(uint256 _tokenId) external {\r\n        HighestBid storage highestBid = highestBids[_tokenId];\r\n\r\n        // Ensure highest bidder is the caller\r\n        require(highestBid.bidder == _msgSender(), \"You are not the highest bidder\");\r\n\r\n        // Check withdrawal after delay time\r\n        require(\r\n            _getNow() >= highestBid.lastBidTime.add(bidWithdrawalLockTime),\r\n            \"Cannot withdraw until lock time has passed\"\r\n        );\r\n\r\n        require(_getNow() < auctions[_tokenId].endTime, \"Past auction end\");\r\n\r\n        uint256 previousBid = highestBid.bid;\r\n\r\n        // Clean up the existing top bid\r\n        delete highestBids[_tokenId];\r\n\r\n        // Refund the top bidder\r\n        _refundHighestBidder(_msgSender(), previousBid);\r\n\r\n        emit BidWithdrawn(_tokenId, _msgSender(), previousBid);\r\n    }\r\n\r\n\r\n    //////////\r\n    // Admin /\r\n    //////////\r\n\r\n    /**\r\n     @notice Results a finished auction\r\n     @dev Only admin or smart contract\r\n     @dev Auction can only be resulted if there has been a bidder and reserve met.\r\n     @dev If there have been no bids, the auction needs to be cancelled instead using `cancelAuction()`\r\n     @param _tokenId Token ID of the NFT being auctioned\r\n     */\r\n    function resultAuction(uint256 _tokenId) external onlyOwner {\r\n\r\n        // Check the auction to see if it can be resulted\r\n        Auction storage auction = auctions[_tokenId];\r\n\r\n        // Check the auction real\r\n        require(auction.endTime > 0, \"Auction does not exist\");\r\n\r\n        // Check the auction has ended\r\n        require(_getNow() > auction.endTime, \"The auction has not ended\");\r\n\r\n        // Ensure auction not already resulted\r\n        require(!auction.resulted, \"auction already resulted\");\r\n\r\n        // Ensure this contract is approved to move the token\r\n        require(sateNft.isApproved(_tokenId, address(this)), \"auction not approved\");\r\n\r\n        // Get info on who the highest bidder is\r\n        HighestBid storage highestBid = highestBids[_tokenId];\r\n        address winner = highestBid.bidder;\r\n        uint256 winningBid = highestBid.bid;\r\n\r\n        // Ensure auction not already resulted\r\n        require(winningBid >= auction.reservePrice, \"reserve not reached\");\r\n\r\n        // Ensure there is a winner\r\n        require(winner != address(0), \"no open bids\");\r\n\r\n        // Result the auction\r\n        auctions[_tokenId].resulted = true;\r\n\r\n        // Clean up the highest bid\r\n        delete highestBids[_tokenId];\r\n\r\n        // Record the primary sale price for the NFT\r\n        uint256 primarySalePrice = winningBid;\r\n        sateNft.setPrimarySalePrice(_tokenId, primarySalePrice);\r\n\r\n        // Designer fee amount\r\n        uint256 designerFeeAmount = winningBid.mul(designerFee).div(1000);\r\n\r\n        // Vault fee amount\r\n        uint256 vaultFeeAmount = winningBid.mul(vaultFee).div(1000);\r\n\r\n        // Send designer fee\r\n        token.safeTransfer(sateNft.creators(_tokenId), designerFeeAmount);\r\n        \r\n        // Send vault fee\r\n        token.safeTransfer(vault, vaultFeeAmount);\r\n\r\n        // Send remaining to devs\r\n        token.safeTransfer(devFeeRecipient, winningBid.sub(designerFeeAmount).sub(vaultFeeAmount));\r\n\r\n        // Transfer the token to the winner\r\n        sateNft.safeTransferFrom(sateNft.ownerOf(_tokenId), winner, _tokenId);\r\n\r\n        emit AuctionResulted(_tokenId, winner, winningBid);\r\n    }\r\n\r\n    /**\r\n     @notice Cancels and inflight and un-resulted auctions, returning the funds to the top bidder if found\r\n     @dev Only admin\r\n     @param _tokenId Token ID of the NFT being auctioned\r\n     */\r\n    function cancelAuction(uint256 _tokenId) external onlyOwner {\r\n\r\n        // Check valid and not resulted\r\n        Auction storage auction = auctions[_tokenId];\r\n\r\n        // Check auction is real\r\n        require(auction.endTime > 0, \"Auction does not exist\");\r\n\r\n        // Check auction not already resulted\r\n        require(!auction.resulted, \"Auction already resulted\");\r\n\r\n        // refund existing top bidder if found\r\n        HighestBid storage highestBid = highestBids[_tokenId];\r\n        if (highestBid.bidder != address(0)) {\r\n            _refundHighestBidder(highestBid.bidder, highestBid.bid);\r\n\r\n            // Clear up highest bid\r\n            delete highestBids[_tokenId];\r\n        }\r\n\r\n        // Remove auction and top bidder\r\n        delete auctions[_tokenId];\r\n\r\n        emit AuctionCancelled(_tokenId);\r\n    }\r\n\r\n    /**\r\n     @notice Update the amount by which bids have to increase, across all auctions\r\n     @dev Only admin\r\n     @param _minBidIncrement New bid step in WEI\r\n     */\r\n    function updateMinBidIncrement(uint256 _minBidIncrement) external onlyOwner {\r\n        minBidIncrement = _minBidIncrement;\r\n        emit UpdateMinBidIncrement(_minBidIncrement);\r\n    }\r\n\r\n    /**\r\n     @notice Update the global bid withdrawal lockout time\r\n     @dev Only admin\r\n     @param _bidWithdrawalLockTime New bid withdrawal lock time\r\n     */\r\n    function updateBidWithdrawalLockTime(uint256 _bidWithdrawalLockTime) external onlyOwner {\r\n        bidWithdrawalLockTime = _bidWithdrawalLockTime;\r\n        emit UpdateBidWithdrawalLockTime(_bidWithdrawalLockTime);\r\n    }\r\n\r\n    /**\r\n     @notice Update the current reserve price for an auction\r\n     @dev Only admin\r\n     @dev Auction must exist\r\n     @param _tokenId Token ID of the NFT being auctioned\r\n     @param _reservePrice New Ether reserve price (WEI value)\r\n     */\r\n    function updateAuctionReservePrice(uint256 _tokenId, uint256 _reservePrice) external onlyOwner {\r\n        require(\r\n            auctions[_tokenId].endTime > 0,\r\n            \"No Auction exists\"\r\n        );\r\n\r\n        auctions[_tokenId].reservePrice = _reservePrice;\r\n        emit UpdateAuctionReservePrice(_tokenId, _reservePrice);\r\n    }\r\n\r\n    /**\r\n     @notice Update the current start time for an auction\r\n     @dev Only admin\r\n     @dev Auction must exist\r\n     @param _tokenId Token ID of the NFT being auctioned\r\n     @param _startTime New start time (unix epoch in seconds)\r\n     */\r\n    function updateAuctionStartTime(uint256 _tokenId, uint256 _startTime) external onlyOwner {\r\n        require(\r\n            auctions[_tokenId].endTime > 0,\r\n            \"No Auction exists\"\r\n        );\r\n\r\n        auctions[_tokenId].startTime = _startTime;\r\n        emit UpdateAuctionStartTime(_tokenId, _startTime);\r\n    }\r\n\r\n    /**\r\n     @notice Update the current end time for an auction\r\n     @dev Only admin\r\n     @dev Auction must exist\r\n     @param _tokenId Token ID of the NFT being auctioned\r\n     @param _endTimestamp New end time (unix epoch in seconds)\r\n     */\r\n    function updateAuctionEndTime(uint256 _tokenId, uint256 _endTimestamp) external onlyOwner {\r\n        require(\r\n            auctions[_tokenId].endTime > 0,\r\n            \"No Auction exists\"\r\n        );\r\n        require(\r\n            auctions[_tokenId].startTime < _endTimestamp,\r\n            \"End time must be greater than start\"\r\n        );\r\n        require(\r\n            _endTimestamp > _getNow(),\r\n            \"End time passed. Nobody can bid\"\r\n        );\r\n\r\n        auctions[_tokenId].endTime = _endTimestamp;\r\n        emit UpdateAuctionEndTime(_tokenId, _endTimestamp);\r\n    }\r\n\r\n    /**\r\n     @notice Update the designer fee\r\n     @dev Only admin\r\n     @param _designerFee New Designer Fee Percentage\r\n     */\r\n    function updateDesignerFee(uint256 _designerFee) external onlyOwner {\r\n        designerFee = _designerFee;\r\n    }\r\n\r\n    /**\r\n     @notice Update the vault fee\r\n     @dev Only admin\r\n     @param _vaultFee New Vault Fee Percentage\r\n     */\r\n    function updateVaultFee(uint256 _vaultFee) external onlyOwner {\r\n        vaultFee = _vaultFee;\r\n    }\r\n\r\n\r\n    ///////////////\r\n    // Accessors //\r\n    ///////////////\r\n\r\n    /**\r\n     @notice Method for getting all info about the auction\r\n     @param _tokenId Token ID of the NFT being auctioned\r\n     */\r\n    function getAuction(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns (uint256 _reservePrice, uint256 _startTime, uint256 _endTime, bool _resulted) {\r\n        Auction storage auction = auctions[_tokenId];\r\n        return (\r\n            auction.reservePrice,\r\n            auction.startTime,\r\n            auction.endTime,\r\n            auction.resulted\r\n        );\r\n    }\r\n\r\n    /**\r\n     @notice Method for getting all info about the highest bidder\r\n     @param _tokenId Token ID of the NFT being auctioned\r\n     */\r\n    function getHighestBidder(uint256 _tokenId) external view returns (\r\n        address payable _bidder,\r\n        uint256 _bid,\r\n        uint256 _lastBidTime\r\n    ) {\r\n        HighestBid storage highestBid = highestBids[_tokenId];\r\n        return (\r\n            highestBid.bidder,\r\n            highestBid.bid,\r\n            highestBid.lastBidTime\r\n        );\r\n    }\r\n\r\n\r\n    /////////////////////////\r\n    // Internal and Private /\r\n    /////////////////////////\r\n\r\n    function _getNow() internal virtual view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    /**\r\n     @notice Private method doing the heavy lifting of creating an auction\r\n     @param _tokenId Token ID of the nft being auctioned\r\n     @param _reservePrice Nft cannot be sold for less than this or minBidIncrement, whichever is higher\r\n     @param _startTimestamp Unix epoch in seconds for the auction start time\r\n     @param _endTimestamp Unix epoch in seconds for the auction end time.\r\n     */\r\n    function _createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _reservePrice,\r\n        uint256 _startTimestamp,\r\n        uint256 _endTimestamp\r\n    ) private {\r\n        // Ensure a token cannot be re-listed if previously successfully sold\r\n        require(auctions[_tokenId].endTime == 0, \"Cannot relist\");\r\n\r\n        // Check end time not before start time and that end is in the future\r\n        require(_endTimestamp > _startTimestamp, \"End time must be greater than start\");\r\n        require(_endTimestamp > _getNow(), \"End time passed. Nobody can bid.\");\r\n\r\n        // Setup the auction\r\n        auctions[_tokenId] = Auction({\r\n            reservePrice : _reservePrice,\r\n            startTime : _startTimestamp,\r\n            endTime : _endTimestamp,\r\n            resulted : false\r\n        });\r\n\r\n        emit AuctionCreated(_tokenId, _reservePrice, _startTimestamp, _endTimestamp);\r\n    }\r\n\r\n    /**\r\n     @notice Used for sending back escrowed funds from a previous bid\r\n     @param _currentHighestBidder Address of the last highest bidder\r\n     @param _currentHighestBid STARL amount that the bidder sent when placing their bid\r\n     */\r\n    function _refundHighestBidder(address payable _currentHighestBidder, uint256 _currentHighestBid) private {\r\n        token.safeTransfer(_currentHighestBidder, _currentHighestBid);\r\n        emit BidRefunded(_currentHighestBidder, _currentHighestBid);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ISateNFT\",\"name\":\"_sateNft\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_devFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningBid\",\"type\":\"uint256\"}],\"name\":\"AuctionResulted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"BidRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"BidWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"UpdateAuctionEndTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"}],\"name\":\"UpdateAuctionReservePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"UpdateAuctionStartTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidWithdrawalLockTime\",\"type\":\"uint256\"}],\"name\":\"UpdateBidWithdrawalLockTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBidIncrement\",\"type\":\"uint256\"}],\"name\":\"UpdateMinBidIncrement\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"resulted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidWithdrawalLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"designerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeRecipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_resulted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getHighestBidder\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"_bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastBidTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"highestBids\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBidTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBidIncrement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"resultAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sateNft\",\"outputs\":[{\"internalType\":\"contract ISateNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"}],\"name\":\"updateAuctionEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"}],\"name\":\"updateAuctionReservePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"updateAuctionStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidWithdrawalLockTime\",\"type\":\"uint256\"}],\"name\":\"updateBidWithdrawalLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_designerFee\",\"type\":\"uint256\"}],\"name\":\"updateDesignerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBidIncrement\",\"type\":\"uint256\"}],\"name\":\"updateMinBidIncrement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultFee\",\"type\":\"uint256\"}],\"name\":\"updateVaultFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SateAuction","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000048470fb3fe7108b9e15b2bf7aa15b7adf774d7210000000000000000000000008e6cd950ad6ba651f6dd608dc70e5886b1aa6b24000000000000000000000000652925f8d31cb21d3b33fec38291f496e1b156fd000000000000000000000000ce968135e84688f48c7e9567103fe249660029de","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6d803d2ac0924966db669cd1d3dff932e4d42e43b379518a0ab3fe1880092c95"}]}