{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface INEC {\r\n\r\n    function burningEnabled() external returns(bool);\r\n\r\n    function controller() external returns(address);\r\n\r\n    function enableBurning(bool _burningEnabled) external;\r\n\r\n    function burnAndRetrieve(uint256 _tokensToBurn) external returns (bool success);\r\n\r\n    function totalPledgedFees() external view returns (uint);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function destroyTokens(address _owner, uint _amount\r\n      ) external returns (bool);\r\n\r\n    function generateTokens(address _owner, uint _amount\r\n      ) external returns (bool);\r\n\r\n    function changeController(address _newController) external;\r\n\r\n    function balanceOf(address owner) external returns(uint256);\r\n\r\n    function transfer(address owner, uint amount) external returns(bool);\r\n}\r\n\r\ncontract TokenController {\r\n\r\n    function proxyPayment(address _owner) public payable returns(bool);\r\n\r\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\r\n\r\n    function onApprove(address _owner, address _spender, uint _amount) public\r\n        returns(bool);\r\n\r\n    function onBurn(address payable _owner, uint _amount) public returns(bool);\r\n}\r\n\r\n\r\ncontract NectarController is TokenController, Ownable {\r\n\r\n    INEC public tokenContract;   // The new token for this Campaign\r\n    \r\n    event UpgradedController (address newAddress);\r\n\r\n    /// @dev There are several checks to make sure the parameters are acceptable\r\n    /// @param _tokenAddress Address of the token contract this contract controls\r\n\r\n    constructor (\r\n        address _tokenAddress\r\n    ) public {\r\n        tokenContract = INEC(_tokenAddress); // The Deployed Token Contract\r\n    }\r\n\r\n/////////////////\r\n// TokenController interface\r\n/////////////////\r\n\r\n    /// @notice `proxyPayment()` allows the caller to send ether to the Campaign\r\n    /// but does not create tokens. This functions the same as the fallback function.\r\n    /// @param _owner Does not do anything, but preserved because of MiniMe standard function.\r\n    function proxyPayment(address _owner) public payable returns(bool) {\r\n        require(false);\r\n        return false;\r\n    }\r\n\r\n\r\n    /// @notice Notifies the controller about a transfer.\r\n    /// Transfers can only happen to whitelisted addresses\r\n    /// @param _from The origin of the transfer\r\n    /// @param _to The destination of the transfer\r\n    /// @param _amount The amount of the transfer\r\n    /// @return False if the controller does not authorize the transfer\r\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool) {\r\n        return true;\r\n    }\r\n\r\n    /// @notice Notifies the controller about an approval, for this Campaign all\r\n    ///  approvals are allowed by default and no extra notifications are needed\r\n    /// @param _owner The address that calls `approve()`\r\n    /// @param _spender The spender in the `approve()` call\r\n    /// @param _amount The amount in the `approve()` call\r\n    /// @return False if the controller does not authorize the approval\r\n    function onApprove(address _owner, address _spender, uint _amount) public\r\n        returns(bool)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    /// @notice Notifies the controller about a burn attempt. Initially all burns are disabled.\r\n    /// Upgraded Controllers in the future will allow token holders to claim the pledged ETH\r\n    /// @param _owner The address that calls `burn()`\r\n    /// @param _tokensToBurn The amount in the `burn()` call\r\n    /// @return False if the controller does not authorize the approval\r\n    function onBurn(address payable _owner, uint _tokensToBurn) public\r\n        returns(bool)\r\n    {\r\n        // This plugin can only be called by the token contract\r\n        require(msg.sender == address(tokenContract));\r\n\r\n        require (tokenContract.destroyTokens(_owner, _tokensToBurn));\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice `onlyOwner` can upgrade the controller contract\r\n    /// @param _newControllerAddress The address that will have the token control logic\r\n    function upgradeController(address _newControllerAddress) public onlyOwner {\r\n        tokenContract.changeController(_newControllerAddress);\r\n        emit UpgradedController(_newControllerAddress);\r\n    }\r\n    \r\n    \r\n    function deleteAndReplaceTokens(address _currentOwner, address _newOwner) public onlyOwner returns(bool) {\r\n        \r\n        uint256 tokenBalance = tokenContract.balanceOf(_currentOwner);\r\n        \r\n        require(tokenContract.destroyTokens(_currentOwner, tokenBalance));\r\n        require(tokenContract.generateTokens(_newOwner, tokenBalance));\r\n        \r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"UpgradedController\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currentOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"deleteAndReplaceTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokensToBurn\",\"type\":\"uint256\"}],\"name\":\"onBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"proxyPayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract INEC\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newControllerAddress\",\"type\":\"address\"}],\"name\":\"upgradeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NectarController","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000cc80c051057b774cd75067dc48f8987c4eb97a5e","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://634b425b5c057f606323b11ecb240959d779c4df1c97de1908f9f541762d9586"}]}