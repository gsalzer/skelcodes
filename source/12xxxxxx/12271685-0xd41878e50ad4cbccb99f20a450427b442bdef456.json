{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/AdminControlled.sol\r\n\r\npragma solidity ^0.6;\r\n\r\ncontract AdminControlled {\r\n    address public admin;\r\n    uint public paused;\r\n\r\n    constructor(address _admin, uint flags) public {\r\n        admin = _admin;\r\n        paused = flags;\r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    modifier pausable(uint flag) {\r\n        require((paused & flag) == 0 || msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    function adminPause(uint flags) public onlyAdmin {\r\n        paused = flags;\r\n    }\r\n\r\n    function adminSstore(uint key, uint value) public onlyAdmin {\r\n        assembly {\r\n            sstore(key, value)\r\n        }\r\n    }\r\n\r\n    function adminSstoreWithMask(\r\n        uint key,\r\n        uint value,\r\n        uint mask\r\n    ) public onlyAdmin {\r\n        assembly {\r\n            let oldval := sload(key)\r\n            sstore(key, xor(and(xor(value, oldval), mask), oldval))\r\n        }\r\n    }\r\n\r\n    function adminSendEth(address payable destination, uint amount) public onlyAdmin {\r\n        destination.transfer(amount);\r\n    }\r\n\r\n    function adminReceiveEth() public payable onlyAdmin {}\r\n\r\n    function adminDelegatecall(address target, bytes memory data) public payable onlyAdmin returns (bytes memory) {\r\n        (bool success, bytes memory rdata) = target.delegatecall(data);\r\n        require(success);\r\n        return rdata;\r\n    }\r\n}\r\n\r\n// File: contracts/INearBridge.sol\r\n\r\npragma solidity ^0.6;\r\n\r\ninterface INearBridge {\r\n    event BlockHashAdded(uint64 indexed height, bytes32 blockHash);\r\n\r\n    event BlockHashReverted(uint64 indexed height, bytes32 blockHash);\r\n\r\n    function blockHashes(uint64 blockNumber) external view returns (bytes32);\r\n\r\n    function blockMerkleRoots(uint64 blockNumber) external view returns (bytes32);\r\n\r\n    function balanceOf(address wallet) external view returns (uint256);\r\n\r\n    function deposit() external payable;\r\n\r\n    function withdraw() external;\r\n\r\n    function initWithValidators(bytes calldata initialValidators) external;\r\n\r\n    function initWithBlock(bytes calldata data) external;\r\n\r\n    function addLightClientBlock(bytes calldata data) external;\r\n\r\n    function challenge(address payable receiver, uint256 signatureIndex) external;\r\n\r\n    function checkBlockProducerSignatureInHead(uint256 signatureIndex) external view returns (bool);\r\n}\r\n\r\n// File: contracts/Utils.sol\r\n\r\npragma solidity ^0.6;\r\n\r\nlibrary Utils {\r\n    function swapBytes2(uint16 v) internal pure returns (uint16) {\r\n        return (v << 8) | (v >> 8);\r\n    }\r\n\r\n    function swapBytes4(uint32 v) internal pure returns (uint32) {\r\n        v = ((v & 0x00ff00ff) << 8) | ((v & 0xff00ff00) >> 8);\r\n        return (v << 16) | (v >> 16);\r\n    }\r\n\r\n    function swapBytes8(uint64 v) internal pure returns (uint64) {\r\n        v = ((v & 0x00ff00ff00ff00ff) << 8) | ((v & 0xff00ff00ff00ff00) >> 8);\r\n        v = ((v & 0x0000ffff0000ffff) << 16) | ((v & 0xffff0000ffff0000) >> 16);\r\n        return (v << 32) | (v >> 32);\r\n    }\r\n\r\n    function swapBytes16(uint128 v) internal pure returns (uint128) {\r\n        v = ((v & 0x00ff00ff00ff00ff00ff00ff00ff00ff) << 8) | ((v & 0xff00ff00ff00ff00ff00ff00ff00ff00) >> 8);\r\n        v = ((v & 0x0000ffff0000ffff0000ffff0000ffff) << 16) | ((v & 0xffff0000ffff0000ffff0000ffff0000) >> 16);\r\n        v = ((v & 0x00000000ffffffff00000000ffffffff) << 32) | ((v & 0xffffffff00000000ffffffff00000000) >> 32);\r\n        return (v << 64) | (v >> 64);\r\n    }\r\n\r\n    function swapBytes32(uint256 v) internal pure returns (uint256) {\r\n        v =\r\n            ((v & 0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff) << 8) |\r\n            ((v & 0xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00) >> 8);\r\n        v =\r\n            ((v & 0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff) << 16) |\r\n            ((v & 0xffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000) >> 16);\r\n        v =\r\n            ((v & 0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff) << 32) |\r\n            ((v & 0xffffffff00000000ffffffff00000000ffffffff00000000ffffffff00000000) >> 32);\r\n        v =\r\n            ((v & 0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff) << 64) |\r\n            ((v & 0xffffffffffffffff0000000000000000ffffffffffffffff0000000000000000) >> 64);\r\n        return (v << 128) | (v >> 128);\r\n    }\r\n\r\n    function readMemory(uint ptr) internal pure returns (uint res) {\r\n        assembly {\r\n            res := mload(ptr)\r\n        }\r\n    }\r\n\r\n    function writeMemory(uint ptr, uint value) internal pure {\r\n        assembly {\r\n            mstore(ptr, value)\r\n        }\r\n    }\r\n\r\n    function memoryToBytes(uint ptr, uint length) internal pure returns (bytes memory res) {\r\n        if (length != 0) {\r\n            assembly {\r\n                // 0x40 is the address of free memory pointer.\r\n                res := mload(0x40)\r\n                let end := add(\r\n                    res,\r\n                    and(add(length, 63), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)\r\n                )\r\n                // end = res + 32 + 32 * ceil(length / 32).\r\n                mstore(0x40, end)\r\n                mstore(res, length)\r\n                let destPtr := add(res, 32)\r\n                // prettier-ignore\r\n                for { } 1 { } {\r\n                    mstore(destPtr, mload(ptr))\r\n                    destPtr := add(destPtr, 32)\r\n                    if eq(destPtr, end) {\r\n                        break\r\n                    }\r\n                    ptr := add(ptr, 32)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function keccak256Raw(uint ptr, uint length) internal pure returns (bytes32 res) {\r\n        assembly {\r\n            res := keccak256(ptr, length)\r\n        }\r\n    }\r\n\r\n    function sha256Raw(uint ptr, uint length) internal view returns (bytes32 res) {\r\n        assembly {\r\n            // 2 is the address of SHA256 precompiled contract.\r\n            // First 64 bytes of memory can be used as scratch space.\r\n            let ret := staticcall(gas(), 2, ptr, length, 0, 32)\r\n            // If the call to SHA256 precompile ran out of gas, burn any gas that remains.\r\n            // prettier-ignore\r\n            for { } iszero(ret) { } { }\r\n            res := mload(0)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Borsh.sol\r\n\r\npragma solidity ^0.6;\r\n\r\n\r\nlibrary Borsh {\r\n    using Borsh for Data;\r\n\r\n    struct Data {\r\n        uint ptr;\r\n        uint end;\r\n    }\r\n\r\n    function from(bytes memory data) internal pure returns (Data memory res) {\r\n        uint ptr;\r\n        assembly {\r\n            ptr := data\r\n        }\r\n        res.ptr = ptr + 32;\r\n        res.end = res.ptr + Utils.readMemory(ptr);\r\n    }\r\n\r\n    // This function assumes that length is reasonably small, so that data.ptr + length will not overflow. In the current code, length is always less than 2^32.\r\n    function requireSpace(Data memory data, uint length) internal pure {\r\n        require(data.ptr + length <= data.end, \"Parse error: unexpected EOI\");\r\n    }\r\n\r\n    function read(Data memory data, uint length) internal pure returns (bytes32 res) {\r\n        data.requireSpace(length);\r\n        res = bytes32(Utils.readMemory(data.ptr));\r\n        data.ptr += length;\r\n        return res;\r\n    }\r\n\r\n    function done(Data memory data) internal pure {\r\n        require(data.ptr == data.end, \"Parse error: EOI expected\");\r\n    }\r\n\r\n    // Same considerations as for requireSpace.\r\n    function peekKeccak256(Data memory data, uint length) internal pure returns (bytes32) {\r\n        data.requireSpace(length);\r\n        return Utils.keccak256Raw(data.ptr, length);\r\n    }\r\n\r\n    // Same considerations as for requireSpace.\r\n    function peekSha256(Data memory data, uint length) internal view returns (bytes32) {\r\n        data.requireSpace(length);\r\n        return Utils.sha256Raw(data.ptr, length);\r\n    }\r\n\r\n    function decodeU8(Data memory data) internal pure returns (uint8) {\r\n        return uint8(bytes1(data.read(1)));\r\n    }\r\n\r\n    function decodeU16(Data memory data) internal pure returns (uint16) {\r\n        return Utils.swapBytes2(uint16(bytes2(data.read(2))));\r\n    }\r\n\r\n    function decodeU32(Data memory data) internal pure returns (uint32) {\r\n        return Utils.swapBytes4(uint32(bytes4(data.read(4))));\r\n    }\r\n\r\n    function decodeU64(Data memory data) internal pure returns (uint64) {\r\n        return Utils.swapBytes8(uint64(bytes8(data.read(8))));\r\n    }\r\n\r\n    function decodeU128(Data memory data) internal pure returns (uint128) {\r\n        return Utils.swapBytes16(uint128(bytes16(data.read(16))));\r\n    }\r\n\r\n    function decodeU256(Data memory data) internal pure returns (uint256) {\r\n        return Utils.swapBytes32(uint256(data.read(32)));\r\n    }\r\n\r\n    function decodeBytes20(Data memory data) internal pure returns (bytes20) {\r\n        return bytes20(data.read(20));\r\n    }\r\n\r\n    function decodeBytes32(Data memory data) internal pure returns (bytes32) {\r\n        return data.read(32);\r\n    }\r\n\r\n    function decodeBool(Data memory data) internal pure returns (bool) {\r\n        uint8 res = data.decodeU8();\r\n        require(res <= 1, \"Parse error: invalid bool\");\r\n        return res != 0;\r\n    }\r\n\r\n    function skipBytes(Data memory data) internal pure {\r\n        uint length = data.decodeU32();\r\n        data.requireSpace(length);\r\n        data.ptr += length;\r\n    }\r\n\r\n    function decodeBytes(Data memory data) internal pure returns (bytes memory res) {\r\n        uint length = data.decodeU32();\r\n        data.requireSpace(length);\r\n        res = Utils.memoryToBytes(data.ptr, length);\r\n        data.ptr += length;\r\n    }\r\n}\r\n\r\n// File: contracts/NearDecoder.sol\r\n\r\npragma solidity ^0.6;\r\n\r\n\r\nlibrary NearDecoder {\r\n    using Borsh for Borsh.Data;\r\n    using NearDecoder for Borsh.Data;\r\n\r\n    struct PublicKey {\r\n        bytes32 k;\r\n    }\r\n\r\n    function decodePublicKey(Borsh.Data memory data) internal pure returns (PublicKey memory res) {\r\n        require(data.decodeU8() == 0, \"Parse error: invalid key type\");\r\n        res.k = data.decodeBytes32();\r\n    }\r\n\r\n    struct Signature {\r\n        bytes32 r;\r\n        bytes32 s;\r\n    }\r\n\r\n    function decodeSignature(Borsh.Data memory data) internal pure returns (Signature memory res) {\r\n        require(data.decodeU8() == 0, \"Parse error: invalid signature type\");\r\n        res.r = data.decodeBytes32();\r\n        res.s = data.decodeBytes32();\r\n    }\r\n\r\n    struct BlockProducer {\r\n        PublicKey publicKey;\r\n        uint128 stake;\r\n    }\r\n\r\n    function decodeBlockProducer(Borsh.Data memory data) internal pure returns (BlockProducer memory res) {\r\n        data.skipBytes();\r\n        res.publicKey = data.decodePublicKey();\r\n        res.stake = data.decodeU128();\r\n    }\r\n\r\n    function decodeBlockProducers(Borsh.Data memory data) internal pure returns (BlockProducer[] memory res) {\r\n        uint length = data.decodeU32();\r\n        res = new BlockProducer[](length);\r\n        for (uint i = 0; i < length; i++) {\r\n            res[i] = data.decodeBlockProducer();\r\n        }\r\n    }\r\n\r\n    struct OptionalBlockProducers {\r\n        bool some;\r\n        BlockProducer[] blockProducers;\r\n        bytes32 hash; // Additional computable element\r\n    }\r\n\r\n    function decodeOptionalBlockProducers(Borsh.Data memory data)\r\n        internal\r\n        view\r\n        returns (OptionalBlockProducers memory res)\r\n    {\r\n        res.some = data.decodeBool();\r\n        if (res.some) {\r\n            uint start = data.ptr;\r\n            res.blockProducers = data.decodeBlockProducers();\r\n            res.hash = Utils.sha256Raw(start, data.ptr - start);\r\n        }\r\n    }\r\n\r\n    struct OptionalSignature {\r\n        bool some;\r\n        Signature signature;\r\n    }\r\n\r\n    function decodeOptionalSignature(Borsh.Data memory data) internal pure returns (OptionalSignature memory res) {\r\n        res.some = data.decodeBool();\r\n        if (res.some) {\r\n            res.signature = data.decodeSignature();\r\n        }\r\n    }\r\n\r\n    struct BlockHeaderInnerLite {\r\n        uint64 height; // Height of this block since the genesis block (height 0).\r\n        bytes32 epoch_id; // Epoch start hash of this block's epoch. Used for retrieving validator information\r\n        bytes32 next_epoch_id;\r\n        bytes32 prev_state_root; // Root hash of the state at the previous block.\r\n        bytes32 outcome_root; // Root of the outcomes of transactions and receipts.\r\n        uint64 timestamp; // Timestamp at which the block was built.\r\n        bytes32 next_bp_hash; // Hash of the next epoch block producers set\r\n        bytes32 block_merkle_root;\r\n        bytes32 hash; // Additional computable element\r\n    }\r\n\r\n    function decodeBlockHeaderInnerLite(Borsh.Data memory data)\r\n        internal\r\n        view\r\n        returns (BlockHeaderInnerLite memory res)\r\n    {\r\n        res.hash = data.peekSha256(208);\r\n        res.height = data.decodeU64();\r\n        res.epoch_id = data.decodeBytes32();\r\n        res.next_epoch_id = data.decodeBytes32();\r\n        res.prev_state_root = data.decodeBytes32();\r\n        res.outcome_root = data.decodeBytes32();\r\n        res.timestamp = data.decodeU64();\r\n        res.next_bp_hash = data.decodeBytes32();\r\n        res.block_merkle_root = data.decodeBytes32();\r\n    }\r\n\r\n    struct LightClientBlock {\r\n        bytes32 prev_block_hash;\r\n        bytes32 next_block_inner_hash;\r\n        BlockHeaderInnerLite inner_lite;\r\n        bytes32 inner_rest_hash;\r\n        OptionalBlockProducers next_bps;\r\n        OptionalSignature[] approvals_after_next;\r\n        bytes32 hash;\r\n        bytes32 next_hash;\r\n    }\r\n\r\n    function decodeLightClientBlock(Borsh.Data memory data) internal view returns (LightClientBlock memory res) {\r\n        res.prev_block_hash = data.decodeBytes32();\r\n        res.next_block_inner_hash = data.decodeBytes32();\r\n        res.inner_lite = data.decodeBlockHeaderInnerLite();\r\n        res.inner_rest_hash = data.decodeBytes32();\r\n        res.next_bps = data.decodeOptionalBlockProducers();\r\n\r\n        uint length = data.decodeU32();\r\n        res.approvals_after_next = new OptionalSignature[](length);\r\n        for (uint i = 0; i < length; i++) {\r\n            res.approvals_after_next[i] = data.decodeOptionalSignature();\r\n        }\r\n\r\n        res.hash = sha256(\r\n            abi.encodePacked(sha256(abi.encodePacked(res.inner_lite.hash, res.inner_rest_hash)), res.prev_block_hash)\r\n        );\r\n\r\n        res.next_hash = sha256(abi.encodePacked(res.next_block_inner_hash, res.hash));\r\n    }\r\n}\r\n\r\n// File: contracts/Ed25519.sol\r\n\r\npragma solidity ^0.6;\r\n\r\ncontract Ed25519 {\r\n    // Computes (v^(2^250-1), v^11) mod p\r\n    function pow22501(uint256 v) private pure returns (uint256 p22501, uint256 p11) {\r\n        p11 = mulmod(v, v, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        p22501 = mulmod(p11, p11, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        p22501 = mulmod(\r\n            mulmod(p22501, p22501, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed),\r\n            v,\r\n            0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n        );\r\n        p11 = mulmod(p22501, p11, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        p22501 = mulmod(\r\n            mulmod(p11, p11, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed),\r\n            p22501,\r\n            0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n        );\r\n        uint256 a = mulmod(p22501, p22501, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        p22501 = mulmod(p22501, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(p22501, p22501, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(p22501, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        uint256 b = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        p22501 = mulmod(p22501, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(p22501, p22501, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(p22501, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        b = mulmod(b, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, b, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        a = mulmod(a, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        p22501 = mulmod(p22501, a, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n    }\r\n\r\n    function check(\r\n        bytes32 k,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        bytes32 m1,\r\n        bytes9 m2\r\n    ) public pure returns (bool) {\r\n        uint256 hh;\r\n        // Step 1: compute SHA-512(R, A, M)\r\n        {\r\n            uint256[5][16] memory kk =\r\n                [\r\n                    [\r\n                        uint256(0x428a2f98_d728ae22),\r\n                        uint256(0xe49b69c1_9ef14ad2),\r\n                        uint256(0x27b70a85_46d22ffc),\r\n                        uint256(0x19a4c116_b8d2d0c8),\r\n                        uint256(0xca273ece_ea26619c)\r\n                    ],\r\n                    [\r\n                        uint256(0x71374491_23ef65cd),\r\n                        uint256(0xefbe4786_384f25e3),\r\n                        uint256(0x2e1b2138_5c26c926),\r\n                        uint256(0x1e376c08_5141ab53),\r\n                        uint256(0xd186b8c7_21c0c207)\r\n                    ],\r\n                    [\r\n                        uint256(0xb5c0fbcf_ec4d3b2f),\r\n                        uint256(0xfc19dc6_8b8cd5b5),\r\n                        uint256(0x4d2c6dfc_5ac42aed),\r\n                        uint256(0x2748774c_df8eeb99),\r\n                        uint256(0xeada7dd6_cde0eb1e)\r\n                    ],\r\n                    [\r\n                        uint256(0xe9b5dba5_8189dbbc),\r\n                        uint256(0x240ca1cc_77ac9c65),\r\n                        uint256(0x53380d13_9d95b3df),\r\n                        uint256(0x34b0bcb5_e19b48a8),\r\n                        uint256(0xf57d4f7f_ee6ed178)\r\n                    ],\r\n                    [\r\n                        uint256(0x3956c25b_f348b538),\r\n                        uint256(0x2de92c6f_592b0275),\r\n                        uint256(0x650a7354_8baf63de),\r\n                        uint256(0x391c0cb3_c5c95a63),\r\n                        uint256(0x6f067aa_72176fba)\r\n                    ],\r\n                    [\r\n                        uint256(0x59f111f1_b605d019),\r\n                        uint256(0x4a7484aa_6ea6e483),\r\n                        uint256(0x766a0abb_3c77b2a8),\r\n                        uint256(0x4ed8aa4a_e3418acb),\r\n                        uint256(0xa637dc5_a2c898a6)\r\n                    ],\r\n                    [\r\n                        uint256(0x923f82a4_af194f9b),\r\n                        uint256(0x5cb0a9dc_bd41fbd4),\r\n                        uint256(0x81c2c92e_47edaee6),\r\n                        uint256(0x5b9cca4f_7763e373),\r\n                        uint256(0x113f9804_bef90dae)\r\n                    ],\r\n                    [\r\n                        uint256(0xab1c5ed5_da6d8118),\r\n                        uint256(0x76f988da_831153b5),\r\n                        uint256(0x92722c85_1482353b),\r\n                        uint256(0x682e6ff3_d6b2b8a3),\r\n                        uint256(0x1b710b35_131c471b)\r\n                    ],\r\n                    [\r\n                        uint256(0xd807aa98_a3030242),\r\n                        uint256(0x983e5152_ee66dfab),\r\n                        uint256(0xa2bfe8a1_4cf10364),\r\n                        uint256(0x748f82ee_5defb2fc),\r\n                        uint256(0x28db77f5_23047d84)\r\n                    ],\r\n                    [\r\n                        uint256(0x12835b01_45706fbe),\r\n                        uint256(0xa831c66d_2db43210),\r\n                        uint256(0xa81a664b_bc423001),\r\n                        uint256(0x78a5636f_43172f60),\r\n                        uint256(0x32caab7b_40c72493)\r\n                    ],\r\n                    [\r\n                        uint256(0x243185be_4ee4b28c),\r\n                        uint256(0xb00327c8_98fb213f),\r\n                        uint256(0xc24b8b70_d0f89791),\r\n                        uint256(0x84c87814_a1f0ab72),\r\n                        uint256(0x3c9ebe0a_15c9bebc)\r\n                    ],\r\n                    [\r\n                        uint256(0x550c7dc3_d5ffb4e2),\r\n                        uint256(0xbf597fc7_beef0ee4),\r\n                        uint256(0xc76c51a3_0654be30),\r\n                        uint256(0x8cc70208_1a6439ec),\r\n                        uint256(0x431d67c4_9c100d4c)\r\n                    ],\r\n                    [\r\n                        uint256(0x72be5d74_f27b896f),\r\n                        uint256(0xc6e00bf3_3da88fc2),\r\n                        uint256(0xd192e819_d6ef5218),\r\n                        uint256(0x90befffa_23631e28),\r\n                        uint256(0x4cc5d4be_cb3e42b6)\r\n                    ],\r\n                    [\r\n                        uint256(0x80deb1fe_3b1696b1),\r\n                        uint256(0xd5a79147_930aa725),\r\n                        uint256(0xd6990624_5565a910),\r\n                        uint256(0xa4506ceb_de82bde9),\r\n                        uint256(0x597f299c_fc657e2a)\r\n                    ],\r\n                    [\r\n                        uint256(0x9bdc06a7_25c71235),\r\n                        uint256(0x6ca6351_e003826f),\r\n                        uint256(0xf40e3585_5771202a),\r\n                        uint256(0xbef9a3f7_b2c67915),\r\n                        uint256(0x5fcb6fab_3ad6faec)\r\n                    ],\r\n                    [\r\n                        uint256(0xc19bf174_cf692694),\r\n                        uint256(0x14292967_0a0e6e70),\r\n                        uint256(0x106aa070_32bbd1b8),\r\n                        uint256(0xc67178f2_e372532b),\r\n                        uint256(0x6c44198c_4a475817)\r\n                    ]\r\n                ];\r\n            uint256 w0 =\r\n                (uint256(r) & 0xffffffff_ffffffff_00000000_00000000_00000000_00000000_ffffffff_ffffffff) |\r\n                    ((uint256(r) & 0xffffffff_ffffffff_00000000_00000000_00000000_00000000) >> 64) |\r\n                    ((uint256(r) & 0xffffffff_ffffffff_00000000_00000000) << 64);\r\n            uint256 w1 =\r\n                (uint256(k) & 0xffffffff_ffffffff_00000000_00000000_00000000_00000000_ffffffff_ffffffff) |\r\n                    ((uint256(k) & 0xffffffff_ffffffff_00000000_00000000_00000000_00000000) >> 64) |\r\n                    ((uint256(k) & 0xffffffff_ffffffff_00000000_00000000) << 64);\r\n            uint256 w2 =\r\n                (uint256(m1) & 0xffffffff_ffffffff_00000000_00000000_00000000_00000000_ffffffff_ffffffff) |\r\n                    ((uint256(m1) & 0xffffffff_ffffffff_00000000_00000000_00000000_00000000) >> 64) |\r\n                    ((uint256(m1) & 0xffffffff_ffffffff_00000000_00000000) << 64);\r\n            uint256 w3 =\r\n                (uint256(bytes32(m2)) & 0xffffffff_ffffffff_00000000_00000000_00000000_00000000_00000000_00000000) |\r\n                    ((uint256(bytes32(m2)) & 0xffffffff_ffffffff_00000000_00000000_00000000_00000000) >> 64) |\r\n                    0x800000_00000000_00000000_00000348;\r\n            uint256 a = 0x6a09e667_f3bcc908;\r\n            uint256 b = 0xbb67ae85_84caa73b;\r\n            uint256 c = 0x3c6ef372_fe94f82b;\r\n            uint256 d = 0xa54ff53a_5f1d36f1;\r\n            uint256 e = 0x510e527f_ade682d1;\r\n            uint256 f = 0x9b05688c_2b3e6c1f;\r\n            uint256 g = 0x1f83d9ab_fb41bd6b;\r\n            uint256 h = 0x5be0cd19_137e2179;\r\n            for (uint256 i = 0; ; i++) {\r\n                // Round 16 * i\r\n                {\r\n                    uint256 temp1;\r\n                    uint256 temp2;\r\n                    e &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = e | (e << 64);\r\n                        uint256 s1 = (ss >> 14) ^ (ss >> 18) ^ (ss >> 41);\r\n                        uint256 ch = (e & (f ^ g)) ^ g;\r\n                        temp1 = h + s1 + ch;\r\n                    }\r\n                    temp1 += kk[0][i];\r\n                    temp1 += w0 >> 192;\r\n                    a &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = a | (a << 64);\r\n                        uint256 s0 = (ss >> 28) ^ (ss >> 34) ^ (ss >> 39);\r\n                        uint256 maj = (a & (b | c)) | (b & c);\r\n                        temp2 = s0 + maj;\r\n                    }\r\n                    h = g;\r\n                    g = f;\r\n                    f = e;\r\n                    e = d + temp1;\r\n                    d = c;\r\n                    c = b;\r\n                    b = a;\r\n                    a = temp1 + temp2;\r\n                }\r\n                // Round 16 * i + 1\r\n                {\r\n                    uint256 temp1;\r\n                    uint256 temp2;\r\n                    e &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = e | (e << 64);\r\n                        uint256 s1 = (ss >> 14) ^ (ss >> 18) ^ (ss >> 41);\r\n                        uint256 ch = (e & (f ^ g)) ^ g;\r\n                        temp1 = h + s1 + ch;\r\n                    }\r\n                    temp1 += kk[1][i];\r\n                    temp1 += w0 >> 64;\r\n                    a &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = a | (a << 64);\r\n                        uint256 s0 = (ss >> 28) ^ (ss >> 34) ^ (ss >> 39);\r\n                        uint256 maj = (a & (b | c)) | (b & c);\r\n                        temp2 = s0 + maj;\r\n                    }\r\n                    h = g;\r\n                    g = f;\r\n                    f = e;\r\n                    e = d + temp1;\r\n                    d = c;\r\n                    c = b;\r\n                    b = a;\r\n                    a = temp1 + temp2;\r\n                }\r\n                // Round 16 * i + 2\r\n                {\r\n                    uint256 temp1;\r\n                    uint256 temp2;\r\n                    e &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = e | (e << 64);\r\n                        uint256 s1 = (ss >> 14) ^ (ss >> 18) ^ (ss >> 41);\r\n                        uint256 ch = (e & (f ^ g)) ^ g;\r\n                        temp1 = h + s1 + ch;\r\n                    }\r\n                    temp1 += kk[2][i];\r\n                    temp1 += w0 >> 128;\r\n                    a &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = a | (a << 64);\r\n                        uint256 s0 = (ss >> 28) ^ (ss >> 34) ^ (ss >> 39);\r\n                        uint256 maj = (a & (b | c)) | (b & c);\r\n                        temp2 = s0 + maj;\r\n                    }\r\n                    h = g;\r\n                    g = f;\r\n                    f = e;\r\n                    e = d + temp1;\r\n                    d = c;\r\n                    c = b;\r\n                    b = a;\r\n                    a = temp1 + temp2;\r\n                }\r\n                // Round 16 * i + 3\r\n                {\r\n                    uint256 temp1;\r\n                    uint256 temp2;\r\n                    e &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = e | (e << 64);\r\n                        uint256 s1 = (ss >> 14) ^ (ss >> 18) ^ (ss >> 41);\r\n                        uint256 ch = (e & (f ^ g)) ^ g;\r\n                        temp1 = h + s1 + ch;\r\n                    }\r\n                    temp1 += kk[3][i];\r\n                    temp1 += w0;\r\n                    a &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = a | (a << 64);\r\n                        uint256 s0 = (ss >> 28) ^ (ss >> 34) ^ (ss >> 39);\r\n                        uint256 maj = (a & (b | c)) | (b & c);\r\n                        temp2 = s0 + maj;\r\n                    }\r\n                    h = g;\r\n                    g = f;\r\n                    f = e;\r\n                    e = d + temp1;\r\n                    d = c;\r\n                    c = b;\r\n                    b = a;\r\n                    a = temp1 + temp2;\r\n                }\r\n                // Round 16 * i + 4\r\n                {\r\n                    uint256 temp1;\r\n                    uint256 temp2;\r\n                    e &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = e | (e << 64);\r\n                        uint256 s1 = (ss >> 14) ^ (ss >> 18) ^ (ss >> 41);\r\n                        uint256 ch = (e & (f ^ g)) ^ g;\r\n                        temp1 = h + s1 + ch;\r\n                    }\r\n                    temp1 += kk[4][i];\r\n                    temp1 += w1 >> 192;\r\n                    a &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = a | (a << 64);\r\n                        uint256 s0 = (ss >> 28) ^ (ss >> 34) ^ (ss >> 39);\r\n                        uint256 maj = (a & (b | c)) | (b & c);\r\n                        temp2 = s0 + maj;\r\n                    }\r\n                    h = g;\r\n                    g = f;\r\n                    f = e;\r\n                    e = d + temp1;\r\n                    d = c;\r\n                    c = b;\r\n                    b = a;\r\n                    a = temp1 + temp2;\r\n                }\r\n                // Round 16 * i + 5\r\n                {\r\n                    uint256 temp1;\r\n                    uint256 temp2;\r\n                    e &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = e | (e << 64);\r\n                        uint256 s1 = (ss >> 14) ^ (ss >> 18) ^ (ss >> 41);\r\n                        uint256 ch = (e & (f ^ g)) ^ g;\r\n                        temp1 = h + s1 + ch;\r\n                    }\r\n                    temp1 += kk[5][i];\r\n                    temp1 += w1 >> 64;\r\n                    a &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = a | (a << 64);\r\n                        uint256 s0 = (ss >> 28) ^ (ss >> 34) ^ (ss >> 39);\r\n                        uint256 maj = (a & (b | c)) | (b & c);\r\n                        temp2 = s0 + maj;\r\n                    }\r\n                    h = g;\r\n                    g = f;\r\n                    f = e;\r\n                    e = d + temp1;\r\n                    d = c;\r\n                    c = b;\r\n                    b = a;\r\n                    a = temp1 + temp2;\r\n                }\r\n                // Round 16 * i + 6\r\n                {\r\n                    uint256 temp1;\r\n                    uint256 temp2;\r\n                    e &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = e | (e << 64);\r\n                        uint256 s1 = (ss >> 14) ^ (ss >> 18) ^ (ss >> 41);\r\n                        uint256 ch = (e & (f ^ g)) ^ g;\r\n                        temp1 = h + s1 + ch;\r\n                    }\r\n                    temp1 += kk[6][i];\r\n                    temp1 += w1 >> 128;\r\n                    a &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = a | (a << 64);\r\n                        uint256 s0 = (ss >> 28) ^ (ss >> 34) ^ (ss >> 39);\r\n                        uint256 maj = (a & (b | c)) | (b & c);\r\n                        temp2 = s0 + maj;\r\n                    }\r\n                    h = g;\r\n                    g = f;\r\n                    f = e;\r\n                    e = d + temp1;\r\n                    d = c;\r\n                    c = b;\r\n                    b = a;\r\n                    a = temp1 + temp2;\r\n                }\r\n                // Round 16 * i + 7\r\n                {\r\n                    uint256 temp1;\r\n                    uint256 temp2;\r\n                    e &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = e | (e << 64);\r\n                        uint256 s1 = (ss >> 14) ^ (ss >> 18) ^ (ss >> 41);\r\n                        uint256 ch = (e & (f ^ g)) ^ g;\r\n                        temp1 = h + s1 + ch;\r\n                    }\r\n                    temp1 += kk[7][i];\r\n                    temp1 += w1;\r\n                    a &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = a | (a << 64);\r\n                        uint256 s0 = (ss >> 28) ^ (ss >> 34) ^ (ss >> 39);\r\n                        uint256 maj = (a & (b | c)) | (b & c);\r\n                        temp2 = s0 + maj;\r\n                    }\r\n                    h = g;\r\n                    g = f;\r\n                    f = e;\r\n                    e = d + temp1;\r\n                    d = c;\r\n                    c = b;\r\n                    b = a;\r\n                    a = temp1 + temp2;\r\n                }\r\n                // Round 16 * i + 8\r\n                {\r\n                    uint256 temp1;\r\n                    uint256 temp2;\r\n                    e &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = e | (e << 64);\r\n                        uint256 s1 = (ss >> 14) ^ (ss >> 18) ^ (ss >> 41);\r\n                        uint256 ch = (e & (f ^ g)) ^ g;\r\n                        temp1 = h + s1 + ch;\r\n                    }\r\n                    temp1 += kk[8][i];\r\n                    temp1 += w2 >> 192;\r\n                    a &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = a | (a << 64);\r\n                        uint256 s0 = (ss >> 28) ^ (ss >> 34) ^ (ss >> 39);\r\n                        uint256 maj = (a & (b | c)) | (b & c);\r\n                        temp2 = s0 + maj;\r\n                    }\r\n                    h = g;\r\n                    g = f;\r\n                    f = e;\r\n                    e = d + temp1;\r\n                    d = c;\r\n                    c = b;\r\n                    b = a;\r\n                    a = temp1 + temp2;\r\n                }\r\n                // Round 16 * i + 9\r\n                {\r\n                    uint256 temp1;\r\n                    uint256 temp2;\r\n                    e &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = e | (e << 64);\r\n                        uint256 s1 = (ss >> 14) ^ (ss >> 18) ^ (ss >> 41);\r\n                        uint256 ch = (e & (f ^ g)) ^ g;\r\n                        temp1 = h + s1 + ch;\r\n                    }\r\n                    temp1 += kk[9][i];\r\n                    temp1 += w2 >> 64;\r\n                    a &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = a | (a << 64);\r\n                        uint256 s0 = (ss >> 28) ^ (ss >> 34) ^ (ss >> 39);\r\n                        uint256 maj = (a & (b | c)) | (b & c);\r\n                        temp2 = s0 + maj;\r\n                    }\r\n                    h = g;\r\n                    g = f;\r\n                    f = e;\r\n                    e = d + temp1;\r\n                    d = c;\r\n                    c = b;\r\n                    b = a;\r\n                    a = temp1 + temp2;\r\n                }\r\n                // Round 16 * i + 10\r\n                {\r\n                    uint256 temp1;\r\n                    uint256 temp2;\r\n                    e &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = e | (e << 64);\r\n                        uint256 s1 = (ss >> 14) ^ (ss >> 18) ^ (ss >> 41);\r\n                        uint256 ch = (e & (f ^ g)) ^ g;\r\n                        temp1 = h + s1 + ch;\r\n                    }\r\n                    temp1 += kk[10][i];\r\n                    temp1 += w2 >> 128;\r\n                    a &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = a | (a << 64);\r\n                        uint256 s0 = (ss >> 28) ^ (ss >> 34) ^ (ss >> 39);\r\n                        uint256 maj = (a & (b | c)) | (b & c);\r\n                        temp2 = s0 + maj;\r\n                    }\r\n                    h = g;\r\n                    g = f;\r\n                    f = e;\r\n                    e = d + temp1;\r\n                    d = c;\r\n                    c = b;\r\n                    b = a;\r\n                    a = temp1 + temp2;\r\n                }\r\n                // Round 16 * i + 11\r\n                {\r\n                    uint256 temp1;\r\n                    uint256 temp2;\r\n                    e &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = e | (e << 64);\r\n                        uint256 s1 = (ss >> 14) ^ (ss >> 18) ^ (ss >> 41);\r\n                        uint256 ch = (e & (f ^ g)) ^ g;\r\n                        temp1 = h + s1 + ch;\r\n                    }\r\n                    temp1 += kk[11][i];\r\n                    temp1 += w2;\r\n                    a &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = a | (a << 64);\r\n                        uint256 s0 = (ss >> 28) ^ (ss >> 34) ^ (ss >> 39);\r\n                        uint256 maj = (a & (b | c)) | (b & c);\r\n                        temp2 = s0 + maj;\r\n                    }\r\n                    h = g;\r\n                    g = f;\r\n                    f = e;\r\n                    e = d + temp1;\r\n                    d = c;\r\n                    c = b;\r\n                    b = a;\r\n                    a = temp1 + temp2;\r\n                }\r\n                // Round 16 * i + 12\r\n                {\r\n                    uint256 temp1;\r\n                    uint256 temp2;\r\n                    e &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = e | (e << 64);\r\n                        uint256 s1 = (ss >> 14) ^ (ss >> 18) ^ (ss >> 41);\r\n                        uint256 ch = (e & (f ^ g)) ^ g;\r\n                        temp1 = h + s1 + ch;\r\n                    }\r\n                    temp1 += kk[12][i];\r\n                    temp1 += w3 >> 192;\r\n                    a &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = a | (a << 64);\r\n                        uint256 s0 = (ss >> 28) ^ (ss >> 34) ^ (ss >> 39);\r\n                        uint256 maj = (a & (b | c)) | (b & c);\r\n                        temp2 = s0 + maj;\r\n                    }\r\n                    h = g;\r\n                    g = f;\r\n                    f = e;\r\n                    e = d + temp1;\r\n                    d = c;\r\n                    c = b;\r\n                    b = a;\r\n                    a = temp1 + temp2;\r\n                }\r\n                // Round 16 * i + 13\r\n                {\r\n                    uint256 temp1;\r\n                    uint256 temp2;\r\n                    e &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = e | (e << 64);\r\n                        uint256 s1 = (ss >> 14) ^ (ss >> 18) ^ (ss >> 41);\r\n                        uint256 ch = (e & (f ^ g)) ^ g;\r\n                        temp1 = h + s1 + ch;\r\n                    }\r\n                    temp1 += kk[13][i];\r\n                    temp1 += w3 >> 64;\r\n                    a &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = a | (a << 64);\r\n                        uint256 s0 = (ss >> 28) ^ (ss >> 34) ^ (ss >> 39);\r\n                        uint256 maj = (a & (b | c)) | (b & c);\r\n                        temp2 = s0 + maj;\r\n                    }\r\n                    h = g;\r\n                    g = f;\r\n                    f = e;\r\n                    e = d + temp1;\r\n                    d = c;\r\n                    c = b;\r\n                    b = a;\r\n                    a = temp1 + temp2;\r\n                }\r\n                // Round 16 * i + 14\r\n                {\r\n                    uint256 temp1;\r\n                    uint256 temp2;\r\n                    e &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = e | (e << 64);\r\n                        uint256 s1 = (ss >> 14) ^ (ss >> 18) ^ (ss >> 41);\r\n                        uint256 ch = (e & (f ^ g)) ^ g;\r\n                        temp1 = h + s1 + ch;\r\n                    }\r\n                    temp1 += kk[14][i];\r\n                    temp1 += w3 >> 128;\r\n                    a &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = a | (a << 64);\r\n                        uint256 s0 = (ss >> 28) ^ (ss >> 34) ^ (ss >> 39);\r\n                        uint256 maj = (a & (b | c)) | (b & c);\r\n                        temp2 = s0 + maj;\r\n                    }\r\n                    h = g;\r\n                    g = f;\r\n                    f = e;\r\n                    e = d + temp1;\r\n                    d = c;\r\n                    c = b;\r\n                    b = a;\r\n                    a = temp1 + temp2;\r\n                }\r\n                // Round 16 * i + 15\r\n                {\r\n                    uint256 temp1;\r\n                    uint256 temp2;\r\n                    e &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = e | (e << 64);\r\n                        uint256 s1 = (ss >> 14) ^ (ss >> 18) ^ (ss >> 41);\r\n                        uint256 ch = (e & (f ^ g)) ^ g;\r\n                        temp1 = h + s1 + ch;\r\n                    }\r\n                    temp1 += kk[15][i];\r\n                    temp1 += w3;\r\n                    a &= 0xffffffff_ffffffff;\r\n                    {\r\n                        uint256 ss = a | (a << 64);\r\n                        uint256 s0 = (ss >> 28) ^ (ss >> 34) ^ (ss >> 39);\r\n                        uint256 maj = (a & (b | c)) | (b & c);\r\n                        temp2 = s0 + maj;\r\n                    }\r\n                    h = g;\r\n                    g = f;\r\n                    f = e;\r\n                    e = d + temp1;\r\n                    d = c;\r\n                    c = b;\r\n                    b = a;\r\n                    a = temp1 + temp2;\r\n                }\r\n                if (i == 4) {\r\n                    break;\r\n                }\r\n                // Message expansion\r\n                uint256 t0 = w0;\r\n                uint256 t1 = w1;\r\n                {\r\n                    uint256 t2 = w2;\r\n                    uint256 t3 = w3;\r\n                    {\r\n                        uint256 n1 = t0 & 0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff_00000000_00000000;\r\n                        n1 +=\r\n                            ((t2 & 0xffffffff_ffffffff_00000000_00000000) << 128) |\r\n                            ((t2 & 0xffffffff_ffffffff_00000000_00000000_00000000_00000000) >> 64);\r\n                        {\r\n                            uint256 u1 =\r\n                                ((t0 & 0xffffffff_ffffffff_00000000_00000000) << 64) |\r\n                                    ((t0 & 0xffffffff_ffffffff_00000000_00000000_00000000_00000000) >> 128);\r\n                            uint256 uu1 = u1 | (u1 << 64);\r\n                            n1 +=\r\n                                ((uu1 << 63) ^ (uu1 << 56) ^ (u1 << 57)) &\r\n                                0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff_00000000_00000000;\r\n                        }\r\n                        {\r\n                            uint256 v1 = t3 & 0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff;\r\n                            uint256 vv1 = v1 | (v1 << 64);\r\n                            n1 +=\r\n                                ((vv1 << 45) ^ (vv1 << 3) ^ (v1 << 58)) &\r\n                                0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff_00000000_00000000;\r\n                        }\r\n                        n1 &= 0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff_00000000_00000000;\r\n                        uint256 n2 = t0 & 0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff;\r\n                        n2 += ((t2 & 0xffffffff_ffffffff) << 128) | (t3 >> 192);\r\n                        {\r\n                            uint256 u2 = ((t0 & 0xffffffff_ffffffff) << 128) | (t1 >> 192);\r\n                            uint256 uu2 = u2 | (u2 << 64);\r\n                            n2 +=\r\n                                ((uu2 >> 1) ^ (uu2 >> 8) ^ (u2 >> 7)) &\r\n                                0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff;\r\n                        }\r\n                        {\r\n                            uint256 vv2 = n1 | (n1 >> 64);\r\n                            n2 +=\r\n                                ((vv2 >> 19) ^ (vv2 >> 61) ^ (n1 >> 70)) &\r\n                                0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff;\r\n                        }\r\n                        n2 &= 0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff;\r\n                        t0 = n1 | n2;\r\n                    }\r\n                    {\r\n                        uint256 n1 = t1 & 0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff_00000000_00000000;\r\n                        n1 +=\r\n                            ((t3 & 0xffffffff_ffffffff_00000000_00000000) << 128) |\r\n                            ((t3 & 0xffffffff_ffffffff_00000000_00000000_00000000_00000000) >> 64);\r\n                        {\r\n                            uint256 u1 =\r\n                                ((t1 & 0xffffffff_ffffffff_00000000_00000000) << 64) |\r\n                                    ((t1 & 0xffffffff_ffffffff_00000000_00000000_00000000_00000000) >> 128);\r\n                            uint256 uu1 = u1 | (u1 << 64);\r\n                            n1 +=\r\n                                ((uu1 << 63) ^ (uu1 << 56) ^ (u1 << 57)) &\r\n                                0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff_00000000_00000000;\r\n                        }\r\n                        {\r\n                            uint256 v1 = t0 & 0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff;\r\n                            uint256 vv1 = v1 | (v1 << 64);\r\n                            n1 +=\r\n                                ((vv1 << 45) ^ (vv1 << 3) ^ (v1 << 58)) &\r\n                                0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff_00000000_00000000;\r\n                        }\r\n                        n1 &= 0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff_00000000_00000000;\r\n                        uint256 n2 = t1 & 0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff;\r\n                        n2 += ((t3 & 0xffffffff_ffffffff) << 128) | (t0 >> 192);\r\n                        {\r\n                            uint256 u2 = ((t1 & 0xffffffff_ffffffff) << 128) | (t2 >> 192);\r\n                            uint256 uu2 = u2 | (u2 << 64);\r\n                            n2 +=\r\n                                ((uu2 >> 1) ^ (uu2 >> 8) ^ (u2 >> 7)) &\r\n                                0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff;\r\n                        }\r\n                        {\r\n                            uint256 vv2 = n1 | (n1 >> 64);\r\n                            n2 +=\r\n                                ((vv2 >> 19) ^ (vv2 >> 61) ^ (n1 >> 70)) &\r\n                                0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff;\r\n                        }\r\n                        n2 &= 0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff;\r\n                        t1 = n1 | n2;\r\n                    }\r\n                    {\r\n                        uint256 n1 = t2 & 0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff_00000000_00000000;\r\n                        n1 +=\r\n                            ((t0 & 0xffffffff_ffffffff_00000000_00000000) << 128) |\r\n                            ((t0 & 0xffffffff_ffffffff_00000000_00000000_00000000_00000000) >> 64);\r\n                        {\r\n                            uint256 u1 =\r\n                                ((t2 & 0xffffffff_ffffffff_00000000_00000000) << 64) |\r\n                                    ((t2 & 0xffffffff_ffffffff_00000000_00000000_00000000_00000000) >> 128);\r\n                            uint256 uu1 = u1 | (u1 << 64);\r\n                            n1 +=\r\n                                ((uu1 << 63) ^ (uu1 << 56) ^ (u1 << 57)) &\r\n                                0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff_00000000_00000000;\r\n                        }\r\n                        {\r\n                            uint256 v1 = t1 & 0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff;\r\n                            uint256 vv1 = v1 | (v1 << 64);\r\n                            n1 +=\r\n                                ((vv1 << 45) ^ (vv1 << 3) ^ (v1 << 58)) &\r\n                                0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff_00000000_00000000;\r\n                        }\r\n                        n1 &= 0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff_00000000_00000000;\r\n                        uint256 n2 = t2 & 0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff;\r\n                        n2 += ((t0 & 0xffffffff_ffffffff) << 128) | (t1 >> 192);\r\n                        {\r\n                            uint256 u2 = ((t2 & 0xffffffff_ffffffff) << 128) | (t3 >> 192);\r\n                            uint256 uu2 = u2 | (u2 << 64);\r\n                            n2 +=\r\n                                ((uu2 >> 1) ^ (uu2 >> 8) ^ (u2 >> 7)) &\r\n                                0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff;\r\n                        }\r\n                        {\r\n                            uint256 vv2 = n1 | (n1 >> 64);\r\n                            n2 +=\r\n                                ((vv2 >> 19) ^ (vv2 >> 61) ^ (n1 >> 70)) &\r\n                                0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff;\r\n                        }\r\n                        n2 &= 0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff;\r\n                        t2 = n1 | n2;\r\n                    }\r\n                    {\r\n                        uint256 n1 = t3 & 0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff_00000000_00000000;\r\n                        n1 +=\r\n                            ((t1 & 0xffffffff_ffffffff_00000000_00000000) << 128) |\r\n                            ((t1 & 0xffffffff_ffffffff_00000000_00000000_00000000_00000000) >> 64);\r\n                        {\r\n                            uint256 u1 =\r\n                                ((t3 & 0xffffffff_ffffffff_00000000_00000000) << 64) |\r\n                                    ((t3 & 0xffffffff_ffffffff_00000000_00000000_00000000_00000000) >> 128);\r\n                            uint256 uu1 = u1 | (u1 << 64);\r\n                            n1 +=\r\n                                ((uu1 << 63) ^ (uu1 << 56) ^ (u1 << 57)) &\r\n                                0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff_00000000_00000000;\r\n                        }\r\n                        {\r\n                            uint256 v1 = t2 & 0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff;\r\n                            uint256 vv1 = v1 | (v1 << 64);\r\n                            n1 +=\r\n                                ((vv1 << 45) ^ (vv1 << 3) ^ (v1 << 58)) &\r\n                                0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff_00000000_00000000;\r\n                        }\r\n                        n1 &= 0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff_00000000_00000000;\r\n                        uint256 n2 = t3 & 0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff;\r\n                        n2 += ((t1 & 0xffffffff_ffffffff) << 128) | (t2 >> 192);\r\n                        {\r\n                            uint256 u2 = ((t3 & 0xffffffff_ffffffff) << 128) | (t0 >> 192);\r\n                            uint256 uu2 = u2 | (u2 << 64);\r\n                            n2 +=\r\n                                ((uu2 >> 1) ^ (uu2 >> 8) ^ (u2 >> 7)) &\r\n                                0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff;\r\n                        }\r\n                        {\r\n                            uint256 vv2 = n1 | (n1 >> 64);\r\n                            n2 +=\r\n                                ((vv2 >> 19) ^ (vv2 >> 61) ^ (n1 >> 70)) &\r\n                                0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff;\r\n                        }\r\n                        n2 &= 0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff;\r\n                        t3 = n1 | n2;\r\n                    }\r\n                    w3 = t3;\r\n                    w2 = t2;\r\n                }\r\n                w1 = t1;\r\n                w0 = t0;\r\n            }\r\n            uint256 h0 =\r\n                ((a + 0x6a09e667_f3bcc908) & 0xffffffff_ffffffff) |\r\n                    (((b + 0xbb67ae85_84caa73b) & 0xffffffff_ffffffff) << 64) |\r\n                    (((c + 0x3c6ef372_fe94f82b) & 0xffffffff_ffffffff) << 128) |\r\n                    ((d + 0xa54ff53a_5f1d36f1) << 192);\r\n            h0 =\r\n                ((h0 & 0xff00ff_00ff00ff_00ff00ff_00ff00ff_00ff00ff_00ff00ff_00ff00ff_00ff00ff) << 8) |\r\n                ((h0 & 0xff00ff00_ff00ff00_ff00ff00_ff00ff00_ff00ff00_ff00ff00_ff00ff00_ff00ff00) >> 8);\r\n            h0 =\r\n                ((h0 & 0xffff_0000ffff_0000ffff_0000ffff_0000ffff_0000ffff_0000ffff_0000ffff) << 16) |\r\n                ((h0 & 0xffff0000_ffff0000_ffff0000_ffff0000_ffff0000_ffff0000_ffff0000_ffff0000) >> 16);\r\n            h0 =\r\n                ((h0 & 0xffffffff_00000000_ffffffff_00000000_ffffffff_00000000_ffffffff) << 32) |\r\n                ((h0 & 0xffffffff_00000000_ffffffff_00000000_ffffffff_00000000_ffffffff_00000000) >> 32);\r\n            uint256 h1 =\r\n                ((e + 0x510e527f_ade682d1) & 0xffffffff_ffffffff) |\r\n                    (((f + 0x9b05688c_2b3e6c1f) & 0xffffffff_ffffffff) << 64) |\r\n                    (((g + 0x1f83d9ab_fb41bd6b) & 0xffffffff_ffffffff) << 128) |\r\n                    ((h + 0x5be0cd19_137e2179) << 192);\r\n            h1 =\r\n                ((h1 & 0xff00ff_00ff00ff_00ff00ff_00ff00ff_00ff00ff_00ff00ff_00ff00ff_00ff00ff) << 8) |\r\n                ((h1 & 0xff00ff00_ff00ff00_ff00ff00_ff00ff00_ff00ff00_ff00ff00_ff00ff00_ff00ff00) >> 8);\r\n            h1 =\r\n                ((h1 & 0xffff_0000ffff_0000ffff_0000ffff_0000ffff_0000ffff_0000ffff_0000ffff) << 16) |\r\n                ((h1 & 0xffff0000_ffff0000_ffff0000_ffff0000_ffff0000_ffff0000_ffff0000_ffff0000) >> 16);\r\n            h1 =\r\n                ((h1 & 0xffffffff_00000000_ffffffff_00000000_ffffffff_00000000_ffffffff) << 32) |\r\n                ((h1 & 0xffffffff_00000000_ffffffff_00000000_ffffffff_00000000_ffffffff_00000000) >> 32);\r\n            hh = addmod(\r\n                h0,\r\n                mulmod(\r\n                    h1,\r\n                    0xfffffff_ffffffff_ffffffff_fffffffe_c6ef5bf4_737dcf70_d6ec3174_8d98951d,\r\n                    0x10000000_00000000_00000000_00000000_14def9de_a2f79cd6_5812631a_5cf5d3ed\r\n                ),\r\n                0x10000000_00000000_00000000_00000000_14def9de_a2f79cd6_5812631a_5cf5d3ed\r\n            );\r\n        }\r\n        // Step 2: unpack k\r\n        k = bytes32(\r\n            ((uint256(k) & 0xff00ff_00ff00ff_00ff00ff_00ff00ff_00ff00ff_00ff00ff_00ff00ff_00ff00ff) << 8) |\r\n                ((uint256(k) & 0xff00ff00_ff00ff00_ff00ff00_ff00ff00_ff00ff00_ff00ff00_ff00ff00_ff00ff00) >> 8)\r\n        );\r\n        k = bytes32(\r\n            ((uint256(k) & 0xffff_0000ffff_0000ffff_0000ffff_0000ffff_0000ffff_0000ffff_0000ffff) << 16) |\r\n                ((uint256(k) & 0xffff0000_ffff0000_ffff0000_ffff0000_ffff0000_ffff0000_ffff0000_ffff0000) >> 16)\r\n        );\r\n        k = bytes32(\r\n            ((uint256(k) & 0xffffffff_00000000_ffffffff_00000000_ffffffff_00000000_ffffffff) << 32) |\r\n                ((uint256(k) & 0xffffffff_00000000_ffffffff_00000000_ffffffff_00000000_ffffffff_00000000) >> 32)\r\n        );\r\n        k = bytes32(\r\n            ((uint256(k) & 0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff) << 64) |\r\n                ((uint256(k) & 0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff_00000000_00000000) >> 64)\r\n        );\r\n        k = bytes32((uint256(k) << 128) | (uint256(k) >> 128));\r\n        uint256 ky = uint256(k) & 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff;\r\n        uint256 kx;\r\n        {\r\n            uint256 ky2 = mulmod(ky, ky, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n            uint256 u =\r\n                addmod(\r\n                    ky2,\r\n                    0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffec,\r\n                    0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                );\r\n            uint256 v =\r\n                mulmod(\r\n                    ky2,\r\n                    0x52036cee_2b6ffe73_8cc74079_7779e898_00700a4d_4141d8ab_75eb4dca_135978a3,\r\n                    0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                ) + 1;\r\n            uint256 t = mulmod(u, v, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n            (kx, ) = pow22501(t);\r\n            kx = mulmod(kx, kx, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n            kx = mulmod(\r\n                u,\r\n                mulmod(\r\n                    mulmod(kx, kx, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed),\r\n                    t,\r\n                    0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                ),\r\n                0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n            );\r\n            t = mulmod(\r\n                mulmod(kx, kx, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed),\r\n                v,\r\n                0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n            );\r\n            if (t != u) {\r\n                if (t != 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed - u) {\r\n                    return false;\r\n                }\r\n                kx = mulmod(\r\n                    kx,\r\n                    0x2b832480_4fc1df0b_2b4d0099_3dfbd7a7_2f431806_ad2fe478_c4ee1b27_4a0ea0b0,\r\n                    0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                );\r\n            }\r\n        }\r\n        if ((kx & 1) != uint256(k) >> 255) {\r\n            kx = 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed - kx;\r\n        }\r\n        // Verify s\r\n        s = bytes32(\r\n            ((uint256(s) & 0xff00ff_00ff00ff_00ff00ff_00ff00ff_00ff00ff_00ff00ff_00ff00ff_00ff00ff) << 8) |\r\n                ((uint256(s) & 0xff00ff00_ff00ff00_ff00ff00_ff00ff00_ff00ff00_ff00ff00_ff00ff00_ff00ff00) >> 8)\r\n        );\r\n        s = bytes32(\r\n            ((uint256(s) & 0xffff_0000ffff_0000ffff_0000ffff_0000ffff_0000ffff_0000ffff_0000ffff) << 16) |\r\n                ((uint256(s) & 0xffff0000_ffff0000_ffff0000_ffff0000_ffff0000_ffff0000_ffff0000_ffff0000) >> 16)\r\n        );\r\n        s = bytes32(\r\n            ((uint256(s) & 0xffffffff_00000000_ffffffff_00000000_ffffffff_00000000_ffffffff) << 32) |\r\n                ((uint256(s) & 0xffffffff_00000000_ffffffff_00000000_ffffffff_00000000_ffffffff_00000000) >> 32)\r\n        );\r\n        s = bytes32(\r\n            ((uint256(s) & 0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff) << 64) |\r\n                ((uint256(s) & 0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff_00000000_00000000) >> 64)\r\n        );\r\n        s = bytes32((uint256(s) << 128) | (uint256(s) >> 128));\r\n        if (uint256(s) >= 0x10000000_00000000_00000000_00000000_14def9de_a2f79cd6_5812631a_5cf5d3ed) {\r\n            return false;\r\n        }\r\n        uint256 vx;\r\n        uint256 vu;\r\n        uint256 vy;\r\n        uint256 vv;\r\n        // Step 3: compute multiples of k\r\n        uint256[8][3][2] memory tables;\r\n        {\r\n            uint256 ks = ky + kx;\r\n            uint256 kd = ky + 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed - kx;\r\n            uint256 k2dt =\r\n                mulmod(\r\n                    mulmod(kx, ky, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed),\r\n                    0x2406d9dc_56dffce7_198e80f2_eef3d130_00e0149a_8283b156_ebd69b94_26b2f159,\r\n                    0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                );\r\n            uint256 kky = ky;\r\n            uint256 kkx = kx;\r\n            uint256 kku = 1;\r\n            uint256 kkv = 1;\r\n            {\r\n                uint256 xx =\r\n                    mulmod(kkx, kkv, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                uint256 yy =\r\n                    mulmod(kky, kku, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                uint256 zz =\r\n                    mulmod(kku, kkv, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                uint256 xx2 = mulmod(xx, xx, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                uint256 yy2 = mulmod(yy, yy, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                uint256 xxyy =\r\n                    mulmod(xx, yy, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                uint256 zz2 = mulmod(zz, zz, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                kkx = xxyy + xxyy;\r\n                kku = yy2 - xx2 + 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed;\r\n                kky = xx2 + yy2;\r\n                kkv = addmod(\r\n                    zz2 + zz2,\r\n                    0xffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffda - kku,\r\n                    0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                );\r\n            }\r\n            {\r\n                uint256 xx =\r\n                    mulmod(kkx, kkv, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                uint256 yy =\r\n                    mulmod(kky, kku, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                uint256 zz =\r\n                    mulmod(kku, kkv, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                uint256 xx2 = mulmod(xx, xx, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                uint256 yy2 = mulmod(yy, yy, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                uint256 xxyy =\r\n                    mulmod(xx, yy, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                uint256 zz2 = mulmod(zz, zz, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                kkx = xxyy + xxyy;\r\n                kku = yy2 - xx2 + 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed;\r\n                kky = xx2 + yy2;\r\n                kkv = addmod(\r\n                    zz2 + zz2,\r\n                    0xffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffda - kku,\r\n                    0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                );\r\n            }\r\n            {\r\n                uint256 xx =\r\n                    mulmod(kkx, kkv, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                uint256 yy =\r\n                    mulmod(kky, kku, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                uint256 zz =\r\n                    mulmod(kku, kkv, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                uint256 xx2 = mulmod(xx, xx, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                uint256 yy2 = mulmod(yy, yy, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                uint256 xxyy =\r\n                    mulmod(xx, yy, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                uint256 zz2 = mulmod(zz, zz, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                kkx = xxyy + xxyy;\r\n                kku = yy2 - xx2 + 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed;\r\n                kky = xx2 + yy2;\r\n                kkv = addmod(\r\n                    zz2 + zz2,\r\n                    0xffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffda - kku,\r\n                    0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                );\r\n            }\r\n            uint256 cprod = 1;\r\n            uint256[8][3][2] memory tables_ = tables;\r\n            for (uint256 i = 0; ; i++) {\r\n                uint256 cs;\r\n                uint256 cd;\r\n                uint256 ct;\r\n                uint256 c2z;\r\n                {\r\n                    uint256 cx =\r\n                        mulmod(kkx, kkv, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                    uint256 cy =\r\n                        mulmod(kky, kku, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                    uint256 cz =\r\n                        mulmod(kku, kkv, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                    ct = mulmod(kkx, kky, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                    cs = cy + cx;\r\n                    cd = cy - cx + 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed;\r\n                    c2z = cz + cz;\r\n                }\r\n                tables_[1][0][i] = cs;\r\n                tables_[1][1][i] = cd;\r\n                tables_[1][2][i] = mulmod(\r\n                    ct,\r\n                    0x2406d9dc_56dffce7_198e80f2_eef3d130_00e0149a_8283b156_ebd69b94_26b2f159,\r\n                    0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                );\r\n                tables_[0][0][i] = c2z;\r\n                tables_[0][1][i] = cprod;\r\n                cprod = mulmod(cprod, c2z, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                if (i == 7) {\r\n                    break;\r\n                }\r\n                uint256 ab = mulmod(cs, ks, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                uint256 aa = mulmod(cd, kd, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                uint256 ac =\r\n                    mulmod(ct, k2dt, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                kkx = ab - aa + 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed;\r\n                kku = addmod(c2z, ac, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                kky = ab + aa;\r\n                kkv = addmod(\r\n                    c2z,\r\n                    0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed - ac,\r\n                    0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                );\r\n            }\r\n            uint256 t;\r\n            (cprod, t) = pow22501(cprod);\r\n            cprod = mulmod(cprod, cprod, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n            cprod = mulmod(cprod, cprod, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n            cprod = mulmod(cprod, cprod, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n            cprod = mulmod(cprod, cprod, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n            cprod = mulmod(cprod, cprod, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n            cprod = mulmod(cprod, t, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n            for (uint256 i = 7; ; i--) {\r\n                uint256 cinv =\r\n                    mulmod(\r\n                        cprod,\r\n                        tables_[0][1][i],\r\n                        0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                    );\r\n                tables_[1][0][i] = mulmod(\r\n                    tables_[1][0][i],\r\n                    cinv,\r\n                    0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                );\r\n                tables_[1][1][i] = mulmod(\r\n                    tables_[1][1][i],\r\n                    cinv,\r\n                    0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                );\r\n                tables_[1][2][i] = mulmod(\r\n                    tables_[1][2][i],\r\n                    cinv,\r\n                    0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                );\r\n                if (i == 0) {\r\n                    break;\r\n                }\r\n                cprod = mulmod(\r\n                    cprod,\r\n                    tables_[0][0][i],\r\n                    0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                );\r\n            }\r\n            tables_[0] = [\r\n                [\r\n                    0x43e7ce9d_19ea5d32_9385a44c_321ea161_67c996e3_7dc6070c_97de49e3_7ac61db9,\r\n                    0x40cff344_25d8ec30_a3bb74ba_58cd5854_fa1e3818_6ad0d31e_bc8ae251_ceb2c97e,\r\n                    0x459bd270_46e8dd45_aea7008d_b87a5a8f_79067792_53d64523_58951859_9fdfbf4b,\r\n                    0x69fdd1e2_8c23cc38_94d0c8ff_90e76f6d_5b6e4c2e_620136d0_4dd83c4a_51581ab9,\r\n                    0x54dceb34_13ce5cfa_11196dfc_960b6eda_f4b380c6_d4d23784_19cc0279_ba49c5f3,\r\n                    0x4e24184d_d71a3d77_eef3729f_7f8cf7c1_7224cf40_aa7b9548_b9942f3c_5084ceed,\r\n                    0x5a0e5aab_20262674_ae117576_1cbf5e88_9b52a55f_d7ac5027_c228cebd_c8d2360a,\r\n                    0x26239334_073e9b38_c6285955_6d451c3d_cc8d30e8_4b361174_f488eadd_e2cf17d9\r\n                ],\r\n                [\r\n                    0x227e97c9_4c7c0933_d2e0c21a_3447c504_fe9ccf82_e8a05f59_ce881c82_eba0489f,\r\n                    0x226a3e0e_cc4afec6_fd0d2884_13014a9d_bddecf06_c1a2f0bb_702ba77c_613d8209,\r\n                    0x34d7efc8_51d45c5e_71efeb0f_235b7946_91de6228_877569b3_a8d52bf0_58b8a4a0,\r\n                    0x3c1f5fb3_ca7166fc_e1471c9b_752b6d28_c56301ad_7b65e845_1b2c8c55_26726e12,\r\n                    0x6102416c_f02f02ff_5be75275_f55f28db_89b2a9d2_456b860c_e22fc0e5_031f7cc5,\r\n                    0x40adf677_f1bfdae0_57f0fd17_9c126179_18ddaa28_91a6530f_b1a4294f_a8665490,\r\n                    0x61936f3c_41560904_6187b8ba_a978cbc9_b4789336_3ae5a3cc_7d909f36_35ae7f48,\r\n                    0x562a9662_b6ec47f9_e979d473_c02b51e4_42336823_8c58ddb5_2f0e5c6a_180e6410\r\n                ],\r\n                [\r\n                    0x3788bdb4_4f8632d4_2d0dbee5_eea1acc6_136cf411_e655624f_55e48902_c3bd5534,\r\n                    0x6190cf2c_2a7b5ad7_69d594a8_2844f23b_4167fa7c_8ac30e51_aa6cfbeb_dcd4b945,\r\n                    0x65f77870_96be9204_123a71f3_ac88a87b_e1513217_737d6a1e_2f3a13a4_3d7e3a9a,\r\n                    0x23af32d_bfa67975_536479a7_a7ce74a0_2142147f_ac048018_7f1f1334_9cda1f2d,\r\n                    0x64fc44b7_fc6841bd_db0ced8b_8b0fe675_9137ef87_ee966512_15fc1dbc_d25c64dc,\r\n                    0x1434aa37_48b701d5_b69df3d7_d340c1fe_3f6b9c1e_fc617484_caadb47e_382f4475,\r\n                    0x457a6da8_c962ef35_f2b21742_3e5844e9_d2353452_7e8ea429_0d24e3dd_f21720c6,\r\n                    0x63b9540c_eb60ccb5_1e4d989d_956e053c_f2511837_efb79089_d2ff4028_4202c53d\r\n                ]\r\n            ];\r\n        }\r\n        // Step 4: compute s*G - h*A\r\n        {\r\n            uint256 ss = uint256(s) << 3;\r\n            uint256 hhh = hh + 0x80000000_00000000_00000000_00000000_a6f7cef5_17bce6b2_c09318d2_e7ae9f60;\r\n            uint256 vvx = 0;\r\n            uint256 vvu = 1;\r\n            uint256 vvy = 1;\r\n            uint256 vvv = 1;\r\n            for (uint256 i = 252; ; i--) {\r\n                uint256 bit = 8 << i;\r\n                if ((ss & bit) != 0) {\r\n                    uint256 ws;\r\n                    uint256 wd;\r\n                    uint256 wz;\r\n                    uint256 wt;\r\n                    {\r\n                        uint256 wx =\r\n                            mulmod(vvx, vvv, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                        uint256 wy =\r\n                            mulmod(vvy, vvu, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                        ws = wy + wx;\r\n                        wd = wy - wx + 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed;\r\n                        wz = mulmod(\r\n                            vvu,\r\n                            vvv,\r\n                            0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                        );\r\n                        wt = mulmod(\r\n                            vvx,\r\n                            vvy,\r\n                            0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                        );\r\n                    }\r\n                    uint256 j = (ss >> i) & 7;\r\n                    ss &= ~(7 << i);\r\n                    uint256[8][3][2] memory tables_ = tables;\r\n                    uint256 aa =\r\n                        mulmod(\r\n                            wd,\r\n                            tables_[0][1][j],\r\n                            0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                        );\r\n                    uint256 ab =\r\n                        mulmod(\r\n                            ws,\r\n                            tables_[0][0][j],\r\n                            0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                        );\r\n                    uint256 ac =\r\n                        mulmod(\r\n                            wt,\r\n                            tables_[0][2][j],\r\n                            0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                        );\r\n                    vvx = ab - aa + 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed;\r\n                    vvu = wz + ac;\r\n                    vvy = ab + aa;\r\n                    vvv = wz - ac + 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed;\r\n                }\r\n                if ((hhh & bit) != 0) {\r\n                    uint256 ws;\r\n                    uint256 wd;\r\n                    uint256 wz;\r\n                    uint256 wt;\r\n                    {\r\n                        uint256 wx =\r\n                            mulmod(vvx, vvv, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                        uint256 wy =\r\n                            mulmod(vvy, vvu, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                        ws = wy + wx;\r\n                        wd = wy - wx + 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed;\r\n                        wz = mulmod(\r\n                            vvu,\r\n                            vvv,\r\n                            0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                        );\r\n                        wt = mulmod(\r\n                            vvx,\r\n                            vvy,\r\n                            0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                        );\r\n                    }\r\n                    uint256 j = (hhh >> i) & 7;\r\n                    hhh &= ~(7 << i);\r\n                    uint256[8][3][2] memory tables_ = tables;\r\n                    uint256 aa =\r\n                        mulmod(\r\n                            wd,\r\n                            tables_[1][0][j],\r\n                            0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                        );\r\n                    uint256 ab =\r\n                        mulmod(\r\n                            ws,\r\n                            tables_[1][1][j],\r\n                            0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                        );\r\n                    uint256 ac =\r\n                        mulmod(\r\n                            wt,\r\n                            tables_[1][2][j],\r\n                            0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                        );\r\n                    vvx = ab - aa + 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed;\r\n                    vvu = wz - ac + 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed;\r\n                    vvy = ab + aa;\r\n                    vvv = wz + ac;\r\n                }\r\n                if (i == 0) {\r\n                    uint256 ws;\r\n                    uint256 wd;\r\n                    uint256 wz;\r\n                    uint256 wt;\r\n                    {\r\n                        uint256 wx =\r\n                            mulmod(vvx, vvv, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                        uint256 wy =\r\n                            mulmod(vvy, vvu, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                        ws = wy + wx;\r\n                        wd = wy - wx + 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed;\r\n                        wz = mulmod(\r\n                            vvu,\r\n                            vvv,\r\n                            0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                        );\r\n                        wt = mulmod(\r\n                            vvx,\r\n                            vvy,\r\n                            0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                        );\r\n                    }\r\n                    uint256 j = hhh & 7;\r\n                    uint256[8][3][2] memory tables_ = tables;\r\n                    uint256 aa =\r\n                        mulmod(\r\n                            wd,\r\n                            tables_[1][0][j],\r\n                            0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                        );\r\n                    uint256 ab =\r\n                        mulmod(\r\n                            ws,\r\n                            tables_[1][1][j],\r\n                            0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                        );\r\n                    uint256 ac =\r\n                        mulmod(\r\n                            wt,\r\n                            tables_[1][2][j],\r\n                            0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                        );\r\n                    vvx = ab - aa + 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed;\r\n                    vvu = wz - ac + 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed;\r\n                    vvy = ab + aa;\r\n                    vvv = wz + ac;\r\n                    break;\r\n                }\r\n                {\r\n                    uint256 xx =\r\n                        mulmod(vvx, vvv, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                    uint256 yy =\r\n                        mulmod(vvy, vvu, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                    uint256 zz =\r\n                        mulmod(vvu, vvv, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                    uint256 xx2 =\r\n                        mulmod(xx, xx, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                    uint256 yy2 =\r\n                        mulmod(yy, yy, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                    uint256 xxyy =\r\n                        mulmod(xx, yy, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                    uint256 zz2 =\r\n                        mulmod(zz, zz, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n                    vvx = xxyy + xxyy;\r\n                    vvu = yy2 - xx2 + 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed;\r\n                    vvy = xx2 + yy2;\r\n                    vvv = addmod(\r\n                        zz2 + zz2,\r\n                        0xffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffda - vvu,\r\n                        0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n                    );\r\n                }\r\n            }\r\n            vx = vvx;\r\n            vu = vvu;\r\n            vy = vvy;\r\n            vv = vvv;\r\n        }\r\n        // Step 5: compare the points\r\n        (uint256 vi, uint256 vj) =\r\n            pow22501(mulmod(vu, vv, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed));\r\n        vi = mulmod(vi, vi, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        vi = mulmod(vi, vi, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        vi = mulmod(vi, vi, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        vi = mulmod(vi, vi, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        vi = mulmod(vi, vi, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        vi = mulmod(vi, vj, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed);\r\n        vx = mulmod(\r\n            vx,\r\n            mulmod(vi, vv, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed),\r\n            0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n        );\r\n        vy = mulmod(\r\n            vy,\r\n            mulmod(vi, vu, 0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed),\r\n            0x7fffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffed\r\n        );\r\n        bytes32 v = bytes32(vy | (vx << 255));\r\n        v = bytes32(\r\n            ((uint256(v) & 0xff00ff_00ff00ff_00ff00ff_00ff00ff_00ff00ff_00ff00ff_00ff00ff_00ff00ff) << 8) |\r\n                ((uint256(v) & 0xff00ff00_ff00ff00_ff00ff00_ff00ff00_ff00ff00_ff00ff00_ff00ff00_ff00ff00) >> 8)\r\n        );\r\n        v = bytes32(\r\n            ((uint256(v) & 0xffff_0000ffff_0000ffff_0000ffff_0000ffff_0000ffff_0000ffff_0000ffff) << 16) |\r\n                ((uint256(v) & 0xffff0000_ffff0000_ffff0000_ffff0000_ffff0000_ffff0000_ffff0000_ffff0000) >> 16)\r\n        );\r\n        v = bytes32(\r\n            ((uint256(v) & 0xffffffff_00000000_ffffffff_00000000_ffffffff_00000000_ffffffff) << 32) |\r\n                ((uint256(v) & 0xffffffff_00000000_ffffffff_00000000_ffffffff_00000000_ffffffff_00000000) >> 32)\r\n        );\r\n        v = bytes32(\r\n            ((uint256(v) & 0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff) << 64) |\r\n                ((uint256(v) & 0xffffffff_ffffffff_00000000_00000000_ffffffff_ffffffff_00000000_00000000) >> 64)\r\n        );\r\n        v = bytes32((uint256(v) << 128) | (uint256(v) >> 128));\r\n        return v == r;\r\n    }\r\n}\r\n\r\n// File: contracts/NearBridge.sol\r\n\r\npragma solidity ^0.6;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract NearBridge is INearBridge, AdminControlled {\r\n    using SafeMath for uint256;\r\n    using Borsh for Borsh.Data;\r\n    using NearDecoder for Borsh.Data;\r\n\r\n    // Assumed to be even and to not exceed 256.\r\n    uint constant MAX_BLOCK_PRODUCERS = 100;\r\n\r\n    struct Epoch {\r\n        bytes32 epochId;\r\n        uint numBPs;\r\n        bytes32[MAX_BLOCK_PRODUCERS] keys;\r\n        bytes32[MAX_BLOCK_PRODUCERS / 2] packedStakes;\r\n        uint256 stakeThreshold;\r\n    }\r\n\r\n    // Whether the contract was initialized.\r\n    bool public initialized;\r\n    uint256 public lockEthAmount;\r\n    uint256 public lockDuration;\r\n    // replaceDuration is in nanoseconds, because it is a difference between NEAR timestamps.\r\n    uint256 public replaceDuration;\r\n    Ed25519 immutable edwards;\r\n\r\n    Epoch[3] epochs;\r\n    uint curEpoch;\r\n    uint64 curHeight;\r\n\r\n    // The most recently added block. May still be in its challenge period, so should not be trusted.\r\n    uint64 untrustedHeight;\r\n    uint256 untrustedTimestamp;\r\n    bool untrustedNextEpoch;\r\n    bytes32 untrustedHash;\r\n    bytes32 untrustedMerkleRoot;\r\n    bytes32 untrustedNextHash;\r\n    uint256 untrustedSignatureSet;\r\n    NearDecoder.Signature[MAX_BLOCK_PRODUCERS] untrustedSignatures;\r\n\r\n    // Address of the account which submitted the last block.\r\n    address lastSubmitter;\r\n    // End of challenge period. If zero, untrusted* fields and lastSubmitter are not meaningful.\r\n    uint public lastValidAt;\r\n\r\n    mapping(uint64 => bytes32) blockHashes_;\r\n    mapping(uint64 => bytes32) blockMerkleRoots_;\r\n    mapping(address => uint256) public override balanceOf;\r\n\r\n    constructor(\r\n        Ed25519 ed,\r\n        uint256 lockEthAmount_,\r\n        uint256 lockDuration_,\r\n        uint256 replaceDuration_,\r\n        address admin_,\r\n        uint256 pausedFlags_\r\n    ) public AdminControlled(admin_, pausedFlags_) {\r\n        require(replaceDuration_ > lockDuration_.mul(1000000000));\r\n        edwards = ed;\r\n        lockEthAmount = lockEthAmount_;\r\n        lockDuration = lockDuration_;\r\n        replaceDuration = replaceDuration_;\r\n    }\r\n\r\n    uint constant UNPAUSE_ALL = 0;\r\n    uint constant PAUSED_DEPOSIT = 1;\r\n    uint constant PAUSED_WITHDRAW = 2;\r\n    uint constant PAUSED_ADD_BLOCK = 4;\r\n    uint constant PAUSED_CHALLENGE = 8;\r\n    uint constant PAUSED_VERIFY = 16;\r\n\r\n    function deposit() public payable override pausable(PAUSED_DEPOSIT) {\r\n        require(msg.value == lockEthAmount && balanceOf[msg.sender] == 0);\r\n        balanceOf[msg.sender] = msg.value;\r\n    }\r\n\r\n    function withdraw() public override pausable(PAUSED_WITHDRAW) {\r\n        require(msg.sender != lastSubmitter || block.timestamp >= lastValidAt);\r\n        uint amount = balanceOf[msg.sender];\r\n        require(amount != 0);\r\n        balanceOf[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function challenge(address payable receiver, uint signatureIndex) public override pausable(PAUSED_CHALLENGE) {\r\n        require(block.timestamp < lastValidAt, \"No block can be challenged at this time\");\r\n        require(!checkBlockProducerSignatureInHead(signatureIndex), \"Can't challenge valid signature\");\r\n\r\n        balanceOf[lastSubmitter] = balanceOf[lastSubmitter].sub(lockEthAmount);\r\n        receiver.transfer(lockEthAmount / 2);\r\n        lastValidAt = 0;\r\n    }\r\n\r\n    function checkBlockProducerSignatureInHead(uint signatureIndex) public view override returns (bool) {\r\n        // Shifting by a number >= 256 returns zero.\r\n        require((untrustedSignatureSet & (1 << signatureIndex)) != 0, \"No such signature\");\r\n        Epoch storage untrustedEpoch = epochs[untrustedNextEpoch ? (curEpoch + 1) % 3 : curEpoch];\r\n        NearDecoder.Signature storage signature = untrustedSignatures[signatureIndex];\r\n        bytes memory message =\r\n            abi.encodePacked(uint8(0), untrustedNextHash, Utils.swapBytes8(untrustedHeight + 2), bytes23(0));\r\n        (bytes32 arg1, bytes9 arg2) = abi.decode(message, (bytes32, bytes9));\r\n        return edwards.check(untrustedEpoch.keys[signatureIndex], signature.r, signature.s, arg1, arg2);\r\n    }\r\n\r\n    // The first part of initialization -- setting the validators of the current epoch.\r\n    function initWithValidators(bytes memory data) public override onlyAdmin {\r\n        require(!initialized && epochs[0].numBPs == 0, \"Wrong initialization stage\");\r\n\r\n        Borsh.Data memory borsh = Borsh.from(data);\r\n        NearDecoder.BlockProducer[] memory initialValidators = borsh.decodeBlockProducers();\r\n        borsh.done();\r\n\r\n        setBlockProducers(initialValidators, epochs[0]);\r\n    }\r\n\r\n    // The second part of the initialization -- setting the current head.\r\n    function initWithBlock(bytes memory data) public override onlyAdmin {\r\n        require(!initialized && epochs[0].numBPs != 0, \"Wrong initialization stage\");\r\n        initialized = true;\r\n\r\n        Borsh.Data memory borsh = Borsh.from(data);\r\n        NearDecoder.LightClientBlock memory nearBlock = borsh.decodeLightClientBlock();\r\n        borsh.done();\r\n\r\n        require(nearBlock.next_bps.some, \"Initialization block must contain next_bps\");\r\n\r\n        curHeight = nearBlock.inner_lite.height;\r\n        epochs[0].epochId = nearBlock.inner_lite.epoch_id;\r\n        epochs[1].epochId = nearBlock.inner_lite.next_epoch_id;\r\n        blockHashes_[nearBlock.inner_lite.height] = nearBlock.hash;\r\n        blockMerkleRoots_[nearBlock.inner_lite.height] = nearBlock.inner_lite.block_merkle_root;\r\n        setBlockProducers(nearBlock.next_bps.blockProducers, epochs[1]);\r\n    }\r\n\r\n    struct BridgeState {\r\n        uint currentHeight; // Height of the current confirmed block\r\n        // If there is currently no unconfirmed block, the last three fields are zero.\r\n        uint nextTimestamp; // Timestamp of the current unconfirmed block\r\n        uint nextValidAt; // Timestamp when the current unconfirmed block will be confirmed\r\n        uint numBlockProducers; // Number of block producers for the current unconfirmed block\r\n    }\r\n\r\n    function bridgeState() public view returns (BridgeState memory res) {\r\n        if (block.timestamp < lastValidAt) {\r\n            res.currentHeight = curHeight;\r\n            res.nextTimestamp = untrustedTimestamp;\r\n            res.nextValidAt = lastValidAt;\r\n            res.numBlockProducers = epochs[untrustedNextEpoch ? (curEpoch + 1) % 3 : curEpoch].numBPs;\r\n        } else {\r\n            res.currentHeight = lastValidAt == 0 ? curHeight : untrustedHeight;\r\n        }\r\n    }\r\n\r\n    function addLightClientBlock(bytes memory data) public override pausable(PAUSED_ADD_BLOCK) {\r\n        require(initialized, \"Contract is not initialized\");\r\n        require(balanceOf[msg.sender] >= lockEthAmount, \"Balance is not enough\");\r\n\r\n        Borsh.Data memory borsh = Borsh.from(data);\r\n        NearDecoder.LightClientBlock memory nearBlock = borsh.decodeLightClientBlock();\r\n        borsh.done();\r\n\r\n        // Commit the previous block, or make sure that it is OK to replace it.\r\n        if (block.timestamp < lastValidAt) {\r\n            require(\r\n                nearBlock.inner_lite.timestamp >= untrustedTimestamp.add(replaceDuration),\r\n                \"Can only replace with a sufficiently newer block\"\r\n            );\r\n        } else if (lastValidAt != 0) {\r\n            curHeight = untrustedHeight;\r\n            if (untrustedNextEpoch) {\r\n                curEpoch = (curEpoch + 1) % 3;\r\n            }\r\n            lastValidAt = 0;\r\n\r\n            blockHashes_[curHeight] = untrustedHash;\r\n            blockMerkleRoots_[curHeight] = untrustedMerkleRoot;\r\n        }\r\n\r\n        // Check that the new block's height is greater than the current one's.\r\n        require(nearBlock.inner_lite.height > curHeight, \"New block must have higher height\");\r\n\r\n        // Check that the new block is from the same epoch as the current one, or from the next one.\r\n        bool fromNextEpoch;\r\n        if (nearBlock.inner_lite.epoch_id == epochs[curEpoch].epochId) {\r\n            fromNextEpoch = false;\r\n        } else if (nearBlock.inner_lite.epoch_id == epochs[(curEpoch + 1) % 3].epochId) {\r\n            fromNextEpoch = true;\r\n        } else {\r\n            revert(\"Epoch id of the block is not valid\");\r\n        }\r\n\r\n        // Check that the new block is signed by more than 2/3 of the validators.\r\n        Epoch storage thisEpoch = epochs[fromNextEpoch ? (curEpoch + 1) % 3 : curEpoch];\r\n        // Last block in the epoch might contain extra approvals that light client can ignore.\r\n        require(nearBlock.approvals_after_next.length >= thisEpoch.numBPs, \"Approval list is too short\");\r\n        // The sum of uint128 values cannot overflow.\r\n        uint256 votedFor = 0;\r\n        for ((uint i, uint cnt) = (0, thisEpoch.numBPs); i != cnt; ++i) {\r\n            bytes32 stakes = thisEpoch.packedStakes[i >> 1];\r\n            if (nearBlock.approvals_after_next[i].some) {\r\n                votedFor += uint128(bytes16(stakes));\r\n            }\r\n            if (++i == cnt) {\r\n                break;\r\n            }\r\n            if (nearBlock.approvals_after_next[i].some) {\r\n                votedFor += uint128(uint256(stakes));\r\n            }\r\n        }\r\n        require(votedFor > thisEpoch.stakeThreshold, \"Too few approvals\");\r\n\r\n        // If the block is from the next epoch, make sure that next_bps is supplied and has a correct hash.\r\n        if (fromNextEpoch) {\r\n            require(nearBlock.next_bps.some, \"Next next_bps should not be None\");\r\n            require(\r\n                nearBlock.next_bps.hash == nearBlock.inner_lite.next_bp_hash,\r\n                \"Hash of block producers does not match\"\r\n            );\r\n        }\r\n\r\n        untrustedHeight = nearBlock.inner_lite.height;\r\n        untrustedTimestamp = nearBlock.inner_lite.timestamp;\r\n        untrustedHash = nearBlock.hash;\r\n        untrustedMerkleRoot = nearBlock.inner_lite.block_merkle_root;\r\n        untrustedNextHash = nearBlock.next_hash;\r\n\r\n        uint256 signatureSet = 0;\r\n        for ((uint i, uint cnt) = (0, thisEpoch.numBPs); i < cnt; i++) {\r\n            NearDecoder.OptionalSignature memory approval = nearBlock.approvals_after_next[i];\r\n            if (approval.some) {\r\n                signatureSet |= 1 << i;\r\n                untrustedSignatures[i] = approval.signature;\r\n            }\r\n        }\r\n        untrustedSignatureSet = signatureSet;\r\n        untrustedNextEpoch = fromNextEpoch;\r\n        if (fromNextEpoch) {\r\n            Epoch storage nextEpoch = epochs[(curEpoch + 2) % 3];\r\n            nextEpoch.epochId = nearBlock.inner_lite.next_epoch_id;\r\n            setBlockProducers(nearBlock.next_bps.blockProducers, nextEpoch);\r\n        }\r\n        lastSubmitter = msg.sender;\r\n        lastValidAt = block.timestamp.add(lockDuration);\r\n    }\r\n\r\n    function setBlockProducers(NearDecoder.BlockProducer[] memory src, Epoch storage epoch) internal {\r\n        uint cnt = src.length;\r\n        require(cnt <= MAX_BLOCK_PRODUCERS);\r\n        epoch.numBPs = cnt;\r\n        for (uint i = 0; i < cnt; i++) {\r\n            epoch.keys[i] = src[i].publicKey.k;\r\n        }\r\n        uint256 totalStake = 0; // Sum of uint128, can't be too big.\r\n        for (uint i = 0; i != cnt; ++i) {\r\n            uint128 stake1 = src[i].stake;\r\n            totalStake += stake1;\r\n            if (++i == cnt) {\r\n                epoch.packedStakes[i >> 1] = bytes32(bytes16(stake1));\r\n                break;\r\n            }\r\n            uint128 stake2 = src[i].stake;\r\n            totalStake += stake2;\r\n            epoch.packedStakes[i >> 1] = bytes32(uint256(bytes32(bytes16(stake1))) + stake2);\r\n        }\r\n        epoch.stakeThreshold = (totalStake * 2) / 3;\r\n    }\r\n\r\n    function blockHashes(uint64 height) public view override pausable(PAUSED_VERIFY) returns (bytes32 res) {\r\n        res = blockHashes_[height];\r\n        if (res == 0 && block.timestamp >= lastValidAt && lastValidAt != 0 && height == untrustedHeight) {\r\n            res = untrustedHash;\r\n        }\r\n    }\r\n\r\n    function blockMerkleRoots(uint64 height) public view override pausable(PAUSED_VERIFY) returns (bytes32 res) {\r\n        res = blockMerkleRoots_[height];\r\n        if (res == 0 && block.timestamp >= lastValidAt && lastValidAt != 0 && height == untrustedHeight) {\r\n            res = untrustedMerkleRoot;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract Ed25519\",\"name\":\"ed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockEthAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"replaceDuration_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pausedFlags_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"height\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"name\":\"BlockHashAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"height\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"name\":\"BlockHashReverted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"addLightClientBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"adminDelegatecall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"name\":\"adminPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminReceiveEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminSendEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"adminSstore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mask\",\"type\":\"uint256\"}],\"name\":\"adminSstoreWithMask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"height\",\"type\":\"uint64\"}],\"name\":\"blockHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"res\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"height\",\"type\":\"uint64\"}],\"name\":\"blockMerkleRoots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"res\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextValidAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numBlockProducers\",\"type\":\"uint256\"}],\"internalType\":\"struct NearBridge.BridgeState\",\"name\":\"res\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"signatureIndex\",\"type\":\"uint256\"}],\"name\":\"challenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"signatureIndex\",\"type\":\"uint256\"}],\"name\":\"checkBlockProducerSignatureInHead\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initWithBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initWithValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastValidAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockEthAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"replaceDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NearBridge","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000088f975d5a1153ea92af66e7c4292576a329c04b600000000000000000000000000000000000000000000000029a2241af62c000000000000000000000000000000000000000000000000000000000000000038400000000000000000000000000000000000000000000000000000105ef39b2000000000000000000000000000bf7aad3498a66e8722a897b3c5ede45c2c25fb820000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6ea1e8ac6d0cd14a4be5d187567bc3bf10bec74347e3d26f380bc332847bed38"}]}