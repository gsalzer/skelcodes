{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity =0.8.4;\r\n\r\n/**\r\n * @dev BrinkVote is a simple balance ledger created for Brink proposal voting on snapshot.org\r\n *\r\n * This is not an ERC20 token! It does not fully implement the ERC20 standard. Balances cannot be transfered. Balances\r\n * can be minted by the owners of the contract. Once a balance is minted it becomes immutable.\r\n *\r\n * This contract was created solely for the purpose of vote signaling. It allows Brink community members to broadcast\r\n * their opinions on Brink protocol development proposals.\r\n */\r\ncontract BrinkVote {\r\n  string private constant _symbol = \"BRINKVOTE\";\r\n  string private constant _name = \"Brink Vote\";\r\n  uint8 private constant _decimals = 18;\r\n  uint256 private constant _totalSupply = 5_000_000_000000000000000000; // 5 Million\r\n\r\n  mapping (address => uint256) private _balances;\r\n  mapping (address => bool) private _owners;\r\n\r\n  uint256 private _totalGranted;\r\n\r\n  modifier onlyOwner() {\r\n    require(_isOwner(msg.sender), \"NOT_OWNER\");\r\n    _;\r\n  }\r\n\r\n  constructor (address initialOwner) {\r\n    _owners[initialOwner] = true;\r\n  }\r\n\r\n  function name() external pure returns (string memory) {\r\n      return _name;\r\n  }\r\n\r\n  function symbol() external pure returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function decimals() external pure returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  function totalSupply() external pure returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function totalGranted() external view returns (uint256) {\r\n    return _totalGranted;\r\n  }\r\n\r\n  function balanceOf(address account) external view returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  function isOwner(address owner) external view returns (bool) {\r\n    return _isOwner(owner);\r\n  }\r\n\r\n  function grant(address account, uint256 amount) external onlyOwner {\r\n    _grant(account, amount);\r\n  }\r\n\r\n  function multigrant(address[] calldata accounts, uint256[] calldata amounts) external onlyOwner {\r\n    require(accounts.length == amounts.length, \"LENGTH_MISMATCH\");\r\n    for(uint8 i = 0; i < accounts.length; i++) {\r\n      _grant(accounts[i], amounts[i]);\r\n    }\r\n  }\r\n\r\n  function addOwner(address owner) external onlyOwner {\r\n    require(!_isOwner(owner), \"ALREADY_OWNER\");\r\n    _owners[owner] = true;\r\n  }\r\n\r\n  function removeOwner(address owner) external onlyOwner {\r\n    require(_isOwner(owner), \"CANNOT_REMOVE_NON_OWNER\");\r\n    require(owner != msg.sender, \"CANNOT_REMOVE_SELF_OWNER\");\r\n    _owners[owner] = false;\r\n  }\r\n\r\n  function _capExceeded() internal view returns (bool) {\r\n    return _totalGranted > _totalSupply;\r\n  }\r\n\r\n  function _isOwner(address owner) internal view returns (bool) {\r\n    return _owners[owner];\r\n  }\r\n\r\n  function _grant(address account, uint256 amount) internal {\r\n    require(_balances[account] == 0, \"ACCOUNT_HAS_BALANCE\");\r\n    _balances[account] = amount;\r\n    _totalGranted += amount;\r\n    require(!_capExceeded(), \"CAP_EXCEEDED\");\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"grant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multigrant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalGranted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"BrinkVote","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c3c0515d5fb6407e167c58274d325a5aec64e9b5","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0a359e7b7468b1727f69c493899d5fe25a804211516cdf45b0ab8fa4a705e9a3"}]}