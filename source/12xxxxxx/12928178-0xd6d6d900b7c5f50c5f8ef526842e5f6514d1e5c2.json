{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/manzik/esatya/vlad/lagon-contracts/contracts/Swapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Swap\\n * @dev Main Swap contract that burns old token and mints new token for given user\\n */\\n\\ncontract Owned {\\n        address public owner;      \\n\\n        constructor() {\\n            owner = msg.sender;\\n        }\\n\\n        modifier onlyOwner {\\n            assert(msg.sender == owner);\\n            _;\\n        }\\n        \\n        /* This function is used to transfer adminship to new owner\\n         * @param  _newOwner - address of new admin or owner        \\n         */\\n\\n        function transferOwnership(address _newOwner) onlyOwner public {\\n            assert(_newOwner != address(0)); \\n            owner = _newOwner;\\n        }          \\n}\\n\\ncontract Swapper is Owned\\n{\\n    \\n    ERC20 oldToken;\\n    ERC20 newToken;\\n    Burner burner;\\n    \\n    event SwapExecuted(address user, uint256 amount);\\n\\n    struct VestingUnit {\\n        uint256 amount;\\n        uint256 timestamp;\\n    }\\n        \\n    uint256 public approvalDeadline;\\n\\n    mapping(address => VestingUnit[]) public holdersVestingData;\\n    \\n    function claim() public {\\n        VestingUnit[] memory vestingUnits = holdersVestingData[msg.sender];\\n        uint sum = 0;\\n        for(uint i = 0; i < vestingUnits.length; i++) {\\n            uint256 finalClaimableTime = vestingUnits[i].timestamp + findTimeMultipler(i) * 30 days + 2 weeks;\\n            if(finalClaimableTime < block.timestamp){\\n                continue;\\n            }\\n            if(vestingUnits[i].amount > 0 && vestingUnits[i].timestamp < block.timestamp) {\\n                sum += vestingUnits[i].amount;\\n                delete holdersVestingData[msg.sender][i];\\n            }\\n        }\\n        newToken.transfer(msg.sender, sum);\\n    }\\n    \\n    function amountClaimable(address holder) public view returns(uint256) {\\n        VestingUnit[] memory vestingUnits = holdersVestingData[holder];\\n        uint sum = 0;\\n        for(uint i = 0; i < vestingUnits.length; i++) {\\n             uint256 finalClaimableTime = vestingUnits[i].timestamp + findTimeMultipler(i) * 30 days + 2 weeks;\\n            if(finalClaimableTime < block.timestamp){\\n                continue;\\n            }\\n            if(vestingUnits[i].amount > 0 && vestingUnits[i].timestamp < block.timestamp) {\\n                sum += vestingUnits[i].amount;\\n            }\\n        }\\n        return sum;\\n    }\\n     \\n    constructor(\\n        address _oldToken,\\n        address _newToken,\\n        address _burner,\\n        uint256 _approvalDeadline\\n\\n    ) {\\n        approvalDeadline = _approvalDeadline;\\n        oldToken = ERC20(_oldToken);\\n        newToken = ERC20(_newToken);\\n        burner = Burner(_burner);\\n\\n    }\\n\\n    function updateApprovalDeadline(uint256 _approvalDeadline) onlyOwner public {\\n        approvalDeadline = _approvalDeadline;\\n    }\\n    \\n    function energencyWithdraw(uint256 _amount) onlyOwner public {\\n        newToken.transfer(msg.sender,_amount);\\n    }\\n    \\n\\tfunction SwapNow(uint256 _val) public {\\n\\t    require(approvalDeadline > block.timestamp);\\n\\t    require(oldToken.allowance(msg.sender, address(this)) >= _val); \\n\\t    oldToken.transferFrom(msg.sender, address(this), _val);\\n\\t    burner.burn(_val);\\n\\t    newToken.transfer(msg.sender, _val / 10);\\n\\t    \\n\\t    setVestingData(_val);\\n\\n\\t    emit SwapExecuted(msg.sender, _val);\\n\\t}\\n\\t\\n\\tfunction calculateCutPerMonth(uint256 totalAmount) private pure returns (uint256){\\n\\t    return totalAmount * 75/1000;\\n\\t}\\n\\t\\n\\t\\n\\tfunction setVestingData(uint256 _val) private {\\n\\t    \\t  \\n\\t    uint256 amount = calculateCutPerMonth(_val);\\n\\t    uint256 finalChunkAmount = _val - _val/10;\\n\\t    for(uint256 i=0; i < 11; i++){\\n\\t        uint256 vestingTimestamp = block.timestamp + 90 days + 30 days * i;\\n\\t        VestingUnit memory vestingData  = VestingUnit({amount:amount,timestamp:vestingTimestamp});\\n\\t        holdersVestingData[msg.sender].push(vestingData);\\n\\t        finalChunkAmount -= amount;\\n\\t    }\\n\\t    \\n\\t    holdersVestingData[msg.sender].push(VestingUnit({amount:finalChunkAmount,timestamp:block.timestamp + 90 days + 30 days * 11}));\\n\\t}\\n\\t\\n\\t\\n\\tfunction findTimeMultipler(uint256 i) private pure returns(uint256){\\n\\t    if((i+1)%12 == 0){\\n\\t        return 0 ;\\n\\t    }\\n\\t    else{\\n\\t        return 12 - (i+1)%12;\\n\\t    }\\n\\t}\\n\\t\\n\\n\\tfunction remainingClaim(address _holder) view public returns(uint256) {\\n\\t    VestingUnit[] memory vestingUnits = holdersVestingData[_holder];\\n        uint sum = 0;\\n        for(uint i = 0; i < vestingUnits.length; i++) {\\n            if(vestingUnits[i].amount > 0) {\\n                sum += vestingUnits[i].amount;\\n            }\\n        }\\n        return sum;\\n\\t}\\n}\\n\\ncontract Burner is Owned {\\n    ERC20 oldToken;\\n    \\n    function returnOwnership(address _newOwner) public onlyOwner {\\n        oldToken.transferOwnership(_newOwner);\\n    }\\n    \\n    constructor(address _oldToken) {\\n        oldToken = ERC20(_oldToken);\\n    }\\n    \\n    function burn(uint256 _val) public {\\n        oldToken.burn(_val);\\n    }\\n}\\n\\ninterface ERC20 {\\n    function transferOwnership(address _newOwner) external;\\n    \\n    function transferFrom(\\n         address _from,\\n         address _to,\\n         uint256 _amount\\n     ) external returns (bool success);\\n    \\n    \\n    function allowance(address owner, address spender) external view returns (uint256);\\n    \\n    function burn(uint256 _value) external;\\n    \\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n}\\n\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_approvalDeadline\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SwapExecuted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"SwapNow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"amountClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approvalDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"energencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holdersVestingData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"remainingClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_approvalDeadline\",\"type\":\"uint256\"}],\"name\":\"updateApprovalDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Swapper","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000096e322f2a4f151cd898f86ea5626cc6e10090c7600000000000000000000000040eb746dee876ac1e78697b7ca85142d178a1fc800000000000000000000000096e322f2a4f151cd898f86ea5626cc6e10090c7600000000000000000000000000000000000000000000000000000000630dea07","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}