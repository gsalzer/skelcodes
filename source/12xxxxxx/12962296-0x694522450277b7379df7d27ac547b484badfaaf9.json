{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary AddressUpgradeable {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/BeforeAwardListener.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport \\\"./BeforeAwardListenerInterface.sol\\\";\\r\\nimport \\\"./Constants.sol\\\";\\r\\nimport \\\"./BeforeAwardListenerLibrary.sol\\\";\\r\\n\\r\\nabstract contract BeforeAwardListener is BeforeAwardListenerInterface {\\r\\n  function supportsInterface(bytes4 interfaceId) external override view returns (bool) {\\r\\n    return (\\r\\n      interfaceId == Constants.ERC165_INTERFACE_ID_ERC165 || \\r\\n      interfaceId == BeforeAwardListenerLibrary.ERC165_INTERFACE_ID_BEFORE_AWARD_LISTENER\\r\\n    );\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"contracts/BeforeAwardListenerInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport \\\"./IERC165Upgradeable.sol\\\";\\r\\n\\r\\ninterface BeforeAwardListenerInterface is IERC165Upgradeable {\\r\\n  function beforePrizePoolAwarded(uint256 randomNumber, uint256 prizePeriodStartedAt) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/BeforeAwardListenerLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nlibrary BeforeAwardListenerLibrary {\\r\\n  bytes4 public constant ERC165_INTERFACE_ID_BEFORE_AWARD_LISTENER = 0x4cdf9c3e;\\r\\n}\"\r\n    },\r\n    \"contracts/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport \\\"./IERC1820RegistryUpgradeable.sol\\\";\\r\\n\\r\\nlibrary Constants {\\r\\n  IERC1820RegistryUpgradeable public constant REGISTRY = IERC1820RegistryUpgradeable(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\r\\n\\r\\n  bytes32 public constant TOKENS_SENDER_INTERFACE_HASH =\\r\\n  0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\\r\\n\\r\\n  bytes32 public constant TOKENS_RECIPIENT_INTERFACE_HASH =\\r\\n  0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\\r\\n\\r\\n  bytes32 public constant ACCEPT_MAGIC =\\r\\n  0xa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b4;\\r\\n\\r\\n  bytes4 public constant ERC165_INTERFACE_ID_ERC165 = 0x01ffc9a7;\\r\\n  bytes4 public constant ERC165_INTERFACE_ID_ERC721 = 0x80ac58cd;\\r\\n}\"\r\n    },\r\n    \"contracts/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\nimport \\\"./Initializable.sol\\\";\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract ContextUpgradeable is Initializable {\\r\\n    function __Context_init() internal initializer {\\r\\n        __Context_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __Context_init_unchained() internal initializer {\\r\\n    }\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n    uint256[50] private __gap;\\r\\n}\"\r\n    },\r\n    \"contracts/ControlledToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport \\\"./ERC20PermitUpgradeable.sol\\\";\\r\\nimport \\\"./TokenControllerInterface.sol\\\";\\r\\nimport \\\"./ControlledTokenInterface.sol\\\";\\r\\n\\r\\ncontract ControlledToken is ERC20PermitUpgradeable, ControlledTokenInterface {\\r\\n\\r\\n  TokenControllerInterface public override controller;\\r\\n\\r\\n  function initialize(\\r\\n    string memory _name,\\r\\n    string memory _symbol,\\r\\n    uint8 _decimals,\\r\\n    TokenControllerInterface _controller\\r\\n  )\\r\\n    public\\r\\n    virtual\\r\\n    initializer\\r\\n  {\\r\\n    __ERC20_init(_name, _symbol);\\r\\n    __ERC20Permit_init(\\\"ArchiPrize ControlledToken\\\");\\r\\n    controller = _controller;\\r\\n    _setupDecimals(_decimals);\\r\\n  }\\r\\n\\r\\n  function controllerMint(address _user, uint256 _amount) external virtual override onlyController {\\r\\n    _mint(_user, _amount);\\r\\n  }\\r\\n\\r\\n  function controllerBurn(address _user, uint256 _amount) external virtual override onlyController {\\r\\n    _burn(_user, _amount);\\r\\n  }\\r\\n\\r\\n  function controllerBurnFrom(address _operator, address _user, uint256 _amount) external virtual override onlyController {\\r\\n    if (_operator != _user) {\\r\\n      uint256 decreasedAllowance = allowance(_user, _operator).sub(_amount, \\\"CONTROLLEDTOKEN:EXCEEDS_ALLOWANCE\\\");\\r\\n      _approve(_user, _operator, decreasedAllowance);\\r\\n    }\\r\\n    _burn(_user, _amount);\\r\\n  }\\r\\n\\r\\n  modifier onlyController {\\r\\n    require(_msgSender() == address(controller), \\\"CONTROLLEDTOKEN:ONLY_CONTROLLER\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\r\\n    controller.beforeTokenTransfer(from, to, amount);\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"contracts/ControlledTokenBuilder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./ControlledTokenProxyFactory.sol\\\";\\r\\nimport \\\"./TicketProxyFactory.sol\\\";\\r\\n\\r\\n/* solium-disable security/no-block-members */\\r\\ncontract ControlledTokenBuilder {\\r\\n\\r\\n  event CreatedControlledToken(address indexed token);\\r\\n  event CreatedTicket(address indexed token);\\r\\n\\r\\n  ControlledTokenProxyFactory public controlledTokenProxyFactory;\\r\\n  TicketProxyFactory public ticketProxyFactory;\\r\\n\\r\\n  struct ControlledTokenConfig {\\r\\n    string name;\\r\\n    string symbol;\\r\\n    uint8 decimals;\\r\\n    TokenControllerInterface controller;\\r\\n  }\\r\\n\\r\\n  constructor (\\r\\n    ControlledTokenProxyFactory _controlledTokenProxyFactory,\\r\\n    TicketProxyFactory _ticketProxyFactory\\r\\n  ) public {\\r\\n    require(address(_controlledTokenProxyFactory) != address(0), \\\"CONTROLLEDTOKENBUILDER: CONTROLLEDTOKENPROXYFACTORY_NOT_ZERO\\\");\\r\\n    require(address(_ticketProxyFactory) != address(0), \\\"CONTROLLEDTOKENBUILDER: TICKETPROXYFACTORY_NOT_ZERO\\\");\\r\\n    controlledTokenProxyFactory = _controlledTokenProxyFactory;\\r\\n    ticketProxyFactory = _ticketProxyFactory;\\r\\n  }\\r\\n\\r\\n  function createControlledToken(\\r\\n    ControlledTokenConfig calldata config\\r\\n  ) external returns (ControlledToken) {\\r\\n    ControlledToken token = controlledTokenProxyFactory.create();\\r\\n\\r\\n    token.initialize(\\r\\n      config.name,\\r\\n      config.symbol,\\r\\n      config.decimals,\\r\\n      config.controller\\r\\n    );\\r\\n\\r\\n    emit CreatedControlledToken(address(token));\\r\\n\\r\\n    return token;\\r\\n  }\\r\\n\\r\\n  function createTicket(\\r\\n    ControlledTokenConfig calldata config\\r\\n  ) external returns (Ticket) {\\r\\n    Ticket token = ticketProxyFactory.create();\\r\\n\\r\\n    token.initialize(\\r\\n      config.name,\\r\\n      config.symbol,\\r\\n      config.decimals,\\r\\n      config.controller\\r\\n    );\\r\\n\\r\\n    emit CreatedTicket(address(token));\\r\\n\\r\\n    return token;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ControlledTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport \\\"./IERC20Upgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./TokenControllerInterface.sol\\\";\\r\\n\\r\\ninterface ControlledTokenInterface is IERC20Upgradeable {\\r\\n  function controller() external view returns (TokenControllerInterface);\\r\\n  function controllerMint(address _user, uint256 _amount) external;\\r\\n  function controllerBurn(address _user, uint256 _amount) external;\\r\\n  function controllerBurnFrom(address _operator, address _user, uint256 _amount) external;\\r\\n}\"\r\n    },\r\n    \"contracts/ControlledTokenProxyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport \\\"./ProxyFactory.sol\\\";\\r\\nimport \\\"./ControlledToken.sol\\\";\\r\\n\\r\\ncontract ControlledTokenProxyFactory is ProxyFactory {\\r\\n\\r\\n  ControlledToken public instance;\\r\\n\\r\\n  constructor () public {\\r\\n    instance = new ControlledToken();\\r\\n  }\\r\\n\\r\\n  function create() external returns (ControlledToken) {\\r\\n    return ControlledToken(deployMinimal(address(instance), \\\"\\\"));\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/CountersUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport \\\"./SafeMathUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Counters\\r\\n * @author Matt Condon (@shrugs)\\r\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\r\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\r\\n *\\r\\n * Include with `using Counters for Counters.Counter;`\\r\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\r\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\r\\n * directly accessed.\\r\\n */\\r\\nlibrary CountersUpgradeable {\\r\\n    using SafeMathUpgradeable for uint256;\\r\\n\\r\\n    struct Counter {\\r\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\r\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\r\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\r\\n        uint256 _value; // default: 0\\r\\n    }\\r\\n\\r\\n    function current(Counter storage counter) internal view returns (uint256) {\\r\\n        return counter._value;\\r\\n    }\\r\\n\\r\\n    function increment(Counter storage counter) internal {\\r\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\r\\n        counter._value += 1;\\r\\n    }\\r\\n\\r\\n    function decrement(Counter storage counter) internal {\\r\\n        counter._value = counter._value.sub(1);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\n/**\\r\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\r\\n *\\r\\n * These functions can be used to verify that a message was signed by the holder\\r\\n * of the private keys of a given address.\\r\\n */\\r\\nlibrary ECDSAUpgradeable {\\r\\n    /**\\r\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\r\\n     * `signature`. This address can then be used for verification purposes.\\r\\n     *\\r\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\r\\n     * this function rejects them by requiring the `s` value to be in the lower\\r\\n     * half order, and the `v` value to be either 27 or 28.\\r\\n     *\\r\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\r\\n     * verification to be secure: it is possible to craft signatures that\\r\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\r\\n     * this is by receiving a hash of the original message (which may otherwise\\r\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\r\\n     */\\r\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\r\\n        // Check the signature length\\r\\n        if (signature.length != 65) {\\r\\n            revert(\\\"ECDSA: invalid signature length\\\");\\r\\n        }\\r\\n\\r\\n        // Divide the signature in r, s and v variables\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n        uint8 v;\\r\\n\\r\\n        // ecrecover takes the signature parameters, and the only way to get them\\r\\n        // currently is to use assembly.\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            r := mload(add(signature, 0x20))\\r\\n            s := mload(add(signature, 0x40))\\r\\n            v := byte(0, mload(add(signature, 0x60)))\\r\\n        }\\r\\n\\r\\n        return recover(hash, v, r, s);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\r\\n     * `r` and `s` signature fields separately.\\r\\n     */\\r\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\r\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\r\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\r\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\r\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\r\\n        //\\r\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\r\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\r\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\r\\n        // these malleable signatures as well.\\r\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\r\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\r\\n\\r\\n        // If the signature is valid (and not malleable), return the signer address\\r\\n        address signer = ecrecover(hash, v, r, s);\\r\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\r\\n\\r\\n        return signer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\r\\n     * replicates the behavior of the\\r\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\r\\n     * JSON-RPC method.\\r\\n     *\\r\\n     * See {recover}.\\r\\n     */\\r\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\r\\n        // 32 is the length in bytes of hash,\\r\\n        // enforced by the type signature above\\r\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/EIP712Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\nimport \\\"./Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\r\\n *\\r\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\r\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\r\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\r\\n *\\r\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\r\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\r\\n * ({_hashTypedDataV4}).\\r\\n *\\r\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\r\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\r\\n *\\r\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\r\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\r\\n *\\r\\n * _Available since v3.4._\\r\\n */\\r\\nabstract contract EIP712Upgradeable is Initializable {\\r\\n    /* solhint-disable var-name-mixedcase */\\r\\n    bytes32 private _HASHED_NAME;\\r\\n    bytes32 private _HASHED_VERSION;\\r\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\r\\n    /* solhint-enable var-name-mixedcase */\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the domain separator and parameter caches.\\r\\n     *\\r\\n     * The meaning of `name` and `version` is specified in\\r\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\r\\n     *\\r\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\r\\n     * - `version`: the current major version of the signing domain.\\r\\n     *\\r\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\r\\n     * contract upgrade].\\r\\n     */\\r\\n    function __EIP712_init(string memory name, string memory version) internal initializer {\\r\\n        __EIP712_init_unchained(name, version);\\r\\n    }\\r\\n\\r\\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\\r\\n        bytes32 hashedName = keccak256(bytes(name));\\r\\n        bytes32 hashedVersion = keccak256(bytes(version));\\r\\n        _HASHED_NAME = hashedName;\\r\\n        _HASHED_VERSION = hashedVersion;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the domain separator for the current chain.\\r\\n     */\\r\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\r\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\r\\n    }\\r\\n\\r\\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\\r\\n        return keccak256(\\r\\n            abi.encode(\\r\\n                typeHash,\\r\\n                name,\\r\\n                version,\\r\\n                _getChainId(),\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\r\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\r\\n     *\\r\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\r\\n     *\\r\\n     * ```solidity\\r\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\r\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\r\\n     *     mailTo,\\r\\n     *     keccak256(bytes(mailContents))\\r\\n     * )));\\r\\n     * address signer = ECDSA.recover(digest, signature);\\r\\n     * ```\\r\\n     */\\r\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\r\\n    }\\r\\n\\r\\n    function _getChainId() private view returns (uint256 chainId) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The hash of the name parameter for the EIP712 domain.\\r\\n     *\\r\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\r\\n     * are a concern.\\r\\n     */\\r\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\r\\n        return _HASHED_NAME;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The hash of the version parameter for the EIP712 domain.\\r\\n     *\\r\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\r\\n     * are a concern.\\r\\n     */\\r\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\r\\n        return _HASHED_VERSION;\\r\\n    }\\r\\n    uint256[50] private __gap;\\r\\n}\"\r\n    },\r\n    \"contracts/ERC165CheckerUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n/**\\r\\n * @dev Library used to query support of an interface declared via {IERC165}.\\r\\n *\\r\\n * Note that these functions return the actual result of the query: they do not\\r\\n * `revert` if an interface is not supported. It is up to the caller to decide\\r\\n * what to do in these cases.\\r\\n */\\r\\nlibrary ERC165CheckerUpgradeable {\\r\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\r\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\r\\n\\r\\n    /*\\r\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\r\\n     */\\r\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\r\\n     */\\r\\n    function supportsERC165(address account) internal view returns (bool) {\\r\\n        // Any contract that implements ERC165 must explicitly indicate support of\\r\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\r\\n        return _supportsERC165Interface(account, _INTERFACE_ID_ERC165) &&\\r\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if `account` supports the interface defined by\\r\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\r\\n     *\\r\\n     * See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\r\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\r\\n        return supportsERC165(account) &&\\r\\n            _supportsERC165Interface(account, interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a boolean array where each value corresponds to the\\r\\n     * interfaces passed in and whether they're supported or not. This allows\\r\\n     * you to batch check interfaces for a contract where your expectation\\r\\n     * is that some interfaces may not be supported.\\r\\n     *\\r\\n     * See {IERC165-supportsInterface}.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool[] memory) {\\r\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\r\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\r\\n\\r\\n        // query support of ERC165 itself\\r\\n        if (supportsERC165(account)) {\\r\\n            // query support of each interface in interfaceIds\\r\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\r\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return interfaceIdsSupported;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if `account` supports all the interfaces defined in\\r\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\r\\n     *\\r\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\r\\n     * {IERC165} support.\\r\\n     *\\r\\n     * See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\r\\n        // query support of ERC165 itself\\r\\n        if (!supportsERC165(account)) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        // query support of each interface in _interfaceIds\\r\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\r\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // all interfaces supported\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\r\\n     * @param account The address of the contract to query for support of an interface\\r\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\r\\n     * @return true if the contract at account indicates support of the interface with\\r\\n     * identifier interfaceId, false otherwise\\r\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\r\\n     * the behavior of this method is undefined. This precondition can be checked\\r\\n     * with {supportsERC165}.\\r\\n     * Interface identification is specified in ERC-165.\\r\\n     */\\r\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\r\\n        // success determines whether the staticcall succeeded and result determines\\r\\n        // whether the contract at account indicates support of _interfaceId\\r\\n        (bool success, bool result) = _callERC165SupportsInterface(account, interfaceId);\\r\\n\\r\\n        return (success && result);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calls the function with selector 0x01ffc9a7 (ERC165) and suppresses throw\\r\\n     * @param account The address of the contract to query for support of an interface\\r\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\r\\n     * @return success true if the STATICCALL succeeded, false otherwise\\r\\n     * @return result true if the STATICCALL succeeded and the contract at account\\r\\n     * indicates support of the interface with identifier interfaceId, false otherwise\\r\\n     */\\r\\n    function _callERC165SupportsInterface(address account, bytes4 interfaceId)\\r\\n        private\\r\\n        view\\r\\n        returns (bool, bool)\\r\\n    {\\r\\n        bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);\\r\\n        (bool success, bytes memory result) = account.staticcall{ gas: 30000 }(encodedParams);\\r\\n        if (result.length < 32) return (false, false);\\r\\n        return (success, abi.decode(result, (bool)));\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/ERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport \\\"./ERC20Upgradeable.sol\\\";\\r\\nimport \\\"./IERC20PermitUpgradeable.sol\\\";\\r\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\r\\nimport \\\"./CountersUpgradeable.sol\\\";\\r\\nimport \\\"./EIP712Upgradeable.sol\\\";\\r\\nimport \\\"./Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n *\\r\\n * _Available since v3.4._\\r\\n */\\r\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\r\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\r\\n\\r\\n    mapping (address => CountersUpgradeable.Counter) private _nonces;\\r\\n\\r\\n    // solhint-disable-next-line var-name-mixedcase\\r\\n    bytes32 private _PERMIT_TYPEHASH;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\r\\n     *\\r\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\r\\n     */\\r\\n    function __ERC20Permit_init(string memory name) internal initializer {\\r\\n        __Context_init_unchained();\\r\\n        __EIP712_init_unchained(name, \\\"1\\\");\\r\\n        __ERC20Permit_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __ERC20Permit_init_unchained() internal initializer {\\r\\n        _PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20Permit-permit}.\\r\\n     */\\r\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override {\\r\\n        // solhint-disable-next-line not-rely-on-time\\r\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\r\\n\\r\\n        bytes32 structHash = keccak256(\\r\\n            abi.encode(\\r\\n                _PERMIT_TYPEHASH,\\r\\n                owner,\\r\\n                spender,\\r\\n                value,\\r\\n                _nonces[owner].current(),\\r\\n                deadline\\r\\n            )\\r\\n        );\\r\\n\\r\\n        bytes32 hash = _hashTypedDataV4(structHash);\\r\\n\\r\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\r\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\r\\n\\r\\n        _nonces[owner].increment();\\r\\n        _approve(owner, spender, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20Permit-nonces}.\\r\\n     */\\r\\n    function nonces(address owner) public view override returns (uint256) {\\r\\n        return _nonces[owner].current();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\r\\n        return _domainSeparatorV4();\\r\\n    }\\r\\n    uint256[49] private __gap;\\r\\n}\"\r\n    },\r\n    \"contracts/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\nimport \\\"./ContextUpgradeable.sol\\\";\\r\\nimport \\\"./IERC20Upgradeable.sol\\\";\\r\\nimport \\\"./SafeMathUpgradeable.sol\\\";\\r\\nimport \\\"./Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of ERC20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\r\\n    using SafeMathUpgradeable for uint256;\\r\\n\\r\\n    mapping (address => uint256) private _balances;\\r\\n\\r\\n    mapping (address => mapping (address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\r\\n     * a default value of 18.\\r\\n     *\\r\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\r\\n     *\\r\\n     * All three of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\r\\n        __Context_init_unchained();\\r\\n        __ERC20_init_unchained(name_, symbol_);\\r\\n    }\\r\\n\\r\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _decimals = 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\r\\n     * called.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\r\\n     *\\r\\n     * WARNING: This function should only be called from the constructor. Most\\r\\n     * applications that interact with token contracts will not expect\\r\\n     * {decimals} to ever change, and may work incorrectly if it does.\\r\\n     */\\r\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\r\\n        _decimals = decimals_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be to transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\r\\n    uint256[44] private __gap;\\r\\n}\"\r\n    },\r\n    \"contracts/FixedPoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\nlibrary FixedPoint {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 internal constant SCALE = 1e18;\\r\\n\\r\\n    function calculateMantissa(uint256 numerator, uint256 denominator) internal pure returns (uint256) {\\r\\n        uint256 mantissa = numerator.mul(SCALE);\\r\\n        mantissa = mantissa.div(denominator);\\r\\n        return mantissa;\\r\\n    }\\r\\n\\r\\n    function multiplyUintByMantissa(uint256 b, uint256 mantissa) internal pure returns (uint256) {\\r\\n        uint256 result = mantissa.mul(b);\\r\\n        result = result.div(SCALE);\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function divideUintByMantissa(uint256 dividend, uint256 mantissa) internal pure returns (uint256) {\\r\\n        uint256 result = SCALE.mul(dividend);\\r\\n        result = result.div(mantissa);\\r\\n        return result;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165Upgradeable {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\"\r\n    },\r\n    \"contracts/IERC1820RegistryUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.6.12;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820RegistryUpgradeable {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(address account, bytes32 _interfaceHash, address implementer) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     *  @param account Address of the contract for which to update the cache.\\n     *  @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\\n     *  If the result is not cached a direct lookup on the contract address is performed.\\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     *  {updateERC165Cache} with the contract address.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\"\r\n    },\r\n    \"contracts/IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n */\\r\\ninterface IERC20PermitUpgradeable {\\r\\n    /**\\r\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\r\\n     * given `owner`'s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     */\\r\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n}\"\r\n    },\r\n    \"contracts/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20Upgradeable {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"\r\n    },\r\n    \"contracts/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport \\\"./IERC165Upgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in ``owner``'s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n      *\\r\\n      * Requirements:\\r\\n      *\\r\\n      * - `from` cannot be the zero address.\\r\\n      * - `to` cannot be the zero address.\\r\\n      * - `tokenId` token must exist and be owned by `from`.\\r\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n      *\\r\\n      * Emits a {Transfer} event.\\r\\n      */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\r\\n}\"\r\n    },\r\n    \"contracts/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n// solhint-disable-next-line compiler-version\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport \\\"./AddressUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\r\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\r\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\r\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\r\\n *\\r\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\r\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\r\\n *\\r\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\r\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\r\\n */\\r\\nabstract contract Initializable {\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract has been initialized.\\r\\n     */\\r\\n    bool private _initialized;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract is in the process of being initialized.\\r\\n     */\\r\\n    bool private _initializing;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\r\\n     */\\r\\n    modifier initializer() {\\r\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\r\\n\\r\\n        bool isTopLevelCall = !_initializing;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = true;\\r\\n            _initialized = true;\\r\\n        }\\r\\n\\r\\n        _;\\r\\n\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns true if and only if the function is running in the constructor\\r\\n    function _isConstructor() private view returns (bool) {\\r\\n        return !AddressUpgradeable.isContract(address(this));\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/MappedSinglyLinkedList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nlibrary MappedSinglyLinkedList{\\r\\n\\r\\n  address public constant SENTINEL = address(0x1);\\r\\n\\r\\n  struct Mapping {\\r\\n    uint256 count;\\r\\n\\r\\n    mapping(address => address) addressMap;\\r\\n  }\\r\\n\\r\\n  function initialize(Mapping storage self) internal {\\r\\n    require(self.count == 0, \\\"MAPPEDSINGLYLINKEDLIST: ALREADY_INIT\\\");\\r\\n    self.addressMap[SENTINEL] = SENTINEL;\\r\\n  }\\r\\n\\r\\n  function start(Mapping storage self) internal view returns (address) {\\r\\n    return self.addressMap[SENTINEL];\\r\\n  }\\r\\n\\r\\n  function next(Mapping storage self, address current) internal view returns (address) {\\r\\n    return self.addressMap[current];\\r\\n  }\\r\\n\\r\\n  function end(Mapping storage) internal pure returns (address) {\\r\\n    return SENTINEL;\\r\\n  }\\r\\n\\r\\n  function addAddresses(Mapping storage self, address[] memory addresses) internal {\\r\\n    for (uint256 i = 0; i < addresses.length; i++) {\\r\\n      addAddress(self, addresses[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function addAddress(Mapping storage self, address newAddress) internal {\\r\\n    require(newAddress != SENTINEL && newAddress != address(0), \\\"MAPPEDSINGLYLINKEDLIST: INVALID_ADDRESS\\\");\\r\\n    require(self.addressMap[newAddress] == address(0), \\\"MAPPEDSINGLYLINKEDLIST: ALREADY_ADDED\\\");\\r\\n    self.addressMap[newAddress] = self.addressMap[SENTINEL];\\r\\n    self.addressMap[SENTINEL] = newAddress;\\r\\n    self.count = self.count + 1;\\r\\n  }\\r\\n\\r\\n  function removeAddress(Mapping storage self, address prevAddress, address addr) internal {\\r\\n    require(addr != SENTINEL && addr != address(0), \\\"MAPPEDSINGLYLINKEDLIST: INVALID_ADDRESS\\\");\\r\\n    require(self.addressMap[prevAddress] == addr, \\\"MAPPEDSINGLYLINKEDLIST: INVALID_ADDRESS\\\");\\r\\n    self.addressMap[prevAddress] = self.addressMap[addr];\\r\\n    delete self.addressMap[addr];\\r\\n    self.count = self.count - 1;\\r\\n  }\\r\\n\\r\\n  function contains(Mapping storage self, address addr) internal view returns (bool) {\\r\\n    return addr != SENTINEL && addr != address(0) && self.addressMap[addr] != address(0);\\r\\n  }\\r\\n\\r\\n  function addressArray(Mapping storage self) internal view returns (address[] memory) {\\r\\n    address[] memory array = new address[](self.count);\\r\\n    uint256 count;\\r\\n    address currentAddress = self.addressMap[SENTINEL];\\r\\n    while (currentAddress != address(0) && currentAddress != SENTINEL) {\\r\\n      array[count] = currentAddress;\\r\\n      currentAddress = self.addressMap[currentAddress];\\r\\n      count++;\\r\\n    }\\r\\n    return array;\\r\\n  }\\r\\n\\r\\n  function clearAll(Mapping storage self) internal {\\r\\n    address currentAddress = self.addressMap[SENTINEL];\\r\\n    while (currentAddress != address(0) && currentAddress != SENTINEL) {\\r\\n      address nextAddress = self.addressMap[currentAddress];\\r\\n      delete self.addressMap[currentAddress];\\r\\n      currentAddress = nextAddress;\\r\\n    }\\r\\n    self.addressMap[SENTINEL] = SENTINEL;\\r\\n    self.count = 0;\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"contracts/MultipleWinners.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport \\\"./PeriodicPrizeStrategy.sol\\\";\\r\\n\\r\\ncontract MultipleWinners is PeriodicPrizeStrategy {\\r\\n\\r\\n  uint256 internal __numberOfWinners;\\r\\n  bool public splitExternalErc20Awards;\\r\\n\\r\\n  event SplitExternalErc20AwardsSet(bool splitExternalErc20Awards);\\r\\n  event NumberOfWinnersSet(uint256 numberOfWinners);\\r\\n  event NoWinners();\\r\\n\\r\\n  function initializeMultipleWinners (\\r\\n    uint256 _prizePeriodStart,\\r\\n    uint256 _prizePeriodSeconds,\\r\\n    PrizePool _prizePool,\\r\\n    TicketInterface _ticket,\\r\\n    RNGInterface _rng,\\r\\n    uint256 _numberOfWinners\\r\\n  ) public initializer {\\r\\n    IERC20Upgradeable[] memory _externalErc20Awards;\\r\\n\\r\\n    PeriodicPrizeStrategy.initialize(\\r\\n      _prizePeriodStart,\\r\\n      _prizePeriodSeconds,\\r\\n      _prizePool,\\r\\n      _ticket,\\r\\n      _rng,\\r\\n      _externalErc20Awards\\r\\n    );\\r\\n\\r\\n    _setNumberOfWinners(_numberOfWinners);\\r\\n  }\\r\\n\\r\\n  function _distribute(uint256 randomNumber) internal override {\\r\\n    uint256 prize = prizePool.captureAwardBalance();\\r\\n    address mainWinner = ticket.draw(randomNumber);\\r\\n\\r\\n    if (mainWinner == address(0)) {\\r\\n      emit NoWinners();\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    _awardExternalErc721s(mainWinner);\\r\\n    address[] memory winners = new address[](__numberOfWinners);\\r\\n    winners[0] = mainWinner;\\r\\n    \\r\\n    uint256 nextRandom = randomNumber;\\r\\n    for (uint256 winnerCount = 1; winnerCount < __numberOfWinners; winnerCount++) {\\r\\n      bytes32 nextRandomHash = keccak256(abi.encodePacked(nextRandom + 499 + winnerCount*521));\\r\\n      nextRandom = uint256(nextRandomHash);\\r\\n      winners[winnerCount] = ticket.draw(nextRandom);\\r\\n    }\\r\\n\\r\\n    uint256 prizeShare = prize.div(winners.length);\\r\\n    if (prizeShare > 0) {\\r\\n      for (uint i = 0; i < winners.length; i++) {\\r\\n        _awardTickets(winners[i], prizeShare);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (splitExternalErc20Awards) {\\r\\n      address currentToken = externalErc20s.start();\\r\\n      while (currentToken != address(0) && currentToken != externalErc20s.end()) {\\r\\n        uint256 balance = IERC20Upgradeable(currentToken).balanceOf(address(prizePool));\\r\\n        uint256 split = balance.div(__numberOfWinners);\\r\\n        if (split > 0) {\\r\\n          for (uint256 i = 0; i < winners.length; i++) {\\r\\n            prizePool.awardExternalERC20(winners[i], currentToken, split);\\r\\n          }\\r\\n        }\\r\\n        currentToken = externalErc20s.next(currentToken);\\r\\n      }\\r\\n    } else {\\r\\n      _awardExternalErc20s(mainWinner);\\r\\n    }\\r\\n  }\\r\\n  \\r\\n  function setSplitExternalErc20Awards(bool _splitExternalErc20Awards) external onlyOwner requireAwardNotInProgress {\\r\\n    splitExternalErc20Awards = _splitExternalErc20Awards;\\r\\n\\r\\n    emit SplitExternalErc20AwardsSet(splitExternalErc20Awards);\\r\\n  }\\r\\n\\r\\n  function setNumberOfWinners(uint256 count) external onlyOwner requireAwardNotInProgress {\\r\\n    _setNumberOfWinners(count);\\r\\n  }\\r\\n\\r\\n  function numberOfWinners() external view returns (uint256) {\\r\\n    return __numberOfWinners;\\r\\n  }\\r\\n\\r\\n  function _setNumberOfWinners(uint256 count) internal {\\r\\n    require(count > 0, \\\"MULTIPLEWINNERS: WINNERS_GTE_ONE\\\");\\r\\n\\r\\n    __numberOfWinners = count;\\r\\n    emit NumberOfWinnersSet(count);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/MultipleWinnersBuilder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ControlledTokenBuilder.sol\\\";\\nimport \\\"./MultipleWinnersProxyFactory.sol\\\";\\n\\n/* solium-disable security/no-block-members */\\ncontract MultipleWinnersBuilder {\\n\\n  event MultipleWinnersCreated(address indexed prizeStrategy);\\n\\n  struct MultipleWinnersConfig {\\n    RNGInterface rngService;\\n    uint256 prizePeriodStart;\\n    uint256 prizePeriodSeconds;\\n    string ticketName;\\n    string ticketSymbol;\\n    uint256 ticketCreditLimitMantissa;\\n    uint256 ticketCreditRateMantissa;\\n    uint256 numberOfWinners;\\n    bool splitExternalErc20Awards;\\n  }\\n\\n  MultipleWinnersProxyFactory public multipleWinnersProxyFactory;\\n  ControlledTokenBuilder public controlledTokenBuilder;\\n\\n  constructor (\\n    MultipleWinnersProxyFactory _multipleWinnersProxyFactory,\\n    ControlledTokenBuilder _controlledTokenBuilder\\n  ) public {\\n    require(address(_multipleWinnersProxyFactory) != address(0), \\\"MULTIPLEWINNERSBUILDER: MULTIPLEWINNERSPROXYFACTORY_NOT_ZERO\\\");\\n    require(address(_controlledTokenBuilder) != address(0), \\\"MULTIPLEWINNERSBUILDER:TOKEN_BUILDER_NOT_ZERO\\\");\\n    multipleWinnersProxyFactory = _multipleWinnersProxyFactory;\\n    controlledTokenBuilder = _controlledTokenBuilder;\\n  }\\n\\n  function createMultipleWinners(\\n    PrizePool prizePool,\\n    MultipleWinnersConfig memory prizeStrategyConfig,\\n    uint8 decimals,\\n    address owner\\n  ) external returns (MultipleWinners) {\\n    MultipleWinners mw = multipleWinnersProxyFactory.create();\\n\\n    Ticket ticket = _createTicket(\\n      prizeStrategyConfig.ticketName,\\n      prizeStrategyConfig.ticketSymbol,\\n      decimals,\\n      prizePool\\n    );\\n\\n    mw.initializeMultipleWinners(\\n      prizeStrategyConfig.prizePeriodStart,\\n      prizeStrategyConfig.prizePeriodSeconds,\\n      prizePool,\\n      ticket,\\n      prizeStrategyConfig.rngService,\\n      prizeStrategyConfig.numberOfWinners\\n    );\\n\\n    if (prizeStrategyConfig.splitExternalErc20Awards) {\\n      mw.setSplitExternalErc20Awards(true);\\n    }\\n\\n    mw.transferOwnership(owner);\\n    emit MultipleWinnersCreated(address(mw));\\n\\n    return mw;\\n  }\\n\\n  function createMultipleWinnersFromExistingPrizeStrategy(\\n    PeriodicPrizeStrategy prizeStrategy,\\n    uint256 numberOfWinners\\n  ) external returns (MultipleWinners) {\\n    MultipleWinners mw = multipleWinnersProxyFactory.create();\\n\\n    mw.initializeMultipleWinners(\\n      prizeStrategy.prizePeriodStartedAt(),\\n      prizeStrategy.prizePeriodSeconds(),\\n      prizeStrategy.prizePool(),\\n      prizeStrategy.ticket(),\\n      prizeStrategy.rng(),\\n      numberOfWinners\\n    );\\n\\n    mw.transferOwnership(msg.sender);\\n    emit MultipleWinnersCreated(address(mw));\\n\\n    return mw;\\n  }\\n\\n  function _createTicket(\\n    string memory name,\\n    string memory token,\\n    uint8 decimals,\\n    PrizePool prizePool\\n  ) internal returns (Ticket) {\\n    return controlledTokenBuilder.createTicket(\\n      ControlledTokenBuilder.ControlledTokenConfig(\\n        name,\\n        token,\\n        decimals,\\n        prizePool\\n      )\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/MultipleWinnersProxyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport \\\"./MultipleWinners.sol\\\";\\r\\nimport \\\"./ProxyFactory.sol\\\";\\r\\n\\r\\ncontract MultipleWinnersProxyFactory is ProxyFactory {\\r\\n\\r\\n  MultipleWinners public instance;\\r\\n\\r\\n  constructor () public {\\r\\n    instance = new MultipleWinners();\\r\\n  }\\r\\n\\r\\n  function create() external returns (MultipleWinners) {\\r\\n    return MultipleWinners(deployMinimal(address(instance), \\\"\\\"));\\r\\n  }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport \\\"./ContextUpgradeable.sol\\\";\\r\\nimport \\\"./Initializable.sol\\\";\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    function __Ownable_init() internal initializer {\\r\\n        __Context_init_unchained();\\r\\n        __Ownable_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __Ownable_init_unchained() internal initializer {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n    uint256[49] private __gap;\\r\\n}\"\r\n    },\r\n    \"contracts/PeriodicPrizeStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport \\\"./OwnableUpgradeable.sol\\\";\\r\\nimport \\\"./SafeMathUpgradeable.sol\\\";\\r\\nimport \\\"./SafeCastUpgradeable.sol\\\";\\r\\nimport \\\"./ERC165CheckerUpgradeable.sol\\\";\\r\\nimport \\\"./IERC20Upgradeable.sol\\\";\\r\\nimport \\\"./SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"./AddressUpgradeable.sol\\\";\\r\\nimport \\\"./MappedSinglyLinkedList.sol\\\";\\r\\n\\r\\nimport \\\"./Constants.sol\\\";\\r\\nimport \\\"./FixedPoint.sol\\\";\\r\\n\\r\\nimport \\\"./RNGInterface.sol\\\";\\r\\nimport \\\"./TokenControllerInterface.sol\\\";\\r\\nimport \\\"./TicketInterface.sol\\\";\\r\\nimport \\\"./PeriodicPrizeStrategyListenerInterface.sol\\\";\\r\\nimport \\\"./PeriodicPrizeStrategyListenerLibrary.sol\\\";\\r\\n\\r\\nimport \\\"./BeforeAwardListener.sol\\\";\\r\\nimport \\\"./TokenListener.sol\\\";\\r\\nimport \\\"./ControlledToken.sol\\\";\\r\\nimport \\\"./PrizePool.sol\\\";\\r\\n\\r\\n\\r\\n/* solium-disable security/no-block-members */\\r\\nabstract contract PeriodicPrizeStrategy is Initializable,\\r\\n                                           OwnableUpgradeable,\\r\\n                                           TokenListener {\\r\\n\\r\\n  using SafeMathUpgradeable for uint256;\\r\\n  using SafeCastUpgradeable for uint256;\\r\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n  using MappedSinglyLinkedList for MappedSinglyLinkedList.Mapping;\\r\\n  using AddressUpgradeable for address;\\r\\n  using ERC165CheckerUpgradeable for address;\\r\\n\\r\\n  uint256 internal constant ETHEREUM_BLOCK_TIME_ESTIMATE_MANTISSA = 13.4 ether;\\r\\n\\r\\n  event PrizePoolOpened(\\r\\n    address indexed operator,\\r\\n    uint256 indexed prizePeriodStartedAt\\r\\n  );\\r\\n\\r\\n  event RngRequestFailed();\\r\\n\\r\\n  event PrizePoolAwardStarted(\\r\\n    address indexed operator,\\r\\n    address indexed prizePool,\\r\\n    uint32 indexed rngRequestId,\\r\\n    uint32 rngLockBlock\\r\\n  );\\r\\n\\r\\n  event PrizePoolAwardCancelled(\\r\\n    address indexed operator,\\r\\n    address indexed prizePool,\\r\\n    uint32 indexed rngRequestId,\\r\\n    uint32 rngLockBlock\\r\\n  );\\r\\n\\r\\n  event PrizePoolAwarded(\\r\\n    address indexed operator,\\r\\n    uint256 randomNumber\\r\\n  );\\r\\n\\r\\n  event RngServiceUpdated(\\r\\n    RNGInterface indexed rngService\\r\\n  );\\r\\n\\r\\n  event TokenListenerUpdated(\\r\\n    TokenListenerInterface indexed tokenListener\\r\\n  );\\r\\n\\r\\n  event RngRequestTimeoutSet(\\r\\n    uint32 rngRequestTimeout\\r\\n  );\\r\\n\\r\\n  event PrizePeriodSecondsUpdated(\\r\\n    uint256 prizePeriodSeconds\\r\\n  );\\r\\n\\r\\n  event BeforeAwardListenerSet(\\r\\n    BeforeAwardListenerInterface indexed beforeAwardListener\\r\\n  );\\r\\n\\r\\n  event PeriodicPrizeStrategyListenerSet(\\r\\n    PeriodicPrizeStrategyListenerInterface indexed periodicPrizeStrategyListener\\r\\n  );\\r\\n\\r\\n  event ExternalErc721AwardAdded(\\r\\n    IERC721Upgradeable indexed externalErc721,\\r\\n    uint256[] tokenIds\\r\\n  );\\r\\n\\r\\n  event ExternalErc20AwardAdded(\\r\\n    IERC20Upgradeable indexed externalErc20\\r\\n  );\\r\\n\\r\\n  event ExternalErc721AwardRemoved(\\r\\n    IERC721Upgradeable indexed externalErc721Award\\r\\n  );\\r\\n\\r\\n  event ExternalErc20AwardRemoved(\\r\\n    IERC20Upgradeable indexed externalErc20Award\\r\\n  );\\r\\n\\r\\n  event Initialized(\\r\\n    uint256 prizePeriodStart,\\r\\n    uint256 prizePeriodSeconds,\\r\\n    PrizePool indexed prizePool,\\r\\n    TicketInterface ticket,\\r\\n    RNGInterface rng,\\r\\n    IERC20Upgradeable[] externalErc20Awards\\r\\n  );\\r\\n\\r\\n  struct RngRequest {\\r\\n    uint32 id;\\r\\n    uint32 lockBlock;\\r\\n    uint32 requestedAt;\\r\\n  }\\r\\n\\r\\n  PrizePool public prizePool;\\r\\n  TicketInterface public ticket;\\r\\n  IERC20Upgradeable public sponsorship;\\r\\n  RNGInterface public rng;\\r\\n  uint256 public prizePeriodStartedAt;\\r\\n  uint256 public prizePeriodSeconds;\\r\\n  MappedSinglyLinkedList.Mapping internal externalErc20s;\\r\\n  MappedSinglyLinkedList.Mapping internal externalErc721s;\\r\\n  \\r\\n  mapping (IERC721Upgradeable => uint256[]) internal externalErc721TokenIds;\\r\\n\\r\\n  TokenListenerInterface public tokenListener;\\r\\n  BeforeAwardListenerInterface public beforeAwardListener;\\r\\n  PeriodicPrizeStrategyListenerInterface public periodicPrizeStrategyListener;\\r\\n\\r\\n  RngRequest internal rngRequest;\\r\\n  uint32 public rngRequestTimeout;\\r\\n\\r\\n  function initialize (\\r\\n    uint256 _prizePeriodStart,\\r\\n    uint256 _prizePeriodSeconds,\\r\\n    PrizePool _prizePool,\\r\\n    TicketInterface _ticket,\\r\\n    RNGInterface _rng,\\r\\n    IERC20Upgradeable[] memory externalErc20Awards\\r\\n  ) public initializer {\\r\\n    require(address(_prizePool) != address(0), \\\"PERIODICPRIZESTRATEGY: PRIZE_POOL_NOT_ZERO\\\");\\r\\n    require(address(_ticket) != address(0), \\\"PERIODICPRIZESTRATEGY: TICKET_NOT_ZERO\\\");\\r\\n    require(address(_rng) != address(0), \\\"PERIODICPRIZESTRATEGY: RNG_NOT_ZERO\\\");\\r\\n    \\r\\n    prizePool = _prizePool;\\r\\n    ticket = _ticket;\\r\\n    rng = _rng;\\r\\n    _setPrizePeriodSeconds(_prizePeriodSeconds);\\r\\n\\r\\n    __Ownable_init();\\r\\n    Constants.REGISTRY.setInterfaceImplementer(address(this), Constants.TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\\r\\n    externalErc20s.initialize();\\r\\n    for (uint256 i = 0; i < externalErc20Awards.length; i++) {\\r\\n      _addExternalErc20Award(externalErc20Awards[i]);\\r\\n    }\\r\\n\\r\\n    prizePeriodStartedAt = _prizePeriodStart;\\r\\n    prizePeriodSeconds = _prizePeriodSeconds;\\r\\n\\r\\n    externalErc721s.initialize();\\r\\n    _setRngRequestTimeout(1800);\\r\\n\\r\\n    emit Initialized(\\r\\n      _prizePeriodStart,\\r\\n      _prizePeriodSeconds,\\r\\n      _prizePool,\\r\\n      _ticket,\\r\\n      _rng,\\r\\n      externalErc20Awards\\r\\n    );\\r\\n    emit PrizePoolOpened(_msgSender(), prizePeriodStartedAt);\\r\\n  }\\r\\n\\r\\n  function startAward() external requireCanStartAward {\\r\\n    (address feeToken, uint256 requestFee) = rng.getRequestFee();\\r\\n    if (feeToken != address(0) && requestFee > 0) {\\r\\n      IERC20Upgradeable(feeToken).safeApprove(address(rng), requestFee);\\r\\n    }\\r\\n\\r\\n    (uint32 requestId, uint32 lockBlock) = rng.requestRandomNumber();\\r\\n    rngRequest.id = requestId;\\r\\n    rngRequest.lockBlock = lockBlock;\\r\\n    rngRequest.requestedAt = _currentTime().toUint32();\\r\\n\\r\\n    emit PrizePoolAwardStarted(_msgSender(), address(prizePool), requestId, lockBlock);\\r\\n  }\\r\\n\\r\\n  function completeAward() external requireCanCompleteAward {\\r\\n    uint256 randomNumber = rng.randomNumber(rngRequest.id);\\r\\n    delete rngRequest;\\r\\n\\r\\n    if (address(beforeAwardListener) != address(0)) {\\r\\n      beforeAwardListener.beforePrizePoolAwarded(randomNumber, prizePeriodStartedAt);\\r\\n    }\\r\\n    _distribute(randomNumber);\\r\\n    if (address(periodicPrizeStrategyListener) != address(0)) {\\r\\n      periodicPrizeStrategyListener.afterPrizePoolAwarded(randomNumber, prizePeriodStartedAt);\\r\\n    }\\r\\n\\r\\n    prizePeriodStartedAt = _calculateNextPrizePeriodStartTime(_currentTime());\\r\\n\\r\\n    emit PrizePoolAwarded(_msgSender(), randomNumber);\\r\\n    emit PrizePoolOpened(_msgSender(), prizePeriodStartedAt);\\r\\n  }\\r\\n\\r\\n  function cancelAward() public {\\r\\n    require(isRngTimedOut(), \\\"PERIODICPRIZESTRATEGY: RNG_NOT_TIMEDOUT\\\");\\r\\n    uint32 requestId = rngRequest.id;\\r\\n    uint32 lockBlock = rngRequest.lockBlock;\\r\\n    delete rngRequest;\\r\\n    emit RngRequestFailed();\\r\\n    emit PrizePoolAwardCancelled(msg.sender, address(prizePool), requestId, lockBlock);\\r\\n  }\\r\\n\\r\\n  function estimateRemainingBlocksToPrize(uint256 secondsPerBlockMantissa) public view returns (uint256) {\\r\\n    return FixedPoint.divideUintByMantissa(\\r\\n      _prizePeriodRemainingSeconds(),\\r\\n      secondsPerBlockMantissa\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function calculateNextPrizePeriodStartTime(uint256 currentTime) external view returns (uint256) {\\r\\n    return _calculateNextPrizePeriodStartTime(currentTime);\\r\\n  }\\r\\n\\r\\n  function beforeTokenTransfer(address from, address to, uint256 amount, address controlledToken) external override onlyPrizePool {\\r\\n    require(from != to, \\\"PERIODICPRIZESTRATEGY: TRANSFER_TO_SELF\\\");\\r\\n\\r\\n    if (controlledToken == address(ticket)) {\\r\\n      _requireAwardNotInProgress();\\r\\n    }\\r\\n\\r\\n    if (address(tokenListener) != address(0)) {\\r\\n      tokenListener.beforeTokenTransfer(from, to, amount, controlledToken);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function beforeTokenMint(\\r\\n    address to,\\r\\n    uint256 amount,\\r\\n    address controlledToken\\r\\n  )\\r\\n    external\\r\\n    override\\r\\n    onlyPrizePool\\r\\n  {\\r\\n    if (controlledToken == address(ticket)) {\\r\\n      _requireAwardNotInProgress();\\r\\n    }\\r\\n    if (address(tokenListener) != address(0)) {\\r\\n      tokenListener.beforeTokenMint(to, amount, controlledToken);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function setTokenListener(TokenListenerInterface _tokenListener) external onlyOwner requireAwardNotInProgress {\\r\\n    require(address(0) == address(_tokenListener) || address(_tokenListener).supportsInterface(TokenListenerLibrary.ERC165_INTERFACE_ID_TOKEN_LISTENER), \\\"PERIODICPRIZESTRATEGY: TOKEN_LISTERNER_INVALID\\\");\\r\\n    tokenListener = _tokenListener;\\r\\n    emit TokenListenerUpdated(tokenListener);\\r\\n  }\\r\\n\\r\\n  function setBeforeAwardListener(BeforeAwardListenerInterface _beforeAwardListener) external onlyOwner requireAwardNotInProgress {\\r\\n    require(\\r\\n      address(0) == address(_beforeAwardListener) || address(_beforeAwardListener).supportsInterface(BeforeAwardListenerLibrary.ERC165_INTERFACE_ID_BEFORE_AWARD_LISTENER),\\r\\n      \\\"PERIODICPRIZESTRATEGY: BEFOREAWARDLISTENER_INVALID\\\"\\r\\n    );\\r\\n\\r\\n    beforeAwardListener = _beforeAwardListener;\\r\\n    emit BeforeAwardListenerSet(_beforeAwardListener);\\r\\n  }\\r\\n\\r\\n  function setPeriodicPrizeStrategyListener(PeriodicPrizeStrategyListenerInterface _periodicPrizeStrategyListener) external onlyOwner requireAwardNotInProgress {\\r\\n    require(\\r\\n      address(0) == address(_periodicPrizeStrategyListener) || address(_periodicPrizeStrategyListener).supportsInterface(PeriodicPrizeStrategyListenerLibrary.ERC165_INTERFACE_ID_PERIODIC_PRIZE_STRATEGY_LISTENER),\\r\\n      \\\"PERIODICPRIZESTRATEGY: PRIZESTRATEGYLISTERNER_INVALID\\\"\\r\\n    );\\r\\n\\r\\n    periodicPrizeStrategyListener = _periodicPrizeStrategyListener;\\r\\n    emit PeriodicPrizeStrategyListenerSet(_periodicPrizeStrategyListener);\\r\\n  }\\r\\n\\r\\n function setRngService(RNGInterface rngService) external onlyOwner requireAwardNotInProgress {\\r\\n    require(!isRngRequested(), \\\"PERIODICPRIZESTRATEGY: RNG_IN_FLIGHT\\\");\\r\\n\\r\\n    rng = rngService;\\r\\n    emit RngServiceUpdated(rngService);\\r\\n  }\\r\\n\\r\\n  function setRngRequestTimeout(uint32 _rngRequestTimeout) external onlyOwner requireAwardNotInProgress {\\r\\n    _setRngRequestTimeout(_rngRequestTimeout);\\r\\n  }\\r\\n\\r\\n  function setPrizePeriodSeconds(uint256 _prizePeriodSeconds) external onlyOwner requireAwardNotInProgress {\\r\\n    _setPrizePeriodSeconds(_prizePeriodSeconds);\\r\\n  }\\r\\n\\r\\n  function addExternalErc20Awards(IERC20Upgradeable[] calldata _externalErc20s) external onlyOwnerOrListener requireAwardNotInProgress {\\r\\n    for (uint256 i = 0; i < _externalErc20s.length; i++) {\\r\\n      _addExternalErc20Award(_externalErc20s[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function removeExternalErc20Award(IERC20Upgradeable _externalErc20, IERC20Upgradeable _prevExternalErc20) external onlyOwner requireAwardNotInProgress {\\r\\n    externalErc20s.removeAddress(address(_prevExternalErc20), address(_externalErc20));\\r\\n    emit ExternalErc20AwardRemoved(_externalErc20);\\r\\n  }\\r\\n\\r\\n  function addExternalErc721Award(IERC721Upgradeable _externalErc721, uint256[] calldata _tokenIds) external onlyOwnerOrListener requireAwardNotInProgress {\\r\\n    require(prizePool.canAwardExternal(address(_externalErc721)), \\\"PERIODICPRIZESTRATEGY: CANNOT_AWARD_EXTERNAL\\\");\\r\\n    require(address(_externalErc721).supportsInterface(Constants.ERC165_INTERFACE_ID_ERC721), \\\"PERIODICPRIZESTRATEGY: ERC721_INVALID\\\");\\r\\n    \\r\\n    if (!externalErc721s.contains(address(_externalErc721))) {\\r\\n      externalErc721s.addAddress(address(_externalErc721));\\r\\n    }\\r\\n\\r\\n    for (uint256 i = 0; i < _tokenIds.length; i++) {\\r\\n      _addExternalErc721Award(_externalErc721, _tokenIds[i]);\\r\\n    }\\r\\n\\r\\n    emit ExternalErc721AwardAdded(_externalErc721, _tokenIds);\\r\\n  }\\r\\n\\r\\n  function removeExternalErc721Award(\\r\\n    IERC721Upgradeable _externalErc721,\\r\\n    IERC721Upgradeable _prevExternalErc721\\r\\n  )\\r\\n    external\\r\\n    onlyOwner\\r\\n    requireAwardNotInProgress\\r\\n  {\\r\\n    externalErc721s.removeAddress(address(_prevExternalErc721), address(_externalErc721));\\r\\n    _removeExternalErc721AwardTokens(_externalErc721);\\r\\n  }\\r\\n\\r\\n  function addExternalErc20Award(IERC20Upgradeable _externalErc20) external onlyOwnerOrListener requireAwardNotInProgress {\\r\\n    _addExternalErc20Award(_externalErc20);\\r\\n  }\\r\\n  \\r\\n  function getExternalErc20Awards() external view returns (address[] memory) {\\r\\n    return externalErc20s.addressArray();\\r\\n  }\\r\\n  \\r\\n  function prizePeriodRemainingSeconds() external view returns (uint256) {\\r\\n    return _prizePeriodRemainingSeconds();\\r\\n  }\\r\\n\\r\\n  function currentPrize() public view returns (uint256) {\\r\\n    return prizePool.awardBalance();\\r\\n  }\\r\\n\\r\\n  function isPrizePeriodOver() external view returns (bool) {\\r\\n    return _isPrizePeriodOver();\\r\\n  }\\r\\n\\r\\n  function prizePeriodEndAt() external view returns (uint256) {\\r\\n    return _prizePeriodEndAt();\\r\\n  }\\r\\n\\r\\n  function canStartAward() external view returns (bool) {\\r\\n    return _isPrizePeriodOver() && !isRngRequested();\\r\\n  }\\r\\n\\r\\n  function canCompleteAward() external view returns (bool) {\\r\\n    return isRngRequested() && isRngCompleted();\\r\\n  }\\r\\n\\r\\n  function isRngRequested() public view returns (bool) {\\r\\n    return rngRequest.id != 0;\\r\\n  }\\r\\n\\r\\n  function isRngCompleted() public view returns (bool) {\\r\\n    return rng.isRequestComplete(rngRequest.id);\\r\\n  }\\r\\n\\r\\n  function getLastRngLockBlock() external view returns (uint32) {\\r\\n    return rngRequest.lockBlock;\\r\\n  }\\r\\n\\r\\n  function getLastRngRequestId() external view returns (uint32) {\\r\\n    return rngRequest.id;\\r\\n  }\\r\\n\\r\\n  function getExternalErc721Awards() external view returns (address[] memory) {\\r\\n    return externalErc721s.addressArray();\\r\\n  }\\r\\n\\r\\n  function getExternalErc721AwardTokenIds(IERC721Upgradeable _externalErc721) external view returns (uint256[] memory) {\\r\\n    return externalErc721TokenIds[_externalErc721];\\r\\n  }\\r\\n\\r\\n  function isRngTimedOut() public view returns (bool) {\\r\\n    if (rngRequest.requestedAt == 0) {\\r\\n      return false;\\r\\n    } else {\\r\\n      return _currentTime() > uint256(rngRequestTimeout).add(rngRequest.requestedAt);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _addExternalErc721Award(IERC721Upgradeable _externalErc721, uint256 _tokenId) internal {\\r\\n    require(IERC721Upgradeable(_externalErc721).ownerOf(_tokenId) == address(prizePool), \\\"PERIODICPRIZESTRATEGY: UNAVAILABLE_TOKEN\\\");\\r\\n    for (uint256 i = 0; i < externalErc721TokenIds[_externalErc721].length; i++) {\\r\\n      if (externalErc721TokenIds[_externalErc721][i] == _tokenId) {\\r\\n        revert(\\\"PERIODICPRIZESTRATEGY: ERC721_DUPLICATE\\\");\\r\\n      }\\r\\n    }\\r\\n    externalErc721TokenIds[_externalErc721].push(_tokenId);\\r\\n  }\\r\\n\\r\\n  function _distribute(uint256 randomNumber) internal virtual;\\r\\n\\r\\n  function _prizePeriodRemainingSeconds() internal view returns (uint256) {\\r\\n    uint256 endAt = _prizePeriodEndAt();\\r\\n    uint256 time = _currentTime();\\r\\n    if (time > endAt) {\\r\\n      return 0;\\r\\n    }\\r\\n    return endAt.sub(time);\\r\\n  }\\r\\n\\r\\n  function _isPrizePeriodOver() internal view returns (bool) {\\r\\n    return _currentTime() >= _prizePeriodEndAt();\\r\\n  }\\r\\n\\r\\n  function _awardTickets(address user, uint256 amount) internal {\\r\\n    prizePool.award(user, amount, address(ticket));\\r\\n  }\\r\\n\\r\\n  function _awardAllExternalTokens(address winner) internal {\\r\\n    _awardExternalErc20s(winner);\\r\\n    _awardExternalErc721s(winner);\\r\\n  }\\r\\n\\r\\n  function _awardExternalErc20s(address winner) internal {\\r\\n    address currentToken = externalErc20s.start();\\r\\n    while (currentToken != address(0) && currentToken != externalErc20s.end()) {\\r\\n      uint256 balance = IERC20Upgradeable(currentToken).balanceOf(address(prizePool));\\r\\n      if (balance > 0) {\\r\\n        prizePool.awardExternalERC20(winner, currentToken, balance);\\r\\n      }\\r\\n      currentToken = externalErc20s.next(currentToken);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _awardExternalErc721s(address winner) internal {\\r\\n    address currentToken = externalErc721s.start();\\r\\n    while (currentToken != address(0) && currentToken != externalErc721s.end()) {\\r\\n      uint256 balance = IERC721Upgradeable(currentToken).balanceOf(address(prizePool));\\r\\n      if (balance > 0) {\\r\\n        prizePool.awardExternalERC721(winner, currentToken, externalErc721TokenIds[IERC721Upgradeable(currentToken)]);\\r\\n        _removeExternalErc721AwardTokens(IERC721Upgradeable(currentToken));\\r\\n      }\\r\\n      currentToken = externalErc721s.next(currentToken);\\r\\n    }\\r\\n    externalErc721s.clearAll();\\r\\n  }\\r\\n\\r\\n  function _prizePeriodEndAt() internal view returns (uint256) {\\r\\n    return prizePeriodStartedAt.add(prizePeriodSeconds);\\r\\n  }\\r\\n\\r\\n  function _currentTime() internal virtual view returns (uint256) {\\r\\n    return block.timestamp;\\r\\n  }\\r\\n\\r\\n  function _currentBlock() internal virtual view returns (uint256) {\\r\\n    return block.number;\\r\\n  }\\r\\n\\r\\n  function _calculateNextPrizePeriodStartTime(uint256 currentTime) internal view returns (uint256) {\\r\\n    uint256 elapsedPeriods = currentTime.sub(prizePeriodStartedAt).div(prizePeriodSeconds);\\r\\n    return prizePeriodStartedAt.add(elapsedPeriods.mul(prizePeriodSeconds));\\r\\n  }\\r\\n\\r\\n  function _setRngRequestTimeout(uint32 _rngRequestTimeout) internal {\\r\\n    require(_rngRequestTimeout > 60, \\\"PeriodicPrizeStrategy/rng-timeout-gt-60-secs\\\");\\r\\n    rngRequestTimeout = _rngRequestTimeout;\\r\\n    emit RngRequestTimeoutSet(rngRequestTimeout);\\r\\n  }\\r\\n\\r\\n  function _setPrizePeriodSeconds(uint256 _prizePeriodSeconds) internal {\\r\\n    require(_prizePeriodSeconds > 0, \\\"PERIODICPRIZESTRATEGY: PRIZE_PERIOD_GREATER_THAN_ZERO\\\");\\r\\n    prizePeriodSeconds = _prizePeriodSeconds;\\r\\n\\r\\n    emit PrizePeriodSecondsUpdated(prizePeriodSeconds);\\r\\n  }\\r\\n\\r\\n  function _addExternalErc20Award(IERC20Upgradeable _externalErc20) internal {\\r\\n    require(address(_externalErc20).isContract(), \\\"PERIODICPRIZESTRATEGY: ERC20_NULL\\\");\\r\\n    require(prizePool.canAwardExternal(address(_externalErc20)), \\\"PERIODICPRIZESTRATEGY: CANNOT_AWARD_EXTERNAL\\\");\\r\\n    (bool succeeded, ) = address(_externalErc20).staticcall(abi.encodeWithSignature(\\\"totalSupply()\\\"));\\r\\n    require(succeeded, \\\"PERIODICPRIZESTRATEGY: ERC20_INVALID\\\");\\r\\n    externalErc20s.addAddress(address(_externalErc20));\\r\\n    emit ExternalErc20AwardAdded(_externalErc20);\\r\\n  }\\r\\n\\r\\n  function _removeExternalErc721AwardTokens(\\r\\n    IERC721Upgradeable _externalErc721\\r\\n  )\\r\\n    internal\\r\\n  {\\r\\n    delete externalErc721TokenIds[_externalErc721];\\r\\n    emit ExternalErc721AwardRemoved(_externalErc721);\\r\\n  }\\r\\n\\r\\n  function _requireAwardNotInProgress() internal view {\\r\\n    uint256 currentBlock = _currentBlock();\\r\\n    require(rngRequest.lockBlock == 0 || currentBlock < rngRequest.lockBlock, \\\"PERIODICPRIZESTRATEGY: RNG_IN_FLIGHT\\\");\\r\\n  }\\r\\n\\r\\n  modifier onlyOwnerOrListener() {\\r\\n    require(_msgSender() == owner() ||\\r\\n            _msgSender() == address(periodicPrizeStrategyListener) ||\\r\\n            _msgSender() == address(beforeAwardListener),\\r\\n            \\\"PERIODICPRIZESTRATEGY: ONLY_OWNER_OR_LISTENER\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier requireAwardNotInProgress() {\\r\\n    _requireAwardNotInProgress();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier requireCanStartAward() {\\r\\n    require(_isPrizePeriodOver(), \\\"PERIODICPRIZESTRATEGY: PRIZE_PERIOD_NOT_OVER\\\");\\r\\n    require(!isRngRequested(), \\\"PERIODICPRIZESTRATEGY: RNG_ALREADY_REQUESTED\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier requireCanCompleteAward() {\\r\\n    require(isRngRequested(), \\\"PERIODICPRIZESTRATEGY: RNG_NOT_REQUESTED\\\");\\r\\n    require(isRngCompleted(), \\\"PERIODICPRIZESTRATEGY: RNG_NOT_COMPLETE\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyPrizePool() {\\r\\n    require(_msgSender() == address(prizePool), \\\"PERIODICPRIZESTRATEGY: ONLY_PRIZE_POOL\\\");\\r\\n    _;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/PeriodicPrizeStrategyListenerInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport \\\"./IERC165Upgradeable.sol\\\";\\r\\n\\r\\n/* solium-disable security/no-block-members */\\r\\ninterface PeriodicPrizeStrategyListenerInterface is IERC165Upgradeable {\\r\\n  function afterPrizePoolAwarded(uint256 randomNumber, uint256 prizePeriodStartedAt) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/PeriodicPrizeStrategyListenerLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nlibrary PeriodicPrizeStrategyListenerLibrary {\\r\\n  bytes4 public constant ERC165_INTERFACE_ID_PERIODIC_PRIZE_STRATEGY_LISTENER = 0x575072c6;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/PrizePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport \\\"./OwnableUpgradeable.sol\\\";\\r\\nimport \\\"./SafeCastUpgradeable.sol\\\";\\r\\nimport \\\"./ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"./IERC721Upgradeable.sol\\\";\\r\\nimport \\\"./ERC165CheckerUpgradeable.sol\\\";\\r\\nimport \\\"./SafeERC20Upgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./FixedPoint.sol\\\";\\r\\nimport \\\"./RegistryInterface.sol\\\";\\r\\nimport \\\"./ReserveInterface.sol\\\";\\r\\nimport \\\"./TokenListenerInterface.sol\\\";\\r\\nimport \\\"./TokenListenerLibrary.sol\\\";\\r\\nimport \\\"./ControlledToken.sol\\\";\\r\\nimport \\\"./TokenControllerInterface.sol\\\";\\r\\nimport \\\"./PrizePoolInterface.sol\\\";\\r\\n\\r\\nabstract contract PrizePool is PrizePoolInterface, OwnableUpgradeable, ReentrancyGuardUpgradeable, TokenControllerInterface {\\r\\n  using SafeMathUpgradeable for uint256;\\r\\n  using SafeCastUpgradeable for uint256;\\r\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n  using ERC165CheckerUpgradeable for address;\\r\\n\\r\\n  event Initialized(\\r\\n    address reserveRegistry,\\r\\n    uint256 maxExitFeeMantissa,\\r\\n    uint256 maxTimelockDuration\\r\\n  );\\r\\n\\r\\n  event ReserveFeeCaptured(\\r\\n    uint256 amount\\r\\n  );\\r\\n\\r\\n  event AwardCaptured(\\r\\n    uint256 amount\\r\\n  );\\r\\n\\r\\n  event Deposited(\\r\\n    address indexed operator,\\r\\n    address indexed to,\\r\\n    address indexed token,\\r\\n    uint256 amount,\\r\\n    address referrer\\r\\n  );\\r\\n\\r\\n  event Awarded(\\r\\n    address indexed winner,\\r\\n    address indexed token,\\r\\n    uint256 amount\\r\\n  );\\r\\n\\r\\n  event AwardedExternalERC20(\\r\\n    address indexed winner,\\r\\n    address indexed token,\\r\\n    uint256 amount\\r\\n  );\\r\\n\\r\\n  event TransferredExternalERC20(\\r\\n    address indexed to,\\r\\n    address indexed token,\\r\\n    uint256 amount\\r\\n  );\\r\\n\\r\\n  event AwardedExternalERC721(\\r\\n    address indexed winner,\\r\\n    address indexed token,\\r\\n    uint256[] tokenIds\\r\\n  );\\r\\n\\r\\n  event InstantWithdrawal(\\r\\n    address indexed operator,\\r\\n    address indexed from,\\r\\n    address indexed token,\\r\\n    uint256 amount,\\r\\n    uint256 redeemed,\\r\\n    uint256 exitFee\\r\\n  );\\r\\n\\r\\n  event ReserveWithdrawal(\\r\\n    address indexed to,\\r\\n    uint256 amount\\r\\n  );\\r\\n\\r\\n  event LiquidityCapSet(\\r\\n    uint256 liquidityCap\\r\\n  );\\r\\n\\r\\n  event CreditPlanSet(\\r\\n    address token,\\r\\n    uint128 creditLimitMantissa,\\r\\n    uint128 creditRateMantissa\\r\\n  );\\r\\n\\r\\n  event PrizeStrategySet(\\r\\n    address indexed prizeStrategy\\r\\n  );\\r\\n\\r\\n  event CreditMinted(\\r\\n    address indexed user,\\r\\n    address indexed token,\\r\\n    uint256 amount\\r\\n  );\\r\\n\\r\\n  event CreditBurned(\\r\\n    address indexed user,\\r\\n    address indexed token,\\r\\n    uint256 amount\\r\\n  );\\r\\n\\r\\n  struct CreditPlan {\\r\\n    uint128 creditLimitMantissa;\\r\\n    uint128 creditRateMantissa;\\r\\n  }\\r\\n\\r\\n  struct CreditBalance {\\r\\n    uint192 balance;\\r\\n    uint32 timestamp;\\r\\n    bool initialized;\\r\\n  }\\r\\n\\r\\n  RegistryInterface public reserveRegistry;\\r\\n  TokenListenerInterface public prizeStrategy;\\r\\n  uint256 public maxExitFeeMantissa;\\r\\n  uint256 public maxTimelockDuration;\\r\\n  uint256 public reserveTotalSupply;\\r\\n  uint256 public liquidityCap;  \\r\\n  ControlledTokenInterface public ticket;\\r\\n  \\r\\n  uint256 internal _currentAwardBalance;\\r\\n  mapping(address => CreditPlan) internal _tokenCreditPlans;\\r\\n  mapping(address => mapping(address => CreditBalance)) internal _tokenCreditBalances;\\r\\n\\r\\n  function initialize (\\r\\n    RegistryInterface _reserveRegistry,\\r\\n    ControlledTokenInterface _ticket,\\r\\n    uint256 _maxExitFeeMantissa,\\r\\n    uint256 _maxTimelockDuration\\r\\n  )\\r\\n    public\\r\\n    initializer\\r\\n  {\\r\\n    require(address(_reserveRegistry) != address(0), \\\"PRIZEPOOL: RESERVEREGISTRY_NOT_ZERO\\\");\\r\\n    ticket = _ticket;\\r\\n\\r\\n    __Ownable_init();\\r\\n    __ReentrancyGuard_init();\\r\\n    _setLiquidityCap(uint256(-1));\\r\\n\\r\\n    reserveRegistry = _reserveRegistry;\\r\\n    maxExitFeeMantissa = _maxExitFeeMantissa;\\r\\n    maxTimelockDuration = _maxTimelockDuration;\\r\\n\\r\\n    emit Initialized(\\r\\n      address(_reserveRegistry),\\r\\n      maxExitFeeMantissa,\\r\\n      maxTimelockDuration\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function depositTo(\\r\\n    address to,\\r\\n    uint256 amount,\\r\\n    address controlledToken,\\r\\n    address referrer\\r\\n  )\\r\\n    external override\\r\\n    onlyTicket(controlledToken)\\r\\n    canAddLiquidity(amount)\\r\\n    nonReentrant\\r\\n  {\\r\\n    address operator = _msgSender();\\r\\n\\r\\n    uint256 mintAmount = amount.sub(amount.div(10));\\r\\n    _mint(to, mintAmount, controlledToken);\\r\\n    \\r\\n    _token().safeTransferFrom(operator, address(this), amount);\\r\\n    _supply(amount);\\r\\n\\r\\n    emit Deposited(operator, to, controlledToken, amount, referrer);\\r\\n  }\\r\\n\\r\\n  function withdrawInstantlyFrom(\\r\\n    address from,\\r\\n    uint256 amount,\\r\\n    address controlledToken,\\r\\n    uint256 maximumExitFee\\r\\n  )\\r\\n    external override\\r\\n    nonReentrant\\r\\n    onlyTicket(controlledToken)\\r\\n    returns (uint256)\\r\\n  {\\r\\n    (uint256 exitFee, uint256 burnedCredit) = _calculateEarlyExitFeeLessBurnedCredit(from, controlledToken, amount);\\r\\n    require(exitFee <= maximumExitFee, \\\"PRIZEPOOL: EXIT_FEE_EXCEEDS_USER_MAXIMUM\\\");\\r\\n\\r\\n    _burnCredit(from, controlledToken, burnedCredit);\\r\\n    ControlledToken(controlledToken).controllerBurnFrom(_msgSender(), from, amount);\\r\\n    uint256 amountLessFee = amount.sub(exitFee);\\r\\n    uint256 redeemed = _redeem(amountLessFee);\\r\\n    _token().safeTransfer(from, redeemed);\\r\\n    emit InstantWithdrawal(_msgSender(), from, controlledToken, amount, redeemed, exitFee);\\r\\n    return exitFee;\\r\\n  }\\r\\n\\r\\n  function withdrawReserve(address to) external override onlyReserve returns (uint256) {\\r\\n    uint256 amount = reserveTotalSupply;\\r\\n    reserveTotalSupply = 0;\\r\\n    uint256 redeemed = _redeem(amount);\\r\\n    _token().safeTransfer(address(to), redeemed);\\r\\n    emit ReserveWithdrawal(to, amount);\\r\\n    return redeemed;\\r\\n  }\\r\\n\\r\\n  function captureAwardBalance() external override nonReentrant returns (uint256) {\\r\\n    uint256 tokenTotalSupply = _tokenTotalSupply();\\r\\n    uint256 currentBalance = _balance();\\r\\n    uint256 totalInterest = (currentBalance > tokenTotalSupply) ? currentBalance.sub(tokenTotalSupply) : 0;\\r\\n    uint256 unaccountedPrizeBalance = (totalInterest > _currentAwardBalance) ? totalInterest.sub(_currentAwardBalance) : 0;\\r\\n\\r\\n    if (unaccountedPrizeBalance > 0) {\\r\\n      uint256 reserveFee = calculateReserveFee(unaccountedPrizeBalance);\\r\\n      if (reserveFee > 0) {\\r\\n        reserveTotalSupply = reserveTotalSupply.add(reserveFee);\\r\\n        unaccountedPrizeBalance = unaccountedPrizeBalance.sub(reserveFee);\\r\\n        emit ReserveFeeCaptured(reserveFee);\\r\\n      }\\r\\n      _currentAwardBalance = _currentAwardBalance.add(unaccountedPrizeBalance);\\r\\n      emit AwardCaptured(unaccountedPrizeBalance);\\r\\n    }\\r\\n\\r\\n    return _currentAwardBalance;\\r\\n  }\\r\\n\\r\\n  function award(\\r\\n    address to,\\r\\n    uint256 amount,\\r\\n    address controlledToken\\r\\n  )\\r\\n    external override\\r\\n    onlyPrizeStrategy\\r\\n    onlyTicket(controlledToken)\\r\\n  {\\r\\n    if (amount == 0) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    require(amount <= _currentAwardBalance, \\\"PRIZEPOOL: AWARD_EXCEEDS_CURRENT_BALANCE\\\");\\r\\n    \\r\\n    _currentAwardBalance = _currentAwardBalance.sub(amount);\\r\\n    _mint(to, amount, controlledToken);\\r\\n    uint256 extraCredit = _calculateEarlyExitFeeNoCredit(controlledToken, amount);\\r\\n    _accrueCredit(to, controlledToken, IERC20Upgradeable(controlledToken).balanceOf(to), extraCredit);\\r\\n\\r\\n    emit Awarded(to, controlledToken, amount);\\r\\n  }\\r\\n\\r\\n  function awardExternalERC20(\\r\\n    address to,\\r\\n    address externalToken,\\r\\n    uint256 amount\\r\\n  )\\r\\n    external override\\r\\n    onlyPrizeStrategy\\r\\n  {\\r\\n    if (_transferOut(to, externalToken, amount)) {\\r\\n      emit AwardedExternalERC20(to, externalToken, amount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function awardExternalERC721(\\r\\n    address to,\\r\\n    address externalToken,\\r\\n    uint256[] calldata tokenIds\\r\\n  )\\r\\n    external override\\r\\n    onlyPrizeStrategy\\r\\n  {\\r\\n    require(_canAwardExternal(externalToken), \\\"PRIZEPOOL: INVALID_EXTERNAL_TOKEN\\\");\\r\\n\\r\\n    if (tokenIds.length == 0) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n      IERC721Upgradeable(externalToken).transferFrom(address(this), to, tokenIds[i]);\\r\\n    }\\r\\n\\r\\n    emit AwardedExternalERC721(to, externalToken, tokenIds);\\r\\n  }\\r\\n\\r\\n  function calculateEarlyExitFee(\\r\\n    address from,\\r\\n    address controlledToken,\\r\\n    uint256 amount\\r\\n  )\\r\\n    external override\\r\\n    returns (\\r\\n      uint256 exitFee,\\r\\n      uint256 burnedCredit\\r\\n    )\\r\\n  {\\r\\n    return _calculateEarlyExitFeeLessBurnedCredit(from, controlledToken, amount);\\r\\n  }\\r\\n\\r\\n  function calculateReserveFee(uint256 amount) public view returns (uint256) {\\r\\n    ReserveInterface reserve = ReserveInterface(reserveRegistry.lookup());\\r\\n    if (address(reserve) == address(0)) {\\r\\n      return 0;\\r\\n    }\\r\\n    uint256 reserveRateMantissa = reserve.reserveRateMantissa();\\r\\n    if (reserveRateMantissa == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    return FixedPoint.multiplyUintByMantissa(amount, reserveRateMantissa);\\r\\n  }\\r\\n\\r\\n  function estimateCreditAccrualTime(\\r\\n    address _controlledToken,\\r\\n    uint256 _principal,\\r\\n    uint256 _interest\\r\\n  )\\r\\n    external override\\r\\n    view\\r\\n    returns (uint256 durationSeconds)\\r\\n  {\\r\\n    return _estimateCreditAccrualTime(_controlledToken, _principal, _interest);\\r\\n  }\\r\\n\\r\\n  function setCreditPlanOf(\\r\\n    address _controlledToken,\\r\\n    uint128 _creditRateMantissa,\\r\\n    uint128 _creditLimitMantissa\\r\\n  )\\r\\n    external override\\r\\n    onlyTicket(_controlledToken)\\r\\n    onlyOwner\\r\\n  {\\r\\n    _tokenCreditPlans[_controlledToken] = CreditPlan({\\r\\n      creditLimitMantissa: _creditLimitMantissa,\\r\\n      creditRateMantissa: _creditRateMantissa\\r\\n    });\\r\\n\\r\\n    emit CreditPlanSet(_controlledToken, _creditLimitMantissa, _creditRateMantissa);\\r\\n  }\\r\\n\\r\\n  function setLiquidityCap(uint256 _liquidityCap) external override onlyOwner {\\r\\n    _setLiquidityCap(_liquidityCap);\\r\\n  }\\r\\n\\r\\n  function setPrizeStrategy(TokenListenerInterface _prizeStrategy) external override onlyOwner {\\r\\n    _setPrizeStrategy(_prizeStrategy);\\r\\n  }\\r\\n\\r\\n  function token() external override view returns (address) {\\r\\n    return address(_token());\\r\\n  }\\r\\n\\r\\n  function balance() external returns (uint256) {\\r\\n    return _balance();\\r\\n  }\\r\\n\\r\\n  function canAwardExternal(address _externalToken) external view returns (bool) {\\r\\n    return _canAwardExternal(_externalToken);\\r\\n  }\\r\\n\\r\\n  function awardBalance() external override view returns (uint256) {\\r\\n    return _currentAwardBalance;\\r\\n  }\\r\\n\\r\\n  function accountedBalance() external override view returns (uint256) {\\r\\n    return _tokenTotalSupply();\\r\\n  }\\r\\n\\r\\n  function balanceOfCredit(address user, address controlledToken) external override onlyTicket(controlledToken) returns (uint256) {\\r\\n    _accrueCredit(user, controlledToken, IERC20Upgradeable(controlledToken).balanceOf(user), 0);\\r\\n    return _tokenCreditBalances[controlledToken][user].balance;\\r\\n  }\\r\\n\\r\\n  function creditPlanOf(\\r\\n    address controlledToken\\r\\n  )\\r\\n    external override view\\r\\n    returns (\\r\\n      uint128 creditLimitMantissa,\\r\\n      uint128 creditRateMantissa\\r\\n    )\\r\\n  {\\r\\n    creditLimitMantissa = _tokenCreditPlans[controlledToken].creditLimitMantissa;\\r\\n    creditRateMantissa = _tokenCreditPlans[controlledToken].creditRateMantissa;\\r\\n  }\\r\\n\\r\\n  function transferExternalERC20(\\r\\n    address to,\\r\\n    address externalToken,\\r\\n    uint256 amount\\r\\n  )\\r\\n    external override\\r\\n    onlyPrizeStrategy\\r\\n  {\\r\\n    if (_transferOut(to, externalToken, amount)) {\\r\\n      emit TransferredExternalERC20(to, externalToken, amount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function beforeTokenTransfer(address from, address to, uint256 amount) external override onlyTicket(msg.sender) {\\r\\n    if (from != address(0)) {\\r\\n      uint256 fromBeforeBalance = IERC20Upgradeable(msg.sender).balanceOf(from);\\r\\n      uint256 newCreditBalance = _calculateCreditBalance(from, msg.sender, fromBeforeBalance, 0);\\r\\n\\r\\n      if (from != to) {\\r\\n        newCreditBalance = _applyCreditLimit(msg.sender, fromBeforeBalance.sub(amount), newCreditBalance);\\r\\n      }\\r\\n\\r\\n      _updateCreditBalance(from, msg.sender, newCreditBalance);\\r\\n    }\\r\\n    if (to != address(0) && to != from) {\\r\\n      _accrueCredit(to, msg.sender, IERC20Upgradeable(msg.sender).balanceOf(to), 0);\\r\\n    }\\r\\n    if (from != address(0) && address(prizeStrategy) != address(0)) {\\r\\n      prizeStrategy.beforeTokenTransfer(from, to, amount, msg.sender);\\r\\n    }\\r\\n  }\\r\\n \\r\\n  function calculateTimelockDuration(\\r\\n    address from,\\r\\n    address controlledToken,\\r\\n    uint256 amount\\r\\n  )\\r\\n    external override\\r\\n    returns (\\r\\n      uint256 durationSeconds,\\r\\n      uint256 burnedCredit\\r\\n    )\\r\\n  {\\r\\n    return _calculateTimelockDuration(from, controlledToken, amount);\\r\\n  }\\r\\n  \\r\\n  function _limitExitFee(uint256 withdrawalAmount, uint256 exitFee) internal view returns (uint256) {\\r\\n    uint256 maxFee = FixedPoint.multiplyUintByMantissa(withdrawalAmount, maxExitFeeMantissa);\\r\\n    if (exitFee > maxFee) {\\r\\n      exitFee = maxFee;\\r\\n    }\\r\\n    return exitFee;\\r\\n  }\\r\\n\\r\\n  function _transferOut(\\r\\n    address to,\\r\\n    address externalToken,\\r\\n    uint256 amount\\r\\n  )\\r\\n    internal\\r\\n    returns (bool)\\r\\n  {\\r\\n    require(_canAwardExternal(externalToken), \\\"PRIZEPOOL: INVALID_EXTERNAL_TOKEN\\\");\\r\\n\\r\\n    if (amount == 0) {\\r\\n      return false;\\r\\n    }\\r\\n    IERC20Upgradeable(externalToken).safeTransfer(to, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function _mint(address to, uint256 amount, address controlledToken) internal {\\r\\n    if (address(prizeStrategy) != address(0)) {\\r\\n      prizeStrategy.beforeTokenMint(to, amount, controlledToken);\\r\\n    }\\r\\n    ControlledToken(controlledToken).controllerMint(to, amount);\\r\\n  }\\r\\n\\r\\n  function _calculateTimelockDuration(\\r\\n    address from,\\r\\n    address controlledToken,\\r\\n    uint256 amount\\r\\n  )\\r\\n    internal\\r\\n    returns (\\r\\n      uint256 durationSeconds,\\r\\n      uint256 burnedCredit\\r\\n    )\\r\\n  {\\r\\n    (uint256 exitFee, uint256 _burnedCredit) = _calculateEarlyExitFeeLessBurnedCredit(from, controlledToken, amount);\\r\\n    uint256 duration = _estimateCreditAccrualTime(controlledToken, amount, exitFee);\\r\\n    if (duration > maxTimelockDuration) {\\r\\n      duration = maxTimelockDuration;\\r\\n    }\\r\\n    return (duration, _burnedCredit);\\r\\n  }\\r\\n\\r\\n  function _calculateEarlyExitFeeNoCredit(address controlledToken, uint256 amount) internal view returns (uint256) {\\r\\n    return _limitExitFee(\\r\\n      amount,\\r\\n      FixedPoint.multiplyUintByMantissa(amount, _tokenCreditPlans[controlledToken].creditLimitMantissa)\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function _estimateCreditAccrualTime(\\r\\n    address _controlledToken,\\r\\n    uint256 _principal,\\r\\n    uint256 _interest\\r\\n  )\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256 durationSeconds)\\r\\n  {\\r\\n    uint256 accruedPerSecond = FixedPoint.multiplyUintByMantissa(_principal, _tokenCreditPlans[_controlledToken].creditRateMantissa);\\r\\n    if (accruedPerSecond == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    return _interest.div(accruedPerSecond);\\r\\n  }\\r\\n\\r\\n  function _burnCredit(address user, address controlledToken, uint256 credit) internal {\\r\\n    _tokenCreditBalances[controlledToken][user].balance = uint256(_tokenCreditBalances[controlledToken][user].balance).sub(credit).toUint128();\\r\\n\\r\\n    emit CreditBurned(user, controlledToken, credit);\\r\\n  }\\r\\n\\r\\n  function _accrueCredit(address user, address controlledToken, uint256 controlledTokenBalance, uint256 extra) internal {\\r\\n    _updateCreditBalance(\\r\\n      user,\\r\\n      controlledToken,\\r\\n      _calculateCreditBalance(user, controlledToken, controlledTokenBalance, extra)\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function _calculateCreditBalance(address user, address controlledToken, uint256 controlledTokenBalance, uint256 extra) internal view returns (uint256) {\\r\\n    uint256 newBalance;\\r\\n    CreditBalance storage creditBalance = _tokenCreditBalances[controlledToken][user];\\r\\n    if (!creditBalance.initialized) {\\r\\n      newBalance = 0;\\r\\n    } else {\\r\\n      uint256 credit = _calculateAccruedCredit(user, controlledToken, controlledTokenBalance);\\r\\n      newBalance = _applyCreditLimit(controlledToken, controlledTokenBalance, uint256(creditBalance.balance).add(credit).add(extra));\\r\\n    }\\r\\n    return newBalance;\\r\\n  }\\r\\n\\r\\n  function _updateCreditBalance(address user, address controlledToken, uint256 newBalance) internal {\\r\\n    uint256 oldBalance = _tokenCreditBalances[controlledToken][user].balance;\\r\\n\\r\\n    _tokenCreditBalances[controlledToken][user] = CreditBalance({\\r\\n      balance: newBalance.toUint128(),\\r\\n      timestamp: _currentTime().toUint32(),\\r\\n      initialized: true\\r\\n    });\\r\\n\\r\\n    if (oldBalance < newBalance) {\\r\\n      emit CreditMinted(user, controlledToken, newBalance.sub(oldBalance));\\r\\n    } else {\\r\\n      emit CreditBurned(user, controlledToken, oldBalance.sub(newBalance));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _applyCreditLimit(address controlledToken, uint256 controlledTokenBalance, uint256 creditBalance) internal view returns (uint256) {\\r\\n    uint256 creditLimit = FixedPoint.multiplyUintByMantissa(\\r\\n      controlledTokenBalance,\\r\\n      _tokenCreditPlans[controlledToken].creditLimitMantissa\\r\\n    );\\r\\n    if (creditBalance > creditLimit) {\\r\\n      creditBalance = creditLimit;\\r\\n    }\\r\\n\\r\\n    return creditBalance;\\r\\n  }\\r\\n\\r\\n  function _calculateAccruedCredit(address user, address controlledToken, uint256 controlledTokenBalance) internal view returns (uint256) {\\r\\n    uint256 userTimestamp = _tokenCreditBalances[controlledToken][user].timestamp;\\r\\n\\r\\n    if (!_tokenCreditBalances[controlledToken][user].initialized) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    uint256 deltaTime = _currentTime().sub(userTimestamp);\\r\\n    uint256 creditPerSecond = FixedPoint.multiplyUintByMantissa(controlledTokenBalance, _tokenCreditPlans[controlledToken].creditRateMantissa);\\r\\n    return deltaTime.mul(creditPerSecond);\\r\\n  }\\r\\n\\r\\n  function _calculateEarlyExitFeeLessBurnedCredit(\\r\\n    address from,\\r\\n    address controlledToken,\\r\\n    uint256 amount\\r\\n  )\\r\\n    internal\\r\\n    returns (\\r\\n      uint256 earlyExitFee,\\r\\n      uint256 creditBurned\\r\\n    )\\r\\n  {\\r\\n    uint256 controlledTokenBalance = IERC20Upgradeable(controlledToken).balanceOf(from);\\r\\n    require(controlledTokenBalance >= amount, \\\"PRIZEPOOL: INSUFFICIENT_FUNDS\\\");\\r\\n    _accrueCredit(from, controlledToken, controlledTokenBalance, 0);\\r\\n\\r\\n    uint256 remainingExitFee = _calculateEarlyExitFeeNoCredit(controlledToken, controlledTokenBalance.sub(amount));\\r\\n    uint256 availableCredit;\\r\\n    if (_tokenCreditBalances[controlledToken][from].balance >= remainingExitFee) {\\r\\n      availableCredit = uint256(_tokenCreditBalances[controlledToken][from].balance).sub(remainingExitFee);\\r\\n    }\\r\\n\\r\\n    uint256 totalExitFee = _calculateEarlyExitFeeNoCredit(controlledToken, amount);\\r\\n    creditBurned = (availableCredit > totalExitFee) ? totalExitFee : availableCredit;\\r\\n    earlyExitFee = totalExitFee.sub(creditBurned);\\r\\n    return (earlyExitFee, creditBurned);\\r\\n  }\\r\\n\\r\\n  function _setLiquidityCap(uint256 _liquidityCap) internal {\\r\\n    liquidityCap = _liquidityCap;\\r\\n    emit LiquidityCapSet(_liquidityCap);\\r\\n  }\\r\\n\\r\\n  function _setPrizeStrategy(TokenListenerInterface _prizeStrategy) internal {\\r\\n    require(address(_prizeStrategy) != address(0), \\\"PRIZEPOOL: PRIZESTRATEGY_NOT_ZERO\\\");\\r\\n    require(address(_prizeStrategy).supportsInterface(TokenListenerLibrary.ERC165_INTERFACE_ID_TOKEN_LISTENER), \\\"PRIZEPOOL: PRIZESTRATEGY_INVALID\\\");\\r\\n    prizeStrategy = _prizeStrategy;\\r\\n\\r\\n    emit PrizeStrategySet(address(_prizeStrategy));\\r\\n  }\\r\\n\\r\\n  function _currentTime() internal virtual view returns (uint256) {\\r\\n    return block.timestamp;\\r\\n  }\\r\\n\\r\\n  function _tokenTotalSupply() internal view returns (uint256) {\\r\\n    uint256 total = reserveTotalSupply;\\r\\n    total = total.add(IERC20Upgradeable(ticket).totalSupply());\\r\\n    return total;\\r\\n  }\\r\\n\\r\\n  function _canAddLiquidity(uint256 _amount) internal view returns (bool) {\\r\\n    uint256 tokenTotalSupply = _tokenTotalSupply();\\r\\n    return (tokenTotalSupply.add(_amount) <= liquidityCap);\\r\\n  }\\r\\n\\r\\n  function _canAwardExternal(address _externalToken) internal virtual view returns (bool);\\r\\n\\r\\n  function _token() internal virtual view returns (IERC20Upgradeable);\\r\\n\\r\\n  function _balance() internal virtual returns (uint256);\\r\\n\\r\\n  function _supply(uint256 mintAmount) internal virtual;\\r\\n\\r\\n  function _redeem(uint256 redeemAmount) internal virtual returns (uint256);\\r\\n\\r\\n  modifier onlyTicket(address controlledToken) {\\r\\n    require(address(ticket) == controlledToken, \\\"PRIZEPOOL: ONLY_TICKET\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyPrizeStrategy() {\\r\\n    require(_msgSender() == address(prizeStrategy), \\\"PRIZEPOOL: ONLY_PRIZESTRATEGY\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier canAddLiquidity(uint256 _amount) {\\r\\n    require(_canAddLiquidity(_amount), \\\"PRIZEPOOL: EXCEEDS_LIQUIDITY_CAP\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyReserve() {\\r\\n    ReserveInterface reserve = ReserveInterface(reserveRegistry.lookup());\\r\\n    require(address(reserve) == msg.sender, \\\"PRIZEPOOL: ONLY_RESERVE\\\");\\r\\n    _;\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"contracts/PrizePoolInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport \\\"./TokenListenerInterface.sol\\\";\\r\\nimport \\\"./ControlledTokenInterface.sol\\\";\\r\\n\\r\\ninterface PrizePoolInterface {\\r\\n\\r\\n  function depositTo(\\r\\n    address to,\\r\\n    uint256 amount,\\r\\n    address controlledToken,\\r\\n    address referrer\\r\\n  )\\r\\n    external;\\r\\n\\r\\n  function withdrawInstantlyFrom(\\r\\n    address from,\\r\\n    uint256 amount,\\r\\n    address controlledToken,\\r\\n    uint256 maximumExitFee\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  function withdrawReserve(address to) external returns (uint256);\\r\\n  function awardBalance() external view returns (uint256);\\r\\n  function captureAwardBalance() external returns (uint256);\\r\\n\\r\\n  function award(\\r\\n    address to,\\r\\n    uint256 amount,\\r\\n    address controlledToken\\r\\n  )\\r\\n    external;\\r\\n\\r\\n  function transferExternalERC20(\\r\\n    address to,\\r\\n    address externalToken,\\r\\n    uint256 amount\\r\\n  )\\r\\n    external;\\r\\n\\r\\n  function awardExternalERC20(\\r\\n    address to,\\r\\n    address externalToken,\\r\\n    uint256 amount\\r\\n  )\\r\\n    external;\\r\\n\\r\\n  function awardExternalERC721(\\r\\n    address to,\\r\\n    address externalToken,\\r\\n    uint256[] calldata tokenIds\\r\\n  )\\r\\n    external;\\r\\n\\r\\n  function calculateTimelockDuration(\\r\\n    address from,\\r\\n    address controlledToken,\\r\\n    uint256 amount\\r\\n  )\\r\\n    external\\r\\n    returns (\\r\\n      uint256 durationSeconds,\\r\\n      uint256 burnedCredit\\r\\n    );\\r\\n\\r\\n  function calculateEarlyExitFee(\\r\\n    address from,\\r\\n    address controlledToken,\\r\\n    uint256 amount\\r\\n  )\\r\\n    external\\r\\n    returns (\\r\\n      uint256 exitFee,\\r\\n      uint256 burnedCredit\\r\\n    );\\r\\n\\r\\n  function estimateCreditAccrualTime(\\r\\n    address _controlledToken,\\r\\n    uint256 _principal,\\r\\n    uint256 _interest\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (uint256 durationSeconds);\\r\\n\\r\\n  function balanceOfCredit(address user, address controlledToken) external returns (uint256);\\r\\n\\r\\n  function setCreditPlanOf(\\r\\n    address _controlledToken,\\r\\n    uint128 _creditRateMantissa,\\r\\n    uint128 _creditLimitMantissa\\r\\n  )\\r\\n    external;\\r\\n\\r\\n   function creditPlanOf(\\r\\n    address controlledToken\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint128 creditLimitMantissa,\\r\\n      uint128 creditRateMantissa\\r\\n    );\\r\\n\\r\\n  function setLiquidityCap(uint256 _liquidityCap) external;\\r\\n  function setPrizeStrategy(TokenListenerInterface _prizeStrategy) external;\\r\\n  function token() external view returns (address);\\r\\n  function accountedBalance() external view returns (uint256);\\r\\n}\"\r\n    },\r\n    \"contracts/ProxyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity =0.6.12;\\r\\n\\r\\n// solium-disable security/no-inline-assembly\\r\\n// solium-disable security/no-low-level-calls\\r\\ncontract ProxyFactory {\\r\\n\\r\\n  event ProxyCreated(address proxy);\\r\\n\\r\\n  function deployMinimal(address _logic, bytes memory _data) public returns (address proxy) {\\r\\n    // Adapted from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\\r\\n    bytes20 targetBytes = bytes20(_logic);\\r\\n    assembly {\\r\\n      let clone := mload(0x40)\\r\\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\r\\n      mstore(add(clone, 0x14), targetBytes)\\r\\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\r\\n      proxy := create(0, clone, 0x37)\\r\\n    }\\r\\n\\r\\n    emit ProxyCreated(address(proxy));\\r\\n\\r\\n    if(_data.length > 0) {\\r\\n      (bool success,) = proxy.call(_data);\\r\\n      require(success, \\\"PROXYFACTORY:CONSTRUCTOR_CALL_FAILED\\\");\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/RNGInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\ninterface RNGInterface {\\r\\n  event RandomNumberRequested(uint32 indexed requestId, address indexed sender);\\r\\n  event RandomNumberCompleted(uint32 indexed requestId, uint256 randomNumber);\\r\\n\\r\\n  function getLastRequestId() external view returns (uint32 requestId);\\r\\n  function getRequestFee() external view returns (address feeToken, uint256 requestFee);\\r\\n  function requestRandomNumber() external returns (uint32 requestId, uint32 lockBlock);\\r\\n  function isRequestComplete(uint32 requestId) external view returns (bool isCompleted);\\r\\n  function randomNumber(uint32 requestId) external returns (uint256 randomNum);\\r\\n}\"\r\n    },\r\n    \"contracts/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\nimport \\\"./Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    function __ReentrancyGuard_init() internal initializer {\\r\\n        __ReentrancyGuard_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n    uint256[49] private __gap;\\r\\n}\"\r\n    },\r\n    \"contracts/RegistryInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\ninterface RegistryInterface {\\r\\n  function lookup() external view returns (address);\\r\\n}\"\r\n    },\r\n    \"contracts/ReserveInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\ninterface ReserveInterface {\\r\\n  function reserveRateMantissa() external view returns (uint256);\\r\\n}\"\r\n    },\r\n    \"contracts/SafeCastUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\r\\n * easily result in undesired exploitation or bugs, since developers usually\\r\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\r\\n * reverting the transaction when such an operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n *\\r\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\r\\n * all math on `uint256` and `int256` and then downcasting.\\r\\n */\\r\\nlibrary SafeCastUpgradeable {\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint128).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint128` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 128 bits\\r\\n     */\\r\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\r\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\r\\n        return uint128(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint64).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint64` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 64 bits\\r\\n     */\\r\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\r\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\r\\n        return uint64(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint32).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint32` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 32 bits\\r\\n     */\\r\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\r\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\r\\n        return uint32(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint16).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint16` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 16 bits\\r\\n     */\\r\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\r\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\r\\n        return uint16(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint8).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint8` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 8 bits.\\r\\n     */\\r\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\r\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\r\\n        return uint8(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a signed int256 into an unsigned uint256.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must be greater than or equal to 0.\\r\\n     */\\r\\n    function toUint256(int256 value) internal pure returns (uint256) {\\r\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\r\\n        return uint256(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int128 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int128 or\\r\\n     * greater than largest int128).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int128` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 128 bits\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function toInt128(int256 value) internal pure returns (int128) {\\r\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\r\\n        return int128(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int64 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int64 or\\r\\n     * greater than largest int64).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int64` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 64 bits\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function toInt64(int256 value) internal pure returns (int64) {\\r\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\r\\n        return int64(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int32 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int32 or\\r\\n     * greater than largest int32).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int32` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 32 bits\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function toInt32(int256 value) internal pure returns (int32) {\\r\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\r\\n        return int32(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int16 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int16 or\\r\\n     * greater than largest int16).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int16` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 16 bits\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function toInt16(int256 value) internal pure returns (int16) {\\r\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\r\\n        return int16(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted int8 from int256, reverting on\\r\\n     * overflow (when the input is less than smallest int8 or\\r\\n     * greater than largest int8).\\r\\n     *\\r\\n     * Counterpart to Solidity's `int8` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 8 bits.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function toInt8(int256 value) internal pure returns (int8) {\\r\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\r\\n        return int8(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an unsigned uint256 into a signed int256.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must be less than or equal to maxInt256.\\r\\n     */\\r\\n    function toInt256(uint256 value) internal pure returns (int256) {\\r\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\r\\n        return int256(value);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport \\\"./IERC20Upgradeable.sol\\\";\\r\\nimport \\\"./SafeMathUpgradeable.sol\\\";\\r\\nimport \\\"./AddressUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20Upgradeable {\\r\\n    using SafeMathUpgradeable for uint256;\\r\\n    using AddressUpgradeable for address;\\r\\n\\r\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\r\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    uint256 c = a + b;\\r\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n    uint256 c = a - b;\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    uint256 c = a * b;\\r\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\r\\n    uint256 c = a / b;\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\r\\n    return a % b;\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"contracts/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMathUpgradeable {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        uint256 c = a + b;\\r\\n        if (c < a) return (false, 0);\\r\\n        return (true, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b > a) return (false, 0);\\r\\n        return (true, a - b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) return (true, 0);\\r\\n        uint256 c = a * b;\\r\\n        if (c / a != b) return (false, 0);\\r\\n        return (true, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b == 0) return (false, 0);\\r\\n        return (true, a / b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b == 0) return (false, 0);\\r\\n        return (true, a % b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) return 0;\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/SortitionSumTreeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nlibrary SortitionSumTreeFactory {\\r\\n    struct SortitionSumTree {\\r\\n        uint K; \\r\\n        uint[] stack;\\r\\n        uint[] nodes;\\r\\n        mapping(bytes32 => uint) IDsToNodeIndexes;\\r\\n        mapping(uint => bytes32) nodeIndexesToIDs;\\r\\n    }\\r\\n\\r\\n    struct SortitionSumTrees {\\r\\n        mapping(bytes32 => SortitionSumTree) sortitionSumTrees;\\r\\n    }\\r\\n\\r\\n    function createTree(SortitionSumTrees storage self, bytes32 _key, uint _K) internal {\\r\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\r\\n        require(tree.K == 0, \\\"Tree already exists.\\\");\\r\\n        require(_K > 1, \\\"K must be greater than one.\\\");\\r\\n        tree.K = _K;\\r\\n        tree.stack = new uint[](0);\\r\\n        tree.nodes = new uint[](0);\\r\\n        tree.nodes.push(0);\\r\\n    }\\r\\n\\r\\n    function set(SortitionSumTrees storage self, bytes32 _key, uint _value, bytes32 _ID) internal {\\r\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\r\\n        uint treeIndex = tree.IDsToNodeIndexes[_ID];\\r\\n\\r\\n        if (treeIndex == 0) { \\r\\n            if (_value != 0) { \\r\\n                if (tree.stack.length == 0) { \\r\\n                    treeIndex = tree.nodes.length;\\r\\n                    tree.nodes.push(_value);\\r\\n\\r\\n                    if (treeIndex != 1 && (treeIndex - 1) % tree.K == 0) { \\r\\n                        uint parentIndex = treeIndex / tree.K;\\r\\n                        bytes32 parentID = tree.nodeIndexesToIDs[parentIndex];\\r\\n                        uint newIndex = treeIndex + 1;\\r\\n                        tree.nodes.push(tree.nodes[parentIndex]);\\r\\n                        delete tree.nodeIndexesToIDs[parentIndex];\\r\\n                        tree.IDsToNodeIndexes[parentID] = newIndex;\\r\\n                        tree.nodeIndexesToIDs[newIndex] = parentID;\\r\\n                    }\\r\\n                } else { \\r\\n                    treeIndex = tree.stack[tree.stack.length - 1];\\r\\n                    tree.stack.pop();\\r\\n                    tree.nodes[treeIndex] = _value;\\r\\n                }\\r\\n\\r\\n                tree.IDsToNodeIndexes[_ID] = treeIndex;\\r\\n                tree.nodeIndexesToIDs[treeIndex] = _ID;\\r\\n\\r\\n                updateParents(self, _key, treeIndex, true, _value);\\r\\n            }\\r\\n        } else { \\r\\n            if (_value == 0) { \\r\\n                uint value = tree.nodes[treeIndex];\\r\\n                tree.nodes[treeIndex] = 0;\\r\\n                tree.stack.push(treeIndex);\\r\\n                delete tree.IDsToNodeIndexes[_ID];\\r\\n                delete tree.nodeIndexesToIDs[treeIndex];\\r\\n\\r\\n                updateParents(self, _key, treeIndex, false, value);\\r\\n            } else if (_value != tree.nodes[treeIndex]) { \\r\\n                // Set.\\r\\n                bool plusOrMinus = tree.nodes[treeIndex] <= _value;\\r\\n                uint plusOrMinusValue = plusOrMinus ? _value - tree.nodes[treeIndex] : tree.nodes[treeIndex] - _value;\\r\\n                tree.nodes[treeIndex] = _value;\\r\\n\\r\\n                updateParents(self, _key, treeIndex, plusOrMinus, plusOrMinusValue);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function queryLeafs(\\r\\n        SortitionSumTrees storage self,\\r\\n        bytes32 _key,\\r\\n        uint _cursor,\\r\\n        uint _count\\r\\n    ) internal view returns(uint startIndex, uint[] memory values, bool hasMore) {\\r\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\r\\n\\r\\n        for (uint i = 0; i < tree.nodes.length; i++) {\\r\\n            if ((tree.K * i) + 1 >= tree.nodes.length) {\\r\\n                startIndex = i;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint loopStartIndex = startIndex + _cursor;\\r\\n        values = new uint[](loopStartIndex + _count > tree.nodes.length ? tree.nodes.length - loopStartIndex : _count);\\r\\n        uint valuesIndex = 0;\\r\\n        for (uint j = loopStartIndex; j < tree.nodes.length; j++) {\\r\\n            if (valuesIndex < _count) {\\r\\n                values[valuesIndex] = tree.nodes[j];\\r\\n                valuesIndex++;\\r\\n            } else {\\r\\n                hasMore = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function draw(SortitionSumTrees storage self, bytes32 _key, uint _drawnNumber) internal view returns(bytes32 ID) {\\r\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\r\\n        uint treeIndex = 0;\\r\\n        uint currentDrawnNumber = _drawnNumber % tree.nodes[0];\\r\\n\\r\\n        while ((tree.K * treeIndex) + 1 < tree.nodes.length)  \\r\\n            for (uint i = 1; i <= tree.K; i++) { \\r\\n                uint nodeIndex = (tree.K * treeIndex) + i;\\r\\n                uint nodeValue = tree.nodes[nodeIndex];\\r\\n\\r\\n                if (currentDrawnNumber >= nodeValue) currentDrawnNumber -= nodeValue; \\r\\n                else { \\r\\n                    treeIndex = nodeIndex;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        \\r\\n        ID = tree.nodeIndexesToIDs[treeIndex];\\r\\n    }\\r\\n\\r\\n    function stakeOf(SortitionSumTrees storage self, bytes32 _key, bytes32 _ID) internal view returns(uint value) {\\r\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\r\\n        uint treeIndex = tree.IDsToNodeIndexes[_ID];\\r\\n\\r\\n        if (treeIndex == 0) value = 0;\\r\\n        else value = tree.nodes[treeIndex];\\r\\n    }\\r\\n\\r\\n    function total(SortitionSumTrees storage self, bytes32 _key) internal view returns (uint) {\\r\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\r\\n        if (tree.nodes.length == 0) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return tree.nodes[0];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateParents(SortitionSumTrees storage self, bytes32 _key, uint _treeIndex, bool _plusOrMinus, uint _value) private {\\r\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\r\\n\\r\\n        uint parentIndex = _treeIndex;\\r\\n        while (parentIndex != 0) {\\r\\n            parentIndex = (parentIndex - 1) / tree.K;\\r\\n            tree.nodes[parentIndex] = _plusOrMinus ? tree.nodes[parentIndex] + _value : tree.nodes[parentIndex] - _value;\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/Ticket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport \\\"./SortitionSumTreeFactory.sol\\\";\\r\\nimport \\\"./UniformRandomNumber.sol\\\";\\r\\n\\r\\nimport \\\"./ControlledToken.sol\\\";\\r\\nimport \\\"./TicketInterface.sol\\\";\\r\\n\\r\\ncontract Ticket is ControlledToken, TicketInterface {\\r\\n  using SortitionSumTreeFactory for SortitionSumTreeFactory.SortitionSumTrees;\\r\\n\\r\\n  bytes32 constant private TREE_KEY = keccak256(\\\"ArchiPrize/Ticket\\\");\\r\\n  uint256 constant private MAX_TREE_LEAVES = 5;\\r\\n\\r\\n  SortitionSumTreeFactory.SortitionSumTrees internal sortitionSumTrees;\\r\\n\\r\\n  function initialize(\\r\\n    string memory _name,\\r\\n    string memory _symbol,\\r\\n    uint8 _decimals,\\r\\n    TokenControllerInterface _controller\\r\\n  )\\r\\n    public\\r\\n    virtual\\r\\n    override\\r\\n    initializer\\r\\n  {\\r\\n    super.initialize(_name, _symbol, _decimals, _controller);\\r\\n    sortitionSumTrees.createTree(TREE_KEY, MAX_TREE_LEAVES);\\r\\n  }\\r\\n\\r\\n  function chanceOf(address user) external view returns (uint256) {\\r\\n    return sortitionSumTrees.stakeOf(TREE_KEY, bytes32(uint256(user)));\\r\\n  }\\r\\n\\r\\n  function draw(uint256 randomNumber) external view override returns (address) {\\r\\n    uint256 bound = totalSupply();\\r\\n    address selected;\\r\\n    if (bound == 0) {\\r\\n      selected = address(0);\\r\\n    } else {\\r\\n      uint256 token = UniformRandomNumber.uniform(randomNumber, bound);\\r\\n      selected = address(uint256(sortitionSumTrees.draw(TREE_KEY, token)));\\r\\n    }\\r\\n    return selected;\\r\\n  }\\r\\n\\r\\n  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\r\\n    super._beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n    if (from == to) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    if (from != address(0)) {\\r\\n      uint256 fromBalance = balanceOf(from).sub(amount);\\r\\n      sortitionSumTrees.set(TREE_KEY, fromBalance, bytes32(uint256(from)));\\r\\n    }\\r\\n\\r\\n    if (to != address(0)) {\\r\\n      uint256 toBalance = balanceOf(to).add(amount);\\r\\n      sortitionSumTrees.set(TREE_KEY, toBalance, bytes32(uint256(to)));\\r\\n    }\\r\\n  }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/TicketInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\ninterface TicketInterface {\\r\\n  function draw(uint256 randomNumber) external view returns (address);\\r\\n}\"\r\n    },\r\n    \"contracts/TicketProxyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport \\\"./Initializable.sol\\\";\\r\\n\\r\\nimport \\\"./Ticket.sol\\\";\\r\\nimport \\\"./ProxyFactory.sol\\\";\\r\\n\\r\\ncontract TicketProxyFactory is ProxyFactory {\\r\\n\\r\\n  Ticket public instance;\\r\\n\\r\\n  constructor () public {\\r\\n    instance = new Ticket();\\r\\n  }\\r\\n\\r\\n  function create() external returns (Ticket) {\\r\\n    return Ticket(deployMinimal(address(instance), \\\"\\\"));\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/TokenControllerInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\ninterface TokenControllerInterface {\\r\\n  function beforeTokenTransfer(address from, address to, uint256 amount) external;\\r\\n}\"\r\n    },\r\n    \"contracts/TokenListener.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport \\\"./TokenListenerInterface.sol\\\";\\r\\nimport \\\"./TokenListenerLibrary.sol\\\";\\r\\nimport \\\"./Constants.sol\\\";\\r\\n\\r\\nabstract contract TokenListener is TokenListenerInterface {\\r\\n  function supportsInterface(bytes4 interfaceId) external override view returns (bool) {\\r\\n    return (\\r\\n      interfaceId == Constants.ERC165_INTERFACE_ID_ERC165 || \\r\\n      interfaceId == TokenListenerLibrary.ERC165_INTERFACE_ID_TOKEN_LISTENER\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/TokenListenerInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport \\\"./IERC165Upgradeable.sol\\\";\\r\\n\\r\\ninterface TokenListenerInterface is IERC165Upgradeable {\\r\\n  function beforeTokenMint(address to, uint256 amount, address controlledToken) external;\\r\\n  function beforeTokenTransfer(address from, address to, uint256 amount, address controlledToken) external;\\r\\n}\"\r\n    },\r\n    \"contracts/TokenListenerLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nlibrary TokenListenerLibrary {\\r\\n  bytes4 public constant ERC165_INTERFACE_ID_TOKEN_LISTENER = 0xff5e34e7;\\r\\n}\"\r\n    },\r\n    \"contracts/UniformRandomNumber.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nlibrary UniformRandomNumber {\\r\\n  function uniform(uint256 _entropy, uint256 _upperBound) internal pure returns (uint256) {\\r\\n    require(_upperBound > 0, \\\"UNIFORMRANDOMNUMBER: MIN_BOUND\\\");\\r\\n    uint256 min = -_upperBound % _upperBound;\\r\\n    uint256 random = _entropy;\\r\\n    while (true) {\\r\\n      if (random >= min) {\\r\\n        break;\\r\\n      }\\r\\n      random = uint256(keccak256(abi.encodePacked(random)));\\r\\n    }\\r\\n    return random % _upperBound;\\r\\n  }\\r\\n}\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract MultipleWinnersProxyFactory\",\"name\":\"_multipleWinnersProxyFactory\",\"type\":\"address\"},{\"internalType\":\"contract ControlledTokenBuilder\",\"name\":\"_controlledTokenBuilder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prizeStrategy\",\"type\":\"address\"}],\"name\":\"MultipleWinnersCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"controlledTokenBuilder\",\"outputs\":[{\"internalType\":\"contract ControlledTokenBuilder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PrizePool\",\"name\":\"prizePool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract RNGInterface\",\"name\":\"rngService\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prizePeriodStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prizePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ticketName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ticketSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ticketCreditLimitMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketCreditRateMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfWinners\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"splitExternalErc20Awards\",\"type\":\"bool\"}],\"internalType\":\"struct MultipleWinnersBuilder.MultipleWinnersConfig\",\"name\":\"prizeStrategyConfig\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"createMultipleWinners\",\"outputs\":[{\"internalType\":\"contract MultipleWinners\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PeriodicPrizeStrategy\",\"name\":\"prizeStrategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numberOfWinners\",\"type\":\"uint256\"}],\"name\":\"createMultipleWinnersFromExistingPrizeStrategy\",\"outputs\":[{\"internalType\":\"contract MultipleWinners\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multipleWinnersProxyFactory\",\"outputs\":[{\"internalType\":\"contract MultipleWinnersProxyFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MultipleWinnersBuilder","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000024cacea2a37100cca2163f006bd1cf6fa5f85ccf000000000000000000000000da7e8fc4ffe73df6f7505e701c9b04e9d08b7238","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}