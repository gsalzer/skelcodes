{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/hging/Downloads/qilin/contracts/SystemSetting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/ISystemSetting.sol\\\";\\n\\ncontract SystemSetting is Ownable, ISystemSetting {\\n    uint256 private _maxInitialLiquidityFunding;   // decimals 6\\n    uint256 private _constantMarginRatio;\\n    mapping (uint32 => bool) private _leverages;\\n    uint256 private _minInitialMargin;             // decimals 6\\n    uint256 private _minAddDeposit;                // decimals 6\\n    uint256 private _minHoldingPeriod;\\n    uint256 private _marginRatio;\\n    uint256 private _positionClosingFee;\\n    uint256 private _liquidationFee;\\n    uint256 private _rebaseInterval;\\n    uint256 private _rebaseRate;\\n    uint256 private _imbalanceThreshold;\\n    uint256 private _minFundTokenRequired;         // decimals 6\\n\\n    uint256 private constant POSITION_CLOSING_FEE_MIN = 1 * 1e15; // 1e15 / 1e18 = 0.1%\\n    uint256 private constant POSITION_CLOSING_FEE_MAX = 5 * 1e15; // 5e15 / 1e18 = 0.5%\\n\\n    uint256 private constant LIQUIDATION_FEE_MIN = 1 * 1e16; // 1e16 / 1e18 = 1%\\n    uint256 private constant LIQUIDATION_FEE_MAX = 5 * 1e16; // 5e16 / 1e18 = 5%\\n\\n    uint256 private constant REBASE_RATE_MIN = 20;\\n    uint256 private constant REBASE_RATE_MAX = 2000;\\n\\n    bool private _active;\\n\\n    function requireSystemActive() external override view {\\n        require(_active, \\\"system is suspended\\\");\\n    }\\n\\n    function resumeSystem() external override onlyOwner {\\n        _active = true;\\n        emit Resume(msg.sender);\\n    }\\n\\n    function suspendSystem() external override onlyOwner {\\n        _active = false;\\n        emit Suspend(msg.sender);\\n    }\\n\\n    function maxInitialLiquidityFunding() external override view returns (uint256) {\\n        return _maxInitialLiquidityFunding;\\n    }\\n\\n    function constantMarginRatio() external override view returns (uint256) {\\n        return _constantMarginRatio;\\n    }\\n\\n    function leverageExist(uint32 leverage_) external override view returns (bool) {\\n        return _leverages[leverage_];\\n    }\\n\\n    function minInitialMargin() external override view returns (uint256) {\\n        return _minInitialMargin;\\n    }\\n\\n    function minAddDeposit() external override view returns (uint256) {\\n        return _minAddDeposit;\\n    }\\n\\n    function minHoldingPeriod() external override view returns (uint) {\\n        return _minHoldingPeriod;\\n    }\\n\\n    function marginRatio() external override view returns (uint256) {\\n        return _marginRatio;\\n    }\\n\\n    function positionClosingFee() external override view returns (uint256) {\\n        return _positionClosingFee;\\n    }\\n\\n    function liquidationFee() external override view returns (uint256) {\\n        return _liquidationFee;\\n    }\\n\\n    function rebaseInterval() external override view returns (uint) {\\n        return _rebaseInterval;\\n    }\\n\\n    function rebaseRate() external override view returns (uint) {\\n        return _rebaseRate;\\n    }\\n\\n    function imbalanceThreshold() external override view returns (uint) {\\n        return _imbalanceThreshold;\\n    }\\n\\n    function minFundTokenRequired() external override view returns (uint) {\\n        return _minFundTokenRequired;\\n    }\\n\\n    function setMaxInitialLiquidityFunding(uint256 maxInitialLiquidityFunding_) external onlyOwner {\\n        _maxInitialLiquidityFunding = maxInitialLiquidityFunding_;\\n    }\\n\\n    function setConstantMarginRatio(uint256 constantMarginRatio_) external onlyOwner {\\n        _constantMarginRatio = constantMarginRatio_;\\n    }\\n\\n    function setMinInitialMargin(uint256 minInitialMargin_) external onlyOwner {\\n        _minInitialMargin = minInitialMargin_;\\n    }\\n\\n    function setMinAddDeposit(uint minAddDeposit_) external onlyOwner {\\n        _minAddDeposit = minAddDeposit_;\\n    }\\n\\n    function setMinHoldingPeriod(uint minHoldingPeriod_) external onlyOwner {\\n        _minHoldingPeriod = minHoldingPeriod_;\\n    }\\n\\n    function setMarginRatio(uint256 marginRatio_) external onlyOwner {\\n        _marginRatio = marginRatio_;\\n    }\\n\\n    function setPositionClosingFee(uint256 positionClosingFee_) external onlyOwner {\\n        require(positionClosingFee_ >= POSITION_CLOSING_FEE_MIN, \\\"positionClosingFee_ should >= 0.1%\\\");\\n        require(positionClosingFee_ <= POSITION_CLOSING_FEE_MAX, \\\"positionClosingFee_ should <= 0.5%\\\");\\n\\n        _positionClosingFee = positionClosingFee_;\\n    }\\n\\n    function setLiquidationFee(uint256 liquidationFee_) external onlyOwner {\\n        require(liquidationFee_ >= LIQUIDATION_FEE_MIN, \\\"liquidationFee_ should >= 10%\\\");\\n        require(liquidationFee_ <= LIQUIDATION_FEE_MAX, \\\"liquidationFee_ should <= 20%\\\");\\n\\n        _liquidationFee = liquidationFee_;\\n    }\\n\\n    function addLeverage(uint32 leverage_) external onlyOwner {\\n        _leverages[leverage_] = true;\\n    }\\n\\n    function deleteLeverage(uint32 leverage_) external onlyOwner {\\n        _leverages[leverage_] = false;\\n    }\\n\\n    function setRebaseInterval(uint rebaseInterval_) external onlyOwner {\\n        _rebaseInterval = rebaseInterval_;\\n    }\\n\\n    function setRebaseRate(uint rebaseRate_) external onlyOwner {\\n        require(rebaseRate_ >= REBASE_RATE_MIN, \\\"rebaseRate_ should >= 200\\\");\\n        require(rebaseRate_ <= REBASE_RATE_MAX, \\\"rebaseRate_ should <= 2000\\\");\\n\\n        _rebaseRate = rebaseRate_;\\n    }\\n\\n    function setImbalanceThreshold(uint imbalanceThreshold_) external onlyOwner {\\n        _imbalanceThreshold = imbalanceThreshold_;\\n    }\\n\\n    function setMinFundTokenRequired(uint minFundTokenRequired_) external onlyOwner {\\n        _minFundTokenRequired = minFundTokenRequired_;\\n    }\\n\\n    function checkOpenPosition(uint position, uint16 level) external view override {\\n        require(_active, \\\"system is suspended\\\");\\n        require(_leverages[level], \\\"Leverage Not Exist\\\");\\n        require(_minInitialMargin <= position, \\\"Too Less Initial Margin\\\");\\n    }\\n\\n    function checkAddDeposit(uint margin) external view override {\\n        require(_active, \\\"system is suspended\\\");\\n        require(_minAddDeposit <= margin, \\\"Too Less Margin\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/hging/Downloads/qilin/contracts/interfaces/ISystemSetting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\ninterface ISystemSetting {\\n    // maxInitialLiquidityFunding\\n    function maxInitialLiquidityFunding() external view returns (uint256);\\n\\n    // constantMarginRatio\\n    function constantMarginRatio() external view returns (uint256);\\n\\n    // leverageExist\\n    function leverageExist(uint32 leverage_) external view returns (bool);\\n\\n    // minInitialMargin\\n    function minInitialMargin() external view returns (uint256);\\n\\n    // minAddDeposit\\n    function minAddDeposit() external view returns (uint256);\\n\\n    // minHoldingPeriod\\n    function minHoldingPeriod() external view returns (uint);\\n\\n    // marginRatio\\n    function marginRatio() external view returns (uint256);\\n\\n    // positionClosingFee\\n    function positionClosingFee() external view returns (uint256);\\n\\n    // liquidationFee\\n    function liquidationFee() external view returns (uint256);\\n\\n    // rebaseInterval\\n    function rebaseInterval() external view returns (uint);\\n\\n    // rebaseRate\\n    function rebaseRate() external view returns (uint);\\n\\n    // imbalanceThreshold\\n    function imbalanceThreshold() external view returns (uint);\\n\\n    // minFundTokenRequired\\n    function minFundTokenRequired() external view returns (uint);\\n\\n    function checkOpenPosition(uint position, uint16 level) external view;\\n    function checkAddDeposit(uint margin) external view;\\n\\n    function requireSystemActive() external;\\n    function resumeSystem() external;\\n    function suspendSystem() external;\\n\\n    event Suspend(address indexed sender);\\n    event Resume(address indexed sender);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Resume\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Suspend\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"leverage_\",\"type\":\"uint32\"}],\"name\":\"addLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"}],\"name\":\"checkAddDeposit\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"level\",\"type\":\"uint16\"}],\"name\":\"checkOpenPosition\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"constantMarginRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"leverage_\",\"type\":\"uint32\"}],\"name\":\"deleteLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imbalanceThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"leverage_\",\"type\":\"uint32\"}],\"name\":\"leverageExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marginRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxInitialLiquidityFunding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAddDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFundTokenRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minHoldingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minInitialMargin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionClosingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requireSystemActive\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumeSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"constantMarginRatio_\",\"type\":\"uint256\"}],\"name\":\"setConstantMarginRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"imbalanceThreshold_\",\"type\":\"uint256\"}],\"name\":\"setImbalanceThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidationFee_\",\"type\":\"uint256\"}],\"name\":\"setLiquidationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marginRatio_\",\"type\":\"uint256\"}],\"name\":\"setMarginRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxInitialLiquidityFunding_\",\"type\":\"uint256\"}],\"name\":\"setMaxInitialLiquidityFunding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAddDeposit_\",\"type\":\"uint256\"}],\"name\":\"setMinAddDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minFundTokenRequired_\",\"type\":\"uint256\"}],\"name\":\"setMinFundTokenRequired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minHoldingPeriod_\",\"type\":\"uint256\"}],\"name\":\"setMinHoldingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minInitialMargin_\",\"type\":\"uint256\"}],\"name\":\"setMinInitialMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionClosingFee_\",\"type\":\"uint256\"}],\"name\":\"setPositionClosingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rebaseInterval_\",\"type\":\"uint256\"}],\"name\":\"setRebaseInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rebaseRate_\",\"type\":\"uint256\"}],\"name\":\"setRebaseRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"suspendSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SystemSetting","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}