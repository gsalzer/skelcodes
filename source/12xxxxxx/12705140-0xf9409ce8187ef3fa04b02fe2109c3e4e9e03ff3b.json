{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\ninterface IERC20 {\r\n    function mint(address _to, uint256 _value) external;\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        returns (bool);\r\n\r\n    function transfer(address _to, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external returns (bool success);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n}\r\n\r\n\r\n/// @title The interface for Graviton lp-token lock-unlock\r\n/// @notice Locks liquidity provision tokens\r\n/// @author Artemij Artamonov - <array.clean@gmail.com>\r\n/// @author Anton Davydov - <fetsorn@gmail.com>\r\ninterface ILockUnlockLP {\r\n    /// @notice User that can grant access permissions and perform privileged actions\r\n    function owner() external view returns (address);\r\n\r\n    /// @notice Transfers ownership of the contract to a new account (`_owner`).\r\n    /// @dev Can only be called by the current owner.\r\n    function setOwner(address _owner) external;\r\n\r\n    /// @notice Look up if locking is allowed\r\n    function canLock() external view returns (bool);\r\n\r\n    /// @notice Sets the permission to lock to `_canLock`\r\n    function setCanLock(bool _canLock) external;\r\n\r\n    /// @notice Look up if the locking of `token` is allowed\r\n    function isAllowedToken(address token) external view returns (bool);\r\n\r\n    /// @notice Look up if the locking of `token` is allowed\r\n    function lockLimit(address token) external view returns (uint256);\r\n\r\n    /// @notice Sets minimum lock amount limit for `token` to `_lockLimit`\r\n    function setLockLimit(address token, uint256 _lockLimit) external;\r\n\r\n    /// @notice The total amount of locked `token`\r\n    function tokenSupply(address token) external view returns (uint256);\r\n\r\n    /// @notice The total amount of all locked lp-tokens\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /// @notice Sets permission to lock `token` to `_isAllowedToken`\r\n    function setIsAllowedToken(address token, bool _isAllowedToken) external;\r\n\r\n    /// @notice The amount of `token` locked by `depositer`\r\n    function balance(address token, address depositer)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /// @notice Locks `amount` of `token` in the name of `receiver`\r\n    function lock(\r\n        address token,\r\n        address receiver,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    /// @notice Transfer `amount` of `token` to the `receiver`\r\n    function unlock(\r\n        address token,\r\n        address receiver,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    /// @notice Event emitted when the owner changes via `#setOwner`.\r\n    /// @param ownerOld The account that was the previous owner of the contract\r\n    /// @param ownerNew The account that became the owner of the contract\r\n    event SetOwner(address indexed ownerOld, address indexed ownerNew);\r\n\r\n    /// @notice Event emitted when the `sender` locks `amount` of `token` lp-tokens in the name of `receiver`\r\n    /// @param token The address of the lp-token\r\n    /// @param sender The account that locked lp-token\r\n    /// @param receiver The account to whose lp-token balance the tokens are added\r\n    /// @param amount The amount of lp-tokens locked\r\n    event Lock(\r\n        address indexed token,\r\n        address indexed sender,\r\n        address indexed receiver,\r\n        uint256 amount\r\n    );\r\n\r\n    /// @notice Event emitted when the `sender` unlocks `amount` of `token` lp-tokens in the name of `receiver`\r\n    /// @param token The address of the lp-token\r\n    /// @param sender The account that unlocked lp-tokens\r\n    /// @param receiver The account to whom the lp-tokens were transferred\r\n    /// @param amount The amount of lp-tokens unlocked\r\n    event Unlock(\r\n        address indexed token,\r\n        address indexed sender,\r\n        address indexed receiver,\r\n        uint256 amount\r\n    );\r\n\r\n    /// @notice Event emitted when the permission to lock token is updated via `#setIsAllowedToken`\r\n    /// @param owner The owner account at the time of change\r\n    /// @param token The lp-token whose permission was updated\r\n    /// @param newBool Updated permission\r\n    event SetIsAllowedToken(\r\n        address indexed owner,\r\n        address indexed token,\r\n        bool indexed newBool\r\n    );\r\n\r\n    /// @notice Event emitted when the minimum lock amount limit updated via `#setLockLimit`\r\n    /// @param owner The owner account at the time of change\r\n    /// @param token The lp-token whose permission was updated\r\n    /// @param _lockLimit New minimum lock amount limit\r\n    event SetLockLimit(\r\n        address indexed owner,\r\n        address indexed token,\r\n        uint256 indexed _lockLimit\r\n    );\r\n\r\n    /// @notice Event emitted when the permission to lock is updated via `#setCanLock`\r\n    /// @param owner The owner account at the time of change\r\n    /// @param newBool Updated permission\r\n    event SetCanLock(\r\n        address indexed owner,\r\n        bool indexed newBool\r\n    );\r\n}\r\n\r\n\r\n/// @title LockUnlockLP\r\n/// @author Artemij Artamonov - <array.clean@gmail.com>\r\n/// @author Anton Davydov - <fetsorn@gmail.com>\r\ncontract LockUnlockLP is ILockUnlockLP {\r\n\r\n    /// @inheritdoc ILockUnlockLP\r\n    address public override owner;\r\n\r\n    modifier isOwner() {\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n\r\n    /// @inheritdoc ILockUnlockLP\r\n    mapping(address => bool) public override isAllowedToken;\r\n    /// @inheritdoc ILockUnlockLP\r\n    mapping(address => uint256) public override lockLimit;\r\n    mapping(address => mapping(address => uint256)) internal _balance;\r\n    /// @inheritdoc ILockUnlockLP\r\n    mapping(address => uint256) public override tokenSupply;\r\n    /// @inheritdoc ILockUnlockLP\r\n    uint256 public override totalSupply;\r\n\r\n    /// @inheritdoc ILockUnlockLP\r\n    bool public override canLock;\r\n\r\n    constructor(address[] memory allowedTokens) {\r\n        owner = msg.sender;\r\n        for (uint256 i = 0; i < allowedTokens.length; i++) {\r\n            isAllowedToken[allowedTokens[i]] = true;\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc ILockUnlockLP\r\n    function setOwner(address _owner) external override isOwner {\r\n        address ownerOld = owner;\r\n        owner = _owner;\r\n        emit SetOwner(ownerOld, _owner);\r\n    }\r\n\r\n    /// @inheritdoc ILockUnlockLP\r\n    function setIsAllowedToken(address token, bool _isAllowedToken)\r\n        external\r\n        override\r\n        isOwner\r\n    {\r\n        isAllowedToken[token] = _isAllowedToken;\r\n        emit SetIsAllowedToken(owner, token, _isAllowedToken);\r\n    }\r\n\r\n    /// @inheritdoc ILockUnlockLP\r\n    function setLockLimit(address token, uint256 _lockLimit)\r\n        external\r\n        override\r\n        isOwner\r\n    {\r\n        lockLimit[token] = _lockLimit;\r\n        emit SetLockLimit(owner, token, _lockLimit);\r\n    }\r\n\r\n    /// @inheritdoc ILockUnlockLP\r\n    function setCanLock(bool _canLock) external override isOwner {\r\n        canLock = _canLock;\r\n        emit SetCanLock(owner, _canLock);\r\n    }\r\n\r\n    /// @inheritdoc ILockUnlockLP\r\n    function balance(address token, address depositer)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balance[token][depositer];\r\n    }\r\n\r\n    /// @inheritdoc ILockUnlockLP\r\n    function lock(\r\n        address token,\r\n        address receiver,\r\n        uint256 amount\r\n    ) external override {\r\n        require(canLock, \"lock is not allowed\");\r\n        require(isAllowedToken[token], \"token not allowed\");\r\n        require(amount >= lockLimit[token], \"limit exceeded\");\r\n        _balance[token][receiver] += amount;\r\n        tokenSupply[token] += amount;\r\n        totalSupply += amount;\r\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\r\n        emit Lock(token, msg.sender, receiver, amount);\r\n    }\r\n\r\n    /// @inheritdoc ILockUnlockLP\r\n    function unlock(\r\n        address token,\r\n        address receiver,\r\n        uint256 amount\r\n    ) external override {\r\n        require(_balance[token][msg.sender] >= amount, \"not enough balance\");\r\n        _balance[token][msg.sender] -= amount;\r\n        tokenSupply[token] -= amount;\r\n        totalSupply -= amount;\r\n        IERC20(token).transfer(receiver, amount);\r\n        emit Unlock(token, msg.sender, receiver, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"allowedTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newBool\",\"type\":\"bool\"}],\"name\":\"SetCanLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newBool\",\"type\":\"bool\"}],\"name\":\"SetIsAllowedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_lockLimit\",\"type\":\"uint256\"}],\"name\":\"SetLockLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerOld\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerNew\",\"type\":\"address\"}],\"name\":\"SetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositer\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAllowedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_canLock\",\"type\":\"bool\"}],\"name\":\"setCanLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAllowedToken\",\"type\":\"bool\"}],\"name\":\"setIsAllowedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockLimit\",\"type\":\"uint256\"}],\"name\":\"setLockLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LockUnlockLP","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://274bb7a33602c76234aa3aa334edecf7202842aa2c456716dd4eda525c09b349"}]}