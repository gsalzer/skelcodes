{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/antonasso/programming/opyn/gamma/contracts/MarginCalculator.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"./packages/oz/SafeMath.sol\\\";\\nimport {OtokenInterface} from \\\"./interfaces/OtokenInterface.sol\\\";\\nimport {OracleInterface} from \\\"./interfaces/OracleInterface.sol\\\";\\nimport {ERC20Interface} from \\\"./interfaces/ERC20Interface.sol\\\";\\nimport {FixedPointInt256 as FPI} from \\\"./libs/FixedPointInt256.sol\\\";\\nimport {MarginVault} from \\\"./libs/MarginVault.sol\\\";\\n\\n/**\\n * @title MarginCalculator\\n * @author Opyn\\n * @notice Calculator module that checks if a given vault is valid, calculates margin requirements, and settlement proceeds\\n */\\ncontract MarginCalculator {\\n    using SafeMath for uint256;\\n    using FPI for FPI.FixedPointInt;\\n\\n    /// @dev oracle module\\n    OracleInterface public oracle;\\n\\n    /// @dev decimals used by strike price and oracle price\\n    uint256 internal constant BASE = 8;\\n\\n    /// @dev FixedPoint 0\\n    FPI.FixedPointInt internal ZERO = FPI.fromScaledUint(0, BASE);\\n\\n    struct VaultDetails {\\n        address shortUnderlyingAsset;\\n        address shortStrikeAsset;\\n        address shortCollateralAsset;\\n        address longUnderlyingAsset;\\n        address longStrikeAsset;\\n        address longCollateralAsset;\\n        uint256 shortStrikePrice;\\n        uint256 shortExpiryTimestamp;\\n        uint256 shortCollateralDecimals;\\n        uint256 longStrikePrice;\\n        uint256 longExpiryTimestamp;\\n        uint256 longCollateralDecimals;\\n        uint256 collateralDecimals;\\n        bool isShortPut;\\n        bool isLongPut;\\n        bool hasLong;\\n        bool hasShort;\\n        bool hasCollateral;\\n    }\\n\\n    constructor(address _oracle) public {\\n        require(_oracle != address(0), \\\"MarginCalculator: invalid oracle address\\\");\\n\\n        oracle = OracleInterface(_oracle);\\n    }\\n\\n    /**\\n     * @notice return the cash value of an expired oToken, denominated in collateral\\n     * @param _otoken oToken address\\n     * @return how much collateral can be taken out by 1 otoken unit, scaled by 1e8,\\n     * or how much collateral can be taken out for 1 (1e8) oToken\\n     */\\n    function getExpiredPayoutRate(address _otoken) external view returns (uint256) {\\n        require(_otoken != address(0), \\\"MarginCalculator: Invalid token address\\\");\\n\\n        OtokenInterface otoken = OtokenInterface(_otoken);\\n\\n        (\\n            address collateral,\\n            address underlying,\\n            address strikeAsset,\\n            uint256 strikePrice,\\n            uint256 expiry,\\n            bool isPut\\n        ) = otoken.getOtokenDetails();\\n\\n        require(now >= expiry, \\\"MarginCalculator: Otoken not expired yet\\\");\\n\\n        FPI.FixedPointInt memory cashValueInStrike = _getExpiredCashValue(\\n            underlying,\\n            strikeAsset,\\n            expiry,\\n            strikePrice,\\n            isPut\\n        );\\n\\n        FPI.FixedPointInt memory cashValueInCollateral = _convertAmountOnExpiryPrice(\\n            cashValueInStrike,\\n            strikeAsset,\\n            collateral,\\n            expiry\\n        );\\n\\n        // the exchangeRate was scaled by 1e8, if 1e8 otoken can take out 1 USDC, the exchangeRate is currently 1e8\\n        // we want to return: how much USDC units can be taken out by 1 (1e8 units) oToken\\n        uint256 collateralDecimals = uint256(ERC20Interface(collateral).decimals());\\n        return cashValueInCollateral.toScaledUint(collateralDecimals, true);\\n    }\\n\\n    /**\\n     * @notice returns the amount of collateral that can be removed from an actual or a theoretical vault\\n     * @dev return amount is denominated in the collateral asset for the oToken in the vault, or the collateral asset in the vault\\n     * @param _vault theoretical vault that needs to be checked\\n     * @return excessCollateral the amount by which the margin is above or below the required amount\\n     * @return isExcess True if there is excess margin in the vault, False if there is a deficit of margin in the vault\\n     * if True, collateral can be taken out from the vault, if False, additional collateral needs to be added to vault\\n     */\\n    function getExcessCollateral(MarginVault.Vault memory _vault) public view returns (uint256, bool) {\\n        // get vault details\\n        VaultDetails memory vaultDetails = getVaultDetails(_vault);\\n        // include all the checks for to ensure the vault is valid\\n        _checkIsValidVault(_vault, vaultDetails);\\n\\n        // if the vault contains no oTokens, return the amount of collateral\\n        if (!vaultDetails.hasShort && !vaultDetails.hasLong) {\\n            uint256 amount = vaultDetails.hasCollateral ? _vault.collateralAmounts[0] : 0;\\n            return (amount, true);\\n        }\\n\\n        FPI.FixedPointInt memory collateralAmount = ZERO;\\n        if (vaultDetails.hasCollateral) {\\n            collateralAmount = FPI.fromScaledUint(_vault.collateralAmounts[0], vaultDetails.collateralDecimals);\\n        }\\n\\n        // get required margin, denominated in collateral\\n        FPI.FixedPointInt memory collateralRequired = _getMarginRequired(_vault, vaultDetails);\\n        FPI.FixedPointInt memory excessCollateral = collateralAmount.sub(collateralRequired);\\n\\n        bool isExcess = excessCollateral.isGreaterThanOrEqual(ZERO);\\n        uint256 collateralDecimals = vaultDetails.hasLong\\n            ? vaultDetails.longCollateralDecimals\\n            : vaultDetails.shortCollateralDecimals;\\n        // if is excess, truncate the tailing digits in excessCollateralExternal calculation\\n        uint256 excessCollateralExternal = excessCollateral.toScaledUint(collateralDecimals, isExcess);\\n        return (excessCollateralExternal, isExcess);\\n    }\\n\\n    /**\\n     * @notice return the cash value of an expired oToken, denominated in strike asset\\n     * @dev for a call, return Max (0, underlyingPriceInStrike - otoken.strikePrice)\\n     * @dev for a put, return Max(0, otoken.strikePrice - underlyingPriceInStrike)\\n     * @param _underlying otoken underlying asset\\n     * @param _strike otoken strike asset\\n     * @param _expiryTimestamp otoken expiry timestamp\\n     * @param _strikePrice otoken strike price\\n     * @param _strikePrice true if otoken is put otherwise false\\n     * @return cash value of an expired otoken, denominated in the strike asset\\n     */\\n    function _getExpiredCashValue(\\n        address _underlying,\\n        address _strike,\\n        uint256 _expiryTimestamp,\\n        uint256 _strikePrice,\\n        bool _isPut\\n    ) internal view returns (FPI.FixedPointInt memory) {\\n        // strike price is denominated in strike asset\\n        FPI.FixedPointInt memory strikePrice = FPI.fromScaledUint(_strikePrice, BASE);\\n        FPI.FixedPointInt memory one = FPI.fromScaledUint(1, 0);\\n\\n        // calculate the value of the underlying asset in terms of the strike asset\\n        FPI.FixedPointInt memory underlyingPriceInStrike = _convertAmountOnExpiryPrice(\\n            one, // underlying price denominated in underlying\\n            _underlying,\\n            _strike,\\n            _expiryTimestamp\\n        );\\n\\n        if (_isPut) {\\n            return strikePrice.isGreaterThan(underlyingPriceInStrike) ? strikePrice.sub(underlyingPriceInStrike) : ZERO;\\n        } else {\\n            return underlyingPriceInStrike.isGreaterThan(strikePrice) ? underlyingPriceInStrike.sub(strikePrice) : ZERO;\\n        }\\n    }\\n\\n    /**\\n     * @notice calculate the amount of collateral needed for a vault\\n     * @dev vault passed in has already passed the checkIsValidVault function\\n     * @param _vault theoretical vault that needs to be checked\\n     * @return marginRequired the minimal amount of collateral needed in a vault, denominated in collateral\\n     */\\n    function _getMarginRequired(MarginVault.Vault memory _vault, VaultDetails memory _vaultDetails)\\n        internal\\n        view\\n        returns (FPI.FixedPointInt memory)\\n    {\\n        FPI.FixedPointInt memory shortAmount = _vaultDetails.hasShort\\n            ? FPI.fromScaledUint(_vault.shortAmounts[0], BASE)\\n            : ZERO;\\n        FPI.FixedPointInt memory longAmount = _vaultDetails.hasLong\\n            ? FPI.fromScaledUint(_vault.longAmounts[0], BASE)\\n            : ZERO;\\n\\n        address otokenUnderlyingAsset = _vaultDetails.hasShort\\n            ? _vaultDetails.shortUnderlyingAsset\\n            : _vaultDetails.longUnderlyingAsset;\\n        address otokenCollateralAsset = _vaultDetails.hasShort\\n            ? _vaultDetails.shortCollateralAsset\\n            : _vaultDetails.longCollateralAsset;\\n        address otokenStrikeAsset = _vaultDetails.hasShort\\n            ? _vaultDetails.shortStrikeAsset\\n            : _vaultDetails.longStrikeAsset;\\n        uint256 otokenExpiry = _vaultDetails.hasShort\\n            ? _vaultDetails.shortExpiryTimestamp\\n            : _vaultDetails.longExpiryTimestamp;\\n        bool expired = now >= otokenExpiry;\\n        bool isPut = _vaultDetails.hasShort ? _vaultDetails.isShortPut : _vaultDetails.isLongPut;\\n\\n        if (!expired) {\\n            FPI.FixedPointInt memory shortStrike = _vaultDetails.hasShort\\n                ? FPI.fromScaledUint(_vaultDetails.shortStrikePrice, BASE)\\n                : ZERO;\\n            FPI.FixedPointInt memory longStrike = _vaultDetails.hasLong\\n                ? FPI.fromScaledUint(_vaultDetails.longStrikePrice, BASE)\\n                : ZERO;\\n\\n            if (isPut) {\\n                FPI.FixedPointInt memory strikeNeeded = _getPutSpreadMarginRequired(\\n                    shortAmount,\\n                    longAmount,\\n                    shortStrike,\\n                    longStrike\\n                );\\n                // convert amount to be denominated in collateral\\n                return _convertAmountOnLivePrice(strikeNeeded, otokenStrikeAsset, otokenCollateralAsset);\\n            } else {\\n                FPI.FixedPointInt memory underlyingNeeded = _getCallSpreadMarginRequired(\\n                    shortAmount,\\n                    longAmount,\\n                    shortStrike,\\n                    longStrike\\n                );\\n                // convert amount to be denominated in collateral\\n                return _convertAmountOnLivePrice(underlyingNeeded, otokenUnderlyingAsset, otokenCollateralAsset);\\n            }\\n        } else {\\n            FPI.FixedPointInt memory shortCashValue = _vaultDetails.hasShort\\n                ? _getExpiredCashValue(\\n                    _vaultDetails.shortUnderlyingAsset,\\n                    _vaultDetails.shortStrikeAsset,\\n                    _vaultDetails.shortExpiryTimestamp,\\n                    _vaultDetails.shortStrikePrice,\\n                    isPut\\n                )\\n                : ZERO;\\n            FPI.FixedPointInt memory longCashValue = _vaultDetails.hasLong\\n                ? _getExpiredCashValue(\\n                    _vaultDetails.longUnderlyingAsset,\\n                    _vaultDetails.longStrikeAsset,\\n                    _vaultDetails.longExpiryTimestamp,\\n                    _vaultDetails.longStrikePrice,\\n                    isPut\\n                )\\n                : ZERO;\\n\\n            FPI.FixedPointInt memory valueInStrike = _getExpiredSpreadCashValue(\\n                shortAmount,\\n                longAmount,\\n                shortCashValue,\\n                longCashValue\\n            );\\n\\n            // convert amount to be denominated in collateral\\n            return _convertAmountOnExpiryPrice(valueInStrike, otokenStrikeAsset, otokenCollateralAsset, otokenExpiry);\\n        }\\n    }\\n\\n    /**\\n     * @dev returns the strike asset amount of margin required for a put or put spread with the given short oTokens, long oTokens and amounts\\n     *\\n     * marginRequired = max( (short amount * short strike) - (long strike * min (short amount, long amount)) , 0 )\\n     *\\n     * @return margin requirement denominated in the strike asset\\n     */\\n    function _getPutSpreadMarginRequired(\\n        FPI.FixedPointInt memory _shortAmount,\\n        FPI.FixedPointInt memory _longAmount,\\n        FPI.FixedPointInt memory _shortStrike,\\n        FPI.FixedPointInt memory _longStrike\\n    ) internal view returns (FPI.FixedPointInt memory) {\\n        return FPI.max(_shortAmount.mul(_shortStrike).sub(_longStrike.mul(FPI.min(_shortAmount, _longAmount))), ZERO);\\n    }\\n\\n    /**\\n     * @dev returns the underlying asset amount required for a call or call spread with the given short oTokens, long oTokens, and amounts\\n     *\\n     *                           (long strike - short strike) * short amount\\n     * marginRequired =  max( ------------------------------------------------- , max (short amount - long amount, 0) )\\n     *                                           long strike\\n     *\\n     * @dev if long strike = 0, return max( short amount - long amount, 0)\\n     * @return margin requirement denominated in the underlying asset\\n     */\\n    function _getCallSpreadMarginRequired(\\n        FPI.FixedPointInt memory _shortAmount,\\n        FPI.FixedPointInt memory _longAmount,\\n        FPI.FixedPointInt memory _shortStrike,\\n        FPI.FixedPointInt memory _longStrike\\n    ) internal view returns (FPI.FixedPointInt memory) {\\n        // max (short amount - long amount , 0)\\n        if (_longStrike.isEqual(ZERO)) {\\n            return FPI.max(_shortAmount.sub(_longAmount), ZERO);\\n        }\\n\\n        /**\\n         *             (long strike - short strike) * short amount\\n         * calculate  ----------------------------------------------\\n         *                             long strike\\n         */\\n        FPI.FixedPointInt memory firstPart = _longStrike.sub(_shortStrike).mul(_shortAmount).div(_longStrike);\\n\\n        /**\\n         * calculate max ( short amount - long amount , 0)\\n         */\\n        FPI.FixedPointInt memory secondPart = FPI.max(_shortAmount.sub(_longAmount), ZERO);\\n\\n        return FPI.max(firstPart, secondPart);\\n    }\\n\\n    /**\\n     * @dev calculate the cash value obligation for an expired vault, where a positive number is an obligation\\n     *\\n     * Formula: net = (short cash value * short amount) - ( long cash value * long Amount )\\n     *\\n     * @return cash value obligation denominated in the strike asset\\n     */\\n    function _getExpiredSpreadCashValue(\\n        FPI.FixedPointInt memory _shortAmount,\\n        FPI.FixedPointInt memory _longAmount,\\n        FPI.FixedPointInt memory _shortCashValue,\\n        FPI.FixedPointInt memory _longCashValue\\n    ) internal pure returns (FPI.FixedPointInt memory) {\\n        return _shortCashValue.mul(_shortAmount).sub(_longCashValue.mul(_longAmount));\\n    }\\n\\n    /**\\n     * @dev ensure that:\\n     * a) at most 1 asset type used as collateral\\n     * b) at most 1 series of option used as the long option\\n     * c) at most 1 series of option used as the short option\\n     * d) asset array lengths match for long, short and collateral\\n     * e) long option and collateral asset is acceptable for margin with short asset\\n     * @param _vault the vault to check\\n     */\\n    function _checkIsValidVault(MarginVault.Vault memory _vault, VaultDetails memory _vaultDetails) internal view {\\n        // ensure all the arrays in the vault are valid\\n        require(_vault.shortOtokens.length <= 1, \\\"MarginCalculator: Too many short otokens in the vault\\\");\\n        require(_vault.longOtokens.length <= 1, \\\"MarginCalculator: Too many long otokens in the vault\\\");\\n        require(_vault.collateralAssets.length <= 1, \\\"MarginCalculator: Too many collateral assets in the vault\\\");\\n\\n        require(\\n            _vault.shortOtokens.length == _vault.shortAmounts.length,\\n            \\\"MarginCalculator: Short asset and amount mismatch\\\"\\n        );\\n        require(\\n            _vault.longOtokens.length == _vault.longAmounts.length,\\n            \\\"MarginCalculator: Long asset and amount mismatch\\\"\\n        );\\n        require(\\n            _vault.collateralAssets.length == _vault.collateralAmounts.length,\\n            \\\"MarginCalculator: Collateral asset and amount mismatch\\\"\\n        );\\n\\n        // ensure the long asset is valid for the short asset\\n        require(\\n            _isMarginableLong(_vault, _vaultDetails),\\n            \\\"MarginCalculator: long asset not marginable for short asset\\\"\\n        );\\n\\n        // ensure that the collateral asset is valid for the short asset\\n        require(\\n            _isMarginableCollateral(_vault, _vaultDetails),\\n            \\\"MarginCalculator: collateral asset not marginable for short asset\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev if there is a short option and a long option in the vault, ensure that the long option is able to be used as collateral for the short option\\n     * @param _vault the vault to check.\\n     */\\n    function _isMarginableLong(MarginVault.Vault memory _vault, VaultDetails memory _vaultDetails)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        // if vault is missing a long or a short, return True\\n        if (!_vaultDetails.hasLong || !_vaultDetails.hasShort) return true;\\n\\n        return\\n            _vault.longOtokens[0] != _vault.shortOtokens[0] &&\\n            _vaultDetails.longUnderlyingAsset == _vaultDetails.shortUnderlyingAsset &&\\n            _vaultDetails.longStrikeAsset == _vaultDetails.shortStrikeAsset &&\\n            _vaultDetails.longCollateralAsset == _vaultDetails.shortCollateralAsset &&\\n            _vaultDetails.longExpiryTimestamp == _vaultDetails.shortExpiryTimestamp &&\\n            _vaultDetails.isLongPut == _vaultDetails.isShortPut;\\n    }\\n\\n    /**\\n     * @dev if there is short option and collateral asset in the vault, ensure that the collateral asset is valid for the short option\\n     * @param _vault the vault to check.\\n     */\\n    function _isMarginableCollateral(MarginVault.Vault memory _vault, VaultDetails memory _vaultDetails)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool isMarginable = true;\\n\\n        if (!_vaultDetails.hasCollateral) return isMarginable;\\n\\n        if (_vaultDetails.hasShort) {\\n            isMarginable = _vaultDetails.shortCollateralAsset == _vault.collateralAssets[0];\\n        } else if (_vaultDetails.hasLong) {\\n            isMarginable = _vaultDetails.longCollateralAsset == _vault.collateralAssets[0];\\n        }\\n\\n        return isMarginable;\\n    }\\n\\n    /**\\n     * @notice convert an amount in asset A to equivalent amount of asset B, based on a live price\\n     * @dev function includes the amount and applies .mul() first to increase the accuracy\\n     * @param _amount amount in asset A\\n     * @param _assetA asset A\\n     * @param _assetB asset B\\n     * @return _amount in asset B\\n     */\\n    function _convertAmountOnLivePrice(\\n        FPI.FixedPointInt memory _amount,\\n        address _assetA,\\n        address _assetB\\n    ) internal view returns (FPI.FixedPointInt memory) {\\n        if (_assetA == _assetB) {\\n            return _amount;\\n        }\\n        uint256 priceA = oracle.getPrice(_assetA);\\n        uint256 priceB = oracle.getPrice(_assetB);\\n        // amount A * price A in USD = amount B * price B in USD\\n        // amount B = amount A * price A / price B\\n        return _amount.mul(FPI.fromScaledUint(priceA, BASE)).div(FPI.fromScaledUint(priceB, BASE));\\n    }\\n\\n    /**\\n     * @notice convert an amount in asset A to equivalent amount of asset B, based on an expiry price\\n     * @dev function includes the amount and apply .mul() first to increase the accuracy\\n     * @param _amount amount in asset A\\n     * @param _assetA asset A\\n     * @param _assetB asset B\\n     * @return _amount in asset B\\n     */\\n    function _convertAmountOnExpiryPrice(\\n        FPI.FixedPointInt memory _amount,\\n        address _assetA,\\n        address _assetB,\\n        uint256 _expiry\\n    ) internal view returns (FPI.FixedPointInt memory) {\\n        if (_assetA == _assetB) {\\n            return _amount;\\n        }\\n        (uint256 priceA, bool priceAFinalized) = oracle.getExpiryPrice(_assetA, _expiry);\\n        (uint256 priceB, bool priceBFinalized) = oracle.getExpiryPrice(_assetB, _expiry);\\n        require(priceAFinalized && priceBFinalized, \\\"MarginCalculator: price at expiry not finalized yet.\\\");\\n        // amount A * price A in USD = amount B * price B in USD\\n        // amount B = amount A * price A / price B\\n        return _amount.mul(FPI.fromScaledUint(priceA, BASE)).div(FPI.fromScaledUint(priceB, BASE));\\n    }\\n\\n    /**\\n     * @dev check if asset array contain a token address\\n     * @return True if the array is not empty\\n     */\\n    function _isNotEmpty(address[] memory _assets) internal pure returns (bool) {\\n        return _assets.length > 0 && _assets[0] != address(0);\\n    }\\n\\n    function getVaultDetails(MarginVault.Vault memory _vault) internal view returns (VaultDetails memory) {\\n        VaultDetails memory vaultDetails = VaultDetails(\\n            address(0),\\n            address(0),\\n            address(0),\\n            address(0),\\n            address(0),\\n            address(0),\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false\\n        );\\n\\n        vaultDetails.hasLong = _isNotEmpty(_vault.longOtokens);\\n        vaultDetails.hasShort = _isNotEmpty(_vault.shortOtokens);\\n        vaultDetails.hasCollateral = _isNotEmpty(_vault.collateralAssets);\\n\\n        if (vaultDetails.hasLong) {\\n            OtokenInterface long = OtokenInterface(_vault.longOtokens[0]);\\n            (\\n                vaultDetails.longCollateralAsset,\\n                vaultDetails.longUnderlyingAsset,\\n                vaultDetails.longStrikeAsset,\\n                vaultDetails.longStrikePrice,\\n                vaultDetails.longExpiryTimestamp,\\n                vaultDetails.isLongPut\\n            ) = long.getOtokenDetails();\\n            vaultDetails.longCollateralDecimals = uint256(ERC20Interface(vaultDetails.longCollateralAsset).decimals());\\n        }\\n\\n        if (vaultDetails.hasShort) {\\n            OtokenInterface short = OtokenInterface(_vault.shortOtokens[0]);\\n            (\\n                vaultDetails.shortCollateralAsset,\\n                vaultDetails.shortUnderlyingAsset,\\n                vaultDetails.shortStrikeAsset,\\n                vaultDetails.shortStrikePrice,\\n                vaultDetails.shortExpiryTimestamp,\\n                vaultDetails.isShortPut\\n            ) = short.getOtokenDetails();\\n            vaultDetails.shortCollateralDecimals = uint256(\\n                ERC20Interface(vaultDetails.shortCollateralAsset).decimals()\\n            );\\n        }\\n\\n        if (vaultDetails.hasCollateral) {\\n            vaultDetails.collateralDecimals = uint256(ERC20Interface(_vault.collateralAssets[0]).decimals());\\n        }\\n\\n        return vaultDetails;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/antonasso/programming/opyn/gamma/contracts/interfaces/ERC20Interface.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity 0.6.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface ERC20Interface {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"/Users/antonasso/programming/opyn/gamma/contracts/interfaces/OracleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.10;\\n\\ninterface OracleInterface {\\n    function isLockingPeriodOver(address _asset, uint256 _expiryTimestamp) external view returns (bool);\\n\\n    function isDisputePeriodOver(address _asset, uint256 _expiryTimestamp) external view returns (bool);\\n\\n    function getExpiryPrice(address _asset, uint256 _expiryTimestamp) external view returns (uint256, bool);\\n\\n    function getDisputer() external view returns (address);\\n\\n    function getPricer(address _asset) external view returns (address);\\n\\n    function getPrice(address _asset) external view returns (uint256);\\n\\n    function getPricerLockingPeriod(address _pricer) external view returns (uint256);\\n\\n    function getPricerDisputePeriod(address _pricer) external view returns (uint256);\\n\\n    // Non-view function\\n\\n    function setAssetPricer(address _asset, address _pricer) external;\\n\\n    function setLockingPeriod(address _pricer, uint256 _lockingPeriod) external;\\n\\n    function setDisputePeriod(address _pricer, uint256 _disputePeriod) external;\\n\\n    function setExpiryPrice(\\n        address _asset,\\n        uint256 _expiryTimestamp,\\n        uint256 _price\\n    ) external;\\n\\n    function disputeExpiryPrice(\\n        address _asset,\\n        uint256 _expiryTimestamp,\\n        uint256 _price\\n    ) external;\\n\\n    function setDisputer(address _disputer) external;\\n}\\n\"\r\n    },\r\n    \"/Users/antonasso/programming/opyn/gamma/contracts/interfaces/OtokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.10;\\n\\ninterface OtokenInterface {\\n    function addressBook() external view returns (address);\\n\\n    function underlyingAsset() external view returns (address);\\n\\n    function strikeAsset() external view returns (address);\\n\\n    function collateralAsset() external view returns (address);\\n\\n    function strikePrice() external view returns (uint256);\\n\\n    function expiryTimestamp() external view returns (uint256);\\n\\n    function isPut() external view returns (bool);\\n\\n    function init(\\n        address _addressBook,\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external;\\n\\n    function getOtokenDetails()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    function mintOtoken(address account, uint256 amount) external;\\n\\n    function burnOtoken(address account, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"/Users/antonasso/programming/opyn/gamma/contracts/libs/FixedPointInt256.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity 0.6.10;\\n\\nimport \\\"../packages/oz/SignedSafeMath.sol\\\";\\nimport \\\"../libs/SignedConverter.sol\\\";\\nimport \\\"../packages/oz/SafeMath.sol\\\";\\n\\n/**\\n * @title FixedPointInt256\\n * @author Opyn Team\\n * @notice FixedPoint library\\n */\\nlibrary FixedPointInt256 {\\n    using SignedSafeMath for int256;\\n    using SignedConverter for int256;\\n    using SafeMath for uint256;\\n    using SignedConverter for uint256;\\n\\n    int256 private constant SCALING_FACTOR = 1e27;\\n    uint256 private constant BASE_DECIMALS = 27;\\n\\n    struct FixedPointInt {\\n        int256 value;\\n    }\\n\\n    /**\\n     * @notice constructs an `FixedPointInt` from an unscaled int, e.g., `b=5` gets stored internally as `5**27`.\\n     * @param a int to convert into a FixedPoint.\\n     * @return the converted FixedPoint.\\n     */\\n    function fromUnscaledInt(int256 a) internal pure returns (FixedPointInt memory) {\\n        return FixedPointInt(a.mul(SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice constructs an FixedPointInt from an scaled uint with {_decimals} decimals\\n     * Examples:\\n     * (1)  USDC    decimals = 6\\n     *      Input:  5 * 1e6 USDC  =>    Output: 5 * 1e27 (FixedPoint 8.0 USDC)\\n     * (2)  cUSDC   decimals = 8\\n     *      Input:  5 * 1e6 cUSDC =>    Output: 5 * 1e25 (FixedPoint 0.08 cUSDC)\\n     * @param _a uint256 to convert into a FixedPoint.\\n     * @param _decimals  original decimals _a has\\n     * @return the converted FixedPoint, with 27 decimals.\\n     */\\n    function fromScaledUint(uint256 _a, uint256 _decimals) internal pure returns (FixedPointInt memory) {\\n        FixedPointInt memory fixedPoint;\\n\\n        if (_decimals == BASE_DECIMALS) {\\n            fixedPoint = FixedPointInt(_a.uintToInt());\\n        } else if (_decimals > BASE_DECIMALS) {\\n            uint256 exp = _decimals.sub(BASE_DECIMALS);\\n            fixedPoint = FixedPointInt((_a.div(10**exp)).uintToInt());\\n        } else {\\n            uint256 exp = BASE_DECIMALS - _decimals;\\n            fixedPoint = FixedPointInt((_a.mul(10**exp)).uintToInt());\\n        }\\n\\n        return fixedPoint;\\n    }\\n\\n    /**\\n     * @notice convert a FixedPointInt number to an uint256 with a specific number of decimals\\n     * @param _a FixedPointInt to convert\\n     * @param _decimals number of decimals that the uint256 should be scaled to\\n     * @param _roundDown True to round down the result, False to round up\\n     * @return the converted uint256\\n     */\\n    function toScaledUint(\\n        FixedPointInt memory _a,\\n        uint256 _decimals,\\n        bool _roundDown\\n    ) internal pure returns (uint256) {\\n        uint256 scaledUint;\\n\\n        if (_decimals == BASE_DECIMALS) {\\n            scaledUint = _a.value.intToUint();\\n        } else if (_decimals > BASE_DECIMALS) {\\n            uint256 exp = _decimals - BASE_DECIMALS;\\n            scaledUint = (_a.value).intToUint().mul(10**exp);\\n        } else {\\n            uint256 exp = BASE_DECIMALS - _decimals;\\n            uint256 tailing;\\n            if (!_roundDown) {\\n                uint256 remainer = (_a.value).intToUint().mod(10**exp);\\n                if (remainer > 0) tailing = 1;\\n            }\\n            scaledUint = (_a.value).intToUint().div(10**exp).add(tailing);\\n        }\\n\\n        return scaledUint;\\n    }\\n\\n    /**\\n     * @notice add two signed integers, a + b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return sum of the two signed integers\\n     */\\n    function add(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\\n        return FixedPointInt(a.value.add(b.value));\\n    }\\n\\n    /**\\n     * @notice subtract two signed integers, a-b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return difference of two signed integers\\n     */\\n    function sub(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\\n        return FixedPointInt(a.value.sub(b.value));\\n    }\\n\\n    /**\\n     * @notice multiply two signed integers, a by b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return mul of two signed integers\\n     */\\n    function mul(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\\n        return FixedPointInt((a.value.mul(b.value)) / SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice divide two signed integers, a by b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return div of two signed integers\\n     */\\n    function div(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\\n        return FixedPointInt((a.value.mul(SCALING_FACTOR)) / b.value);\\n    }\\n\\n    /**\\n     * @notice minimum between two signed integers, a and b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return min of two signed integers\\n     */\\n    function min(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\\n        return a.value < b.value ? a : b;\\n    }\\n\\n    /**\\n     * @notice maximum between two signed integers, a and b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return max of two signed integers\\n     */\\n    function max(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\\n        return a.value > b.value ? a : b;\\n    }\\n\\n    /**\\n     * @notice is a is equal to b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return True if equal, False if not\\n     */\\n    function isEqual(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (bool) {\\n        return a.value == b.value;\\n    }\\n\\n    /**\\n     * @notice is a greater than b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return True if a > b, False if not\\n     */\\n    function isGreaterThan(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (bool) {\\n        return a.value > b.value;\\n    }\\n\\n    /**\\n     * @notice is a greater than or equal to b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return True if a >= b, False if not\\n     */\\n    function isGreaterThanOrEqual(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (bool) {\\n        return a.value >= b.value;\\n    }\\n\\n    /**\\n     * @notice is a is less than b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return True if a < b, False if not\\n     */\\n    function isLessThan(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (bool) {\\n        return a.value < b.value;\\n    }\\n\\n    /**\\n     * @notice is a less than or equal to b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return True if a <= b, False if not\\n     */\\n    function isLessThanOrEqual(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (bool) {\\n        return a.value <= b.value;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/antonasso/programming/opyn/gamma/contracts/libs/MarginVault.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity =0.6.10;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"../packages/oz/SafeMath.sol\\\";\\n\\n/**\\n * @title MarginVault\\n * @author Opyn Team\\n * @notice A library that provides the Controller with a Vault struct and the functions that manipulate vaults.\\n * Vaults describe discrete position combinations of long options, short options, and collateral assets that a user can have.\\n */\\nlibrary MarginVault {\\n    using SafeMath for uint256;\\n\\n    // vault is a struct of 6 arrays that describe a position a user has, a user can have multiple vaults.\\n    struct Vault {\\n        // addresses of oTokens a user has shorted (i.e. written) against this vault\\n        address[] shortOtokens;\\n        // addresses of oTokens a user has bought and deposited in this vault\\n        // user can be long oTokens without opening a vault (e.g. by buying on a DEX)\\n        // generally, long oTokens will be 'deposited' in vaults to act as collateral in order to write oTokens against (i.e. in spreads)\\n        address[] longOtokens;\\n        // addresses of other ERC-20s a user has deposited as collateral in this vault\\n        address[] collateralAssets;\\n        // quantity of oTokens minted/written for each oToken address in shortOtokens\\n        uint256[] shortAmounts;\\n        // quantity of oTokens owned and held in the vault for each oToken address in longOtokens\\n        uint256[] longAmounts;\\n        // quantity of ERC-20 deposited as collateral in the vault for each ERC-20 address in collateralAssets\\n        uint256[] collateralAmounts;\\n    }\\n\\n    /**\\n     * @dev increase the short oToken balance in a vault when a new oToken is minted\\n     * @param _vault vault to add or increase the short position in\\n     * @param _shortOtoken address of the _shortOtoken being minted from the user's vault\\n     * @param _amount number of _shortOtoken being minted from the user's vault\\n     * @param _index index of _shortOtoken in the user's vault.shortOtokens array\\n     */\\n    function addShort(\\n        Vault storage _vault,\\n        address _shortOtoken,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external {\\n        require(_amount > 0, \\\"MarginVault: invalid short otoken amount\\\");\\n\\n        // valid indexes in any array are between 0 and array.length - 1.\\n        // if adding an amount to an preexisting short oToken, check that _index is in the range of 0->length-1\\n        if ((_index == _vault.shortOtokens.length) && (_index == _vault.shortAmounts.length)) {\\n            _vault.shortOtokens.push(_shortOtoken);\\n            _vault.shortAmounts.push(_amount);\\n        } else {\\n            require(\\n                (_index < _vault.shortOtokens.length) && (_index < _vault.shortAmounts.length),\\n                \\\"MarginVault: invalid short otoken index\\\"\\n            );\\n            require(\\n                (_vault.shortOtokens[_index] == _shortOtoken) || (_vault.shortOtokens[_index] == address(0)),\\n                \\\"MarginVault: short otoken address mismatch\\\"\\n            );\\n\\n            _vault.shortAmounts[_index] = _vault.shortAmounts[_index].add(_amount);\\n            _vault.shortOtokens[_index] = _shortOtoken;\\n        }\\n    }\\n\\n    /**\\n     * @dev decrease the short oToken balance in a vault when an oToken is burned\\n     * @param _vault vault to decrease short position in\\n     * @param _shortOtoken address of the _shortOtoken being reduced in the user's vault\\n     * @param _amount number of _shortOtoken being reduced in the user's vault\\n     * @param _index index of _shortOtoken in the user's vault.shortOtokens array\\n     */\\n    function removeShort(\\n        Vault storage _vault,\\n        address _shortOtoken,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external {\\n        // check that the removed short oToken exists in the vault at the specified index\\n        require(_index < _vault.shortOtokens.length, \\\"MarginVault: invalid short otoken index\\\");\\n        require(_vault.shortOtokens[_index] == _shortOtoken, \\\"MarginVault: short otoken address mismatch\\\");\\n\\n        _vault.shortAmounts[_index] = _vault.shortAmounts[_index].sub(_amount);\\n\\n        if (_vault.shortAmounts[_index] == 0) {\\n            delete _vault.shortOtokens[_index];\\n        }\\n    }\\n\\n    /**\\n     * @dev increase the long oToken balance in a vault when an oToken is deposited\\n     * @param _vault vault to add a long position to\\n     * @param _longOtoken address of the _longOtoken being added to the user's vault\\n     * @param _amount number of _longOtoken the protocol is adding to the user's vault\\n     * @param _index index of _longOtoken in the user's vault.longOtokens array\\n     */\\n    function addLong(\\n        Vault storage _vault,\\n        address _longOtoken,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external {\\n        require(_amount > 0, \\\"MarginVault: invalid long otoken amount\\\");\\n\\n        // valid indexes in any array are between 0 and array.length - 1.\\n        // if adding an amount to an preexisting short oToken, check that _index is in the range of 0->length-1\\n        if ((_index == _vault.longOtokens.length) && (_index == _vault.longAmounts.length)) {\\n            _vault.longOtokens.push(_longOtoken);\\n            _vault.longAmounts.push(_amount);\\n        } else {\\n            require(\\n                (_index < _vault.longOtokens.length) && (_index < _vault.longAmounts.length),\\n                \\\"MarginVault: invalid long otoken index\\\"\\n            );\\n            require(\\n                (_vault.longOtokens[_index] == _longOtoken) || (_vault.longOtokens[_index] == address(0)),\\n                \\\"MarginVault: long otoken address mismatch\\\"\\n            );\\n\\n            _vault.longAmounts[_index] = _vault.longAmounts[_index].add(_amount);\\n            _vault.longOtokens[_index] = _longOtoken;\\n        }\\n    }\\n\\n    /**\\n     * @dev decrease the long oToken balance in a vault when an oToken is withdrawn\\n     * @param _vault vault to remove a long position from\\n     * @param _longOtoken address of the _longOtoken being removed from the user's vault\\n     * @param _amount number of _longOtoken the protocol is removing from the user's vault\\n     * @param _index index of _longOtoken in the user's vault.longOtokens array\\n     */\\n    function removeLong(\\n        Vault storage _vault,\\n        address _longOtoken,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external {\\n        // check that the removed long oToken exists in the vault at the specified index\\n        require(_index < _vault.longOtokens.length, \\\"MarginVault: invalid long otoken index\\\");\\n        require(_vault.longOtokens[_index] == _longOtoken, \\\"MarginVault: long otoken address mismatch\\\");\\n\\n        _vault.longAmounts[_index] = _vault.longAmounts[_index].sub(_amount);\\n\\n        if (_vault.longAmounts[_index] == 0) {\\n            delete _vault.longOtokens[_index];\\n        }\\n    }\\n\\n    /**\\n     * @dev increase the collateral balance in a vault\\n     * @param _vault vault to add collateral to\\n     * @param _collateralAsset address of the _collateralAsset being added to the user's vault\\n     * @param _amount number of _collateralAsset being added to the user's vault\\n     * @param _index index of _collateralAsset in the user's vault.collateralAssets array\\n     */\\n    function addCollateral(\\n        Vault storage _vault,\\n        address _collateralAsset,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external {\\n        require(_amount > 0, \\\"MarginVault: invalid collateral amount\\\");\\n\\n        // valid indexes in any array are between 0 and array.length - 1.\\n        // if adding an amount to an preexisting short oToken, check that _index is in the range of 0->length-1\\n        if ((_index == _vault.collateralAssets.length) && (_index == _vault.collateralAmounts.length)) {\\n            _vault.collateralAssets.push(_collateralAsset);\\n            _vault.collateralAmounts.push(_amount);\\n        } else {\\n            require(\\n                (_index < _vault.collateralAssets.length) && (_index < _vault.collateralAmounts.length),\\n                \\\"MarginVault: invalid collateral token index\\\"\\n            );\\n            require(\\n                (_vault.collateralAssets[_index] == _collateralAsset) ||\\n                    (_vault.collateralAssets[_index] == address(0)),\\n                \\\"MarginVault: collateral token address mismatch\\\"\\n            );\\n\\n            _vault.collateralAmounts[_index] = _vault.collateralAmounts[_index].add(_amount);\\n            _vault.collateralAssets[_index] = _collateralAsset;\\n        }\\n    }\\n\\n    /**\\n     * @dev decrease the collateral balance in a vault\\n     * @param _vault vault to remove collateral from\\n     * @param _collateralAsset address of the _collateralAsset being removed from the user's vault\\n     * @param _amount number of _collateralAsset being removed from the user's vault\\n     * @param _index index of _collateralAsset in the user's vault.collateralAssets array\\n     */\\n    function removeCollateral(\\n        Vault storage _vault,\\n        address _collateralAsset,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external {\\n        // check that the removed collateral exists in the vault at the specified index\\n        require(_index < _vault.collateralAssets.length, \\\"MarginVault: invalid collateral asset index\\\");\\n        require(_vault.collateralAssets[_index] == _collateralAsset, \\\"MarginVault: collateral token address mismatch\\\");\\n\\n        _vault.collateralAmounts[_index] = _vault.collateralAmounts[_index].sub(_amount);\\n\\n        if (_vault.collateralAmounts[_index] == 0) {\\n            delete _vault.collateralAssets[_index];\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/antonasso/programming/opyn/gamma/contracts/libs/SignedConverter.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity 0.6.10;\\n\\n/**\\n * @title SignedConverter\\n * @author Opyn Team\\n * @notice A library to convert an unsigned integer to signed integer or signed integer to unsigned integer.\\n */\\nlibrary SignedConverter {\\n    /**\\n     * @notice convert an unsigned integer to a signed integer\\n     * @param a uint to convert into a signed integer\\n     * @return converted signed integer\\n     */\\n    function uintToInt(uint256 a) internal pure returns (int256) {\\n        require(a < 2**255, \\\"FixedPointInt256: out of int range\\\");\\n\\n        return int256(a);\\n    }\\n\\n    /**\\n     * @notice convert a signed integer to an unsigned integer\\n     * @param a int to convert into an unsigned integer\\n     * @return converted unsigned integer\\n     */\\n    function intToUint(int256 a) internal pure returns (uint256) {\\n        if (a < 0) {\\n            return uint256(-a);\\n        } else {\\n            return uint256(a);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/antonasso/programming/opyn/gamma/contracts/packages/oz/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/antonasso/programming/opyn/gamma/contracts/packages/oz/SignedSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 private constant _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"shortOtokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"longOtokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"collateralAssets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shortAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"longAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"collateralAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct MarginVault.Vault\",\"name\":\"_vault\",\"type\":\"tuple\"}],\"name\":\"getExcessCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_otoken\",\"type\":\"address\"}],\"name\":\"getExpiredPayoutRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract OracleInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MarginCalculator","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c497f40d1b7db6fa5017373f1a0ec6d53126da23","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}