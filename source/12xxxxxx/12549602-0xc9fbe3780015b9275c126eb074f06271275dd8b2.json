{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/core/Controller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\nimport {Operator} from \\\"../utils/Operator.sol\\\";\\nimport {IOperation} from \\\"../operations/Operation.sol\\\";\\nimport {IOperationStore} from \\\"../operations/OperationStore.sol\\\";\\nimport {IOperationFactory} from \\\"../operations/OperationFactory.sol\\\";\\n\\ninterface IController {\\n    function allocate(uint256 _amount) external;\\n\\n    function finish(address _opt) external;\\n\\n    function flush(uint256 _amount) external;\\n\\n    function halt(address _opt) external;\\n\\n    function emergencyWithdraw(\\n        address _opt,\\n        address _token,\\n        address _to\\n    ) external;\\n\\n    function emergencyWithdraw(address _opt, address payable _to) external;\\n\\n    function recover(address _opt, bool _runFinish) external;\\n}\\n\\ncontract Controller is IController, Context, Operator, Initializable {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public optStdId;\\n    address public optStore;\\n    address public optFactory;\\n\\n    function initialize(\\n        address _optStore,\\n        uint256 _optStdId,\\n        address _optFactory\\n    ) public initializer {\\n        optStore = _optStore;\\n        optStdId = _optStdId;\\n        optFactory = _optFactory;\\n    }\\n\\n    function allocate(uint256 _amount) public override onlyGranted {\\n        for (uint256 i = 0; i < _amount; i++) {\\n            address instance = IOperationFactory(optFactory).build(optStdId);\\n            IOperationStore(optStore).allocate(instance);\\n        }\\n    }\\n\\n    function finish(address _opt) public override onlyGranted {\\n        IOperationStore.Status status =\\n            IOperationStore(optStore).getStatusOf(_opt);\\n\\n        require(\\n            status == IOperationStore.Status.RUNNING_AUTO,\\n            \\\"Controller: invalid status for finish\\\"\\n        );\\n\\n        IOperation(_opt).finish();\\n        IOperationStore(optStore).finish(_opt);\\n    }\\n\\n    function flush(uint256 _amount) public override onlyGranted {\\n        IOperationStore(optStore).flushAll(_amount);\\n    }\\n\\n    function halt(address _opt) public override onlyGranted {\\n        IOperation(_opt).halt();\\n        IOperationStore(optStore).halt(_opt);\\n    }\\n\\n    function emergencyWithdraw(\\n        address _opt,\\n        address _token,\\n        address _to\\n    ) public override onlyOwner {\\n        IOperation(_opt).emergencyWithdraw(_token, _to);\\n    }\\n\\n    function emergencyWithdraw(address _opt, address payable _to)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        IOperation(_opt).emergencyWithdraw(_to);\\n    }\\n\\n    function recover(address _opt, bool _runFinish)\\n        public\\n        override\\n        onlyGranted\\n    {\\n        IOperation(_opt).recover();\\n        IOperationStore(optStore).recover(_opt);\\n\\n        if (_runFinish) {\\n            IOperation(_opt).finish();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Operator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\ncontract Operator is Context {\\n    address public owner;\\n    address public operator;\\n\\n    constructor() {\\n        owner = _msgSender();\\n        operator = _msgSender();\\n    }\\n\\n    modifier onlyOwner {\\n        require(checkOwner(), \\\"Operator: owner access denied\\\");\\n\\n        _;\\n    }\\n\\n    function checkOwner() public view returns (bool) {\\n        return _msgSender() == owner;\\n    }\\n\\n    modifier onlyOperator {\\n        require(checkOperator(), \\\"Operator: operator access denied\\\");\\n\\n        _;\\n    }\\n\\n    function checkOperator() public view returns (bool) {\\n        return _msgSender() == operator;\\n    }\\n\\n    modifier onlyGranted {\\n        require(checkGranted(), \\\"Operator: access denied\\\");\\n\\n        _;\\n    }\\n\\n    function checkGranted() public view returns (bool) {\\n        return checkOwner() || checkOperator();\\n    }\\n\\n    function transferOwnership(address _owner) public onlyOwner {\\n        owner = _owner;\\n    }\\n\\n    function transferOperator(address _operator) public onlyOwner {\\n        operator = _operator;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/operations/Operation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\nimport {WrappedAsset} from \\\"../assets/WrappedAsset.sol\\\";\\nimport {Operator} from \\\"../utils/Operator.sol\\\";\\nimport {OperationACL} from \\\"./OperationACL.sol\\\";\\nimport {ISwapper} from \\\"../swapper/ISwapper.sol\\\";\\n\\ninterface IOperation {\\n    // Events\\n    event AutoFinishEnabled(address indexed operation);\\n    event InitDeposit(address indexed operator, uint256 amount, bytes32 to);\\n    event FinishDeposit(address indexed operator, uint256 amount);\\n    event InitRedemption(address indexed operator, uint256 amount, bytes32 to);\\n    event FinishRedemption(address indexed operator, uint256 amount);\\n    event EmergencyWithdrawActivated(address token, uint256 amount);\\n\\n    // Data Structure\\n    enum Status {IDLE, RUNNING, STOPPED}\\n    enum Type {NEUTRAL, DEPOSIT, REDEEM}\\n\\n    struct Info {\\n        Status status;\\n        Type typ;\\n        address operator;\\n        uint256 amount;\\n        address input;\\n        address output;\\n        address swapper;\\n        address swapDest;\\n    }\\n\\n    // Interfaces\\n\\n    function terraAddress() external view returns (bytes32);\\n\\n    function getCurrentStatus() external view returns (Info memory);\\n\\n    function initDepositStable(\\n        address _operator,\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest,\\n        bool _autoFinish\\n    ) external;\\n\\n    function initRedeemStable(\\n        address _operator,\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest,\\n        bool _autoFinish\\n    ) external;\\n\\n    function finish() external;\\n\\n    function finish(uint256 _minAmountOut) external;\\n\\n    function finishDepositStable() external;\\n\\n    function finishRedeemStable() external;\\n\\n    function halt() external;\\n\\n    function recover() external;\\n\\n    function emergencyWithdraw(address _token, address _to) external;\\n\\n    function emergencyWithdraw(address payable _to) external;\\n}\\n\\n// Operation.sol: subcontract generated per wallet, defining all relevant wrapping functions\\ncontract Operation is Context, OperationACL, IOperation, Initializable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for WrappedAsset;\\n\\n    Info public DEFAULT_STATUS =\\n        Info({\\n            status: Status.IDLE,\\n            typ: Type.NEUTRAL,\\n            operator: address(0x0),\\n            amount: 0,\\n            input: address(0x0),\\n            output: address(0x0),\\n            swapper: address(0x0),\\n            swapDest: address(0x0)\\n        });\\n    Info public currentStatus;\\n\\n    WrappedAsset public wUST;\\n    WrappedAsset public aUST;\\n\\n    bytes32 public override terraAddress;\\n\\n    function initialize(bytes memory args) public initializer {\\n        (\\n            address _router,\\n            address _controller,\\n            bytes32 _terraAddress,\\n            address _wUST,\\n            address _aUST\\n        ) = abi.decode(args, (address, address, bytes32, address, address));\\n\\n        currentStatus = DEFAULT_STATUS;\\n        terraAddress = _terraAddress;\\n        wUST = WrappedAsset(_wUST);\\n        aUST = WrappedAsset(_aUST);\\n\\n        router = _router;\\n        controller = _controller;\\n    }\\n\\n    function initPayload(\\n        address _router,\\n        address _controller,\\n        bytes32 _terraAddress\\n    ) public view returns (bytes memory) {\\n        return abi.encode(_router, _controller, _terraAddress, wUST, aUST);\\n    }\\n\\n    modifier checkStopped {\\n        require(currentStatus.status != Status.STOPPED, \\\"Operation: stopped\\\");\\n\\n        _;\\n    }\\n\\n    function getCurrentStatus() public view override returns (Info memory) {\\n        return currentStatus;\\n    }\\n\\n    function _init(\\n        Type _typ,\\n        address _operator,\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest,\\n        bool _autoFinish\\n    ) private onlyRouter checkStopped {\\n        require(currentStatus.status == Status.IDLE, \\\"Operation: running\\\");\\n        require(_amount >= 10 ether, \\\"Operation: amount must be more than 10\\\");\\n\\n        currentStatus = Info({\\n            status: Status.RUNNING,\\n            typ: _typ,\\n            operator: _operator,\\n            amount: _amount,\\n            input: address(0x0),\\n            output: address(0x0),\\n            swapper: _swapper,\\n            swapDest: _swapDest\\n        });\\n\\n        if (_typ == Type.DEPOSIT) {\\n            currentStatus.input = address(wUST);\\n            currentStatus.output = address(aUST);\\n\\n            wUST.safeTransferFrom(super._msgSender(), address(this), _amount);\\n            wUST.burn(_amount, terraAddress);\\n\\n            emit InitDeposit(_operator, _amount, terraAddress);\\n        } else if (_typ == Type.REDEEM) {\\n            currentStatus.input = address(aUST);\\n            currentStatus.output = address(wUST);\\n\\n            aUST.safeTransferFrom(super._msgSender(), address(this), _amount);\\n            aUST.burn(_amount, terraAddress);\\n\\n            emit InitRedemption(_operator, _amount, terraAddress);\\n        } else {\\n            revert(\\\"Operation: invalid operation type\\\");\\n        }\\n\\n        if (_autoFinish) {\\n            emit AutoFinishEnabled(address(this));\\n        }\\n    }\\n\\n    function initDepositStable(\\n        address _operator,\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest,\\n        bool _autoFinish\\n    ) public override {\\n        _init(\\n            Type.DEPOSIT,\\n            _operator,\\n            _amount,\\n            _swapper,\\n            _swapDest,\\n            _autoFinish\\n        );\\n    }\\n\\n    function initRedeemStable(\\n        address _operator,\\n        uint256 _amount,\\n        address _swapper,\\n        address _swapDest,\\n        bool _autoFinish\\n    ) public override {\\n        _init(\\n            Type.REDEEM,\\n            _operator,\\n            _amount,\\n            _swapper,\\n            _swapDest,\\n            _autoFinish\\n        );\\n    }\\n\\n    function _finish(uint256 _minAmountOut)\\n        private\\n        onlyGranted\\n        checkStopped\\n        returns (address, uint256)\\n    {\\n        // check status\\n        require(currentStatus.status == Status.RUNNING, \\\"Operation: idle\\\");\\n\\n        WrappedAsset output = WrappedAsset(currentStatus.output);\\n        uint256 amount = output.balanceOf(address(this));\\n        address operator = currentStatus.operator;\\n        address swapper = currentStatus.swapper;\\n\\n        require(amount > 0, \\\"Operation: not enough token\\\");\\n\\n        if (swapper != address(0x0)) {\\n            output.safeIncreaseAllowance(swapper, amount);\\n\\n            try\\n                ISwapper(swapper).swapToken(\\n                    address(output),\\n                    currentStatus.swapDest,\\n                    amount,\\n                    _minAmountOut,\\n                    operator\\n                )\\n            {} catch {\\n                output.safeDecreaseAllowance(swapper, amount);\\n                output.safeTransfer(operator, amount);\\n            }\\n        } else {\\n            output.safeTransfer(operator, amount);\\n        }\\n\\n        // state reference gas optimization\\n        Type typ = currentStatus.typ;\\n\\n        if (typ == Type.DEPOSIT) {\\n            emit FinishDeposit(operator, amount);\\n        } else if (typ == Type.REDEEM) {\\n            emit FinishRedemption(operator, amount);\\n        }\\n\\n        // reset\\n        currentStatus = DEFAULT_STATUS;\\n\\n        return (address(output), amount);\\n    }\\n\\n    function finish() public override {\\n        _finish(0);\\n    }\\n\\n    function finish(uint256 _minAmountOut) public override {\\n        _finish(_minAmountOut);\\n    }\\n\\n    function finishDepositStable() public override {\\n        _finish(0);\\n    }\\n\\n    function finishRedeemStable() public override {\\n        _finish(0);\\n    }\\n\\n    function halt() public override onlyController {\\n        currentStatus.status = Status.STOPPED;\\n    }\\n\\n    function recover() public override onlyController {\\n        if (currentStatus.operator == address(0x0)) {\\n            currentStatus.status = Status.IDLE;\\n        } else {\\n            currentStatus.status = Status.RUNNING;\\n        }\\n    }\\n\\n    function emergencyWithdraw(address _token, address _to)\\n        public\\n        override\\n        onlyController\\n    {\\n        require(\\n            currentStatus.status == Status.STOPPED,\\n            \\\"Operation: not an emergency\\\"\\n        );\\n\\n        if (currentStatus.operator != address(0x0)) {\\n            require(\\n                currentStatus.output != _token,\\n                \\\"Operation: withdrawal rejected\\\"\\n            );\\n        }\\n\\n        IERC20(_token).safeTransfer(\\n            _to,\\n            IERC20(_token).balanceOf(address(this))\\n        );\\n    }\\n\\n    function emergencyWithdraw(address payable _to)\\n        public\\n        override\\n        onlyController\\n    {\\n        require(\\n            currentStatus.status == Status.STOPPED,\\n            \\\"Operation: not an emergency\\\"\\n        );\\n\\n        _to.transfer(address(this).balance);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/operations/OperationStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\nimport {StdQueue} from \\\"../utils/Queue.sol\\\";\\nimport {IOperation} from \\\"./Operation.sol\\\";\\nimport {OperationACL} from \\\"./OperationACL.sol\\\";\\n\\ninterface IOperationStore {\\n    // Events\\n    event OperationAllocated(\\n        address indexed controller,\\n        address indexed operation\\n    );\\n    event OperationInitialized(\\n        address indexed controller,\\n        address indexed operation,\\n        bool autoFinish\\n    );\\n    event OperationFinished(\\n        address indexed controller,\\n        address indexed operation\\n    );\\n    event OperationStopped(\\n        address indexed controller,\\n        address indexed operation\\n    );\\n    event OperationRecovered(\\n        address indexed controller,\\n        address indexed operation\\n    );\\n    event OperationDeallocated(\\n        address indexed controller,\\n        address indexed operation\\n    );\\n    event OperationFlushed(\\n        address indexed controller,\\n        address indexed operation,\\n        Queue from,\\n        Queue to\\n    );\\n\\n    // Data Structure\\n    enum Status {\\n        IDLE,\\n        RUNNING_AUTO,\\n        RUNNING_MANUAL,\\n        FINISHED,\\n        STOPPED,\\n        RECOVERED,\\n        DEALLOCATED\\n    }\\n\\n    enum Queue {IDLE, RUNNING, STOPPED, NULL}\\n\\n    // getter\\n    function getAvailableOperation() external view returns (address);\\n\\n    function getQueuedOperationAt(Queue _queue, uint256 _index)\\n        external\\n        view\\n        returns (address);\\n\\n    function getQueueSizeOf(Queue _queue) external view returns (uint256);\\n\\n    function getStatusOf(address _opt) external view returns (Status);\\n\\n    // logics\\n    function allocate(address _opt) external;\\n\\n    function init(bool _autoFinish) external returns (address);\\n\\n    function finish(address _opt) external;\\n\\n    function halt(address _opt) external;\\n\\n    function recover(address _opt) external;\\n\\n    function deallocate(address _opt) external;\\n\\n    // queue\\n    function flush(Queue queue, uint256 _amount) external;\\n\\n    function flushAll(uint256 _amount) external; // running, failed\\n}\\n\\ncontract OperationStore is IOperationStore, OperationACL {\\n    using StdQueue for StdQueue.AddressQueue;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // queues\\n    mapping(address => Status) public optStat;\\n\\n    EnumerableSet.AddressSet internal optIdle;\\n    StdQueue.AddressQueue internal optStopped;\\n    StdQueue.AddressQueue internal optRunning;\\n\\n    function getAvailableOperation() public view override returns (address) {\\n        if (optIdle.length() == 0) {\\n            return address(0x0);\\n        }\\n        return optIdle.at(0);\\n    }\\n\\n    function getQueuedOperationAt(Queue _queue, uint256 _index)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        if (_queue == Queue.IDLE) {\\n            return optIdle.at(_index);\\n        } else if (_queue == Queue.RUNNING) {\\n            return optRunning.getItemAt(_index);\\n        } else if (_queue == Queue.STOPPED) {\\n            return optStopped.getItemAt(_index);\\n        } else {\\n            revert(\\\"OperationStore: invalid queue type\\\");\\n        }\\n    }\\n\\n    function getQueueSizeOf(Queue _queue)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (_queue == Queue.IDLE) {\\n            return optIdle.length();\\n        } else if (_queue == Queue.RUNNING) {\\n            return optRunning.length();\\n        } else if (_queue == Queue.STOPPED) {\\n            return optStopped.length();\\n        } else {\\n            revert(\\\"OperationStore: invalid queue type\\\");\\n        }\\n    }\\n\\n    function getStatusOf(address _opt) public view override returns (Status) {\\n        return optStat[_opt];\\n    }\\n\\n    // lifecycle\\n\\n    // x -> init\\n    function allocate(address _opt) public override onlyGranted {\\n        optIdle.add(_opt);\\n        optStat[_opt] = Status.IDLE;\\n        emit OperationAllocated(msg.sender, _opt);\\n    }\\n\\n    // =========================== RUNNING QUEUE OPERATIONS =========================== //\\n\\n    // init -> finish -> idle\\n    //      -> fail -> ~\\n    //      -> x (if autoFinish disabled)\\n    function init(bool _autoFinish)\\n        public\\n        override\\n        onlyRouter\\n        returns (address)\\n    {\\n        // consume\\n        address opt = optIdle.at(0);\\n        optIdle.remove(opt);\\n\\n        if (_autoFinish) {\\n            optRunning.produce(opt); // idle -> running\\n            optStat[opt] = Status.RUNNING_AUTO;\\n        } else {\\n            optStat[opt] = Status.RUNNING_MANUAL;\\n        }\\n\\n        emit OperationInitialized(msg.sender, opt, _autoFinish);\\n        return opt;\\n    }\\n\\n    // =========================== RUNNING QUEUE OPERATIONS =========================== //\\n\\n    function finish(address _opt) public override onlyGranted {\\n        Status status = optStat[_opt];\\n\\n        if (status == Status.RUNNING_MANUAL) {\\n            allocate(_opt);\\n        } else if (status == Status.RUNNING_AUTO) {\\n            // wait for flush\\n            optStat[_opt] = Status.FINISHED;\\n        } else {\\n            revert(\\\"Router: invalid condition for finish operation\\\");\\n        }\\n\\n        emit OperationFinished(msg.sender, _opt);\\n    }\\n\\n    // fail -> recover -> idle\\n    //      -> deallocate -> x\\n    function halt(address _opt) public override onlyController {\\n        Status stat = optStat[_opt];\\n        if (stat == Status.IDLE) {\\n            // push to failed queue\\n            optIdle.remove(_opt);\\n            optStopped.produce(_opt);\\n        }\\n        optStat[_opt] = Status.STOPPED;\\n        emit OperationStopped(msg.sender, _opt);\\n    }\\n\\n    function flushRunningQueue(StdQueue.AddressQueue storage _queue)\\n        internal\\n        returns (bool)\\n    {\\n        address opt = _queue.getItemAt(0);\\n        Status stat = optStat[opt];\\n        if (stat == Status.FINISHED) {\\n            optIdle.add(_queue.consume());\\n            optStat[opt] = Status.IDLE;\\n            emit OperationFlushed(msg.sender, opt, Queue.RUNNING, Queue.IDLE);\\n        } else if (stat == Status.STOPPED) {\\n            optStopped.produce(_queue.consume());\\n            emit OperationFlushed(\\n                msg.sender,\\n                opt,\\n                Queue.RUNNING,\\n                Queue.STOPPED\\n            );\\n        } else {\\n            return false; // RUNNING\\n        }\\n        return true;\\n    }\\n\\n    // =========================== FAIL QUEUE OPERATIONS =========================== //\\n\\n    function recover(address _opt) public override onlyController {\\n        optStat[_opt] = Status.RECOVERED;\\n        emit OperationRecovered(msg.sender, _opt);\\n    }\\n\\n    function deallocate(address _opt) public override onlyController {\\n        optStat[_opt] = Status.DEALLOCATED;\\n        emit OperationDeallocated(msg.sender, _opt);\\n    }\\n\\n    function flushStoppedQueue(StdQueue.AddressQueue storage _queue)\\n        internal\\n        returns (bool)\\n    {\\n        address opt = _queue.getItemAt(0);\\n        Status stat = optStat[opt];\\n        if (stat == Status.RECOVERED) {\\n            optIdle.add(_queue.consume());\\n            optStat[opt] = Status.IDLE;\\n            emit OperationFlushed(msg.sender, opt, Queue.STOPPED, Queue.IDLE);\\n        } else if (stat == Status.DEALLOCATED) {\\n            _queue.consume();\\n            emit OperationFlushed(msg.sender, opt, Queue.STOPPED, Queue.NULL);\\n        } else {\\n            return false; // STOPPED\\n        }\\n\\n        return true;\\n    }\\n\\n    function _flush(\\n        StdQueue.AddressQueue storage _queue,\\n        uint256 _amount,\\n        function(StdQueue.AddressQueue storage) returns (bool) _handler\\n    ) internal {\\n        for (uint256 i = 0; i < _amount; i++) {\\n            if (_queue.isEmpty()) {\\n                return;\\n            }\\n\\n            if (!_handler(_queue)) {\\n                return;\\n            }\\n        }\\n    }\\n\\n    function flush(Queue _queue, uint256 _amount)\\n        public\\n        override\\n        onlyController\\n    {\\n        if (_queue == Queue.RUNNING) {\\n            _flush(optRunning, _amount, flushRunningQueue);\\n        } else if (_queue == Queue.STOPPED) {\\n            _flush(optStopped, _amount, flushStoppedQueue);\\n        } else {\\n            revert(\\\"OperationStore: invalid queue type\\\");\\n        }\\n    }\\n\\n    function flushAll(uint256 _amount) public override onlyController {\\n        flush(Queue.RUNNING, _amount);\\n        flush(Queue.STOPPED, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/operations/OperationFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\nimport {OperationACL} from \\\"./OperationACL.sol\\\";\\n\\ninterface OperationStandard {\\n    function initialize(bytes memory) external;\\n\\n    function initPayload(\\n        address,\\n        address,\\n        bytes32\\n    ) external view returns (bytes memory);\\n}\\n\\ninterface IOperationFactory {\\n    event ContractDeployed(\\n        address indexed instance,\\n        address indexed controller,\\n        bytes32 indexed terraAddress\\n    );\\n\\n    struct Standard {\\n        address router;\\n        address controller;\\n        address operation;\\n    }\\n\\n    function pushTerraAddresses(bytes32[] memory _addrs) external;\\n\\n    function fetchAddressBufferSize() external view returns (uint256);\\n\\n    function fetchNextTerraAddress() external view returns (bytes32);\\n\\n    function build(uint256 _optId) external returns (address);\\n}\\n\\ncontract OperationFactory is IOperationFactory, OperationACL {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // standard operations\\n    uint256 public standardIndex = 0;\\n    mapping(uint256 => Standard) public standards;\\n\\n    function pushStandardOperation(\\n        address _router,\\n        address _controller,\\n        address _operation\\n    ) public onlyOwner returns (uint256) {\\n        uint256 optStdId = standardIndex;\\n        standards[optStdId] = Standard({\\n            router: _router,\\n            controller: _controller,\\n            operation: _operation\\n        });\\n        standardIndex += 1;\\n        return optStdId;\\n    }\\n\\n    // terra address buffer\\n    EnumerableSet.Bytes32Set private terraAddresses;\\n\\n    function pushTerraAddresses(bytes32[] memory _addrs)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < _addrs.length; i++) {\\n            terraAddresses.add(_addrs[i]);\\n        }\\n    }\\n\\n    function fetchAddressBufferSize() public view override returns (uint256) {\\n        return terraAddresses.length();\\n    }\\n\\n    function fetchNextTerraAddress() public view override returns (bytes32) {\\n        return terraAddresses.at(0);\\n    }\\n\\n    function fetchTerraAddress() private returns (bytes32) {\\n        bytes32 addr = terraAddresses.at(0);\\n        terraAddresses.remove(addr);\\n        return addr;\\n    }\\n\\n    function build(uint256 _optId)\\n        public\\n        override\\n        onlyGranted\\n        returns (address)\\n    {\\n        bytes32 terraAddr = fetchTerraAddress();\\n        Standard memory std = standards[_optId];\\n\\n        address instance = Clones.clone(std.operation);\\n        bytes memory payload =\\n            OperationStandard(std.operation).initPayload(\\n                std.router,\\n                std.controller,\\n                terraAddr\\n            );\\n        OperationStandard(instance).initialize(payload);\\n\\n        emit ContractDeployed(instance, std.controller, terraAddr);\\n\\n        return instance;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/assets/WrappedAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface WrappedAsset is IERC20 {\\n    event Burn(address indexed _sender, bytes32 indexed _to, uint256 amount);\\n\\n    function burn(uint256 amount, bytes32 to) external;\\n}\\n\"\r\n    },\r\n    \"contracts/operations/OperationACL.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nabstract contract OperationACL is Context {\\n    address public owner;\\n    address public router;\\n    address public controller;\\n\\n    constructor() {\\n        owner = _msgSender();\\n        router = _msgSender();\\n        controller = _msgSender();\\n    }\\n\\n    modifier onlyOwner {\\n        require(_msgSender() == owner, \\\"OperationACL: owner access denied\\\");\\n\\n        _;\\n    }\\n\\n    modifier onlyRouter {\\n        require(_msgSender() == router, \\\"OperationACL: router access denied\\\");\\n\\n        _;\\n    }\\n\\n    modifier onlyController {\\n        require(\\n            _msgSender() == controller,\\n            \\\"OperationACL: controller access denied\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    modifier onlyGranted {\\n        address sender = _msgSender();\\n        require(\\n            sender == owner || sender == router || sender == controller,\\n            \\\"OperationACL: denied\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    function transferOwnership(address _owner) public onlyOwner {\\n        owner = _owner;\\n    }\\n\\n    function transferRouter(address _router) public onlyOwner {\\n        router = _router;\\n    }\\n\\n    function transferController(address _controller) public onlyOwner {\\n        controller = _controller;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/swapper/ISwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\ninterface ISwapper {\\n    function swapToken(\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _minAmountOut,\\n        address _beneficiary\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Queue.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nlibrary StdQueue {\\n    struct Queue {\\n        uint256 index;\\n        uint256 size;\\n        mapping(uint256 => bytes32) store;\\n    }\\n\\n    function _length(Queue storage q) internal view returns (uint256) {\\n        return q.size;\\n    }\\n\\n    function _isEmpty(Queue storage q) internal view returns (bool) {\\n        return q.size == 0;\\n    }\\n\\n    function _getItemAt(Queue storage q, uint256 index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return q.store[q.index + index];\\n    }\\n\\n    function _produce(Queue storage q, bytes32 data) internal {\\n        q.store[q.index + q.size] = data;\\n        q.size += 1;\\n    }\\n\\n    function _consume(Queue storage q) internal returns (bytes32) {\\n        require(!_isEmpty(q), \\\"StdQueue: empty queue\\\");\\n        bytes32 data = _getItemAt(q, 0);\\n        q.index += 1;\\n        q.size -= 1;\\n        return data;\\n    }\\n\\n    // ====================== Bytes32 ====================== //\\n\\n    struct Bytes32Queue {\\n        Queue _inner;\\n    }\\n\\n    function length(Bytes32Queue storage queue)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _length(queue._inner);\\n    }\\n\\n    function isEmpty(Bytes32Queue storage queue) internal view returns (bool) {\\n        return _isEmpty(queue._inner);\\n    }\\n\\n    function getItemAt(Bytes32Queue storage queue, uint256 _index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return _getItemAt(queue._inner, _index);\\n    }\\n\\n    function produce(Bytes32Queue storage queue, bytes32 _value) internal {\\n        _produce(queue._inner, _value);\\n    }\\n\\n    function consume(Bytes32Queue storage queue) internal returns (bytes32) {\\n        return _consume(queue._inner);\\n    }\\n\\n    // ====================== Address ====================== //\\n\\n    struct AddressQueue {\\n        Queue _inner;\\n    }\\n\\n    function length(AddressQueue storage queue)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _length(queue._inner);\\n    }\\n\\n    function isEmpty(AddressQueue storage queue) internal view returns (bool) {\\n        return _isEmpty(queue._inner);\\n    }\\n\\n    function getItemAt(AddressQueue storage queue, uint256 _index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_getItemAt(queue._inner, _index))));\\n    }\\n\\n    function produce(AddressQueue storage queue, address _value) internal {\\n        _produce(queue._inner, bytes32(uint256(uint160(_value))));\\n    }\\n\\n    function consume(AddressQueue storage queue) internal returns (address) {\\n        return address(uint256(bytes32(_consume(queue._inner))));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address master) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `master` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address master, bytes32 salt) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address master, bytes32 salt, address deployer) internal pure returns (address predicted) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address master, bytes32 salt) internal view returns (address predicted) {\\n        return predictDeterministicAddress(master, salt, address(this));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"allocate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkGranted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_opt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_opt\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_opt\",\"type\":\"address\"}],\"name\":\"finish\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"flush\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_opt\",\"type\":\"address\"}],\"name\":\"halt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_optStore\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_optStdId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_optFactory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optStdId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optStore\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_opt\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_runFinish\",\"type\":\"bool\"}],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Controller","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}