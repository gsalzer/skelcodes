{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FBTC.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.13;\\n\\nimport \\\"./StakeableToken.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/access/Roles.sol\\\";\\n\\ncontract FBTC is StakeableToken {\\n    using Roles for Roles.Role;\\n    Roles.Role private _minters;\\n\\n     constructor()\\n        public\\n    {\\n         globals.shareRate = uint40(1 * SHARE_RATE_SCALE);\\n        _minters.add(ORIGIN_ADDR);\\n\\n        _mint(FAUCET_ADDR, FAUCET_MINT);\\n        _mint(LLC_ADDR, LLC_MINT);\\n        _mint(XP_ADDR, XP_MINT);\\n        _mint(BAC_ADDR, BAY_MINT);\\n    }\\n\\n    function mint(address to, uint256 amount) public {\\n        // Only minters can mint\\n        require(_minters.has(msg.sender), \\\"DOES_NOT_HAVE_MINTER_ROLE\\\");\\n\\n        _mint(to, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/StakeableToken.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.13;\\n\\nimport \\\"./GlobalsAndUtility.sol\\\";\\n\\n\\ncontract StakeableToken is GlobalsAndUtility {\\n    /**\\n     * @dev PUBLIC FACING: Open a stake.\\n     * @param newStakedHearts Number of Hearts to stake\\n     * @param newStakedDays Number of days to stake\\n     */\\n    function stakeStart(uint256 newStakedHearts, uint256 newStakedDays)\\n        external\\n    {\\n        GlobalsCache memory g;\\n        GlobalsCache memory gSnapshot;\\n        _globalsLoad(g, gSnapshot);\\n\\n        /* Enforce the minimum stake time */\\n        require(newStakedDays >= MIN_STAKE_DAYS, \\\"FREE: newStakedDays lower than minimum\\\");\\n\\n        /* Check if log data needs to be updated */\\n        _dailyDataUpdateAuto(g);\\n\\n        _stakeStart(g, newStakedHearts, newStakedDays);\\n\\n        /* Remove staked Hearts from balance of staker */\\n        _burn(msg.sender, newStakedHearts);\\n\\n        _globalsSync(g, gSnapshot);\\n    }\\n\\n    /**\\n     * @dev PUBLIC FACING: Unlocks a completed stake, distributing the proceeds of any penalty\\n     * immediately. The staker must still call stakeEnd() to retrieve their stake return (if any).\\n     * @param stakerAddr Address of staker\\n     * @param stakeIndex Index of stake within stake list\\n     * @param stakeIdParam The stake's id\\n     */\\n    function stakeGoodAccounting(address stakerAddr, uint256 stakeIndex, uint40 stakeIdParam)\\n        external\\n    {\\n        GlobalsCache memory g;\\n        GlobalsCache memory gSnapshot;\\n        _globalsLoad(g, gSnapshot);\\n\\n        /* require() is more informative than the default assert() */\\n        require(stakeLists[stakerAddr].length != 0, \\\"FREE: Empty stake list\\\");\\n        require(stakeIndex < stakeLists[stakerAddr].length, \\\"FREE: stakeIndex invalid\\\");\\n\\n        StakeStore storage stRef = stakeLists[stakerAddr][stakeIndex];\\n\\n        /* Get stake copy */\\n        StakeCache memory st;\\n        _stakeLoad(stRef, stakeIdParam, st);\\n\\n        /* Stake must have served full term */\\n        require(g._currentDay >= st._lockedDay + st._stakedDays, \\\"FREE: Stake not fully served\\\");\\n\\n        /* Stake must still be locked */\\n        require(st._unlockedDay == 0, \\\"FREE: Stake already unlocked\\\");\\n\\n        /* Check if log data needs to be updated */\\n        _dailyDataUpdateAuto(g);\\n\\n        /* Unlock the completed stake */\\n        _stakeUnlock(g, st);\\n\\n        /* stakeReturn value is unused here */\\n        (, uint256 payout, uint256 penalty, uint256 cappedPenalty) = _stakePerformance(\\n            g,\\n            st,\\n            st._stakedDays\\n        );\\n\\n        _emitStakeGoodAccounting(\\n            stakerAddr,\\n            stakeIdParam,\\n            st._stakedHearts,\\n            st._stakeShares,\\n            payout,\\n            penalty\\n        );\\n\\n        if (cappedPenalty != 0) {\\n            _splitPenaltyProceeds(g, cappedPenalty);\\n        }\\n\\n        /* st._unlockedDay has changed */\\n        _stakeUpdate(stRef, st);\\n\\n        _globalsSync(g, gSnapshot);\\n    }\\n\\n    /**\\n     * @dev PUBLIC FACING: Closes a stake. The order of the stake list can change so\\n     * a stake id is used to reject stale indexes.\\n     * @param stakeIndex Index of stake within stake list\\n     * @param stakeIdParam The stake's id\\n     */\\n    function stakeEnd(uint256 stakeIndex, uint40 stakeIdParam)\\n        external\\n    {\\n        GlobalsCache memory g;\\n        GlobalsCache memory gSnapshot;\\n        _globalsLoad(g, gSnapshot);\\n\\n        StakeStore[] storage stakeListRef = stakeLists[msg.sender];\\n\\n        /* require() is more informative than the default assert() */\\n        require(stakeListRef.length != 0, \\\"FREE: Empty stake list\\\");\\n        require(stakeIndex < stakeListRef.length, \\\"FREE: stakeIndex invalid\\\");\\n\\n        /* Get stake copy */\\n        StakeCache memory st;\\n        _stakeLoad(stakeListRef[stakeIndex], stakeIdParam, st);\\n\\n        /* Check if log data needs to be updated */\\n        _dailyDataUpdateAuto(g);\\n\\n        uint256 servedDays = 0;\\n\\n        bool prevUnlocked = (st._unlockedDay != 0);\\n        uint256 stakeReturn;\\n        uint256 payout = 0;\\n        uint256 penalty = 0;\\n        uint256 cappedPenalty = 0;\\n\\n        if (g._currentDay >= st._lockedDay) {\\n            if (prevUnlocked) {\\n                /* Previously unlocked in stakeGoodAccounting(), so must have served full term */\\n                servedDays = st._stakedDays;\\n            } else {\\n                _stakeUnlock(g, st);\\n\\n                servedDays = g._currentDay - st._lockedDay;\\n                if (servedDays > st._stakedDays) {\\n                    servedDays = st._stakedDays;\\n                }\\n            }\\n\\n            (stakeReturn, payout, penalty, cappedPenalty) = _stakePerformance(g, st, servedDays);\\n        } else {\\n            /* Stake hasn't been added to the total yet, so no penalties or rewards apply */\\n            g._nextStakeSharesTotal -= st._stakeShares;\\n\\n            stakeReturn = st._stakedHearts;\\n        }\\n\\n        _emitStakeEnd(\\n            stakeIdParam,\\n            st._stakedHearts,\\n            st._stakeShares,\\n            payout,\\n            penalty,\\n            servedDays,\\n            prevUnlocked\\n        );\\n\\n        if (cappedPenalty != 0 && !prevUnlocked) {\\n            /* Split penalty proceeds only if not previously unlocked by stakeGoodAccounting() */\\n            _splitPenaltyProceeds(g, cappedPenalty);\\n        }\\n\\n        /* Pay the stake return, if any, to the staker */\\n        if (stakeReturn != 0) {\\n            _mint(msg.sender, stakeReturn);\\n\\n            /* Update the share rate if necessary */\\n            _shareRateUpdate(g, st, stakeReturn);\\n        }\\n        g._lockedHeartsTotal -= st._stakedHearts;\\n\\n        _stakeRemove(stakeListRef, stakeIndex);\\n\\n        _globalsSync(g, gSnapshot);\\n    }\\n\\n    /**\\n     * @dev PUBLIC FACING: Return the current stake count for a staker address\\n     * @param stakerAddr Address of staker\\n     */\\n    function stakeCount(address stakerAddr)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return stakeLists[stakerAddr].length;\\n    }\\n\\n    /**\\n     * @dev Open a stake.\\n     * @param g Cache of stored globals\\n     * @param newStakedHearts Number of Hearts to stake\\n     * @param newStakedDays Number of days to stake\\n     */\\n    function _stakeStart(\\n        GlobalsCache memory g,\\n        uint256 newStakedHearts,\\n        uint256 newStakedDays\\n    )\\n        internal\\n    {\\n        /* Enforce the maximum stake time */\\n        require(newStakedDays <= MAX_STAKE_DAYS, \\\"FREE: newStakedDays higher than maximum\\\");\\n\\n        uint256 bonusHearts = _stakeStartBonusHearts(newStakedHearts, newStakedDays);\\n        uint256 newStakeShares = (newStakedHearts + bonusHearts) * SHARE_RATE_SCALE / g._shareRate;\\n\\n        /* Ensure newStakedHearts is enough for at least one stake share */\\n        require(newStakeShares != 0, \\\"FREE: newStakedHearts must be at least minimum shareRate\\\");\\n\\n        /*\\n            The stakeStart timestamp will always be part-way through the current\\n            day, so it needs to be rounded-up to the next day to ensure all\\n            stakes align with the same fixed calendar days. The current day is\\n            already rounded-down, so rounded-up is current day + 1.\\n        */\\n        uint256 newLockedDay = g._currentDay + 1;\\n\\n        /* Create Stake */\\n        uint40 newStakeId = ++g._latestStakeId;\\n        _stakeAdd(\\n            stakeLists[msg.sender],\\n            newStakeId,\\n            newStakedHearts,\\n            newStakeShares,\\n            newLockedDay,\\n            newStakedDays\\n        );\\n\\n        _emitStakeStart(newStakeId, newStakedHearts, newStakeShares, newStakedDays);\\n\\n        /* Stake is added to total in the next round, not the current round */\\n        g._nextStakeSharesTotal += newStakeShares;\\n\\n        /* Track total staked Hearts for inflation calculations */\\n        g._lockedHeartsTotal += newStakedHearts;\\n    }\\n\\n    /**\\n     * @dev Calculates total stake payout including rewards for a multi-day range\\n     * @param stakeSharesParam Param from stake to calculate bonuses for\\n     * @param beginDay First day to calculate bonuses for\\n     * @param endDay Last day (non-inclusive) of range to calculate bonuses for\\n     * @return Payout in Hearts\\n     */\\n    function _calcPayoutRewards(\\n        uint256 stakeSharesParam,\\n        uint256 beginDay,\\n        uint256 endDay\\n    )\\n        private\\n        view\\n        returns (uint256 payout)\\n    {\\n        for (uint256 day = beginDay; day < endDay; day++) {\\n            payout += dailyData[day].dayPayoutTotal * stakeSharesParam\\n                / dailyData[day].dayStakeSharesTotal;\\n        }\\n\\n        return payout;\\n    }\\n\\n    /**\\n     * @dev Calculate bonus Hearts for a new stake, if any\\n     * @param newStakedHearts Number of Hearts to stake\\n     * @param newStakedDays Number of days to stake\\n     */\\n    function _stakeStartBonusHearts(uint256 newStakedHearts, uint256 newStakedDays)\\n        private\\n        pure\\n        returns (uint256 bonusHearts)\\n    {\\n        /*\\n            LONGER PAYS BETTER:\\n\\n            If longer than 1 day stake is committed to, each extra day\\n            gives bonus shares of approximately 0.0548%, which is approximately 20%\\n            extra per year of increased stake length committed to, but capped to a\\n            maximum of 200% extra.\\n\\n            extraDays       =  stakedDays - 1\\n\\n            longerBonus%    = (extraDays / 364) * 20%\\n                            = (extraDays / 364) / 5\\n                            =  extraDays / 1820\\n                            =  extraDays / LPB\\n\\n            extraDays       =  longerBonus% * 1820\\n            extraDaysMax    =  longerBonusMax% * 1820\\n                            =  200% * 1820\\n                            =  3640\\n                            =  LPB_MAX_DAYS\\n\\n            BIGGER PAYS BETTER:\\n\\n            Bonus percentage scaled 0% to 10% for the first 150M FREE of stake.\\n\\n            biggerBonus%    = (cappedHearts /  BPB_MAX_HEARTS) * 10%\\n                            = (cappedHearts /  BPB_MAX_HEARTS) / 10\\n                            =  cappedHearts / (BPB_MAX_HEARTS * 10)\\n                            =  cappedHearts /  BPB\\n\\n            COMBINED:\\n\\n            combinedBonus%  =            longerBonus%  +  biggerBonus%\\n\\n                                      cappedExtraDays     cappedHearts\\n                            =         ---------------  +  ------------\\n                                            LPB               BPB\\n\\n                                cappedExtraDays * BPB     cappedHearts * LPB\\n                            =   ---------------------  +  ------------------\\n                                      LPB * BPB               LPB * BPB\\n\\n                                cappedExtraDays * BPB  +  cappedHearts * LPB\\n                            =   --------------------------------------------\\n                                                  LPB  *  BPB\\n\\n            bonusHearts     = hearts * combinedBonus%\\n                            = hearts * (cappedExtraDays * BPB  +  cappedHearts * LPB) / (LPB * BPB)\\n        */\\n        uint256 cappedExtraDays = 0;\\n\\n        /* Must be more than 1 day for Longer-Pays-Better */\\n        if (newStakedDays > 1) {\\n            cappedExtraDays = newStakedDays <= LPB_MAX_DAYS ? newStakedDays - 1 : LPB_MAX_DAYS;\\n        }\\n\\n        uint256 cappedStakedHearts = newStakedHearts <= BPB_MAX_HEARTS\\n            ? newStakedHearts\\n            : BPB_MAX_HEARTS;\\n\\n        bonusHearts = cappedExtraDays * BPB + cappedStakedHearts * LPB;\\n        bonusHearts = newStakedHearts * bonusHearts / (LPB * BPB);\\n\\n        return bonusHearts;\\n    }\\n\\n    function _stakeUnlock(GlobalsCache memory g, StakeCache memory st)\\n        private\\n        pure\\n    {\\n        g._stakeSharesTotal -= st._stakeShares;\\n        st._unlockedDay = g._currentDay;\\n    }\\n\\n    function _stakePerformance(GlobalsCache memory g, StakeCache memory st, uint256 servedDays)\\n        private\\n        view\\n        returns (uint256 stakeReturn, uint256 payout, uint256 penalty, uint256 cappedPenalty)\\n    {\\n        if (servedDays < st._stakedDays) {\\n            (payout, penalty) = _calcPayoutAndEarlyPenalty(\\n                g,\\n                st._lockedDay,\\n                st._stakedDays,\\n                servedDays,\\n                st._stakeShares\\n            );\\n            stakeReturn = st._stakedHearts + payout;\\n        } else {\\n            // servedDays must == stakedDays here\\n            payout = _calcPayoutRewards(\\n                st._stakeShares,\\n                st._lockedDay,\\n                st._lockedDay + servedDays\\n            );\\n            stakeReturn = st._stakedHearts + payout;\\n\\n            penalty = _calcLatePenalty(st._lockedDay, st._stakedDays, st._unlockedDay, stakeReturn);\\n        }\\n        if (penalty != 0) {\\n            if (penalty > stakeReturn) {\\n                /* Cannot have a negative stake return */\\n                cappedPenalty = stakeReturn;\\n                stakeReturn = 0;\\n            } else {\\n                /* Remove penalty from the stake return */\\n                cappedPenalty = penalty;\\n                stakeReturn -= cappedPenalty;\\n            }\\n        }\\n        return (stakeReturn, payout, penalty, cappedPenalty);\\n    }\\n\\n    function _calcPayoutAndEarlyPenalty(\\n        GlobalsCache memory g,\\n        uint256 lockedDayParam,\\n        uint256 stakedDaysParam,\\n        uint256 servedDays,\\n        uint256 stakeSharesParam\\n    )\\n        private\\n        view\\n        returns (uint256 payout, uint256 penalty)\\n    {\\n        uint256 servedEndDay = lockedDayParam + servedDays;\\n\\n        /* 50% of stakedDays (rounded up) with a minimum applied */\\n        uint256 penaltyDays = (stakedDaysParam + 1) / 2;\\n        if (penaltyDays < EARLY_PENALTY_MIN_DAYS) {\\n            penaltyDays = EARLY_PENALTY_MIN_DAYS;\\n        }\\n\\n        if (servedDays == 0) {\\n            /* Fill penalty days with the estimated average payout */\\n            uint256 expected = _estimatePayoutRewardsDay(g, stakeSharesParam);\\n            penalty = expected * penaltyDays;\\n            return (payout, penalty); // Actual payout was 0\\n        }\\n\\n        if (penaltyDays < servedDays) {\\n            /*\\n                Simplified explanation of intervals where end-day is non-inclusive:\\n\\n                penalty:    [lockedDay  ...  penaltyEndDay)\\n                delta:                      [penaltyEndDay  ...  servedEndDay)\\n                payout:     [lockedDay  .......................  servedEndDay)\\n            */\\n            uint256 penaltyEndDay = lockedDayParam + penaltyDays;\\n            penalty = _calcPayoutRewards(stakeSharesParam, lockedDayParam, penaltyEndDay);\\n\\n            uint256 delta = _calcPayoutRewards(stakeSharesParam, penaltyEndDay, servedEndDay);\\n            payout = penalty + delta;\\n            return (payout, penalty);\\n        }\\n\\n        /* penaltyDays >= servedDays  */\\n        payout = _calcPayoutRewards(stakeSharesParam, lockedDayParam, servedEndDay);\\n\\n        if (penaltyDays == servedDays) {\\n            penalty = payout;\\n        } else {\\n            /*\\n                (penaltyDays > servedDays) means not enough days served, so fill the\\n                penalty days with the average payout from only the days that were served.\\n            */\\n            penalty = payout * penaltyDays / servedDays;\\n        }\\n        return (payout, penalty);\\n    }\\n\\n    function _calcLatePenalty(\\n        uint256 lockedDayParam,\\n        uint256 stakedDaysParam,\\n        uint256 unlockedDayParam,\\n        uint256 rawStakeReturn\\n    )\\n        private\\n        pure\\n        returns (uint256)\\n    {\\n        /* Allow grace time before penalties accrue */\\n        uint256 maxUnlockedDay = lockedDayParam + stakedDaysParam + LATE_PENALTY_GRACE_DAYS;\\n        if (unlockedDayParam <= maxUnlockedDay) {\\n            return 0;\\n        }\\n\\n        /* Calculate penalty as a percentage of stake return based on time */\\n        return rawStakeReturn * (unlockedDayParam - maxUnlockedDay) / LATE_PENALTY_SCALE_DAYS;\\n    }\\n\\n    function _splitPenaltyProceeds(GlobalsCache memory g, uint256 penalty)\\n        private\\n    {\\n        /* Split a penalty 50:50 between Origin and stakePenaltyTotal */\\n        uint256 splitPenalty = penalty / 2;\\n\\n        if (splitPenalty != 0) {\\n            _mint(ORIGIN_ADDR, splitPenalty);\\n        }\\n\\n        /* Use the other half of the penalty to account for an odd-numbered penalty */\\n        splitPenalty = penalty - splitPenalty;\\n        g._stakePenaltyTotal += splitPenalty;\\n    }\\n\\n    function _shareRateUpdate(GlobalsCache memory g, StakeCache memory st, uint256 stakeReturn)\\n        private\\n    {\\n        if (stakeReturn > st._stakedHearts) {\\n            /*\\n                Calculate the new shareRate that would yield the same number of shares if\\n                the user re-staked this stakeReturn, factoring in any bonuses they would\\n                receive in stakeStart().\\n            */\\n            uint256 bonusHearts = _stakeStartBonusHearts(stakeReturn, st._stakedDays);\\n            uint256 newShareRate = (stakeReturn + bonusHearts) * SHARE_RATE_SCALE / st._stakeShares;\\n\\n            if (newShareRate > SHARE_RATE_MAX) {\\n                /*\\n                    Realistically this can't happen, but there are contrived theoretical\\n                    scenarios that can lead to extreme values of newShareRate, so it is\\n                    capped to prevent them anyway.\\n                */\\n                newShareRate = SHARE_RATE_MAX;\\n            }\\n\\n            if (newShareRate > g._shareRate) {\\n                g._shareRate = newShareRate;\\n\\n                _emitShareRateChange(newShareRate, st._stakeId);\\n            }\\n        }\\n    }\\n\\n    function _emitStakeStart(\\n        uint40 stakeId,\\n        uint256 stakedHearts,\\n        uint256 stakeShares,\\n        uint256 stakedDays\\n    )\\n        private\\n    {\\n        emit StakeStart( // (auto-generated event)\\n            uint256(uint40(block.timestamp))\\n                | (uint256(uint72(stakedHearts)) << 40)\\n                | (uint256(uint72(stakeShares)) << 112)\\n                | (uint256(uint16(stakedDays)) << 184),\\n            msg.sender,\\n            stakeId\\n        );\\n    }\\n\\n    function _emitStakeGoodAccounting(\\n        address stakerAddr,\\n        uint40 stakeId,\\n        uint256 stakedHearts,\\n        uint256 stakeShares,\\n        uint256 payout,\\n        uint256 penalty\\n    )\\n        private\\n    {\\n        emit StakeGoodAccounting( // (auto-generated event)\\n            uint256(uint40(block.timestamp))\\n                | (uint256(uint72(stakedHearts)) << 40)\\n                | (uint256(uint72(stakeShares)) << 112)\\n                | (uint256(uint72(payout)) << 184),\\n            uint256(uint72(penalty)),\\n            stakerAddr,\\n            stakeId,\\n            msg.sender\\n        );\\n    }\\n\\n    function _emitStakeEnd(\\n        uint40 stakeId,\\n        uint256 stakedHearts,\\n        uint256 stakeShares,\\n        uint256 payout,\\n        uint256 penalty,\\n        uint256 servedDays,\\n        bool prevUnlocked\\n    )\\n        private\\n    {\\n        emit StakeEnd( // (auto-generated event)\\n            uint256(uint40(block.timestamp))\\n                | (uint256(uint72(stakedHearts)) << 40)\\n                | (uint256(uint72(stakeShares)) << 112)\\n                | (uint256(uint72(payout)) << 184),\\n            uint256(uint72(penalty))\\n                | (uint256(uint16(servedDays)) << 72)\\n                | (prevUnlocked ? (1 << 88) : 0),\\n            msg.sender,\\n            stakeId\\n        );\\n    }\\n\\n    function _emitShareRateChange(uint256 shareRate, uint40 stakeId)\\n        private\\n    {\\n        emit ShareRateChange( // (auto-generated event)\\n            uint256(uint40(block.timestamp))\\n                | (uint256(uint40(shareRate)) << 40),\\n            stakeId\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/access/Roles.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping (address => bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/GlobalsAndUtility.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\\";\\n\\n\\ncontract GlobalsAndUtility is ERC20 {\\n    /* Define events */\\n    /*  DailyDataUpdate   (auto-generated event)\\n\\n        uint40            timestamp       -->  data0 [ 39:  0]\\n        uint16            beginDay        -->  data0 [ 55: 40]\\n        uint16            endDay          -->  data0 [ 71: 56]\\n        bool              isAutoUpdate    -->  data0 [ 79: 72]\\n        address  indexed  updaterAddr\\n    */\\n    event DailyDataUpdate(\\n        uint256 data0,\\n        address indexed updaterAddr\\n    );\\n\\n\\n    /*  StakeStart        (auto-generated event)\\n\\n        uint40            timestamp       -->  data0 [ 39:  0]\\n        address  indexed  stakerAddr\\n        uint40   indexed  stakeId\\n        uint72            stakedHearts    -->  data0 [111: 40]\\n        uint72            stakeShares     -->  data0 [183:112]\\n        uint16            stakedDays      -->  data0 [199:184]\\n    */\\n    event StakeStart(\\n        uint256 data0,\\n        address indexed stakerAddr,\\n        uint40 indexed stakeId\\n    );\\n\\n    /*  StakeGoodAccounting(auto-generated event)\\n\\n        uint40            timestamp       -->  data0 [ 39:  0]\\n        address  indexed  stakerAddr\\n        uint40   indexed  stakeId\\n        uint72            stakedHearts    -->  data0 [111: 40]\\n        uint72            stakeShares     -->  data0 [183:112]\\n        uint72            payout          -->  data0 [255:184]\\n        uint72            penalty         -->  data1 [ 71:  0]\\n        address  indexed  senderAddr\\n    */\\n    event StakeGoodAccounting(\\n        uint256 data0,\\n        uint256 data1,\\n        address indexed stakerAddr,\\n        uint40 indexed stakeId,\\n        address indexed senderAddr\\n    );\\n\\n    /*  StakeEnd          (auto-generated event)\\n\\n        uint40            timestamp       -->  data0 [ 39:  0]\\n        address  indexed  stakerAddr\\n        uint40   indexed  stakeId\\n        uint72            stakedHearts    -->  data0 [111: 40]\\n        uint72            stakeShares     -->  data0 [183:112]\\n        uint72            payout          -->  data0 [255:184]\\n        uint72            penalty         -->  data1 [ 71:  0]\\n        uint16            servedDays      -->  data1 [ 87: 72]\\n        bool              prevUnlocked    -->  data1 [ 95: 88]\\n    */\\n    event StakeEnd(\\n        uint256 data0,\\n        uint256 data1,\\n        address indexed stakerAddr,\\n        uint40 indexed stakeId\\n    );\\n\\n    /*  ShareRateChange   (auto-generated event)\\n\\n        uint40            timestamp       -->  data0 [ 39:  0]\\n        uint40            shareRate       -->  data0 [ 79: 40]\\n        uint40   indexed  stakeId\\n    */\\n    event ShareRateChange(\\n        uint256 data0,\\n        uint40 indexed stakeId\\n    );\\n\\n    /* Origin address */\\n    address internal constant ORIGIN_ADDR = 0xB8cF11B8De281560884b4A23Efd69D9aACBf3f4d;\\n\\n    /* DIST addresses */\\n    address internal constant FAUCET_ADDR = 0xc3D6E20cC4D492c4B0b84312Fb5d730D03278222; /* 50% */\\n    address internal constant LLC_ADDR = 0xAef2989e6A23982D93d83F91378d17ec31662bd1;  /* 40% */\\n    address internal constant XP_ADDR = 0xB8cF11B8De281560884b4A23Efd69D9aACBf3f4d;  /* 5% */\\n    address internal constant BAC_ADDR = 0x2D38F017eC55858583d0dB5f6088acbfE0a39808;  /* 5% */\\n\\n    /* 1B total initial distrubution */\\n    uint256 internal constant FAUCET_MINT = 50000000000000000;\\n    uint256 internal constant LLC_MINT = 40000000000000000;\\n    uint256 internal constant XP_MINT = 5000000000000000;\\n    uint256 internal constant BAY_MINT = 5000000000000000;\\n\\n    /* ERC20 constants */\\n    string public constant name = \\\"FreeBitcoins Token\\\";\\n    string public constant symbol = \\\"FBTC\\\";\\n    uint8 public constant decimals = 8;\\n\\n    /* Hearts per Satoshi = 10,000 * 1e8 / 1e8 = 1e4 */\\n    uint256 private constant HEARTS_PER_FBTC = 10 ** uint256(decimals); // 1e8\\n\\n    /* Time of contract launch (2019-03-04T00:00:00Z) */\\n    uint256 internal constant LAUNCH_TIME = 1627603200000;\\n                                            \\n    /* Size of a Hearts or Shares uint */\\n    uint256 internal constant HEART_UINT_SIZE = 72;\\n\\n     /* Stake timing parameters */\\n    uint256 internal constant MIN_STAKE_DAYS = 1;\\n\\n    uint256 internal constant MAX_STAKE_DAYS = 5555; // Approx 15 years\\n    uint256 internal constant EARLY_PENALTY_MIN_DAYS = 90;\\n\\n    uint256 private constant LATE_PENALTY_GRACE_WEEKS = 2;\\n    uint256 internal constant LATE_PENALTY_GRACE_DAYS = LATE_PENALTY_GRACE_WEEKS * 7;\\n\\n    uint256 private constant LATE_PENALTY_SCALE_WEEKS = 100;\\n    uint256 internal constant LATE_PENALTY_SCALE_DAYS = LATE_PENALTY_SCALE_WEEKS * 7;\\n\\n    /* Stake shares Longer Pays Better bonus constants used by _stakeStartBonusHearts() */\\n    uint256 private constant LPB_BONUS_PERCENT = 20;\\n    uint256 private constant LPB_BONUS_MAX_PERCENT = 200;\\n    uint256 internal constant LPB = 364 * 100 / LPB_BONUS_PERCENT;\\n    uint256 internal constant LPB_MAX_DAYS = LPB * LPB_BONUS_MAX_PERCENT / 100;\\n\\n    /* Stake shares Bigger Pays Better bonus constants used by _stakeStartBonusHearts() */\\n    uint256 private constant BPB_BONUS_PERCENT = 10;\\n    uint256 private constant BPB_MAX_FBTC = 150 * 1e6;\\n    uint256 internal constant BPB_MAX_HEARTS = BPB_MAX_FBTC * HEARTS_PER_FBTC;\\n    uint256 internal constant BPB = BPB_MAX_HEARTS * 100 / BPB_BONUS_PERCENT;\\n\\n    /* Share rate is scaled to increase precision */\\n    uint256 internal constant SHARE_RATE_SCALE = 1e5;\\n\\n    /* Share rate max (after scaling) */\\n    uint256 internal constant SHARE_RATE_UINT_SIZE = 40;\\n    uint256 internal constant SHARE_RATE_MAX = (1 << SHARE_RATE_UINT_SIZE) - 1;\\n\\n    /* Globals expanded for memory (except _latestStakeId) and compact for storage */\\n    struct GlobalsCache {\\n        // 1\\n        uint256 _lockedHeartsTotal;\\n        uint256 _nextStakeSharesTotal;\\n        uint256 _shareRate;\\n        uint256 _stakePenaltyTotal;\\n        // 2\\n        uint256 _dailyDataCount;\\n        uint256 _stakeSharesTotal;\\n        uint40 _latestStakeId;\\n        //\\n        uint256 _currentDay;\\n    }\\n\\n    struct GlobalsStore {\\n        // 1\\n        uint72 lockedHeartsTotal;\\n        uint72 nextStakeSharesTotal;\\n        uint40 shareRate;\\n        uint72 stakePenaltyTotal;\\n        // 2\\n        uint16 dailyDataCount;\\n        uint72 stakeSharesTotal;\\n        uint40 latestStakeId;\\n    }\\n    GlobalsStore public globals;\\n\\n    /* Daily data */\\n    struct DailyDataStore {\\n        uint72 dayPayoutTotal;\\n        uint72 dayStakeSharesTotal;\\n    }\\n\\n    mapping(uint256 => DailyDataStore) public dailyData;\\n\\n    /* Stake expanded for memory (except _stakeId) and compact for storage */\\n    struct StakeCache {\\n        uint40 _stakeId;\\n        uint256 _stakedHearts;\\n        uint256 _stakeShares;\\n        uint256 _lockedDay;\\n        uint256 _stakedDays;\\n        uint256 _unlockedDay;\\n    }\\n\\n    struct StakeStore {\\n        uint40 stakeId;\\n        uint72 stakedHearts;\\n        uint72 stakeShares;\\n        uint16 lockedDay;\\n        uint16 stakedDays;\\n        uint16 unlockedDay;\\n    }\\n\\n    mapping(address => StakeStore[]) public stakeLists;\\n\\n     /* Temporary state for calculating daily rounds */\\n    struct DailyRoundState {\\n        uint256 _allocSupplyCached;\\n        uint256 _payoutTotal;\\n    }\\n\\n   /**\\n     * @dev PUBLIC FACING: Optionally update daily data for a smaller\\n     * range to reduce gas cost for a subsequent operation\\n     * @param beforeDay Only update days before this day number (optional; 0 for current day)\\n     */\\n    function dailyDataUpdate(uint256 beforeDay)\\n        external\\n    {\\n        GlobalsCache memory g;\\n        GlobalsCache memory gSnapshot;\\n        _globalsLoad(g, gSnapshot);\\n\\n        if (beforeDay != 0) {\\n            require(beforeDay <= g._currentDay, \\\"FBTC: beforeDay cannot be in the future\\\");\\n\\n            _dailyDataUpdate(g, beforeDay, false);\\n        } else {\\n            /* Default to updating before current day */\\n            _dailyDataUpdate(g, g._currentDay, false);\\n        }\\n\\n        _globalsSync(g, gSnapshot);\\n    }\\n\\n\\n     /**\\n     * @dev PUBLIC FACING: External helper to return multiple values of daily data with\\n     * a single call. Ugly implementation due to limitations of the standard ABI encoder.\\n     * @param beginDay First day of data range\\n     * @param endDay Last day (non-inclusive) of data range\\n     * @return Fixed array of packed values\\n     */\\n    function dailyDataRange(uint256 beginDay, uint256 endDay)\\n        external\\n        view\\n        returns (uint256[] memory list)\\n    {\\n        require(beginDay < endDay && endDay <= globals.dailyDataCount, \\\"FBTC: range invalid\\\");\\n\\n        list = new uint256[](endDay - beginDay);\\n\\n        uint256 src = beginDay;\\n        uint256 dst = 0;\\n        uint256 v;\\n        do {\\n            v = uint256(dailyData[src].dayStakeSharesTotal) << HEART_UINT_SIZE;\\n            v |= uint256(dailyData[src].dayPayoutTotal);\\n\\n            list[dst++] = v;\\n        } while (++src < endDay);\\n\\n        return list;\\n    }\\n\\n     /**\\n     * @dev PUBLIC FACING: External helper to return most global info with a single call.\\n     * Ugly implementation due to limitations of the standard ABI encoder.\\n     * @return Fixed array of values\\n     */\\n    function globalInfo()\\n        external\\n        view\\n        returns (uint256[9] memory)\\n    {\\n        return [\\n            // 1\\n            globals.lockedHeartsTotal,\\n            globals.nextStakeSharesTotal,\\n            globals.shareRate,\\n            globals.stakePenaltyTotal,\\n            // 2\\n            globals.dailyDataCount,\\n            globals.stakeSharesTotal,\\n            globals.latestStakeId,\\n            //\\n            block.timestamp,\\n            totalSupply()\\n        ];\\n    }\\n\\n    /**\\n     * @dev PUBLIC FACING: ERC20 totalSupply() is the circulating supply and does not include any\\n     * staked Hearts. allocatedSupply() includes both.\\n     * @return Allocated Supply in Hearts\\n     */\\n    function allocatedSupply()\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return totalSupply() + globals.lockedHeartsTotal;\\n    }\\n\\n    /**\\n     * @dev PUBLIC FACING: External helper for the current day number since launch time\\n     * @return Current day number (zero-based)\\n     */\\n    function getCurrentDay()\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _getCurrentDay();\\n    }\\n\\n    function _getCurrentDay()\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return (block.timestamp - LAUNCH_TIME) / 1 days;\\n    }\\n\\n    function _dailyDataUpdateAuto(GlobalsCache memory g)\\n        internal\\n    {\\n        _dailyDataUpdate(g, g._currentDay, true);\\n    }\\n\\n    function _globalsLoad(GlobalsCache memory g, GlobalsCache memory gSnapshot)\\n        internal\\n        view\\n    {\\n        // 1\\n        g._lockedHeartsTotal = globals.lockedHeartsTotal;\\n        g._nextStakeSharesTotal = globals.nextStakeSharesTotal;\\n        g._shareRate = globals.shareRate;\\n        g._stakePenaltyTotal = globals.stakePenaltyTotal;\\n        // 2\\n        g._dailyDataCount = globals.dailyDataCount;\\n        g._stakeSharesTotal = globals.stakeSharesTotal;\\n        g._latestStakeId = globals.latestStakeId;\\n        //\\n        g._currentDay = _currentDay();\\n\\n        _globalsCacheSnapshot(g, gSnapshot);\\n    }\\n\\n        function _globalsCacheSnapshot(GlobalsCache memory g, GlobalsCache memory gSnapshot)\\n        internal\\n        pure\\n    {\\n        // 1\\n        gSnapshot._lockedHeartsTotal = g._lockedHeartsTotal;\\n        gSnapshot._nextStakeSharesTotal = g._nextStakeSharesTotal;\\n        gSnapshot._shareRate = g._shareRate;\\n        gSnapshot._stakePenaltyTotal = g._stakePenaltyTotal;\\n        // 2\\n        gSnapshot._dailyDataCount = g._dailyDataCount;\\n        gSnapshot._stakeSharesTotal = g._stakeSharesTotal;\\n        gSnapshot._latestStakeId = g._latestStakeId;\\n    }\\n\\n    function _globalsSync(GlobalsCache memory g, GlobalsCache memory gSnapshot)\\n        internal\\n    {\\n        if (g._lockedHeartsTotal != gSnapshot._lockedHeartsTotal\\n            || g._nextStakeSharesTotal != gSnapshot._nextStakeSharesTotal\\n            || g._shareRate != gSnapshot._shareRate\\n            || g._stakePenaltyTotal != gSnapshot._stakePenaltyTotal) {\\n            // 1\\n            globals.lockedHeartsTotal = uint72(g._lockedHeartsTotal);\\n            globals.nextStakeSharesTotal = uint72(g._nextStakeSharesTotal);\\n            globals.shareRate = uint40(g._shareRate);\\n            globals.stakePenaltyTotal = uint72(g._stakePenaltyTotal);\\n        }\\n        if (g._dailyDataCount != gSnapshot._dailyDataCount\\n            || g._stakeSharesTotal != gSnapshot._stakeSharesTotal\\n            || g._latestStakeId != gSnapshot._latestStakeId) {\\n            // 2\\n            globals.dailyDataCount = uint16(g._dailyDataCount);\\n            globals.stakeSharesTotal = uint72(g._stakeSharesTotal);\\n            globals.latestStakeId = g._latestStakeId;\\n        }\\n    }\\n\\n    function _stakeLoad(StakeStore storage stRef, uint40 stakeIdParam, StakeCache memory st)\\n        internal\\n        view\\n    {\\n        /* Ensure caller's stakeIndex is still current */\\n        require(stakeIdParam == stRef.stakeId, \\\"FBTC: stakeIdParam not in stake\\\");\\n\\n        st._stakeId = stRef.stakeId;\\n        st._stakedHearts = stRef.stakedHearts;\\n        st._stakeShares = stRef.stakeShares;\\n        st._lockedDay = stRef.lockedDay;\\n        st._stakedDays = stRef.stakedDays;\\n        st._unlockedDay = stRef.unlockedDay;\\n    }\\n\\n     function _stakeUpdate(StakeStore storage stRef, StakeCache memory st)\\n        internal\\n    {\\n        stRef.stakeId = st._stakeId;\\n        stRef.stakedHearts = uint72(st._stakedHearts);\\n        stRef.stakeShares = uint72(st._stakeShares);\\n        stRef.lockedDay = uint16(st._lockedDay);\\n        stRef.stakedDays = uint16(st._stakedDays);\\n        stRef.unlockedDay = uint16(st._unlockedDay);\\n    }\\n\\n    function _stakeAdd(\\n        StakeStore[] storage stakeListRef,\\n        uint40 newStakeId,\\n        uint256 newStakedHearts,\\n        uint256 newStakeShares,\\n        uint256 newLockedDay,\\n        uint256 newStakedDays\\n    )\\n        internal\\n    {\\n        stakeListRef.push(\\n            StakeStore(\\n                newStakeId,\\n                uint72(newStakedHearts),\\n                uint72(newStakeShares),\\n                uint16(newLockedDay),\\n                uint16(newStakedDays),\\n                uint16(0) // unlockedDay\\n            )\\n        );\\n    }\\n\\n   /**\\n     * @dev Efficiently delete from an unordered array by moving the last element\\n     * to the \\\"hole\\\" and reducing the array length. Can change the order of the list\\n     * and invalidate previously held indexes.\\n     * @notice stakeListRef length and stakeIndex are already ensured valid in stakeEnd()\\n     * @param stakeListRef Reference to stakeLists[stakerAddr] array in storage\\n     * @param stakeIndex Index of the element to delete\\n     */\\n    function _stakeRemove(StakeStore[] storage stakeListRef, uint256 stakeIndex)\\n        internal\\n    {\\n        uint256 lastIndex = stakeListRef.length - 1;\\n\\n        /* Skip the copy if element to be removed is already the last element */\\n        if (stakeIndex != lastIndex) {\\n            /* Copy last element to the requested element's \\\"hole\\\" */\\n            stakeListRef[stakeIndex] = stakeListRef[lastIndex];\\n        }\\n\\n        /*\\n            Reduce the array length now that the array is contiguous.\\n            Surprisingly, 'pop()' uses less gas than 'stakeListRef.length = lastIndex'\\n        */\\n        stakeListRef.pop();\\n    }\\n\\n    /**\\n     * @dev Estimate the stake payout for an incomplete day\\n     * @param g Cache of stored globals\\n     * @param stakeSharesParam Param from stake to calculate bonuses for\\n     * @return Payout in Hearts\\n     */\\n    function _estimatePayoutRewardsDay(GlobalsCache memory g, uint256 stakeSharesParam)\\n        internal\\n        view\\n        returns (uint256 payout)\\n    {\\n        /* Prevent updating state for this estimation */\\n        GlobalsCache memory gTmp;\\n        _globalsCacheSnapshot(g, gTmp);\\n\\n        DailyRoundState memory rs;\\n        rs._allocSupplyCached = totalSupply() + g._lockedHeartsTotal;\\n\\n        _dailyRoundCalc(gTmp, rs);\\n\\n        /* Stake is no longer locked so it must be added to total as if it were */\\n        gTmp._stakeSharesTotal += stakeSharesParam;\\n        payout = rs._payoutTotal * stakeSharesParam / gTmp._stakeSharesTotal;\\n\\n        return payout;\\n    }\\n\\n\\n    function _dailyRoundCalc(GlobalsCache memory g, DailyRoundState memory rs)\\n        private\\n        pure\\n    {\\n        /*\\n            Calculate payout round\\n\\n            Inflation of 10% inflation per 364 days             (approx 1 year)\\n            dailyInterestRate   = exp(log(1 + 10%)  / 364) - 1\\n                                = exp(log(1 + 0.1) / 364) - 1\\n                                = exp(log(1.1) / 364) - 1\\n                                = 0.000261875            (approx)\\n\\n            payout  = allocSupply * dailyInterestRate\\n                    = allocSupply / (1 / dailyInterestRate)\\n                    = allocSupply / (1 / 0.000261875)\\n                                     \\n\\n                    = allocSupply / 3818.61575179            (approx)\\n                    = allocSupply * 10000 / 38186157             (* 10000/10000 for int precision)\\n        */\\n        rs._payoutTotal = rs._allocSupplyCached * 10000 / 38186157;\\n        if (g._stakePenaltyTotal != 0) {\\n            rs._payoutTotal += g._stakePenaltyTotal;\\n            g._stakePenaltyTotal = 0;\\n        }\\n    }\\n\\n    function _dailyRoundCalcAndStore(GlobalsCache memory g, DailyRoundState memory rs, uint256 day)\\n        private\\n    {\\n        _dailyRoundCalc(g, rs);\\n\\n        dailyData[day].dayPayoutTotal = uint72(rs._payoutTotal);\\n        dailyData[day].dayStakeSharesTotal = uint72(g._stakeSharesTotal);\\n    }\\n\\n     /**\\n     * @dev PUBLIC FACING: External helper for the current day number since launch time\\n     * @return Current day number (zero-based)\\n     */\\n    function currentDay()\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _currentDay();\\n    }\\n\\n    function _currentDay() \\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return (block.timestamp - LAUNCH_TIME) / 1 days;\\n    }\\n\\n\\n    function _dailyDataUpdate(GlobalsCache memory g, uint256 beforeDay, bool isAutoUpdate)\\n        private\\n    {\\n        if (g._dailyDataCount >= beforeDay) {\\n            /* Already up-to-date */\\n            return;\\n        }\\n\\n        DailyRoundState memory rs;\\n        rs._allocSupplyCached = totalSupply() + g._lockedHeartsTotal;\\n\\n        uint256 day = g._dailyDataCount;\\n\\n        _dailyRoundCalcAndStore(g, rs, day);\\n\\n        /* Stakes started during this day are added to the total the next day */\\n        if (g._nextStakeSharesTotal != 0) {\\n            g._stakeSharesTotal += g._nextStakeSharesTotal;\\n            g._nextStakeSharesTotal = 0;\\n        }\\n\\n        while (++day < beforeDay) {\\n            _dailyRoundCalcAndStore(g, rs, day);\\n        }\\n\\n        _emitDailyDataUpdate(g._dailyDataCount, day, isAutoUpdate);\\n        g._dailyDataCount = day;\\n\\n    }\\n\\n    function _emitDailyDataUpdate(uint256 beginDay, uint256 endDay, bool isAutoUpdate)\\n        private\\n    {\\n        emit DailyDataUpdate( // (auto-generated event)\\n            uint256(uint40(block.timestamp))\\n                | (uint256(uint16(beginDay)) << 40)\\n                | (uint256(uint16(endDay)) << 56)\\n                | (isAutoUpdate ? (1 << 72) : 0),\\n            msg.sender\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data0\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updaterAddr\",\"type\":\"address\"}],\"name\":\"DailyDataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data0\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"}],\"name\":\"ShareRateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakerAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"}],\"name\":\"StakeEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakerAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderAddr\",\"type\":\"address\"}],\"name\":\"StakeGoodAccounting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data0\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakerAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"}],\"name\":\"StakeStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocatedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dailyData\",\"outputs\":[{\"internalType\":\"uint72\",\"name\":\"dayPayoutTotal\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"dayStakeSharesTotal\",\"type\":\"uint72\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"beginDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDay\",\"type\":\"uint256\"}],\"name\":\"dailyDataRange\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"list\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"beforeDay\",\"type\":\"uint256\"}],\"name\":\"dailyDataUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalInfo\",\"outputs\":[{\"internalType\":\"uint256[9]\",\"name\":\"\",\"type\":\"uint256[9]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globals\",\"outputs\":[{\"internalType\":\"uint72\",\"name\":\"lockedHeartsTotal\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"nextStakeSharesTotal\",\"type\":\"uint72\"},{\"internalType\":\"uint40\",\"name\":\"shareRate\",\"type\":\"uint40\"},{\"internalType\":\"uint72\",\"name\":\"stakePenaltyTotal\",\"type\":\"uint72\"},{\"internalType\":\"uint16\",\"name\":\"dailyDataCount\",\"type\":\"uint16\"},{\"internalType\":\"uint72\",\"name\":\"stakeSharesTotal\",\"type\":\"uint72\"},{\"internalType\":\"uint40\",\"name\":\"latestStakeId\",\"type\":\"uint40\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddr\",\"type\":\"address\"}],\"name\":\"stakeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"stakeIdParam\",\"type\":\"uint40\"}],\"name\":\"stakeEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"stakeIdParam\",\"type\":\"uint40\"}],\"name\":\"stakeGoodAccounting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeLists\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"internalType\":\"uint72\",\"name\":\"stakedHearts\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"stakeShares\",\"type\":\"uint72\"},{\"internalType\":\"uint16\",\"name\":\"lockedDay\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"stakedDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"unlockedDay\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStakedHearts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newStakedDays\",\"type\":\"uint256\"}],\"name\":\"stakeStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FBTC","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}