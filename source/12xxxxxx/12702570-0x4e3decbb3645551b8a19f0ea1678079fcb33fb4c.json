{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"deploy/@jarvis-network/uma-core/contracts/common/implementation/AddressWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../../../../@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Lockable.sol\\\";\\n\\n/**\\n * @title A contract to track a whitelist of addresses.\\n */\\ncontract AddressWhitelist is Ownable, Lockable {\\n    enum Status { None, In, Out }\\n    mapping(address => Status) public whitelist;\\n\\n    address[] public whitelistIndices;\\n\\n    event AddedToWhitelist(address indexed addedAddress);\\n    event RemovedFromWhitelist(address indexed removedAddress);\\n\\n    /**\\n     * @notice Adds an address to the whitelist.\\n     * @param newElement the new address to add.\\n     */\\n    function addToWhitelist(address newElement) external nonReentrant() onlyOwner {\\n        // Ignore if address is already included\\n        if (whitelist[newElement] == Status.In) {\\n            return;\\n        }\\n\\n        // Only append new addresses to the array, never a duplicate\\n        if (whitelist[newElement] == Status.None) {\\n            whitelistIndices.push(newElement);\\n        }\\n\\n        whitelist[newElement] = Status.In;\\n\\n        emit AddedToWhitelist(newElement);\\n    }\\n\\n    /**\\n     * @notice Removes an address from the whitelist.\\n     * @param elementToRemove the existing address to remove.\\n     */\\n    function removeFromWhitelist(address elementToRemove) external nonReentrant() onlyOwner {\\n        if (whitelist[elementToRemove] != Status.Out) {\\n            whitelist[elementToRemove] = Status.Out;\\n            emit RemovedFromWhitelist(elementToRemove);\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks whether an address is on the whitelist.\\n     * @param elementToCheck the address to check.\\n     * @return True if `elementToCheck` is on the whitelist, or False.\\n     */\\n    function isOnWhitelist(address elementToCheck) external view nonReentrantView() returns (bool) {\\n        return whitelist[elementToCheck] == Status.In;\\n    }\\n\\n    /**\\n     * @notice Gets all addresses that are currently included in the whitelist.\\n     * @dev Note: This method skips over, but still iterates through addresses. It is possible for this call to run out\\n     * of gas if a large number of addresses have been removed. To reduce the likelihood of this unlikely scenario, we\\n     * can modify the implementation so that when addresses are removed, the last addresses in the array is moved to\\n     * the empty index.\\n     * @return activeWhitelist the list of addresses on the whitelist.\\n     */\\n    function getWhitelist() external view nonReentrantView() returns (address[] memory activeWhitelist) {\\n        // Determine size of whitelist first\\n        uint256 activeCount = 0;\\n        for (uint256 i = 0; i < whitelistIndices.length; i++) {\\n            if (whitelist[whitelistIndices[i]] == Status.In) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Populate whitelist\\n        activeWhitelist = new address[](activeCount);\\n        activeCount = 0;\\n        for (uint256 i = 0; i < whitelistIndices.length; i++) {\\n            address addr = whitelistIndices[i];\\n            if (whitelist[addr] == Status.In) {\\n                activeWhitelist[activeCount] = addr;\\n                activeCount++;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@jarvis-network/uma-core/contracts/common/implementation/Lockable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\\n * is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\\n * and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\\n */\\ncontract Lockable {\\n    bool private _notEntered;\\n\\n    constructor() internal {\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _preEntranceCheck();\\n        _preEntranceSet();\\n        _;\\n        _postEntranceReset();\\n    }\\n\\n    /**\\n     * @dev Designed to prevent a view-only method from being re-entered during a call to a `nonReentrant()` state-changing method.\\n     */\\n    modifier nonReentrantView() {\\n        _preEntranceCheck();\\n        _;\\n    }\\n\\n    // Internal methods are used to avoid copying the require statement's bytecode to every `nonReentrant()` method.\\n    // On entry into a function, `_preEntranceCheck()` should always be called to check if the function is being re-entered.\\n    // Then, if the function modifies state, it should call `_postEntranceSet()`, perform its logic, and then call `_postEntranceReset()`.\\n    // View-only methods can simply call `_preEntranceCheck()` to make sure that it is not being re-entered.\\n    function _preEntranceCheck() internal view {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n    }\\n\\n    function _preEntranceSet() internal {\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n    }\\n\\n    function _postEntranceReset() internal {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/derivative/v2/PerpetualPositionManagerPoolParty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from '../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {IStandardERC20} from '../../base/interfaces/IStandardERC20.sol';\\nimport {\\n  MintableBurnableIERC20\\n} from '../common/interfaces/MintableBurnableIERC20.sol';\\nimport {\\n  IDerivativeDeployment\\n} from '../common/interfaces/IDerivativeDeployment.sol';\\nimport {IDerivativeMain} from '../common/interfaces/IDerivativeMain.sol';\\nimport {\\n  OracleInterface\\n} from '../../../@jarvis-network/uma-core/contracts/oracle/interfaces/OracleInterface.sol';\\nimport {\\n  IdentifierWhitelistInterface\\n} from '../../../@jarvis-network/uma-core/contracts/oracle/interfaces/IdentifierWhitelistInterface.sol';\\nimport {\\n  AdministrateeInterface\\n} from '../../../@jarvis-network/uma-core/contracts/oracle/interfaces/AdministrateeInterface.sol';\\nimport {ISynthereumFinder} from '../../core/interfaces/IFinder.sol';\\nimport {IDerivative} from '../common/interfaces/IDerivative.sol';\\nimport {SynthereumInterfaces} from '../../core/Constants.sol';\\nimport {\\n  OracleInterfaces\\n} from '../../../@jarvis-network/uma-core/contracts/oracle/implementation/Constants.sol';\\nimport {SafeMath} from '../../../@openzeppelin/contracts/math/SafeMath.sol';\\nimport {SafeERC20} from '../../../@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport {\\n  FixedPoint\\n} from '../../../@jarvis-network/uma-core/contracts/common/implementation/FixedPoint.sol';\\nimport {\\n  PerpetualPositionManagerPoolPartyLib\\n} from './PerpetualPositionManagerPoolPartyLib.sol';\\nimport {AccessControl} from '../../../@openzeppelin/contracts/access/AccessControl.sol';\\nimport {\\n  AddressWhitelist\\n} from '../../../@jarvis-network/uma-core/contracts/common/implementation/AddressWhitelist.sol';\\nimport {FeePayerParty} from '../common/FeePayerParty.sol';\\n\\n/**\\n * @title Financial contract with priceless position management.\\n * @notice Handles positions for multiple sponsors in an optimistic (i.e., priceless) way without relying\\n * on a price feed. On construction, deploys a new ERC20, managed by this contract, that is the synthetic token.\\n */\\ncontract PerpetualPositionManagerPoolParty is\\n  IDerivative,\\n  AccessControl,\\n  FeePayerParty\\n{\\n  using FixedPoint for FixedPoint.Unsigned;\\n  using SafeERC20 for IERC20;\\n  using SafeERC20 for MintableBurnableIERC20;\\n  using PerpetualPositionManagerPoolPartyLib for PositionData;\\n  using PerpetualPositionManagerPoolPartyLib for PositionManagerData;\\n\\n  bytes32 public constant POOL_ROLE = keccak256('Pool');\\n\\n  /**\\n   * @notice Construct the PerpetualPositionManager.\\n   * @dev Deployer of this contract should consider carefully which parties have ability to mint and burn\\n   * the synthetic tokens referenced by `_tokenAddress`. This contract's security assumes that no external accounts\\n   * can mint new tokens, which could be used to steal all of this contract's locked collateral.\\n   * We recommend to only use synthetic token contracts whose sole Owner role (the role capable of adding & removing roles)\\n   * is assigned to this contract, whose sole Minter role is assigned to this contract, and whose\\n   * total supply is 0 prior to construction of this contract.\\n   * @param withdrawalLiveness liveness delay, in seconds, for pending withdrawals.\\n   * @param collateralAddress ERC20 token used as collateral for all positions.\\n   * @param tokenAddress ERC20 token used as synthetic token.\\n   * @param finderAddress UMA protocol Finder used to discover other protocol contracts.\\n   * @param priceFeedIdentifier registered in the DVM for the synthetic.\\n   * @param minSponsorTokens minimum amount of collateral that must exist at any time in a position.\\n   * @param timerAddress Contract that stores the current time in a testing environment. Set to 0x0 for production.\\n   * @param excessTokenBeneficiary Beneficiary to send all excess token balances that accrue in the contract.\\n   * @param synthereumFinder The SynthereumFinder contract\\n   */\\n  struct PositionManagerParams {\\n    uint256 withdrawalLiveness;\\n    address collateralAddress;\\n    address tokenAddress;\\n    address finderAddress;\\n    bytes32 priceFeedIdentifier;\\n    FixedPoint.Unsigned minSponsorTokens;\\n    address timerAddress;\\n    address excessTokenBeneficiary;\\n    ISynthereumFinder synthereumFinder;\\n  }\\n\\n  //Describe role structure\\n  struct Roles {\\n    address[] admins;\\n    address[] pools;\\n  }\\n\\n  // Represents a single sponsor's position. All collateral is held by this contract.\\n  // This struct acts as bookkeeping for how much of that collateral is allocated to each sponsor.\\n  struct PositionData {\\n    FixedPoint.Unsigned tokensOutstanding;\\n    // Tracks pending withdrawal requests. A withdrawal request is pending if `withdrawalRequestPassTimestamp != 0`.\\n    uint256 withdrawalRequestPassTimestamp;\\n    FixedPoint.Unsigned withdrawalRequestAmount;\\n    // Raw collateral value. This value should never be accessed directly -- always use _getFeeAdjustedCollateral().\\n    // To add or remove collateral, use _addCollateral() and _removeCollateral().\\n    FixedPoint.Unsigned rawCollateral;\\n  }\\n\\n  struct GlobalPositionData {\\n    // Keep track of the total collateral and tokens across all positions to enable calculating the\\n    // global collateralization ratio without iterating over all positions.\\n    FixedPoint.Unsigned totalTokensOutstanding;\\n    // Similar to the rawCollateral in PositionData, this value should not be used directly.\\n    // _getFeeAdjustedCollateral(), _addCollateral() and _removeCollateral() must be used to access and adjust.\\n    FixedPoint.Unsigned rawTotalPositionCollateral;\\n  }\\n\\n  struct PositionManagerData {\\n    // SynthereumFinder contract\\n    ISynthereumFinder synthereumFinder;\\n    // Synthetic token created by this contract.\\n    MintableBurnableIERC20 tokenCurrency;\\n    // Unique identifier for DVM price feed ticker.\\n    bytes32 priceIdentifier;\\n    // Time that has to elapse for a withdrawal request to be considered passed, if no liquidations occur.\\n    // !!Note: The lower the withdrawal liveness value, the more risk incurred by the contract.\\n    // Extremely low liveness values increase the chance that opportunistic invalid withdrawal requests\\n    // expire without liquidation, thereby increasing the insolvency risk for the contract as a whole. An insolvent\\n    // contract is extremely risky for any sponsor or synthetic token holder for the contract.\\n    uint256 withdrawalLiveness;\\n    // Minimum number of tokens in a sponsor's position.\\n    FixedPoint.Unsigned minSponsorTokens;\\n    // Expiry price pulled from the DVM in the case of an emergency shutdown.\\n    FixedPoint.Unsigned emergencyShutdownPrice;\\n    // Timestamp used in case of emergency shutdown.\\n    uint256 emergencyShutdownTimestamp;\\n    // The excessTokenBeneficiary of any excess tokens added to the contract.\\n    address excessTokenBeneficiary;\\n  }\\n\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  // Maps sponsor addresses to their positions. Each sponsor can have only one position.\\n  mapping(address => PositionData) public positions;\\n\\n  GlobalPositionData public globalPositionData;\\n\\n  PositionManagerData public positionManagerData;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n\\n  event Deposit(address indexed sponsor, uint256 indexed collateralAmount);\\n  event Withdrawal(address indexed sponsor, uint256 indexed collateralAmount);\\n  event RequestWithdrawal(\\n    address indexed sponsor,\\n    uint256 indexed collateralAmount\\n  );\\n  event RequestWithdrawalExecuted(\\n    address indexed sponsor,\\n    uint256 indexed collateralAmount\\n  );\\n  event RequestWithdrawalCanceled(\\n    address indexed sponsor,\\n    uint256 indexed collateralAmount\\n  );\\n  event PositionCreated(\\n    address indexed sponsor,\\n    uint256 indexed collateralAmount,\\n    uint256 indexed tokenAmount\\n  );\\n  event NewSponsor(address indexed sponsor);\\n  event EndedSponsorPosition(address indexed sponsor);\\n  event Redeem(\\n    address indexed sponsor,\\n    uint256 indexed collateralAmount,\\n    uint256 indexed tokenAmount\\n  );\\n  event Repay(\\n    address indexed sponsor,\\n    uint256 indexed numTokensRepaid,\\n    uint256 indexed newTokenCount\\n  );\\n  event EmergencyShutdown(address indexed caller, uint256 shutdownTimestamp);\\n  event SettleEmergencyShutdown(\\n    address indexed caller,\\n    uint256 indexed collateralReturned,\\n    uint256 indexed tokensBurned\\n  );\\n\\n  //----------------------------------------\\n  // Modifiers\\n  //----------------------------------------\\n\\n  modifier onlyPool() {\\n    require(hasRole(POOL_ROLE, msg.sender), 'Sender must be a pool');\\n    _;\\n  }\\n\\n  modifier onlyCollateralizedPosition(address sponsor) {\\n    _onlyCollateralizedPosition(sponsor);\\n    _;\\n  }\\n\\n  modifier notEmergencyShutdown() {\\n    _notEmergencyShutdown();\\n    _;\\n  }\\n\\n  modifier isEmergencyShutdown() {\\n    _isEmergencyShutdown();\\n    _;\\n  }\\n\\n  modifier noPendingWithdrawal(address sponsor) {\\n    _positionHasNoPendingWithdrawal(sponsor);\\n    _;\\n  }\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Construct the PerpetualPositionManager.\\n   * @param _positionManagerData Input parameters of PositionManager (see PositionManagerData struct)\\n   * @param _roles List of admin and token sponsors roles\\n   */\\n  constructor(\\n    PositionManagerParams memory _positionManagerData,\\n    Roles memory _roles\\n  )\\n    public\\n    FeePayerParty(\\n      _positionManagerData.collateralAddress,\\n      _positionManagerData.finderAddress,\\n      _positionManagerData.timerAddress\\n    )\\n    nonReentrant()\\n  {\\n    require(\\n      _getIdentifierWhitelist().isIdentifierSupported(\\n        _positionManagerData.priceFeedIdentifier\\n      ),\\n      'Unsupported price identifier'\\n    );\\n    require(\\n      _getCollateralWhitelist().isOnWhitelist(\\n        _positionManagerData.collateralAddress\\n      ),\\n      'Collateral not whitelisted'\\n    );\\n    _setRoleAdmin(DEFAULT_ADMIN_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setRoleAdmin(POOL_ROLE, DEFAULT_ADMIN_ROLE);\\n    for (uint256 j = 0; j < _roles.admins.length; j++) {\\n      _setupRole(DEFAULT_ADMIN_ROLE, _roles.admins[j]);\\n    }\\n    for (uint256 j = 0; j < _roles.pools.length; j++) {\\n      _setupRole(POOL_ROLE, _roles.pools[j]);\\n    }\\n    positionManagerData.synthereumFinder = _positionManagerData\\n      .synthereumFinder;\\n    positionManagerData.withdrawalLiveness = _positionManagerData\\n      .withdrawalLiveness;\\n    positionManagerData.tokenCurrency = MintableBurnableIERC20(\\n      _positionManagerData.tokenAddress\\n    );\\n    positionManagerData.minSponsorTokens = _positionManagerData\\n      .minSponsorTokens;\\n    positionManagerData.priceIdentifier = _positionManagerData\\n      .priceFeedIdentifier;\\n    positionManagerData.excessTokenBeneficiary = _positionManagerData\\n      .excessTokenBeneficiary;\\n  }\\n\\n  //----------------------------------------\\n  // External functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Transfers `collateralAmount` of `feePayerData.collateralCurrency` into the caller's position.\\n   * @dev Increases the collateralization level of a position after creation. This contract must be approved to spend\\n   * at least `collateralAmount` of `feePayerData.collateralCurrency`.\\n   * @param collateralAmount total amount of collateral tokens to be sent to the sponsor's position.\\n   */\\n  function deposit(FixedPoint.Unsigned memory collateralAmount)\\n    external\\n    override\\n  {\\n    // This is just a thin wrapper over depositTo that specified the sender as the sponsor.\\n    depositTo(msg.sender, collateralAmount);\\n  }\\n\\n  /**\\n   * @notice Transfers `collateralAmount` of `feePayerData.collateralCurrency` from the sponsor's position to the sponsor.\\n   * @dev Reverts if the withdrawal puts this position's collateralization ratio below the global collateralization\\n   * ratio. In that case, use `requestWithdrawal`. Might not withdraw the full requested amount to account for precision loss.\\n   * @param collateralAmount is the amount of collateral to withdraw.\\n   * @return amountWithdrawn The actual amount of collateral withdrawn.\\n   */\\n  function withdraw(FixedPoint.Unsigned memory collateralAmount)\\n    external\\n    override\\n    onlyPool()\\n    notEmergencyShutdown()\\n    noPendingWithdrawal(msg.sender)\\n    fees()\\n    nonReentrant()\\n    returns (FixedPoint.Unsigned memory amountWithdrawn)\\n  {\\n    PositionData storage positionData = _getPositionData(msg.sender);\\n\\n    amountWithdrawn = positionData.withdraw(\\n      globalPositionData,\\n      collateralAmount,\\n      feePayerData\\n    );\\n  }\\n\\n  /**\\n   * @notice Starts a withdrawal request that, if passed, allows the sponsor to withdraw` from their position.\\n   * @dev The request will be pending for `withdrawalLiveness`, during which the position can be liquidated.\\n   * @param collateralAmount the amount of collateral requested to withdraw\\n   */\\n  function requestWithdrawal(FixedPoint.Unsigned memory collateralAmount)\\n    external\\n    override\\n    onlyPool()\\n    notEmergencyShutdown()\\n    noPendingWithdrawal(msg.sender)\\n    nonReentrant()\\n  {\\n    uint256 actualTime = getCurrentTime();\\n    PositionData storage positionData = _getPositionData(msg.sender);\\n    positionData.requestWithdrawal(\\n      positionManagerData,\\n      collateralAmount,\\n      actualTime,\\n      feePayerData\\n    );\\n  }\\n\\n  /**\\n   * @notice After a passed withdrawal request (i.e., by a call to `requestWithdrawal` and waiting\\n   * `withdrawalLiveness`), withdraws `positionData.withdrawalRequestAmount` of collateral currency.\\n   * @dev Might not withdraw the full requested amount in order to account for precision loss or if the full requested\\n   * amount exceeds the collateral in the position (due to paying fees).\\n   * @return amountWithdrawn The actual amount of collateral withdrawn.\\n   */\\n  function withdrawPassedRequest()\\n    external\\n    override\\n    onlyPool()\\n    notEmergencyShutdown()\\n    fees()\\n    nonReentrant()\\n    returns (FixedPoint.Unsigned memory amountWithdrawn)\\n  {\\n    uint256 actualTime = getCurrentTime();\\n    PositionData storage positionData = _getPositionData(msg.sender);\\n    amountWithdrawn = positionData.withdrawPassedRequest(\\n      globalPositionData,\\n      actualTime,\\n      feePayerData\\n    );\\n  }\\n\\n  /**\\n   * @notice Cancels a pending withdrawal request.\\n   */\\n  function cancelWithdrawal()\\n    external\\n    override\\n    onlyPool()\\n    notEmergencyShutdown()\\n    nonReentrant()\\n  {\\n    PositionData storage positionData = _getPositionData(msg.sender);\\n    positionData.cancelWithdrawal();\\n  }\\n\\n  /**\\n   * @notice Creates tokens by creating a new position or by augmenting an existing position. Pulls `collateralAmount\\n   * ` into the sponsor's position and mints `numTokens` of `tokenCurrency`.\\n   * @dev This contract must have the Minter role for the `tokenCurrency`.\\n   * @dev Reverts if minting these tokens would put the position's collateralization ratio below the\\n   * global collateralization ratio. This contract must be approved to spend at least `collateralAmount` of\\n   * `feePayerData.collateralCurrency`.\\n   * @param collateralAmount is the number of collateral tokens to collateralize the position with\\n   * @param numTokens is the number of tokens to mint from the position.\\n   */\\n  function create(\\n    FixedPoint.Unsigned memory collateralAmount,\\n    FixedPoint.Unsigned memory numTokens\\n  ) external override onlyPool() notEmergencyShutdown() fees() nonReentrant() {\\n    PositionData storage positionData = positions[msg.sender];\\n\\n    positionData.create(\\n      globalPositionData,\\n      positionManagerData,\\n      collateralAmount,\\n      numTokens,\\n      feePayerData\\n    );\\n  }\\n\\n  /**\\n   * @notice Burns `numTokens` of `tokenCurrency` and sends back the proportional amount of `feePayerData.collateralCurrency`.\\n   * @dev Can only be called by a token sponsor. Might not redeem the full proportional amount of collateral\\n   * in order to account for precision loss. This contract must be approved to spend at least `numTokens` of\\n   * `tokenCurrency`.\\n   * @dev This contract must have the Burner role for the `tokenCurrency`.\\n   * @param numTokens is the number of tokens to be burnt for a commensurate amount of collateral.\\n   * @return amountWithdrawn The actual amount of collateral withdrawn.\\n   */\\n  function redeem(FixedPoint.Unsigned memory numTokens)\\n    external\\n    override\\n    onlyPool()\\n    notEmergencyShutdown()\\n    noPendingWithdrawal(msg.sender)\\n    fees()\\n    nonReentrant()\\n    returns (FixedPoint.Unsigned memory amountWithdrawn)\\n  {\\n    PositionData storage positionData = _getPositionData(msg.sender);\\n\\n    amountWithdrawn = positionData.redeeem(\\n      globalPositionData,\\n      positionManagerData,\\n      numTokens,\\n      feePayerData,\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n   * @notice Burns `numTokens` of `tokenCurrency` to decrease sponsors position size, without sending back `feePayerData.collateralCurrency`.\\n   * This is done by a sponsor to increase position CR. Resulting size is bounded by minSponsorTokens.\\n   * @dev Can only be called by token sponsor. This contract must be approved to spend `numTokens` of `tokenCurrency`.\\n   * @dev This contract must have the Burner role for the `tokenCurrency`.\\n   * @param numTokens is the number of tokens to be burnt for a commensurate amount of collateral.\\n   */\\n  function repay(FixedPoint.Unsigned memory numTokens)\\n    external\\n    override\\n    onlyPool()\\n    notEmergencyShutdown()\\n    noPendingWithdrawal(msg.sender)\\n    fees()\\n    nonReentrant()\\n  {\\n    PositionData storage positionData = _getPositionData(msg.sender);\\n    positionData.repay(globalPositionData, positionManagerData, numTokens);\\n  }\\n\\n  /**\\n   * @notice If the contract is emergency shutdown then all token holders and sponsors can redeem their tokens or\\n   * remaining collateral for underlying at the prevailing price defined by a DVM vote.\\n   * @dev This burns all tokens from the caller of `tokenCurrency` and sends back the resolved settlement value of\\n   * `feePayerData.collateralCurrency`. Might not redeem the full proportional amount of collateral in order to account for\\n   * precision loss. This contract must be approved to spend `tokenCurrency` at least up to the caller's full balance.\\n   * @dev This contract must have the Burner role for the `tokenCurrency`.\\n   * @return amountWithdrawn The actual amount of collateral withdrawn.\\n   */\\n  function settleEmergencyShutdown()\\n    external\\n    override\\n    onlyPool()\\n    isEmergencyShutdown()\\n    fees()\\n    nonReentrant()\\n    returns (FixedPoint.Unsigned memory amountWithdrawn)\\n  {\\n    PositionData storage positionData = positions[msg.sender];\\n    amountWithdrawn = positionData.settleEmergencyShutdown(\\n      globalPositionData,\\n      positionManagerData,\\n      feePayerData\\n    );\\n  }\\n\\n  /**\\n   * @notice Premature contract settlement under emergency circumstances.\\n   * @dev Only the governor can call this function as they are permissioned within the `FinancialContractAdmin`.\\n   * Upon emergency shutdown, the contract settlement time is set to the shutdown time. This enables withdrawal\\n   * to occur via the `settleEmergencyShutdown` function.\\n   */\\n  function emergencyShutdown()\\n    external\\n    override(IDerivativeMain, AdministrateeInterface)\\n    notEmergencyShutdown()\\n    nonReentrant()\\n  {\\n    require(\\n      msg.sender ==\\n        positionManagerData.synthereumFinder.getImplementationAddress(\\n          SynthereumInterfaces.Manager\\n        ) ||\\n        msg.sender == _getFinancialContractsAdminAddress(),\\n      'Caller must be a Synthereum manager or the UMA governor'\\n    );\\n    positionManagerData.emergencyShutdownTimestamp = getCurrentTime();\\n    positionManagerData.requestOraclePrice(\\n      positionManagerData.emergencyShutdownTimestamp,\\n      feePayerData\\n    );\\n    emit EmergencyShutdown(\\n      msg.sender,\\n      positionManagerData.emergencyShutdownTimestamp\\n    );\\n  }\\n\\n  /** @notice Remargin function\\n   */\\n  function remargin()\\n    external\\n    override(IDerivativeMain, AdministrateeInterface)\\n  {\\n    return;\\n  }\\n\\n  /**\\n   * @notice Drains any excess balance of the provided ERC20 token to a pre-selected beneficiary.\\n   * @dev This will drain down to the amount of tracked collateral and drain the full balance of any other token.\\n   * @param token address of the ERC20 token whose excess balance should be drained.\\n   */\\n  function trimExcess(IERC20 token)\\n    external\\n    override\\n    nonReentrant()\\n    returns (FixedPoint.Unsigned memory amount)\\n  {\\n    FixedPoint.Unsigned memory pfcAmount = _pfc();\\n    amount = positionManagerData.trimExcess(token, pfcAmount, feePayerData);\\n  }\\n\\n  /**\\n   * @notice Delete a TokenSponsor position (This function can only be called by the contract itself)\\n   * @param sponsor address of the TokenSponsor.\\n   */\\n  function deleteSponsorPosition(address sponsor) external onlyThisContract {\\n    delete positions[sponsor];\\n  }\\n\\n  /**\\n   * @notice Accessor method for a sponsor's collateral.\\n   * @dev This is necessary because the struct returned by the positions() method shows\\n   * rawCollateral, which isn't a user-readable value.\\n   * @param sponsor address whose collateral amount is retrieved.\\n   * @return collateralAmount amount of collateral within a sponsors position.\\n   */\\n  function getCollateral(address sponsor)\\n    external\\n    view\\n    override\\n    nonReentrantView()\\n    returns (FixedPoint.Unsigned memory collateralAmount)\\n  {\\n    collateralAmount = positions[sponsor]\\n      .rawCollateral\\n      .getFeeAdjustedCollateral(feePayerData.cumulativeFeeMultiplier);\\n  }\\n\\n  /**\\n   * @notice Get SynthereumFinder contract address\\n   * @return finder SynthereumFinder contract\\n   */\\n  function synthereumFinder()\\n    external\\n    view\\n    override\\n    returns (ISynthereumFinder finder)\\n  {\\n    finder = positionManagerData.synthereumFinder;\\n  }\\n\\n  /**\\n   * @notice Get synthetic token currency\\n   * @return token Synthetic token\\n   */\\n  function tokenCurrency() external view override returns (IERC20 token) {\\n    token = positionManagerData.tokenCurrency;\\n  }\\n\\n  /**\\n   * @notice Get synthetic token symbol\\n   * @return symbol Synthetic token symbol\\n   */\\n  function syntheticTokenSymbol()\\n    external\\n    view\\n    override\\n    returns (string memory symbol)\\n  {\\n    symbol = IStandardERC20(address(positionManagerData.tokenCurrency))\\n      .symbol();\\n  }\\n\\n  /**\\n   * @notice Get synthetic token price identifier registered with UMA DVM\\n   * @return identifier Synthetic token price identifier\\n   */\\n  function priceIdentifier()\\n    external\\n    view\\n    override\\n    returns (bytes32 identifier)\\n  {\\n    identifier = positionManagerData.priceIdentifier;\\n  }\\n\\n  /**\\n   * @notice Accessor method for the total collateral stored within the PerpetualPositionManagerPoolParty.\\n   * @return totalCollateral amount of all collateral within the position manager.\\n   */\\n  function totalPositionCollateral()\\n    external\\n    view\\n    override\\n    nonReentrantView()\\n    returns (FixedPoint.Unsigned memory totalCollateral)\\n  {\\n    totalCollateral = globalPositionData\\n      .rawTotalPositionCollateral\\n      .getFeeAdjustedCollateral(feePayerData.cumulativeFeeMultiplier);\\n  }\\n\\n  /**\\n   * @notice Get the currently minted synthetic tokens from all derivatives\\n   * @return totalTokens Total amount of synthetic tokens minted\\n   */\\n  function totalTokensOutstanding()\\n    external\\n    view\\n    override\\n    returns (FixedPoint.Unsigned memory totalTokens)\\n  {\\n    totalTokens = globalPositionData.totalTokensOutstanding;\\n  }\\n\\n  /**\\n   * @notice Get the price of synthetic token set by DVM after emergencyShutdown call\\n   * @return Price of synthetic token\\n   */\\n  function emergencyShutdownPrice()\\n    external\\n    view\\n    override\\n    isEmergencyShutdown()\\n    returns (FixedPoint.Unsigned memory)\\n  {\\n    return positionManagerData.emergencyShutdownPrice;\\n  }\\n\\n  /**\\n   * @notice Accessor method for the list of members with admin role\\n   * @return array of addresses with admin role\\n   */\\n  function getAdminMembers() external view override returns (address[] memory) {\\n    uint256 numberOfMembers = getRoleMemberCount(DEFAULT_ADMIN_ROLE);\\n    address[] memory members = new address[](numberOfMembers);\\n    for (uint256 j = 0; j < numberOfMembers; j++) {\\n      address newMember = getRoleMember(DEFAULT_ADMIN_ROLE, j);\\n      members[j] = newMember;\\n    }\\n    return members;\\n  }\\n\\n  /**\\n   * @notice Accessor method for the list of members with pool role\\n   * @return array of addresses with pool role\\n   */\\n  function getPoolMembers() external view override returns (address[] memory) {\\n    uint256 numberOfMembers = getRoleMemberCount(POOL_ROLE);\\n    address[] memory members = new address[](numberOfMembers);\\n    for (uint256 j = 0; j < numberOfMembers; j++) {\\n      address newMember = getRoleMember(POOL_ROLE, j);\\n      members[j] = newMember;\\n    }\\n    return members;\\n  }\\n\\n  /**\\n   * @notice Transfers `collateralAmount` of `feePayerData.collateralCurrency` into the specified sponsor's position.\\n   * @dev Increases the collateralization level of a position after creation. This contract must be approved to spend\\n   * at least `collateralAmount` of `feePayerData.collateralCurrency`.\\n   * @param sponsor the sponsor to credit the deposit to.\\n   * @param collateralAmount total amount of collateral tokens to be sent to the sponsor's position.\\n   */\\n  function depositTo(\\n    address sponsor,\\n    FixedPoint.Unsigned memory collateralAmount\\n  )\\n    public\\n    override\\n    onlyPool()\\n    notEmergencyShutdown()\\n    noPendingWithdrawal(sponsor)\\n    fees()\\n    nonReentrant()\\n  {\\n    PositionData storage positionData = _getPositionData(sponsor);\\n\\n    positionData.depositTo(\\n      globalPositionData,\\n      collateralAmount,\\n      feePayerData,\\n      sponsor\\n    );\\n  }\\n\\n  /**\\n   * @notice Get the collateralCurrency backing a synthetic token\\n   * @return collateral Collateral used for minting synthetic tokens\\n   */\\n  function collateralCurrency()\\n    public\\n    view\\n    override(IDerivativeDeployment, FeePayerParty)\\n    returns (IERC20 collateral)\\n  {\\n    collateral = FeePayerParty.collateralCurrency();\\n  }\\n\\n  //----------------------------------------\\n  // Internal functions\\n  //----------------------------------------\\n\\n  function _pfc()\\n    internal\\n    view\\n    virtual\\n    override\\n    returns (FixedPoint.Unsigned memory)\\n  {\\n    return\\n      globalPositionData.rawTotalPositionCollateral.getFeeAdjustedCollateral(\\n        feePayerData.cumulativeFeeMultiplier\\n      );\\n  }\\n\\n  function _getPositionData(address sponsor)\\n    internal\\n    view\\n    onlyCollateralizedPosition(sponsor)\\n    returns (PositionData storage)\\n  {\\n    return positions[sponsor];\\n  }\\n\\n  function _getIdentifierWhitelist()\\n    internal\\n    view\\n    returns (IdentifierWhitelistInterface)\\n  {\\n    return\\n      IdentifierWhitelistInterface(\\n        feePayerData.finder.getImplementationAddress(\\n          OracleInterfaces.IdentifierWhitelist\\n        )\\n      );\\n  }\\n\\n  function _getCollateralWhitelist() internal view returns (AddressWhitelist) {\\n    return\\n      AddressWhitelist(\\n        feePayerData.finder.getImplementationAddress(\\n          OracleInterfaces.CollateralWhitelist\\n        )\\n      );\\n  }\\n\\n  // Fetches a resolved Oracle price from the Oracle. Reverts if the Oracle hasn't resolved for this request.\\n  // These internal functions are supposed to act identically to modifiers, but re-used modifiers\\n\\n  function _onlyCollateralizedPosition(address sponsor) internal view {\\n    require(\\n      positions[sponsor]\\n        .rawCollateral\\n        .getFeeAdjustedCollateral(feePayerData.cumulativeFeeMultiplier)\\n        .isGreaterThan(0),\\n      'Position has no collateral'\\n    );\\n  }\\n\\n  function _notEmergencyShutdown() internal view {\\n    require(\\n      positionManagerData.emergencyShutdownTimestamp == 0,\\n      'Contract emergency shutdown'\\n    );\\n  }\\n\\n  function _isEmergencyShutdown() internal view {\\n    require(\\n      positionManagerData.emergencyShutdownTimestamp != 0,\\n      'Contract not emergency shutdown'\\n    );\\n  }\\n\\n  // Note: This checks whether an already existing position has a pending withdrawal. This cannot be used on the\\n  // `create` method because it is possible that `create` is called on a new position (i.e. one without any collateral\\n  // or tokens outstanding) which would fail the `onlyCollateralizedPosition` modifier on `_getPositionData`.\\n  function _positionHasNoPendingWithdrawal(address sponsor) internal view {\\n    require(\\n      _getPositionData(sponsor).withdrawalRequestPassTimestamp == 0,\\n      'Pending withdrawal'\\n    );\\n  }\\n\\n  function _getFinancialContractsAdminAddress()\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return\\n      feePayerData.finder.getImplementationAddress(\\n        OracleInterfaces.FinancialContractsAdmin\\n      );\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/base/interfaces/IStandardERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.12;\\nimport {IERC20} from '../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IStandardERC20 is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n   * called.\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/derivative/common/interfaces/MintableBurnableIERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\n\\nimport {ERC20} from '../../../../@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\n/**\\n * @title ERC20 interface that includes burn mint and roles methods.\\n */\\nabstract contract MintableBurnableIERC20 is ERC20 {\\n  /**\\n   * @notice Burns a specific amount of the caller's tokens.\\n   * @dev This method should be permissioned to only allow designated parties to burn tokens.\\n   */\\n  function burn(uint256 value) external virtual;\\n\\n  /**\\n   * @notice Mints tokens and adds them to the balance of the `to` address.\\n   * @dev This method should be permissioned to only allow designated parties to mint tokens.\\n   */\\n  function mint(address to, uint256 value) external virtual returns (bool);\\n\\n  /**\\n   * @notice Add Minter role to an account\\n   * @param account Address to which Minter role will be added\\n   */\\n  function addMinter(address account) external virtual;\\n\\n  /**\\n   * @notice Add Burner role to an account\\n   * @param account Address to which Burner role will be added\\n   */\\n  function addBurner(address account) external virtual;\\n\\n  /**\\n   * @notice Add Admin role to an account\\n   * @param account Address to which Admin role will be added\\n   */\\n  function addAdmin(address account) external virtual;\\n\\n  /**\\n   * @notice Add Admin, Minter and Burner roles to an account\\n   * @param account Address to which Admin, Minter and Burner roles will be added\\n   */\\n  function addAdminAndMinterAndBurner(address account) external virtual;\\n\\n  /**\\n   * @notice Add Admin, Minter and Burner roles to an account\\n   * @param account Address to which Admin, Minter and Burner roles will be added\\n   */\\n  /**\\n   * @notice Self renounce the address calling the function from minter role\\n   */\\n  function renounceMinter() external virtual;\\n\\n  /**\\n   * @notice Self renounce the address calling the function from burner role\\n   */\\n  function renounceBurner() external virtual;\\n\\n  /**\\n   * @notice Self renounce the address calling the function from admin role\\n   */\\n  function renounceAdmin() external virtual;\\n\\n  /**\\n   * @notice Self renounce the address calling the function from admin, minter and burner role\\n   */\\n  function renounceAdminAndMinterAndBurner() external virtual;\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/derivative/common/interfaces/IDerivativeDeployment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.12;\\n\\nimport {IERC20} from '../../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * @title Interface that a derivative MUST have in order to be included in the deployer\\n */\\ninterface IDerivativeDeployment {\\n  /**\\n   * @notice Gets the collateral currency of the derivative\\n   * @return collateral Collateral currency\\n   */\\n  function collateralCurrency() external view returns (IERC20 collateral);\\n\\n  /**\\n   * @notice Get the token currency of the derivative\\n   * @return syntheticCurrency Synthetic token\\n   */\\n  function tokenCurrency() external view returns (IERC20 syntheticCurrency);\\n\\n  /**\\n   * @notice Accessor method for the list of members with admin role\\n   * @return array of addresses with admin role\\n   */\\n  function getAdminMembers() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Accessor method for the list of members with pool role\\n   * @return array of addresses with pool role\\n   */\\n  function getPoolMembers() external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/derivative/common/interfaces/IDerivativeMain.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from '../../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {ISynthereumFinder} from '../../../core/interfaces/IFinder.sol';\\nimport {\\n  FixedPoint\\n} from '../../../../@jarvis-network/uma-core/contracts/common/implementation/FixedPoint.sol';\\nimport {FeePayerParty} from '../FeePayerParty.sol';\\n\\n/**\\n * @title Interface for interacting with the Derivatives contracts\\n */\\ninterface IDerivativeMain {\\n  /** @notice Deposit funds to a certain derivative contract with specified sponsor\\n   * @param sponsor Address of the sponsor to which the funds will be deposited\\n   * @param collateralAmount Amount of funds to be deposited\\n   */\\n  function depositTo(\\n    address sponsor,\\n    FixedPoint.Unsigned memory collateralAmount\\n  ) external;\\n\\n  /** @notice Deposit funds to the derivative contract where msg sender is the sponsor\\n   * @param collateralAmount Amount of funds to be deposited\\n   */\\n  function deposit(FixedPoint.Unsigned memory collateralAmount) external;\\n\\n  /** @notice Fast withdraw excess collateral from a derivative contract\\n   * @param collateralAmount Amount of funds to be withdrawn\\n   */\\n  function withdraw(FixedPoint.Unsigned memory collateralAmount)\\n    external\\n    returns (FixedPoint.Unsigned memory amountWithdrawn);\\n\\n  /** @notice Request of slow withdraw of collateral from derivative changing GCR\\n   * @param collateralAmount Amount of funds to be withdrawn\\n   */\\n  function requestWithdrawal(FixedPoint.Unsigned memory collateralAmount)\\n    external;\\n\\n  /** @notice Execute withdraw if a slow withdraw request has passed\\n   */\\n  function withdrawPassedRequest()\\n    external\\n    returns (FixedPoint.Unsigned memory amountWithdrawn);\\n\\n  /** @notice Cancel a slow withdraw request\\n   */\\n  function cancelWithdrawal() external;\\n\\n  /** @notice Mint synthetic tokens\\n   * @param collateralAmount Amount of collateral to be locked\\n   * @param numTokens Amount of tokens to be minted based on collateralAmount\\n   */\\n  function create(\\n    FixedPoint.Unsigned memory collateralAmount,\\n    FixedPoint.Unsigned memory numTokens\\n  ) external;\\n\\n  /** @notice Redeem collateral by burning synthetic tokens\\n   * @param numTokens Amount of synthetic tokens to be burned to unlock collateral\\n   */\\n  function redeem(FixedPoint.Unsigned memory numTokens)\\n    external\\n    returns (FixedPoint.Unsigned memory amountWithdrawn);\\n\\n  /** @notice Burning an amount of synthetic tokens to increase GCR\\n   * @param numTokens Amount of synthetic tokens to be burned\\n   */\\n  function repay(FixedPoint.Unsigned memory numTokens) external;\\n\\n  /** @notice Settles the withdraws from an emergency shutdown of a derivative\\n   */\\n  function settleEmergencyShutdown()\\n    external\\n    returns (FixedPoint.Unsigned memory amountWithdrawn);\\n\\n  /** @notice Invokes an emergency shutdown of a derivative\\n   */\\n  function emergencyShutdown() external;\\n\\n  /** @notice Remargin function\\n   */\\n  function remargin() external;\\n\\n  /** @notice Allows withdrawing of excess ERC20 tokens\\n   * @param token The address of the ERC20 token\\n   */\\n  function trimExcess(IERC20 token)\\n    external\\n    returns (FixedPoint.Unsigned memory amount);\\n\\n  /** @notice Gets the collateral locked by a certain sponsor\\n   * @param sponsor The address of the sponsor for which to return amount of collateral locked\\n   */\\n  function getCollateral(address sponsor)\\n    external\\n    view\\n    returns (FixedPoint.Unsigned memory collateralAmount);\\n\\n  /** @notice Gets the address of the SynthereumFinder contract\\n   */\\n  function synthereumFinder() external view returns (ISynthereumFinder finder);\\n\\n  /** @notice Gets the synthetic token symbol associated with the derivative\\n   */\\n  function syntheticTokenSymbol() external view returns (string memory symbol);\\n\\n  /** @notice Gets the price identifier associated with the derivative\\n   */\\n  function priceIdentifier() external view returns (bytes32 identifier);\\n\\n  /** @notice Gets the total collateral locked in a derivative\\n   */\\n  function totalPositionCollateral()\\n    external\\n    view\\n    returns (FixedPoint.Unsigned memory totalCollateral);\\n\\n  /** @notice Gets the total synthetic tokens minted through a derivative\\n   */\\n  function totalTokensOutstanding()\\n    external\\n    view\\n    returns (FixedPoint.Unsigned memory totalTokens);\\n\\n  /** @notice Gets the price at which the emergency shutdown was performed\\n   */\\n  function emergencyShutdownPrice()\\n    external\\n    view\\n    returns (FixedPoint.Unsigned memory emergencyPrice);\\n}\\n\"\r\n    },\r\n    \"deploy/@jarvis-network/uma-core/contracts/oracle/interfaces/OracleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title Financial contract facing Oracle interface.\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\n */\\nabstract contract OracleInterface {\\n    /**\\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\\n     * @dev Time must be in the past and the identifier must be supported.\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\n     * @param time unix timestamp for the price request.\\n     */\\n    function requestPrice(bytes32 identifier, uint256 time) public virtual;\\n\\n    /**\\n     * @notice Whether the price for `identifier` and `time` is available.\\n     * @dev Time must be in the past and the identifier must be supported.\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\n     * @param time unix timestamp for the price request.\\n     * @return bool if the DVM has resolved to a price for the given identifier and timestamp.\\n     */\\n    function hasPrice(bytes32 identifier, uint256 time) public view virtual returns (bool);\\n\\n    /**\\n     * @notice Gets the price for `identifier` and `time` if it has already been requested and resolved.\\n     * @dev If the price is not available, the method reverts.\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\n     * @param time unix timestamp for the price request.\\n     * @return int256 representing the resolved price for the given identifier and timestamp.\\n     */\\n    function getPrice(bytes32 identifier, uint256 time) public view virtual returns (int256);\\n}\\n\"\r\n    },\r\n    \"deploy/@jarvis-network/uma-core/contracts/oracle/interfaces/IdentifierWhitelistInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\n\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title Interface for whitelists of supported identifiers that the oracle can provide prices for.\\n */\\ninterface IdentifierWhitelistInterface {\\n    /**\\n     * @notice Adds the provided identifier as a supported identifier.\\n     * @dev Price requests using this identifier will succeed after this call.\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\n     */\\n    function addSupportedIdentifier(bytes32 identifier) external;\\n\\n    /**\\n     * @notice Removes the identifier from the whitelist.\\n     * @dev Price requests using this identifier will no longer succeed after this call.\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\n     */\\n    function removeSupportedIdentifier(bytes32 identifier) external;\\n\\n    /**\\n     * @notice Checks whether an identifier is on the whitelist.\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\n     * @return bool if the identifier is supported (or not).\\n     */\\n    function isIdentifierSupported(bytes32 identifier) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"deploy/@jarvis-network/uma-core/contracts/oracle/interfaces/AdministrateeInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\n\\n/**\\n * @title Interface that all financial contracts expose to the admin.\\n */\\ninterface AdministrateeInterface {\\n    /**\\n     * @notice Initiates the shutdown process, in case of an emergency.\\n     */\\n    function emergencyShutdown() external;\\n\\n    /**\\n     * @notice A core contract method called independently or as a part of other financial contract transactions.\\n     * @dev It pays fees and moves money between margin accounts to make sure they reflect the NAV of the contract.\\n     */\\n    function remargin() external;\\n\\n    /**\\n     * @notice Gets the current profit from corruption for this contract in terms of the collateral currency.\\n     * @dev This is equivalent to the collateral pool available from which to pay fees. Therefore, derived contracts are\\n     * expected to implement this so that pay-fee methods can correctly compute the owed fees as a % of PfC.\\n     * @return pfc value for equal to the current profit from corruption denominated in collateral currency.\\n     */\\n    function pfc() external view returns (FixedPoint.Unsigned memory);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/interfaces/IFinder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Provides addresses of the contracts implementing certain interfaces.\\n */\\ninterface ISynthereumFinder {\\n  /**\\n   * @notice Updates the address of the contract that implements `interfaceName`.\\n   * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\n   * @param implementationAddress address of the deployed contract that implements the interface.\\n   */\\n  function changeImplementationAddress(\\n    bytes32 interfaceName,\\n    address implementationAddress\\n  ) external;\\n\\n  /**\\n   * @notice Gets the address of the contract that implements the given `interfaceName`.\\n   * @param interfaceName queried interface.\\n   * @return implementationAddress Address of the deployed contract that implements the interface.\\n   */\\n  function getImplementationAddress(bytes32 interfaceName)\\n    external\\n    view\\n    returns (address);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/derivative/common/interfaces/IDerivative.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {IDerivativeMain} from './IDerivativeMain.sol';\\nimport {IDerivativeDeployment} from './IDerivativeDeployment.sol';\\n\\n/**\\n * @title Interface that a derivative MUST have in order to be used in the pools\\n */\\ninterface IDerivative is IDerivativeDeployment, IDerivativeMain {\\n\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Stores common interface names used throughout Synthereum.\\n */\\nlibrary SynthereumInterfaces {\\n  bytes32 public constant Deployer = 'Deployer';\\n  bytes32 public constant FactoryVersioning = 'FactoryVersioning';\\n  bytes32 public constant TokenFactory = 'TokenFactory';\\n  bytes32 public constant PoolRegistry = 'PoolRegistry';\\n  bytes32 public constant SelfMintingRegistry = 'SelfMintingRegistry';\\n  bytes32 public constant PriceFeed = 'PriceFeed';\\n  bytes32 public constant Manager = 'Manager';\\n  bytes32 public constant SelfMintingController = 'SelfMintingController';\\n}\\n\\nlibrary FactoryInterfaces {\\n  bytes32 public constant PoolFactory = 'PoolFactory';\\n  bytes32 public constant DerivativeFactory = 'DerivativeFactory';\\n  bytes32 public constant SelfMintingFactory = 'SelfMintingFactory';\\n}\\n\"\r\n    },\r\n    \"deploy/@jarvis-network/uma-core/contracts/oracle/implementation/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title Stores common interface names used throughout the DVM by registration in the Finder.\\n */\\nlibrary OracleInterfaces {\\n    bytes32 public constant Oracle = \\\"Oracle\\\";\\n    bytes32 public constant IdentifierWhitelist = \\\"IdentifierWhitelist\\\";\\n    bytes32 public constant Store = \\\"Store\\\";\\n    bytes32 public constant FinancialContractsAdmin = \\\"FinancialContractsAdmin\\\";\\n    bytes32 public constant Registry = \\\"Registry\\\";\\n    bytes32 public constant CollateralWhitelist = \\\"CollateralWhitelist\\\";\\n    bytes32 public constant OptimisticOracle = \\\"OptimisticOracle\\\";\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@jarvis-network/uma-core/contracts/common/implementation/FixedPoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../../../../@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../../../../../@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\n\\n/**\\n * @title Library for fixed point arithmetic on uints\\n */\\nlibrary FixedPoint {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For unsigned values:\\n    //   This can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\\n    uint256 private constant FP_SCALING_FACTOR = 10**18;\\n\\n    // --------------------------------------- UNSIGNED -----------------------------------------------------------------------------\\n    struct Unsigned {\\n        uint256 rawValue;\\n    }\\n\\n    /**\\n     * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a uint to convert into a FixedPoint.\\n     * @return the converted FixedPoint.\\n     */\\n    function fromUnscaledUint(uint256 a) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.mul(FP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return add(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return sub(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return sub(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as a uint256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because FP_SCALING_FACTOR != 0.\\n        return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 mulRaw = a.rawValue.mul(b.rawValue);\\n        uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\\n        uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\\n        if (mod != 0) {\\n            return Unsigned(mulFloor.add(1));\\n        } else {\\n            return Unsigned(mulFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as a uint256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a uint256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return div(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\\n        uint256 divFloor = aScaled.div(b.rawValue);\\n        uint256 mod = aScaled.mod(b.rawValue);\\n        if (mod != 0) {\\n            return Unsigned(divFloor.add(1));\\n        } else {\\n            return Unsigned(divFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Unsigned(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\\n        // This creates the possibility of overflow if b is very large.\\n        return divCeil(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory output) {\\n        output = fromUnscaledUint(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n\\n    // ------------------------------------------------- SIGNED -------------------------------------------------------------\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For signed values:\\n    //   This can represent a value up (or down) to +-(2^255 - 1)/10^18 = ~10^58. 10^58 will be stored internally as int256 10^76.\\n    int256 private constant SFP_SCALING_FACTOR = 10**18;\\n\\n    struct Signed {\\n        int256 rawValue;\\n    }\\n\\n    function fromSigned(Signed memory a) internal pure returns (Unsigned memory) {\\n        require(a.rawValue >= 0, \\\"Negative value provided\\\");\\n        return Unsigned(uint256(a.rawValue));\\n    }\\n\\n    function fromUnsigned(Unsigned memory a) internal pure returns (Signed memory) {\\n        require(a.rawValue <= uint256(type(int256).max), \\\"Unsigned too large\\\");\\n        return Signed(int256(a.rawValue));\\n    }\\n\\n    /**\\n     * @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a int to convert into a FixedPoint.Signed.\\n     * @return the converted FixedPoint.Signed.\\n     */\\n    function fromUnscaledInt(int256 a) internal pure returns (Signed memory) {\\n        return Signed(a.mul(SFP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a int256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Signed` to an unscaled int, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return add(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return sub(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return sub(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as an int256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because SFP_SCALING_FACTOR != 0.\\n        return Signed(a.rawValue.mul(b.rawValue) / SFP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 mulRaw = a.rawValue.mul(b.rawValue);\\n        int256 mulTowardsZero = mulRaw / SFP_SCALING_FACTOR;\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = mulRaw % SFP_SCALING_FACTOR;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(mulTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(mulTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as an int256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Signed(a.rawValue.mul(SFP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a an int256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return div(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 aScaled = a.rawValue.mul(SFP_SCALING_FACTOR);\\n        int256 divTowardsZero = aScaled.div(b.rawValue);\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = aScaled % b.rawValue;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(divTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(divTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Signed(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with an int256 as the second parameter. Therefore we need to convert b into an Signed.\\n        // This creates the possibility of overflow if b is very large.\\n        return divAwayFromZero(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a uint256 (negative exponents are not allowed).\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Signed memory a, uint256 b) internal pure returns (Signed memory output) {\\n        output = fromUnscaledInt(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/derivative/v2/PerpetualPositionManagerPoolPartyLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from '../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {\\n  MintableBurnableIERC20\\n} from '../common/interfaces/MintableBurnableIERC20.sol';\\nimport {\\n  IERC20Standard\\n} from '../../../@jarvis-network/uma-core/contracts/common/interfaces/IERC20Standard.sol';\\nimport {\\n  OracleInterface\\n} from '../../../@jarvis-network/uma-core/contracts/oracle/interfaces/OracleInterface.sol';\\nimport {\\n  OracleInterfaces\\n} from '../../../@jarvis-network/uma-core/contracts/oracle/implementation/Constants.sol';\\nimport {SafeMath} from '../../../@openzeppelin/contracts/math/SafeMath.sol';\\nimport {SafeERC20} from '../../../@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport {\\n  FixedPoint\\n} from '../../../@jarvis-network/uma-core/contracts/common/implementation/FixedPoint.sol';\\nimport {FeePayerPartyLib} from '../common/FeePayerPartyLib.sol';\\nimport {\\n  PerpetualPositionManagerPoolParty\\n} from './PerpetualPositionManagerPoolParty.sol';\\nimport {FeePayerParty} from '../common/FeePayerParty.sol';\\n\\nlibrary PerpetualPositionManagerPoolPartyLib {\\n  using SafeMath for uint256;\\n  using FixedPoint for FixedPoint.Unsigned;\\n  using SafeERC20 for IERC20;\\n  using SafeERC20 for MintableBurnableIERC20;\\n  using PerpetualPositionManagerPoolPartyLib for PerpetualPositionManagerPoolParty.PositionData;\\n  using PerpetualPositionManagerPoolPartyLib for PerpetualPositionManagerPoolParty.PositionManagerData;\\n  using PerpetualPositionManagerPoolPartyLib for FeePayerParty.FeePayerData;\\n  using PerpetualPositionManagerPoolPartyLib for FixedPoint.Unsigned;\\n  using FeePayerPartyLib for FixedPoint.Unsigned;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n\\n  event Deposit(address indexed sponsor, uint256 indexed collateralAmount);\\n  event Withdrawal(address indexed sponsor, uint256 indexed collateralAmount);\\n  event RequestWithdrawal(\\n    address indexed sponsor,\\n    uint256 indexed collateralAmount\\n  );\\n  event RequestWithdrawalExecuted(\\n    address indexed sponsor,\\n    uint256 indexed collateralAmount\\n  );\\n  event RequestWithdrawalCanceled(\\n    address indexed sponsor,\\n    uint256 indexed collateralAmount\\n  );\\n  event PositionCreated(\\n    address indexed sponsor,\\n    uint256 indexed collateralAmount,\\n    uint256 indexed tokenAmount\\n  );\\n  event NewSponsor(address indexed sponsor);\\n  event EndedSponsorPosition(address indexed sponsor);\\n  event Redeem(\\n    address indexed sponsor,\\n    uint256 indexed collateralAmount,\\n    uint256 indexed tokenAmount\\n  );\\n  event Repay(\\n    address indexed sponsor,\\n    uint256 indexed numTokensRepaid,\\n    uint256 indexed newTokenCount\\n  );\\n  event EmergencyShutdown(address indexed caller, uint256 shutdownTimestamp);\\n  event SettleEmergencyShutdown(\\n    address indexed caller,\\n    uint256 indexed collateralReturned,\\n    uint256 indexed tokensBurned\\n  );\\n\\n  //----------------------------------------\\n  // External functions\\n  //----------------------------------------\\n\\n  function depositTo(\\n    PerpetualPositionManagerPoolParty.PositionData storage positionData,\\n    PerpetualPositionManagerPoolParty.GlobalPositionData\\n      storage globalPositionData,\\n    FixedPoint.Unsigned memory collateralAmount,\\n    FeePayerParty.FeePayerData storage feePayerData,\\n    address sponsor\\n  ) external {\\n    require(collateralAmount.isGreaterThan(0), 'Invalid collateral amount');\\n\\n    positionData._incrementCollateralBalances(\\n      globalPositionData,\\n      collateralAmount,\\n      feePayerData\\n    );\\n\\n    emit Deposit(sponsor, collateralAmount.rawValue);\\n\\n    // Move collateral currency from sender to contract.\\n    feePayerData.collateralCurrency.safeTransferFrom(\\n      msg.sender,\\n      address(this),\\n      collateralAmount.rawValue\\n    );\\n  }\\n\\n  function withdraw(\\n    PerpetualPositionManagerPoolParty.PositionData storage positionData,\\n    PerpetualPositionManagerPoolParty.GlobalPositionData\\n      storage globalPositionData,\\n    FixedPoint.Unsigned memory collateralAmount,\\n    FeePayerParty.FeePayerData storage feePayerData\\n  ) external returns (FixedPoint.Unsigned memory amountWithdrawn) {\\n    require(collateralAmount.isGreaterThan(0), 'Invalid collateral amount');\\n\\n    // Decrement the sponsor's collateral and global collateral amounts. Check the GCR between decrement to ensure\\n    // position remains above the GCR within the witdrawl. If this is not the case the caller must submit a request.\\n    amountWithdrawn = _decrementCollateralBalancesCheckGCR(\\n      positionData,\\n      globalPositionData,\\n      collateralAmount,\\n      feePayerData\\n    );\\n\\n    emit Withdrawal(msg.sender, amountWithdrawn.rawValue);\\n\\n    // Move collateral currency from contract to sender.\\n    // Note: that we move the amount of collateral that is decreased from rawCollateral (inclusive of fees)\\n    // instead of the user requested amount. This eliminates precision loss that could occur\\n    // where the user withdraws more collateral than rawCollateral is decremented by.\\n    feePayerData.collateralCurrency.safeTransfer(\\n      msg.sender,\\n      amountWithdrawn.rawValue\\n    );\\n  }\\n\\n  function requestWithdrawal(\\n    PerpetualPositionManagerPoolParty.PositionData storage positionData,\\n    PerpetualPositionManagerPoolParty.PositionManagerData\\n      storage positionManagerData,\\n    FixedPoint.Unsigned memory collateralAmount,\\n    uint256 actualTime,\\n    FeePayerParty.FeePayerData storage feePayerData\\n  ) external {\\n    require(\\n      collateralAmount.isGreaterThan(0) &&\\n        collateralAmount.isLessThanOrEqual(\\n          positionData.rawCollateral.getFeeAdjustedCollateral(\\n            feePayerData.cumulativeFeeMultiplier\\n          )\\n        ),\\n      'Invalid collateral amount'\\n    );\\n\\n    // Update the position object for the user.\\n    positionData.withdrawalRequestPassTimestamp = actualTime.add(\\n      positionManagerData.withdrawalLiveness\\n    );\\n    positionData.withdrawalRequestAmount = collateralAmount;\\n\\n    emit RequestWithdrawal(msg.sender, collateralAmount.rawValue);\\n  }\\n\\n  function withdrawPassedRequest(\\n    PerpetualPositionManagerPoolParty.PositionData storage positionData,\\n    PerpetualPositionManagerPoolParty.GlobalPositionData\\n      storage globalPositionData,\\n    uint256 actualTime,\\n    FeePayerParty.FeePayerData storage feePayerData\\n  ) external returns (FixedPoint.Unsigned memory amountWithdrawn) {\\n    require(\\n      positionData.withdrawalRequestPassTimestamp != 0 &&\\n        positionData.withdrawalRequestPassTimestamp <= actualTime,\\n      'Invalid withdraw request'\\n    );\\n\\n    // If withdrawal request amount is > position collateral, then withdraw the full collateral amount.\\n    // This situation is possible due to fees charged since the withdrawal was originally requested.\\n    FixedPoint.Unsigned memory amountToWithdraw =\\n      positionData.withdrawalRequestAmount;\\n    if (\\n      // Reset withdrawal request by setting withdrawal amount and withdrawal timestamp to 0.\\n      positionData.withdrawalRequestAmount.isGreaterThan(\\n        positionData.rawCollateral.getFeeAdjustedCollateral(\\n          feePayerData.cumulativeFeeMultiplier\\n        )\\n      )\\n    ) {\\n      amountToWithdraw = positionData.rawCollateral.getFeeAdjustedCollateral(\\n        feePayerData.cumulativeFeeMultiplier\\n      );\\n    }\\n\\n    // Decrement the sponsor's collateral and global collateral amounts.\\n    amountWithdrawn = positionData._decrementCollateralBalances(\\n      globalPositionData,\\n      amountToWithdraw,\\n      feePayerData\\n    );\\n\\n    // Reset withdrawal request by setting withdrawal amount and withdrawal timestamp to 0.\\n    positionData._resetWithdrawalRequest();\\n\\n    // Transfer approved withdrawal amount from the contract to the caller.\\n    feePayerData.collateralCurrency.safeTransfer(\\n      msg.sender,\\n      amountWithdrawn.rawValue\\n    );\\n\\n    emit RequestWithdrawalExecuted(msg.sender, amountWithdrawn.rawValue);\\n  }\\n\\n  function cancelWithdrawal(\\n    PerpetualPositionManagerPoolParty.PositionData storage positionData\\n  ) external {\\n    require(\\n      positionData.withdrawalRequestPassTimestamp != 0,\\n      'No pending withdrawal'\\n    );\\n\\n    emit RequestWithdrawalCanceled(\\n      msg.sender,\\n      positionData.withdrawalRequestAmount.rawValue\\n    );\\n\\n    // Reset withdrawal request by setting withdrawal amount and withdrawal timestamp to 0.\\n    _resetWithdrawalRequest(positionData);\\n  }\\n\\n  function create(\\n    PerpetualPositionManagerPoolParty.PositionData storage positionData,\\n    PerpetualPositionManagerPoolParty.GlobalPositionData\\n      storage globalPositionData,\\n    PerpetualPositionManagerPoolParty.PositionManagerData\\n      storage positionManagerData,\\n    FixedPoint.Unsigned memory collateralAmount,\\n    FixedPoint.Unsigned memory numTokens,\\n    FeePayerParty.FeePayerData storage feePayerData\\n  ) external {\\n    // Either the new create ratio or the resultant position CR must be above the current GCR.\\n    require(\\n      (_checkCollateralization(\\n        globalPositionData,\\n        positionData\\n          .rawCollateral\\n          .getFeeAdjustedCollateral(feePayerData.cumulativeFeeMultiplier)\\n          .add(collateralAmount),\\n        positionData.tokensOutstanding.add(numTokens),\\n        feePayerData\\n      ) ||\\n        _checkCollateralization(\\n          globalPositionData,\\n          collateralAmount,\\n          numTokens,\\n          feePayerData\\n        )),\\n      'Insufficient collateral'\\n    );\\n\\n    require(\\n      positionData.withdrawalRequestPassTimestamp == 0,\\n      'Pending withdrawal'\\n    );\\n    if (positionData.tokensOutstanding.isEqual(0)) {\\n      require(\\n        numTokens.isGreaterThanOrEqual(positionManagerData.minSponsorTokens),\\n        'Below minimum sponsor position'\\n      );\\n      emit NewSponsor(msg.sender);\\n    }\\n\\n    // Increase the position and global collateral balance by collateral amount.\\n    _incrementCollateralBalances(\\n      positionData,\\n      globalPositionData,\\n      collateralAmount,\\n      feePayerData\\n    );\\n\\n    // Add the number of tokens created to the position's outstanding tokens.\\n    positionData.tokensOutstanding = positionData.tokensOutstanding.add(\\n      numTokens\\n    );\\n\\n    globalPositionData.totalTokensOutstanding = globalPositionData\\n      .totalTokensOutstanding\\n      .add(numTokens);\\n\\n    emit PositionCreated(\\n      msg.sender,\\n      collateralAmount.rawValue,\\n      numTokens.rawValue\\n    );\\n\\n    // Transfer tokens into the contract from caller and mint corresponding synthetic tokens to the caller's address.\\n    feePayerData.collateralCurrency.safeTransferFrom(\\n      msg.sender,\\n      address(this),\\n      collateralAmount.rawValue\\n    );\\n    require(\\n      positionManagerData.tokenCurrency.mint(msg.sender, numTokens.rawValue),\\n      'Minting synthetic tokens failed'\\n    );\\n  }\\n\\n  function redeeem(\\n    PerpetualPositionManagerPoolParty.PositionData storage positionData,\\n    PerpetualPositionManagerPoolParty.GlobalPositionData\\n      storage globalPositionData,\\n    PerpetualPositionManagerPoolParty.PositionManagerData\\n      storage positionManagerData,\\n    FixedPoint.Unsigned memory numTokens,\\n    FeePayerParty.FeePayerData storage feePayerData,\\n    address sponsor\\n  ) external returns (FixedPoint.Unsigned memory amountWithdrawn) {\\n    require(\\n      numTokens.isLessThanOrEqual(positionData.tokensOutstanding),\\n      'Invalid token amount'\\n    );\\n\\n    FixedPoint.Unsigned memory fractionRedeemed =\\n      numTokens.div(positionData.tokensOutstanding);\\n    FixedPoint.Unsigned memory collateralRedeemed =\\n      fractionRedeemed.mul(\\n        positionData.rawCollateral.getFeeAdjustedCollateral(\\n          feePayerData.cumulativeFeeMultiplier\\n        )\\n      );\\n\\n    // If redemption returns all tokens the sponsor has then we can delete their position. Else, downsize.\\n    if (positionData.tokensOutstanding.isEqual(numTokens)) {\\n      amountWithdrawn = positionData._deleteSponsorPosition(\\n        globalPositionData,\\n        feePayerData,\\n        sponsor\\n      );\\n    } else {\\n      // Decrement the sponsor's collateral and global collateral amounts.\\n      amountWithdrawn = positionData._decrementCollateralBalances(\\n        globalPositionData,\\n        collateralRedeemed,\\n        feePayerData\\n      );\\n\\n      // Decrease the sponsors position tokens size. Ensure it is above the min sponsor size.\\n      FixedPoint.Unsigned memory newTokenCount =\\n        positionData.tokensOutstanding.sub(numTokens);\\n      require(\\n        newTokenCount.isGreaterThanOrEqual(\\n          positionManagerData.minSponsorTokens\\n        ),\\n        'Below minimum sponsor position'\\n      );\\n      positionData.tokensOutstanding = newTokenCount;\\n\\n      // Update the totalTokensOutstanding after redemption.\\n      globalPositionData.totalTokensOutstanding = globalPositionData\\n        .totalTokensOutstanding\\n        .sub(numTokens);\\n    }\\n\\n    emit Redeem(msg.sender, amountWithdrawn.rawValue, numTokens.rawValue);\\n\\n    // Transfer collateral from contract to caller and burn callers synthetic tokens.\\n    feePayerData.collateralCurrency.safeTransfer(\\n      msg.sender,\\n      amountWithdrawn.rawValue\\n    );\\n    positionManagerData.tokenCurrency.safeTransferFrom(\\n      msg.sender,\\n      address(this),\\n      numTokens.rawValue\\n    );\\n    positionManagerData.tokenCurrency.burn(numTokens.rawValue);\\n  }\\n\\n  function repay(\\n    PerpetualPositionManagerPoolParty.PositionData storage positionData,\\n    PerpetualPositionManagerPoolParty.GlobalPositionData\\n      storage globalPositionData,\\n    PerpetualPositionManagerPoolParty.PositionManagerData\\n      storage positionManagerData,\\n    FixedPoint.Unsigned memory numTokens\\n  ) external {\\n    require(\\n      numTokens.isLessThanOrEqual(positionData.tokensOutstanding),\\n      'Invalid token amount'\\n    );\\n\\n    // Decrease the sponsors position tokens size. Ensure it is above the min sponsor size.\\n    FixedPoint.Unsigned memory newTokenCount =\\n      positionData.tokensOutstanding.sub(numTokens);\\n    require(\\n      newTokenCount.isGreaterThanOrEqual(positionManagerData.minSponsorTokens),\\n      'Below minimum sponsor position'\\n    );\\n    positionData.tokensOutstanding = newTokenCount;\\n\\n    // Update the totalTokensOutstanding after redemption.\\n    globalPositionData.totalTokensOutstanding = globalPositionData\\n      .totalTokensOutstanding\\n      .sub(numTokens);\\n\\n    emit Repay(msg.sender, numTokens.rawValue, newTokenCount.rawValue);\\n\\n    // Transfer the tokens back from the sponsor and burn them.\\n    positionManagerData.tokenCurrency.safeTransferFrom(\\n      msg.sender,\\n      address(this),\\n      numTokens.rawValue\\n    );\\n    positionManagerData.tokenCurrency.burn(numTokens.rawValue);\\n  }\\n\\n  function settleEmergencyShutdown(\\n    PerpetualPositionManagerPoolParty.PositionData storage positionData,\\n    PerpetualPositionManagerPoolParty.GlobalPositionData\\n      storage globalPositionData,\\n    PerpetualPositionManagerPoolParty.PositionManagerData\\n      storage positionManagerData,\\n    FeePayerParty.FeePayerData storage feePayerData\\n  ) external returns (FixedPoint.Unsigned memory amountWithdrawn) {\\n    if (\\n      positionManagerData.emergencyShutdownPrice.isEqual(\\n        FixedPoint.fromUnscaledUint(0)\\n      )\\n    ) {\\n      FixedPoint.Unsigned memory oraclePrice =\\n        positionManagerData._getOracleEmergencyShutdownPrice(feePayerData);\\n      positionManagerData.emergencyShutdownPrice = oraclePrice\\n        ._decimalsScalingFactor(feePayerData);\\n    }\\n\\n    // Get caller's tokens balance and calculate amount of underlying entitled to them.\\n    FixedPoint.Unsigned memory tokensToRedeem =\\n      FixedPoint.Unsigned(\\n        positionManagerData.tokenCurrency.balanceOf(msg.sender)\\n      );\\n\\n    FixedPoint.Unsigned memory totalRedeemableCollateral =\\n      tokensToRedeem.mul(positionManagerData.emergencyShutdownPrice);\\n\\n    // If the caller is a sponsor with outstanding collateral they are also entitled to their excess collateral after their debt.\\n    if (\\n      positionData\\n        .rawCollateral\\n        .getFeeAdjustedCollateral(feePayerData.cumulativeFeeMultiplier)\\n        .isGreaterThan(0)\\n    ) {\\n      // Calculate the underlying entitled to a token sponsor. This is collateral - debt in underlying with\\n      // the funding rate applied to the outstanding token debt.\\n      FixedPoint.Unsigned memory tokenDebtValueInCollateral =\\n        positionData.tokensOutstanding.mul(\\n          positionManagerData.emergencyShutdownPrice\\n        );\\n      FixedPoint.Unsigned memory positionCollateral =\\n        positionData.rawCollateral.getFeeAdjustedCollateral(\\n          feePayerData.cumulativeFeeMultiplier\\n        );\\n\\n      // If the debt is greater than the remaining collateral, they cannot redeem anything.\\n      FixedPoint.Unsigned memory positionRedeemableCollateral =\\n        tokenDebtValueInCollateral.isLessThan(positionCollateral)\\n          ? positionCollateral.sub(tokenDebtValueInCollateral)\\n          : FixedPoint.Unsigned(0);\\n\\n      // Add the number of redeemable tokens for the sponsor to their total redeemable collateral.\\n      totalRedeemableCollateral = totalRedeemableCollateral.add(\\n        positionRedeemableCollateral\\n      );\\n\\n      PerpetualPositionManagerPoolParty(address(this)).deleteSponsorPosition(\\n        msg.sender\\n      );\\n      emit EndedSponsorPosition(msg.sender);\\n    }\\n\\n    // Take the min of the remaining collateral and the collateral \\\"owed\\\". If the contract is undercapitalized,\\n    // the caller will get as much collateral as the contract can pay out.\\n    FixedPoint.Unsigned memory payout =\\n      FixedPoint.min(\\n        globalPositionData.rawTotalPositionCollateral.getFeeAdjustedCollateral(\\n          feePayerData.cumulativeFeeMultiplier\\n        ),\\n        totalRedeemableCollateral\\n      );\\n\\n    // Decrement total contract collateral and outstanding debt.\\n    amountWithdrawn = globalPositionData\\n      .rawTotalPositionCollateral\\n      .removeCollateral(payout, feePayerData.cumulativeFeeMultiplier);\\n    globalPositionData.totalTokensOutstanding = globalPositionData\\n      .totalTokensOutstanding\\n      .sub(tokensToRedeem);\\n\\n    emit SettleEmergencyShutdown(\\n      msg.sender,\\n      amountWithdrawn.rawValue,\\n      tokensToRedeem.rawValue\\n    );\\n\\n    // Transfer tokens & collateral and burn the redeemed tokens.\\n    feePayerData.collateralCurrency.safeTransfer(\\n      msg.sender,\\n      amountWithdrawn.rawValue\\n    );\\n    positionManagerData.tokenCurrency.safeTransferFrom(\\n      msg.sender,\\n      address(this),\\n      tokensToRedeem.rawValue\\n    );\\n    positionManagerData.tokenCurrency.burn(tokensToRedeem.rawValue);\\n  }\\n\\n  function trimExcess(\\n    PerpetualPositionManagerPoolParty.PositionManagerData\\n      storage positionManagerData,\\n    IERC20 token,\\n    FixedPoint.Unsigned memory pfcAmount,\\n    FeePayerParty.FeePayerData storage feePayerData\\n  ) external returns (FixedPoint.Unsigned memory amount) {\\n    FixedPoint.Unsigned memory balance =\\n      FixedPoint.Unsigned(token.balanceOf(address(this)));\\n    if (address(token) == address(feePayerData.collateralCurrency)) {\\n      // If it is the collateral currency, send only the amount that the contract is not tracking.\\n      // Note: this could be due to rounding error or balance-changing tokens, like aTokens.\\n      amount = balance.sub(pfcAmount);\\n    } else {\\n      // If it's not the collateral currency, send the entire balance.\\n      amount = balance;\\n    }\\n    token.safeTransfer(\\n      positionManagerData.excessTokenBeneficiary,\\n      amount.rawValue\\n    );\\n  }\\n\\n  /** @notice Requests an Oracle Price for a price identifier based on requested time\\n   * @param positionManagerData Data for a certain position\\n   * @param requestedTime Time for which to request price\\n   * @param feePayerData Data used to collect fees\\n   */\\n  function requestOraclePrice(\\n    PerpetualPositionManagerPoolParty.PositionManagerData\\n      storage positionManagerData,\\n    uint256 requestedTime,\\n    FeePayerParty.FeePayerData storage feePayerData\\n  ) external {\\n    feePayerData._getOracle().requestPrice(\\n      positionManagerData.priceIdentifier,\\n      requestedTime\\n    );\\n  }\\n\\n  // Reduces a sponsor's position and global counters by the specified parameters. Handles deleting the entire\\n  // position if the entire position is being removed. Does not make any external transfers.\\n  function reduceSponsorPosition(\\n    PerpetualPositionManagerPoolParty.PositionData storage positionData,\\n    PerpetualPositionManagerPoolParty.GlobalPositionData\\n      storage globalPositionData,\\n    PerpetualPositionManagerPoolParty.PositionManagerData\\n      storage positionManagerData,\\n    FixedPoint.Unsigned memory tokensToRemove,\\n    FixedPoint.Unsigned memory collateralToRemove,\\n    FixedPoint.Unsigned memory withdrawalAmountToRemove,\\n    FeePayerParty.FeePayerData storage feePayerData,\\n    address sponsor\\n  ) external {\\n    // If the entire position is being removed, delete it instead.\\n    if (\\n      tokensToRemove.isEqual(positionData.tokensOutstanding) &&\\n      positionData\\n        .rawCollateral\\n        .getFeeAdjustedCollateral(feePayerData.cumulativeFeeMultiplier)\\n        .isEqual(collateralToRemove)\\n    ) {\\n      positionData._deleteSponsorPosition(\\n        globalPositionData,\\n        feePayerData,\\n        sponsor\\n      );\\n      return;\\n    }\\n\\n    // Decrement the sponsor's collateral and global collateral amounts.\\n    positionData._decrementCollateralBalances(\\n      globalPositionData,\\n      collateralToRemove,\\n      feePayerData\\n    );\\n\\n    // Ensure that the sponsor will meet the min position size after the reduction.\\n    positionData.tokensOutstanding = positionData.tokensOutstanding.sub(\\n      tokensToRemove\\n    );\\n    require(\\n      positionData.tokensOutstanding.isGreaterThanOrEqual(\\n        positionManagerData.minSponsorTokens\\n      ),\\n      'Below minimum sponsor position'\\n    );\\n\\n    // Decrement the position's withdrawal amount.\\n    positionData.withdrawalRequestAmount = positionData\\n      .withdrawalRequestAmount\\n      .sub(withdrawalAmountToRemove);\\n\\n    // Decrement the total outstanding tokens in the overall contract.\\n    globalPositionData.totalTokensOutstanding = globalPositionData\\n      .totalTokensOutstanding\\n      .sub(tokensToRemove);\\n  }\\n\\n  //Call to the internal one (see _getOraclePrice)\\n  function getOraclePrice(\\n    PerpetualPositionManagerPoolParty.PositionManagerData\\n      storage positionManagerData,\\n    uint256 requestedTime,\\n    FeePayerParty.FeePayerData storage feePayerData\\n  ) external view returns (FixedPoint.Unsigned memory price) {\\n    return _getOraclePrice(positionManagerData, requestedTime, feePayerData);\\n  }\\n\\n  //Call to the internal one (see _decimalsScalingFactor)\\n  function decimalsScalingFactor(\\n    FixedPoint.Unsigned memory oraclePrice,\\n    FeePayerParty.FeePayerData storage feePayerData\\n  ) external view returns (FixedPoint.Unsigned memory scaledPrice) {\\n    return _decimalsScalingFactor(oraclePrice, feePayerData);\\n  }\\n\\n  //----------------------------------------\\n  // Internal functions\\n  //----------------------------------------\\n\\n  function _incrementCollateralBalances(\\n    PerpetualPositionManagerPoolParty.PositionData storage positionData,\\n    PerpetualPositionManagerPoolParty.GlobalPositionData\\n      storage globalPositionData,\\n    FixedPoint.Unsigned memory collateralAmount,\\n    FeePayerParty.FeePayerData memory feePayerData\\n  ) internal returns (FixedPoint.Unsigned memory) {\\n    positionData.rawCollateral.addCollateral(\\n      collateralAmount,\\n      feePayerData.cumulativeFeeMultiplier\\n    );\\n    return\\n      globalPositionData.rawTotalPositionCollateral.addCollateral(\\n        collateralAmount,\\n        feePayerData.cumulativeFeeMultiplier\\n      );\\n  }\\n\\n  function _decrementCollateralBalances(\\n    PerpetualPositionManagerPoolParty.PositionData storage positionData,\\n    PerpetualPositionManagerPoolParty.GlobalPositionData\\n      storage globalPositionData,\\n    FixedPoint.Unsigned memory collateralAmount,\\n    FeePayerParty.FeePayerData storage feePayerData\\n  ) internal returns (FixedPoint.Unsigned memory) {\\n    positionData.rawCollateral.removeCollateral(\\n      collateralAmount,\\n      feePayerData.cumulativeFeeMultiplier\\n    );\\n    return\\n      globalPositionData.rawTotalPositionCollateral.removeCollateral(\\n        collateralAmount,\\n        feePayerData.cumulativeFeeMultiplier\\n      );\\n  }\\n\\n  // Ensure individual and global consistency when decrementing collateral balances. Returns the change to the\\n  // position. We elect to return the amount that the global collateral is decreased by, rather than the individual\\n  // position's collateral, because we need to maintain the invariant that the global collateral is always\\n  // <= the collateral owned by the contract to avoid reverts on withdrawals. The amount returned = amount withdrawn.\\n\\n  function _decrementCollateralBalancesCheckGCR(\\n    PerpetualPositionManagerPoolParty.PositionData storage positionData,\\n    PerpetualPositionManagerPoolParty.GlobalPositionData\\n      storage globalPositionData,\\n    FixedPoint.Unsigned memory collateralAmount,\\n    FeePayerParty.FeePayerData storage feePayerData\\n  ) internal returns (FixedPoint.Unsigned memory) {\\n    positionData.rawCollateral.removeCollateral(\\n      collateralAmount,\\n      feePayerData.cumulativeFeeMultiplier\\n    );\\n    require(\\n      _checkPositionCollateralization(\\n        positionData,\\n        globalPositionData,\\n        feePayerData\\n      ),\\n      'CR below GCR'\\n    );\\n    return\\n      globalPositionData.rawTotalPositionCollateral.removeCollateral(\\n        collateralAmount,\\n        feePayerData.cumulativeFeeMultiplier\\n      );\\n  }\\n\\n  // Reset withdrawal request by setting the withdrawal request and withdrawal timestamp to 0.\\n  function _resetWithdrawalRequest(\\n    PerpetualPositionManagerPoolParty.PositionData storage positionData\\n  ) internal {\\n    positionData.withdrawalRequestAmount = FixedPoint.fromUnscaledUint(0);\\n    positionData.withdrawalRequestPassTimestamp = 0;\\n  }\\n\\n  // Deletes a sponsor's position and updates global counters. Does not make any external transfers.\\n  function _deleteSponsorPosition(\\n    PerpetualPositionManagerPoolParty.PositionData storage positionToLiquidate,\\n    PerpetualPositionManagerPoolParty.GlobalPositionData\\n      storage globalPositionData,\\n    FeePayerParty.FeePayerData storage feePayerData,\\n    address sponsor\\n  ) internal returns (FixedPoint.Unsigned memory) {\\n    FixedPoint.Unsigned memory startingGlobalCollateral =\\n      globalPositionData.rawTotalPositionCollateral.getFeeAdjustedCollateral(\\n        feePayerData.cumulativeFeeMultiplier\\n      );\\n\\n    // Remove the collateral and outstanding from the overall total position.\\n    globalPositionData.rawTotalPositionCollateral = globalPositionData\\n      .rawTotalPositionCollateral\\n      .sub(positionToLiquidate.rawCollateral);\\n    globalPositionData.totalTokensOutstanding = globalPositionData\\n      .totalTokensOutstanding\\n      .sub(positionToLiquidate.tokensOutstanding);\\n\\n    PerpetualPositionManagerPoolParty(address(this)).deleteSponsorPosition(\\n      sponsor\\n    );\\n\\n    emit EndedSponsorPosition(sponsor);\\n\\n    // Return fee-adjusted amount of collateral deleted from position.\\n    return\\n      startingGlobalCollateral.sub(\\n        globalPositionData.rawTotalPositionCollateral.getFeeAdjustedCollateral(\\n          feePayerData.cumulativeFeeMultiplier\\n        )\\n      );\\n  }\\n\\n  function _checkPositionCollateralization(\\n    PerpetualPositionManagerPoolParty.PositionData storage positionData,\\n    PerpetualPositionManagerPoolParty.GlobalPositionData\\n      storage globalPositionData,\\n    FeePayerParty.FeePayerData storage feePayerData\\n  ) internal view returns (bool) {\\n    return\\n      _checkCollateralization(\\n        globalPositionData,\\n        positionData.rawCollateral.getFeeAdjustedCollateral(\\n          feePayerData.cumulativeFeeMultiplier\\n        ),\\n        positionData.tokensOutstanding,\\n        feePayerData\\n      );\\n  }\\n\\n  // Checks whether the provided `collateral` and `numTokens` have a collateralization ratio above the global\\n  // collateralization ratio.\\n  function _checkCollateralization(\\n    PerpetualPositionManagerPoolParty.GlobalPositionData\\n      storage globalPositionData,\\n    FixedPoint.Unsigned memory collateral,\\n    FixedPoint.Unsigned memory numTokens,\\n    FeePayerParty.FeePayerData storage feePayerData\\n  ) internal view returns (bool) {\\n    FixedPoint.Unsigned memory global =\\n      _getCollateralizationRatio(\\n        globalPositionData.rawTotalPositionCollateral.getFeeAdjustedCollateral(\\n          feePayerData.cumulativeFeeMultiplier\\n        ),\\n        globalPositionData.totalTokensOutstanding\\n      );\\n    FixedPoint.Unsigned memory thisChange =\\n      _getCollateralizationRatio(collateral, numTokens);\\n    return !global.isGreaterThan(thisChange);\\n  }\\n\\n  // Fetches a resolved Oracle price from the Oracle. Reverts if the Oracle hasn't resolved for this request.\\n  function _getOracleEmergencyShutdownPrice(\\n    PerpetualPositionManagerPoolParty.PositionManagerData\\n      storage positionManagerData,\\n    FeePayerParty.FeePayerData storage feePayerData\\n  ) internal view returns (FixedPoint.Unsigned memory) {\\n    return\\n      positionManagerData._getOraclePrice(\\n        positionManagerData.emergencyShutdownTimestamp,\\n        feePayerData\\n      );\\n  }\\n\\n  // Fetches a resolved Oracle price from the Oracle. Reverts if the Oracle hasn't resolved for this request.\\n  function _getOraclePrice(\\n    PerpetualPositionManagerPoolParty.PositionManagerData\\n      storage positionManagerData,\\n    uint256 requestedTime,\\n    FeePayerParty.FeePayerData storage feePayerData\\n  ) internal view returns (FixedPoint.Unsigned memory price) {\\n    // Create an instance of the oracle and get the price. If the price is not resolved revert.\\n    OracleInterface oracle = feePayerData._getOracle();\\n    require(\\n      oracle.hasPrice(positionManagerData.priceIdentifier, requestedTime),\\n      'Unresolved oracle price'\\n    );\\n    int256 oraclePrice =\\n      oracle.getPrice(positionManagerData.priceIdentifier, requestedTime);\\n\\n    // For now we don't want to deal with negative prices in positions.\\n    if (oraclePrice < 0) {\\n      oraclePrice = 0;\\n    }\\n    return FixedPoint.Unsigned(uint256(oraclePrice));\\n  }\\n\\n  function _getOracle(FeePayerParty.FeePayerData storage feePayerData)\\n    internal\\n    view\\n    returns (OracleInterface)\\n  {\\n    return\\n      OracleInterface(\\n        feePayerData.finder.getImplementationAddress(OracleInterfaces.Oracle)\\n      );\\n  }\\n\\n  //Reduce orcale price according to the decimals of the collateral\\n  function _decimalsScalingFactor(\\n    FixedPoint.Unsigned memory oraclePrice,\\n    FeePayerParty.FeePayerData storage feePayerData\\n  ) internal view returns (FixedPoint.Unsigned memory scaledPrice) {\\n    uint8 collateralDecimalsNumber =\\n      IERC20Standard(address(feePayerData.collateralCurrency)).decimals();\\n    scaledPrice = oraclePrice.div(\\n      (10**(uint256(18)).sub(collateralDecimalsNumber))\\n    );\\n  }\\n\\n  function _getCollateralizationRatio(\\n    FixedPoint.Unsigned memory collateral,\\n    FixedPoint.Unsigned memory numTokens\\n  ) internal pure returns (FixedPoint.Unsigned memory ratio) {\\n    return\\n      numTokens.isLessThanOrEqual(0)\\n        ? FixedPoint.fromUnscaledUint(0)\\n        : collateral.div(numTokens);\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/derivative/common/FeePayerParty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from '../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {\\n  AdministrateeInterface\\n} from '../../../@jarvis-network/uma-core/contracts/oracle/interfaces/AdministrateeInterface.sol';\\nimport {\\n  StoreInterface\\n} from '../../../@jarvis-network/uma-core/contracts/oracle/interfaces/StoreInterface.sol';\\nimport {\\n  FinderInterface\\n} from '../../../@jarvis-network/uma-core/contracts/oracle/interfaces/FinderInterface.sol';\\nimport {\\n  OracleInterfaces\\n} from '../../../@jarvis-network/uma-core/contracts/oracle/implementation/Constants.sol';\\nimport {SafeMath} from '../../../@openzeppelin/contracts/math/SafeMath.sol';\\nimport {SafeERC20} from '../../../@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport {\\n  FixedPoint\\n} from '../../../@jarvis-network/uma-core/contracts/common/implementation/FixedPoint.sol';\\nimport {FeePayerPartyLib} from './FeePayerPartyLib.sol';\\nimport {\\n  Testable\\n} from '../../../@jarvis-network/uma-core/contracts/common/implementation/Testable.sol';\\nimport {\\n  Lockable\\n} from '../../../@jarvis-network/uma-core/contracts/common/implementation/Lockable.sol';\\n\\n/**\\n * @title FeePayer contract.\\n * @notice Provides fee payment functionality for the PerpetualParty contracts.\\n * contract is abstract as each derived contract that inherits `FeePayer` must implement `pfc()`.\\n */\\nabstract contract FeePayerParty is AdministrateeInterface, Testable, Lockable {\\n  using SafeMath for uint256;\\n  using FixedPoint for FixedPoint.Unsigned;\\n  using FeePayerPartyLib for FixedPoint.Unsigned;\\n  using FeePayerPartyLib for FeePayerData;\\n  using SafeERC20 for IERC20;\\n\\n  struct FeePayerData {\\n    // The collateral currency used to back the positions in this contract.\\n    IERC20 collateralCurrency;\\n    // Finder contract used to look up addresses for UMA system contracts.\\n    FinderInterface finder;\\n    // Tracks the last block time when the fees were paid.\\n    uint256 lastPaymentTime;\\n    // Tracks the cumulative fees that have been paid by the contract for use by derived contracts.\\n    // The multiplier starts at 1, and is updated by computing cumulativeFeeMultiplier * (1 - effectiveFee).\\n    // Put another way, the cumulativeFeeMultiplier is (1 - effectiveFee1) * (1 - effectiveFee2) ...\\n    // For example:\\n    // The cumulativeFeeMultiplier should start at 1.\\n    // If a 1% fee is charged, the multiplier should update to .99.\\n    // If another 1% fee is charged, the multiplier should be 0.99^2 (0.9801).\\n    FixedPoint.Unsigned cumulativeFeeMultiplier;\\n  }\\n\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  FeePayerData public feePayerData;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n\\n  event RegularFeesPaid(uint256 indexed regularFee, uint256 indexed lateFee);\\n  event FinalFeesPaid(uint256 indexed amount);\\n\\n  //----------------------------------------\\n  // Modifiers\\n  //----------------------------------------\\n\\n  // modifier that calls payRegularFees().\\n  modifier fees {\\n    // Note: the regular fee is applied on every fee-accruing transaction, where the total change is simply the\\n    // regular fee applied linearly since the last update. This implies that the compounding rate depends on the\\n    // frequency of update transactions that have this modifier, and it never reaches the ideal of continuous\\n    // compounding. This approximate-compounding pattern is common in the Ethereum ecosystem because of the\\n    // complexity of compounding data on-chain.\\n    payRegularFees();\\n    _;\\n  }\\n  modifier onlyThisContract {\\n    require(msg.sender == address(this), 'Caller is not this contract');\\n    _;\\n  }\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Constructs FeePayerParty contract. Called by child contracts\\n   * @param _collateralAddress ERC20 token that is used as the underlying collateral for the synthetic.\\n   * @param _finderAddress UMA protocol Finder used to discover other protocol contracts.\\n   * @param _timerAddress Contract that stores the current time in a testing environment.\\n   * Must be set to 0x0 for production environments that use live time.\\n   */\\n  constructor(\\n    address _collateralAddress,\\n    address _finderAddress,\\n    address _timerAddress\\n  ) public Testable(_timerAddress) {\\n    feePayerData.collateralCurrency = IERC20(_collateralAddress);\\n    feePayerData.finder = FinderInterface(_finderAddress);\\n    feePayerData.lastPaymentTime = getCurrentTime();\\n    feePayerData.cumulativeFeeMultiplier = FixedPoint.fromUnscaledUint(1);\\n  }\\n\\n  //----------------------------------------\\n  // External functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Pays UMA Oracle final fees of `amount` in `collateralCurrency` to the Store contract. Final fee is a flat fee\\n   * @param payer The address that pays the fees\\n   * @param amount Amount of fees to be paid\\n   */\\n  function payFinalFees(address payer, FixedPoint.Unsigned memory amount)\\n    external\\n    onlyThisContract\\n  {\\n    _payFinalFees(payer, amount);\\n  }\\n\\n  /**\\n   * @notice Gets the collateral currency of the derivative\\n   * @return Collateral currency\\n   */\\n  function collateralCurrency()\\n    public\\n    view\\n    virtual\\n    nonReentrantView()\\n    returns (IERC20)\\n  {\\n    return feePayerData.collateralCurrency;\\n  }\\n\\n  /**\\n   * @notice Pays UMA DVM regular fees (as a % of the collateral pool) to the Store contract.\\n   * @dev These must be paid periodically for the life of the contract. If the contract has not paid its regular fee\\n   * in a week or more then a late penalty is applied which is sent to the caller. If the amount of\\n   * fees owed are greater than the pfc, then this will pay as much as possible from the available collateral.\\n   * An event is only fired if the fees charged are greater than 0.\\n   * @return totalPaid Amount of collateral that the contract paid (sum of the amount paid to the Store and caller).\\n   * This returns 0 and exit early if there is no pfc, fees were already paid during the current block, or the fee rate is 0.\\n   */\\n  function payRegularFees()\\n    public\\n    nonReentrant()\\n    returns (FixedPoint.Unsigned memory totalPaid)\\n  {\\n    StoreInterface store = _getStore();\\n    uint256 time = getCurrentTime();\\n    FixedPoint.Unsigned memory collateralPool = _pfc();\\n    totalPaid = feePayerData.payRegularFees(store, time, collateralPool);\\n    return totalPaid;\\n  }\\n\\n  /**\\n   * @notice Gets the current profit from corruption for this contract in terms of the collateral currency.\\n   * @dev This is equivalent to the collateral pool available from which to pay fees. Therefore, derived contracts are\\n   * expected to implement this so that pay-fee methods can correctly compute the owed fees as a % of PfC.\\n   * @return pfc value for equal to the current profit from corruption denominated in collateral currency.\\n   */\\n  function pfc()\\n    public\\n    view\\n    override\\n    nonReentrantView()\\n    returns (FixedPoint.Unsigned memory)\\n  {\\n    return _pfc();\\n  }\\n\\n  //----------------------------------------\\n  // Internal functions\\n  //----------------------------------------\\n\\n  // Pays UMA Oracle final fees of `amount` in `collateralCurrency` to the Store contract. Final fee is a flat fee\\n  // charged for each price request. If payer is the contract, adjusts internal bookkeeping variables. If payer is not\\n  // the contract, pulls in `amount` of collateral currency.\\n  function _payFinalFees(address payer, FixedPoint.Unsigned memory amount)\\n    internal\\n  {\\n    StoreInterface store = _getStore();\\n    feePayerData.payFinalFees(store, payer, amount);\\n  }\\n\\n  function _pfc() internal view virtual returns (FixedPoint.Unsigned memory);\\n\\n  // Get Store Contract to which fees will be paid\\n  function _getStore() internal view returns (StoreInterface) {\\n    return\\n      StoreInterface(\\n        feePayerData.finder.getImplementationAddress(OracleInterfaces.Store)\\n      );\\n  }\\n\\n  // Calculate final fees to be paid\\n  function _computeFinalFees()\\n    internal\\n    view\\n    returns (FixedPoint.Unsigned memory finalFees)\\n  {\\n    StoreInterface store = _getStore();\\n    return store.computeFinalFee(address(feePayerData.collateralCurrency));\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/math/SignedSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@jarvis-network/uma-core/contracts/oracle/interfaces/StoreInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../../@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\n\\n/**\\n * @title Interface that allows financial contracts to pay oracle fees for their use of the system.\\n */\\ninterface StoreInterface {\\n    /**\\n     * @notice Pays Oracle fees in ETH to the store.\\n     * @dev To be used by contracts whose margin currency is ETH.\\n     */\\n    function payOracleFees() external payable;\\n\\n    /**\\n     * @notice Pays oracle fees in the margin currency, erc20Address, to the store.\\n     * @dev To be used if the margin currency is an ERC20 token rather than ETH.\\n     * @param erc20Address address of the ERC20 token used to pay the fee.\\n     * @param amount number of tokens to transfer. An approval for at least this amount must exist.\\n     */\\n    function payOracleFeesErc20(address erc20Address, FixedPoint.Unsigned calldata amount) external;\\n\\n    /**\\n     * @notice Computes the regular oracle fees that a contract should pay for a period.\\n     * @param startTime defines the beginning time from which the fee is paid.\\n     * @param endTime end time until which the fee is paid.\\n     * @param pfc \\\"profit from corruption\\\", or the maximum amount of margin currency that a\\n     * token sponsor could extract from the contract through corrupting the price feed in their favor.\\n     * @return regularFee amount owed for the duration from start to end time for the given pfc.\\n     * @return latePenalty for paying the fee after the deadline.\\n     */\\n    function computeRegularFee(\\n        uint256 startTime,\\n        uint256 endTime,\\n        FixedPoint.Unsigned calldata pfc\\n    ) external view returns (FixedPoint.Unsigned memory regularFee, FixedPoint.Unsigned memory latePenalty);\\n\\n    /**\\n     * @notice Computes the final oracle fees that a contract should pay at settlement.\\n     * @param currency token used to pay the final fee.\\n     * @return finalFee amount due.\\n     */\\n    function computeFinalFee(address currency) external view returns (FixedPoint.Unsigned memory);\\n}\\n\"\r\n    },\r\n    \"deploy/@jarvis-network/uma-core/contracts/oracle/interfaces/FinderInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\n * @dev Examples are the Oracle or Store interfaces.\\n */\\ninterface FinderInterface {\\n    /**\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\\n\\n    /**\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\n     * @param interfaceName queried interface.\\n     * @return implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/derivative/common/FeePayerPartyLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from '../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {\\n  StoreInterface\\n} from '../../../@jarvis-network/uma-core/contracts/oracle/interfaces/StoreInterface.sol';\\nimport {SafeERC20} from '../../../@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport {\\n  FixedPoint\\n} from '../../../@jarvis-network/uma-core/contracts/common/implementation/FixedPoint.sol';\\nimport {FeePayerParty} from './FeePayerParty.sol';\\n\\n/** @notice - A library to support FeePayerParty contract\\n */\\nlibrary FeePayerPartyLib {\\n  using FixedPoint for FixedPoint.Unsigned;\\n  using FeePayerPartyLib for FixedPoint.Unsigned;\\n  using SafeERC20 for IERC20;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n\\n  event RegularFeesPaid(uint256 indexed regularFee, uint256 indexed lateFee);\\n  event FinalFeesPaid(uint256 indexed amount);\\n\\n  //----------------------------------------\\n  // External functions\\n  //----------------------------------------\\n\\n  // Pays UMA DVM regular fees (as a % of the collateral pool) to the Store contract.\\n  // These must be paid periodically for the life of the contract. If the contract has not paid its regular fee\\n  // in a week or more then a late penalty is applied which is sent to the caller. If the amount of\\n  // fees owed are greater than the pfc, then this will pay as much as possible from the available collateral.\\n  // An event is only fired if the fees charged are greater than 0.\\n  function payRegularFees(\\n    FeePayerParty.FeePayerData storage feePayerData,\\n    StoreInterface store,\\n    uint256 time,\\n    FixedPoint.Unsigned memory collateralPool\\n  ) external returns (FixedPoint.Unsigned memory totalPaid) {\\n    // Exit early if there is no collateral from which to pay fees.\\n    if (collateralPool.isEqual(0)) {\\n      // Note: set the lastPaymentTime in this case so the contract is credited for paying during periods when it\\n      // has no locked collateral.\\n      feePayerData.lastPaymentTime = time;\\n      return totalPaid;\\n    }\\n\\n    // Exit early if fees were already paid during this block.\\n    if (feePayerData.lastPaymentTime == time) {\\n      return totalPaid;\\n    }\\n\\n    FixedPoint.Unsigned memory regularFee;\\n    FixedPoint.Unsigned memory latePenalty;\\n\\n    (regularFee, latePenalty) = store.computeRegularFee(\\n      feePayerData.lastPaymentTime,\\n      time,\\n      collateralPool\\n    );\\n    feePayerData.lastPaymentTime = time;\\n\\n    totalPaid = regularFee.add(latePenalty);\\n    if (totalPaid.isEqual(0)) {\\n      return totalPaid;\\n    }\\n\\n    // If the effective fees paid as a % of the pfc is > 100%, then we need to reduce it and make the contract pay\\n    // as much of the fee that it can (up to 100% of its pfc). We'll reduce the late penalty first and then the\\n    // regular fee, which has the effect of paying the store first, followed by the caller if there is any fee remaining.\\n    if (totalPaid.isGreaterThan(collateralPool)) {\\n      FixedPoint.Unsigned memory deficit = totalPaid.sub(collateralPool);\\n      FixedPoint.Unsigned memory latePenaltyReduction =\\n        FixedPoint.min(latePenalty, deficit);\\n      latePenalty = latePenalty.sub(latePenaltyReduction);\\n      deficit = deficit.sub(latePenaltyReduction);\\n      regularFee = regularFee.sub(FixedPoint.min(regularFee, deficit));\\n      totalPaid = collateralPool;\\n    }\\n\\n    emit RegularFeesPaid(regularFee.rawValue, latePenalty.rawValue);\\n\\n    feePayerData.cumulativeFeeMultiplier._adjustCumulativeFeeMultiplier(\\n      totalPaid,\\n      collateralPool\\n    );\\n\\n    if (regularFee.isGreaterThan(0)) {\\n      feePayerData.collateralCurrency.safeIncreaseAllowance(\\n        address(store),\\n        regularFee.rawValue\\n      );\\n      store.payOracleFeesErc20(\\n        address(feePayerData.collateralCurrency),\\n        regularFee\\n      );\\n    }\\n\\n    if (latePenalty.isGreaterThan(0)) {\\n      feePayerData.collateralCurrency.safeTransfer(\\n        msg.sender,\\n        latePenalty.rawValue\\n      );\\n    }\\n    return totalPaid;\\n  }\\n\\n  // Pays UMA Oracle final fees of `amount` in `collateralCurrency` to the Store contract. Final fee is a flat fee\\n  // charged for each price request. If payer is the contract, adjusts internal bookkeeping variables. If payer is not\\n  // the contract, pulls in `amount` of collateral currency.\\n  function payFinalFees(\\n    FeePayerParty.FeePayerData storage feePayerData,\\n    StoreInterface store,\\n    address payer,\\n    FixedPoint.Unsigned memory amount\\n  ) external {\\n    if (amount.isEqual(0)) {\\n      return;\\n    }\\n\\n    // Pull the collateral from the payer.\\n    feePayerData.collateralCurrency.safeTransferFrom(\\n      payer,\\n      address(this),\\n      amount.rawValue\\n    );\\n\\n    emit FinalFeesPaid(amount.rawValue);\\n\\n    feePayerData.collateralCurrency.safeIncreaseAllowance(\\n      address(store),\\n      amount.rawValue\\n    );\\n    store.payOracleFeesErc20(address(feePayerData.collateralCurrency), amount);\\n  }\\n\\n  //Call to the internal one (see _getFeeAdjustedCollateral)\\n  function getFeeAdjustedCollateral(\\n    FixedPoint.Unsigned memory rawCollateral,\\n    FixedPoint.Unsigned memory cumulativeFeeMultiplier\\n  ) external pure returns (FixedPoint.Unsigned memory collateral) {\\n    return rawCollateral._getFeeAdjustedCollateral(cumulativeFeeMultiplier);\\n  }\\n\\n  // Decrease rawCollateral by a fee-adjusted collateralToRemove amount. Fee adjustment scales up collateralToRemove\\n  // by dividing it by cumulativeFeeMultiplier. There is potential for this quotient to be floored, therefore\\n  // rawCollateral is decreased by less than expected. Because this method is usually called in conjunction with an\\n  // actual removal of collateral from this contract, return the fee-adjusted amount that the rawCollateral is\\n  // decreased by so that the caller can minimize error between collateral removed and rawCollateral debited.\\n  function removeCollateral(\\n    FixedPoint.Unsigned storage rawCollateral,\\n    FixedPoint.Unsigned memory collateralToRemove,\\n    FixedPoint.Unsigned memory cumulativeFeeMultiplier\\n  ) external returns (FixedPoint.Unsigned memory removedCollateral) {\\n    FixedPoint.Unsigned memory initialBalance =\\n      rawCollateral._getFeeAdjustedCollateral(cumulativeFeeMultiplier);\\n    FixedPoint.Unsigned memory adjustedCollateral =\\n      collateralToRemove._convertToRawCollateral(cumulativeFeeMultiplier);\\n    rawCollateral.rawValue = rawCollateral.sub(adjustedCollateral).rawValue;\\n    removedCollateral = initialBalance.sub(\\n      rawCollateral._getFeeAdjustedCollateral(cumulativeFeeMultiplier)\\n    );\\n  }\\n\\n  // Increase rawCollateral by a fee-adjusted collateralToAdd amount. Fee adjustment scales up collateralToAdd\\n  // by dividing it by cumulativeFeeMultiplier. There is potential for this quotient to be floored, therefore\\n  // rawCollateral is increased by less than expected. Because this method is usually called in conjunction with an\\n  // actual addition of collateral to this contract, return the fee-adjusted amount that the rawCollateral is\\n  // increased by so that the caller can minimize error between collateral added and rawCollateral credited.\\n  // NOTE: This return value exists only for the sake of symmetry with _removeCollateral. We don't actually use it\\n  // because we are OK if more collateral is stored in the contract than is represented by rawTotalPositionCollateral.\\n  function addCollateral(\\n    FixedPoint.Unsigned storage rawCollateral,\\n    FixedPoint.Unsigned memory collateralToAdd,\\n    FixedPoint.Unsigned memory cumulativeFeeMultiplier\\n  ) external returns (FixedPoint.Unsigned memory addedCollateral) {\\n    FixedPoint.Unsigned memory initialBalance =\\n      rawCollateral._getFeeAdjustedCollateral(cumulativeFeeMultiplier);\\n    FixedPoint.Unsigned memory adjustedCollateral =\\n      collateralToAdd._convertToRawCollateral(cumulativeFeeMultiplier);\\n    rawCollateral.rawValue = rawCollateral.add(adjustedCollateral).rawValue;\\n    addedCollateral = rawCollateral\\n      ._getFeeAdjustedCollateral(cumulativeFeeMultiplier)\\n      .sub(initialBalance);\\n  }\\n\\n  //Call to the internal one (see _convertToRawCollateral)\\n  function convertToRawCollateral(\\n    FixedPoint.Unsigned memory collateral,\\n    FixedPoint.Unsigned memory cumulativeFeeMultiplier\\n  ) external pure returns (FixedPoint.Unsigned memory rawCollateral) {\\n    return collateral._convertToRawCollateral(cumulativeFeeMultiplier);\\n  }\\n\\n  //----------------------------------------\\n  // Internal functions\\n  //----------------------------------------\\n\\n  // Scale the cumulativeFeeMultiplier by the ratio of fees paid to the current available collateral.\\n  function _adjustCumulativeFeeMultiplier(\\n    FixedPoint.Unsigned storage cumulativeFeeMultiplier,\\n    FixedPoint.Unsigned memory amount,\\n    FixedPoint.Unsigned memory currentPfc\\n  ) internal {\\n    FixedPoint.Unsigned memory effectiveFee = amount.divCeil(currentPfc);\\n    cumulativeFeeMultiplier.rawValue = cumulativeFeeMultiplier\\n      .mul(FixedPoint.fromUnscaledUint(1).sub(effectiveFee))\\n      .rawValue;\\n  }\\n\\n  // Returns the user's collateral minus any fees that have been subtracted since it was originally\\n  // deposited into the contract. Note: if the contract has paid fees since it was deployed, the raw\\n  // value should be larger than the returned value.\\n  function _getFeeAdjustedCollateral(\\n    FixedPoint.Unsigned memory rawCollateral,\\n    FixedPoint.Unsigned memory cumulativeFeeMultiplier\\n  ) internal pure returns (FixedPoint.Unsigned memory collateral) {\\n    return rawCollateral.mul(cumulativeFeeMultiplier);\\n  }\\n\\n  // Converts a user-readable collateral value into a raw value that accounts for already-assessed fees. If any fees\\n  // have been taken from this contract in the past, then the raw value will be larger than the user-readable value.\\n  function _convertToRawCollateral(\\n    FixedPoint.Unsigned memory collateral,\\n    FixedPoint.Unsigned memory cumulativeFeeMultiplier\\n  ) internal pure returns (FixedPoint.Unsigned memory rawCollateral) {\\n    return collateral.div(cumulativeFeeMultiplier);\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/@jarvis-network/uma-core/contracts/common/implementation/Testable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\n\\nimport \\\"./Timer.sol\\\";\\n\\n/**\\n * @title Base class that provides time overrides, but only if being run in test mode.\\n */\\nabstract contract Testable {\\n    // If the contract is being run on the test network, then `timerAddress` will be the 0x0 address.\\n    // Note: this variable should be set on construction and never modified.\\n    address public timerAddress;\\n\\n    /**\\n     * @notice Constructs the Testable contract. Called by child contracts.\\n     * @param _timerAddress Contract that stores the current time in a testing environment.\\n     * Must be set to 0x0 for production environments that use live time.\\n     */\\n    constructor(address _timerAddress) internal {\\n        timerAddress = _timerAddress;\\n    }\\n\\n    /**\\n     * @notice Reverts if not running in test mode.\\n     */\\n    modifier onlyIfTest {\\n        require(timerAddress != address(0x0));\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets the current time.\\n     * @dev Will revert if not running in test mode.\\n     * @param time timestamp to set current Testable time to.\\n     */\\n    function setCurrentTime(uint256 time) external onlyIfTest {\\n        Timer(timerAddress).setCurrentTime(time);\\n    }\\n\\n    /**\\n     * @notice Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode.\\n     * Otherwise, it will return the block timestamp.\\n     * @return uint for the current Testable timestamp.\\n     */\\n    function getCurrentTime() public view returns (uint256) {\\n        if (timerAddress != address(0x0)) {\\n            return Timer(timerAddress).getCurrentTime();\\n        } else {\\n            return now; // solhint-disable-line not-rely-on-time\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@jarvis-network/uma-core/contracts/common/implementation/Timer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title Universal store of current contract time for testing environments.\\n */\\ncontract Timer {\\n    uint256 private currentTime;\\n\\n    constructor() public {\\n        currentTime = now; // solhint-disable-line not-rely-on-time\\n    }\\n\\n    /**\\n     * @notice Sets the current time.\\n     * @dev Will revert if not running in test mode.\\n     * @param time timestamp to set `currentTime` to.\\n     */\\n    function setCurrentTime(uint256 time) external {\\n        currentTime = time;\\n    }\\n\\n    /**\\n     * @notice Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode.\\n     * Otherwise, it will return the block timestamp.\\n     * @return uint256 for the current Testable timestamp.\\n     */\\n    function getCurrentTime() public view returns (uint256) {\\n        return currentTime;\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@jarvis-network/uma-core/contracts/common/interfaces/IERC20Standard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../../../../@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title ERC20 interface that includes the decimals read only method.\\n */\\ninterface IERC20Standard is IERC20 {\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05`\\n     * (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value\\n     * {ERC20} uses, unless {_setupDecimals} is called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic\\n     * of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/derivative/v2/PerpetualLiquidatablePoolPartyLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from '../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {\\n  MintableBurnableIERC20\\n} from '../common/interfaces/MintableBurnableIERC20.sol';\\nimport {SafeMath} from '../../../@openzeppelin/contracts/math/SafeMath.sol';\\nimport {SafeERC20} from '../../../@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport {\\n  FixedPoint\\n} from '../../../@jarvis-network/uma-core/contracts/common/implementation/FixedPoint.sol';\\nimport {FeePayerPartyLib} from '../common/FeePayerPartyLib.sol';\\nimport {\\n  PerpetualPositionManagerPoolPartyLib\\n} from './PerpetualPositionManagerPoolPartyLib.sol';\\nimport {FeePayerParty} from '../common/FeePayerParty.sol';\\nimport {\\n  PerpetualLiquidatablePoolParty\\n} from './PerpetualLiquidatablePoolParty.sol';\\nimport {\\n  PerpetualPositionManagerPoolParty\\n} from './PerpetualPositionManagerPoolParty.sol';\\n\\nlibrary PerpetualLiquidatablePoolPartyLib {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n  using SafeERC20 for MintableBurnableIERC20;\\n  using FixedPoint for FixedPoint.Unsigned;\\n  using PerpetualPositionManagerPoolPartyLib for PerpetualPositionManagerPoolParty.PositionData;\\n  using FeePayerPartyLib for FixedPoint.Unsigned;\\n  using PerpetualPositionManagerPoolPartyLib for PerpetualPositionManagerPoolParty.PositionManagerData;\\n  using PerpetualLiquidatablePoolPartyLib for PerpetualLiquidatablePoolParty.LiquidationData;\\n  using PerpetualPositionManagerPoolPartyLib for FixedPoint.Unsigned;\\n\\n  struct CreateLiquidationParams {\\n    FixedPoint.Unsigned minCollateralPerToken;\\n    FixedPoint.Unsigned maxCollateralPerToken;\\n    FixedPoint.Unsigned maxTokensToLiquidate;\\n    uint256 actualTime;\\n    uint256 deadline;\\n    FixedPoint.Unsigned finalFee;\\n    address sponsor;\\n  }\\n\\n  struct CreateLiquidationCollateral {\\n    FixedPoint.Unsigned startCollateral;\\n    FixedPoint.Unsigned startCollateralNetOfWithdrawal;\\n    FixedPoint.Unsigned tokensLiquidated;\\n    FixedPoint.Unsigned finalFeeBond;\\n    address sponsor;\\n  }\\n\\n  struct CreateLiquidationReturnParams {\\n    uint256 liquidationId;\\n    FixedPoint.Unsigned lockedCollateral;\\n    FixedPoint.Unsigned liquidatedCollateral;\\n    FixedPoint.Unsigned tokensLiquidated;\\n    FixedPoint.Unsigned finalFeeBond;\\n  }\\n\\n  struct SettleParams {\\n    FixedPoint.Unsigned feeAttenuation;\\n    FixedPoint.Unsigned settlementPrice;\\n    FixedPoint.Unsigned tokenRedemptionValue;\\n    FixedPoint.Unsigned collateral;\\n    FixedPoint.Unsigned disputerDisputeReward;\\n    FixedPoint.Unsigned sponsorDisputeReward;\\n    FixedPoint.Unsigned disputeBondAmount;\\n    FixedPoint.Unsigned finalFee;\\n    FixedPoint.Unsigned withdrawalAmount;\\n  }\\n\\n  event LiquidationCreated(\\n    address indexed sponsor,\\n    address indexed liquidator,\\n    uint256 indexed liquidationId,\\n    uint256 tokensOutstanding,\\n    uint256 lockedCollateral,\\n    uint256 liquidatedCollateral,\\n    uint256 liquidationTime\\n  );\\n  event LiquidationDisputed(\\n    address indexed sponsor,\\n    address indexed liquidator,\\n    address indexed disputer,\\n    uint256 liquidationId,\\n    uint256 disputeBondAmount\\n  );\\n\\n  event DisputeSettled(\\n    address indexed caller,\\n    address indexed sponsor,\\n    address indexed liquidator,\\n    address disputer,\\n    uint256 liquidationId,\\n    bool disputeSucceeded\\n  );\\n\\n  event LiquidationWithdrawn(\\n    address indexed caller,\\n    uint256 paidToLiquidator,\\n    uint256 paidToDisputer,\\n    uint256 paidToSponsor,\\n    PerpetualLiquidatablePoolParty.Status indexed liquidationStatus,\\n    uint256 settlementPrice\\n  );\\n\\n  function createLiquidation(\\n    PerpetualPositionManagerPoolParty.PositionData storage positionToLiquidate,\\n    PerpetualPositionManagerPoolParty.GlobalPositionData\\n      storage globalPositionData,\\n    PerpetualPositionManagerPoolParty.PositionManagerData\\n      storage positionManagerData,\\n    PerpetualLiquidatablePoolParty.LiquidatableData storage liquidatableData,\\n    PerpetualLiquidatablePoolParty.LiquidationData[] storage liquidations,\\n    CreateLiquidationParams memory params,\\n    FeePayerParty.FeePayerData storage feePayerData\\n  ) external returns (CreateLiquidationReturnParams memory returnValues) {\\n    FixedPoint.Unsigned memory startCollateral;\\n    FixedPoint.Unsigned memory startCollateralNetOfWithdrawal;\\n\\n    (\\n      startCollateral,\\n      startCollateralNetOfWithdrawal,\\n      returnValues.tokensLiquidated\\n    ) = calculateNetLiquidation(positionToLiquidate, params, feePayerData);\\n\\n    // Scoping to get rid of a stack too deep error.\\n    {\\n      FixedPoint.Unsigned memory startTokens =\\n        positionToLiquidate.tokensOutstanding;\\n\\n      // The Position's collateralization ratio must be between [minCollateralPerToken, maxCollateralPerToken].\\n      // maxCollateralPerToken >= startCollateralNetOfWithdrawal / startTokens.\\n      require(\\n        params.maxCollateralPerToken.mul(startTokens).isGreaterThanOrEqual(\\n          startCollateralNetOfWithdrawal\\n        ),\\n        'CR is more than max liq. price'\\n      );\\n\\n      // minCollateralPerToken >= startCollateralNetOfWithdrawal / startTokens.\\n      require(\\n        params.minCollateralPerToken.mul(startTokens).isLessThanOrEqual(\\n          startCollateralNetOfWithdrawal\\n        ),\\n        'CR is less than min liq. price'\\n      );\\n    }\\n    {\\n      // Compute final fee at time of liquidation.\\n      returnValues.finalFeeBond = params.finalFee;\\n\\n      CreateLiquidationCollateral memory liquidationCollateral =\\n        CreateLiquidationCollateral(\\n          startCollateral,\\n          startCollateralNetOfWithdrawal,\\n          returnValues.tokensLiquidated,\\n          returnValues.finalFeeBond,\\n          params.sponsor\\n        );\\n\\n      (\\n        returnValues.lockedCollateral,\\n        returnValues.liquidatedCollateral\\n      ) = liquidateCollateral(\\n        positionToLiquidate,\\n        globalPositionData,\\n        positionManagerData,\\n        liquidatableData,\\n        feePayerData,\\n        liquidationCollateral\\n      );\\n\\n      // Construct liquidation object.\\n      // Note: All dispute-related values are zeroed out until a dispute occurs. liquidationId is the index of the new\\n      // LiquidationData that is pushed into the array, which is equal to the current length of the array pre-push.\\n      returnValues.liquidationId = liquidations.length;\\n      liquidations.push(\\n        PerpetualLiquidatablePoolParty.LiquidationData({\\n          sponsor: params.sponsor,\\n          liquidator: msg.sender,\\n          state: PerpetualLiquidatablePoolParty.Status.PreDispute,\\n          liquidationTime: params.actualTime,\\n          tokensOutstanding: returnValues.tokensLiquidated,\\n          lockedCollateral: returnValues.lockedCollateral,\\n          liquidatedCollateral: returnValues.liquidatedCollateral,\\n          rawUnitCollateral: FixedPoint\\n            .fromUnscaledUint(1)\\n            .convertToRawCollateral(feePayerData.cumulativeFeeMultiplier),\\n          disputer: address(0),\\n          settlementPrice: FixedPoint.fromUnscaledUint(0),\\n          finalFee: returnValues.finalFeeBond\\n        })\\n      );\\n    }\\n\\n    // If this liquidation is a subsequent liquidation on the position, and the liquidation size is larger than\\n    // some \\\"griefing threshold\\\", then re-set the liveness. This enables a liquidation against a withdraw request to be\\n    // \\\"dragged out\\\" if the position is very large and liquidators need time to gather funds. The griefing threshold\\n    // is enforced so that liquidations for trivially small # of tokens cannot drag out an honest sponsor's slow withdrawal.\\n\\n    // We arbitrarily set the \\\"griefing threshold\\\" to `minSponsorTokens` because it is the only parameter\\n    // denominated in token currency units and we can avoid adding another parameter.\\n    {\\n      FixedPoint.Unsigned memory griefingThreshold =\\n        positionManagerData.minSponsorTokens;\\n      if (\\n        positionToLiquidate.withdrawalRequestPassTimestamp > 0 &&\\n        positionToLiquidate.withdrawalRequestPassTimestamp >\\n        params.actualTime &&\\n        returnValues.tokensLiquidated.isGreaterThanOrEqual(griefingThreshold)\\n      ) {\\n        positionToLiquidate.withdrawalRequestPassTimestamp = params\\n          .actualTime\\n          .add(positionManagerData.withdrawalLiveness);\\n      }\\n    }\\n    emit LiquidationCreated(\\n      params.sponsor,\\n      msg.sender,\\n      returnValues.liquidationId,\\n      returnValues.tokensLiquidated.rawValue,\\n      returnValues.lockedCollateral.rawValue,\\n      returnValues.liquidatedCollateral.rawValue,\\n      params.actualTime\\n    );\\n\\n    burnAndLiquidateFee(\\n      positionManagerData,\\n      feePayerData,\\n      returnValues.tokensLiquidated,\\n      returnValues.finalFeeBond\\n    );\\n  }\\n\\n  function dispute(\\n    PerpetualLiquidatablePoolParty.LiquidationData storage disputedLiquidation,\\n    PerpetualLiquidatablePoolParty.LiquidatableData storage liquidatableData,\\n    PerpetualPositionManagerPoolParty.PositionManagerData\\n      storage positionManagerData,\\n    FeePayerParty.FeePayerData storage feePayerData,\\n    uint256 liquidationId,\\n    address sponsor\\n  ) external returns (FixedPoint.Unsigned memory totalPaid) {\\n    // Multiply by the unit collateral so the dispute bond is a percentage of the locked collateral after fees.\\n    FixedPoint.Unsigned memory disputeBondAmount =\\n      disputedLiquidation\\n        .lockedCollateral\\n        .mul(liquidatableData.disputeBondPct)\\n        .mul(\\n        disputedLiquidation.rawUnitCollateral.getFeeAdjustedCollateral(\\n          feePayerData.cumulativeFeeMultiplier\\n        )\\n      );\\n    liquidatableData.rawLiquidationCollateral.addCollateral(\\n      disputeBondAmount,\\n      feePayerData.cumulativeFeeMultiplier\\n    );\\n\\n    // Request a price from DVM. Liquidation is pending dispute until DVM returns a price.\\n    disputedLiquidation.state = PerpetualLiquidatablePoolParty\\n      .Status\\n      .PendingDispute;\\n    disputedLiquidation.disputer = msg.sender;\\n\\n    // Enqueue a request with the DVM.\\n    positionManagerData.requestOraclePrice(\\n      disputedLiquidation.liquidationTime,\\n      feePayerData\\n    );\\n\\n    emit LiquidationDisputed(\\n      sponsor,\\n      disputedLiquidation.liquidator,\\n      msg.sender,\\n      liquidationId,\\n      disputeBondAmount.rawValue\\n    );\\n\\n    totalPaid = disputeBondAmount.add(disputedLiquidation.finalFee);\\n\\n    // Pay the final fee for requesting price from the DVM.\\n    FeePayerParty(address(this)).payFinalFees(\\n      msg.sender,\\n      disputedLiquidation.finalFee\\n    );\\n\\n    // Transfer the dispute bond amount from the caller to this contract.\\n    feePayerData.collateralCurrency.safeTransferFrom(\\n      msg.sender,\\n      address(this),\\n      disputeBondAmount.rawValue\\n    );\\n  }\\n\\n  function withdrawLiquidation(\\n    PerpetualLiquidatablePoolParty.LiquidationData storage liquidation,\\n    PerpetualLiquidatablePoolParty.LiquidatableData storage liquidatableData,\\n    PerpetualPositionManagerPoolParty.PositionManagerData\\n      storage positionManagerData,\\n    FeePayerParty.FeePayerData storage feePayerData,\\n    uint256 liquidationId,\\n    address sponsor\\n  )\\n    external\\n    returns (PerpetualLiquidatablePoolParty.RewardsData memory rewards)\\n  {\\n    // Settles the liquidation if necessary. This call will revert if the price has not resolved yet.\\n    liquidation._settle(\\n      positionManagerData,\\n      liquidatableData,\\n      feePayerData,\\n      liquidationId,\\n      sponsor\\n    );\\n\\n    SettleParams memory settleParams;\\n\\n    // Calculate rewards as a function of the TRV.\\n    // Note: all payouts are scaled by the unit collateral value so all payouts are charged the fees pro rata.\\n    settleParams.feeAttenuation = liquidation\\n      .rawUnitCollateral\\n      .getFeeAdjustedCollateral(feePayerData.cumulativeFeeMultiplier);\\n    settleParams.settlementPrice = liquidation.settlementPrice;\\n    settleParams.tokenRedemptionValue = liquidation\\n      .tokensOutstanding\\n      .mul(settleParams.settlementPrice)\\n      .mul(settleParams.feeAttenuation);\\n    settleParams.collateral = liquidation.lockedCollateral.mul(\\n      settleParams.feeAttenuation\\n    );\\n    settleParams.disputerDisputeReward = liquidatableData\\n      .disputerDisputeRewardPct\\n      .mul(settleParams.tokenRedemptionValue);\\n    settleParams.sponsorDisputeReward = liquidatableData\\n      .sponsorDisputeRewardPct\\n      .mul(settleParams.tokenRedemptionValue);\\n    settleParams.disputeBondAmount = settleParams.collateral.mul(\\n      liquidatableData.disputeBondPct\\n    );\\n    settleParams.finalFee = liquidation.finalFee.mul(\\n      settleParams.feeAttenuation\\n    );\\n\\n    // There are three main outcome states: either the dispute succeeded, failed or was not updated.\\n    // Based on the state, different parties of a liquidation receive different amounts.\\n    // After assigning rewards based on the liquidation status, decrease the total collateral held in this contract\\n    // by the amount to pay each party. The actual amounts withdrawn might differ if _removeCollateral causes\\n    // precision loss.\\n    if (\\n      liquidation.state ==\\n      PerpetualLiquidatablePoolParty.Status.DisputeSucceeded\\n    ) {\\n      // If the dispute is successful then all three users should receive rewards:\\n\\n      // Pay DISPUTER: disputer reward + dispute bond + returned final fee\\n      rewards.payToDisputer = settleParams\\n        .disputerDisputeReward\\n        .add(settleParams.disputeBondAmount)\\n        .add(settleParams.finalFee);\\n\\n      // Pay SPONSOR: remaining collateral (collateral - TRV) + sponsor reward\\n      rewards.payToSponsor = settleParams.sponsorDisputeReward.add(\\n        settleParams.collateral.sub(settleParams.tokenRedemptionValue)\\n      );\\n\\n      // Pay LIQUIDATOR: TRV - dispute reward - sponsor reward\\n      // If TRV > Collateral, then subtract rewards from collateral\\n      // NOTE: This should never be below zero since we prevent (sponsorDisputePct+disputerDisputePct) >= 0 in\\n      // the constructor when these params are set.\\n      rewards.payToLiquidator = settleParams\\n        .tokenRedemptionValue\\n        .sub(settleParams.sponsorDisputeReward)\\n        .sub(settleParams.disputerDisputeReward);\\n\\n      // Transfer rewards and debit collateral\\n      rewards.paidToLiquidator = liquidatableData\\n        .rawLiquidationCollateral\\n        .removeCollateral(\\n        rewards.payToLiquidator,\\n        feePayerData.cumulativeFeeMultiplier\\n      );\\n      rewards.paidToSponsor = liquidatableData\\n        .rawLiquidationCollateral\\n        .removeCollateral(\\n        rewards.payToSponsor,\\n        feePayerData.cumulativeFeeMultiplier\\n      );\\n      rewards.paidToDisputer = liquidatableData\\n        .rawLiquidationCollateral\\n        .removeCollateral(\\n        rewards.payToDisputer,\\n        feePayerData.cumulativeFeeMultiplier\\n      );\\n\\n      feePayerData.collateralCurrency.safeTransfer(\\n        liquidation.disputer,\\n        rewards.paidToDisputer.rawValue\\n      );\\n      feePayerData.collateralCurrency.safeTransfer(\\n        liquidation.liquidator,\\n        rewards.paidToLiquidator.rawValue\\n      );\\n      feePayerData.collateralCurrency.safeTransfer(\\n        liquidation.sponsor,\\n        rewards.paidToSponsor.rawValue\\n      );\\n      // In the case of a failed dispute only the liquidator can withdraw.\\n    } else if (\\n      liquidation.state == PerpetualLiquidatablePoolParty.Status.DisputeFailed\\n    ) {\\n      // Pay LIQUIDATOR: collateral + dispute bond + returned final fee\\n      rewards.payToLiquidator = settleParams\\n        .collateral\\n        .add(settleParams.disputeBondAmount)\\n        .add(settleParams.finalFee);\\n\\n      // Transfer rewards and debit collateral\\n      rewards.paidToLiquidator = liquidatableData\\n        .rawLiquidationCollateral\\n        .removeCollateral(\\n        rewards.payToLiquidator,\\n        feePayerData.cumulativeFeeMultiplier\\n      );\\n\\n      feePayerData.collateralCurrency.safeTransfer(\\n        liquidation.liquidator,\\n        rewards.paidToLiquidator.rawValue\\n      );\\n      // If the state is pre-dispute but time has passed liveness then there was no dispute. We represent this\\n      // state as a dispute failed and the liquidator can withdraw.\\n    } else if (\\n      liquidation.state == PerpetualLiquidatablePoolParty.Status.PreDispute\\n    ) {\\n      // Pay LIQUIDATOR: collateral + returned final fee\\n      rewards.payToLiquidator = settleParams.collateral.add(\\n        settleParams.finalFee\\n      );\\n\\n      // Transfer rewards and debit collateral\\n      rewards.paidToLiquidator = liquidatableData\\n        .rawLiquidationCollateral\\n        .removeCollateral(\\n        rewards.payToLiquidator,\\n        feePayerData.cumulativeFeeMultiplier\\n      );\\n\\n      feePayerData.collateralCurrency.safeTransfer(\\n        liquidation.liquidator,\\n        rewards.paidToLiquidator.rawValue\\n      );\\n    }\\n\\n    emit LiquidationWithdrawn(\\n      msg.sender,\\n      rewards.paidToLiquidator.rawValue,\\n      rewards.paidToDisputer.rawValue,\\n      rewards.paidToSponsor.rawValue,\\n      liquidation.state,\\n      settleParams.settlementPrice.rawValue\\n    );\\n\\n    // Free up space after collateral is withdrawn by removing the liquidation object from the array.\\n    PerpetualLiquidatablePoolParty(address(this)).deleteLiquidation(\\n      liquidationId,\\n      sponsor\\n    );\\n\\n    return rewards;\\n  }\\n\\n  function liquidateCollateral(\\n    PerpetualPositionManagerPoolParty.PositionData storage positionToLiquidate,\\n    PerpetualPositionManagerPoolParty.GlobalPositionData\\n      storage globalPositionData,\\n    PerpetualPositionManagerPoolParty.PositionManagerData\\n      storage positionManagerData,\\n    PerpetualLiquidatablePoolParty.LiquidatableData storage liquidatableData,\\n    FeePayerParty.FeePayerData storage feePayerData,\\n    CreateLiquidationCollateral memory liquidationCollateralParams\\n  )\\n    internal\\n    returns (\\n      FixedPoint.Unsigned memory lockedCollateral,\\n      FixedPoint.Unsigned memory liquidatedCollateral\\n    )\\n  {\\n    // Scoping to get rid of a stack too deep error.\\n    {\\n      FixedPoint.Unsigned memory ratio =\\n        liquidationCollateralParams.tokensLiquidated.div(\\n          positionToLiquidate.tokensOutstanding\\n        );\\n\\n      // The actual amount of collateral that gets moved to the liquidation.\\n      lockedCollateral = liquidationCollateralParams.startCollateral.mul(ratio);\\n\\n      // For purposes of disputes, it's actually this liquidatedCollateral value that's used. This value is net of\\n      // withdrawal requests.\\n      liquidatedCollateral = liquidationCollateralParams\\n        .startCollateralNetOfWithdrawal\\n        .mul(ratio);\\n\\n      // Part of the withdrawal request is also removed. Ideally:\\n      // liquidatedCollateral + withdrawalAmountToRemove = lockedCollateral\\n      FixedPoint.Unsigned memory withdrawalAmountToRemove =\\n        positionToLiquidate.withdrawalRequestAmount.mul(ratio);\\n\\n      positionToLiquidate.reduceSponsorPosition(\\n        globalPositionData,\\n        positionManagerData,\\n        liquidationCollateralParams.tokensLiquidated,\\n        lockedCollateral,\\n        withdrawalAmountToRemove,\\n        feePayerData,\\n        liquidationCollateralParams.sponsor\\n      );\\n    }\\n\\n    // Add to the global liquidation collateral count\\n\\n    liquidatableData.rawLiquidationCollateral.addCollateral(\\n      lockedCollateral.add(liquidationCollateralParams.finalFeeBond),\\n      feePayerData.cumulativeFeeMultiplier\\n    );\\n  }\\n\\n  function burnAndLiquidateFee(\\n    PerpetualPositionManagerPoolParty.PositionManagerData\\n      storage positionManagerData,\\n    FeePayerParty.FeePayerData storage feePayerData,\\n    FixedPoint.Unsigned memory tokensLiquidated,\\n    FixedPoint.Unsigned memory finalFeeBond\\n  ) internal {\\n    // Destroy tokens\\n    positionManagerData.tokenCurrency.safeTransferFrom(\\n      msg.sender,\\n      address(this),\\n      tokensLiquidated.rawValue\\n    );\\n    positionManagerData.tokenCurrency.burn(tokensLiquidated.rawValue);\\n\\n    // Pull final fee from liquidator.\\n    feePayerData.collateralCurrency.safeTransferFrom(\\n      msg.sender,\\n      address(this),\\n      finalFeeBond.rawValue\\n    );\\n  }\\n\\n  // This settles a liquidation if it is in the PendingDispute state. If not, it will immediately return.\\n  // If the liquidation is in the PendingDispute state, but a price is not available, this will revert.\\n  function _settle(\\n    PerpetualLiquidatablePoolParty.LiquidationData storage liquidation,\\n    PerpetualPositionManagerPoolParty.PositionManagerData\\n      storage positionManagerData,\\n    PerpetualLiquidatablePoolParty.LiquidatableData storage liquidatableData,\\n    FeePayerParty.FeePayerData storage feePayerData,\\n    uint256 liquidationId,\\n    address sponsor\\n  ) internal {\\n    // Settlement only happens when state == PendingDispute and will only happen once per liquidation.\\n    // If this liquidation is not ready to be settled, this method should return immediately.\\n    if (\\n      liquidation.state != PerpetualLiquidatablePoolParty.Status.PendingDispute\\n    ) {\\n      return;\\n    }\\n\\n    // Get the returned price from the oracle. If this has not yet resolved will revert.\\n    FixedPoint.Unsigned memory oraclePrice =\\n      positionManagerData.getOraclePrice(\\n        liquidation.liquidationTime,\\n        feePayerData\\n      );\\n\\n    liquidation.settlementPrice = oraclePrice.decimalsScalingFactor(\\n      feePayerData\\n    );\\n\\n    // Find the value of the tokens in the underlying collateral.\\n    FixedPoint.Unsigned memory tokenRedemptionValue =\\n      liquidation.tokensOutstanding.mul(liquidation.settlementPrice);\\n\\n    // The required collateral is the value of the tokens in underlying * required collateral ratio.\\n    FixedPoint.Unsigned memory requiredCollateral =\\n      tokenRedemptionValue.mul(liquidatableData.collateralRequirement);\\n\\n    // If the position has more than the required collateral it is solvent and the dispute is valid(liquidation is invalid)\\n    // Note that this check uses the liquidatedCollateral not the lockedCollateral as this considers withdrawals.\\n    bool disputeSucceeded =\\n      liquidation.liquidatedCollateral.isGreaterThanOrEqual(requiredCollateral);\\n    liquidation.state = disputeSucceeded\\n      ? PerpetualLiquidatablePoolParty.Status.DisputeSucceeded\\n      : PerpetualLiquidatablePoolParty.Status.DisputeFailed;\\n\\n    emit DisputeSettled(\\n      msg.sender,\\n      sponsor,\\n      liquidation.liquidator,\\n      liquidation.disputer,\\n      liquidationId,\\n      disputeSucceeded\\n    );\\n  }\\n\\n  function calculateNetLiquidation(\\n    PerpetualPositionManagerPoolParty.PositionData storage positionToLiquidate,\\n    CreateLiquidationParams memory params,\\n    FeePayerParty.FeePayerData storage feePayerData\\n  )\\n    internal\\n    view\\n    returns (\\n      FixedPoint.Unsigned memory startCollateral,\\n      FixedPoint.Unsigned memory startCollateralNetOfWithdrawal,\\n      FixedPoint.Unsigned memory tokensLiquidated\\n    )\\n  {\\n    // Check that this transaction was mined pre-deadline.\\n    tokensLiquidated = FixedPoint.min(\\n      params.maxTokensToLiquidate,\\n      positionToLiquidate.tokensOutstanding\\n    );\\n    require(tokensLiquidated.isGreaterThan(0), 'Liquidating 0 tokens');\\n\\n    // Check that this transaction was mined pre-deadline.\\n    require(params.actualTime <= params.deadline, 'Mined after deadline');\\n\\n    // Starting values for the Position being liquidated. If withdrawal request amount is > position's collateral,\\n    // then set this to 0, otherwise set it to (startCollateral - withdrawal request amount).\\n    startCollateral = positionToLiquidate\\n      .rawCollateral\\n      .getFeeAdjustedCollateral(feePayerData.cumulativeFeeMultiplier);\\n    startCollateralNetOfWithdrawal = FixedPoint.fromUnscaledUint(0);\\n\\n    if (\\n      positionToLiquidate.withdrawalRequestAmount.isLessThanOrEqual(\\n        startCollateral\\n      )\\n    ) {\\n      startCollateralNetOfWithdrawal = startCollateral.sub(\\n        positionToLiquidate.withdrawalRequestAmount\\n      );\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/derivative/v2/PerpetualLiquidatablePoolParty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from '../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {SafeMath} from '../../../@openzeppelin/contracts/math/SafeMath.sol';\\nimport {SafeERC20} from '../../../@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport {\\n  FixedPoint\\n} from '../../../@jarvis-network/uma-core/contracts/common/implementation/FixedPoint.sol';\\nimport {FeePayerPartyLib} from '../common/FeePayerPartyLib.sol';\\nimport {\\n  PerpetualPositionManagerPoolPartyLib\\n} from './PerpetualPositionManagerPoolPartyLib.sol';\\nimport {\\n  PerpetualLiquidatablePoolPartyLib\\n} from './PerpetualLiquidatablePoolPartyLib.sol';\\nimport {\\n  PerpetualPositionManagerPoolParty\\n} from './PerpetualPositionManagerPoolParty.sol';\\n\\n/**\\n * @title PerpetualLiquidatable\\n * @notice Adds logic to a position-managing contract that enables callers to liquidate an undercollateralized position.\\n * @dev The liquidation has a liveness period before expiring successfully, during which someone can \\\"dispute\\\" the\\n * liquidation, which sends a price request to the relevant Oracle to settle the final collateralization ratio based on\\n * a DVM price. The contract enforces dispute rewards in order to incentivize disputers to correctly dispute false\\n * liquidations and compensate position sponsors who had their position incorrectly liquidated. Importantly, a\\n * prospective disputer must deposit a dispute bond that they can lose in the case of an unsuccessful dispute.\\n */\\ncontract PerpetualLiquidatablePoolParty is PerpetualPositionManagerPoolParty {\\n  using FixedPoint for FixedPoint.Unsigned;\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n  using FeePayerPartyLib for FixedPoint.Unsigned;\\n  using PerpetualLiquidatablePoolPartyLib for PerpetualPositionManagerPoolParty.PositionData;\\n  using PerpetualLiquidatablePoolPartyLib for LiquidationData;\\n\\n  enum Status {\\n    Uninitialized,\\n    PreDispute,\\n    PendingDispute,\\n    DisputeSucceeded,\\n    DisputeFailed\\n  }\\n\\n  struct LiquidatableParams {\\n    uint256 liquidationLiveness;\\n    FixedPoint.Unsigned collateralRequirement;\\n    FixedPoint.Unsigned disputeBondPct;\\n    FixedPoint.Unsigned sponsorDisputeRewardPct;\\n    FixedPoint.Unsigned disputerDisputeRewardPct;\\n  }\\n\\n  struct LiquidationData {\\n    // Following variables set upon creation of liquidation:\\n    address sponsor; // Address of the liquidated position's sponsor\\n    address liquidator; // Address who created this liquidation\\n    Status state; // Liquidated (and expired or not), Pending a Dispute, or Dispute has resolved\\n    uint256 liquidationTime; // Time when liquidation is initiated, needed to get price from Oracle\\n    // Following variables determined by the position that is being liquidated:\\n    FixedPoint.Unsigned tokensOutstanding; // Synthetic tokens required to be burned by liquidator\\n    FixedPoint.Unsigned lockedCollateral; // Collateral locked by contract and released upon expiry or post-dispute\\n    // Amount of collateral being liquidated, which could be different from\\n    // lockedCollateral if there were pending withdrawals at the time of liquidation\\n    FixedPoint.Unsigned liquidatedCollateral;\\n    // Unit value (starts at 1) that is used to track the fees per unit of collateral over the course of the liquidation.\\n    FixedPoint.Unsigned rawUnitCollateral;\\n    // Following variable set upon initiation of a dispute:\\n    address disputer;\\n    // Following variable set upon a resolution of a dispute:\\n    FixedPoint.Unsigned settlementPrice; // Final price as determined by an Oracle following a dispute\\n    FixedPoint.Unsigned finalFee; // Final fee paid following a dispute\\n  }\\n\\n  // Define the contract's constructor parameters as a struct to enable more variables to be specified.\\n  // This is required to enable more params, over and above Solidity's limits.\\n  struct ConstructorParams {\\n    // Params for PricelessPositionManager only.\\n    PerpetualPositionManagerPoolParty.PositionManagerParams positionManagerParams;\\n    PerpetualPositionManagerPoolParty.Roles roles;\\n    // Params specifically for Liquidatable.\\n    LiquidatableParams liquidatableParams;\\n  }\\n\\n  struct LiquidatableData {\\n    // Total collateral in liquidation.\\n    FixedPoint.Unsigned rawLiquidationCollateral;\\n    // Immutable contract parameters:\\n    // Amount of time for pending liquidation before expiry.\\n    // !!Note: The lower the liquidation liveness value, the more risk incurred by sponsors.\\n    //       Extremely low liveness values increase the chance that opportunistic invalid liquidations\\n    //       expire without dispute, thereby decreasing the usability for sponsors and increasing the risk\\n    //       for the contract as a whole. An insolvent contract is extremely risky for any sponsor or synthetic\\n    //       token holder for the contract.\\n    uint256 liquidationLiveness;\\n    // Required collateral:TRV ratio for a position to be considered sufficiently collateralized.\\n    FixedPoint.Unsigned collateralRequirement;\\n    // Percent of a Liquidation/Position's lockedCollateral to be deposited by a potential disputer\\n    FixedPoint.Unsigned disputeBondPct;\\n    // Percent of oraclePrice paid to sponsor in the Disputed state (i.e. following a successful dispute)\\n    // Represented as a multiplier, see above.\\n    FixedPoint.Unsigned sponsorDisputeRewardPct;\\n    // Percent of oraclePrice paid to disputer in the Disputed state (i.e. following a successful dispute)\\n    // Represented as a multiplier, see above.\\n    FixedPoint.Unsigned disputerDisputeRewardPct;\\n  }\\n\\n  // This struct is used in the `withdrawLiquidation` method that disperses liquidation and dispute rewards.\\n  // `payToX` stores the total collateral to withdraw from the contract to pay X. This value might differ\\n  // from `paidToX` due to precision loss between accounting for the `rawCollateral` versus the\\n  // fee-adjusted collateral. These variables are stored within a struct to avoid the stack too deep error.\\n  struct RewardsData {\\n    FixedPoint.Unsigned payToSponsor;\\n    FixedPoint.Unsigned payToLiquidator;\\n    FixedPoint.Unsigned payToDisputer;\\n    FixedPoint.Unsigned paidToSponsor;\\n    FixedPoint.Unsigned paidToLiquidator;\\n    FixedPoint.Unsigned paidToDisputer;\\n  }\\n\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  // Liquidations are unique by ID per sponsor\\n  mapping(address => LiquidationData[]) public liquidations;\\n\\n  LiquidatableData public liquidatableData;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n\\n  event LiquidationCreated(\\n    address indexed sponsor,\\n    address indexed liquidator,\\n    uint256 indexed liquidationId,\\n    uint256 tokensOutstanding,\\n    uint256 lockedCollateral,\\n    uint256 liquidatedCollateral,\\n    uint256 liquidationTime\\n  );\\n  event LiquidationDisputed(\\n    address indexed sponsor,\\n    address indexed liquidator,\\n    address indexed disputer,\\n    uint256 liquidationId,\\n    uint256 disputeBondAmount\\n  );\\n  event DisputeSettled(\\n    address indexed caller,\\n    address indexed sponsor,\\n    address indexed liquidator,\\n    address disputer,\\n    uint256 liquidationId,\\n    bool disputeSucceeded\\n  );\\n  event LiquidationWithdrawn(\\n    address indexed caller,\\n    uint256 paidToLiquidator,\\n    uint256 paidToDisputer,\\n    uint256 paidToSponsor,\\n    Status indexed liquidationStatus,\\n    uint256 settlementPrice\\n  );\\n\\n  //----------------------------------------\\n  // Modifiers\\n  //----------------------------------------\\n\\n  modifier disputable(uint256 liquidationId, address sponsor) {\\n    _disputable(liquidationId, sponsor);\\n    _;\\n  }\\n\\n  modifier withdrawable(uint256 liquidationId, address sponsor) {\\n    _withdrawable(liquidationId, sponsor);\\n    _;\\n  }\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Constructs the liquidatable contract.\\n   * @param params struct to define input parameters for construction of Liquidatable. Some params\\n   * are fed directly into the PositionManager's constructor within the inheritance tree.\\n   */\\n  constructor(ConstructorParams memory params)\\n    public\\n    PerpetualPositionManagerPoolParty(\\n      params.positionManagerParams,\\n      params.roles\\n    )\\n  {\\n    require(\\n      params.liquidatableParams.collateralRequirement.isGreaterThan(1),\\n      'CR is more than 100%'\\n    );\\n    require(\\n      params\\n        .liquidatableParams\\n        .sponsorDisputeRewardPct\\n        .add(params.liquidatableParams.disputerDisputeRewardPct)\\n        .isLessThan(1),\\n      'Rewards are more than 100%'\\n    );\\n\\n    // Set liquidatable specific variables.\\n    liquidatableData.liquidationLiveness = params\\n      .liquidatableParams\\n      .liquidationLiveness;\\n    liquidatableData.collateralRequirement = params\\n      .liquidatableParams\\n      .collateralRequirement;\\n    liquidatableData.disputeBondPct = params.liquidatableParams.disputeBondPct;\\n    liquidatableData.sponsorDisputeRewardPct = params\\n      .liquidatableParams\\n      .sponsorDisputeRewardPct;\\n    liquidatableData.disputerDisputeRewardPct = params\\n      .liquidatableParams\\n      .disputerDisputeRewardPct;\\n  }\\n\\n  //----------------------------------------\\n  // External functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Liquidates the sponsor's position if the caller has enough\\n   * synthetic tokens to retire the position's outstanding tokens. Liquidations above\\n   * a minimum size also reset an ongoing \\\"slow withdrawal\\\"'s liveness.\\n   * @dev This method generates an ID that will uniquely identify liquidation for the sponsor. This contract must be\\n   * approved to spend at least `tokensLiquidated` of `tokenCurrency` and at least `finalFeeBond` of `feePayerData.collateralCurrency`.\\n   * @param sponsor address of the sponsor to liquidate.\\n   * @param minCollateralPerToken abort the liquidation if the position's collateral per token is below this value.\\n   * @param maxCollateralPerToken abort the liquidation if the position's collateral per token exceeds this value.\\n   * @param maxTokensToLiquidate max number of tokens to liquidate.\\n   * @param deadline abort the liquidation if the transaction is mined after this timestamp.\\n   * @return liquidationId ID of the newly created liquidation.\\n   * @return tokensLiquidated amount of synthetic tokens removed and liquidated from the `sponsor`'s position.\\n   * @return finalFeeBond amount of collateral to be posted by liquidator and returned if not disputed successfully.\\n   */\\n  function createLiquidation(\\n    address sponsor,\\n    FixedPoint.Unsigned calldata minCollateralPerToken,\\n    FixedPoint.Unsigned calldata maxCollateralPerToken,\\n    FixedPoint.Unsigned calldata maxTokensToLiquidate,\\n    uint256 deadline\\n  )\\n    external\\n    fees()\\n    notEmergencyShutdown()\\n    nonReentrant()\\n    returns (\\n      uint256 liquidationId,\\n      FixedPoint.Unsigned memory tokensLiquidated,\\n      FixedPoint.Unsigned memory finalFeeBond\\n    )\\n  {\\n    // Retrieve Position data for sponsor\\n    PositionData storage positionToLiquidate = _getPositionData(sponsor);\\n\\n    LiquidationData[] storage TokenSponsorLiquidations = liquidations[sponsor];\\n\\n    // Compute final fee at time of liquidation.\\n    FixedPoint.Unsigned memory finalFee = _computeFinalFees();\\n\\n    uint256 actualTime = getCurrentTime();\\n\\n    PerpetualLiquidatablePoolPartyLib.CreateLiquidationParams memory params =\\n      PerpetualLiquidatablePoolPartyLib.CreateLiquidationParams(\\n        minCollateralPerToken,\\n        maxCollateralPerToken,\\n        maxTokensToLiquidate,\\n        actualTime,\\n        deadline,\\n        finalFee,\\n        sponsor\\n      );\\n\\n\\n      PerpetualLiquidatablePoolPartyLib.CreateLiquidationReturnParams\\n        memory returnValues\\n    ;\\n\\n    returnValues = positionToLiquidate.createLiquidation(\\n      globalPositionData,\\n      positionManagerData,\\n      liquidatableData,\\n      TokenSponsorLiquidations,\\n      params,\\n      feePayerData\\n    );\\n\\n    return (\\n      returnValues.liquidationId,\\n      returnValues.tokensLiquidated,\\n      returnValues.finalFeeBond\\n    );\\n  }\\n\\n  /**\\n   * @notice Disputes a liquidation, if the caller has enough collateral to post a dispute bond\\n   * and pay a fixed final fee charged on each price request.\\n   * @dev Can only dispute a liquidation before the liquidation expires and if there are no other pending disputes.\\n   * This contract must be approved to spend at least the dispute bond amount of `feePayerData.collateralCurrency`. This dispute\\n   * bond amount is calculated from `disputeBondPct` times the collateral in the liquidation.\\n   * @param liquidationId of the disputed liquidation.\\n   * @param sponsor the address of the sponsor whose liquidation is being disputed.\\n   * @return totalPaid amount of collateral charged to disputer (i.e. final fee bond + dispute bond).\\n   */\\n  function dispute(uint256 liquidationId, address sponsor)\\n    external\\n    disputable(liquidationId, sponsor)\\n    fees()\\n    nonReentrant()\\n    returns (FixedPoint.Unsigned memory totalPaid)\\n  {\\n    LiquidationData storage disputedLiquidation =\\n      _getLiquidationData(sponsor, liquidationId);\\n\\n    totalPaid = disputedLiquidation.dispute(\\n      liquidatableData,\\n      positionManagerData,\\n      feePayerData,\\n      liquidationId,\\n      sponsor\\n    );\\n  }\\n\\n  /**\\n   * @notice After a dispute has settled or after a non-disputed liquidation has expired,\\n   * anyone can call this method to disperse payments to the sponsor, liquidator, and disputer.\\n   * @dev If the dispute SUCCEEDED: the sponsor, liquidator, and disputer are eligible for payment.\\n   * If the dispute FAILED: only the liquidator receives payment. This method deletes the liquidation data.\\n   * This method will revert if rewards have already been dispersed.\\n   * @param liquidationId uniquely identifies the sponsor's liquidation.\\n   * @param sponsor address of the sponsor associated with the liquidation.\\n   * @return data about rewards paid out.\\n   */\\n  function withdrawLiquidation(uint256 liquidationId, address sponsor)\\n    external\\n    withdrawable(liquidationId, sponsor)\\n    fees()\\n    nonReentrant()\\n    returns (RewardsData memory)\\n  {\\n    LiquidationData storage liquidation =\\n      _getLiquidationData(sponsor, liquidationId);\\n\\n    RewardsData memory rewardsData =\\n      liquidation.withdrawLiquidation(\\n        liquidatableData,\\n        positionManagerData,\\n        feePayerData,\\n        liquidationId,\\n        sponsor\\n      );\\n\\n    return rewardsData;\\n  }\\n\\n  /**\\n   * @notice Delete liquidation of a TokenSponsor (This function can only be called by the contract itself)\\n   * @param liquidationId id of the liquidation.\\n   * @param sponsor address of the TokenSponsor.\\n   */\\n  function deleteLiquidation(uint256 liquidationId, address sponsor)\\n    external\\n    onlyThisContract\\n  {\\n    delete liquidations[sponsor][liquidationId];\\n  }\\n\\n  /**\\n   * @notice Gets an array of liquidations performed on a token sponsor\\n   * @param sponsor address of the TokenSponsor.\\n   * @return liquidationData An array of data for all liquidations performed on a token sponsor\\n   */\\n  function getLiquidations(address sponsor)\\n    external\\n    view\\n    returns (LiquidationData[] memory liquidationData)\\n  {\\n    return liquidations[sponsor];\\n  }\\n\\n  //----------------------------------------\\n  // Internal functions\\n  //----------------------------------------\\n\\n  function _pfc() internal view override returns (FixedPoint.Unsigned memory) {\\n    return\\n      super._pfc().add(\\n        liquidatableData.rawLiquidationCollateral.getFeeAdjustedCollateral(\\n          feePayerData.cumulativeFeeMultiplier\\n        )\\n      );\\n  }\\n\\n  function _getLiquidationData(address sponsor, uint256 liquidationId)\\n    internal\\n    view\\n    returns (LiquidationData storage liquidation)\\n  {\\n    LiquidationData[] storage liquidationArray = liquidations[sponsor];\\n    // Revert if the caller is attempting to access an invalid liquidation\\n    // (one that has never been created or one has never been initialized).\\n    require(\\n      liquidationId < liquidationArray.length &&\\n        liquidationArray[liquidationId].state != Status.Uninitialized,\\n      'Invalid liquidation ID'\\n    );\\n    return liquidationArray[liquidationId];\\n  }\\n\\n  function _getLiquidationExpiry(LiquidationData storage liquidation)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return\\n      liquidation.liquidationTime.add(liquidatableData.liquidationLiveness);\\n  }\\n\\n  // These internal functions are supposed to act identically to modifiers, but re-used modifiers\\n  // unnecessarily increase contract bytecode size.\\n\\n  function _disputable(uint256 liquidationId, address sponsor) internal view {\\n    LiquidationData storage liquidation =\\n      _getLiquidationData(sponsor, liquidationId);\\n    require(\\n      (getCurrentTime() < _getLiquidationExpiry(liquidation)) &&\\n        (liquidation.state == Status.PreDispute),\\n      'Liquidation not disputable'\\n    );\\n  }\\n\\n  function _withdrawable(uint256 liquidationId, address sponsor) internal view {\\n    LiquidationData storage liquidation =\\n      _getLiquidationData(sponsor, liquidationId);\\n    Status state = liquidation.state;\\n\\n    // Must be disputed or the liquidation has passed expiry.\\n    require(\\n      (state > Status.PreDispute) ||\\n        ((_getLiquidationExpiry(liquidation) <= getCurrentTime()) &&\\n          (state == Status.PreDispute)),\\n      'Liquidation not withdrawable'\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/derivative/v2/PerpetutalPoolPartyCreator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {ISynthereumFinder} from '../../core/interfaces/IFinder.sol';\\nimport {\\n  MintableBurnableIERC20\\n} from '../common/interfaces/MintableBurnableIERC20.sol';\\nimport {\\n  IMintableBurnableTokenFactory\\n} from '../common/interfaces/IMintableBurnableTokenFactory.sol';\\nimport {\\n  FixedPoint\\n} from '../../../@jarvis-network/uma-core/contracts/common/implementation/FixedPoint.sol';\\nimport {PerpetualPoolPartyLib} from './PerpetualPoolPartyLib.sol';\\nimport {SynthereumInterfaces} from '../../core/Constants.sol';\\nimport {\\n  ContractCreator\\n} from '../../../@jarvis-network/uma-core/contracts/oracle/implementation/ContractCreator.sol';\\nimport {\\n  Testable\\n} from '../../../@jarvis-network/uma-core/contracts/common/implementation/Testable.sol';\\nimport {\\n  Lockable\\n} from '../../../@jarvis-network/uma-core/contracts/common/implementation/Lockable.sol';\\nimport {\\n  MintableBurnableTokenFactory\\n} from '../common/MintableBurnableTokenFactory.sol';\\nimport {PerpetualPoolParty} from './PerpetualPoolParty.sol';\\n\\n/**\\n * @title Perpetual Contract creator.\\n * @notice Factory contract to create and register new instances of perpetual contracts.\\n * Responsible for constraining the parameters used to construct a new perpetual. This creator contains a number of constraints\\n * that are applied to newly created  contract. These constraints can evolve over time and are\\n * initially constrained to conservative values in this first iteration. Technically there is nothing in the\\n * Perpetual contract requiring these constraints. However, because `createPerpetual()` is intended\\n * to be the only way to create valid financial contracts that are registered with the DVM (via _registerContract),\\n  we can enforce deployment configurations here.\\n */\\ncontract PerpetualPoolPartyCreator is ContractCreator, Testable, Lockable {\\n  using FixedPoint for FixedPoint.Unsigned;\\n\\n  struct Params {\\n    address collateralAddress;\\n    bytes32 priceFeedIdentifier;\\n    string syntheticName;\\n    string syntheticSymbol;\\n    address syntheticToken;\\n    FixedPoint.Unsigned collateralRequirement;\\n    FixedPoint.Unsigned disputeBondPct;\\n    FixedPoint.Unsigned sponsorDisputeRewardPct;\\n    FixedPoint.Unsigned disputerDisputeRewardPct;\\n    FixedPoint.Unsigned minSponsorTokens;\\n    uint256 withdrawalLiveness;\\n    uint256 liquidationLiveness;\\n    address excessTokenBeneficiary;\\n    address[] admins;\\n    address[] pools;\\n  }\\n\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  // Address of Synthereum Finder\\n  ISynthereumFinder public synthereumFinder;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n\\n  event CreatedPerpetual(\\n    address indexed perpetualAddress,\\n    address indexed deployerAddress\\n  );\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Constructs the Perpetual contract.\\n   * @param _umaFinderAddress UMA protocol Finder used to discover other protocol contracts.\\n   * @param _synthereumFinder Synthereum Finder address used to discover other contracts\\n   * @param _timerAddress Contract that stores the current time in a testing environment.\\n   */\\n  constructor(\\n    address _umaFinderAddress,\\n    address _synthereumFinder,\\n    address _timerAddress\\n  )\\n    public\\n    ContractCreator(_umaFinderAddress)\\n    Testable(_timerAddress)\\n    nonReentrant()\\n  {\\n    synthereumFinder = ISynthereumFinder(_synthereumFinder);\\n  }\\n\\n  //----------------------------------------\\n  // External functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Creates an instance of perpetual and registers it within the registry.\\n   * @param params is a `ConstructorParams` object from Perpetual.\\n   * @return address of the deployed contract.\\n   */\\n  function createPerpetual(Params memory params)\\n    public\\n    virtual\\n    nonReentrant()\\n    returns (address)\\n  {\\n    // Create a new synthetic token using the params.\\n    require(bytes(params.syntheticName).length != 0, 'Missing synthetic name');\\n    require(\\n      bytes(params.syntheticSymbol).length != 0,\\n      'Missing synthetic symbol'\\n    );\\n    address derivative;\\n    if (params.syntheticToken == address(0)) {\\n      // If the collateral token does not have a `decimals()` method,\\n      // then a default precision of 18 will be applied to the newly created synthetic token.\\n      IMintableBurnableTokenFactory tokenFactory =\\n        IMintableBurnableTokenFactory(\\n          ISynthereumFinder(synthereumFinder).getImplementationAddress(\\n            SynthereumInterfaces.TokenFactory\\n          )\\n        );\\n      MintableBurnableIERC20 tokenCurrency =\\n        tokenFactory.createToken(\\n          params.syntheticName,\\n          params.syntheticSymbol,\\n          18\\n        );\\n      derivative = PerpetualPoolPartyLib.deploy(\\n        _convertParams(params, tokenCurrency)\\n      );\\n      // Give permissions to new derivative contract and then hand over ownership.\\n      tokenCurrency.addMinter(derivative);\\n      tokenCurrency.addBurner(derivative);\\n      tokenCurrency.addAdmin(\\n        synthereumFinder.getImplementationAddress(SynthereumInterfaces.Manager)\\n      );\\n      tokenCurrency.renounceAdmin();\\n    } else {\\n      MintableBurnableIERC20 tokenCurrency =\\n        MintableBurnableIERC20(params.syntheticToken);\\n      require(\\n        keccak256(abi.encodePacked(tokenCurrency.name())) ==\\n          keccak256(abi.encodePacked(params.syntheticName)),\\n        'Wrong synthetic token name'\\n      );\\n      require(\\n        keccak256(abi.encodePacked(tokenCurrency.symbol())) ==\\n          keccak256(abi.encodePacked(params.syntheticSymbol)),\\n        'Wrong synthetic token symbol'\\n      );\\n      require(\\n        tokenCurrency.decimals() == uint8(18),\\n        'Decimals of synthetic token must be 18'\\n      );\\n      derivative = PerpetualPoolPartyLib.deploy(\\n        _convertParams(params, tokenCurrency)\\n      );\\n    }\\n\\n    _registerContract(new address[](0), address(derivative));\\n\\n    emit CreatedPerpetual(address(derivative), msg.sender);\\n\\n    return address(derivative);\\n  }\\n\\n  //----------------------------------------\\n  // Internal functions\\n  //----------------------------------------\\n\\n  // Converts createPerpetual params to Perpetual constructor params.\\n  function _convertParams(\\n    Params memory params,\\n    MintableBurnableIERC20 newTokenCurrency\\n  )\\n    internal\\n    view\\n    returns (PerpetualPoolParty.ConstructorParams memory constructorParams)\\n  {\\n    // Known from creator deployment.\\n    constructorParams.positionManagerParams.finderAddress = finderAddress;\\n    constructorParams.positionManagerParams.synthereumFinder = synthereumFinder;\\n    constructorParams.positionManagerParams.timerAddress = timerAddress;\\n\\n    // Enforce configuration constraints.\\n    require(params.withdrawalLiveness != 0, 'Withdrawal liveness cannot be 0');\\n    require(\\n      params.liquidationLiveness != 0,\\n      'Liquidation liveness cannot be 0'\\n    );\\n    require(\\n      params.excessTokenBeneficiary != address(0),\\n      'Token Beneficiary cannot be 0x0'\\n    );\\n    require(params.admins.length > 0, 'No admin addresses set');\\n\\n    // We don't want perpetual deployers to be able to intentionally or unintentionally set\\n    // liveness periods that could induce arithmetic overflow, but we also don't want\\n    // to be opinionated about what livenesses are \\\"correct\\\", so we will somewhat\\n    // arbitrarily set the liveness upper bound to 100 years (5200 weeks). In practice, liveness\\n    // periods even greater than a few days would make the perpetual unusable for most users.\\n    require(\\n      params.withdrawalLiveness < 5200 weeks,\\n      'Withdrawal liveness too large'\\n    );\\n    require(\\n      params.liquidationLiveness < 5200 weeks,\\n      'Liquidation liveness too large'\\n    );\\n\\n    // Input from function call.\\n\\n    constructorParams.positionManagerParams.tokenAddress = address(\\n      newTokenCurrency\\n    );\\n    constructorParams.positionManagerParams.collateralAddress = params\\n      .collateralAddress;\\n    constructorParams.positionManagerParams.priceFeedIdentifier = params\\n      .priceFeedIdentifier;\\n    constructorParams.liquidatableParams.collateralRequirement = params\\n      .collateralRequirement;\\n    constructorParams.liquidatableParams.disputeBondPct = params.disputeBondPct;\\n    constructorParams.liquidatableParams.sponsorDisputeRewardPct = params\\n      .sponsorDisputeRewardPct;\\n    constructorParams.liquidatableParams.disputerDisputeRewardPct = params\\n      .disputerDisputeRewardPct;\\n    constructorParams.positionManagerParams.minSponsorTokens = params\\n      .minSponsorTokens;\\n    constructorParams.positionManagerParams.withdrawalLiveness = params\\n      .withdrawalLiveness;\\n    constructorParams.liquidatableParams.liquidationLiveness = params\\n      .liquidationLiveness;\\n    constructorParams.positionManagerParams.excessTokenBeneficiary = params\\n      .excessTokenBeneficiary;\\n    constructorParams.roles.admins = params.admins;\\n    constructorParams.roles.pools = params.pools;\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/derivative/common/interfaces/IMintableBurnableTokenFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.12;\\nimport {MintableBurnableIERC20} from './MintableBurnableIERC20.sol';\\n\\n/**\\n * @title Interface for interacting with the MintableBurnableTokenFactory contract\\n */\\ninterface IMintableBurnableTokenFactory {\\n  /** @notice Calls the deployment of a new ERC20 token\\n   * @param tokenName The name of the token to be deployed\\n   * @param tokenSymbol The symbol of the token that will be deployed\\n   * @param tokenDecimals Number of decimals for the token to be deployed\\n   */\\n  function createToken(\\n    string memory tokenName,\\n    string memory tokenSymbol,\\n    uint8 tokenDecimals\\n  ) external returns (MintableBurnableIERC20 newToken);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/derivative/v2/PerpetualPoolPartyLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {PerpetualPoolParty} from './PerpetualPoolParty.sol';\\n\\n/**\\n * @title Provides convenient Perpetual Multi Party contract utilities.\\n * @dev Using this library to deploy Perpetuals allows calling contracts to avoid importing the full bytecode.\\n */\\nlibrary PerpetualPoolPartyLib {\\n  /**\\n   * @notice Returns address of new Perpetual deployed with given `params` configuration.\\n   * @dev Caller will need to register new Perpetual with the Registry to begin requesting prices. Caller is also\\n   * responsible for enforcing constraints on `params`.\\n   * @param params is a `ConstructorParams` object from Perpetual.\\n   * @return address of the deployed Perpetual contract\\n   */\\n  function deploy(PerpetualPoolParty.ConstructorParams memory params)\\n    external\\n    returns (address)\\n  {\\n    PerpetualPoolParty derivative = new PerpetualPoolParty(params);\\n    return address(derivative);\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/@jarvis-network/uma-core/contracts/oracle/implementation/ContractCreator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\n\\nimport \\\"../interfaces/FinderInterface.sol\\\";\\nimport \\\"../../common/implementation/AddressWhitelist.sol\\\";\\nimport \\\"./Registry.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\n/**\\n * @title Base contract for all financial contract creators\\n */\\nabstract contract ContractCreator {\\n    address internal finderAddress;\\n\\n    constructor(address _finderAddress) public {\\n        finderAddress = _finderAddress;\\n    }\\n\\n    function _requireWhitelistedCollateral(address collateralAddress) internal view {\\n        FinderInterface finder = FinderInterface(finderAddress);\\n        AddressWhitelist collateralWhitelist =\\n            AddressWhitelist(finder.getImplementationAddress(OracleInterfaces.CollateralWhitelist));\\n        require(collateralWhitelist.isOnWhitelist(collateralAddress), \\\"Collateral not whitelisted\\\");\\n    }\\n\\n    function _registerContract(address[] memory parties, address contractToRegister) internal {\\n        FinderInterface finder = FinderInterface(finderAddress);\\n        Registry registry = Registry(finder.getImplementationAddress(OracleInterfaces.Registry));\\n        registry.registerContract(parties, contractToRegister);\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/derivative/common/MintableBurnableTokenFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\n\\nimport {\\n  MintableBurnableSyntheticToken\\n} from './MintableBurnableSyntheticToken.sol';\\nimport {MintableBurnableIERC20} from './interfaces/MintableBurnableIERC20.sol';\\nimport {\\n  Lockable\\n} from '../../../@jarvis-network/uma-core/contracts/common/implementation/Lockable.sol';\\n\\n/**\\n * @title Factory for creating new mintable and burnable tokens.\\n */\\ncontract MintableBurnableTokenFactory is Lockable {\\n  /**\\n   * @notice Create a new token and return it to the caller.\\n   * @dev The caller will become the only minter and burner and the new admin capable of assigning the roles.\\n   * @param tokenName used to describe the new token.\\n   * @param tokenSymbol short ticker abbreviation of the name. Ideally < 5 chars.\\n   * @param tokenDecimals used to define the precision used in the token's numerical representation.\\n   * @return newToken an instance of the newly created token interface.\\n   */\\n  function createToken(\\n    string memory tokenName,\\n    string memory tokenSymbol,\\n    uint8 tokenDecimals\\n  ) public virtual nonReentrant() returns (MintableBurnableIERC20 newToken) {\\n    MintableBurnableSyntheticToken mintableToken =\\n      new MintableBurnableSyntheticToken(tokenName, tokenSymbol, tokenDecimals);\\n    mintableToken.addAdmin(msg.sender);\\n    mintableToken.renounceAdmin();\\n    newToken = MintableBurnableIERC20(address(mintableToken));\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/derivative/v2/PerpetualPoolParty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {\\n  PerpetualLiquidatablePoolParty\\n} from './PerpetualLiquidatablePoolParty.sol';\\n\\n/**\\n * @title Perpetual Poolparty Contract.\\n * @notice Convenient wrapper for Liquidatable.\\n */\\ncontract PerpetualPoolParty is PerpetualLiquidatablePoolParty {\\n  /**\\n   * @notice Constructs the Perpetual contract.\\n   * @param params struct to define input parameters for construction of Liquidatable. Some params\\n   * are fed directly into the PositionManager's constructor within the inheritance tree.\\n   */\\n  constructor(ConstructorParams memory params)\\n    public\\n    PerpetualLiquidatablePoolParty(params)\\n  {}\\n}\\n\"\r\n    },\r\n    \"deploy/@jarvis-network/uma-core/contracts/oracle/implementation/Registry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../common/implementation/MultiRole.sol\\\";\\nimport \\\"../interfaces/RegistryInterface.sol\\\";\\n\\nimport \\\"../../../../../@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title Registry for financial contracts and approved financial contract creators.\\n * @dev Maintains a whitelist of financial contract creators that are allowed\\n * to register new financial contracts and stores party members of a financial contract.\\n */\\ncontract Registry is RegistryInterface, MultiRole {\\n    using SafeMath for uint256;\\n\\n    /****************************************\\n     *    INTERNAL VARIABLES AND STORAGE    *\\n     ****************************************/\\n\\n    enum Roles {\\n        Owner, // The owner manages the set of ContractCreators.\\n        ContractCreator // Can register financial contracts.\\n    }\\n\\n    // This enum is required because a `WasValid` state is required\\n    // to ensure that financial contracts cannot be re-registered.\\n    enum Validity { Invalid, Valid }\\n\\n    // Local information about a contract.\\n    struct FinancialContract {\\n        Validity valid;\\n        uint128 index;\\n    }\\n\\n    struct Party {\\n        address[] contracts; // Each financial contract address is stored in this array.\\n        // The address of each financial contract is mapped to its index for constant time look up and deletion.\\n        mapping(address => uint256) contractIndex;\\n    }\\n\\n    // Array of all contracts that are approved to use the UMA Oracle.\\n    address[] public registeredContracts;\\n\\n    // Map of financial contract contracts to the associated FinancialContract struct.\\n    mapping(address => FinancialContract) public contractMap;\\n\\n    // Map each party member to their their associated Party struct.\\n    mapping(address => Party) private partyMap;\\n\\n    /****************************************\\n     *                EVENTS                *\\n     ****************************************/\\n\\n    event NewContractRegistered(address indexed contractAddress, address indexed creator, address[] parties);\\n    event PartyAdded(address indexed contractAddress, address indexed party);\\n    event PartyRemoved(address indexed contractAddress, address indexed party);\\n\\n    /**\\n     * @notice Construct the Registry contract.\\n     */\\n    constructor() public {\\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), msg.sender);\\n        // Start with no contract creators registered.\\n        _createSharedRole(uint256(Roles.ContractCreator), uint256(Roles.Owner), new address[](0));\\n    }\\n\\n    /****************************************\\n     *        REGISTRATION FUNCTIONS        *\\n     ****************************************/\\n\\n    /**\\n     * @notice Registers a new financial contract.\\n     * @dev Only authorized contract creators can call this method.\\n     * @param parties array of addresses who become parties in the contract.\\n     * @param contractAddress address of the contract against which the parties are registered.\\n     */\\n    function registerContract(address[] calldata parties, address contractAddress)\\n        external\\n        override\\n        onlyRoleHolder(uint256(Roles.ContractCreator))\\n    {\\n        FinancialContract storage financialContract = contractMap[contractAddress];\\n        require(contractMap[contractAddress].valid == Validity.Invalid, \\\"Can only register once\\\");\\n\\n        // Store contract address as a registered contract.\\n        registeredContracts.push(contractAddress);\\n\\n        // No length check necessary because we should never hit (2^127 - 1) contracts.\\n        financialContract.index = uint128(registeredContracts.length.sub(1));\\n\\n        // For all parties in the array add them to the contract's parties.\\n        financialContract.valid = Validity.Valid;\\n        for (uint256 i = 0; i < parties.length; i = i.add(1)) {\\n            _addPartyToContract(parties[i], contractAddress);\\n        }\\n\\n        emit NewContractRegistered(contractAddress, msg.sender, parties);\\n    }\\n\\n    /**\\n     * @notice Adds a party member to the calling contract.\\n     * @dev msg.sender will be used to determine the contract that this party is added to.\\n     * @param party new party for the calling contract.\\n     */\\n    function addPartyToContract(address party) external override {\\n        address contractAddress = msg.sender;\\n        require(contractMap[contractAddress].valid == Validity.Valid, \\\"Can only add to valid contract\\\");\\n\\n        _addPartyToContract(party, contractAddress);\\n    }\\n\\n    /**\\n     * @notice Removes a party member from the calling contract.\\n     * @dev msg.sender will be used to determine the contract that this party is removed from.\\n     * @param partyAddress address to be removed from the calling contract.\\n     */\\n    function removePartyFromContract(address partyAddress) external override {\\n        address contractAddress = msg.sender;\\n        Party storage party = partyMap[partyAddress];\\n        uint256 numberOfContracts = party.contracts.length;\\n\\n        require(numberOfContracts != 0, \\\"Party has no contracts\\\");\\n        require(contractMap[contractAddress].valid == Validity.Valid, \\\"Remove only from valid contract\\\");\\n        require(isPartyMemberOfContract(partyAddress, contractAddress), \\\"Can only remove existing party\\\");\\n\\n        // Index of the current location of the contract to remove.\\n        uint256 deleteIndex = party.contractIndex[contractAddress];\\n\\n        // Store the last contract's address to update the lookup map.\\n        address lastContractAddress = party.contracts[numberOfContracts - 1];\\n\\n        // Swap the contract to be removed with the last contract.\\n        party.contracts[deleteIndex] = lastContractAddress;\\n\\n        // Update the lookup index with the new location.\\n        party.contractIndex[lastContractAddress] = deleteIndex;\\n\\n        // Pop the last contract from the array and update the lookup map.\\n        party.contracts.pop();\\n        delete party.contractIndex[contractAddress];\\n\\n        emit PartyRemoved(contractAddress, partyAddress);\\n    }\\n\\n    /****************************************\\n     *         REGISTRY STATE GETTERS       *\\n     ****************************************/\\n\\n    /**\\n     * @notice Returns whether the contract has been registered with the registry.\\n     * @dev If it is registered, it is an authorized participant in the UMA system.\\n     * @param contractAddress address of the financial contract.\\n     * @return bool indicates whether the contract is registered.\\n     */\\n    function isContractRegistered(address contractAddress) external view override returns (bool) {\\n        return contractMap[contractAddress].valid == Validity.Valid;\\n    }\\n\\n    /**\\n     * @notice Returns a list of all contracts that are associated with a particular party.\\n     * @param party address of the party.\\n     * @return an array of the contracts the party is registered to.\\n     */\\n    function getRegisteredContracts(address party) external view override returns (address[] memory) {\\n        return partyMap[party].contracts;\\n    }\\n\\n    /**\\n     * @notice Returns all registered contracts.\\n     * @return all registered contract addresses within the system.\\n     */\\n    function getAllRegisteredContracts() external view override returns (address[] memory) {\\n        return registeredContracts;\\n    }\\n\\n    /**\\n     * @notice checks if an address is a party of a contract.\\n     * @param party party to check.\\n     * @param contractAddress address to check against the party.\\n     * @return bool indicating if the address is a party of the contract.\\n     */\\n    function isPartyMemberOfContract(address party, address contractAddress) public view override returns (bool) {\\n        uint256 index = partyMap[party].contractIndex[contractAddress];\\n        return partyMap[party].contracts.length > index && partyMap[party].contracts[index] == contractAddress;\\n    }\\n\\n    /****************************************\\n     *           INTERNAL FUNCTIONS         *\\n     ****************************************/\\n\\n    function _addPartyToContract(address party, address contractAddress) internal {\\n        require(!isPartyMemberOfContract(party, contractAddress), \\\"Can only register a party once\\\");\\n        uint256 contractIndex = partyMap[party].contracts.length;\\n        partyMap[party].contracts.push(contractAddress);\\n        partyMap[party].contractIndex[contractAddress] = contractIndex;\\n\\n        emit PartyAdded(contractAddress, party);\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@jarvis-network/uma-core/contracts/common/implementation/MultiRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\n\\nlibrary Exclusive {\\n    struct RoleMembership {\\n        address member;\\n    }\\n\\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\\n        return roleMembership.member == memberToCheck;\\n    }\\n\\n    function resetMember(RoleMembership storage roleMembership, address newMember) internal {\\n        require(newMember != address(0x0), \\\"Cannot set an exclusive role to 0x0\\\");\\n        roleMembership.member = newMember;\\n    }\\n\\n    function getMember(RoleMembership storage roleMembership) internal view returns (address) {\\n        return roleMembership.member;\\n    }\\n\\n    function init(RoleMembership storage roleMembership, address initialMember) internal {\\n        resetMember(roleMembership, initialMember);\\n    }\\n}\\n\\nlibrary Shared {\\n    struct RoleMembership {\\n        mapping(address => bool) members;\\n    }\\n\\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\\n        return roleMembership.members[memberToCheck];\\n    }\\n\\n    function addMember(RoleMembership storage roleMembership, address memberToAdd) internal {\\n        require(memberToAdd != address(0x0), \\\"Cannot add 0x0 to a shared role\\\");\\n        roleMembership.members[memberToAdd] = true;\\n    }\\n\\n    function removeMember(RoleMembership storage roleMembership, address memberToRemove) internal {\\n        roleMembership.members[memberToRemove] = false;\\n    }\\n\\n    function init(RoleMembership storage roleMembership, address[] memory initialMembers) internal {\\n        for (uint256 i = 0; i < initialMembers.length; i++) {\\n            addMember(roleMembership, initialMembers[i]);\\n        }\\n    }\\n}\\n\\n/**\\n * @title Base class to manage permissions for the derived class.\\n */\\nabstract contract MultiRole {\\n    using Exclusive for Exclusive.RoleMembership;\\n    using Shared for Shared.RoleMembership;\\n\\n    enum RoleType { Invalid, Exclusive, Shared }\\n\\n    struct Role {\\n        uint256 managingRole;\\n        RoleType roleType;\\n        Exclusive.RoleMembership exclusiveRoleMembership;\\n        Shared.RoleMembership sharedRoleMembership;\\n    }\\n\\n    mapping(uint256 => Role) private roles;\\n\\n    event ResetExclusiveMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\\n    event AddedSharedMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\\n    event RemovedSharedMember(uint256 indexed roleId, address indexed oldMember, address indexed manager);\\n\\n    /**\\n     * @notice Reverts unless the caller is a member of the specified roleId.\\n     */\\n    modifier onlyRoleHolder(uint256 roleId) {\\n        require(holdsRole(roleId, msg.sender), \\\"Sender does not hold required role\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts unless the caller is a member of the manager role for the specified roleId.\\n     */\\n    modifier onlyRoleManager(uint256 roleId) {\\n        require(holdsRole(roles[roleId].managingRole, msg.sender), \\\"Can only be called by a role manager\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts unless the roleId represents an initialized, exclusive roleId.\\n     */\\n    modifier onlyExclusive(uint256 roleId) {\\n        require(roles[roleId].roleType == RoleType.Exclusive, \\\"Must be called on an initialized Exclusive role\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts unless the roleId represents an initialized, shared roleId.\\n     */\\n    modifier onlyShared(uint256 roleId) {\\n        require(roles[roleId].roleType == RoleType.Shared, \\\"Must be called on an initialized Shared role\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Whether `memberToCheck` is a member of roleId.\\n     * @dev Reverts if roleId does not correspond to an initialized role.\\n     * @param roleId the Role to check.\\n     * @param memberToCheck the address to check.\\n     * @return True if `memberToCheck` is a member of `roleId`.\\n     */\\n    function holdsRole(uint256 roleId, address memberToCheck) public view returns (bool) {\\n        Role storage role = roles[roleId];\\n        if (role.roleType == RoleType.Exclusive) {\\n            return role.exclusiveRoleMembership.isMember(memberToCheck);\\n        } else if (role.roleType == RoleType.Shared) {\\n            return role.sharedRoleMembership.isMember(memberToCheck);\\n        }\\n        revert(\\\"Invalid roleId\\\");\\n    }\\n\\n    /**\\n     * @notice Changes the exclusive role holder of `roleId` to `newMember`.\\n     * @dev Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an\\n     * initialized, ExclusiveRole.\\n     * @param roleId the ExclusiveRole membership to modify.\\n     * @param newMember the new ExclusiveRole member.\\n     */\\n    function resetMember(uint256 roleId, address newMember) public onlyExclusive(roleId) onlyRoleManager(roleId) {\\n        roles[roleId].exclusiveRoleMembership.resetMember(newMember);\\n        emit ResetExclusiveMember(roleId, newMember, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Gets the current holder of the exclusive role, `roleId`.\\n     * @dev Reverts if `roleId` does not represent an initialized, exclusive role.\\n     * @param roleId the ExclusiveRole membership to check.\\n     * @return the address of the current ExclusiveRole member.\\n     */\\n    function getMember(uint256 roleId) public view onlyExclusive(roleId) returns (address) {\\n        return roles[roleId].exclusiveRoleMembership.getMember();\\n    }\\n\\n    /**\\n     * @notice Adds `newMember` to the shared role, `roleId`.\\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\\n     * managing role for `roleId`.\\n     * @param roleId the SharedRole membership to modify.\\n     * @param newMember the new SharedRole member.\\n     */\\n    function addMember(uint256 roleId, address newMember) public onlyShared(roleId) onlyRoleManager(roleId) {\\n        roles[roleId].sharedRoleMembership.addMember(newMember);\\n        emit AddedSharedMember(roleId, newMember, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Removes `memberToRemove` from the shared role, `roleId`.\\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\\n     * managing role for `roleId`.\\n     * @param roleId the SharedRole membership to modify.\\n     * @param memberToRemove the current SharedRole member to remove.\\n     */\\n    function removeMember(uint256 roleId, address memberToRemove) public onlyShared(roleId) onlyRoleManager(roleId) {\\n        roles[roleId].sharedRoleMembership.removeMember(memberToRemove);\\n        emit RemovedSharedMember(roleId, memberToRemove, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Removes caller from the role, `roleId`.\\n     * @dev Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an\\n     * initialized, SharedRole.\\n     * @param roleId the SharedRole membership to modify.\\n     */\\n    function renounceMembership(uint256 roleId) public onlyShared(roleId) onlyRoleHolder(roleId) {\\n        roles[roleId].sharedRoleMembership.removeMember(msg.sender);\\n        emit RemovedSharedMember(roleId, msg.sender, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Reverts if `roleId` is not initialized.\\n     */\\n    modifier onlyValidRole(uint256 roleId) {\\n        require(roles[roleId].roleType != RoleType.Invalid, \\\"Attempted to use an invalid roleId\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if `roleId` is initialized.\\n     */\\n    modifier onlyInvalidRole(uint256 roleId) {\\n        require(roles[roleId].roleType == RoleType.Invalid, \\\"Cannot use a pre-existing role\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Internal method to initialize a shared role, `roleId`, which will be managed by `managingRoleId`.\\n     * `initialMembers` will be immediately added to the role.\\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\\n     * initialized.\\n     */\\n    function _createSharedRole(\\n        uint256 roleId,\\n        uint256 managingRoleId,\\n        address[] memory initialMembers\\n    ) internal onlyInvalidRole(roleId) {\\n        Role storage role = roles[roleId];\\n        role.roleType = RoleType.Shared;\\n        role.managingRole = managingRoleId;\\n        role.sharedRoleMembership.init(initialMembers);\\n        require(\\n            roles[managingRoleId].roleType != RoleType.Invalid,\\n            \\\"Attempted to use an invalid role to manage a shared role\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Internal method to initialize an exclusive role, `roleId`, which will be managed by `managingRoleId`.\\n     * `initialMember` will be immediately added to the role.\\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\\n     * initialized.\\n     */\\n    function _createExclusiveRole(\\n        uint256 roleId,\\n        uint256 managingRoleId,\\n        address initialMember\\n    ) internal onlyInvalidRole(roleId) {\\n        Role storage role = roles[roleId];\\n        role.roleType = RoleType.Exclusive;\\n        role.managingRole = managingRoleId;\\n        role.exclusiveRoleMembership.init(initialMember);\\n        require(\\n            roles[managingRoleId].roleType != RoleType.Invalid,\\n            \\\"Attempted to use an invalid role to manage an exclusive role\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@jarvis-network/uma-core/contracts/oracle/interfaces/RegistryInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\n\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title Interface for a registry of contracts and contract creators.\\n */\\ninterface RegistryInterface {\\n    /**\\n     * @notice Registers a new contract.\\n     * @dev Only authorized contract creators can call this method.\\n     * @param parties an array of addresses who become parties in the contract.\\n     * @param contractAddress defines the address of the deployed contract.\\n     */\\n    function registerContract(address[] calldata parties, address contractAddress) external;\\n\\n    /**\\n     * @notice Returns whether the contract has been registered with the registry.\\n     * @dev If it is registered, it is an authorized participant in the UMA system.\\n     * @param contractAddress address of the contract.\\n     * @return bool indicates whether the contract is registered.\\n     */\\n    function isContractRegistered(address contractAddress) external view returns (bool);\\n\\n    /**\\n     * @notice Returns a list of all contracts that are associated with a particular party.\\n     * @param party address of the party.\\n     * @return an array of the contracts the party is registered to.\\n     */\\n    function getRegisteredContracts(address party) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns all registered contracts.\\n     * @return all registered contract addresses within the system.\\n     */\\n    function getAllRegisteredContracts() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Adds a party to the calling contract.\\n     * @dev msg.sender must be the contract to which the party member is added.\\n     * @param party address to be added to the contract.\\n     */\\n    function addPartyToContract(address party) external;\\n\\n    /**\\n     * @notice Removes a party member to the calling contract.\\n     * @dev msg.sender must be the contract to which the party member is added.\\n     * @param party address to be removed from the contract.\\n     */\\n    function removePartyFromContract(address party) external;\\n\\n    /**\\n     * @notice checks if an address is a party in a contract.\\n     * @param party party to check.\\n     * @param contractAddress address to check against the party.\\n     * @return bool indicating if the address is a party of the contract.\\n     */\\n    function isPartyMemberOfContract(address party, address contractAddress) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/derivative/common/MintableBurnableSyntheticToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\nimport {MintableBurnableERC20} from './MintableBurnableERC20.sol';\\nimport {\\n  Lockable\\n} from '../../../@jarvis-network/uma-core/contracts/common/implementation/Lockable.sol';\\n\\n/**\\n * @title Synthetic token contract\\n * Inherits from MintableBurnableERC20\\n */\\ncontract MintableBurnableSyntheticToken is MintableBurnableERC20, Lockable {\\n  constructor(\\n    string memory tokenName,\\n    string memory tokenSymbol,\\n    uint8 tokenDecimals\\n  )\\n    public\\n    MintableBurnableERC20(tokenName, tokenSymbol, tokenDecimals)\\n    nonReentrant()\\n  {}\\n\\n  /**\\n   * @notice Add minter role to account\\n   * @dev The caller must have the admin role\\n   * @param account The address on which minter role is added\\n   */\\n  function addMinter(address account) public override nonReentrant() {\\n    super.addMinter(account);\\n  }\\n\\n  /**\\n   * @notice Add burner role to account\\n   * @dev The caller must have the admin role\\n   * @param account The address to which burner role is added\\n   */\\n  function addBurner(address account) public override nonReentrant() {\\n    super.addBurner(account);\\n  }\\n\\n  /**\\n   * @notice Add admin role to account.\\n   * @dev The caller must have the admin role.\\n   * @param account The address to which the admin role is added.\\n   */\\n  function addAdmin(address account) public override nonReentrant() {\\n    super.addAdmin(account);\\n  }\\n\\n  /**\\n   * @notice Add admin, minter and burner roles to account.\\n   * @dev The caller must have the admin role.\\n   * @param account The address to which the admin, minter and burner roles are added.\\n   */\\n  function addAdminAndMinterAndBurner(address account)\\n    public\\n    override\\n    nonReentrant()\\n  {\\n    super.addAdminAndMinterAndBurner(account);\\n  }\\n\\n  /**\\n   * @notice Minter renounce to minter role\\n   */\\n  function renounceMinter() public override nonReentrant() {\\n    super.renounceMinter();\\n  }\\n\\n  /**\\n   * @notice Burner renounce to burner role\\n   */\\n  function renounceBurner() public override nonReentrant() {\\n    super.renounceBurner();\\n  }\\n\\n  /**\\n   * @notice Admin renounce to admin role\\n   */\\n  function renounceAdmin() public override nonReentrant() {\\n    super.renounceAdmin();\\n  }\\n\\n  /**\\n   * @notice Admin, minter and murner renounce to admin, minter and burner roles\\n   */\\n  function renounceAdminAndMinterAndBurner() public override nonReentrant() {\\n    super.renounceAdminAndMinterAndBurner();\\n  }\\n\\n  /**\\n   * @notice Checks if a given account holds the minter role.\\n   * @param account The address which is checked for the minter role.\\n   * @return bool True if the provided account is a minter.\\n   */\\n  function isMinter(address account)\\n    public\\n    view\\n    nonReentrantView()\\n    returns (bool)\\n  {\\n    return hasRole(MINTER_ROLE, account);\\n  }\\n\\n  /**\\n   * @notice Checks if a given account holds the burner role.\\n   * @param account The address which is checked for the burner role.\\n   * @return bool True if the provided account is a burner.\\n   */\\n  function isBurner(address account)\\n    public\\n    view\\n    nonReentrantView()\\n    returns (bool)\\n  {\\n    return hasRole(BURNER_ROLE, account);\\n  }\\n\\n  /**\\n   * @notice Checks if a given account holds the admin role.\\n   * @param account The address which is checked for the admin role.\\n   * @return bool True if the provided account is an admin.\\n   */\\n  function isAdmin(address account)\\n    public\\n    view\\n    nonReentrantView()\\n    returns (bool)\\n  {\\n    return hasRole(DEFAULT_ADMIN_ROLE, account);\\n  }\\n\\n  /**\\n   * @notice Accessor method for the list of member with admin role\\n   * @return array of address with admin role\\n   */\\n  function getAdminMembers() external view returns (address[] memory) {\\n    uint256 numberOfMembers = getRoleMemberCount(DEFAULT_ADMIN_ROLE);\\n    address[] memory members = new address[](numberOfMembers);\\n    for (uint256 j = 0; j < numberOfMembers; j++) {\\n      address newMember = getRoleMember(DEFAULT_ADMIN_ROLE, j);\\n      members[j] = newMember;\\n    }\\n    return members;\\n  }\\n\\n  /**\\n   * @notice Accessor method for the list of member with minter role\\n   * @return array of address with minter role\\n   */\\n  function getMinterMembers() external view returns (address[] memory) {\\n    uint256 numberOfMembers = getRoleMemberCount(MINTER_ROLE);\\n    address[] memory members = new address[](numberOfMembers);\\n    for (uint256 j = 0; j < numberOfMembers; j++) {\\n      address newMember = getRoleMember(MINTER_ROLE, j);\\n      members[j] = newMember;\\n    }\\n    return members;\\n  }\\n\\n  /**\\n   * @notice Accessor method for the list of member with burner role\\n   * @return array of address with burner role\\n   */\\n  function getBurnerMembers() external view returns (address[] memory) {\\n    uint256 numberOfMembers = getRoleMemberCount(BURNER_ROLE);\\n    address[] memory members = new address[](numberOfMembers);\\n    for (uint256 j = 0; j < numberOfMembers; j++) {\\n      address newMember = getRoleMember(BURNER_ROLE, j);\\n      members[j] = newMember;\\n    }\\n    return members;\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/derivative/common/MintableBurnableERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\n\\nimport {ERC20} from '../../../@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport {AccessControl} from '../../../@openzeppelin/contracts/access/AccessControl.sol';\\nimport {MintableBurnableIERC20} from './interfaces/MintableBurnableIERC20.sol';\\n\\n/**\\n * @title ERC20 token contract\\n */\\ncontract MintableBurnableERC20 is ERC20, MintableBurnableIERC20, AccessControl {\\n  bytes32 public constant MINTER_ROLE = keccak256('Minter');\\n\\n  bytes32 public constant BURNER_ROLE = keccak256('Burner');\\n\\n  //----------------------------------------\\n  // Modifiers\\n  //----------------------------------------\\n\\n  modifier onlyMinter() {\\n    require(hasRole(MINTER_ROLE, msg.sender), 'Sender must be the minter');\\n    _;\\n  }\\n\\n  modifier onlyBurner() {\\n    require(hasRole(BURNER_ROLE, msg.sender), 'Sender must be the burner');\\n    _;\\n  }\\n\\n  //----------------------------------------\\n  // Constructors\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Constructs the ERC20 token contract\\n   * @param _tokenName Name of the token\\n   * @param _tokenSymbol Token symbol\\n   * @param _tokenDecimals Number of decimals for token\\n   */\\n  constructor(\\n    string memory _tokenName,\\n    string memory _tokenSymbol,\\n    uint8 _tokenDecimals\\n  ) public ERC20(_tokenName, _tokenSymbol) {\\n    _setupDecimals(_tokenDecimals);\\n    _setRoleAdmin(DEFAULT_ADMIN_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setRoleAdmin(MINTER_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setRoleAdmin(BURNER_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n  }\\n\\n  //----------------------------------------\\n  // External functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Mint new ERC20 tokens\\n   * @param recipient Recipient of the minted tokens\\n   * @param value Amount of tokens to be minted\\n   */\\n  function mint(address recipient, uint256 value)\\n    external\\n    override\\n    onlyMinter()\\n    returns (bool)\\n  {\\n    _mint(recipient, value);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Burn ERC20 tokens\\n   * @param value Amount of ERC20 tokens to be burned\\n   */\\n  function burn(uint256 value) external override onlyBurner() {\\n    _burn(msg.sender, value);\\n  }\\n\\n  /**\\n   * @notice Assign a new minting role\\n   * @param account Address of the new minter\\n   */\\n  function addMinter(address account) public virtual override {\\n    grantRole(MINTER_ROLE, account);\\n  }\\n\\n  /**\\n   * @notice Assign a new burning role\\n   * @param account Address of the new burner\\n   */\\n  function addBurner(address account) public virtual override {\\n    grantRole(BURNER_ROLE, account);\\n  }\\n\\n  /**\\n   * @notice Assign new admin role\\n   * @param account Address of the new admin\\n   */\\n  function addAdmin(address account) public virtual override {\\n    grantRole(DEFAULT_ADMIN_ROLE, account);\\n  }\\n\\n  /**\\n   * @notice Assign admin, minting and burning priviliges to an address\\n   * @param account Address to which roles are assigned\\n   */\\n  function addAdminAndMinterAndBurner(address account) public virtual override {\\n    grantRole(DEFAULT_ADMIN_ROLE, account);\\n    grantRole(MINTER_ROLE, account);\\n    grantRole(BURNER_ROLE, account);\\n  }\\n\\n  /**\\n   * @notice Self renounce the address calling the function from minter role\\n   */\\n  function renounceMinter() public virtual override {\\n    renounceRole(MINTER_ROLE, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Self renounce the address calling the function from burner role\\n   */\\n  function renounceBurner() public virtual override {\\n    renounceRole(BURNER_ROLE, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Self renounce the address calling the function from admin role\\n   */\\n  function renounceAdmin() public virtual override {\\n    renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Self renounce the address calling the function from admin, minter and burner role\\n   */\\n  function renounceAdminAndMinterAndBurner() public virtual override {\\n    renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    renounceRole(MINTER_ROLE, msg.sender);\\n    renounceRole(BURNER_ROLE, msg.sender);\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/Finder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ISynthereumFinder} from './interfaces/IFinder.sol';\\nimport {AccessControl} from '../../@openzeppelin/contracts/access/AccessControl.sol';\\n\\n/**\\n * @title Provides addresses of contracts implementing certain interfaces.\\n */\\ncontract SynthereumFinder is ISynthereumFinder, AccessControl {\\n  bytes32 public constant MAINTAINER_ROLE = keccak256('Maintainer');\\n\\n  //Describe role structure\\n  struct Roles {\\n    address admin;\\n    address maintainer;\\n  }\\n\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  mapping(bytes32 => address) public interfacesImplemented;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n\\n  event InterfaceImplementationChanged(\\n    bytes32 indexed interfaceName,\\n    address indexed newImplementationAddress\\n  );\\n\\n  //----------------------------------------\\n  // Modifiers\\n  //----------------------------------------\\n\\n  modifier onlyMaintainer() {\\n    require(\\n      hasRole(MAINTAINER_ROLE, msg.sender),\\n      'Sender must be the maintainer'\\n    );\\n    _;\\n  }\\n\\n  //----------------------------------------\\n  // Constructors\\n  //----------------------------------------\\n\\n  constructor(Roles memory _roles) public {\\n    _setRoleAdmin(DEFAULT_ADMIN_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setRoleAdmin(MAINTAINER_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setupRole(DEFAULT_ADMIN_ROLE, _roles.admin);\\n    _setupRole(MAINTAINER_ROLE, _roles.maintainer);\\n  }\\n\\n  //----------------------------------------\\n  // External view\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Updates the address of the contract that implements `interfaceName`.\\n   * @param interfaceName bytes32 of the interface name that is either changed or registered.\\n   * @param implementationAddress address of the implementation contract.\\n   */\\n  function changeImplementationAddress(\\n    bytes32 interfaceName,\\n    address implementationAddress\\n  ) external override onlyMaintainer {\\n    interfacesImplemented[interfaceName] = implementationAddress;\\n\\n    emit InterfaceImplementationChanged(interfaceName, implementationAddress);\\n  }\\n\\n  /**\\n   * @notice Gets the address of the contract that implements the given `interfaceName`.\\n   * @param interfaceName queried interface.\\n   * @return implementationAddress Address of the defined interface.\\n   */\\n  function getImplementationAddress(bytes32 interfaceName)\\n    external\\n    view\\n    override\\n    returns (address)\\n  {\\n    address implementationAddress = interfacesImplemented[interfaceName];\\n    require(implementationAddress != address(0x0), 'Implementation not found');\\n    return implementationAddress;\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/derivative/v2/DerivativeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\nimport {\\n  IDeploymentSignature\\n} from '../../core/interfaces/IDeploymentSignature.sol';\\nimport {ISynthereumFinder} from '../../core/interfaces/IFinder.sol';\\nimport {SynthereumInterfaces} from '../../core/Constants.sol';\\nimport {PerpetualPoolPartyCreator} from './PerpetutalPoolPartyCreator.sol';\\n\\n/** @title Contract factory of derivatives\\n */\\ncontract SynthereumDerivativeFactory is\\n  PerpetualPoolPartyCreator,\\n  IDeploymentSignature\\n{\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  bytes4 public override deploymentSignature;\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Constructs the SynthereumDerivativeFactory contract\\n   * @param _umaFinder UMA protocol Finder used to discover other protocol contracts.\\n   * @param _synthereumFinder Synthereum Finder address used to discover other contracts\\n   * @param _timerAddress Contract that stores the current time in a testing environment.\\n   */\\n  constructor(\\n    address _umaFinder,\\n    address _synthereumFinder,\\n    address _timerAddress\\n  )\\n    public\\n    PerpetualPoolPartyCreator(_umaFinder, _synthereumFinder, _timerAddress)\\n  {\\n    deploymentSignature = this.createPerpetual.selector;\\n  }\\n\\n  /**\\n   * @notice Check if the sender is the deployer and deploy a perpetual derivative\\n   * @param params input parameters of perpetual derivative\\n   * @return derivative address of the derivative created\\n   */\\n  function createPerpetual(Params memory params)\\n    public\\n    override\\n    returns (address derivative)\\n  {\\n    address deployer =\\n      ISynthereumFinder(synthereumFinder).getImplementationAddress(\\n        SynthereumInterfaces.Deployer\\n      );\\n    require(msg.sender == deployer, 'Sender must be Synthereum deployer');\\n    derivative = super.createPerpetual(params);\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/interfaces/IDeploymentSignature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Provides signature of function for deployment\\n */\\ninterface IDeploymentSignature {\\n  /**\\n   * @notice Returns the bytes4 signature of the function used for the deployment of a contract in a factory\\n   * @return signature returns signature of the deployment function\\n   */\\n  function deploymentSignature() external view returns (bytes4 signature);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/FactoryVersioning.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {\\n  ISynthereumFactoryVersioning\\n} from './interfaces/IFactoryVersioning.sol';\\nimport {EnumerableMap} from '../../@openzeppelin/contracts/utils/EnumerableMap.sol';\\nimport {AccessControl} from '../../@openzeppelin/contracts/access/AccessControl.sol';\\n\\n/**\\n * @title Provides addresses of different versions of pools factory and derivative factory\\n */\\ncontract SynthereumFactoryVersioning is\\n  ISynthereumFactoryVersioning,\\n  AccessControl\\n{\\n  using EnumerableMap for EnumerableMap.UintToAddressMap;\\n\\n  bytes32 public constant MAINTAINER_ROLE = keccak256('Maintainer');\\n\\n  //Describe role structure\\n  struct Roles {\\n    address admin;\\n    address maintainer;\\n  }\\n\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  mapping(bytes32 => EnumerableMap.UintToAddressMap) private factories;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n\\n  event AddFactory(\\n    bytes32 indexed factoryType,\\n    uint8 indexed version,\\n    address indexed factory\\n  );\\n\\n  event SetFactory(\\n    bytes32 indexed factoryType,\\n    uint8 indexed version,\\n    address indexed factory\\n  );\\n\\n  event RemoveFactory(\\n    bytes32 indexed factoryType,\\n    uint8 indexed version,\\n    address indexed factory\\n  );\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n  constructor(Roles memory _roles) public {\\n    _setRoleAdmin(DEFAULT_ADMIN_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setRoleAdmin(MAINTAINER_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setupRole(DEFAULT_ADMIN_ROLE, _roles.admin);\\n    _setupRole(MAINTAINER_ROLE, _roles.maintainer);\\n  }\\n\\n  //----------------------------------------\\n  // Modifiers\\n  //----------------------------------------\\n\\n  modifier onlyMaintainer() {\\n    require(\\n      hasRole(MAINTAINER_ROLE, msg.sender),\\n      'Sender must be the maintainer'\\n    );\\n    _;\\n  }\\n\\n  //----------------------------------------\\n  // External functions\\n  //----------------------------------------\\n\\n  /** @notice Sets a Factory\\n   * @param factoryType Type of factory\\n   * @param version Version of the factory to be set\\n   * @param factory The pool factory address to be set\\n   */\\n  function setFactory(\\n    bytes32 factoryType,\\n    uint8 version,\\n    address factory\\n  ) external override onlyMaintainer {\\n    require(factory != address(0), 'Factory cannot be address 0');\\n    bool isNewVersion = factories[factoryType].set(version, factory);\\n    if (isNewVersion == true) {\\n      emit AddFactory(factoryType, version, factory);\\n    } else {\\n      emit SetFactory(factoryType, version, factory);\\n    }\\n  }\\n\\n  /** @notice Removes a factory\\n   * @param factoryType The type of factory to be removed\\n   * @param version Version of the factory to be removed\\n   */\\n  function removeFactory(bytes32 factoryType, uint8 version)\\n    external\\n    override\\n    onlyMaintainer\\n  {\\n    EnumerableMap.UintToAddressMap storage selectedFactories =\\n      factories[factoryType];\\n    address factoryToRemove = selectedFactories.get(version);\\n    selectedFactories.remove(version);\\n    RemoveFactory(factoryType, version, factoryToRemove);\\n  }\\n\\n  //----------------------------------------\\n  // External view functions\\n  //----------------------------------------\\n\\n  /** @notice Gets a factory contract address\\n   * @param factoryType The type of factory to be checked\\n   * @param version Version of the factory to be checked\\n   * @return factory Address of the factory contract\\n   */\\n  function getFactoryVersion(bytes32 factoryType, uint8 version)\\n    external\\n    view\\n    override\\n    returns (address factory)\\n  {\\n    factory = factories[factoryType].get(version);\\n  }\\n\\n  /** @notice Gets the number of factory versions for a specific type\\n   * @param factoryType The type of factory to be checked\\n   * @return numberOfVersions Total number of versions for a specific factory\\n   */\\n  function numberOfVerisonsOfFactory(bytes32 factoryType)\\n    external\\n    view\\n    override\\n    returns (uint256 numberOfVersions)\\n  {\\n    numberOfVersions = factories[factoryType].length();\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/interfaces/IFactoryVersioning.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Provides addresses of different versions of pools factory and derivative factory\\n */\\ninterface ISynthereumFactoryVersioning {\\n  /** @notice Sets a Factory\\n   * @param factoryType Type of factory\\n   * @param version Version of the factory to be set\\n   * @param factory The pool factory address to be set\\n   */\\n  function setFactory(\\n    bytes32 factoryType,\\n    uint8 version,\\n    address factory\\n  ) external;\\n\\n  /** @notice Removes a factory\\n   * @param factoryType The type of factory to be removed\\n   * @param version Version of the factory to be removed\\n   */\\n  function removeFactory(bytes32 factoryType, uint8 version) external;\\n\\n  /** @notice Gets a factory contract address\\n   * @param factoryType The type of factory to be checked\\n   * @param version Version of the factory to be checked\\n   * @return factory Address of the factory contract\\n   */\\n  function getFactoryVersion(bytes32 factoryType, uint8 version)\\n    external\\n    view\\n    returns (address factory);\\n\\n  /** @notice Gets the number of factory versions for a specific type\\n   * @param factoryType The type of factory to be checked\\n   * @return numberOfVersions Total number of versions for a specific factory\\n   */\\n  function numberOfVerisonsOfFactory(bytes32 factoryType)\\n    external\\n    view\\n    returns (uint256 numberOfVersions);\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/EnumerableMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        return _get(map, key, \\\"EnumerableMap: nonexistent key\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint256(_get(map._inner, bytes32(key))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint256(_get(map._inner, bytes32(key), errorMessage)));\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@jarvis-network/uma-core/contracts/oracle/implementation/IdentifierWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\n\\nimport \\\"../interfaces/IdentifierWhitelistInterface.sol\\\";\\nimport \\\"../../../../../@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title Stores a whitelist of supported identifiers that the oracle can provide prices for.\\n */\\ncontract IdentifierWhitelist is IdentifierWhitelistInterface, Ownable {\\n    /****************************************\\n     *     INTERNAL VARIABLES AND STORAGE   *\\n     ****************************************/\\n\\n    mapping(bytes32 => bool) private supportedIdentifiers;\\n\\n    /****************************************\\n     *                EVENTS                *\\n     ****************************************/\\n\\n    event SupportedIdentifierAdded(bytes32 indexed identifier);\\n    event SupportedIdentifierRemoved(bytes32 indexed identifier);\\n\\n    /****************************************\\n     *    ADMIN STATE MODIFYING FUNCTIONS   *\\n     ****************************************/\\n\\n    /**\\n     * @notice Adds the provided identifier as a supported identifier.\\n     * @dev Price requests using this identifier will succeed after this call.\\n     * @param identifier unique UTF-8 representation for the feed being added. Eg: BTC/USD.\\n     */\\n    function addSupportedIdentifier(bytes32 identifier) external override onlyOwner {\\n        if (!supportedIdentifiers[identifier]) {\\n            supportedIdentifiers[identifier] = true;\\n            emit SupportedIdentifierAdded(identifier);\\n        }\\n    }\\n\\n    /**\\n     * @notice Removes the identifier from the whitelist.\\n     * @dev Price requests using this identifier will no longer succeed after this call.\\n     * @param identifier unique UTF-8 representation for the feed being removed. Eg: BTC/USD.\\n     */\\n    function removeSupportedIdentifier(bytes32 identifier) external override onlyOwner {\\n        if (supportedIdentifiers[identifier]) {\\n            supportedIdentifiers[identifier] = false;\\n            emit SupportedIdentifierRemoved(identifier);\\n        }\\n    }\\n\\n    /****************************************\\n     *     WHITELIST GETTERS FUNCTIONS      *\\n     ****************************************/\\n\\n    /**\\n     * @notice Checks whether an identifier is on the whitelist.\\n     * @param identifier unique UTF-8 representation for the feed being queried. Eg: BTC/USD.\\n     * @return bool if the identifier is supported (or not).\\n     */\\n    function isIdentifierSupported(bytes32 identifier) external view override returns (bool) {\\n        return supportedIdentifiers[identifier];\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@jarvis-network/uma-core/contracts/oracle/implementation/Finder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../../../../@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/FinderInterface.sol\\\";\\n\\n/**\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\n * @dev Examples of interfaces with implementations that Finder locates are the Oracle and Store interfaces.\\n */\\ncontract Finder is FinderInterface, Ownable {\\n    mapping(bytes32 => address) public interfacesImplemented;\\n\\n    event InterfaceImplementationChanged(bytes32 indexed interfaceName, address indexed newImplementationAddress);\\n\\n    /**\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\n     * @param interfaceName bytes32 of the interface name that is either changed or registered.\\n     * @param implementationAddress address of the implementation contract.\\n     */\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        interfacesImplemented[interfaceName] = implementationAddress;\\n\\n        emit InterfaceImplementationChanged(interfaceName, implementationAddress);\\n    }\\n\\n    /**\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\n     * @param interfaceName queried interface.\\n     * @return implementationAddress address of the defined interface.\\n     */\\n    function getImplementationAddress(bytes32 interfaceName) external view override returns (address) {\\n        address implementationAddress = interfacesImplemented[interfaceName];\\n        require(implementationAddress != address(0x0), \\\"Implementation not found\\\");\\n        return implementationAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@jarvis-network/uma-core/contracts/common/implementation/TestnetERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../../../../@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @title An implementation of ERC20 with the same interface as the Compound project's testnet tokens (mainly DAI)\\n * @dev This contract can be deployed or the interface can be used to communicate with Compound's ERC20 tokens.  Note:\\n * this token should never be used to store real value since it allows permissionless minting.\\n */\\ncontract TestnetERC20 is ERC20 {\\n    /**\\n     * @notice Constructs the TestnetERC20.\\n     * @param _name The name which describes the new token.\\n     * @param _symbol The ticker abbreviation of the name. Ideally < 5 chars.\\n     * @param _decimals The number of decimals to define token precision.\\n     */\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) public ERC20(_name, _symbol) {\\n        _setupDecimals(_decimals);\\n    }\\n\\n    // Sample token information.\\n\\n    /**\\n     * @notice Mints value tokens to the owner address.\\n     * @param ownerAddress the address to mint to.\\n     * @param value the amount of tokens to mint.\\n     */\\n    function allocateTo(address ownerAddress, uint256 value) external {\\n        _mint(ownerAddress, value);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"deploy/contracts/derivative/common/FeePayerPartyLib.sol\": {\r\n        \"FeePayerPartyLib\": \"0x97d884d049cd705d681ae83b5cba3efaad0d2c32\"\r\n      },\r\n      \"deploy/contracts/derivative/v2/PerpetualLiquidatablePoolPartyLib.sol\": {\r\n        \"PerpetualLiquidatablePoolPartyLib\": \"0xfbf14c09079e1aac83be279b6354da710b0cfc5e\"\r\n      },\r\n      \"deploy/contracts/derivative/v2/PerpetualPositionManagerPoolPartyLib.sol\": {\r\n        \"PerpetualPositionManagerPoolPartyLib\": \"0x1418830ad554becaf76a4058eec6bee9ac002e19\"\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"withdrawalLiveness\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"finderAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"priceFeedIdentifier\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"minSponsorTokens\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"timerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"excessTokenBeneficiary\",\"type\":\"address\"},{\"internalType\":\"contract ISynthereumFinder\",\"name\":\"synthereumFinder\",\"type\":\"address\"}],\"internalType\":\"struct PerpetualPositionManagerPoolParty.PositionManagerParams\",\"name\":\"positionManagerParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"internalType\":\"struct PerpetualPositionManagerPoolParty.Roles\",\"name\":\"roles\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"liquidationLiveness\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"collateralRequirement\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"disputeBondPct\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"sponsorDisputeRewardPct\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"disputerDisputeRewardPct\",\"type\":\"tuple\"}],\"internalType\":\"struct PerpetualLiquidatablePoolParty.LiquidatableParams\",\"name\":\"liquidatableParams\",\"type\":\"tuple\"}],\"internalType\":\"struct PerpetualLiquidatablePoolParty.ConstructorParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"disputeSucceeded\",\"type\":\"bool\"}],\"name\":\"DisputeSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shutdownTimestamp\",\"type\":\"uint256\"}],\"name\":\"EmergencyShutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"EndedSponsorPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FinalFeesPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"liquidationId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensOutstanding\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidatedCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationTime\",\"type\":\"uint256\"}],\"name\":\"LiquidationCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeBondAmount\",\"type\":\"uint256\"}],\"name\":\"LiquidationDisputed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidToLiquidator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidToDisputer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidToSponsor\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum PerpetualLiquidatablePoolParty.Status\",\"name\":\"liquidationStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settlementPrice\",\"type\":\"uint256\"}],\"name\":\"LiquidationWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"NewSponsor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"PositionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"regularFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lateFee\",\"type\":\"uint256\"}],\"name\":\"RegularFeesPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"numTokensRepaid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newTokenCount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"RequestWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"RequestWithdrawalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"RequestWithdrawalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collateralReturned\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokensBurned\",\"type\":\"uint256\"}],\"name\":\"SettleEmergencyShutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralCurrency\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateral\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"collateralAmount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"numTokens\",\"type\":\"tuple\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"minCollateralPerToken\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"maxCollateralPerToken\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"maxTokensToLiquidate\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"createLiquidation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidationId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"tokensLiquidated\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"finalFeeBond\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidationId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"deleteLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"deleteSponsorPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"collateralAmount\",\"type\":\"tuple\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"collateralAmount\",\"type\":\"tuple\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidationId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"dispute\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"totalPaid\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyShutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyShutdownPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePayerData\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralCurrency\",\"type\":\"address\"},{\"internalType\":\"contract FinderInterface\",\"name\":\"finder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastPaymentTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"cumulativeFeeMultiplier\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdminMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"getCollateral\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"collateralAmount\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"getLiquidations\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"enum PerpetualLiquidatablePoolParty.Status\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"liquidationTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"tokensOutstanding\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"lockedCollateral\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"liquidatedCollateral\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"rawUnitCollateral\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"settlementPrice\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"finalFee\",\"type\":\"tuple\"}],\"internalType\":\"struct PerpetualLiquidatablePoolParty.LiquidationData[]\",\"name\":\"liquidationData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalPositionData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"totalTokensOutstanding\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"rawTotalPositionCollateral\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidatableData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"rawLiquidationCollateral\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"liquidationLiveness\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"collateralRequirement\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"disputeBondPct\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"sponsorDisputeRewardPct\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"disputerDisputeRewardPct\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"enum PerpetualLiquidatablePoolParty.Status\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"liquidationTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"tokensOutstanding\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"lockedCollateral\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"liquidatedCollateral\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"rawUnitCollateral\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"settlementPrice\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"finalFee\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"amount\",\"type\":\"tuple\"}],\"name\":\"payFinalFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payRegularFees\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"totalPaid\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pfc\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionManagerData\",\"outputs\":[{\"internalType\":\"contract ISynthereumFinder\",\"name\":\"synthereumFinder\",\"type\":\"address\"},{\"internalType\":\"contract MintableBurnableIERC20\",\"name\":\"tokenCurrency\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"priceIdentifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalLiveness\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"minSponsorTokens\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"emergencyShutdownPrice\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"emergencyShutdownTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"excessTokenBeneficiary\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"positions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"tokensOutstanding\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalRequestPassTimestamp\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"withdrawalRequestAmount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"rawCollateral\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceIdentifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"numTokens\",\"type\":\"tuple\"}],\"name\":\"redeem\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"amountWithdrawn\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"numTokens\",\"type\":\"tuple\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"collateralAmount\",\"type\":\"tuple\"}],\"name\":\"requestWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setCurrentTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settleEmergencyShutdown\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"amountWithdrawn\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"synthereumFinder\",\"outputs\":[{\"internalType\":\"contract ISynthereumFinder\",\"name\":\"finder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syntheticTokenSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCurrency\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPositionCollateral\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"totalCollateral\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensOutstanding\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"totalTokens\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"trimExcess\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"amount\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"collateralAmount\",\"type\":\"tuple\"}],\"name\":\"withdraw\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"amountWithdrawn\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidationId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"withdrawLiquidation\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"payToSponsor\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"payToLiquidator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"payToDisputer\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"paidToSponsor\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"paidToLiquidator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"paidToDisputer\",\"type\":\"tuple\"}],\"internalType\":\"struct PerpetualLiquidatablePoolParty.RewardsData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPassedRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"amountWithdrawn\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PerpetualPoolParty","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000015180000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000f17bc9a994b87b5225cfb6a2cd4d667adb4f20b00000000000000000000000040f941e48a552bf496b154af6bf55725f18d77c34555525553440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008ef00583baa186094d9a34a0a4750c1d1bb86831000000000000000000000000d451de78e297b496ee8a4f06dcf991c17580b45200000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000e92596fd629000000000000000000000000000000000000000000000000000000b1a2bc2ec5000000000000000000000000000000000000000000000000000000b1a2bc2ec5000000000000000000000000000000000000000000000000000002c68af0bb14000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000063e4f2836b502bf21218fe1218cbb9b59960b7d40000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}