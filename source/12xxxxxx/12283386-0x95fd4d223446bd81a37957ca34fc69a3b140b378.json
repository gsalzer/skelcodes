{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MPL-2.0\r\n\r\npragma solidity 0.6.6;\r\n\r\ninterface ITokenRecipient {\r\n  /// Typically called from a token contract's `approveAndCall` method, this\r\n  /// method will receive the original owner of the token (`_from`), the\r\n  /// transferred `_value` (in the case of an ERC721, the token id), the token\r\n  /// address (`_token`), and a blob of `_extraData` that is informally\r\n  /// specified by the implementor of this method as a way to communicate\r\n  /// additional parameters.\r\n  ///\r\n  /// Token calls to `receiveApproval` should revert if `receiveApproval`\r\n  /// reverts, and reverts should remove the approval.\r\n  ///\r\n  /// @param _from The original owner of the token approved for transfer.\r\n  /// @param _value For an ERC20, the amount approved for transfer; for an\r\n  ///        ERC721, the id of the token approved for transfer.\r\n  /// @param _token The address of the contract for the token whose transfer\r\n  ///        was approved.\r\n  /// @param _extraData An additional data blob forwarded unmodified through\r\n  ///        `approveAndCall`, used to allow the token owner to pass\r\n  ///         additional parameters and data to this method. The structure of\r\n  ///         the extra data is informally specified by the implementor of\r\n  ///         this interface.\r\n  function receiveApproval(\r\n    address _from,\r\n    uint256 _value,\r\n    address _token,\r\n    bytes calldata _extraData\r\n  ) external;\r\n}\r\n\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping(address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev Give an account access to this role.\r\n   */\r\n  function add(Role storage role, address account) internal {\r\n    require(!has(role, account), \"Roles: account already has role\");\r\n    role.bearer[account] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Remove an account's access to this role.\r\n   */\r\n  function remove(Role storage role, address account) internal {\r\n    require(has(role, account), \"Roles: account does not have role\");\r\n    role.bearer[account] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Check if an account has this role.\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address account) internal view returns (bool) {\r\n    require(account != address(0), \"Roles: account is the zero address\");\r\n    return role.bearer[account];\r\n  }\r\n}\r\n\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n\r\n\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n\r\ncontract MinterRole is ContextUpgradeSafe, OwnableUpgradeSafe {\r\n  using Roles for Roles.Role;\r\n\r\n  event MinterAdded(address indexed account);\r\n  event MinterRemoved(address indexed account);\r\n\r\n  Roles.Role private _minters;\r\n\r\n  modifier onlyMinter() {\r\n    require(isMinter(_msgSender()), \"MinterRole: caller does not have the Minter role\");\r\n    _;\r\n  }\r\n\r\n  function isMinter(address account) public view returns (bool) {\r\n    return _minters.has(account);\r\n  }\r\n\r\n  function addMinter(address account) public onlyOwner {\r\n    _addMinter(account);\r\n  }\r\n\r\n  function renounceMinter() public {\r\n    _removeMinter(_msgSender());\r\n  }\r\n\r\n  function _addMinter(address account) internal {\r\n    _minters.add(account);\r\n    emit MinterAdded(account);\r\n  }\r\n\r\n  function _removeMinter(address account) internal {\r\n    _minters.remove(account);\r\n    emit MinterRemoved(account);\r\n  }\r\n}\r\n\r\ninterface IStrudel {\r\n\tfunction mint(address account, uint256 amount) external returns (bool);\r\n\r\n\tfunction burnFrom(address _account, uint256 _amount) external;\r\n\r\n\tfunction renounceMinter() external;\r\n}\r\n\r\n/// @title  Strudel Token.\r\n/// @notice This is the Strudel ERC20 contract.\r\ncontract StrudelWrapper is ITokenRecipient, MinterRole {\r\n\r\n\tevent LogSwapin(bytes32 indexed txhash, address indexed account, uint amount);\r\n\tevent LogSwapout(address indexed account, address indexed bindaddr, uint amount);\r\n\r\n\taddress public strdlAddr;\r\n\r\n\tconstructor(address _strdlAddr) public {\r\n\t\t__Ownable_init();\r\n\t\tstrdlAddr = _strdlAddr;\r\n\t}\r\n\r\n\tfunction mint(address to, uint256 amount) external onlyMinter returns (bool) {\r\n\t\tIStrudel(strdlAddr).mint(to, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction burn(address from, uint256 amount) external onlyMinter returns (bool) {\r\n\t\trequire(from != address(0), \"StrudelWrapper: address(0x0)\");\r\n\t\tIStrudel(strdlAddr).burnFrom(from, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction Swapin(bytes32 txhash, address account, uint256 amount) public onlyMinter returns (bool) {\r\n\t\tIStrudel(strdlAddr).mint(account, amount);\r\n\t\temit LogSwapin(txhash, account, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction Swapout(uint256 amount, address bindaddr) public returns (bool) {\r\n\t\trequire(bindaddr != address(0), \"StrudelWrapper: address(0x0)\");\r\n\t\tIStrudel(strdlAddr).burnFrom(msg.sender, amount);\r\n\t\temit LogSwapout(msg.sender, bindaddr, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction getAddr(bytes memory _extraData) internal pure returns (address){\r\n\t\taddress addr;\r\n\t\tassembly {\r\n\t\t\taddr := mload(add(_extraData,20))\r\n\t\t}\r\n\t\treturn addr;\r\n\t}\r\n\r\n\tfunction receiveApproval(\r\n\t\taddress _from,\r\n\t\tuint256 _value,\r\n\t\taddress _token,\r\n\t\tbytes calldata _extraData\r\n\t) external override {\r\n\t\trequire(msg.sender == strdlAddr, \"StrudelWrapper: onlyAuth\");\r\n\t\trequire(_token == strdlAddr, \"StrudelWrapper: onlyAuth\");\r\n\t\taddress bindaddr = getAddr(_extraData);\r\n\t\trequire(bindaddr != address(0), \"StrudelWrapper: address(0x0)\");\r\n\t\tIStrudel(strdlAddr).burnFrom(_from, _value);\r\n\t\temit LogSwapout(_from, bindaddr, _value);\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strdlAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txhash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogSwapin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bindaddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogSwapout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txhash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Swapin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bindaddr\",\"type\":\"address\"}],\"name\":\"Swapout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strdlAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StrudelWrapper","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000297d33e17e61c2ddd812389c2105193f8348188a","EVMVersion":"Default","Library":"","LicenseType":"MPL-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://de4b3dd6f37d0e8bf7fefc90eff5d665885ac0bd43b0297433330aa07951b876"}]}