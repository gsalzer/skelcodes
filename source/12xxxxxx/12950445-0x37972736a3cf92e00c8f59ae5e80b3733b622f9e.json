{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/msd/iMSD.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"../TokenBase/Base.sol\\\";\\nimport \\\"./MSDController.sol\\\";\\nimport \\\"./MSD.sol\\\";\\n\\n/**\\n * @title dForce's Lending Protocol Contract.\\n * @notice dForce lending token for the Multi-currency Stable Debt Token.\\n * @author dForce Team.\\n */\\ncontract iMSD is Base {\\n    MSDController public msdController;\\n\\n    event NewMSDController(\\n        MSDController oldMSDController,\\n        MSDController newMSDController\\n    );\\n\\n    /**\\n     * @notice Expects to call only once to initialize a new market.\\n     * @param _underlyingToken The underlying token address.\\n     * @param _name Token name.\\n     * @param _symbol Token symbol.\\n     * @param _lendingController Lending controller contract address.\\n     * @param _interestRateModel Token interest rate model contract address.\\n     * @param _msdController MSD controller contract address.\\n     */\\n    function initialize(\\n        address _underlyingToken,\\n        string memory _name,\\n        string memory _symbol,\\n        IControllerInterface _lendingController,\\n        IInterestRateModelInterface _interestRateModel,\\n        MSDController _msdController\\n    ) external initializer {\\n        require(\\n            address(_underlyingToken) != address(0),\\n            \\\"initialize: underlying address should not be zero address!\\\"\\n        );\\n        require(\\n            address(_lendingController) != address(0),\\n            \\\"initialize: controller address should not be zero address!\\\"\\n        );\\n        require(\\n            address(_msdController) != address(0),\\n            \\\"initialize: MSD controller address should not be zero address!\\\"\\n        );\\n        require(\\n            address(_interestRateModel) != address(0),\\n            \\\"initialize: interest model address should not be zero address!\\\"\\n        );\\n        _initialize(\\n            _name,\\n            _symbol,\\n            ERC20(_underlyingToken).decimals(),\\n            _lendingController,\\n            _interestRateModel\\n        );\\n\\n        underlying = IERC20Upgradeable(_underlyingToken);\\n        msdController = _msdController;\\n    }\\n\\n    /**\\n     * @dev Sets a new reserve ratio.\\n     * iMSD hold no reserve, all borrow interest goes to MSD controller\\n     * Therefore, reserveRatio can not be changed\\n     */\\n    function _setNewReserveRatio(uint256 _newReserveRatio)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        _newReserveRatio;\\n        revert(\\\"Reserve Ratio of iMSD Token can not be changed\\\");\\n    }\\n\\n    /**\\n     * @dev Sets a new MSD controller.\\n     * @param _newMSDController The new MSD controller\\n     */\\n    function _setMSDController(MSDController _newMSDController)\\n        external\\n        onlyOwner\\n    {\\n        MSDController _oldMSDController = msdController;\\n\\n        // Ensures the input address is a MSDController contract.\\n        require(\\n            _newMSDController.isMSDController(),\\n            \\\"_setMSDController: This is not MSD controller contract!\\\"\\n        );\\n\\n        msdController = _newMSDController;\\n\\n        emit NewMSDController(_oldMSDController, _newMSDController);\\n    }\\n\\n    /**\\n     * @notice Supposed to transfer underlying token into this contract\\n     * @dev iMSD burns the amount of underlying rather than transfering.\\n     */\\n    function _doTransferIn(address _sender, uint256 _amount)\\n        internal\\n        override\\n        returns (uint256)\\n    {\\n        MSD(address(underlying)).burn(_sender, _amount);\\n        return _amount;\\n    }\\n\\n    /**\\n     * @notice Supposed to transfer underlying token to `_recipient`\\n     * @dev iMSD mint the amount of underlying rather than transfering.\\n     * this can be called by `borrow()` and `_withdrawReserves()`\\n     * Reserves should stay 0 for iMSD\\n     */\\n    function _doTransferOut(address payable _recipient, uint256 _amount)\\n        internal\\n        override\\n    {\\n        msdController.mintMSD(address(underlying), _recipient, _amount);\\n    }\\n\\n    /**\\n     * @notice Calculates interest and update total borrows and reserves.\\n     * @dev Updates total borrows and reserves with any accumulated interest.\\n     * With 0 reserveRatio, all interest goes to totalBorrows and notify MSD Controller\\n     */\\n    function _updateInterest() internal virtual override {\\n        // When more calls in the same block, only the first one takes effect, so for the\\n        // following calls, nothing updates.\\n        if (block.number != accrualBlockNumber) {\\n            uint256 _totalBorrows = totalBorrows;\\n\\n            Base._updateInterest();\\n\\n            uint256 _interestAccumulated = totalBorrows.sub(_totalBorrows);\\n\\n            // Notify the MSD controller to update earning\\n            if (_interestAccumulated > 0) {\\n                msdController.addEarning(\\n                    address(underlying),\\n                    _interestAccumulated\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev iMSD does not hold any underlying in cash, returning 0\\n     */\\n    function _getCurrentCash() internal view override returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Caller borrows tokens from the protocol to their own address.\\n     * @param _borrowAmount The amount of the underlying token to borrow.\\n     */\\n    function borrow(uint256 _borrowAmount)\\n        external\\n        nonReentrant\\n        settleInterest\\n    {\\n        _borrowInternal(msg.sender, _borrowAmount);\\n    }\\n\\n    /**\\n     * @dev Caller repays their own borrow.\\n     * @param _repayAmount The amount to repay.\\n     */\\n    function repayBorrow(uint256 _repayAmount)\\n        external\\n        nonReentrant\\n        settleInterest\\n    {\\n        _repayInternal(msg.sender, msg.sender, _repayAmount);\\n    }\\n\\n    /**\\n     * @dev Caller repays a borrow belonging to borrower.\\n     * @param _borrower the account with the debt being payed off.\\n     * @param _repayAmount The amount to repay.\\n     */\\n    function repayBorrowBehalf(address _borrower, uint256 _repayAmount)\\n        external\\n        nonReentrant\\n        settleInterest\\n    {\\n        _repayInternal(msg.sender, _borrower, _repayAmount);\\n    }\\n\\n    /**\\n     * @dev The caller liquidates the borrowers collateral.\\n     * @param _borrower The account whose borrow should be liquidated.\\n     * @param _assetCollateral The market in which to seize collateral from the borrower.\\n     * @param _repayAmount The amount to repay.\\n     */\\n    function liquidateBorrow(\\n        address _borrower,\\n        uint256 _repayAmount,\\n        address _assetCollateral\\n    ) external nonReentrant settleInterest {\\n        // Liquidate and seize the same token will call _seizeInternal() instead of seize()\\n        require(\\n            _assetCollateral != address(this),\\n            \\\"iMSD Token can not be seized\\\"\\n        );\\n\\n        _liquidateBorrowInternal(_borrower, _repayAmount, _assetCollateral);\\n    }\\n\\n    /**\\n     * @dev iMSD does not support seize(), but it is required by liquidateBorrow()\\n     * @param _liquidator The account receiving seized collateral.\\n     * @param _borrower The account having collateral seized.\\n     * @param _seizeTokens The number of iMSDs to seize.\\n     */\\n    function seize(\\n        address _liquidator,\\n        address _borrower,\\n        uint256 _seizeTokens\\n    ) external override {\\n        _liquidator;\\n        _borrower;\\n        _seizeTokens;\\n\\n        revert(\\\"iMSD Token can not be seized\\\");\\n    }\\n\\n    /**\\n     * @notice Calculates interest and update total borrows and reserves.\\n     * @dev Updates total borrows and reserves with any accumulated interest.\\n     */\\n    function updateInterest() external override returns (bool) {\\n        _updateInterest();\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Gets the newest exchange rate by accruing interest.\\n     * iMSD returns the initial exchange rate 1.0\\n     */\\n    function exchangeRateCurrent() external pure returns (uint256) {\\n        return initialExchangeRate;\\n    }\\n\\n    /**\\n     * @dev Calculates the exchange rate without accruing interest.\\n     * iMSD returns the initial exchange rate 1.0\\n     */\\n    function exchangeRateStored() external view override returns (uint256) {\\n        return initialExchangeRate;\\n    }\\n\\n    /**\\n     * @dev Gets the underlying balance of the `_account`.\\n     * @param _account The address of the account to query.\\n     * iMSD just returns 0\\n     */\\n    function balanceOfUnderlying(address _account)\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        _account;\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Gets the user's borrow balance with the latest `borrowIndex`.\\n     */\\n    function borrowBalanceCurrent(address _account)\\n        external\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        // Accrues interest.\\n        _updateInterest();\\n\\n        return _borrowBalanceInternal(_account);\\n    }\\n\\n    /**\\n     * @dev Gets the borrow balance of user without accruing interest.\\n     */\\n    function borrowBalanceStored(address _account)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _borrowBalanceInternal(_account);\\n    }\\n\\n    /**\\n     * @dev Gets user borrowing information.\\n     */\\n    function borrowSnapshot(address _account)\\n        external\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return (\\n            accountBorrows[_account].principal,\\n            accountBorrows[_account].interestIndex\\n        );\\n    }\\n\\n    /**\\n     * @dev Gets the current total borrows by accruing interest.\\n     */\\n    function totalBorrowsCurrent() external returns (uint256) {\\n        // Accrues interest.\\n        _updateInterest();\\n\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @dev Returns the current per-block borrow interest rate.\\n     * iMSD uses fixed interest rate model\\n     */\\n    function borrowRatePerBlock() public view returns (uint256) {\\n        return\\n            interestRateModel.getBorrowRate(\\n                _getCurrentCash(),\\n                totalBorrows,\\n                totalReserves\\n            );\\n    }\\n\\n    /**\\n     * @dev Get cash balance of this iToken in the underlying token.\\n     */\\n    function getCash() external view returns (uint256) {\\n        return _getCurrentCash();\\n    }\\n\\n    /**\\n     * @notice Check whether is a iToken contract, return false for iMSD contract.\\n     */\\n    function isiToken() external pure override returns (bool) {\\n        return false;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TokenBase/Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"../interface/IFlashloanExecutor.sol\\\";\\nimport \\\"../library/SafeRatioMath.sol\\\";\\n\\nimport \\\"./TokenERC20.sol\\\";\\n\\n/**\\n * @title dForce's lending Base Contract\\n * @author dForce\\n */\\nabstract contract Base is TokenERC20 {\\n    using SafeRatioMath for uint256;\\n\\n    /**\\n     * @notice Expects to call only once to create a new lending market.\\n     * @param _name Token name.\\n     * @param _symbol Token symbol.\\n     * @param _controller Core controller contract address.\\n     * @param _interestRateModel Token interest rate model contract address.\\n     */\\n    function _initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals,\\n        IControllerInterface _controller,\\n        IInterestRateModelInterface _interestRateModel\\n    ) internal virtual {\\n        controller = _controller;\\n        interestRateModel = _interestRateModel;\\n        accrualBlockNumber = block.number;\\n        borrowIndex = BASE;\\n        flashloanFeeRatio = 0.0008e18;\\n        protocolFeeRatio = 0.25e18;\\n        __Ownable_init();\\n        __ERC20_init(_name, _symbol, _decimals);\\n        __ReentrancyGuard_init();\\n\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(_name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /*********************************/\\n    /******** Security Check *********/\\n    /*********************************/\\n\\n    /**\\n     * @notice Check whether is a iToken contract, return false for iMSD contract.\\n     */\\n    function isiToken() external pure virtual returns (bool) {\\n        return true;\\n    }\\n\\n    //----------------------------------\\n    //******** Main calculation ********\\n    //----------------------------------\\n\\n    struct InterestLocalVars {\\n        uint256 borrowRate;\\n        uint256 currentBlockNumber;\\n        uint256 currentCash;\\n        uint256 totalBorrows;\\n        uint256 totalReserves;\\n        uint256 borrowIndex;\\n        uint256 blockDelta;\\n        uint256 simpleInterestFactor;\\n        uint256 interestAccumulated;\\n        uint256 newTotalBorrows;\\n        uint256 newTotalReserves;\\n        uint256 newBorrowIndex;\\n    }\\n\\n    /**\\n     * @notice Calculates interest and update total borrows and reserves.\\n     * @dev Updates total borrows and reserves with any accumulated interest.\\n     */\\n    function _updateInterest() internal virtual override {\\n        // When more calls in the same block, only the first one takes effect, so for the\\n        // following calls, nothing updates.\\n        if (block.number != accrualBlockNumber) {\\n            InterestLocalVars memory _vars;\\n            _vars.currentCash = _getCurrentCash();\\n            _vars.totalBorrows = totalBorrows;\\n            _vars.totalReserves = totalReserves;\\n\\n            // Gets the current borrow interest rate.\\n            _vars.borrowRate = interestRateModel.getBorrowRate(\\n                _vars.currentCash,\\n                _vars.totalBorrows,\\n                _vars.totalReserves\\n            );\\n            require(\\n                _vars.borrowRate <= maxBorrowRate,\\n                \\\"_updateInterest: Borrow rate is too high!\\\"\\n            );\\n\\n            // Records the current block number.\\n            _vars.currentBlockNumber = block.number;\\n\\n            // Calculates the number of blocks elapsed since the last accrual.\\n            _vars.blockDelta = _vars.currentBlockNumber.sub(accrualBlockNumber);\\n\\n            /**\\n             * Calculates the interest accumulated into borrows and reserves and the new index:\\n             *  simpleInterestFactor = borrowRate * blockDelta\\n             *  interestAccumulated = simpleInterestFactor * totalBorrows\\n             *  newTotalBorrows = interestAccumulated + totalBorrows\\n             *  newTotalReserves = interestAccumulated * reserveFactor + totalReserves\\n             *  newBorrowIndex = simpleInterestFactor * borrowIndex + borrowIndex\\n             */\\n            _vars.simpleInterestFactor = _vars.borrowRate.mul(_vars.blockDelta);\\n            _vars.interestAccumulated = _vars.simpleInterestFactor.rmul(\\n                _vars.totalBorrows\\n            );\\n            _vars.newTotalBorrows = _vars.interestAccumulated.add(\\n                _vars.totalBorrows\\n            );\\n            _vars.newTotalReserves = reserveRatio\\n                .rmul(_vars.interestAccumulated)\\n                .add(_vars.totalReserves);\\n\\n            _vars.borrowIndex = borrowIndex;\\n            _vars.newBorrowIndex = _vars\\n                .simpleInterestFactor\\n                .rmul(_vars.borrowIndex)\\n                .add(_vars.borrowIndex);\\n\\n            // Writes the previously calculated values into storage.\\n            accrualBlockNumber = _vars.currentBlockNumber;\\n            borrowIndex = _vars.newBorrowIndex;\\n            totalBorrows = _vars.newTotalBorrows;\\n            totalReserves = _vars.newTotalReserves;\\n\\n            // Emits an `UpdateInterest` event.\\n            emit UpdateInterest(\\n                _vars.currentBlockNumber,\\n                _vars.interestAccumulated,\\n                _vars.newBorrowIndex,\\n                _vars.currentCash,\\n                _vars.newTotalBorrows,\\n                _vars.newTotalReserves\\n            );\\n        }\\n    }\\n\\n    struct MintLocalVars {\\n        uint256 exchangeRate;\\n        uint256 mintTokens;\\n        uint256 actualMintAmout;\\n    }\\n\\n    /**\\n     * @dev User deposits token into the market and `_recipient` gets iToken.\\n     * @param _recipient The address of the user to get iToken.\\n     * @param _mintAmount The amount of the underlying token to deposit.\\n     */\\n    function _mintInternal(address _recipient, uint256 _mintAmount)\\n        internal\\n        virtual\\n    {\\n        controller.beforeMint(address(this), _recipient, _mintAmount);\\n\\n        MintLocalVars memory _vars;\\n\\n        /**\\n         * Gets the current exchange rate and calculate the number of iToken to be minted:\\n         *  mintTokens = mintAmount / exchangeRate\\n         */\\n        _vars.exchangeRate = _exchangeRateInternal();\\n\\n        // Transfers `_mintAmount` from caller to contract, and returns the actual amount the contract\\n        // get, cause some tokens may be charged.\\n\\n        _vars.actualMintAmout = _doTransferIn(msg.sender, _mintAmount);\\n\\n        // Supports deflationary tokens.\\n        _vars.mintTokens = _vars.actualMintAmout.rdiv(_vars.exchangeRate);\\n\\n        // Mints `mintTokens` iToken to `_recipient`.\\n        _mint(_recipient, _vars.mintTokens);\\n\\n        controller.afterMint(\\n            address(this),\\n            _recipient,\\n            _mintAmount,\\n            _vars.mintTokens\\n        );\\n\\n        emit Mint(msg.sender, _recipient, _mintAmount, _vars.mintTokens);\\n    }\\n\\n    /**\\n     * @notice This is a common function to redeem, so only one of `_redeemiTokenAmount` or\\n     *         `_redeemUnderlyingAmount` may be non-zero.\\n     * @dev Caller redeems undelying token based on the input amount of iToken or underlying token.\\n     * @param _from The address of the account which will spend underlying token.\\n     * @param _redeemiTokenAmount The number of iTokens to redeem into underlying.\\n     * @param _redeemUnderlyingAmount The number of underlying tokens to receive.\\n     */\\n    function _redeemInternal(\\n        address _from,\\n        uint256 _redeemiTokenAmount,\\n        uint256 _redeemUnderlyingAmount\\n    ) internal virtual {\\n        require(\\n            _redeemiTokenAmount > 0,\\n            \\\"_redeemInternal: Redeem iToken amount should be greater than zero!\\\"\\n        );\\n\\n        controller.beforeRedeem(address(this), _from, _redeemiTokenAmount);\\n\\n        _burnFrom(_from, _redeemiTokenAmount);\\n\\n        /**\\n         * Transfers `_redeemUnderlyingAmount` underlying token to caller.\\n         */\\n        _doTransferOut(msg.sender, _redeemUnderlyingAmount);\\n\\n        controller.afterRedeem(\\n            address(this),\\n            _from,\\n            _redeemiTokenAmount,\\n            _redeemUnderlyingAmount\\n        );\\n\\n        emit Redeem(\\n            _from,\\n            msg.sender,\\n            _redeemiTokenAmount,\\n            _redeemUnderlyingAmount\\n        );\\n    }\\n\\n    /**\\n     * @dev Caller borrows assets from the protocol.\\n     * @param _borrower The account that will borrow tokens.\\n     * @param _borrowAmount The amount of the underlying asset to borrow.\\n     */\\n    function _borrowInternal(address payable _borrower, uint256 _borrowAmount)\\n        internal\\n        virtual\\n    {\\n        controller.beforeBorrow(address(this), _borrower, _borrowAmount);\\n\\n        // Calculates the new borrower and total borrow balances:\\n        //  newAccountBorrows = accountBorrows + borrowAmount\\n        //  newTotalBorrows = totalBorrows + borrowAmount\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[_borrower];\\n        borrowSnapshot.principal = _borrowBalanceInternal(_borrower).add(\\n            _borrowAmount\\n        );\\n        borrowSnapshot.interestIndex = borrowIndex;\\n        totalBorrows = totalBorrows.add(_borrowAmount);\\n\\n        // Transfers token to borrower.\\n        _doTransferOut(_borrower, _borrowAmount);\\n\\n        controller.afterBorrow(address(this), _borrower, _borrowAmount);\\n\\n        emit Borrow(\\n            _borrower,\\n            _borrowAmount,\\n            borrowSnapshot.principal,\\n            borrowSnapshot.interestIndex,\\n            totalBorrows\\n        );\\n    }\\n\\n    /**\\n     * @notice Please approve enough amount at first!!! If not,\\n     *         maybe you will get an error: `SafeMath: subtraction overflow`\\n     * @dev `_payer` repays `_repayAmount` tokens for `_borrower`.\\n     * @param _payer The account to pay for the borrowed.\\n     * @param _borrower The account with the debt being payed off.\\n     * @param _repayAmount The amount to repay (or -1 for max).\\n     */\\n    function _repayInternal(\\n        address _payer,\\n        address _borrower,\\n        uint256 _repayAmount\\n    ) internal virtual returns (uint256) {\\n        controller.beforeRepayBorrow(\\n            address(this),\\n            _payer,\\n            _borrower,\\n            _repayAmount\\n        );\\n\\n        // Calculates the latest borrowed amount by the new market borrowed index.\\n        uint256 _accountBorrows = _borrowBalanceInternal(_borrower);\\n\\n        // Transfers the token into the market to repay.\\n        uint256 _actualRepayAmount =\\n            _doTransferIn(\\n                _payer,\\n                _repayAmount > _accountBorrows ? _accountBorrows : _repayAmount\\n            );\\n\\n        // Calculates the `_borrower` new borrow balance and total borrow balances:\\n        //  accountBorrows[_borrower].principal = accountBorrows - actualRepayAmount\\n        //  newTotalBorrows = totalBorrows - actualRepayAmount\\n\\n        // Saves borrower updates.\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[_borrower];\\n        borrowSnapshot.principal = _accountBorrows.sub(_actualRepayAmount);\\n        borrowSnapshot.interestIndex = borrowIndex;\\n\\n        totalBorrows = totalBorrows < _actualRepayAmount\\n            ? 0\\n            : totalBorrows.sub(_actualRepayAmount);\\n\\n        // Defense hook.\\n        controller.afterRepayBorrow(\\n            address(this),\\n            _payer,\\n            _borrower,\\n            _actualRepayAmount\\n        );\\n\\n        emit RepayBorrow(\\n            _payer,\\n            _borrower,\\n            _actualRepayAmount,\\n            borrowSnapshot.principal,\\n            borrowSnapshot.interestIndex,\\n            totalBorrows\\n        );\\n\\n        return _actualRepayAmount;\\n    }\\n\\n    /**\\n     * @dev The caller repays some of borrow and receive collateral.\\n     * @param _borrower The account whose borrow should be liquidated.\\n     * @param _repayAmount The amount to repay.\\n     * @param _assetCollateral The market in which to seize collateral from the borrower.\\n     */\\n    function _liquidateBorrowInternal(\\n        address _borrower,\\n        uint256 _repayAmount,\\n        address _assetCollateral\\n    ) internal virtual {\\n        require(\\n            msg.sender != _borrower,\\n            \\\"_liquidateBorrowInternal: Liquidator can not be borrower!\\\"\\n        );\\n        // According to the parameter `_repayAmount` to see what is the exact error.\\n        require(\\n            _repayAmount != 0,\\n            \\\"_liquidateBorrowInternal: Liquidate amount should be greater than 0!\\\"\\n        );\\n\\n        // Accrues interest for collateral asset.\\n        Base _dlCollateral = Base(_assetCollateral);\\n        _dlCollateral.updateInterest();\\n\\n        controller.beforeLiquidateBorrow(\\n            address(this),\\n            _assetCollateral,\\n            msg.sender,\\n            _borrower,\\n            _repayAmount\\n        );\\n\\n        require(\\n            _dlCollateral.accrualBlockNumber() == block.number,\\n            \\\"_liquidateBorrowInternal: Failed to update block number in collateral asset!\\\"\\n        );\\n\\n        uint256 _actualRepayAmount =\\n            _repayInternal(msg.sender, _borrower, _repayAmount);\\n\\n        // Calculates the number of collateral tokens that will be seized\\n        uint256 _seizeTokens =\\n            controller.liquidateCalculateSeizeTokens(\\n                address(this),\\n                _assetCollateral,\\n                _actualRepayAmount\\n            );\\n\\n        // If this is also the collateral, calls seizeInternal to avoid re-entrancy,\\n        // otherwise make an external call.\\n        if (_assetCollateral == address(this)) {\\n            _seizeInternal(address(this), msg.sender, _borrower, _seizeTokens);\\n        } else {\\n            _dlCollateral.seize(msg.sender, _borrower, _seizeTokens);\\n        }\\n\\n        controller.afterLiquidateBorrow(\\n            address(this),\\n            _assetCollateral,\\n            msg.sender,\\n            _borrower,\\n            _actualRepayAmount,\\n            _seizeTokens\\n        );\\n\\n        emit LiquidateBorrow(\\n            msg.sender,\\n            _borrower,\\n            _actualRepayAmount,\\n            _assetCollateral,\\n            _seizeTokens\\n        );\\n    }\\n\\n    /**\\n     * @dev Transfers this token to the liquidator.\\n     * @param _seizerToken The contract seizing the collateral.\\n     * @param _liquidator The account receiving seized collateral.\\n     * @param _borrower The account having collateral seized.\\n     * @param _seizeTokens The number of iTokens to seize.\\n     */\\n    function _seizeInternal(\\n        address _seizerToken,\\n        address _liquidator,\\n        address _borrower,\\n        uint256 _seizeTokens\\n    ) internal virtual {\\n        require(\\n            _borrower != _liquidator,\\n            \\\"seize: Liquidator can not be borrower!\\\"\\n        );\\n\\n        controller.beforeSeize(\\n            address(this),\\n            _seizerToken,\\n            _liquidator,\\n            _borrower,\\n            _seizeTokens\\n        );\\n\\n        /**\\n         * Calculates the new _borrower and _liquidator token balances,\\n         * that is transfer `_seizeTokens` iToken from `_borrower` to `_liquidator`.\\n         */\\n        _transfer(_borrower, _liquidator, _seizeTokens);\\n\\n        // Hook checks.\\n        controller.afterSeize(\\n            address(this),\\n            _seizerToken,\\n            _liquidator,\\n            _borrower,\\n            _seizeTokens\\n        );\\n    }\\n\\n    /**\\n     * @param _account The address whose balance should be calculated.\\n     */\\n    function _borrowBalanceInternal(address _account)\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        // Gets stored borrowed data of the `_account`.\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[_account];\\n\\n        // If borrowBalance = 0, return 0 directly.\\n        if (borrowSnapshot.principal == 0 || borrowSnapshot.interestIndex == 0)\\n            return 0;\\n\\n        // Calculate new borrow balance with market new borrow index:\\n        //   recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n        return\\n            borrowSnapshot.principal.mul(borrowIndex).divup(\\n                borrowSnapshot.interestIndex\\n            );\\n    }\\n\\n    /**\\n     * @dev Calculates the exchange rate from the underlying token to the iToken.\\n     */\\n    function _exchangeRateInternal() internal view virtual returns (uint256) {\\n        if (totalSupply == 0) {\\n            // This is the first time to mint, so current exchange rate is equal to initial exchange rate.\\n            return initialExchangeRate;\\n        } else {\\n            // exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n            return\\n                _getCurrentCash().add(totalBorrows).sub(totalReserves).rdiv(\\n                    totalSupply\\n                );\\n        }\\n    }\\n\\n    function updateInterest() external virtual returns (bool);\\n\\n    /**\\n     * @dev EIP2612 permit function. For more details, please look at here:\\n     * https://eips.ethereum.org/EIPS/eip-2612\\n     * @param _owner The owner of the funds.\\n     * @param _spender The spender.\\n     * @param _value The amount.\\n     * @param _deadline The deadline timestamp, type(uint256).max for max deadline.\\n     * @param _v Signature param.\\n     * @param _s Signature param.\\n     * @param _r Signature param.\\n     */\\n    function permit(\\n        address _owner,\\n        address _spender,\\n        uint256 _value,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external {\\n        require(_deadline >= block.timestamp, \\\"permit: EXPIRED!\\\");\\n        uint256 _currentNonce = nonces[_owner];\\n\\n        bytes32 _digest =\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR,\\n                    keccak256(\\n                        abi.encode(\\n                            PERMIT_TYPEHASH,\\n                            _owner,\\n                            _spender,\\n                            _getChainId(),\\n                            _value,\\n                            _currentNonce,\\n                            _deadline\\n                        )\\n                    )\\n                )\\n            );\\n        address _recoveredAddress = ecrecover(_digest, _v, _r, _s);\\n        require(\\n            _recoveredAddress != address(0) && _recoveredAddress == _owner,\\n            \\\"permit: INVALID_SIGNATURE!\\\"\\n        );\\n        nonces[_owner] = _currentNonce.add(1);\\n        _approve(_owner, _spender, _value);\\n    }\\n\\n    function _getChainId() internal pure returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n\\n    /**\\n     * @dev Transfers this tokens to the liquidator.\\n     * @param _liquidator The account receiving seized collateral.\\n     * @param _borrower The account having collateral seized.\\n     * @param _seizeTokens The number of iTokens to seize.\\n     */\\n    function seize(\\n        address _liquidator,\\n        address _borrower,\\n        uint256 _seizeTokens\\n    ) external virtual;\\n\\n    /**\\n     * @notice Users are expected to have enough allowance and balance before calling.\\n     * @dev Transfers asset in.\\n     */\\n    function _doTransferIn(address _sender, uint256 _amount)\\n        internal\\n        virtual\\n        returns (uint256);\\n\\n    function exchangeRateStored() external view virtual returns (uint256);\\n\\n    function borrowBalanceStored(address _account)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/msd/MSDController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\n\\nimport \\\"./MSD.sol\\\";\\n\\n/**\\n * @dev Interface for Minters, minters now can be iMSD and MSDS\\n */\\ninterface IMinter {\\n    function updateInterest() external returns (bool);\\n}\\n\\n/**\\n * @title dForce's Multi-currency Stable Debt Token Controller\\n * @author dForce\\n */\\n\\ncontract MSDController is Initializable, Ownable {\\n    using SafeMathUpgradeable for uint256;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    /// @dev EnumerableSet of all msdTokens\\n    EnumerableSetUpgradeable.AddressSet internal msdTokens;\\n\\n    // @notice Mapping of msd tokens to corresponding minters\\n    mapping(address => EnumerableSetUpgradeable.AddressSet) internal msdMinters;\\n\\n    struct TokenData {\\n        // System earning from borrow interest\\n        uint256 earning;\\n        // System debt from saving interest\\n        uint256 debt;\\n    }\\n\\n    // @notice Mapping of msd tokens to corresponding TokenData\\n    mapping(address => TokenData) public msdTokenData;\\n\\n    /**\\n     * @dev Emitted when `token` is added into msdTokens.\\n     */\\n    event MSDAdded(address token);\\n\\n    /**\\n     * @dev Emitted when `minter` is added into `tokens`'s minters.\\n     */\\n    event MinterAdded(address token, address minter);\\n\\n    /**\\n     * @dev Emitted when `minter` is removed from `tokens`'s minters.\\n     */\\n    event MinterRemoved(address token, address minter);\\n\\n    /**\\n     * @dev Emitted when `token`'s earning is added by `minter`.\\n     */\\n    event MSDEarningAdded(\\n        address token,\\n        address minter,\\n        uint256 earning,\\n        uint256 totalEarning\\n    );\\n\\n    /**\\n     * @dev Emitted when `token`'s debt is added by `minter`.\\n     */\\n    event MSDDebtAdded(\\n        address token,\\n        address minter,\\n        uint256 debt,\\n        uint256 totalDebt\\n    );\\n\\n    /**\\n     * @dev Emitted when reserve is withdrawn from `token`.\\n     */\\n    event ReservesWithdrawn(\\n        address owner,\\n        address token,\\n        uint256 amount,\\n        uint256 oldTotalReserves,\\n        uint256 newTotalReserves\\n    );\\n\\n    /**\\n     * @notice Expects to call only once to initialize the MSD controller.\\n     */\\n    function initialize() external initializer {\\n        __Ownable_init();\\n    }\\n\\n    /**\\n     * @notice Ensure this is a MSD Controller contract.\\n     */\\n    function isMSDController() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Throws if token is not in msdTokens\\n     */\\n    function _checkMSD(address _token) internal view {\\n        require(hasMSD(_token), \\\"token is not a valid MSD token\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if token is not a valid MSD token.\\n     */\\n    modifier onlyMSD(address _token) {\\n        _checkMSD(_token);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the _token's minters.\\n     */\\n    modifier onlyMSDMinter(address _token, address caller) {\\n        _checkMSD(_token);\\n\\n        require(\\n            msdMinters[_token].contains(caller),\\n            \\\"onlyMinter: caller is not the token's minter\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add `_token` into msdTokens.\\n     * If `_token` have not been in msdTokens, emits a `MSDTokenAdded` event.\\n     *\\n     * @param _token The token to add\\n     * @param _minters The addresses to add as token's minters\\n     *\\n     * Requirements:\\n     * - the caller must be `owner`.\\n     */\\n    function _addMSD(address _token, address[] calldata _minters)\\n        external\\n        onlyOwner\\n    {\\n        require(_token != address(0), \\\"MSD token cannot be a zero address\\\");\\n        if (msdTokens.add(_token)) {\\n            emit MSDAdded(_token);\\n        }\\n\\n        _addMinters(_token, _minters);\\n    }\\n\\n    /**\\n     * @notice Add `_minters` into minters.\\n     * If `_minters` have not been in minters, emits a `MinterAdded` event.\\n     *\\n     * @param _minters The addresses to add as minters\\n     *\\n     * Requirements:\\n     * - the caller must be `owner`.\\n     */\\n    function _addMinters(address _token, address[] memory _minters)\\n        public\\n        onlyOwner\\n        onlyMSD(_token)\\n    {\\n        uint256 _len = _minters.length;\\n\\n        for (uint256 i = 0; i < _len; i++) {\\n            require(\\n                _minters[i] != address(0),\\n                \\\"minter cannot be a zero address\\\"\\n            );\\n\\n            if (msdMinters[_token].add(_minters[i])) {\\n                emit MinterAdded(_token, _minters[i]);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove `minter` from minters.\\n     * If `minter` is a minter, emits a `MinterRemoved` event.\\n     *\\n     * @param _minter The minter to remove\\n     *\\n     * Requirements:\\n     * - the caller must be `owner`, `_token` must be a MSD Token.\\n     */\\n    function _removeMinter(address _token, address _minter)\\n        external\\n        onlyOwner\\n        onlyMSD(_token)\\n    {\\n        require(_minter != address(0), \\\"_minter cannot be a zero address\\\");\\n\\n        if (msdMinters[_token].remove(_minter)) {\\n            emit MinterRemoved(_token, _minter);\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw the reserve of `_token`.\\n     * @param _token The MSD token to withdraw\\n     * @param _amount The amount of token to withdraw\\n     *\\n     * Requirements:\\n     * - the caller must be `owner`, `_token` must be a MSD Token.\\n     */\\n    function _withdrawReserves(address _token, uint256 _amount)\\n        external\\n        onlyOwner\\n        onlyMSD(_token)\\n    {\\n        (uint256 _equity, ) = calcEquity(_token);\\n\\n        require(_equity >= _amount, \\\"Token do not have enough reserve\\\");\\n\\n        // Increase the token debt\\n        msdTokenData[_token].debt = msdTokenData[_token].debt.add(_amount);\\n\\n        // Directly mint the token to owner\\n        MSD(_token).mint(owner, _amount);\\n\\n        emit ReservesWithdrawn(\\n            owner,\\n            _token,\\n            _amount,\\n            _equity,\\n            _equity.sub(_amount)\\n        );\\n    }\\n\\n    /**\\n     * @notice Mint `amount` of `_token` to `_to`.\\n     * @param _token The MSD token to mint\\n     * @param _to The account to mint to\\n     * @param _amount The amount of token to mint\\n     *\\n     * Requirements:\\n     * - the caller must be `minter` of `_token`.\\n     */\\n    function mintMSD(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) external onlyMSDMinter(_token, msg.sender) {\\n        MSD(_token).mint(_to, _amount);\\n    }\\n\\n    /*********************************/\\n    /******** MSD Token Equity *******/\\n    /*********************************/\\n\\n    /**\\n     * @notice Add `amount` of debt to `_token`.\\n     * @param _token The MSD token to add debt\\n     * @param _debt The amount of debt to add\\n     *\\n     * Requirements:\\n     * - the caller must be `minter` of `_token`.\\n     */\\n    function addDebt(address _token, uint256 _debt)\\n        external\\n        onlyMSDMinter(_token, msg.sender)\\n    {\\n        msdTokenData[_token].debt = msdTokenData[_token].debt.add(_debt);\\n\\n        emit MSDDebtAdded(_token, msg.sender, _debt, msdTokenData[_token].debt);\\n    }\\n\\n    /**\\n     * @notice Add `amount` of earning to `_token`.\\n     * @param _token The MSD token to add earning\\n     * @param _earning The amount of earning to add\\n     *\\n     * Requirements:\\n     * - the caller must be `minter` of `_token`.\\n     */\\n    function addEarning(address _token, uint256 _earning)\\n        external\\n        onlyMSDMinter(_token, msg.sender)\\n    {\\n        msdTokenData[_token].earning = msdTokenData[_token].earning.add(\\n            _earning\\n        );\\n\\n        emit MSDEarningAdded(\\n            _token,\\n            msg.sender,\\n            _earning,\\n            msdTokenData[_token].earning\\n        );\\n    }\\n\\n    /**\\n     * @notice Get the MSD token equity\\n     * @param _token The MSD token to query\\n     * @return token equity, token debt, will call `updateInterest()` on its minters\\n     *\\n     * Requirements:\\n     * - `_token` must be a MSD Token.\\n     *\\n     */\\n    function calcEquity(address _token)\\n        public\\n        onlyMSD(_token)\\n        returns (uint256, uint256)\\n    {\\n        // Call `updateInterest()` on all minters to get the latest token data\\n        EnumerableSetUpgradeable.AddressSet storage _msdMinters =\\n            msdMinters[_token];\\n\\n        uint256 _len = _msdMinters.length();\\n        for (uint256 i = 0; i < _len; i++) {\\n            IMinter(_msdMinters.at(i)).updateInterest();\\n        }\\n\\n        TokenData storage _tokenData = msdTokenData[_token];\\n\\n        return\\n            _tokenData.earning > _tokenData.debt\\n                ? (_tokenData.earning.sub(_tokenData.debt), uint256(0))\\n                : (uint256(0), _tokenData.debt.sub(_tokenData.earning));\\n    }\\n\\n    /*********************************/\\n    /****** General Information ******/\\n    /*********************************/\\n\\n    /**\\n     * @notice Return all of the MSD tokens\\n     * @return _allMSDs The list of MSD token addresses\\n     */\\n    function getAllMSDs() public view returns (address[] memory _allMSDs) {\\n        EnumerableSetUpgradeable.AddressSet storage _msdTokens = msdTokens;\\n\\n        uint256 _len = _msdTokens.length();\\n        _allMSDs = new address[](_len);\\n        for (uint256 i = 0; i < _len; i++) {\\n            _allMSDs[i] = _msdTokens.at(i);\\n        }\\n    }\\n\\n    /**\\n     * @notice Check whether a address is a valid MSD\\n     * @param _token The token address to check for\\n     * @return true if the _token is a valid MSD otherwise false\\n     */\\n    function hasMSD(address _token) public view returns (bool) {\\n        return msdTokens.contains(_token);\\n    }\\n\\n    /**\\n     * @notice Return all minter of a MSD token\\n     * @param _token The MSD token address to get minters for\\n     * @return _minters The list of MSD token minter addresses\\n     * Will retuen empty if `_token` is not a valid MSD token\\n     */\\n    function getMSDMinters(address _token)\\n        public\\n        view\\n        returns (address[] memory _minters)\\n    {\\n        EnumerableSetUpgradeable.AddressSet storage _msdMinters =\\n            msdMinters[_token];\\n\\n        uint256 _len = _msdMinters.length();\\n        _minters = new address[](_len);\\n        for (uint256 i = 0; i < _len; i++) {\\n            _minters[i] = _msdMinters.at(i);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/msd/MSD.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\\\";\\n\\nimport \\\"../library/Initializable.sol\\\";\\nimport \\\"../library/Ownable.sol\\\";\\nimport \\\"../library/ERC20.sol\\\";\\n\\n/**\\n * @title dForce's Multi-currency Stable Debt Token\\n * @author dForce\\n */\\ncontract MSD is Initializable, Ownable, ERC20 {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 chainId, uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        0x576144ed657c8304561e56ca632e17751956250114636e8c01f64a7f2c6d98cf;\\n    mapping(address => uint256) public nonces;\\n\\n    /// @dev EnumerableSet of minters\\n    EnumerableSetUpgradeable.AddressSet internal minters;\\n\\n    /**\\n     * @dev Emitted when `minter` is added as `minter`.\\n     */\\n    event MinterAdded(address minter);\\n\\n    /**\\n     * @dev Emitted when `minter` is removed from `minters`.\\n     */\\n    event MinterRemoved(address minter);\\n\\n    /**\\n     * @notice Expects to call only once to initialize the MSD token.\\n     * @param _name Token name.\\n     * @param _symbol Token symbol.\\n     */\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) external initializer {\\n        __Ownable_init();\\n        __ERC20_init(_name, _symbol, _decimals);\\n\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(_name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the minters.\\n     */\\n    modifier onlyMinter() {\\n        require(\\n            minters.contains(msg.sender),\\n            \\\"onlyMinter: caller is not minter\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add `minter` into minters.\\n     * If `minter` have not been a minter, emits a `MinterAdded` event.\\n     *\\n     * @param _minter The minter to add\\n     *\\n     * Requirements:\\n     * - the caller must be `owner`.\\n     */\\n    function _addMinter(address _minter) external onlyOwner {\\n        require(_minter != address(0), \\\"_addMinter: _minter the zero address\\\");\\n        if (minters.add(_minter)) {\\n            emit MinterAdded(_minter);\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove `minter` from minters.\\n     * If `minter` is a minter, emits a `MinterRemoved` event.\\n     *\\n     * @param _minter The minter to remove\\n     *\\n     * Requirements:\\n     * - the caller must be `owner`.\\n     */\\n    function _removeMinter(address _minter) external onlyOwner {\\n        require(\\n            _minter != address(0),\\n            \\\"_removeMinter: _minter the zero address\\\"\\n        );\\n        if (minters.remove(_minter)) {\\n            emit MinterRemoved(_minter);\\n        }\\n    }\\n\\n    function mint(address to, uint256 amount) external onlyMinter {\\n        _mint(to, amount);\\n    }\\n\\n    function burn(address from, uint256 amount) external {\\n        _burnFrom(from, amount);\\n    }\\n\\n    function _getChainId() internal pure returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n\\n    /**\\n     * @dev EIP2612 permit function. For more details, please look at here:\\n     * https://eips.ethereum.org/EIPS/eip-2612\\n     * @param _owner The owner of the funds.\\n     * @param _spender The spender.\\n     * @param _value The amount.\\n     * @param _deadline The deadline timestamp, type(uint256).max for max deadline.\\n     * @param _v Signature param.\\n     * @param _s Signature param.\\n     * @param _r Signature param.\\n     */\\n    function permit(\\n        address _owner,\\n        address _spender,\\n        uint256 _value,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external {\\n        require(_deadline >= block.timestamp, \\\"permit: EXPIRED!\\\");\\n        uint256 _currentNonce = nonces[_owner];\\n        bytes32 _digest =\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR,\\n                    keccak256(\\n                        abi.encode(\\n                            PERMIT_TYPEHASH,\\n                            _owner,\\n                            _spender,\\n                            _getChainId(),\\n                            _value,\\n                            _currentNonce,\\n                            _deadline\\n                        )\\n                    )\\n                )\\n            );\\n        address _recoveredAddress = ecrecover(_digest, _v, _r, _s);\\n        require(\\n            _recoveredAddress != address(0) && _recoveredAddress == _owner,\\n            \\\"permit: INVALID_SIGNATURE!\\\"\\n        );\\n        nonces[_owner] = _currentNonce.add(1);\\n        _approve(_owner, _spender, _value);\\n    }\\n\\n    /**\\n     * @notice Return all minters of this MSD token\\n     * @return _minters The list of minter addresses\\n     */\\n    function getMinters() public view returns (address[] memory _minters) {\\n        uint256 _len = minters.length();\\n        _minters = new address[](_len);\\n        for (uint256 i = 0; i < _len; i++) {\\n            _minters[i] = minters.at(i);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IFlashloanExecutor.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IFlashloanExecutor {\\n    function executeOperation(\\n        address reserve,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes memory data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/library/SafeRatioMath.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\n\\nlibrary SafeRatioMath {\\n    using SafeMathUpgradeable for uint256;\\n\\n    uint256 private constant BASE = 10**18;\\n    uint256 private constant DOUBLE = 10**36;\\n\\n    function divup(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x.add(y.sub(1)).div(y);\\n    }\\n\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x.mul(y).div(BASE);\\n    }\\n\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x.mul(BASE).div(y);\\n    }\\n\\n    function rdivup(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x.mul(BASE).add(y.sub(1)).div(y);\\n    }\\n\\n    function tmul(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) internal pure returns (uint256 result) {\\n        result = x.mul(y).mul(z).div(DOUBLE);\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 base\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n                case 0 {\\n                    switch n\\n                        case 0 {\\n                            z := base\\n                        }\\n                        default {\\n                            z := 0\\n                        }\\n                }\\n                default {\\n                    switch mod(n, 2)\\n                        case 0 {\\n                            z := base\\n                        }\\n                        default {\\n                            z := x\\n                        }\\n                    let half := div(base, 2) // for rounding.\\n\\n                    for {\\n                        n := div(n, 2)\\n                    } n {\\n                        n := div(n, 2)\\n                    } {\\n                        let xx := mul(x, x)\\n                        if iszero(eq(div(xx, x), x)) {\\n                            revert(0, 0)\\n                        }\\n                        let xxRound := add(xx, half)\\n                        if lt(xxRound, xx) {\\n                            revert(0, 0)\\n                        }\\n                        x := div(xxRound, base)\\n                        if mod(n, 2) {\\n                            let zx := mul(z, x)\\n                            if and(\\n                                iszero(iszero(x)),\\n                                iszero(eq(div(zx, x), z))\\n                            ) {\\n                                revert(0, 0)\\n                            }\\n                            let zxRound := add(zx, half)\\n                            if lt(zxRound, zx) {\\n                                revert(0, 0)\\n                            }\\n                            z := div(zxRound, base)\\n                        }\\n                    }\\n                }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TokenBase/TokenERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./TokenAdmin.sol\\\";\\n\\n/**\\n * @title dForce's lending Token ERC20 Contract\\n * @author dForce\\n */\\nabstract contract TokenERC20 is TokenAdmin {\\n    /**\\n     * @dev Transfers `_amount` tokens from `_sender` to `_recipient`.\\n     * @param _sender The address of the source account.\\n     * @param _recipient The address of the destination account.\\n     * @param _amount The number of tokens to transfer.\\n     */\\n    function _transferTokens(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) internal returns (bool) {\\n        require(\\n            _sender != _recipient,\\n            \\\"_transferTokens: Do not self-transfer!\\\"\\n        );\\n\\n        controller.beforeTransfer(address(this), _sender, _recipient, _amount);\\n\\n        _transfer(_sender, _recipient, _amount);\\n\\n        controller.afterTransfer(address(this), _sender, _recipient, _amount);\\n\\n        return true;\\n    }\\n\\n    //----------------------------------\\n    //********* ERC20 Actions **********\\n    //----------------------------------\\n\\n    /**\\n     * @notice Cause iToken is an ERC20 token, so users can `transfer` them,\\n     *         but this action is only allowed when after transferring tokens, the caller\\n     *         does not have a shortfall.\\n     * @dev Moves `_amount` tokens from caller to `_recipient`.\\n     * @param _recipient The address of the destination account.\\n     * @param _amount The number of tokens to transfer.\\n     */\\n    function transfer(address _recipient, uint256 _amount)\\n        public\\n        virtual\\n        override\\n        nonReentrant\\n        returns (bool)\\n    {\\n        return _transferTokens(msg.sender, _recipient, _amount);\\n    }\\n\\n    /**\\n     * @notice Cause iToken is an ERC20 token, so users can `transferFrom` them,\\n     *         but this action is only allowed when after transferring tokens, the `_sender`\\n     *         does not have a shortfall.\\n     * @dev Moves `_amount` tokens from `_sender` to `_recipient`.\\n     * @param _sender The address of the source account.\\n     * @param _recipient The address of the destination account.\\n     * @param _amount The number of tokens to transfer.\\n     */\\n    function transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) public virtual override nonReentrant returns (bool) {\\n        _approve(\\n            _sender,\\n            msg.sender, // spender\\n            allowance[_sender][msg.sender].sub(_amount)\\n        );\\n        return _transferTokens(_sender, _recipient, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TokenBase/TokenAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./TokenEvent.sol\\\";\\n\\n/**\\n * @title dForce's lending Token admin Contract\\n * @author dForce\\n */\\nabstract contract TokenAdmin is TokenEvent {\\n    //----------------------------------\\n    //********* Owner Actions **********\\n    //----------------------------------\\n\\n    modifier settleInterest() {\\n        // Accrues interest.\\n        _updateInterest();\\n        require(\\n            accrualBlockNumber == block.number,\\n            \\\"settleInterest: Fail to accrue interest!\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Sets a new controller.\\n     */\\n    function _setController(IControllerInterface _newController)\\n        external\\n        virtual\\n        onlyOwner\\n    {\\n        IControllerInterface _oldController = controller;\\n        // Ensures the input address is a controller contract.\\n        require(\\n            _newController.isController(),\\n            \\\"_setController: This is not the controller contract!\\\"\\n        );\\n\\n        // Sets to new controller.\\n        controller = _newController;\\n\\n        emit NewController(_oldController, _newController);\\n    }\\n\\n    /**\\n     * @dev Sets a new interest rate model.\\n     * @param _newInterestRateModel The new interest rate model.\\n     */\\n    function _setInterestRateModel(\\n        IInterestRateModelInterface _newInterestRateModel\\n    ) external virtual onlyOwner {\\n        // Gets current interest rate model.\\n        IInterestRateModelInterface _oldInterestRateModel = interestRateModel;\\n\\n        // Ensures the input address is the interest model contract.\\n        require(\\n            _newInterestRateModel.isInterestRateModel(),\\n            \\\"_setInterestRateModel: This is not the rate model contract!\\\"\\n        );\\n\\n        // Set to the new interest rate model.\\n        interestRateModel = _newInterestRateModel;\\n\\n        emit NewInterestRateModel(_oldInterestRateModel, _newInterestRateModel);\\n    }\\n\\n    /**\\n     * @dev Sets a new reserve ratio.\\n     */\\n    function _setNewReserveRatio(uint256 _newReserveRatio)\\n        external\\n        virtual\\n        onlyOwner\\n        settleInterest\\n    {\\n        require(\\n            _newReserveRatio <= maxReserveRatio,\\n            \\\"_setNewReserveRatio: New reserve ratio too large!\\\"\\n        );\\n\\n        // Gets current reserve ratio.\\n        uint256 _oldReserveRatio = reserveRatio;\\n\\n        // Sets new reserve ratio.\\n        reserveRatio = _newReserveRatio;\\n\\n        emit NewReserveRatio(_oldReserveRatio, _newReserveRatio);\\n    }\\n\\n    /**\\n     * @dev Sets a new flashloan fee ratio.\\n     */\\n    function _setNewFlashloanFeeRatio(uint256 _newFlashloanFeeRatio)\\n        external\\n        virtual\\n        onlyOwner\\n        settleInterest\\n    {\\n        require(\\n            _newFlashloanFeeRatio <= BASE,\\n            \\\"setNewFlashloanFeeRatio: New flashloan ratio too large!\\\"\\n        );\\n\\n        // Gets current reserve ratio.\\n        uint256 _oldFlashloanFeeRatio = flashloanFeeRatio;\\n\\n        // Sets new reserve ratio.\\n        flashloanFeeRatio = _newFlashloanFeeRatio;\\n\\n        emit NewFlashloanFeeRatio(_oldFlashloanFeeRatio, _newFlashloanFeeRatio);\\n    }\\n\\n    /**\\n     * @dev Sets a new protocol fee ratio.\\n     */\\n    function _setNewProtocolFeeRatio(uint256 _newProtocolFeeRatio)\\n        external\\n        virtual\\n        onlyOwner\\n        settleInterest\\n    // nonReentrant\\n    {\\n        require(\\n            _newProtocolFeeRatio <= BASE,\\n            \\\"_setNewProtocolFeeRatio: New protocol ratio too large!\\\"\\n        );\\n\\n        // Gets current reserve ratio.\\n        uint256 _oldProtocolFeeRatio = protocolFeeRatio;\\n\\n        // Sets new reserve ratio.\\n        protocolFeeRatio = _newProtocolFeeRatio;\\n\\n        emit NewProtocolFeeRatio(_oldProtocolFeeRatio, _newProtocolFeeRatio);\\n    }\\n\\n    /**\\n     * @dev Admin withdraws `_withdrawAmount` of the iToken.\\n     * @param _withdrawAmount Amount of reserves to withdraw.\\n     */\\n    function _withdrawReserves(uint256 _withdrawAmount)\\n        external\\n        virtual\\n        onlyOwner\\n        settleInterest\\n    // nonReentrant\\n    {\\n        require(\\n            _withdrawAmount <= totalReserves &&\\n                _withdrawAmount <= _getCurrentCash(),\\n            \\\"_withdrawReserves: Invalid withdraw amount and do not have enough cash!\\\"\\n        );\\n\\n        uint256 _oldTotalReserves = totalReserves;\\n        // Updates total amount of the reserves.\\n        totalReserves = totalReserves.sub(_withdrawAmount);\\n\\n        // Transfers reserve to the owner.\\n        _doTransferOut(owner, _withdrawAmount);\\n\\n        emit ReservesWithdrawn(\\n            owner,\\n            _withdrawAmount,\\n            totalReserves,\\n            _oldTotalReserves\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculates interest and update total borrows and reserves.\\n     * @dev Updates total borrows and reserves with any accumulated interest.\\n     */\\n    function _updateInterest() internal virtual;\\n\\n    /**\\n     * @dev Transfers underlying token out.\\n     */\\n    function _doTransferOut(address payable _recipient, uint256 _amount)\\n        internal\\n        virtual;\\n\\n    /**\\n     * @dev Total amount of reserves owned by this contract.\\n     */\\n    function _getCurrentCash() internal view virtual returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/TokenBase/TokenEvent.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./TokenStorage.sol\\\";\\n\\n/**\\n * @title dForce's lending Token event Contract\\n * @author dForce\\n */\\ncontract TokenEvent is TokenStorage {\\n    //----------------------------------\\n    //********** User Events ***********\\n    //----------------------------------\\n\\n    event UpdateInterest(\\n        uint256 currentBlockNumber,\\n        uint256 interestAccumulated,\\n        uint256 borrowIndex,\\n        uint256 cash,\\n        uint256 totalBorrows,\\n        uint256 totalReserves\\n    );\\n\\n    event Mint(\\n        address sender,\\n        address recipient,\\n        uint256 mintAmount,\\n        uint256 mintTokens\\n    );\\n\\n    event Redeem(\\n        address from,\\n        address recipient,\\n        uint256 redeemiTokenAmount,\\n        uint256 redeemUnderlyingAmount\\n    );\\n\\n    /**\\n     * @dev Emits when underlying is borrowed.\\n     */\\n    event Borrow(\\n        address borrower,\\n        uint256 borrowAmount,\\n        uint256 accountBorrows,\\n        uint256 accountInterestIndex,\\n        uint256 totalBorrows\\n    );\\n\\n    event RepayBorrow(\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 accountBorrows,\\n        uint256 accountInterestIndex,\\n        uint256 totalBorrows\\n    );\\n\\n    event LiquidateBorrow(\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        address iTokenCollateral,\\n        uint256 seizeTokens\\n    );\\n\\n    event Flashloan(\\n        address loaner,\\n        uint256 loanAmount,\\n        uint256 flashloanFee,\\n        uint256 protocolFee,\\n        uint256 timestamp\\n    );\\n\\n    //----------------------------------\\n    //********** Owner Events **********\\n    //----------------------------------\\n\\n    event NewReserveRatio(uint256 oldReserveRatio, uint256 newReserveRatio);\\n    event NewFlashloanFeeRatio(\\n        uint256 oldFlashloanFeeRatio,\\n        uint256 newFlashloanFeeRatio\\n    );\\n    event NewProtocolFeeRatio(\\n        uint256 oldProtocolFeeRatio,\\n        uint256 newProtocolFeeRatio\\n    );\\n    event NewFlashloanFee(\\n        uint256 oldFlashloanFeeRatio,\\n        uint256 newFlashloanFeeRatio,\\n        uint256 oldProtocolFeeRatio,\\n        uint256 newProtocolFeeRatio\\n    );\\n\\n    event NewInterestRateModel(\\n        IInterestRateModelInterface oldInterestRateModel,\\n        IInterestRateModelInterface newInterestRateModel\\n    );\\n\\n    event NewController(\\n        IControllerInterface oldController,\\n        IControllerInterface newController\\n    );\\n\\n    event ReservesWithdrawn(\\n        address admin,\\n        uint256 amount,\\n        uint256 newTotalReserves,\\n        uint256 oldTotalReserves\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/TokenBase/TokenStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"../library/Initializable.sol\\\";\\nimport \\\"../library/ReentrancyGuard.sol\\\";\\nimport \\\"../library/Ownable.sol\\\";\\nimport \\\"../library/ERC20.sol\\\";\\n\\nimport \\\"../interface/IInterestRateModelInterface.sol\\\";\\nimport \\\"../interface/IControllerInterface.sol\\\";\\n\\n/**\\n * @title dForce's lending Token storage Contract\\n * @author dForce\\n */\\ncontract TokenStorage is Initializable, ReentrancyGuard, Ownable, ERC20 {\\n    //----------------------------------\\n    //********* Token Storage **********\\n    //----------------------------------\\n\\n    uint256 constant BASE = 1e18;\\n\\n    /**\\n     * @dev Whether this token is supported in the market or not.\\n     */\\n    bool public constant isSupported = true;\\n\\n    /**\\n     * @dev Maximum borrow rate(0.1% per block, scaled by 1e18).\\n     */\\n    uint256 constant maxBorrowRate = 0.001e18;\\n\\n    /**\\n     * @dev Interest ratio set aside for reserves(scaled by 1e18).\\n     */\\n    uint256 public reserveRatio;\\n\\n    /**\\n     * @dev Maximum interest ratio that can be set aside for reserves(scaled by 1e18).\\n     */\\n    uint256 constant maxReserveRatio = 1e18;\\n\\n    /**\\n     * @notice This ratio is relative to the total flashloan fee.\\n     * @dev Flash loan fee rate(scaled by 1e18).\\n     */\\n    uint256 public flashloanFeeRatio;\\n\\n    /**\\n     * @notice This ratio is relative to the total flashloan fee.\\n     * @dev Protocol fee rate when a flashloan happens(scaled by 1e18);\\n     */\\n    uint256 public protocolFeeRatio;\\n\\n    /**\\n     * @dev Underlying token address.\\n     */\\n    IERC20Upgradeable public underlying;\\n\\n    /**\\n     * @dev Current interest rate model contract.\\n     */\\n    IInterestRateModelInterface public interestRateModel;\\n\\n    /**\\n     * @dev Core control of the contract.\\n     */\\n    IControllerInterface public controller;\\n\\n    /**\\n     * @dev Initial exchange rate(scaled by 1e18).\\n     */\\n    uint256 constant initialExchangeRate = 1e18;\\n\\n    /**\\n     * @dev The interest index for borrows of asset as of blockNumber.\\n     */\\n    uint256 public borrowIndex;\\n\\n    /**\\n     * @dev Block number that interest was last accrued at.\\n     */\\n    uint256 public accrualBlockNumber;\\n\\n    /**\\n     * @dev Total amount of this reserve borrowed.\\n     */\\n    uint256 public totalBorrows;\\n\\n    /**\\n     * @dev Total amount of this reserves accrued.\\n     */\\n    uint256 public totalReserves;\\n\\n    /**\\n     * @dev Container for user balance information written to storage.\\n     * @param principal User total balance with accrued interest after applying the user's most recent balance-changing action.\\n     * @param interestIndex The total interestIndex as calculated after applying the user's most recent balance-changing action.\\n     */\\n    struct BorrowSnapshot {\\n        uint256 principal;\\n        uint256 interestIndex;\\n    }\\n\\n    /**\\n     * @dev 2-level map: userAddress -> assetAddress -> balance for borrows.\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 chainId, uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        0x576144ed657c8304561e56ca632e17751956250114636e8c01f64a7f2c6d98cf;\\n    mapping(address => uint256) public nonces;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/library/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            !_initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        _;\\n\\n        _initialized = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/library/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\n// abstract contract ReentrancyGuardUpgradeable is Initializable {\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/library/Ownable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {_setPendingOwner} and {_acceptOwner}.\\n */\\ncontract Ownable {\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    address payable public owner;\\n\\n    /**\\n     * @dev Returns the address of the current pending owner.\\n     */\\n    address payable public pendingOwner;\\n\\n    event NewOwner(address indexed previousOwner, address indexed newOwner);\\n    event NewPendingOwner(\\n        address indexed oldPendingOwner,\\n        address indexed newPendingOwner\\n    );\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"onlyOwner: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal {\\n        owner = msg.sender;\\n        emit NewOwner(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @notice Base on the inputing parameter `newPendingOwner` to check the exact error reason.\\n     * @dev Transfer contract control to a new owner. The newPendingOwner must call `_acceptOwner` to finish the transfer.\\n     * @param newPendingOwner New pending owner.\\n     */\\n    function _setPendingOwner(address payable newPendingOwner)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            newPendingOwner != address(0) && newPendingOwner != pendingOwner,\\n            \\\"_setPendingOwner: New owenr can not be zero address and owner has been set!\\\"\\n        );\\n\\n        // Gets current owner.\\n        address oldPendingOwner = pendingOwner;\\n\\n        // Sets new pending owner.\\n        pendingOwner = newPendingOwner;\\n\\n        emit NewPendingOwner(oldPendingOwner, newPendingOwner);\\n    }\\n\\n    /**\\n     * @dev Accepts the admin rights, but only for pendingOwenr.\\n     */\\n    function _acceptOwner() external {\\n        require(\\n            msg.sender == pendingOwner,\\n            \\\"_acceptOwner: Only for pending owner!\\\"\\n        );\\n\\n        // Gets current values for events.\\n        address oldOwner = owner;\\n        address oldPendingOwner = pendingOwner;\\n\\n        // Set the new contract owner.\\n        owner = pendingOwner;\\n\\n        // Clear the pendingOwner.\\n        pendingOwner = address(0);\\n\\n        emit NewOwner(oldOwner, owner);\\n        emit NewPendingOwner(oldPendingOwner, pendingOwner);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/library/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 {\\n    using SafeMathUpgradeable for uint256;\\n\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n    uint256 public totalSupply;\\n\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) internal {\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, msg.sender, allowance[sender][msg.sender].sub(amount));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            allowance[msg.sender][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            allowance[msg.sender][spender].sub(subtractedValue)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        balanceOf[sender] = balanceOf[sender].sub(amount);\\n        balanceOf[recipient] = balanceOf[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        totalSupply = totalSupply.add(amount);\\n        balanceOf[account] = balanceOf[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        balanceOf[account] = balanceOf[account].sub(amount);\\n        totalSupply = totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance if caller is not the `account`.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller other than `msg.sender` must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal virtual {\\n        if (msg.sender != account)\\n            _approve(\\n                account,\\n                msg.sender,\\n                allowance[account][msg.sender].sub(amount)\\n            );\\n\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        allowance[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IInterestRateModelInterface.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/**\\n * @title dForce Lending Protocol's InterestRateModel Interface.\\n * @author dForce Team.\\n */\\ninterface IInterestRateModelInterface {\\n    function isInterestRateModel() external view returns (bool);\\n\\n    /**\\n     * @dev Calculates the current borrow interest rate per block.\\n     * @param cash The total amount of cash the market has.\\n     * @param borrows The total amount of borrows the market has.\\n     * @param reserves The total amnount of reserves the market has.\\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18).\\n     */\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Calculates the current supply interest rate per block.\\n     * @param cash The total amount of cash the market has.\\n     * @param borrows The total amount of borrows the market has.\\n     * @param reserves The total amnount of reserves the market has.\\n     * @param reserveRatio The current reserve factor the market has.\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18).\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveRatio\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IControllerInterface.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IControllerAdminInterface {\\n    /// @notice Emitted when an admin supports a market\\n    event MarketAdded(\\n        address iToken,\\n        uint256 collateralFactor,\\n        uint256 borrowFactor,\\n        uint256 supplyCapacity,\\n        uint256 borrowCapacity,\\n        uint256 distributionFactor\\n    );\\n\\n    function _addMarket(\\n        address _iToken,\\n        uint256 _collateralFactor,\\n        uint256 _borrowFactor,\\n        uint256 _supplyCapacity,\\n        uint256 _borrowCapacity,\\n        uint256 _distributionFactor\\n    ) external;\\n\\n    /// @notice Emitted when new price oracle is set\\n    event NewPriceOracle(address oldPriceOracle, address newPriceOracle);\\n\\n    function _setPriceOracle(address newOracle) external;\\n\\n    /// @notice Emitted when close factor is changed by admin\\n    event NewCloseFactor(\\n        uint256 oldCloseFactorMantissa,\\n        uint256 newCloseFactorMantissa\\n    );\\n\\n    function _setCloseFactor(uint256 newCloseFactorMantissa) external;\\n\\n    /// @notice Emitted when liquidation incentive is changed by admin\\n    event NewLiquidationIncentive(\\n        uint256 oldLiquidationIncentiveMantissa,\\n        uint256 newLiquidationIncentiveMantissa\\n    );\\n\\n    function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa)\\n        external;\\n\\n    /// @notice Emitted when iToken's collateral factor is changed by admin\\n    event NewCollateralFactor(\\n        address iToken,\\n        uint256 oldCollateralFactorMantissa,\\n        uint256 newCollateralFactorMantissa\\n    );\\n\\n    function _setCollateralFactor(\\n        address iToken,\\n        uint256 newCollateralFactorMantissa\\n    ) external;\\n\\n    /// @notice Emitted when iToken's borrow factor is changed by admin\\n    event NewBorrowFactor(\\n        address iToken,\\n        uint256 oldBorrowFactorMantissa,\\n        uint256 newBorrowFactorMantissa\\n    );\\n\\n    function _setBorrowFactor(address iToken, uint256 newBorrowFactorMantissa)\\n        external;\\n\\n    /// @notice Emitted when iToken's borrow capacity is changed by admin\\n    event NewBorrowCapacity(\\n        address iToken,\\n        uint256 oldBorrowCapacity,\\n        uint256 newBorrowCapacity\\n    );\\n\\n    function _setBorrowCapacity(address iToken, uint256 newBorrowCapacity)\\n        external;\\n\\n    /// @notice Emitted when iToken's supply capacity is changed by admin\\n    event NewSupplyCapacity(\\n        address iToken,\\n        uint256 oldSupplyCapacity,\\n        uint256 newSupplyCapacity\\n    );\\n\\n    function _setSupplyCapacity(address iToken, uint256 newSupplyCapacity)\\n        external;\\n\\n    /// @notice Emitted when pause guardian is changed by admin\\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\\n\\n    function _setPauseGuardian(address newPauseGuardian) external;\\n\\n    /// @notice Emitted when mint is paused/unpaused by admin or pause guardian\\n    event MintPaused(address iToken, bool paused);\\n\\n    function _setMintPaused(address iToken, bool paused) external;\\n\\n    function _setAllMintPaused(bool paused) external;\\n\\n    /// @notice Emitted when redeem is paused/unpaused by admin or pause guardian\\n    event RedeemPaused(address iToken, bool paused);\\n\\n    function _setRedeemPaused(address iToken, bool paused) external;\\n\\n    function _setAllRedeemPaused(bool paused) external;\\n\\n    /// @notice Emitted when borrow is paused/unpaused by admin or pause guardian\\n    event BorrowPaused(address iToken, bool paused);\\n\\n    function _setBorrowPaused(address iToken, bool paused) external;\\n\\n    function _setAllBorrowPaused(bool paused) external;\\n\\n    /// @notice Emitted when transfer is paused/unpaused by admin or pause guardian\\n    event TransferPaused(bool paused);\\n\\n    function _setTransferPaused(bool paused) external;\\n\\n    /// @notice Emitted when seize is paused/unpaused by admin or pause guardian\\n    event SeizePaused(bool paused);\\n\\n    function _setSeizePaused(bool paused) external;\\n\\n    function _setiTokenPaused(address iToken, bool paused) external;\\n\\n    function _setProtocolPaused(bool paused) external;\\n\\n    event NewRewardDistributor(\\n        address oldRewardDistributor,\\n        address _newRewardDistributor\\n    );\\n\\n    function _setRewardDistributor(address _newRewardDistributor) external;\\n}\\n\\ninterface IControllerPolicyInterface {\\n    function beforeMint(\\n        address iToken,\\n        address account,\\n        uint256 mintAmount\\n    ) external;\\n\\n    function afterMint(\\n        address iToken,\\n        address minter,\\n        uint256 mintAmount,\\n        uint256 mintedAmount\\n    ) external;\\n\\n    function beforeRedeem(\\n        address iToken,\\n        address redeemer,\\n        uint256 redeemAmount\\n    ) external;\\n\\n    function afterRedeem(\\n        address iToken,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemedAmount\\n    ) external;\\n\\n    function beforeBorrow(\\n        address iToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external;\\n\\n    function afterBorrow(\\n        address iToken,\\n        address borrower,\\n        uint256 borrowedAmount\\n    ) external;\\n\\n    function beforeRepayBorrow(\\n        address iToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external;\\n\\n    function afterRepayBorrow(\\n        address iToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external;\\n\\n    function beforeLiquidateBorrow(\\n        address iTokenBorrowed,\\n        address iTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external;\\n\\n    function afterLiquidateBorrow(\\n        address iTokenBorrowed,\\n        address iTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repaidAmount,\\n        uint256 seizedAmount\\n    ) external;\\n\\n    function beforeSeize(\\n        address iTokenBorrowed,\\n        address iTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeAmount\\n    ) external;\\n\\n    function afterSeize(\\n        address iTokenBorrowed,\\n        address iTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizedAmount\\n    ) external;\\n\\n    function beforeTransfer(\\n        address iToken,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function afterTransfer(\\n        address iToken,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function beforeFlashloan(\\n        address iToken,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function afterFlashloan(\\n        address iToken,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\\ninterface IControllerAccountEquityInterface {\\n    function calcAccountEquity(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function liquidateCalculateSeizeTokens(\\n        address iTokenBorrowed,\\n        address iTokenCollateral,\\n        uint256 actualRepayAmount\\n    ) external view returns (uint256);\\n}\\n\\ninterface IControllerAccountInterface {\\n    function hasEnteredMarket(address account, address iToken)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getEnteredMarkets(address account)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    /// @notice Emitted when an account enters a market\\n    event MarketEntered(address iToken, address account);\\n\\n    function enterMarkets(address[] calldata iTokens)\\n        external\\n        returns (bool[] memory);\\n\\n    function enterMarketFromiToken(address _account) external;\\n\\n    /// @notice Emitted when an account exits a market\\n    event MarketExited(address iToken, address account);\\n\\n    function exitMarkets(address[] calldata iTokens)\\n        external\\n        returns (bool[] memory);\\n\\n    /// @notice Emitted when an account add a borrow asset\\n    event BorrowedAdded(address iToken, address account);\\n\\n    /// @notice Emitted when an account remove a borrow asset\\n    event BorrowedRemoved(address iToken, address account);\\n\\n    function hasBorrowed(address account, address iToken)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getBorrowedAssets(address account)\\n        external\\n        view\\n        returns (address[] memory);\\n}\\n\\ninterface IControllerInterface is\\n    IControllerAdminInterface,\\n    IControllerPolicyInterface,\\n    IControllerAccountEquityInterface,\\n    IControllerAccountInterface\\n{\\n    /**\\n     * @notice Security checks when updating the comptroller of a market, always expect to return true.\\n     */\\n    function isController() external view returns (bool);\\n\\n    /**\\n     * @notice Return all of the iTokens\\n     * @return The list of iToken addresses\\n     */\\n    function getAlliTokens() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Check whether a iToken is listed in controller\\n     * @param _iToken The iToken to check for\\n     * @return true if the iToken is listed otherwise false\\n     */\\n    function hasiToken(address _iToken) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountInterestIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loaner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flashloanFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Flashloan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"iTokenCollateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"LiquidateBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IControllerInterface\",\"name\":\"oldController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IControllerInterface\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"NewController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFlashloanFeeRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFlashloanFeeRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProtocolFeeRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProtocolFeeRatio\",\"type\":\"uint256\"}],\"name\":\"NewFlashloanFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFlashloanFeeRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFlashloanFeeRatio\",\"type\":\"uint256\"}],\"name\":\"NewFlashloanFeeRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IInterestRateModelInterface\",\"name\":\"oldInterestRateModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IInterestRateModelInterface\",\"name\":\"newInterestRateModel\",\"type\":\"address\"}],\"name\":\"NewInterestRateModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract MSDController\",\"name\":\"oldMSDController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract MSDController\",\"name\":\"newMSDController\",\"type\":\"address\"}],\"name\":\"NewMSDController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPendingOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"NewPendingOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProtocolFeeRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProtocolFeeRatio\",\"type\":\"uint256\"}],\"name\":\"NewProtocolFeeRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldReserveRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReserveRatio\",\"type\":\"uint256\"}],\"name\":\"NewReserveRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemiTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemUnderlyingAmount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountInterestIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"RepayBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalReserves\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTotalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBlockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAccumulated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"}],\"name\":\"UpdateInterest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_acceptOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IControllerInterface\",\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"_setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IInterestRateModelInterface\",\"name\":\"_newInterestRateModel\",\"type\":\"address\"}],\"name\":\"_setInterestRateModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MSDController\",\"name\":\"_newMSDController\",\"type\":\"address\"}],\"name\":\"_setMSDController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFlashloanFeeRatio\",\"type\":\"uint256\"}],\"name\":\"_setNewFlashloanFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newProtocolFeeRatio\",\"type\":\"uint256\"}],\"name\":\"_setNewProtocolFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newReserveRatio\",\"type\":\"uint256\"}],\"name\":\"_setNewReserveRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"_setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"_withdrawReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrualBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"borrowBalanceCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"borrowBalanceStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"borrowSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IControllerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashloanFeeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"contract IControllerInterface\",\"name\":\"_lendingController\",\"type\":\"address\"},{\"internalType\":\"contract IInterestRateModelInterface\",\"name\":\"_interestRateModel\",\"type\":\"address\"},{\"internalType\":\"contract MSDController\",\"name\":\"_msdController\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateModel\",\"outputs\":[{\"internalType\":\"contract IInterestRateModelInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isiToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_assetCollateral\",\"type\":\"address\"}],\"name\":\"liquidateBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"msdController\",\"outputs\":[{\"internalType\":\"contract MSDController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrowBehalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrowsCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateInterest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"iMSD","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}