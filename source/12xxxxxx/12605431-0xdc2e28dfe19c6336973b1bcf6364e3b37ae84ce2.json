{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Swap {\r\n    address private constant CONST_BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\r\n    \r\n    address public OWNER;\r\n    address public NEW_TOKEN_ADDRESS;\r\n    address[] public OLD_TOKEN_ADDRESS;\r\n    uint256[] public CONVERSION_RATE_PER_MILLE;\r\n    \r\n    event TokenSwapped (address requestor, address inputToken, uint256 inputQuantity, uint256 outputQuantity);\r\n    \r\n    constructor (address owner, address newTokenAddress, address[] memory oldTokenAddress, uint256[] memory conversionRatePerMille) public {\r\n        OWNER = owner;\r\n        NEW_TOKEN_ADDRESS = newTokenAddress;\r\n        OLD_TOKEN_ADDRESS = oldTokenAddress;\r\n        CONVERSION_RATE_PER_MILLE = conversionRatePerMille;\r\n    }\r\n\r\n    function checkResult (uint256 oldTokenIndex, uint256 inputQuantity) public view returns (uint256) {\r\n        uint256 conversionRate = CONVERSION_RATE_PER_MILLE[oldTokenIndex];\r\n        return (conversionRate * inputQuantity) / 1000;\r\n    }\r\n\r\n    function doSwap (uint256 oldTokenIndex, uint256 inputQuantity) public {\r\n        require(inputQuantity > 0, \"Invalid input quantity\");\r\n        require(oldTokenIndex < OLD_TOKEN_ADDRESS.length, \"Out of index\");\r\n        \r\n        IERC20 oldTokenObj = IERC20(OLD_TOKEN_ADDRESS[oldTokenIndex]);\r\n        IERC20 newTokenObj = IERC20(NEW_TOKEN_ADDRESS);\r\n        \r\n        uint256 outputQuantity = checkResult(oldTokenIndex, inputQuantity);\r\n        require(newTokenObj.balanceOf(address(this)) >= outputQuantity, \"New token isnt ready\");\r\n\r\n        uint256 balanceBefore = oldTokenObj.balanceOf(CONST_BURN_ADDRESS);\r\n        oldTokenObj.transferFrom(msg.sender, CONST_BURN_ADDRESS, inputQuantity);\r\n        uint256 balanceAfter = oldTokenObj.balanceOf(CONST_BURN_ADDRESS);\r\n        require(balanceBefore + inputQuantity == balanceAfter, \"Old token isnt arrived\");\r\n        \r\n        newTokenObj.transfer(msg.sender, outputQuantity);\r\n        emit TokenSwapped (msg.sender, OLD_TOKEN_ADDRESS[oldTokenIndex], inputQuantity, outputQuantity);\r\n    }\r\n    \r\n    function drawToken (address token, uint256 quantity, address to) public {\r\n        require (msg.sender == OWNER, \"Only Owner can do\");\r\n        \r\n        IERC20 tokenObj = IERC20(token);\r\n        require (tokenObj.balanceOf(address(this)) >= quantity, \"Balance insufficient\");\r\n        \r\n        tokenObj.transfer(to, quantity);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"oldTokenAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"conversionRatePerMille\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requestor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputQuantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputQuantity\",\"type\":\"uint256\"}],\"name\":\"TokenSwapped\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CONVERSION_RATE_PER_MILLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NEW_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"OLD_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldTokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inputQuantity\",\"type\":\"uint256\"}],\"name\":\"checkResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldTokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inputQuantity\",\"type\":\"uint256\"}],\"name\":\"doSwap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"drawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Swap","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000078ad7dc13e9f03627f9d873d3a291b22fe3927470000000000000000000000002fdf40c484b1bd6f1c214acac737fedc8b03e5a8000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000ca2796f9f61dc7b238aab043971e49c6164df37500000000000000000000000013cb85823f78cff38f0b0e90d3e975b8cb3aad64000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000001f4","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://7e4ab0d73edd4634262185afab6056dbb2dd918fd4efc975baccd023e884cc9d"}]}