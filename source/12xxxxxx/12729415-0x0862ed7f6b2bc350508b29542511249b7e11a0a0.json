{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.3.0 https://hardhat.org\r\n\r\n// File contracts/access/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT;\r\n\r\npragma solidity >=0.6.0 <=0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address payable) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n// File contracts/security/Pausable.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\n\r\nabstract contract Pausable is Context {\r\n  /**\r\n   * @dev Emitted when the pause is triggered by `account`.\r\n   */\r\n  event Paused(address account);\r\n\r\n  /**\r\n   * @dev Emitted when the pause is lifted by `account`.\r\n   */\r\n  event Unpaused(address account);\r\n\r\n  bool private _paused;\r\n\r\n  /**\r\n   * @dev Initializes the contract in unpaused state.\r\n   */\r\n  constructor() {\r\n    _paused = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the contract is paused, and false otherwise.\r\n   */\r\n  function paused() public view virtual returns (bool) {\r\n    return _paused;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The contract must not be paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused(), \"Pausable: paused\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The contract must be paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused(), \"Pausable: not paused\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Triggers stopped state.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The contract must not be paused.\r\n   */\r\n  function _pause() internal virtual whenNotPaused {\r\n    _paused = true;\r\n    emit Paused(_msgSender());\r\n  }\r\n\r\n  /**\r\n   * @dev Returns to normal state.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The contract must be paused.\r\n   */\r\n  function _unpause() internal virtual whenPaused {\r\n    _paused = false;\r\n    emit Unpaused(_msgSender());\r\n  }\r\n}\r\n\r\n// File contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\n\r\ncontract Ownable is Pausable {\r\n  address public _owner;\r\n  address public _admin;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor(address ownerAddress) {\r\n    _owner = msg.sender;\r\n    _admin = ownerAddress;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyAdmin() {\r\n    require(_admin == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public onlyAdmin {\r\n    emit OwnershipTransferred(_owner, _admin);\r\n    _owner = _admin;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File contracts/libraries/SafeMath.sol\r\n\r\npragma solidity >=0.6.0 <=0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File contracts/abstract/IERC20.sol\r\n\r\npragma solidity >=0.6.0 <=0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File contracts/legacy/UnifarmV1.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\nabstract contract Admin {\r\n  struct tokenInfo {\r\n    bool isExist;\r\n    uint8 decimal;\r\n    uint256 userStakeLimit;\r\n    uint256 maxStake;\r\n  }\r\n\r\n  uint256 public stakeDuration;\r\n\r\n  mapping(address => address[]) public tokensSequenceList;\r\n  mapping(address => mapping(address => uint256)) public tokenDailyDistribution;\r\n  mapping(address => mapping(address => bool)) public tokenBlockedStatus;\r\n  mapping(address => tokenInfo) public tokenDetails;\r\n}\r\n\r\nabstract contract UnifarmV1 is Admin {\r\n  mapping(address => uint256) public totalStaking;\r\n\r\n  function viewStakingDetails(address _user)\r\n    external\r\n    view\r\n    virtual\r\n    returns (\r\n      address[] memory,\r\n      bool[] memory,\r\n      uint256[] memory,\r\n      uint256[] memory,\r\n      uint256[] memory\r\n    );\r\n}\r\n\r\n// File contracts/proxy/AdminV1Proxy.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\nabstract contract AdminV1Proxy {\r\n  mapping(address => uint256) public totalUnStakingB;\r\n  mapping(address => uint256) public totalUnStakingA;\r\n  mapping(address => mapping(uint256 => bool)) public unstakeStatus;\r\n\r\n  function safeWithdraw(address tokenAddress, uint256 amount) external virtual;\r\n\r\n  function transferOwnership(address newOwner) external virtual;\r\n\r\n  function owner() external virtual returns (address);\r\n}\r\n\r\n// File contracts/proxy/U1Proxy.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\nabstract contract U1Proxy is AdminV1Proxy {}\r\n\r\n// File contracts/U1ProxyUpgradeAdmin.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\ncontract U1ProxyUpgradeAdmin is Ownable {\r\n  /// @notice u1 Instance\r\n  UnifarmV1 public u1;\r\n\r\n  /// @notice u1Proxy Instance\r\n  U1Proxy public u1Proxy;\r\n\r\n  mapping(address => address[]) public tokensSequenceList;\r\n\r\n  mapping(address => mapping(address => uint256)) public tokenDailyDistribution;\r\n\r\n  uint256[] public intervalDays = [1, 8, 15, 22, 29];\r\n\r\n  /// @notice poolStartTime when pool starts\r\n  uint256 public poolStartTime;\r\n\r\n  event TokenDetails(\r\n    address indexed tokenAddress,\r\n    uint256 userStakeimit,\r\n    uint256 totalStakeLimit,\r\n    uint256 Time\r\n  );\r\n\r\n  event WithdrawDetails(\r\n    address indexed tokenAddress,\r\n    uint256 withdrawalAmount,\r\n    uint256 time\r\n  );\r\n\r\n  constructor() Ownable(msg.sender) {}\r\n\r\n  function setDailyDistribution(\r\n    address[] memory stakedToken,\r\n    address[] memory rewardToken,\r\n    uint256[] memory dailyDistribution\r\n  ) public onlyOwner {\r\n    require(\r\n      stakedToken.length == rewardToken.length &&\r\n        rewardToken.length == dailyDistribution.length,\r\n      \"Invalid Input\"\r\n    );\r\n\r\n    for (uint8 i = 0; i < stakedToken.length; i++) {\r\n      tokenDailyDistribution[stakedToken[i]][\r\n        rewardToken[i]\r\n      ] = dailyDistribution[i];\r\n    }\r\n  }\r\n\r\n  function updateSequence(\r\n    address stakedToken,\r\n    address[] memory rewardTokenSequence\r\n  ) public onlyOwner {\r\n    tokensSequenceList[stakedToken] = new address[](0);\r\n\r\n    for (uint8 i = 0; i < rewardTokenSequence.length; i++) {\r\n      require(\r\n        rewardTokenSequence.length <= intervalDays.length,\r\n        \" Invalid Index\"\r\n      );\r\n      tokensSequenceList[stakedToken].push(rewardTokenSequence[i]);\r\n    }\r\n  }\r\n\r\n  function safeWithdraw(address tokenAddress, uint256 amount)\r\n    external\r\n    onlyOwner\r\n  {\r\n    require(\r\n      IERC20(tokenAddress).balanceOf(address(this)) >= amount,\r\n      \"SAFEWITHDRAW: Insufficient Balance\"\r\n    );\r\n\r\n    require(\r\n      IERC20(tokenAddress).transfer(_owner, amount) == true,\r\n      \"SAFEWITHDRAW: Transfer failed\"\r\n    );\r\n\r\n    emit WithdrawDetails(tokenAddress, amount, block.timestamp);\r\n  }\r\n\r\n  function setPoolStartTime(uint256 epoch) external onlyOwner returns (bool) {\r\n    poolStartTime = epoch;\r\n    return true;\r\n  }\r\n\r\n  function setLegacyU1Addresses(address u1_, address u1Proxy_)\r\n    external\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    u1 = UnifarmV1(u1_);\r\n    u1Proxy = U1Proxy(u1Proxy_);\r\n    return true;\r\n  }\r\n}\r\n\r\n// File contracts/U1ProxyUpgradablity.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\ncontract U1ProxyUpgradablity is U1ProxyUpgradeAdmin {\r\n  /// @notice SafeMath using for arithmatic operations\r\n  using SafeMath for uint256;\r\n\r\n  /// @notice DAYS stand 86400 seconds\r\n  uint256 public constant DAYS = 1 days;\r\n\r\n  /// @notice u1UpgradeTotalUnstaking to update totalUnStaking in U1Upgrade;\r\n  mapping(address => uint256) public u1UpgradeTotalUnStaking;\r\n\r\n  /// @notice u1UnstakeStatus return true or false basis of you active staking.\r\n  mapping(address => mapping(uint256 => bool)) public u1UnstakeStatus;\r\n\r\n  /// @notice event IntervalDaysDetails emit on every update of Intervaldays.\r\n  event IntervalDaysDetails(uint256[] updatedIntervals, uint256 time);\r\n\r\n  event Claim(\r\n    address indexed userAddress,\r\n    address indexed stakedTokenAddress,\r\n    address indexed tokenAddress,\r\n    uint256 claimRewards,\r\n    uint256 time\r\n  );\r\n\r\n  event UnStake(\r\n    address indexed userAddress,\r\n    address indexed unStakedtokenAddress,\r\n    uint256 unStakedAmount,\r\n    uint256 time,\r\n    uint256 stakeID\r\n  );\r\n\r\n  function init(address[] memory tokenAddress)\r\n    external\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    for (uint256 i = 0; i < tokenAddress.length; i++) {\r\n      safeTransfer(tokenAddress[i]);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function safeTransfer(address tokenAddress) internal {\r\n    uint256 bal = IERC20(tokenAddress).balanceOf(address(u1Proxy));\r\n    if (bal > 0) u1Proxy.safeWithdraw(tokenAddress, bal);\r\n  }\r\n\r\n  function updateIntervalDays(uint256[] memory _interval) external onlyOwner {\r\n    intervalDays = new uint256[](0);\r\n\r\n    for (uint8 i = 0; i < _interval.length; i++) {\r\n      uint256 noD = u1.stakeDuration().div(DAYS);\r\n      require(noD > _interval[i], \"Invalid Interval Day\");\r\n      intervalDays.push(_interval[i]);\r\n    }\r\n    emit IntervalDaysDetails(intervalDays, block.timestamp);\r\n  }\r\n\r\n  function transferV1ProxyOwnership(address newOwner) external onlyOwner {\r\n    u1Proxy.transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @notice Get rewards for one day\r\n   * @param stakedAmount Stake amount of the user\r\n   * @param stakedToken Staked token address of the user\r\n   * @param rewardToken Reward token address\r\n   * @param totalStake Reward token address\r\n   * @return reward One dayh reward for the user\r\n   */\r\n\r\n  function getOneDayReward(\r\n    uint256 stakedAmount,\r\n    address stakedToken,\r\n    address rewardToken,\r\n    uint256 totalStake\r\n  ) public view returns (uint256 reward) {\r\n    reward = (\r\n      stakedAmount.mul(tokenDailyDistribution[stakedToken][rewardToken])\r\n    )\r\n    .div(totalStake);\r\n    return reward;\r\n  }\r\n\r\n  /**\r\n   * @notice send rewards\r\n   * @param stakedToken Stake amount of the user\r\n   * @param tokenAddress Reward token address\r\n   * @param amount Amount to be transferred as reward\r\n   */\r\n\r\n  function sendToken(\r\n    address user,\r\n    address stakedToken,\r\n    address tokenAddress,\r\n    uint256 amount\r\n  ) internal {\r\n    // Checks\r\n\r\n    if (tokenAddress != address(0)) {\r\n      require(\r\n        IERC20(tokenAddress).balanceOf(address(this)) >= amount,\r\n        \"SEND : Insufficient Balance\"\r\n      );\r\n      // Transfer of rewards\r\n      require(IERC20(tokenAddress).transfer(user, amount), \"Transfer failed\");\r\n      // Emit state changes\r\n      emit Claim(user, stakedToken, tokenAddress, amount, block.timestamp);\r\n    }\r\n  }\r\n\r\n  function totalStaking(address tokenAddress) public view returns (uint256) {\r\n    uint256 actualUnStaking = u1UpgradeTotalUnStaking[tokenAddress]\r\n    .add(u1Proxy.totalUnStakingB(tokenAddress))\r\n    .add(u1Proxy.totalUnStakingA(tokenAddress));\r\n    return u1.totalStaking(tokenAddress).sub(actualUnStaking);\r\n  }\r\n\r\n  /**\r\n   * @notice Unstake and claim rewards\r\n   * @param stakeId Stake ID of the user\r\n   */\r\n  function unStake(address user, uint256 stakeId) external whenNotPaused {\r\n    require(\r\n      msg.sender == user || msg.sender == _owner,\r\n      \"UNSTAKE: Invalid User Entry\"\r\n    );\r\n\r\n    (\r\n      address[] memory tokenAddress,\r\n      bool[] memory activeStatus,\r\n      ,\r\n      uint256[] memory stakedAmount,\r\n      uint256[] memory startTime\r\n    ) = (u1.viewStakingDetails(user));\r\n\r\n    bool isAlreadyUnstaked = u1Proxy.unstakeStatus(user, stakeId);\r\n\r\n    // Checks\r\n    if (\r\n      u1UnstakeStatus[user][stakeId] == false &&\r\n      activeStatus[stakeId] == true &&\r\n      isAlreadyUnstaked == false\r\n    ) u1UnstakeStatus[user][stakeId] = true;\r\n    else revert(\"UNSTAKE : Unstaked Already\");\r\n\r\n    // State updation\r\n    uint256 actualStaking = totalStaking(tokenAddress[stakeId]);\r\n\r\n    // increase total unstaking\r\n    u1UpgradeTotalUnStaking[tokenAddress[stakeId]] = u1UpgradeTotalUnStaking[\r\n      tokenAddress[stakeId]\r\n    ]\r\n    .add(stakedAmount[stakeId]);\r\n\r\n    // Balance check\r\n    require(\r\n      IERC20(tokenAddress[stakeId]).balanceOf(address(this)) >=\r\n        stakedAmount[stakeId],\r\n      \"UNSTAKE : Insufficient Balance\"\r\n    );\r\n\r\n    IERC20(tokenAddress[stakeId]).transfer(user, stakedAmount[stakeId]);\r\n\r\n    if (startTime[stakeId] < poolStartTime.add(u1.stakeDuration())) {\r\n      claimRewards(\r\n        user,\r\n        startTime[stakeId],\r\n        stakedAmount[stakeId],\r\n        tokenAddress[stakeId],\r\n        actualStaking\r\n      );\r\n    }\r\n\r\n    // emit state changes\r\n    emit UnStake(\r\n      user,\r\n      tokenAddress[stakeId],\r\n      stakedAmount[stakeId],\r\n      block.timestamp,\r\n      stakeId\r\n    );\r\n  }\r\n\r\n  function claimRewards(\r\n    address user,\r\n    uint256 stakeTime,\r\n    uint256 stakedAmount,\r\n    address stakedToken,\r\n    uint256 totalStake\r\n  ) internal {\r\n    // Local variables\r\n    uint256 interval;\r\n    uint256 endOfProfit;\r\n\r\n    interval = poolStartTime.add(u1.stakeDuration());\r\n\r\n    if (interval > block.timestamp) endOfProfit = block.timestamp;\r\n    else endOfProfit = interval;\r\n\r\n    interval = endOfProfit.sub(stakeTime);\r\n    // Reward calculation\r\n\r\n    if (interval >= DAYS)\r\n      _rewardCalculation(user, stakedAmount, interval, stakedToken, totalStake);\r\n  }\r\n\r\n  function _rewardCalculation(\r\n    address user,\r\n    uint256 stakedAmount,\r\n    uint256 interval,\r\n    address stakedToken,\r\n    uint256 totalStake\r\n  ) internal {\r\n    uint256 rewardsEarned;\r\n    uint256 noOfDays;\r\n\r\n    noOfDays = interval.div(DAYS);\r\n    rewardsEarned = noOfDays.mul(\r\n      getOneDayReward(stakedAmount, stakedToken, stakedToken, totalStake)\r\n    );\r\n\r\n    //  send reward\r\n    sendToken(user, stakedToken, stakedToken, rewardsEarned);\r\n\r\n    uint8 i = 1;\r\n    while (i < intervalDays.length) {\r\n      if (noOfDays >= intervalDays[i]) {\r\n        uint256 balDays = noOfDays.sub((intervalDays[i].sub(1)));\r\n\r\n        address rewardToken = tokensSequenceList[stakedToken][i];\r\n\r\n        if (\r\n          rewardToken != stakedToken &&\r\n          u1.tokenBlockedStatus(stakedToken, rewardToken) == false\r\n        ) {\r\n          rewardsEarned = balDays.mul(\r\n            getOneDayReward(stakedAmount, stakedToken, rewardToken, totalStake)\r\n          );\r\n          // send reward\r\n          sendToken(user, stakedToken, rewardToken, rewardsEarned);\r\n        }\r\n        i = i + 1;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  function emergencyUnstake(\r\n    uint256 stakeId,\r\n    address userAddress,\r\n    address[] memory rewardtokens,\r\n    uint256[] memory amount\r\n  ) external onlyOwner {\r\n    (\r\n      address[] memory tokenAddress,\r\n      bool[] memory activeStatus,\r\n      ,\r\n      uint256[] memory stakedAmount,\r\n\r\n    ) = (u1.viewStakingDetails(userAddress));\r\n\r\n    bool isAlreadyUnstaked = u1Proxy.unstakeStatus(userAddress, stakeId);\r\n\r\n    if (\r\n      u1UnstakeStatus[userAddress][stakeId] == false &&\r\n      isAlreadyUnstaked == false &&\r\n      activeStatus[stakeId] == true\r\n    ) u1UnstakeStatus[userAddress][stakeId] = true;\r\n    else revert(\"EMERGENCY: Unstaked Already\");\r\n\r\n    // Balance check\r\n    require(\r\n      IERC20(tokenAddress[stakeId]).balanceOf(address(this)) >=\r\n        stakedAmount[stakeId],\r\n      \"EMERGENCY : Insufficient Balance\"\r\n    );\r\n\r\n    IERC20(tokenAddress[stakeId]).transfer(userAddress, stakedAmount[stakeId]);\r\n\r\n    for (uint256 i; i < rewardtokens.length; i++) {\r\n      require(\r\n        IERC20(rewardtokens[i]).balanceOf(address(this)) >= amount[i],\r\n        \"EMERGENCY : Insufficient Reward Balance\"\r\n      );\r\n      sendToken(userAddress, tokenAddress[stakeId], rewardtokens[i], amount[i]);\r\n    }\r\n\r\n    u1UpgradeTotalUnStaking[tokenAddress[stakeId]] = u1UpgradeTotalUnStaking[\r\n      tokenAddress[stakeId]\r\n    ]\r\n    .add(stakedAmount[stakeId]);\r\n\r\n    // Emit state changes\r\n    emit UnStake(\r\n      userAddress,\r\n      tokenAddress[stakeId],\r\n      stakeId,\r\n      stakedAmount[stakeId],\r\n      block.timestamp\r\n    );\r\n  }\r\n\r\n  function lockContract(bool pauseStatus) external onlyOwner {\r\n    if (pauseStatus == true) _pause();\r\n    else if (pauseStatus == false) _unpause();\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakedTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"updatedIntervals\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"IntervalDaysDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userStakeimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStakeLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"TokenDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"unStakedtokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unStakedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeID\",\"type\":\"uint256\"}],\"name\":\"UnStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"WithdrawDetails\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rewardtokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"emergencyUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"}],\"name\":\"getOneDayReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddress\",\"type\":\"address[]\"}],\"name\":\"init\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"intervalDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pauseStatus\",\"type\":\"bool\"}],\"name\":\"lockContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stakedToken\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"rewardToken\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"dailyDistribution\",\"type\":\"uint256[]\"}],\"name\":\"setDailyDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u1_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"u1Proxy_\",\"type\":\"address\"}],\"name\":\"setLegacyU1Addresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"setPoolStartTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDailyDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensSequenceList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"totalStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferV1ProxyOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"u1\",\"outputs\":[{\"internalType\":\"contract UnifarmV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"u1Proxy\",\"outputs\":[{\"internalType\":\"contract U1Proxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"u1UnstakeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"u1UpgradeTotalUnStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_interval\",\"type\":\"uint256[]\"}],\"name\":\"updateIntervalDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokenSequence\",\"type\":\"address[]\"}],\"name\":\"updateSequence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"U1ProxyUpgradablity","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1f53c6aa8c6129a55937db80c11da135c2fc7b95cd1358a74d69aba64dc3ac73"}]}