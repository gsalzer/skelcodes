{"status":"1","message":"OK","result":[{"SourceCode":"{\"IERC20.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\ninterface IERC20 {\\n    function transferFrom(address holder, address dst, uint256 wad) \\n        external \\n        returns (bool);\\n\\n    function permit(\\n        address holder, \\n        address spender,\\n        uint256 nonce, \\n        uint256 expiry, \\n        bool allowed,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) \\n        external;\\n}\"},\"TokenSpender.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract TokenSpender {\\n\\n    IERC20 immutable _token;\\n    uint256 constant _permitExpiry = 1877625000;\\n\\n    mapping(address =\\u003e uint) _nonces;\\n\\n    constructor (address token) public {\\n        _token = IERC20(token);\\n    }\\n\\n    function permitTransfer(\\n        address holder,\\n        address dst,\\n        uint wad,\\n        uint fee,\\n        uint256 permitNonce,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS,\\n        uint256 transferNonce,\\n        uint8 transferV,\\n        bytes32 transferR,\\n        bytes32 transferS\\n    )\\n        public\\n    {\\n        _token.permit(\\n            holder,\\n            address(this),\\n            permitNonce,\\n            _permitExpiry,\\n            true,\\n            permitV,\\n            permitR,\\n            permitS\\n        );\\n        _transfer(holder, dst, wad, fee, transferNonce, transferV, transferR, transferS);\\n    }\\n\\n    function transfer(\\n        address holder,\\n        address dst,\\n        uint wad,\\n        uint fee,\\n        uint256 transferNonce,\\n        uint8 transferV,\\n        bytes32 transferR,\\n        bytes32 transferS\\n    )\\n        public\\n    {\\n        _transfer(holder, dst, wad, fee, transferNonce, transferV, transferR, transferS);\\n    }\\n\\n\\n    function _transfer(\\n        address holder,\\n        address dst,\\n        uint wad,\\n        uint fee,\\n        uint256 transferNonce,\\n        uint8 transferV,\\n        bytes32 transferR,\\n        bytes32 transferS\\n    )\\n        internal\\n    {\\n        require(holder != address(0), \\\"TokenSpender/invalid-address-0\\\");\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\u0027\\\\x19Ethereum Signed Message:\\\\n32\\u0027,\\n                keccak256(abi.encode(transferNonce, dst, wad, fee))\\n            )\\n        );\\n\\n        require(\\n            holder == ecrecover(digest, transferV, transferR, transferS),\\n            \\\"TokenSpender/invalid-transfer-signature\\\"\\n        );\\n        require(transferNonce == _nonces[holder]++, \\\"TokenSpender/invalid-transfer-nonce\\\");\\n\\n        _token.transferFrom(holder, dst, wad);\\n\\n        if (fee \\u003e 0) {\\n            // Send fee to the relayer\\n            _token.transferFrom(holder, msg.sender, fee);\\n        }\\n    }\\n\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"permitNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"permitV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"permitR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"permitS\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"transferNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"transferV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"transferR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transferS\",\"type\":\"bytes32\"}],\"name\":\"permitTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"transferV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"transferR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transferS\",\"type\":\"bytes32\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenSpender","CompilerVersion":"v0.6.5+commit.f956cc89","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006B175474E89094C44Da98b954EedeAC495271d0F","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://82512d6db306870304a0423efd342843cf616b605bdfd5889dc975121a3a4b89"}]}