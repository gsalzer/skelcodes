{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.8\r\n# @author Lido <info@lido.fi>\r\n# @licence MIT\r\nfrom vyper.interfaces import ERC20\r\n\r\n\r\n# Lido DAO Vault (Agent) contract\r\ninterface Vault:\r\n    def deposit(_token: address, _value: uint256): payable\r\n\r\n\r\n# The purchase has been executed exchanging ETH to vested LDO\r\nevent PurchaseExecuted:\r\n    # the address that has received the vested LDO tokens\r\n    ldo_receiver: indexed(address)\r\n    # the number of LDO tokens vested to ldo_receiver\r\n    ldo_allocation: uint256\r\n    # the amount of ETH that was paid and forwarded to the DAO\r\n    eth_cost: uint256\r\n    # the vesting id to be used with the DAO's TokenManager contract\r\n    vesting_id: uint256\r\n\r\nevent OfferStarted:\r\n    started_at: uint256\r\n    expires_at: uint256\r\n\r\n\r\nMAX_PURCHASERS: constant(uint256) = 50\r\nETH_TO_LDO_RATE_PRECISION: constant(uint256) = 10**18\r\n\r\nLDO_TOKEN: constant(address) = 0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32\r\nLIDO_DAO_TOKEN_MANAGER: constant(address) = 0xf73a1260d222f447210581DDf212D915c09a3249\r\nLIDO_DAO_VAULT: constant(address) = 0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c\r\nLIDO_DAO_VAULT_ETH_TOKEN: constant(address) = ZERO_ADDRESS\r\n\r\n\r\n# how much LDO in one ETH, ETH_TO_LDO_RATE_PRECISION being 1\r\neth_to_ldo_rate: public(uint256)\r\nldo_allocations: public(HashMap[address, uint256])\r\nldo_allocations_total: public(uint256)\r\n\r\n# in seconds\r\noffer_expiration_delay: public(uint256)\r\noffer_started_at: public(uint256)\r\noffer_expires_at: public(uint256)\r\nvesting_cliff_delay: public(uint256)\r\nvesting_end_delay: public(uint256)\r\n\r\n\r\n@external\r\ndef __init__(\r\n    _eth_to_ldo_rate: uint256,\r\n    _vesting_cliff_delay: uint256,\r\n    _vesting_end_delay: uint256,\r\n    _offer_expiration_delay: uint256,\r\n    _ldo_purchasers: address[MAX_PURCHASERS],\r\n    _ldo_allocations: uint256[MAX_PURCHASERS],\r\n    _ldo_allocations_total: uint256\r\n):\r\n    \"\"\"\r\n    @param _eth_to_ldo_rate How much LDO one gets for one ETH (multiplied by 10**18)\r\n    @param _vesting_cliff_delay Delay from vesting start to vesting cliff, in seconds\r\n    @param _vesting_end_delay Delay from vesting start to vesting end, in seconds\r\n    @param _offer_expiration_delay Delay from the contract deployment to offer expiration, in seconds\r\n    @param _ldo_purchasers List of valid LDO purchasers, padded by zeroes to the length of 50\r\n    @param _ldo_allocations List of LDO token allocations, padded by zeroes to the length of 50\r\n    @param _ldo_allocations_total Checksum of LDO token allocations\r\n    \"\"\"\r\n    assert _eth_to_ldo_rate > 0\r\n    assert _vesting_end_delay >= _vesting_cliff_delay\r\n    assert _offer_expiration_delay > 0\r\n\r\n    self.eth_to_ldo_rate = _eth_to_ldo_rate\r\n    self.vesting_cliff_delay = _vesting_cliff_delay\r\n    self.vesting_end_delay = _vesting_end_delay\r\n    self.offer_expiration_delay = _offer_expiration_delay\r\n    self.ldo_allocations_total = _ldo_allocations_total\r\n\r\n    allocations_sum: uint256 = 0\r\n\r\n    for i in range(MAX_PURCHASERS):\r\n        purchaser: address = _ldo_purchasers[i]\r\n        if purchaser == ZERO_ADDRESS:\r\n            break\r\n        assert self.ldo_allocations[purchaser] == 0\r\n        allocation: uint256 = _ldo_allocations[i]\r\n        assert allocation > 0\r\n        self.ldo_allocations[purchaser] = allocation\r\n        allocations_sum += allocation\r\n\r\n    assert allocations_sum == _ldo_allocations_total\r\n\r\n\r\n@internal\r\n@view\r\ndef _get_allocation(_ldo_receiver: address) -> (uint256, uint256):\r\n    ldo_allocation: uint256 = self.ldo_allocations[_ldo_receiver]\r\n    eth_cost: uint256 = (ldo_allocation * ETH_TO_LDO_RATE_PRECISION) / self.eth_to_ldo_rate\r\n    return (ldo_allocation, eth_cost)\r\n\r\n\r\n@external\r\n@view\r\ndef offer_started() -> bool:\r\n    \"\"\"\r\n    @return Whether the offer has started.\r\n    \"\"\"\r\n    return self.offer_started_at != 0\r\n\r\n\r\n@external\r\n@view\r\ndef offer_expired() -> bool:\r\n    \"\"\"\r\n    @return Whether the offer has expired.\r\n    \"\"\"\r\n    return block.timestamp >= self.offer_expires_at\r\n\r\n\r\n@internal\r\ndef _start_unless_started():\r\n    if self.offer_started_at == 0:\r\n        assert ERC20(LDO_TOKEN).balanceOf(self) == self.ldo_allocations_total, \"not funded\"\r\n        started_at: uint256 = block.timestamp\r\n        expires_at: uint256 = started_at + self.offer_expiration_delay\r\n        self.offer_started_at = started_at\r\n        self.offer_expires_at = expires_at\r\n        log OfferStarted(started_at, expires_at)\r\n\r\n\r\n@external\r\ndef start():\r\n    \"\"\"\r\n    @notice Starts the offer if it 1) hasn't been started yet and 2) has received funding in full.\r\n    \"\"\"\r\n    self._start_unless_started()\r\n\r\n\r\n@external\r\n@view\r\ndef get_allocation(_ldo_receiver: address = msg.sender) -> (uint256, uint256):\r\n    \"\"\"\r\n    @param _ldo_receiver The LDO purchaser address to check\r\n    @return\r\n        A tuple: the first element is the amount of LDO available for purchase (zero if\r\n        the purchase was already executed for that address), the second element is the\r\n        Ether cost of the purchase.\r\n    \"\"\"\r\n    return self._get_allocation(_ldo_receiver)\r\n\r\n\r\n@internal\r\ndef _execute_purchase(_ldo_receiver: address, _caller: address, _eth_received: uint256) -> uint256:\r\n    \"\"\"\r\n    @dev\r\n        We don't use any reentrancy lock here because, among all external calls in this\r\n        function (Vault.deposit, TokenManager.assignVested, LDO.transfer, and the default\r\n        payable function of the message sender), only the last one executes the code not\r\n        under our control, and we make this call after all state mutations.\r\n    \"\"\"\r\n    self._start_unless_started()\r\n    assert block.timestamp < self.offer_expires_at, \"offer expired\"\r\n\r\n    ldo_allocation: uint256 = 0\r\n    eth_cost: uint256 = 0\r\n    ldo_allocation, eth_cost = self._get_allocation(_ldo_receiver)\r\n\r\n    assert ldo_allocation > 0, \"no allocation\"\r\n    assert _eth_received >= eth_cost, \"insufficient funds\"\r\n\r\n    # clear the purchaser's allocation\r\n    self.ldo_allocations[_ldo_receiver] = 0\r\n\r\n    # forward ETH cost of the purchase to the DAO treasury contract\r\n    Vault(LIDO_DAO_VAULT).deposit(\r\n        LIDO_DAO_VAULT_ETH_TOKEN,\r\n        eth_cost,\r\n        value=eth_cost\r\n    )\r\n\r\n    vesting_start: uint256 = block.timestamp\r\n    vesting_cliff: uint256 = vesting_start + self.vesting_cliff_delay\r\n    vesting_end: uint256 = vesting_start + self.vesting_end_delay\r\n\r\n    # TokenManager can only assign vested tokens from its own balance\r\n    assert ERC20(LDO_TOKEN).transfer(LIDO_DAO_TOKEN_MANAGER, ldo_allocation)\r\n\r\n    # assign vested LDO tokens to the purchaser from the DAO treasury reserves\r\n    # Vyper has no uint64 data type so we have to use raw_call instead of an interface\r\n    call_result: Bytes[32] = raw_call(\r\n        LIDO_DAO_TOKEN_MANAGER,\r\n        concat(\r\n            method_id('assignVested(address,uint256,uint64,uint64,uint64,bool)'),\r\n            convert(_ldo_receiver, bytes32),\r\n            convert(ldo_allocation, bytes32),\r\n            convert(vesting_start, bytes32),\r\n            convert(vesting_cliff, bytes32),\r\n            convert(vesting_end, bytes32),\r\n            convert(False, bytes32)\r\n        ),\r\n        max_outsize=32\r\n    )\r\n    vesting_id: uint256 = convert(extract32(call_result, 0), uint256)\r\n\r\n    log PurchaseExecuted(_ldo_receiver, ldo_allocation, eth_cost, vesting_id)\r\n\r\n    # refund any excess ETH to the caller\r\n    eth_refund: uint256 = _eth_received - eth_cost\r\n    if eth_refund > 0:\r\n        # use raw_call to forward all remaining gas just in case the caller is a smart contract\r\n        raw_call(_caller, b\"\", value=eth_refund)\r\n\r\n    return vesting_id\r\n\r\n\r\n@external\r\n@payable\r\ndef execute_purchase(_ldo_receiver: address = msg.sender) -> uint256:\r\n    \"\"\"\r\n    @notice Purchases LDO for the specified address (defaults to message sender) in exchange for ETH.\r\n    @param _ldo_receiver The address the purchase is executed for. Must be a valid purchaser.\r\n    @return Vesting ID to be used with the DAO's `TokenManager` contract.\r\n    \"\"\"\r\n    return self._execute_purchase(_ldo_receiver, msg.sender, msg.value)\r\n\r\n\r\n@external\r\n@payable\r\ndef __default__():\r\n    \"\"\"\r\n    @notice Purchases LDO for the message sender in exchange for ETH.\r\n    \"\"\"\r\n    self._execute_purchase(msg.sender, msg.sender, msg.value)\r\n\r\n\r\n@external\r\ndef recover_unsold_tokens():\r\n    \"\"\"\r\n    @notice Transfers unsold LDO tokens back to the DAO treasury.\r\n    @dev May only be called after the offer expires.\r\n    \"\"\"\r\n    assert self.offer_started_at != 0 and block.timestamp >= self.offer_expires_at\r\n    unsold_ldo_amount: uint256 = ERC20(LDO_TOKEN).balanceOf(self)\r\n    if unsold_ldo_amount > 0:\r\n        ERC20(LDO_TOKEN).transfer(LIDO_DAO_VAULT, unsold_ldo_amount)","ABI":"[{\"name\":\"PurchaseExecuted\",\"inputs\":[{\"type\":\"address\",\"name\":\"ldo_receiver\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"ldo_allocation\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"eth_cost\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"vesting_id\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"OfferStarted\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"started_at\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"expires_at\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_eth_to_ldo_rate\"},{\"type\":\"uint256\",\"name\":\"_vesting_cliff_delay\"},{\"type\":\"uint256\",\"name\":\"_vesting_end_delay\"},{\"type\":\"uint256\",\"name\":\"_offer_expiration_delay\"},{\"type\":\"address[50]\",\"name\":\"_ldo_purchasers\"},{\"type\":\"uint256[50]\",\"name\":\"_ldo_allocations\"},{\"type\":\"uint256\",\"name\":\"_ldo_allocations_total\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"offer_started\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1190},{\"name\":\"offer_expired\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1223},{\"name\":\"start\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":75993},{\"name\":\"get_allocation\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"},{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"name\":\"get_allocation\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"},{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_ldo_receiver\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"name\":\"execute_purchase\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"name\":\"execute_purchase\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_ldo_receiver\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"name\":\"recover_unsold_tokens\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":3639},{\"name\":\"eth_to_ldo_rate\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1421},{\"name\":\"ldo_allocations\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1666},{\"name\":\"ldo_allocations_total\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1481},{\"name\":\"offer_expiration_delay\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1511},{\"name\":\"offer_started_at\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1541},{\"name\":\"offer_expires_at\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1571},{\"name\":\"vesting_cliff_delay\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1601},{\"name\":\"vesting_end_delay\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1631}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.8","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"0000000000000000000000000000000000000000000000faf9048351b15684bd0000000000000000000000000000000000000000000000000000000001e133800000000000000000000000000000000000000000000000000000000003c26700000000000000000000000000000000000000000000000000000000000028207200000000000000000000000009f82ccd6bae2aebe46ba7dd2cf08d87355ac4300000000000000000000000009b5ea8c719e29a5bd0959faf79c9e5c8206d049900000000000000000000000091e4f4bc6ae705eb4e939c147133558c0f906eeb000000000000000000000000f30026fe8a2c0d01b70b1949ceaf2e09efd8b4a50000000000000000000000009b4bf7ec2883b80784295a4aa0a0f6d02fc37fb5000000000000000000000000e5d0ef77aed07c302634dc370537126a2cd26590000000000000000000000000876eabf441b2ee5b5b0554fd502a8e0600950cfa000000000000000000000000b93994e2efcaed3e88c538f68ec6a2587c3e2ebf0000000000000000000000002447eb3244cc562a899978a758f2b9b065527ccc00000000000000000000000009b2dd967305ce5a7209243ae865193401a985e700000000000000000000000067e3ea119e141406c37e2ca783b749fe1437673f0000000000000000000000002d81713c58452c92c19b2917e1c770eecf53fe41000000000000000000000000096ca3674329bb66dd7cc14d1511dfb7728b9193000000000000000000000000cb46219ba114245c3a18761e4f7891f9c4bef8c000000000000000000000000092927adc6331b20ef9512303c83668a92105c3c1000000000000000000000000f948ef8c4e68004f5fa66c930d5989dfd9f15fe10000000000000000000000006724f3fbb16f542401bfc42c464ce91b6c31001e000000000000000000000000b0325dbe7fa891436e83a094f9f12848c78e449b000000000000000000000000f56669a8caae191e431160b3f40571e26ce4b04e000000000000000000000000bfaa7e5196081044190420d7215757caa27e13de0000000000000000000000007fcaf93cc92d51c490fff701fb2c6197497a80db000000000000000000000000a083afa219bb7d21c5a72cacaadb99cc1da6dd9800000000000000000000000015a4c23e7e405cc6794ae10782042aea9d7ea9590000000000000000000000004521115998a7d13041f20ae4224cb967e35d61d800000000000000000000000013443dcd2c555716a81ef7018ab4ccfb38946f9500000000000000000000000060ca41bd3c215bb2d7e3b04510d8643909a7a429000000000000000000000000cf5d9da2b167ab92d6737770adc70930d9ecc9320000000000000000000000009074485a2b1d4060b2ca3d808fd82e4629202ee300000000000000000000000024379243dfb21d42781dc7e9203e4531ed11cd3c000000000000000000000000c5b8dbac4c1d3f152cdeb400e2313f309c410acb0000000000000000000000008d07d225a769b7af3a923481e1fdf49180e6a265000000000000000000000000cf407e4a4ff843859c41093a6d685f332fedfe150000000000000000000000007850df8f7af946b02eb43d5544c94dbba94394dc000000000000000000000000049aebdf43417e90640d89fb6c800805f3c08ed10000000000000000000000002e939c4ff39445cd5062935770f0abf98e9ff99d0000000000000000000000003b29c6e356f9445b693abb5df42fbc932062e0fb00000000000000000000000051d92ec2224592690fe56419be4e5e085edd89eb0000000000000000000000000b304924faa64b0f040dca67bc5175dd6078db52000000000000000000000000edea049b889796b550716f1399eb0661daf42c9e000000000000000000000000a9acd2b94f4f4b69c79187b152b67cd0c35010fe7139a8c08fa0600000000000000000000000000000000000000000000000001b929b9eed598f366b4000000000000000000000000000000000000000000000094865e2bb6d87952fa0000000000000000000000000000000000000000000002e6225a5850917ae9ec00000000000000000000000000000000000000000000049f4c1447262a6e50a00000000000000000000000000000000000000000000004703d636e86d9b28c280000000000000000000000000000000000000000000002531471b35eb49b20fc00000000000000000000000000000000000000000000018c10fb1f3cebc67614000000000000000000000000000000000000000000000094865e2bb6d87952fa0000000000000000000000000000000000000000000000c6087d8f9e75e33b0a0000000000000000000000000000000000000000000000c7fe6f98a51936741800000000000000000000000000000000000000000000004f68ca6d8cd91c600000000000000000000000000000000000000000000000003104a2e1a5f4c1cde40000000000000000000000000000000000000000000000139b745a4261db3366000000000000000000000000000000000000000000000004e6dd16909879c7ca00000000000000000000000000000000000000000000003ad25d0ec7259d85f400000000000000000000000000000000000000000000004e6dd169098754f61400000000000000000000000000000000000000000000004e6dd169098754f614000000000000000000000000000000000000000000000018825170d2fa60e6f200000000000000000000000000000000000000000000003104a2e1a5f4c1cde4000000000000000000000000000000000000000000000018825170d2fa60e6f200000000000000000000000000000000000000000000003104a2e1a5f4c1cde400000000000000000000000000000000000000000000003104a2e1a5f4c1cde400000000000000000000000000000000000000000000003104a2e1a5f4c1cde400000000000000000000000000000000000000000000003104a2e1a5f4c1cde40000000000000000000000000000000000000000000000139b745a4261db3366000000000000000000000000000000000000000000000009cdba2d2130ed99b30000000000000000000000000000000000000000000000075a4ba1d8e4b0b5ce000000000000000000000000000000000000000000000004e6dd16909879c7ca000000000000000000000000000000000000000000000009cdba2d2130ed99b3000000000000000000000000000000000000000000000009cdba2d2130ed99b300000000000000000000000000000000000000000000000eb49743b1c9616b9c000000000000000000000000000000000000000000000001f5f20906a362b85700000000000000000000000000000000000000000000000eb49743b1c9616b9c000000000000000000000000000000000000000000000009cdba2d2130ed99b3000000000000000000000000000000000000000000000018825170d2fa60e6f2000000000000000000000000000000000000000000000018825170d2fa60e6f2000000000000000000000000000000000000000000000018825170d2fa60e6f200000000000000000000000000000000000000000000003ad25d0ec7259d85f4000000000000000000000000000000000000000000000044229ab9a6ad95890ef1ca5f386e5d3ff34700","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}