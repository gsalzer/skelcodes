{"status":"1","message":"OK","result":[{"SourceCode":"{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"IERC20.sol\\\";\\r\\nimport \\\"IERC20Metadata.sol\\\";\\r\\nimport \\\"Context.sol\\\";\\r\\n\\r\\n\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    // Instance of Token\\r\\n    IERC20 token;\\r\\n    \\r\\n    //  MAPPINGS\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n\\tmapping (address =\\u003e uint256) public lockTokens;\\r\\n    // VARAIBLES\\r\\n    uint256 private _totalSupply;\\r\\n    uint256 public tokenPrice;\\r\\n    uint256 public remainingTokens;\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    address payable ownerAccount;\\r\\n    uint256 releaseTime;\\r\\n    uint256 public cap;\\r\\n    uint256 lockedAmount;\\r\\n    uint256 releaseTimeOwner;\\r\\n\\tuint256 public mintCapAnnual;\\r\\n\\tuint256 public mintAvailableDate;\\r\\n\\tuint256 private _mini;\\r\\n    \\r\\n    \\r\\n    //  MODIFIERS\\r\\n    modifier onlyOwner(){\\r\\n        require(msg.sender == ownerAccount, \\\"You are not an Owner.\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    \\r\\n    constructor () public {\\r\\n        _name = \\\"Ice Cube\\\";\\r\\n        _symbol = \\\"iCube\\\";\\r\\n        _totalSupply = 1050000000000 * (10**18);\\r\\n        _balances[_msgSender()] = _totalSupply;\\r\\n        ownerAccount = msg.sender;\\r\\n        tokenPrice = 800000000;\\r\\n        token = IERC20(address(this));\\r\\n        cap = 2100000000000 * (10**18);\\r\\n\\t\\tmintCapAnnual = cap/50;\\r\\n        releaseTime = 0;  \\r\\n        lockedAmount = 0;\\r\\n        releaseTimeOwner = 0;\\r\\n\\t\\tmintAvailableDate = 1655683200;\\r\\n    }   \\r\\n\\t\\r\\n    \\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    \\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        if(address(this) == msg.sender){\\r\\n            _transfer(_msgSender(), recipient, amount);\\r\\n        }\\r\\n        else{\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n            uint256 checkBalance = (_balances[_msgSender()] - lockTokens[_msgSender()]);\\r\\n            require(now \\u003e= releaseTime || checkBalance \\u003e= amount,\\\"Token is Paused\\\");\\r\\n            require(amount \\u003c= cap,\\\"Cap amount exceeded...\\\");\\r\\n            if(ownerAccount == _msgSender()){\\r\\n                if(releaseTimeOwner != 0){\\r\\n                     require((_balances[ownerAccount] - amount) \\u003e= lockedAmount,\\\"Passed wrong value\\\");\\r\\n                     require( now \\u003e= releaseTimeOwner,\\\"Owner can not transfer this time\\\");    \\r\\n                    _transfer(_msgSender(), recipient, amount);\\r\\n                    \\r\\n                }else{\\r\\n                    _transfer(_msgSender(), recipient, amount);\\r\\n                }\\r\\n            }else{\\r\\n                _transfer(_msgSender(), recipient, amount);\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function noPausedtransfer(address recipient, uint256 amount) internal returns (bool) {\\r\\n        require(amount \\u003c= cap,\\\"Cap amount exceeded...\\\");\\r\\n        \\r\\n        if(ownerAccount == _msgSender()){\\r\\n            if(releaseTimeOwner != 0){\\r\\n                 require((_balances[ownerAccount] - amount) \\u003e= lockedAmount,\\\"Passed wrong value\\\");\\r\\n                 require( now \\u003e= releaseTimeOwner,\\\"Owner can not transfer this time\\\");    \\r\\n                _transfer(_msgSender(), recipient, amount);\\r\\n                \\r\\n            }else{\\r\\n                _transfer(_msgSender(), recipient, amount);\\r\\n            }\\r\\n        }else{\\r\\n            _transfer(_msgSender(), recipient, amount);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        require(now \\u003e= releaseTime || lockTokens[_msgSender()] \\u003c= 0,\\\"Token is Paused\\\");\\r\\n        require(amount \\u003c= cap,\\\"Cap amount exceeded...\\\");\\r\\n        if(ownerAccount == _msgSender()){\\r\\n            if(releaseTimeOwner != 0){\\r\\n                 require((_balances[ownerAccount] - amount) \\u003e= lockedAmount,\\\"Passed wrong value\\\");\\r\\n                 require( now \\u003e= releaseTimeOwner,\\\"Owner can not transfer this time\\\");    \\r\\n                 uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n                 require(currentAllowance \\u003e= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n                _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n\\r\\n            }else{\\r\\n                uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n                require(currentAllowance \\u003e= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n                _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n            }\\r\\n        }else{\\r\\n            uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n            require(currentAllowance \\u003e= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    \\r\\n\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(currentAllowance \\u003e= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance \\u003e= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[sender] = senderBalance - amount;\\r\\n        _balances[recipient] += amount;\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    // THIS FUNCTION WILL CALL ONLY OWNER FOR MINTING THE TOKENS \\r\\n    // IF TOTAL SUPPLY ACHIEVED THE CAPPED VALUE THEN NO MINTING WILL ALLOWED\\r\\n    // THEN OWNER NEED TO INCREASE THE CAP VALUE BY USING \\u0027setCapAmount\\u0027 FUNCTION\\r\\n    function mint(address account, uint256 amount) public onlyOwner{\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n        require(_totalSupply + amount\\u003c= cap,\\\"Amount Exceeded Market Cap\\\");\\r\\n\\t\\trequire(amount\\u003c= mintCapAnnual,\\\"Amount Exceeded Mint Cap\\\");\\r\\n\\t\\trequire(mintAvailableDate\\u003c= now,\\\"Coin Not Ready for Mint\\\");\\r\\n\\t\\tmintAvailableDate += 31536000;\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    // THIS FUNCTION WILL CALL ONLY FOR OWNER FOR BURNING THE TOKENS\\r\\n    function burn(address account, uint256 amount) public onlyOwner{\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n        if(ownerAccount == msg.sender){\\r\\n            if(releaseTimeOwner != 0){\\r\\n                require((_balances[ownerAccount] - amount) \\u003e= lockedAmount,\\\"Passed wrong value\\\");\\r\\n                require( now \\u003e= releaseTimeOwner,\\\"Owner can not transfer this time\\\");\\r\\n                uint256 accountBalance = _balances[account];\\r\\n                require(accountBalance \\u003e= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n                _balances[account] = accountBalance - amount;\\r\\n                _totalSupply -= amount;\\r\\n                emit Transfer(account, address(0), amount);   \\r\\n            }else{\\r\\n                uint256 accountBalance = _balances[account];\\r\\n                require(accountBalance \\u003e= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n                _balances[account] = accountBalance - amount;\\r\\n                _totalSupply -= amount;\\r\\n                emit Transfer(account, address(0), amount);\\r\\n            }\\r\\n        }else{\\r\\n            uint256 accountBalance = _balances[account];\\r\\n            require(accountBalance \\u003e= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n            _balances[account] = accountBalance - amount;\\r\\n            _totalSupply -= amount;\\r\\n            emit Transfer(account, address(0), amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // THIS WILL PAUSE THE TOKEN\\r\\n    function pauseToken(uint256 timestamp) public onlyOwner{\\r\\n        releaseTime = timestamp;\\r\\n    }\\r\\n    \\r\\n    // THIS WILL SET THE PRICE OF TOKEN\\r\\n    function setPrice(uint256 _price) public onlyOwner{\\r\\n        tokenPrice = _price;\\r\\n    }\\r\\n    \\r\\n    \\r\\n    // OWNER NEED TO CALL THIS FUNCTION BEFORE START ICO\\r\\n    // OWNER ALSO NEED TO SET A GOAL OF TOKEN AMOUNT FOR FUND RAISING\\r\\n    // THIS FUNCTION WILL TRANSFER THE TOKENS FROM OWNER TO CONTRACT\\r\\n    function startBuying(uint256 tokenAmount, uint256 time) public onlyOwner{\\r\\n        releaseTime = time;\\r\\n        remainingTokens = tokenAmount;\\r\\n        noPausedtransfer(address(this),tokenAmount);\\r\\n    }\\r\\n    \\r\\n   \\r\\n    \\r\\n  \\r\\n    //  THIS FUMCTION WILL BE USED BY INVESTOR FOR BUYING TOKENS\\r\\n    //  IF THE OWNER WILL END ICO THEN NO ONE CAN INVEST ANYMORE \\r\\n    function buyToken() public payable{\\r\\n        require(msg.value \\u003e 0,\\\"You are passing wrong value\\\");\\r\\n\\t\\trequire(msg.value \\u003c= 10**19,\\\"Maximum order size is 10 ETH\\\");\\r\\n        require(msg.sender != address(0),\\\"Invalid Address of Buyer\\\");\\r\\n        require(now \\u003c= releaseTime, \\\"TokenSale is ended.\\\");\\r\\n        address sender = msg.sender; \\r\\n        uint256 quantity = (msg.value / tokenPrice) * 10**18;\\r\\n\\t\\tlockTokens[sender] += quantity;\\t\\t\\t\\t\\t\\t\\t\\t \\r\\n        ownerAccount.transfer(msg.value);\\r\\n        token.transfer(sender,quantity);\\r\\n        remainingTokens -= quantity; \\r\\n    }\\r\\n    \\r\\n\\t//  OWNER CAN LOCK THEIR TOKENS\\t\\r\\n    function lockOwnerTokens(uint256 amount, uint256 _time) public onlyOwner {\\r\\n        lockedAmount = amount;\\r\\n        releaseTimeOwner = _time;\\r\\n    }\\r\\n    \\r\\n\\t// WITHDRAW\\r\\n    function withdraw() public onlyOwner{\\r\\n        require(remainingTokens \\u003e 0,\\\"All tokens are Sold.\\\");\\r\\n        token.transfer(ownerAccount,remainingTokens);\\r\\n    }\\r\\n      \\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    \\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"lockOwnerTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintAvailableDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCapAnnual\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"pauseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"startBuying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ERC20","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e0037461e21ad278d87c80f75d49674a2365ab2dee45b43f06aa5cc3eb26559b"}]}