{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/InterestCalculator.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\ncontract InterestCalculator {\r\n    using SafeMath for uint;\r\n    uint private constant MAX_DAYS = 365;\r\n\r\n    function _initCumulativeInterestForDays() internal pure returns(uint[] memory) {\r\n        uint[] memory cumulativeInterestForDays = new uint[](MAX_DAYS.add(1));\r\n\r\n        cumulativeInterestForDays[0] = 0;\r\n        cumulativeInterestForDays[1] = 1;\r\n        cumulativeInterestForDays[2] = 2;\r\n        cumulativeInterestForDays[3] = 3;\r\n        cumulativeInterestForDays[4] = 4;\r\n        cumulativeInterestForDays[5] = 6;\r\n        cumulativeInterestForDays[6] = 8;\r\n        cumulativeInterestForDays[7] = 11;\r\n        cumulativeInterestForDays[8] = 14;\r\n        cumulativeInterestForDays[9] = 17;\r\n        cumulativeInterestForDays[10] = 21;\r\n        cumulativeInterestForDays[11] = 25;\r\n        cumulativeInterestForDays[12] = 30;\r\n        cumulativeInterestForDays[13] = 35;\r\n        cumulativeInterestForDays[14] = 40;\r\n        cumulativeInterestForDays[15] = 46;\r\n        cumulativeInterestForDays[16] = 52;\r\n        cumulativeInterestForDays[17] = 58;\r\n        cumulativeInterestForDays[18] = 65;\r\n        cumulativeInterestForDays[19] = 72;\r\n        cumulativeInterestForDays[20] = 80;\r\n        cumulativeInterestForDays[21] = 88;\r\n        cumulativeInterestForDays[22] = 96;\r\n        cumulativeInterestForDays[23] = 105;\r\n        cumulativeInterestForDays[24] = 114;\r\n        cumulativeInterestForDays[25] = 124;\r\n        cumulativeInterestForDays[26] = 134;\r\n        cumulativeInterestForDays[27] = 144;\r\n        cumulativeInterestForDays[28] = 155;\r\n        cumulativeInterestForDays[29] = 166;\r\n        cumulativeInterestForDays[30] = 178;\r\n        cumulativeInterestForDays[31] = 190;\r\n        cumulativeInterestForDays[32] = 202;\r\n        cumulativeInterestForDays[33] = 215;\r\n        cumulativeInterestForDays[34] = 228;\r\n        cumulativeInterestForDays[35] = 242;\r\n        cumulativeInterestForDays[36] = 256;\r\n        cumulativeInterestForDays[37] = 271;\r\n        cumulativeInterestForDays[38] = 286;\r\n        cumulativeInterestForDays[39] = 301;\r\n        cumulativeInterestForDays[40] = 317;\r\n        cumulativeInterestForDays[41] = 333;\r\n        cumulativeInterestForDays[42] = 350;\r\n        cumulativeInterestForDays[43] = 367;\r\n        cumulativeInterestForDays[44] = 385;\r\n        cumulativeInterestForDays[45] = 403;\r\n        cumulativeInterestForDays[46] = 421;\r\n        cumulativeInterestForDays[47] = 440;\r\n        cumulativeInterestForDays[48] = 459;\r\n        cumulativeInterestForDays[49] = 479;\r\n        cumulativeInterestForDays[50] = 499;\r\n        cumulativeInterestForDays[51] = 520;\r\n        cumulativeInterestForDays[52] = 541;\r\n        cumulativeInterestForDays[53] = 563;\r\n        cumulativeInterestForDays[54] = 585;\r\n        cumulativeInterestForDays[55] = 607;\r\n        cumulativeInterestForDays[56] = 630;\r\n        cumulativeInterestForDays[57] = 653;\r\n        cumulativeInterestForDays[58] = 677;\r\n        cumulativeInterestForDays[59] = 701;\r\n        cumulativeInterestForDays[60] = 726;\r\n        cumulativeInterestForDays[61] = 751;\r\n        cumulativeInterestForDays[62] = 777;\r\n        cumulativeInterestForDays[63] = 803;\r\n        cumulativeInterestForDays[64] = 830;\r\n        cumulativeInterestForDays[65] = 857;\r\n        cumulativeInterestForDays[66] = 884;\r\n        cumulativeInterestForDays[67] = 912;\r\n        cumulativeInterestForDays[68] = 940;\r\n        cumulativeInterestForDays[69] = 969;\r\n        cumulativeInterestForDays[70] = 998;\r\n        cumulativeInterestForDays[71] = 1028;\r\n        cumulativeInterestForDays[72] = 1058;\r\n        cumulativeInterestForDays[73] = 1089;\r\n        cumulativeInterestForDays[74] = 1120;\r\n        cumulativeInterestForDays[75] = 1152;\r\n        cumulativeInterestForDays[76] = 1184;\r\n        cumulativeInterestForDays[77] = 1217;\r\n        cumulativeInterestForDays[78] = 1250;\r\n        cumulativeInterestForDays[79] = 1284;\r\n        cumulativeInterestForDays[80] = 1318;\r\n        cumulativeInterestForDays[81] = 1353;\r\n        cumulativeInterestForDays[82] = 1388;\r\n        cumulativeInterestForDays[83] = 1424;\r\n        cumulativeInterestForDays[84] = 1460;\r\n        cumulativeInterestForDays[85] = 1497;\r\n        cumulativeInterestForDays[86] = 1534;\r\n        cumulativeInterestForDays[87] = 1572;\r\n        cumulativeInterestForDays[88] = 1610;\r\n        cumulativeInterestForDays[89] = 1649;\r\n        cumulativeInterestForDays[90] = 1688;\r\n        cumulativeInterestForDays[91] = 1728;\r\n        cumulativeInterestForDays[92] = 1768;\r\n        cumulativeInterestForDays[93] = 1809;\r\n        cumulativeInterestForDays[94] = 1850;\r\n        cumulativeInterestForDays[95] = 1892;\r\n        cumulativeInterestForDays[96] = 1934;\r\n        cumulativeInterestForDays[97] = 1977;\r\n        cumulativeInterestForDays[98] = 2020;\r\n        cumulativeInterestForDays[99] = 2064;\r\n        cumulativeInterestForDays[100] = 2108;\r\n        cumulativeInterestForDays[101] = 2153;\r\n        cumulativeInterestForDays[102] = 2199;\r\n        cumulativeInterestForDays[103] = 2245;\r\n        cumulativeInterestForDays[104] = 2292;\r\n        cumulativeInterestForDays[105] = 2339;\r\n        cumulativeInterestForDays[106] = 2387;\r\n        cumulativeInterestForDays[107] = 2435;\r\n        cumulativeInterestForDays[108] = 2484;\r\n        cumulativeInterestForDays[109] = 2533;\r\n        cumulativeInterestForDays[110] = 2583;\r\n        cumulativeInterestForDays[111] = 2633;\r\n        cumulativeInterestForDays[112] = 2684;\r\n        cumulativeInterestForDays[113] = 2736;\r\n        cumulativeInterestForDays[114] = 2788;\r\n        cumulativeInterestForDays[115] = 2841;\r\n        cumulativeInterestForDays[116] = 2894;\r\n        cumulativeInterestForDays[117] = 2948;\r\n        cumulativeInterestForDays[118] = 3002;\r\n        cumulativeInterestForDays[119] = 3057;\r\n        cumulativeInterestForDays[120] = 3113;\r\n        cumulativeInterestForDays[121] = 3169;\r\n        cumulativeInterestForDays[122] = 3226;\r\n        cumulativeInterestForDays[123] = 3283;\r\n        cumulativeInterestForDays[124] = 3341;\r\n        cumulativeInterestForDays[125] = 3399;\r\n        cumulativeInterestForDays[126] = 3458;\r\n        cumulativeInterestForDays[127] = 3518;\r\n        cumulativeInterestForDays[128] = 3578;\r\n        cumulativeInterestForDays[129] = 3639;\r\n        cumulativeInterestForDays[130] = 3700;\r\n        cumulativeInterestForDays[131] = 3762;\r\n        cumulativeInterestForDays[132] = 3825;\r\n        cumulativeInterestForDays[133] = 3888;\r\n        cumulativeInterestForDays[134] = 3952;\r\n        cumulativeInterestForDays[135] = 4016;\r\n        cumulativeInterestForDays[136] = 4081;\r\n        cumulativeInterestForDays[137] = 4147;\r\n        cumulativeInterestForDays[138] = 4213;\r\n        cumulativeInterestForDays[139] = 4280;\r\n        cumulativeInterestForDays[140] = 4347;\r\n        cumulativeInterestForDays[141] = 4415;\r\n        cumulativeInterestForDays[142] = 4484;\r\n        cumulativeInterestForDays[143] = 4553;\r\n        cumulativeInterestForDays[144] = 4623;\r\n        cumulativeInterestForDays[145] = 4694;\r\n        cumulativeInterestForDays[146] = 4765;\r\n        cumulativeInterestForDays[147] = 4837;\r\n        cumulativeInterestForDays[148] = 4909;\r\n        cumulativeInterestForDays[149] = 4982;\r\n        cumulativeInterestForDays[150] = 5056;\r\n        cumulativeInterestForDays[151] = 5130;\r\n        cumulativeInterestForDays[152] = 5205;\r\n        cumulativeInterestForDays[153] = 5281;\r\n        cumulativeInterestForDays[154] = 5357;\r\n        cumulativeInterestForDays[155] = 5434;\r\n        cumulativeInterestForDays[156] = 5512;\r\n        cumulativeInterestForDays[157] = 5590;\r\n        cumulativeInterestForDays[158] = 5669;\r\n        cumulativeInterestForDays[159] = 5749;\r\n        cumulativeInterestForDays[160] = 5829;\r\n        cumulativeInterestForDays[161] = 5910;\r\n        cumulativeInterestForDays[162] = 5992;\r\n        cumulativeInterestForDays[163] = 6074;\r\n        cumulativeInterestForDays[164] = 6157;\r\n        cumulativeInterestForDays[165] = 6241;\r\n        cumulativeInterestForDays[166] = 6325;\r\n        cumulativeInterestForDays[167] = 6410;\r\n        cumulativeInterestForDays[168] = 6496;\r\n        cumulativeInterestForDays[169] = 6582;\r\n        cumulativeInterestForDays[170] = 6669;\r\n        cumulativeInterestForDays[171] = 6757;\r\n        cumulativeInterestForDays[172] = 6845;\r\n        cumulativeInterestForDays[173] = 6934;\r\n        cumulativeInterestForDays[174] = 7024;\r\n        cumulativeInterestForDays[175] = 7114;\r\n        cumulativeInterestForDays[176] = 7205;\r\n        cumulativeInterestForDays[177] = 7297;\r\n        cumulativeInterestForDays[178] = 7390;\r\n        cumulativeInterestForDays[179] = 7483;\r\n        cumulativeInterestForDays[180] = 7577;\r\n        cumulativeInterestForDays[181] = 7672;\r\n        cumulativeInterestForDays[182] = 7767;\r\n        cumulativeInterestForDays[183] = 7863;\r\n        cumulativeInterestForDays[184] = 7960;\r\n        cumulativeInterestForDays[185] = 8058;\r\n        cumulativeInterestForDays[186] = 8156;\r\n        cumulativeInterestForDays[187] = 8255;\r\n        cumulativeInterestForDays[188] = 8355;\r\n        cumulativeInterestForDays[189] = 8455;\r\n        cumulativeInterestForDays[190] = 8556;\r\n        cumulativeInterestForDays[191] = 8658;\r\n        cumulativeInterestForDays[192] = 8761;\r\n        cumulativeInterestForDays[193] = 8864;\r\n        cumulativeInterestForDays[194] = 8968;\r\n        cumulativeInterestForDays[195] = 9073;\r\n        cumulativeInterestForDays[196] = 9179;\r\n        cumulativeInterestForDays[197] = 9285;\r\n        cumulativeInterestForDays[198] = 9392;\r\n        cumulativeInterestForDays[199] = 9500;\r\n        cumulativeInterestForDays[200] = 9609;\r\n        cumulativeInterestForDays[201] = 9719;\r\n        cumulativeInterestForDays[202] = 9829;\r\n        cumulativeInterestForDays[203] = 9940;\r\n        cumulativeInterestForDays[204] = 10052;\r\n        cumulativeInterestForDays[205] = 10165;\r\n        cumulativeInterestForDays[206] = 10278;\r\n        cumulativeInterestForDays[207] = 10392;\r\n        cumulativeInterestForDays[208] = 10507;\r\n        cumulativeInterestForDays[209] = 10623;\r\n        cumulativeInterestForDays[210] = 10740;\r\n        cumulativeInterestForDays[211] = 10857;\r\n        cumulativeInterestForDays[212] = 10975;\r\n        cumulativeInterestForDays[213] = 11094;\r\n        cumulativeInterestForDays[214] = 11214;\r\n        cumulativeInterestForDays[215] = 11335;\r\n        cumulativeInterestForDays[216] = 11456;\r\n        cumulativeInterestForDays[217] = 11578;\r\n        cumulativeInterestForDays[218] = 11701;\r\n        cumulativeInterestForDays[219] = 11825;\r\n        cumulativeInterestForDays[220] = 11950;\r\n        cumulativeInterestForDays[221] = 12076;\r\n        cumulativeInterestForDays[222] = 12202;\r\n        cumulativeInterestForDays[223] = 12329;\r\n        cumulativeInterestForDays[224] = 12457;\r\n        cumulativeInterestForDays[225] = 12586;\r\n        cumulativeInterestForDays[226] = 12716;\r\n        cumulativeInterestForDays[227] = 12847;\r\n        cumulativeInterestForDays[228] = 12978;\r\n        cumulativeInterestForDays[229] = 13110;\r\n        cumulativeInterestForDays[230] = 13243;\r\n        cumulativeInterestForDays[231] = 13377;\r\n        cumulativeInterestForDays[232] = 13512;\r\n        cumulativeInterestForDays[233] = 13648;\r\n        cumulativeInterestForDays[234] = 13785;\r\n        cumulativeInterestForDays[235] = 13922;\r\n        cumulativeInterestForDays[236] = 14060;\r\n        cumulativeInterestForDays[237] = 14199;\r\n        cumulativeInterestForDays[238] = 14339;\r\n        cumulativeInterestForDays[239] = 14480;\r\n        cumulativeInterestForDays[240] = 14622;\r\n        cumulativeInterestForDays[241] = 14765;\r\n        cumulativeInterestForDays[242] = 14909;\r\n        cumulativeInterestForDays[243] = 15054;\r\n        cumulativeInterestForDays[244] = 15199;\r\n        cumulativeInterestForDays[245] = 15345;\r\n        cumulativeInterestForDays[246] = 15492;\r\n        cumulativeInterestForDays[247] = 15640;\r\n        cumulativeInterestForDays[248] = 15789;\r\n        cumulativeInterestForDays[249] = 15939;\r\n        cumulativeInterestForDays[250] = 16090;\r\n        cumulativeInterestForDays[251] = 16242;\r\n        cumulativeInterestForDays[252] = 16395;\r\n        cumulativeInterestForDays[253] = 16549;\r\n        cumulativeInterestForDays[254] = 16704;\r\n        cumulativeInterestForDays[255] = 16860;\r\n        cumulativeInterestForDays[256] = 17017;\r\n        cumulativeInterestForDays[257] = 17174;\r\n        cumulativeInterestForDays[258] = 17332;\r\n        cumulativeInterestForDays[259] = 17491;\r\n        cumulativeInterestForDays[260] = 17651;\r\n        cumulativeInterestForDays[261] = 17812;\r\n        cumulativeInterestForDays[262] = 17974;\r\n        cumulativeInterestForDays[263] = 18137;\r\n        cumulativeInterestForDays[264] = 18301;\r\n        cumulativeInterestForDays[265] = 18466;\r\n        cumulativeInterestForDays[266] = 18632;\r\n        cumulativeInterestForDays[267] = 18799;\r\n        cumulativeInterestForDays[268] = 18967;\r\n        cumulativeInterestForDays[269] = 19136;\r\n        cumulativeInterestForDays[270] = 19306;\r\n        cumulativeInterestForDays[271] = 19477;\r\n        cumulativeInterestForDays[272] = 19649;\r\n        cumulativeInterestForDays[273] = 19822;\r\n        cumulativeInterestForDays[274] = 19996;\r\n        cumulativeInterestForDays[275] = 20171;\r\n        cumulativeInterestForDays[276] = 20347;\r\n        cumulativeInterestForDays[277] = 20524;\r\n        cumulativeInterestForDays[278] = 20702;\r\n        cumulativeInterestForDays[279] = 20881;\r\n        cumulativeInterestForDays[280] = 21061;\r\n        cumulativeInterestForDays[281] = 21242;\r\n        cumulativeInterestForDays[282] = 21424;\r\n        cumulativeInterestForDays[283] = 21607;\r\n        cumulativeInterestForDays[284] = 21791;\r\n        cumulativeInterestForDays[285] = 21976;\r\n        cumulativeInterestForDays[286] = 22162;\r\n        cumulativeInterestForDays[287] = 22350;\r\n        cumulativeInterestForDays[288] = 22539;\r\n        cumulativeInterestForDays[289] = 22729;\r\n        cumulativeInterestForDays[290] = 22920;\r\n        cumulativeInterestForDays[291] = 23112;\r\n        cumulativeInterestForDays[292] = 23305;\r\n        cumulativeInterestForDays[293] = 23499;\r\n        cumulativeInterestForDays[294] = 23694;\r\n        cumulativeInterestForDays[295] = 23890;\r\n        cumulativeInterestForDays[296] = 24087;\r\n        cumulativeInterestForDays[297] = 24285;\r\n        cumulativeInterestForDays[298] = 24484;\r\n        cumulativeInterestForDays[299] = 24685;\r\n        cumulativeInterestForDays[300] = 24887;\r\n        cumulativeInterestForDays[301] = 25090;\r\n        cumulativeInterestForDays[302] = 25294;\r\n        cumulativeInterestForDays[303] = 25499;\r\n        cumulativeInterestForDays[304] = 25705;\r\n        cumulativeInterestForDays[305] = 25912;\r\n        cumulativeInterestForDays[306] = 26120;\r\n        cumulativeInterestForDays[307] = 26330;\r\n        cumulativeInterestForDays[308] = 26541;\r\n        cumulativeInterestForDays[309] = 26753;\r\n        cumulativeInterestForDays[310] = 26966;\r\n        cumulativeInterestForDays[311] = 27180;\r\n        cumulativeInterestForDays[312] = 27395;\r\n        cumulativeInterestForDays[313] = 27611;\r\n        cumulativeInterestForDays[314] = 27829;\r\n        cumulativeInterestForDays[315] = 28048;\r\n        cumulativeInterestForDays[316] = 28268;\r\n        cumulativeInterestForDays[317] = 28489;\r\n        cumulativeInterestForDays[318] = 28711;\r\n        cumulativeInterestForDays[319] = 28934;\r\n        cumulativeInterestForDays[320] = 29159;\r\n        cumulativeInterestForDays[321] = 29385;\r\n        cumulativeInterestForDays[322] = 29612;\r\n        cumulativeInterestForDays[323] = 29840;\r\n        cumulativeInterestForDays[324] = 30069;\r\n        cumulativeInterestForDays[325] = 30300;\r\n        cumulativeInterestForDays[326] = 30532;\r\n        cumulativeInterestForDays[327] = 30765;\r\n        cumulativeInterestForDays[328] = 30999;\r\n        cumulativeInterestForDays[329] = 31235;\r\n        cumulativeInterestForDays[330] = 31472;\r\n        cumulativeInterestForDays[331] = 31710;\r\n        cumulativeInterestForDays[332] = 31949;\r\n        cumulativeInterestForDays[333] = 32190;\r\n        cumulativeInterestForDays[334] = 32432;\r\n        cumulativeInterestForDays[335] = 32675;\r\n        cumulativeInterestForDays[336] = 32919;\r\n        cumulativeInterestForDays[337] = 33165;\r\n        cumulativeInterestForDays[338] = 33412;\r\n        cumulativeInterestForDays[339] = 33660;\r\n        cumulativeInterestForDays[340] = 33909;\r\n        cumulativeInterestForDays[341] = 34160;\r\n        cumulativeInterestForDays[342] = 34412;\r\n        cumulativeInterestForDays[343] = 34665;\r\n        cumulativeInterestForDays[344] = 34920;\r\n        cumulativeInterestForDays[345] = 35176;\r\n        cumulativeInterestForDays[346] = 35433;\r\n        cumulativeInterestForDays[347] = 35692;\r\n        cumulativeInterestForDays[348] = 35952;\r\n        cumulativeInterestForDays[349] = 36213;\r\n        cumulativeInterestForDays[350] = 36476;\r\n        cumulativeInterestForDays[351] = 36740;\r\n        cumulativeInterestForDays[352] = 37005;\r\n        cumulativeInterestForDays[353] = 37272;\r\n        cumulativeInterestForDays[354] = 37540;\r\n        cumulativeInterestForDays[355] = 37809;\r\n        cumulativeInterestForDays[356] = 38080;\r\n        cumulativeInterestForDays[357] = 38352;\r\n        cumulativeInterestForDays[358] = 38625;\r\n        cumulativeInterestForDays[359] = 38900;\r\n        cumulativeInterestForDays[360] = 39176;\r\n        cumulativeInterestForDays[361] = 39454;\r\n        cumulativeInterestForDays[362] = 39733;\r\n        cumulativeInterestForDays[363] = 40013;\r\n        cumulativeInterestForDays[364] = 40295;\r\n        cumulativeInterestForDays[365] = 40578;\r\n\r\n        return cumulativeInterestForDays;\r\n    }\r\n\r\n    function _getInterestTillDays(uint _day) internal pure returns(uint) {\r\n        require(_day <= MAX_DAYS);\r\n\r\n        return _initCumulativeInterestForDays()[_day];\r\n    }\r\n}\r\n\r\n// File: contracts/Events.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\ncontract Events {\r\n    event Deposit(address user, uint amount, uint8 stakeId, address uplinkAddress, uint uplinkStakeId);\r\n    event Withdrawn(address user, uint amount);\r\n    event ReInvest(address user, uint amount);\r\n    event Exited(address user, uint stakeId, uint amount);\r\n    event PoolDrawn(uint refPoolAmount, uint sponsorPoolAmount);\r\n}\r\n\r\n// File: contracts/PercentageCalculator.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\ncontract PercentageCalculator {\r\n    using SafeMath for uint;\r\n\r\n    uint public constant PERCENT_MULTIPLIER = 10000;\r\n\r\n    function _calcPercentage(uint amount, uint basisPoints) internal pure returns (uint) {\r\n        require(basisPoints >= 0);\r\n        return amount.mul(basisPoints).div(PERCENT_MULTIPLIER);\r\n    }\r\n\r\n    function _calcBasisPoints(uint base, uint interest) internal pure returns (uint) {\r\n        return interest.mul(PERCENT_MULTIPLIER).div(base);\r\n    }\r\n}\r\n\r\n// File: contracts/utils/Utils.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\ncontract Utils {\r\n    using SafeMath for uint;\r\n\r\n    uint public constant DAY = 86400; // Seconds in a day\r\n\r\n    function _calcDays(uint start, uint end) internal pure returns (uint) {\r\n        return end.sub(start).div(DAY);\r\n    }\r\n}\r\n\r\n// File: contracts/Constants.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\ncontract Constants {\r\n    uint public constant MAX_CONTRACT_REWARD_BP = 37455; // 374.55%\r\n\r\n    uint public constant LP_FEE_BP = 500; // 5%\r\n    uint public constant REF_COMMISSION_BP = 800; // 8%\r\n\r\n    // Ref and sponsor pools\r\n    uint public constant REF_POOL_FEE_BP = 50; // 0.5%, goes to ref pool from each deposit\r\n    uint public constant SPONSOR_POOL_FEE_BP = 50; // 0.5%, goes to sponsor pool from each deposit\r\n\r\n    uint public constant EXIT_PENALTY_BP = 5000; // 50%, deduct from user's initial deposit on exit\r\n\r\n    // Contract bonus\r\n    uint public constant MAX_CONTRACT_BONUS_BP = 300; // maximum bonus a user can get 3%\r\n    uint public constant CONTRACT_BONUS_UNIT = 250;    // For each 250 token balance of contract, gives\r\n    uint public constant CONTRACT_BONUS_PER_UNIT_BP = 1; // 0.01% extra interest\r\n\r\n    // Hold bonus\r\n    uint public constant MAX_HOLD_BONUS_BP = 100; // Maximum 1% hold bonus\r\n    uint public constant HOLD_BONUS_UNIT = 43200; // 12 hours\r\n    uint public constant HOLD_BONUS_PER_UNIT_BP = 2; // 0.02% hold bonus for each 12 hours of hold\r\n\r\n    uint public constant REWARD_THRESHOLD_BP = 300; // User will only get hold bonus if his rewards are more then 3% of his deposit\r\n\r\n    uint public constant MAX_WITHDRAWAL_OVER_REWARD_THRESHOLD_BP = 300; // Max daily withdrawal limit if user is above REWARD_THRESHOLD_BP\r\n\r\n    uint public constant DEV_FEE_BP = 500; // 5%\r\n}\r\n\r\n// File: contracts/StatsVars.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\ncontract StatsVars {\r\n    // Stats\r\n    uint public totalDepositRewards;\r\n    uint public totalExited;\r\n}\r\n\r\n// File: contracts/SharedVariables.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract SharedVariables is Constants, StatsVars, Events, PercentageCalculator, InterestCalculator, Utils {\r\n\r\n    uint public constant fourRXTokenDecimals = 8;\r\n    IERC20 public fourRXToken;\r\n    address public devAddress;\r\n\r\n    struct Stake {\r\n        uint8 id;\r\n        bool active;\r\n        bool optInInsured; // Is insured ???\r\n\r\n        uint32 holdFrom; // Timestamp from which hold should be counted\r\n        uint32 interestCountFrom; // TimeStamp from which interest should be counted, from the beginning\r\n        uint32 lastWithdrawalAt; // date time of last withdrawals so we don't allow more then 3% a day\r\n\r\n        uint origDeposit;\r\n        uint deposit; // Initial Deposit\r\n        uint withdrawn; // Total withdrawn from this stake\r\n        uint penalty; // Total penalty on this stale\r\n\r\n        uint rewards;\r\n    }\r\n\r\n    struct User {\r\n        address wallet; // Wallet Address\r\n        Stake[] stakes;\r\n    }\r\n\r\n    mapping (address => User) public users;\r\n\r\n    uint[] public refPoolBonuses;\r\n    uint[] public sponsorPoolBonuses;\r\n\r\n    uint public maxContractBalance;\r\n\r\n    uint16 public poolCycle;\r\n    uint32 public poolDrewAt;\r\n\r\n    uint public refPoolBalance;\r\n    uint public sponsorPoolBalance;\r\n\r\n    uint public devBalance;\r\n}\r\n\r\n// File: contracts/libs/SortedLinkedList.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\nlibrary SortedLinkedList {\r\n    using SafeMath for uint;\r\n\r\n    struct Item {\r\n        address user;\r\n        uint16 next;\r\n        uint8 id;\r\n        uint score;\r\n    }\r\n\r\n    uint16 internal constant GUARD = 0;\r\n\r\n    function addNode(Item[] storage items, address user, uint score, uint8 id) internal {\r\n        uint16 prev = findSortedIndex(items, score);\r\n        require(_verifyIndex(items, score, prev));\r\n        items.push(Item(user, items[prev].next, id, score));\r\n        items[prev].next = uint16(items.length.sub(1));\r\n    }\r\n\r\n    function updateNode(Item[] storage items, address user, uint score, uint8 id) internal {\r\n        (uint16 current, uint16 oldPrev) = findCurrentAndPrevIndex(items, user, id);\r\n        require(items[oldPrev].next == current);\r\n        require(items[current].user == user);\r\n        require(items[current].id == id);\r\n        score = score.add(items[current].score);\r\n        items[oldPrev].next = items[current].next;\r\n        addNode(items, user, score, id);\r\n    }\r\n\r\n    function initNodes(Item[] storage items) internal {\r\n        items.push(Item(address(0), 0, 0, 0));\r\n    }\r\n\r\n    function _verifyIndex(Item[] storage items, uint score, uint16 prev) internal view returns (bool) {\r\n        return prev == GUARD || (score <= items[prev].score && score > items[items[prev].next].score);\r\n    }\r\n\r\n    function findSortedIndex(Item[] storage items, uint score) internal view returns(uint16) {\r\n        Item memory current = items[GUARD];\r\n        uint16 index = GUARD;\r\n        while(current.next != GUARD && items[current.next].score >= score) {\r\n            index = current.next;\r\n            current = items[current.next];\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    function findCurrentAndPrevIndex(Item[] storage items, address user, uint8 id) internal view returns (uint16, uint16) {\r\n        Item memory current = items[GUARD];\r\n        uint16 currentIndex = GUARD;\r\n        uint16 prevIndex = GUARD;\r\n        while(current.next != GUARD && !(current.user == user && current.id == id)) {\r\n            prevIndex = currentIndex;\r\n            currentIndex = current.next;\r\n            current = items[current.next];\r\n        }\r\n\r\n        return (currentIndex, prevIndex);\r\n    }\r\n\r\n    function isInList(Item[] storage items, address user, uint8 id) internal view returns (bool) {\r\n        Item memory current = items[GUARD];\r\n        bool exists = false;\r\n\r\n        while(current.next != GUARD ) {\r\n            if (current.user == user && current.id == id) {\r\n                exists = true;\r\n                break;\r\n            }\r\n            current = items[current.next];\r\n        }\r\n\r\n        return exists;\r\n    }\r\n}\r\n\r\n// File: contracts/Pools/SponsorPool.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\ncontract SponsorPool {\r\n    SortedLinkedList.Item[] public sponsorPoolUsers;\r\n\r\n    function _addSponsorPoolRecord(address user, uint amount, uint8 stakeId) internal {\r\n        SortedLinkedList.addNode(sponsorPoolUsers, user, amount, stakeId);\r\n    }\r\n\r\n    function _cleanSponsorPoolUsers() internal {\r\n        delete sponsorPoolUsers;\r\n        SortedLinkedList.initNodes(sponsorPoolUsers);\r\n    }\r\n}\r\n\r\n// File: contracts/Pools/ReferralPool.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\ncontract ReferralPool {\r\n\r\n    SortedLinkedList.Item[] public refPoolUsers;\r\n\r\n    function _addReferralPoolRecord(address user, uint amount, uint8 stakeId) internal {\r\n        if (!SortedLinkedList.isInList(refPoolUsers, user, stakeId)) {\r\n            SortedLinkedList.addNode(refPoolUsers, user, amount, stakeId);\r\n        } else {\r\n            SortedLinkedList.updateNode(refPoolUsers, user, amount, stakeId);\r\n        }\r\n    }\r\n\r\n    function _cleanReferralPoolUsers() internal {\r\n        delete refPoolUsers;\r\n        SortedLinkedList.initNodes(refPoolUsers);\r\n    }\r\n}\r\n\r\n// File: contracts/Pools.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Pools is SponsorPool, ReferralPool, SharedVariables {\r\n\r\n    uint8 public constant MAX_REF_POOL_USERS = 12;\r\n    uint8 public constant MAX_SPONSOR_POOL_USERS = 10;\r\n\r\n    function _resetPools() internal {\r\n        _cleanSponsorPoolUsers();\r\n        _cleanReferralPoolUsers();\r\n        delete refPoolBalance;\r\n        delete sponsorPoolBalance;\r\n        poolDrewAt = uint32(block.timestamp);\r\n        poolCycle++;\r\n    }\r\n\r\n    function _updateSponsorPoolUsers(User memory user, Stake memory stake) internal {\r\n        _addSponsorPoolRecord(user.wallet, stake.deposit, stake.id);\r\n    }\r\n\r\n    // Reorganise top ref-pool users to draw pool for\r\n    function _updateRefPoolUsers(User memory uplinkUser , Stake memory stake, uint8 uplinkUserStakeId) internal {\r\n        _addReferralPoolRecord(uplinkUser.wallet, stake.deposit, uplinkUserStakeId);\r\n    }\r\n\r\n    function drawPool() public {\r\n        if (block.timestamp > poolDrewAt + 1 days) {\r\n\r\n            SortedLinkedList.Item memory current = refPoolUsers[0];\r\n            uint16 i = 0;\r\n\r\n            while (i < MAX_REF_POOL_USERS && current.next != SortedLinkedList.GUARD) {\r\n                current = refPoolUsers[current.next];\r\n                users[current.user].stakes[current.id].rewards = users[current.user].stakes[current.id].rewards.add(_calcPercentage(refPoolBalance, refPoolBonuses[i]));\r\n                i++;\r\n            }\r\n\r\n            current = sponsorPoolUsers[0];\r\n            i = 0;\r\n\r\n            while (i < MAX_SPONSOR_POOL_USERS && current.next != SortedLinkedList.GUARD) {\r\n                current = sponsorPoolUsers[current.next];\r\n                users[current.user].stakes[current.id].rewards = users[current.user].stakes[current.id].rewards.add(_calcPercentage(sponsorPoolBalance, sponsorPoolBonuses[i]));\r\n                i++;\r\n            }\r\n\r\n            emit PoolDrawn(refPoolBalance, sponsorPoolBalance);\r\n\r\n            _resetPools();\r\n        }\r\n    }\r\n\r\n    // pool info getters\r\n\r\n    function getPoolInfo() external view returns (uint32, uint16, uint, uint) {\r\n        return (poolDrewAt, poolCycle, sponsorPoolBalance, refPoolBalance);\r\n    }\r\n\r\n    function getPoolParticipants() external view returns (address[] memory, uint8[] memory, uint[] memory, address[] memory, uint8[] memory, uint[] memory) {\r\n        address[] memory sponsorPoolUsersAddresses = new address[](MAX_SPONSOR_POOL_USERS);\r\n        uint8[] memory sponsorPoolUsersStakeIds = new uint8[](MAX_SPONSOR_POOL_USERS);\r\n        uint[] memory sponsorPoolUsersAmounts = new uint[](MAX_SPONSOR_POOL_USERS);\r\n\r\n        address[] memory refPoolUsersAddresses = new address[](MAX_REF_POOL_USERS);\r\n        uint8[] memory refPoolUsersStakeIds = new uint8[](MAX_REF_POOL_USERS);\r\n        uint[] memory refPoolUsersAmounts = new uint[](MAX_REF_POOL_USERS);\r\n\r\n        uint16 i = 0;\r\n        SortedLinkedList.Item memory current = sponsorPoolUsers[i];\r\n\r\n        while (i < MAX_SPONSOR_POOL_USERS && current.next != SortedLinkedList.GUARD) {\r\n            current = sponsorPoolUsers[current.next];\r\n            sponsorPoolUsersAddresses[i] = current.user;\r\n            sponsorPoolUsersStakeIds[i] = current.id;\r\n            sponsorPoolUsersAmounts[i] = current.score;\r\n            i++;\r\n        }\r\n\r\n        i = 0;\r\n        current = refPoolUsers[i];\r\n\r\n        while (i < MAX_REF_POOL_USERS && current.next != SortedLinkedList.GUARD) {\r\n            current = refPoolUsers[current.next];\r\n            refPoolUsersAddresses[i] = current.user;\r\n            refPoolUsersStakeIds[i] = current.id;\r\n            refPoolUsersAmounts[i] = current.score;\r\n            i++;\r\n        }\r\n\r\n        return (sponsorPoolUsersAddresses, sponsorPoolUsersStakeIds, sponsorPoolUsersAmounts, refPoolUsersAddresses, refPoolUsersStakeIds, refPoolUsersAmounts);\r\n    }\r\n}\r\n\r\n// File: contracts/RewardsAndPenalties.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\n\r\ncontract RewardsAndPenalties is Pools {\r\n    using SafeMath for uint;\r\n\r\n    function _distributeReferralReward(uint amount, Stake memory stake, address uplinkAddress, uint8 uplinkStakeId) internal {\r\n        User storage uplinkUser = users[uplinkAddress];\r\n\r\n        uint commission = _calcPercentage(amount, REF_COMMISSION_BP);\r\n\r\n        uplinkUser.stakes[uplinkStakeId].rewards = uplinkUser.stakes[uplinkStakeId].rewards.add(commission);\r\n\r\n        _updateRefPoolUsers(uplinkUser, stake, uplinkStakeId);\r\n    }\r\n\r\n    function _calcDepositRewards(uint amount) internal pure returns (uint) {\r\n        uint rewardPercent = 0;\r\n\r\n        if (amount > 175 * (10**fourRXTokenDecimals)) {\r\n            rewardPercent = 50; // 0.5%\r\n        } else if (amount > 150 * (10**fourRXTokenDecimals)) {\r\n            rewardPercent = 40; // 0.4%\r\n        } else if (amount > 135 * (10**fourRXTokenDecimals)) {\r\n            rewardPercent = 35; // 0.35%\r\n        } else if (amount > 119 * (10**fourRXTokenDecimals)) {\r\n            rewardPercent = 30; // 0.3%\r\n        } else if (amount > 100 * (10**fourRXTokenDecimals)) {\r\n            rewardPercent = 25; // 0.25%\r\n        } else if (amount > 89 * (10**fourRXTokenDecimals)) {\r\n            rewardPercent = 20; // 0.2%\r\n        } else if (amount > 75 * (10**fourRXTokenDecimals)) {\r\n            rewardPercent = 15; // 0.15%\r\n        } else if (amount > 59 * (10**fourRXTokenDecimals)) {\r\n            rewardPercent = 10; // 0.1%\r\n        } else if (amount > 45 * (10**fourRXTokenDecimals)) {\r\n            rewardPercent = 5; // 0.05%\r\n        } else if (amount > 20 * (10**fourRXTokenDecimals)) {\r\n            rewardPercent = 2; // 0.02%\r\n        } else if (amount > 9 * (10**fourRXTokenDecimals)) {\r\n            rewardPercent = 1; // 0.01%\r\n        }\r\n\r\n        return _calcPercentage(amount, rewardPercent);\r\n    }\r\n\r\n    function _calcContractBonus(Stake memory stake) internal view returns (uint) {\r\n        uint contractBonusPercent = fourRXToken.balanceOf(address(this)).mul(CONTRACT_BONUS_PER_UNIT_BP).div(CONTRACT_BONUS_UNIT).div(10**fourRXTokenDecimals);\r\n\r\n        if (contractBonusPercent > MAX_CONTRACT_BONUS_BP) {\r\n            contractBonusPercent = MAX_CONTRACT_BONUS_BP;\r\n        }\r\n\r\n        return _calcPercentage(stake.deposit, contractBonusPercent);\r\n    }\r\n\r\n    function _calcHoldRewards(Stake memory stake) internal view returns (uint) {\r\n        uint holdBonusPercent = (block.timestamp).sub(stake.holdFrom).div(HOLD_BONUS_UNIT).mul(HOLD_BONUS_PER_UNIT_BP);\r\n\r\n        if (holdBonusPercent > MAX_HOLD_BONUS_BP) {\r\n            holdBonusPercent = MAX_HOLD_BONUS_BP;\r\n        }\r\n\r\n        return _calcPercentage(stake.deposit, holdBonusPercent);\r\n    }\r\n\r\n    function _calcRewardsWithoutHoldBonus(Stake memory stake) internal view returns (uint) {\r\n        uint interest = _calcPercentage(stake.deposit, _getInterestTillDays(_calcDays(stake.interestCountFrom, block.timestamp)));\r\n\r\n        uint contractBonus = _calcContractBonus(stake);\r\n\r\n        uint totalRewardsWithoutHoldBonus = stake.rewards.add(interest).add(contractBonus);\r\n\r\n        return totalRewardsWithoutHoldBonus;\r\n    }\r\n\r\n    function _calcRewards(Stake memory stake) internal view returns (uint) {\r\n        uint rewards = _calcRewardsWithoutHoldBonus(stake);\r\n\r\n        if (_calcBasisPoints(stake.deposit, rewards) >= REWARD_THRESHOLD_BP) {\r\n            rewards = rewards.add(_calcHoldRewards(stake));\r\n        }\r\n\r\n        uint maxRewards = _calcPercentage(stake.deposit, MAX_CONTRACT_REWARD_BP);\r\n\r\n        if (rewards > maxRewards) {\r\n            rewards = maxRewards;\r\n        }\r\n\r\n        return rewards;\r\n    }\r\n\r\n    function _calcPenalty(Stake memory stake, uint withdrawalAmount) internal pure returns (uint) {\r\n        uint basisPoints = _calcBasisPoints(stake.deposit, withdrawalAmount);\r\n        // If user's rewards are more then REWARD_THRESHOLD_BP -- No penalty\r\n        if (basisPoints >= REWARD_THRESHOLD_BP) {\r\n            return 0;\r\n        }\r\n\r\n        return _calcPercentage(withdrawalAmount, PERCENT_MULTIPLIER.sub(basisPoints.mul(PERCENT_MULTIPLIER).div(REWARD_THRESHOLD_BP)));\r\n    }\r\n}\r\n\r\n// File: contracts/Insurance.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\ncontract Insurance is RewardsAndPenalties {\r\n    uint private constant BASE_INSURANCE_FOR_BP = 3500; // trigger insurance with contract balance fall below 35%\r\n    uint private constant OPT_IN_INSURANCE_FEE_BP = 1000; // 10%\r\n    uint private constant OPT_IN_INSURANCE_FOR_BP = 10000; // 100%\r\n\r\n    bool public isInInsuranceState = false; // if contract is only allowing insured money this becomes true;\r\n\r\n    function _checkForBaseInsuranceTrigger() internal {\r\n        if (fourRXToken.balanceOf(address(this)) <= _calcPercentage(maxContractBalance, BASE_INSURANCE_FOR_BP)) {\r\n            isInInsuranceState = true;\r\n        } else {\r\n            isInInsuranceState = false;\r\n        }\r\n    }\r\n\r\n    function _getInsuredAvailableAmount(Stake memory stake, uint withdrawalAmount) internal pure returns (uint)\r\n    {\r\n        uint availableAmount = withdrawalAmount;\r\n        // Calc correct insured value by checking which insurance should be applied\r\n        uint insuredFor = BASE_INSURANCE_FOR_BP;\r\n        if (stake.optInInsured) {\r\n            insuredFor = OPT_IN_INSURANCE_FOR_BP;\r\n        }\r\n\r\n        uint maxWithdrawalAllowed = _calcPercentage(stake.deposit, insuredFor);\r\n\r\n        require(maxWithdrawalAllowed >= stake.withdrawn.add(stake.penalty)); // if contract is in insurance trigger, do not allow withdrawals for the users who already have withdrawn more then 35%\r\n\r\n        if (stake.withdrawn.add(availableAmount).add(stake.penalty) > maxWithdrawalAllowed) {\r\n            availableAmount = maxWithdrawalAllowed.sub(stake.withdrawn).sub(stake.penalty);\r\n        }\r\n\r\n        return availableAmount;\r\n    }\r\n\r\n    function _insureStake(address user, Stake storage stake) internal {\r\n        require(!stake.optInInsured && stake.active);\r\n        require(fourRXToken.transferFrom(user, address(this), _calcPercentage(stake.deposit, OPT_IN_INSURANCE_FEE_BP)));\r\n\r\n        stake.optInInsured = true;\r\n    }\r\n}\r\n\r\n// File: contracts/FourRXFinance.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\n/// @title 4RX Finance Staking DAPP Contract\r\n/// @notice Available functionality: Deposit, Withdraw, ExitProgram, Insure Stake\r\ncontract FourRXFinance is Insurance {\r\n\r\n    constructor(address _devAddress, address fourRXTokenAddress) public {\r\n        devAddress = _devAddress;\r\n        fourRXToken = IERC20(fourRXTokenAddress);\r\n\r\n        // Ref Bonus // 12 Max Participants\r\n        refPoolBonuses.push(2000); // 20%\r\n        refPoolBonuses.push(1700); // 17%\r\n        refPoolBonuses.push(1400); // 14%\r\n        refPoolBonuses.push(1100); // 11%\r\n        refPoolBonuses.push(1000); // 10%\r\n        refPoolBonuses.push(700); // 7%\r\n        refPoolBonuses.push(600); // 6%\r\n        refPoolBonuses.push(500); // 5%\r\n        refPoolBonuses.push(400); // 4%\r\n        refPoolBonuses.push(300); // 3%\r\n        refPoolBonuses.push(200); // 2%\r\n        refPoolBonuses.push(100); // 1%\r\n\r\n        // Sponsor Pool // 10 Max Participants\r\n        sponsorPoolBonuses.push(3000); // 30%\r\n        sponsorPoolBonuses.push(2000); // 20%\r\n        sponsorPoolBonuses.push(1200); // 12%\r\n        sponsorPoolBonuses.push(1000); // 10%\r\n        sponsorPoolBonuses.push(800); // 8%\r\n        sponsorPoolBonuses.push(700); // 7%\r\n        sponsorPoolBonuses.push(600); // 6%\r\n        sponsorPoolBonuses.push(400); // 4%\r\n        sponsorPoolBonuses.push(200); // 2%\r\n        sponsorPoolBonuses.push(100); // 1%\r\n\r\n        _resetPools();\r\n\r\n        poolCycle = 0;\r\n    }\r\n\r\n    function deposit(uint amount, address uplinkAddress, uint8 uplinkStakeId) external {\r\n        require(\r\n            uplinkAddress == address(0) ||\r\n            (users[uplinkAddress].wallet != address(0) && users[uplinkAddress].stakes[uplinkStakeId].active)\r\n        ); // Either uplink must be registered and be a active deposit or 0 address\r\n\r\n        User storage user = users[msg.sender];\r\n\r\n        if (users[msg.sender].stakes.length > 0) {\r\n            require(amount >= users[msg.sender].stakes[user.stakes.length - 1].deposit.mul(2)); // deposit amount must be greater 2x then last deposit\r\n        }\r\n\r\n        require(fourRXToken.transferFrom(msg.sender, address(this), amount));\r\n\r\n        drawPool(); // Draw old pool if qualified, and we're pretty sure that this stake is going to be created\r\n\r\n        uint depositReward = _calcDepositRewards(amount);\r\n\r\n        Stake memory stake;\r\n\r\n        user.wallet = msg.sender;\r\n\r\n        stake.id = uint8(user.stakes.length);\r\n        stake.active = true;\r\n        stake.interestCountFrom = uint32(block.timestamp);\r\n        stake.holdFrom = uint32(block.timestamp);\r\n\r\n        stake.origDeposit = amount;\r\n        stake.deposit = amount.sub(_calcPercentage(amount, LP_FEE_BP)); // Deduct LP Commission\r\n        stake.rewards = depositReward;\r\n\r\n        _updateSponsorPoolUsers(user, stake);\r\n\r\n        if (uplinkAddress != address(0)) {\r\n            _distributeReferralReward(amount, stake, uplinkAddress, uplinkStakeId);\r\n        }\r\n\r\n        user.stakes.push(stake);\r\n\r\n        refPoolBalance = refPoolBalance.add(_calcPercentage(amount, REF_POOL_FEE_BP));\r\n\r\n        sponsorPoolBalance = sponsorPoolBalance.add(_calcPercentage(amount, SPONSOR_POOL_FEE_BP));\r\n\r\n        devBalance = devBalance.add(_calcPercentage(amount, DEV_FEE_BP));\r\n\r\n        uint currentContractBalance = fourRXToken.balanceOf(address(this));\r\n\r\n        if (currentContractBalance > maxContractBalance) {\r\n            maxContractBalance = currentContractBalance;\r\n        }\r\n\r\n        totalDepositRewards = totalDepositRewards.add(depositReward);\r\n\r\n        emit Deposit(msg.sender, amount, stake.id,  uplinkAddress, uplinkStakeId);\r\n    }\r\n\r\n\r\n    function balanceOf(address _userAddress, uint stakeId) public view returns (uint) {\r\n        require(users[_userAddress].wallet == _userAddress);\r\n        User memory user = users[_userAddress];\r\n\r\n        return _calcRewards(user.stakes[stakeId]).sub(user.stakes[stakeId].withdrawn);\r\n    }\r\n\r\n    function withdraw(uint stakeId) external {\r\n        User storage user = users[msg.sender];\r\n        Stake storage stake = user.stakes[stakeId];\r\n        require(user.wallet == msg.sender && stake.active); // stake should be active\r\n\r\n        require(stake.lastWithdrawalAt + 1 days < block.timestamp); // we only allow one withdrawal each day\r\n\r\n        uint availableAmount = _calcRewards(stake).sub(stake.withdrawn).sub(stake.penalty);\r\n\r\n        require(availableAmount > 0);\r\n\r\n        uint penalty = _calcPenalty(stake, availableAmount);\r\n\r\n        if (penalty == 0) {\r\n            availableAmount = availableAmount.sub(_calcPercentage(stake.deposit, REWARD_THRESHOLD_BP)); // Only allow withdrawal if available is more then 10% of base\r\n\r\n            uint maxAllowedWithdrawal = _calcPercentage(stake.deposit, MAX_WITHDRAWAL_OVER_REWARD_THRESHOLD_BP);\r\n\r\n            if (availableAmount > maxAllowedWithdrawal) {\r\n                availableAmount = maxAllowedWithdrawal;\r\n            }\r\n        }\r\n\r\n        if (isInInsuranceState) {\r\n            availableAmount = _getInsuredAvailableAmount(stake, availableAmount);\r\n        }\r\n\r\n        availableAmount = availableAmount.sub(penalty);\r\n\r\n        stake.withdrawn = stake.withdrawn.add(availableAmount);\r\n        stake.lastWithdrawalAt = uint32(block.timestamp);\r\n        stake.holdFrom = uint32(block.timestamp);\r\n\r\n        stake.penalty = stake.penalty.add(penalty);\r\n\r\n        if (stake.withdrawn >= _calcPercentage(stake.deposit, MAX_CONTRACT_REWARD_BP)) {\r\n            stake.active = false; // if stake has withdrawn equals to or more then the max amount, then mark stake in-active\r\n        }\r\n\r\n        _checkForBaseInsuranceTrigger();\r\n\r\n        fourRXToken.transfer(user.wallet, availableAmount);\r\n\r\n        emit Withdrawn(user.wallet, availableAmount);\r\n    }\r\n\r\n    function exitProgram(uint stakeId) external {\r\n        User storage user = users[msg.sender];\r\n        require(user.wallet == msg.sender);\r\n        Stake storage stake = user.stakes[stakeId];\r\n        require(stake.active);\r\n        uint penaltyAmount = _calcPercentage(stake.origDeposit, EXIT_PENALTY_BP);\r\n        uint balance = balanceOf(msg.sender, stakeId);\r\n\r\n        uint availableAmount = stake.origDeposit + balance - penaltyAmount; // (deposit + (rewards - withdrawn) - penalty)\r\n\r\n        if (availableAmount > 0) {\r\n            fourRXToken.transfer(user.wallet, availableAmount);\r\n            stake.withdrawn = stake.withdrawn.add(availableAmount);\r\n        }\r\n\r\n        stake.active = false;\r\n        stake.penalty = stake.penalty.add(penaltyAmount);\r\n\r\n        totalExited = totalExited.add(1);\r\n\r\n        emit Exited(user.wallet, stakeId, availableAmount > 0 ? availableAmount : 0);\r\n    }\r\n\r\n    function insureStake(uint stakeId) external {\r\n        User storage user = users[msg.sender];\r\n        require(user.wallet == msg.sender);\r\n        Stake storage stake = user.stakes[stakeId];\r\n        _insureStake(user.wallet, stake);\r\n    }\r\n\r\n    // Getters\r\n\r\n    function getUser(address userAddress) external view returns (User memory) {\r\n        return users[userAddress];\r\n    }\r\n\r\n    function getContractInfo() external view returns (uint, bool, uint, uint) {\r\n        return (maxContractBalance, isInInsuranceState, totalDepositRewards, totalExited);\r\n    }\r\n\r\n    function withdrawDevFee(address withdrawingAddress, uint amount) external {\r\n        require(msg.sender == devAddress);\r\n        require(amount <= devBalance);\r\n        devBalance = devBalance.sub(amount);\r\n        fourRXToken.transfer(withdrawingAddress, amount);\r\n    }\r\n\r\n    function updateDevAddress(address newDevAddress) external {\r\n        require(msg.sender == devAddress);\r\n        devAddress = newDevAddress;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fourRXTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"stakeId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"uplinkAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uplinkStakeId\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Exited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refPoolAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sponsorPoolAmount\",\"type\":\"uint256\"}],\"name\":\"PoolDrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReInvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTRACT_BONUS_PER_UNIT_BP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_BONUS_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_FEE_BP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXIT_PENALTY_BP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HOLD_BONUS_PER_UNIT_BP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HOLD_BONUS_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_FEE_BP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CONTRACT_BONUS_BP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CONTRACT_REWARD_BP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_HOLD_BONUS_BP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_REF_POOL_USERS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SPONSOR_POOL_USERS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAWAL_OVER_REWARD_THRESHOLD_BP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REF_COMMISSION_BP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REF_POOL_FEE_BP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_THRESHOLD_BP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPONSOR_POOL_FEE_BP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uplinkAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"uplinkStakeId\",\"type\":\"uint8\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"exitProgram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fourRXToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fourRXTokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolParticipants\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"optInInsured\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"holdFrom\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"interestCountFrom\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastWithdrawalAt\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"origDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedVariables.Stake[]\",\"name\":\"stakes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SharedVariables.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"insureStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInInsuranceState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCycle\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolDrewAt\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refPoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"refPoolBonuses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"refPoolUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"next\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sponsorPoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sponsorPoolBonuses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sponsorPoolUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"next\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalExited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDevAddress\",\"type\":\"address\"}],\"name\":\"updateDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdrawingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FourRXFinance","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"0000000000000000000000008a87c8360836567993b30bfe5f24b885ff4b3c3500000000000000000000000089324cf1109748143bc5cc57ddf0e9ea80a0cf5e","EVMVersion":"petersburg","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://25a0e53eea4fde06ef950373d3422e78fd790eff92849aa2aed0984f65c9a8bb"}]}