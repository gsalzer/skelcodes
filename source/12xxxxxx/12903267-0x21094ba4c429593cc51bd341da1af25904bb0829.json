{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-2.0-only\r\npragma solidity ^0.8.0;\r\n\r\ncontract Registry {\r\n    address superuser;\r\n\r\n    // User `_u` is considered accredited for all Unix timestamps strictly\r\n    // smaller than `expirations[_u]`.\r\n    mapping(address => uint256) expirations;\r\n\r\n    constructor() {\r\n        superuser = msg.sender;\r\n    }\r\n\r\n    modifier onlySuperuser {\r\n        require(msg.sender == superuser);\r\n        _;\r\n    }\r\n\r\n    function setSuperuser(address _superuser) external onlySuperuser {\r\n        superuser = _superuser;\r\n    }\r\n\r\n    function currentlyValid(address _who) external view returns (bool) {\r\n        return block.timestamp < expirations[_who];\r\n    }\r\n\r\n    function expiration(address _who) external view returns (uint256) {\r\n        return expirations[_who];\r\n    }\r\n\r\n    function setExpiration(address _who, uint256 _when) external onlySuperuser {\r\n        expirations[_who] = _when;\r\n    }\r\n\r\n    function setExpirations(Expiration[] memory _data) external onlySuperuser {\r\n        for (uint256 _i = 0; _i < _data.length; _i++) {\r\n            expirations[_data[_i].who] = _data[_i].when;\r\n        }\r\n    }\r\n}\r\n\r\nstruct Expiration {\r\n    address who;\r\n    uint256 when;\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"currentlyValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"setExpiration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"when\",\"type\":\"uint256\"}],\"internalType\":\"struct Expiration[]\",\"name\":\"_data\",\"type\":\"tuple[]\"}],\"name\":\"setExpirations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_superuser\",\"type\":\"address\"}],\"name\":\"setSuperuser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Registry","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fa4d54e5fd0380021ff6a40f12423b6f782e21e6c6a8cd197de4fd1567e93f59"}]}