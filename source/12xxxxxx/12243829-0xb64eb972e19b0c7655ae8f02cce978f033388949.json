{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.9.0;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary MySafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            revert();\r\n        }\r\n        c = a * b;\r\n        require(c / a == b);\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\nabstract contract MyERC20Interface {\r\n    function totalSupply() external virtual view returns (uint256);\r\n    function balanceOf(address _tokenOwner) external virtual view returns (uint256 balance);\r\n    function allowance(address _tokenOwner, address _spender) external virtual view returns (uint256 remaining);\r\n    function transfer(address _to, uint256 _tokens) external virtual;\r\n    function approve(address _spender, uint256 _tokens) external virtual;\r\n    function transferFrom(address _from, address _to, uint256 _tokens) external virtual;\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokens);\r\n    event Approval(address indexed _tokenOwner, address indexed _spender, uint256 _tokens);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\nabstract contract MyOwned {\r\n    address internal owner_;\r\n    address internal newOwner_;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() {\r\n        owner_ = msg.sender;\r\n    }\r\n\r\n    function owner() external view returns (address) {\r\n        return owner_;\r\n    }    \r\n\r\n    function transferOwnership(address _newOwner) external {\r\n        require(msg.sender == owner_);\r\n        newOwner_ = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() external {\r\n        require(msg.sender == newOwner_);\r\n        emit OwnershipTransferred(owner_, newOwner_);\r\n        owner_ = newOwner_;\r\n        newOwner_ = address(0);\r\n    }\r\n}\r\n\r\n/**\r\n * The /**\r\n  * The Delegated contract allows a set of delegate accounts\r\n  * to perform special tasks such as admin tasks to the contract\r\n  */\r\n contract MyDelegated is MyOwned {\r\n    mapping (address => bool) delegates;\r\n    \r\n    event DelegateChanged(address delegate, bool state);\r\n\r\n    constructor() {\r\n    }\r\n\r\n    fallback() external {\r\n    }\r\n\r\n    function checkDelegate(address _user) internal view {\r\n        require(_user == owner_ || delegates[_user]);\r\n    }\r\n    \r\n    function checkOwner(address _user) internal view {\r\n        require(_user == owner_);\r\n    }\r\n    \r\n    function setDelegate(address _address, bool _state) external {\r\n        checkDelegate(msg.sender);\r\n\r\n        delegates[_address] = _state;\r\n        \r\n        emit DelegateChanged(_address, _state);\r\n    }\r\n \r\n    function isDelegate(address _account) external view returns (bool delegate)  {\r\n        return (_account == owner_ || delegates[_account]);\r\n    }\r\n }\r\n\r\n// ----------------------------------------------------------------------------\r\n// NFTStore.Top Token\r\n// ----------------------------------------------------------------------------\r\ncontract NFTStoreTopToken is MyERC20Interface, MyDelegated {\r\n    using MySafeMath for uint256;\r\n\r\n    string internal name_ = \"NFTStore.Top\"; \r\n    string internal symbol_ = \"NFTS\";\r\n    uint256 internal  decimals_ = 18;\r\n    uint256 internal  totalSupply_ = 0;\r\n    bool internal halted_ = false;\r\n\r\n    mapping(address => uint256) internal balances_;\r\n    mapping(address => mapping(address => uint256)) internal allowed_;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor() {\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return name_;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return symbol_;\r\n    }\r\n\r\n    function decimals() external view returns (uint8) {\r\n        return uint8(decimals_);\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) external {\r\n        checkDelegate(msg.sender);\r\n        require(_to != address(0));\r\n        require(_amount > 0);\r\n\r\n        balances_[_to] = balances_[_to].add(_amount);\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n    }\r\n\r\n    function burn(address _to, uint256 _amount) external {\r\n        checkDelegate(msg.sender);\r\n        require(_amount > 0);\r\n\r\n        balances_[_to] = balances_[_to].sub(_amount);\r\n        totalSupply_ = totalSupply_.sub(_amount);\r\n        emit Transfer(_to, address(0), _amount);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Set the halted tag when the emergent case happened\r\n    // ------------------------------------------------------------------------\r\n    function setEmergentHalt(bool _tag) external {\r\n        checkOwner(msg.sender);\r\n        halted_ = _tag;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() external override view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address _tokenOwner) external override view returns (uint256) {\r\n        return balances_[_tokenOwner];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address _to, uint256 _tokens) external override {\r\n        require(!halted_);\r\n\r\n        balances_[msg.sender] = balances_[msg.sender].sub(_tokens);\r\n        balances_[_to] = balances_[_to].add(_tokens);\r\n\r\n        emit Transfer(msg.sender, _to, _tokens);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces \r\n    // ------------------------------------------------------------------------\r\n    function approve(address _spender, uint256 _tokens) external override {\r\n        require(_spender != msg.sender);\r\n\r\n        allowed_[msg.sender][_spender] = _tokens;\r\n\r\n        emit Approval(msg.sender, _spender, _tokens);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    // \r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address _from, address _to, uint256 _tokens) external override {\r\n        require(!halted_);\r\n\r\n        allowed_[_from][msg.sender] = allowed_[_from][msg.sender].sub(_tokens);\r\n        balances_[_from] = balances_[_from].sub(_tokens);\r\n        balances_[_to] = balances_[_to].add(_tokens);\r\n\r\n        emit Transfer(_from, _to, _tokens);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address _tokenOwner, address _spender) external override view returns (uint256) {\r\n        return allowed_[_tokenOwner][_spender];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address _tokenAddress, uint256 _tokens) external {\r\n        checkOwner(msg.sender);\r\n        MyERC20Interface(_tokenAddress).transfer(owner_, _tokens);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isDelegate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"delegate\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tag\",\"type\":\"bool\"}],\"name\":\"setEmergentHalt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NFTStoreTopToken","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d7e34b33f5334367672b46286546f54d37a06916a18125b949184879f83dd8cc"}]}