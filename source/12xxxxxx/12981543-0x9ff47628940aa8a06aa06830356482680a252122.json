{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context\r\n{\r\n    address private _owner;\r\n    address internal _creator;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        _creator = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ncontract Chibz is Context, IERC20, Ownable\r\n{\r\n  using SafeMath for uint256;\r\n\r\n  string private _name = 'CHIBIZILLA';\r\n  string private _symbol = 'CHIBZ';\r\n\r\n  mapping (address => uint256) private _presaleLog;\r\n  mapping (address => uint256) private _rOwned;\r\n  mapping (address => uint256) private _tOwned;\r\n  mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n  mapping (address => bool) private _isExcluded;\r\n  address[] private _excluded;\r\n  uint256 private constant MAX = ~uint256(0);\r\n  uint256 private constant _tTotal = 100 * 10**9 * 10**9;\r\n  uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n  uint256 private _tFeeTotal;\r\n  uint8 private _decimals = 9;\r\n  uint8 private _inPresale;\r\n  uint256 private _tPresold;\r\n  uint256 public weiPrice;\r\n\r\n  event Presale(address _buyer, uint256 _amount, uint256 _cost);\r\n\r\n  constructor ()\r\n  {\r\n      _inPresale = 1;\r\n      weiPrice = 0;\r\n      _rOwned[_msgSender()] = _rTotal;\r\n      emit Transfer(address(0), _msgSender(), _tTotal);\r\n  }\r\n\r\n  function StartPresale() public onlyOwner\r\n  {\r\n      require(_inPresale == 0, \"presale already started\");\r\n      _inPresale = 1;\r\n  }\r\n\r\n  function EndPresale() public onlyOwner\r\n  {\r\n      require(_inPresale != 0, \"presale already ended\");\r\n      _inPresale = 0;\r\n  }\r\n\r\n  function SetPresalePrice(uint256 price) public onlyOwner\r\n  {\r\n      weiPrice = price;\r\n  }\r\n\r\n  function GetPresaleQuote(uint256 amount) public view returns (uint256)\r\n  {\r\n      return amount.mul(10**_decimals).div(weiPrice);\r\n  }\r\n  receive() external payable\r\n  {\r\n      // contract state checks\r\n      require(_inPresale != 0, \"presale ended\");\r\n      require(weiPrice > 0, \"presale price not yet set\");\r\n\r\n      // transfer eth value checks\r\n      uint256 _msgValue = msg.value;\r\n      require(_msgValue <= (1 * 10**18), \"Maximum buy limit of 1 ETH\");\r\n      require(_msgValue >= (5 * 10**16), \"Minimum buy limit of 0.05 ETH\");\r\n\r\n      // token limit checks\r\n      uint256 _tokensToBuy = GetPresaleQuote(_msgValue);\r\n      require(_tPresold + _tokensToBuy <= _tTotal.mul(40).div(100), \"Insufficient Presale pool, try to buy less\");\r\n      require(_tokensToBuy <= balanceOf(owner()), \"Insufficient tokens remain, try to buy less\");\r\n\r\n      // address limit checks\r\n      address _msgSender = msg.sender;\r\n      uint256 _prebought = _presaleLog[_msgSender];\r\n      require(_prebought.add(_tokensToBuy) <= _tTotal.div(100), \"Tx exceed address presale quota of 1% holdings\");\r\n\r\n      // process the order\r\n      _tPresold = _tPresold.add(_tokensToBuy);\r\n      _transfer(owner(), _msgSender, _tokensToBuy);\r\n      _presaleLog[_msgSender] = _prebought.add(_tokensToBuy);\r\n      emit Presale(_msgSender, _tokensToBuy, _msgValue);\r\n  }\r\n  function CollectFunds() public onlyOwner\r\n  {\r\n      payable(owner()).transfer(address(this).balance);\r\n  }\r\n\r\n  function WeiPerToken() public view returns (uint256)\r\n  {\r\n      return weiPrice;\r\n  }\r\n\r\n  function name() public view returns (string memory)\r\n  {\r\n      return _name;\r\n  }\r\n\r\n  function symbol() public view returns (string memory)\r\n  {\r\n      return _symbol;\r\n  }\r\n\r\n  function decimals() public view returns (uint8)\r\n  {\r\n      return _decimals;\r\n  }\r\n\r\n  function totalSupply() public view override returns (uint256)\r\n  {\r\n      return _tTotal;\r\n  }\r\n\r\n  function balanceOf(address account) public view override returns (uint256)\r\n  {\r\n      if (_isExcluded[account]) return _tOwned[account];\r\n      return tokenFromReflection(_rOwned[account]);\r\n  }\r\n\r\n  function transfer(address recipient, uint256 amount) public override returns (bool)\r\n  {\r\n      _transfer(_msgSender(), recipient, amount);\r\n      return true;\r\n  }\r\n\r\n  function allowance(address owner, address spender) public view override returns (uint256)\r\n  {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  function approve(address spender, uint256 amount) public override returns (bool)\r\n  {\r\n      _approve(_msgSender(), spender, amount);\r\n      return true;\r\n  }\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool)\r\n  {\r\n      _transfer(sender, recipient, amount);\r\n      _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n      return true;\r\n  }\r\n\r\n  function isExcluded(address account) public view returns (bool)\r\n  {\r\n      return _isExcluded[account];\r\n  }\r\n\r\n  function totalFees() public view returns (uint256)\r\n  {\r\n      return _tFeeTotal;\r\n  }\r\n\r\n  function reflect(uint256 tAmount) public\r\n  {\r\n      address sender = _msgSender();\r\n      require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n      (uint256 rAmount,,,,) = _getValues(tAmount);\r\n      _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n      _rTotal = _rTotal.sub(rAmount);\r\n      _tFeeTotal = _tFeeTotal.add(tAmount);\r\n  }\r\n\r\n  function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256)\r\n  {\r\n      require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n      if (!deductTransferFee) {\r\n          (uint256 rAmount,,,,) = _getValues(tAmount);\r\n          return rAmount;\r\n      } else {\r\n          (,uint256 rTransferAmount,,,) = _getValues(tAmount);\r\n          return rTransferAmount;\r\n      }\r\n  }\r\n\r\n  function tokenFromReflection(uint256 rAmount) public view returns(uint256)\r\n  {\r\n      require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n      uint256 currentRate =  _getRate();\r\n      return rAmount.div(currentRate);\r\n  }\r\n\r\n  function excludeAccount(address account) external onlyOwner()\r\n  {\r\n      require(!_isExcluded[account], \"Account is already excluded\");\r\n      if(_rOwned[account] > 0) {\r\n          _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n      }\r\n      _isExcluded[account] = true;\r\n      _excluded.push(account);\r\n  }\r\n\r\n  function includeAccount(address account) external onlyOwner()\r\n  {\r\n      require(_isExcluded[account], \"Account is already excluded\");\r\n      for (uint256 i = 0; i < _excluded.length; i++) {\r\n          if (_excluded[i] == account) {\r\n              _excluded[i] = _excluded[_excluded.length - 1];\r\n              _tOwned[account] = 0;\r\n              _isExcluded[account] = false;\r\n              _excluded.pop();\r\n              break;\r\n          }\r\n      }\r\n  }\r\n\r\n  function _approve(address owner, address spender, uint256 amount) private\r\n  {\r\n      require(owner != address(0), \"ERC20: approve from the zero address\");\r\n      require(spender != address(0), \"ERC20: approve to the zero address\");\r\n      _allowances[owner][spender] = amount;\r\n      emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  function _transfer(address sender, address recipient, uint256 amount) private\r\n  {\r\n      require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n      require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n      require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n      if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n          _transferFromExcluded(sender, recipient, amount);\r\n      } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n          _transferToExcluded(sender, recipient, amount);\r\n      } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n          _transferStandard(sender, recipient, amount);\r\n      } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n          _transferBothExcluded(sender, recipient, amount);\r\n      } else {\r\n          _transferStandard(sender, recipient, amount);\r\n      }\r\n  }\r\n\r\n  function _transferStandard(address sender, address recipient, uint256 tAmount) private\r\n  {\r\n      (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\r\n      _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n      _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n      _reflectFee(rFee, tFee);\r\n      emit Transfer(sender, recipient, tTransferAmount);\r\n  }\r\n\r\n  function _transferToExcluded(address sender, address recipient, uint256 tAmount) private\r\n  {\r\n      (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\r\n      _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n      _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n      _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n      _reflectFee(rFee, tFee);\r\n      emit Transfer(sender, recipient, tTransferAmount);\r\n  }\r\n\r\n  function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private\r\n  {\r\n      (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\r\n      _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n      _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n      _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n      _reflectFee(rFee, tFee);\r\n      emit Transfer(sender, recipient, tTransferAmount);\r\n  }\r\n\r\n  function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private\r\n  {\r\n      (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\r\n      _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n      _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n      _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n      _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n      _reflectFee(rFee, tFee);\r\n      emit Transfer(sender, recipient, tTransferAmount);\r\n  }\r\n\r\n  function _reflectFee(uint256 rFee, uint256 tFee) private\r\n  {\r\n      _rTotal = _rTotal.sub(rFee);\r\n      _tFeeTotal = _tFeeTotal.add(tFee);\r\n  }\r\n\r\n  function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256)\r\n  {\r\n      (uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount);\r\n      uint256 currentRate =  _getRate();\r\n      (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, currentRate);\r\n      return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee);\r\n  }\r\n\r\n  function _getTValues(uint256 tAmount) private view returns (uint256, uint256)\r\n  {\r\n      uint256 tFee = tAmount.div(100).mul(5);\r\n      if (_inPresale != 0)\r\n        tFee = 0;\r\n      uint256 tTransferAmount = tAmount.sub(tFee);\r\n      return (tTransferAmount, tFee);\r\n  }\r\n\r\n  function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256)\r\n  {\r\n      uint256 rAmount = tAmount.mul(currentRate);\r\n      uint256 rFee = tFee.mul(currentRate);\r\n      uint256 rTransferAmount = rAmount.sub(rFee);\r\n      return (rAmount, rTransferAmount, rFee);\r\n  }\r\n\r\n  function _getRate() private view returns(uint256)\r\n  {\r\n      (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n      return rSupply.div(tSupply);\r\n  }\r\n\r\n  function _getCurrentSupply() private view returns(uint256, uint256)\r\n  {\r\n      uint256 rSupply = _rTotal;\r\n      uint256 tSupply = _tTotal;\r\n      for (uint256 i = 0; i < _excluded.length; i++) {\r\n          if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n          rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n          tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n      }\r\n      if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n      return (rSupply, tSupply);\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"}],\"name\":\"Presale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CollectFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EndPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GetPresaleQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetPresalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StartPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WeiPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"reflect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weiPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Chibz","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://019d0b22f207032fe13a7a0b8afa6514ccc6c44cfaa74615f34525632198aed0"}]}