{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.3.3 https://hardhat.org\r\n\r\n// File contracts/interfaces/IYearn.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IYearn {\r\n    function pricePerShare() external view returns (uint256);\r\n    function decimals() external view returns(uint256);\r\n    function token() external view returns(address);\r\n}\r\n\r\n\r\n// File contracts/interfaces/AggregatorV3Interface.sol\r\n\r\npragma solidity >=0.6.0;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n\r\n// File contracts/core/YearnOracle.sol\r\n\r\n// SPDX-License-Identifier: (c) Armor.Fi, 2021\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\n/**\r\n * @title Yearn Oracle\r\n * @notice Yearn Oracle uses Chainlink to find the price of underlying Yearn assets,\r\n *         then determines amount of yTokens to pay for Ether needed by shield.\r\n * @author Armor.fi -- Robert M.C. Forster, Taek Lee\r\n**/\r\ncontract YearnOracle {\r\n\r\n    /**\r\n     * @notice Get the amount of tokens owed for the input amount of Ether.\r\n     * @param _ethOwed Amount of Ether that the shield owes to coverage base.\r\n     * @param _yToken Address of the Yearn token to find value of.\r\n     * @param _uTokenLink Chainlink address to get price of the underlying token.\r\n     * @return yOwed Amount of Yearn token owed for this amount of Ether.\r\n    **/\r\n    function getTokensOwed(\r\n        uint256 _ethOwed,\r\n        address _yToken,\r\n        address _uTokenLink\r\n    )\r\n      external\r\n      view\r\n    returns(\r\n        uint256 yOwed\r\n    )\r\n    {   \r\n        uint256 uOwed = ethToU(_ethOwed, _uTokenLink);\r\n        yOwed = uToY(_yToken, uOwed);\r\n    }\r\n    \r\n    /**\r\n     * @notice Get the Ether owed for an amount of tokens that must be paid for.\r\n     * @param _tokensOwed Amounts of tokens to find value of.\r\n     * @param _yToken Address of the Yearn token that value is being found for.\r\n     * @param _uTokenLink ChainLink address for the underlying token.\r\n     * @return ethOwed Amount of Ether owed for this amount of tokens.\r\n    **/\r\n    function getEthOwed(\r\n        uint256 _tokensOwed,\r\n        address _yToken,\r\n        address _uTokenLink\r\n    )\r\n      external\r\n      view\r\n    returns(\r\n        uint256 ethOwed\r\n    )\r\n    {\r\n        uint256 yPerU = uToY(_yToken, 1 ether);\r\n        uint256 ethPerU = _findEthPerToken(_uTokenLink);\r\n        uint256 ethPerY = yPerU\r\n                          * ethPerU\r\n                          / 1 ether;\r\n\r\n        ethOwed = _tokensOwed\r\n                  * ethPerY\r\n                  / 1 ether;\r\n    }\r\n\r\n    /**\r\n     * @notice Ether amount to underlying token owed.\r\n     * @param _ethOwed Amount of Ether owed to the coverage base.\r\n     * @param _uTokenLink Chainlink oracle address for the underlying token.\r\n     * @return uOwed Amount of underlying tokens owed.\r\n    **/\r\n    function ethToU(\r\n        uint256 _ethOwed,\r\n        address _uTokenLink\r\n    )\r\n      public\r\n      view\r\n    returns(\r\n        uint256 uOwed\r\n    )\r\n    {\r\n        uint256 ethPerToken = _findEthPerToken(_uTokenLink);\r\n        uOwed = _ethOwed \r\n                * 1 ether \r\n                / ethPerToken;\r\n    }\r\n\r\n    /**\r\n     * @notice Underlying tokens to Yearn tokens conversion.\r\n     * @param _yToken Address of the Yearn token.\r\n     * @param _uOwed Amount of underlying tokens owed.\r\n     * @return yOwed Amount of Yearn tokens owed.\r\n    **/\r\n    function uToY(\r\n        address _yToken,\r\n        uint256 _uOwed\r\n    )\r\n      public\r\n      view\r\n    returns(\r\n        uint256 yOwed\r\n    )\r\n    {\r\n        uint256 oneYToken = IYearn(_yToken).pricePerShare();\r\n        yOwed = _uOwed \r\n                * (10 ** IYearn(_yToken).decimals())\r\n                / oneYToken;\r\n    }\r\n    \r\n    /**\r\n     * @notice Finds the amount of cover required to protect all holdings and returns Ether value of 1 token.\r\n     * @param _uTokenLink Chainlink oracle address for the underlying token.\r\n     * @return ethPerToken Ether value of each pToken.\r\n    **/\r\n    function _findEthPerToken(\r\n        address _uTokenLink\r\n    )\r\n      internal\r\n      view\r\n    returns (\r\n        uint256 ethPerToken\r\n    )\r\n    {\r\n        (/*roundIf*/, int tokenPrice, /*startedAt*/, /*timestamp*/, /*answeredInRound*/) = AggregatorV3Interface(_uTokenLink).latestRoundData();\r\n        ethPerToken = uint256(tokenPrice);\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethOwed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_uTokenLink\",\"type\":\"address\"}],\"name\":\"ethToU\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"uOwed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensOwed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_yToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uTokenLink\",\"type\":\"address\"}],\"name\":\"getEthOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethOwed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethOwed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_yToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uTokenLink\",\"type\":\"address\"}],\"name\":\"getTokensOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yOwed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_uOwed\",\"type\":\"uint256\"}],\"name\":\"uToY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yOwed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"YearnOracle","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://771e7a6d37807090e4c14f8de271a32978466a9a9734049ebac2bf904c4a1cf3"}]}