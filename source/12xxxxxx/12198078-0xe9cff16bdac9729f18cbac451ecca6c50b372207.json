{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface ICurveRegistry {\r\n    function get_pool_from_lp_token(address arg0)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function get_underlying_coins(address arg0)\r\n        external\r\n        view\r\n        returns (address[8] memory);\r\n\r\n    function get_virtual_price_from_lp_token(address arg0)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\ninterface IOracle {\r\n    function getPriceUsdcRecommended(address tokenAddress)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function usdcAddress() external view returns (address);\r\n}\r\n\r\ncontract CalculationsCurve {\r\n    address public curveRegistryAddress;\r\n    address public oracleAddress;\r\n    ICurveRegistry curveRegistry;\r\n    IOracle oracle;\r\n    address daiAddress = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    address wethAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address ethAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address wbtcAddress = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\r\n    address eursAddress = 0xdB25f211AB05b1c97D595516F45794528a807ad8;\r\n    address linkAddress = 0x514910771AF9Ca656af840dff83E8264EcF986CA;\r\n    address[] basicTokenAddresses = [\r\n        daiAddress,\r\n        wethAddress,\r\n        ethAddress,\r\n        wbtcAddress,\r\n        eursAddress,\r\n        linkAddress\r\n    ];\r\n\r\n    constructor(address _curveRegistryAddress, address _oracleAddress) {\r\n        curveRegistryAddress = _curveRegistryAddress;\r\n        curveRegistry = ICurveRegistry(_curveRegistryAddress);\r\n        oracleAddress = _oracleAddress;\r\n        oracle = IOracle(_oracleAddress);\r\n    }\r\n\r\n    function getCurvePriceUsdc(address curveLpTokenAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 basePrice = getBasePrice(curveLpTokenAddress);\r\n        uint256 virtualPrice = getVirtualPrice(curveLpTokenAddress);\r\n        IERC20 usdc = IERC20(oracle.usdcAddress());\r\n        uint256 decimals = usdc.decimals();\r\n        uint256 decimalsAdjustment = 18 - decimals;\r\n        uint256 price =\r\n            (virtualPrice * basePrice * (10**decimalsAdjustment)) /\r\n                10**(decimalsAdjustment + 18);\r\n        return price;\r\n    }\r\n\r\n    function getBasePrice(address curveLpTokenAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        address poolAddress =\r\n            curveRegistry.get_pool_from_lp_token(curveLpTokenAddress);\r\n        address underlyingCoinAddress = getUnderlyingCoinFromPool(poolAddress);\r\n        uint256 basePrice =\r\n            oracle.getPriceUsdcRecommended(underlyingCoinAddress);\r\n        return basePrice;\r\n    }\r\n\r\n    function getVirtualPrice(address curveLpTokenAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            curveRegistry.get_virtual_price_from_lp_token(curveLpTokenAddress);\r\n    }\r\n\r\n    function isCurveLpToken(address tokenAddress) public view returns (bool) {\r\n        address poolAddress =\r\n            curveRegistry.get_pool_from_lp_token(tokenAddress);\r\n        bool tokenHasCurvePool = poolAddress != address(0);\r\n        return tokenHasCurvePool;\r\n    }\r\n\r\n    function isBasicToken(address tokenAddress) public view returns (bool) {\r\n        for (\r\n            uint256 basicTokenIdx = 0;\r\n            basicTokenIdx < basicTokenAddresses.length;\r\n            basicTokenIdx++\r\n        ) {\r\n            address basicTokenAddress = basicTokenAddresses[basicTokenIdx];\r\n            if (tokenAddress == basicTokenAddress) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getUnderlyingCoinFromPool(address poolAddress)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        address[8] memory coins =\r\n            curveRegistry.get_underlying_coins(poolAddress);\r\n\r\n        // Use first coin from pool and if that is empty (due to error) fall back to second coin\r\n        address preferredCoinAddress = coins[0];\r\n        if (preferredCoinAddress == address(0)) {\r\n            preferredCoinAddress = coins[1];\r\n        }\r\n\r\n        // Look for preferred coins (basic coins)\r\n        for (uint256 coinIdx = 0; coinIdx < 8; coinIdx++) {\r\n            address coinAddress = coins[coinIdx];\r\n            if (coinAddress == address(0)) {\r\n                break;\r\n            }\r\n            if (isBasicToken(coinAddress)) {\r\n                preferredCoinAddress = coinAddress;\r\n                break;\r\n            }\r\n        }\r\n        return preferredCoinAddress;\r\n    }\r\n\r\n    function getPriceUsdc(address assetAddress) public view returns (uint256) {\r\n        if (isCurveLpToken(assetAddress)) {\r\n            return getCurvePriceUsdc(assetAddress);\r\n        }\r\n        revert();\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_curveRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"curveRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"curveLpTokenAddress\",\"type\":\"address\"}],\"name\":\"getBasePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"curveLpTokenAddress\",\"type\":\"address\"}],\"name\":\"getCurvePriceUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"getPriceUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"getUnderlyingCoinFromPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"curveLpTokenAddress\",\"type\":\"address\"}],\"name\":\"getVirtualPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"isBasicToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"isCurveLpToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CalculationsCurve","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000007d86446ddb609ed0f5f8684acf30380a356b2b4c000000000000000000000000d3ca98d986be88b72ff95fc2ec976a5e6339150d","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a9ec91a8f93a591ca78734a0aa87b292392805c824cef889e27274b0c9a733a9"}]}