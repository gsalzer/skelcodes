{"status":"1","message":"OK","result":[{"SourceCode":"{\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"ValidatorETH.sol\":{\"content\":\"// SPDX-License-Identifier: No License (None)\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\ninterface ISwapFactory {\\r\\n    function balanceCallback(address hashAddress, uint256 foreignBalance) external returns(bool);\\r\\n    function balancesCallback(\\r\\n        address hashAddress, \\r\\n        uint256 foreignBalance, // total user\\u0027s tokens balance on foreign chain\\r\\n        uint256 foreignSpent,   // total tokens spent by SmartSwap pair\\r\\n        uint256 nativeEncoded   // (nativeSpent, nativeRate) = _decode(nativeEncoded)\\r\\n    ) external returns(bool);\\r\\n}\\r\\n\\r\\n// 1 - BNB, 2 - ETH, 3 - BTC\\r\\ninterface ICompanyOracle {\\r\\n    function getBalance(uint256 network,address token,address user) external returns(uint256);\\r\\n    function getPriceAndBalance(address tokenA,address tokenB,uint256 network,address token,address[] calldata user) external returns(uint256);\\r\\n}\\r\\n\\r\\ninterface IPriceFeed {\\r\\n    function latestAnswer() external returns (int256);\\r\\n}\\r\\n\\r\\n\\r\\ncontract Validator is Ownable {\\r\\n\\r\\n    uint256 constant NETWORK = 56;  // ETH mainnet = 1, Ropsten = 3,Kovan - 42, BSC_TESTNET = 97, BSC_MAINNET = 56\\r\\n    uint256 constant NOMINATOR = 10**18;     // rate nominator\\r\\n\\r\\n    \\r\\n    mapping(address =\\u003e bool) public isAllowedAddress; \\r\\n    address public factory;\\r\\n    address public companyOracle;\\r\\n    mapping (uint256 =\\u003e address) public companyOracleRequests;  // companyOracleRequest ID =\\u003e user (hashAddress)\\r\\n    mapping (uint256 =\\u003e uint256) public gasLimit;  // request type =\\u003e amount of gas\\r\\n    uint256 public customGasPrice = 50 * 10**9; // 20 GWei\\r\\n    mapping(address =\\u003e IPriceFeed) tokenPriceFeed;\\r\\n\\r\\n    event LogMsg(string description);\\r\\n\\r\\n    modifier onlyAllowed() {\\r\\n        require(isAllowedAddress[msg.sender] || owner() == msg.sender,\\\"ERR_ALLOWED_ADDRESS_ONLY\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n    constructor (address _oracle) {\\r\\n        companyOracle = _oracle;\\r\\n        //Kovan Testnet\\r\\n        //tokenPriceFeed[address(1)] = IPriceFeed(0x8993ED705cdf5e84D0a3B754b5Ee0e1783fcdF16);    // BNB/USD\\r\\n        //tokenPriceFeed[address(2)] = IPriceFeed(0x9326BFA02ADD2366b30bacB125260Af641031331);    // ETH/USD\\r\\n        // BSC Testnet\\r\\n        //tokenPriceFeed[address(1)] = IPriceFeed(0x2514895c72f50D8bd4B4F9b1110F0D6bD2c97526);    // BNB/USD\\r\\n        //tokenPriceFeed[address(2)] = IPriceFeed(0x143db3CEEfbdfe5631aDD3E50f7614B6ba708BA7);    // ETH/USD\\r\\n\\r\\n        // ETH mainnet\\r\\n        tokenPriceFeed[address(1)] = IPriceFeed(0x14e613AC84a31f709eadbdF89C6CC390fDc9540A);    // BNB/USD\\r\\n        tokenPriceFeed[address(2)] = IPriceFeed(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);    // ETH/USD\\r\\n        // BSC mainnet\\r\\n        //tokenPriceFeed[address(1)] = IPriceFeed(0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE);    // BNB/USD\\r\\n        //tokenPriceFeed[address(2)] = IPriceFeed(0x9ef1B8c0E4F7dc8bF5719Ea496883DC6401d5b2e);    // ETH/USD\\r\\n\\r\\n    }\\r\\n\\r\\n    // returns rate (with 9 decimals) = Token B price / Token A price\\r\\n    function getRate(address tokenA, address tokenB) external returns (uint256 rate) {\\r\\n        int256 priceA = tokenPriceFeed[tokenA].latestAnswer();\\r\\n        int256 priceB = tokenPriceFeed[tokenB].latestAnswer();\\r\\n        require(priceA \\u003e 0 \\u0026\\u0026 priceB \\u003e 0, \\\"Zero price\\\");\\r\\n        rate = uint256(priceB * int256(NOMINATOR) / priceA);     // get rate on BSC side: ETH price / BNB price\\r\\n    }\\r\\n\\r\\n    function setCompanyOracle(address _addr) external onlyOwner returns(bool) {\\r\\n        companyOracle = _addr;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setFactory(address _addr) external onlyOwner returns(bool) {\\r\\n        factory = _addr;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function changeAllowedAddress(address _which,bool _bool) external onlyOwner returns(bool){\\r\\n        isAllowedAddress[_which] = _bool;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // returns: oracle fee\\r\\n    function getOracleFee(uint256 req) external view returns(uint256) {  //req: 1 - cancel, 2 - claim, returns: value\\r\\n        return gasLimit[req] * customGasPrice;\\r\\n    }\\r\\n\\r\\n    function checkBalance(address foreignFactory, address user) external returns(uint256) {\\r\\n        require(msg.sender == factory, \\\"Not factory\\\");\\r\\n        uint256 myId = ICompanyOracle(companyOracle).getBalance(NETWORK, foreignFactory, user);\\r\\n        companyOracleRequests[myId] = user;\\r\\n        return myId;\\r\\n    }\\r\\n\\r\\n    function oracleCallback(uint256 requestId, uint256 balance) external returns(bool) {\\r\\n        require (companyOracle == msg.sender, \\\"Wrong Oracle\\\");\\r\\n        address hashAddress = companyOracleRequests[requestId];\\r\\n        require(hashAddress != address(0), \\\"Wrong requestId\\\");\\r\\n        delete companyOracleRequests[requestId];   // requestId fulfilled\\r\\n        ISwapFactory(factory).balanceCallback(hashAddress, balance);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function checkBalances(address foreignFactory, address[] calldata users) external returns(uint256) {\\r\\n        require(msg.sender == factory, \\\"Not factory\\\");\\r\\n        uint256 myId = ICompanyOracle(companyOracle).getPriceAndBalance(address(1), address(2), NETWORK, foreignFactory, users);\\r\\n        companyOracleRequests[myId] = users[0];\\r\\n        return myId;\\r\\n    }\\r\\n\\r\\n    function oraclePriceAndBalanceCallback(uint256 requestId,uint256 priceA,uint256 priceB,uint256[] calldata balances) external returns(bool) {\\r\\n        require (companyOracle == msg.sender, \\\"Wrong Oracle\\\");\\r\\n        priceA = priceB; // remove unused\\r\\n        address hashAddress = companyOracleRequests[requestId];\\r\\n        require(hashAddress != address(0), \\\"Wrong requestId\\\");\\r\\n        delete companyOracleRequests[requestId];   // requestId fulfilled\\r\\n        ISwapFactory(factory).balancesCallback(hashAddress, balances[0], balances[1], balances[2]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 amount) external onlyAllowed returns (bool) {\\r\\n        payable(msg.sender).transfer(amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // set gas limit to request: 1 - cancel request, 2 - claim request\\r\\n    function setGasLimit(uint256 req, uint256 amount) external onlyAllowed returns (bool) {\\r\\n        gasLimit[req] = amount;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setCustomGasPrice(uint256 amount) external onlyAllowed returns (bool) {\\r\\n        customGasPrice = amount;\\r\\n        //provable_setCustomGasPrice(amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"LogMsg\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_which\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"changeAllowedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"foreignFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"foreignFactory\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"checkBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"companyOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"companyOracleRequests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"customGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"req\",\"type\":\"uint256\"}],\"name\":\"getOracleFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAllowedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"oracleCallback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceB\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"name\":\"oraclePriceAndBalanceCallback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setCompanyOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setCustomGasPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"req\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setGasLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Validator","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000198164dc8bfd2fa9cae3f1d7667f2c719f3b6ea7","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://87da2b5c6c693e8108f594bd00d7d2d81c7758b1df06a556af4b9ba4d7979f18"}]}