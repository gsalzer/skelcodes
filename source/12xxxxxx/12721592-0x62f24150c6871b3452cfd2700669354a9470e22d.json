{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/tepnik/Desktop/MarsBase-gitlab/contracts/IMarsBaseOtc.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IMarsBaseOtc {\\n    enum OrderTypeInfo {error, buyType, sellType}\\n\\n    struct OrderInfo {\\n        address owner;\\n        address token;\\n        uint256 amountOfToken;\\n        uint256 expirationDate;\\n        uint16 discount; // 10 is 1%, max value 1'000\\n        bool isCancelled;\\n        bool isSwapped;\\n        bool isManual;\\n        OrderTypeInfo orderType;\\n    }\\n    struct OrdersBidInfo {\\n        address investor;\\n        address investedToken;\\n        uint256 amountInvested;\\n    }\\n    struct BrokerInfo {\\n        address broker;\\n        uint256 percents;\\n    }\\n\\n    function createOrder(\\n        bytes32 _id,\\n        address _token,\\n        uint256 _amountOfToken,\\n        uint256 _expirationDate,\\n        address _ownerBroker,\\n        uint256 _ownerBrokerPerc,\\n        address _usersBroker,\\n        uint256 _usersBrokerPerc,\\n        uint16 _discount,\\n        OrderTypeInfo orderType,\\n        bool _isManual\\n    ) external;\\n\\n    function orderDeposit(\\n        bytes32 _id,\\n        address _token,\\n        uint256 _amount\\n    ) external payable;\\n\\n    function cancel(bytes32 _id) external;\\n\\n    function makeSwap(bytes32 _id, OrdersBidInfo[] memory distribution)\\n        external;\\n\\n    function makeSwapOrderOwner(bytes32 _id, uint256 orderIndex) external;\\n\\n    function cancelBid(bytes32 _id, uint256 bidIndex) external;\\n}\\n\"\r\n    },\r\n    \"/Users/tepnik/Desktop/MarsBase-gitlab/contracts/MarsBaseOtc.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/access/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IMarsBaseOtc.sol\\\";\\nimport \\\"./Vault.sol\\\";\\n\\ncontract MarsBaseOtc is Ownable, IMarsBaseOtc, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeMath for uint16;\\n    using SafeMath for uint8;\\n\\n    uint256 public constant BROKERS_DENOMINATOR = 10000;\\n\\n    Vault public vault;\\n\\n    // public mappings\\n    // White list of liquidity tokens\\n    mapping(address => bool) public isAddressInWhiteList;\\n    // Info about bids\\n    mapping(bytes32 => OrderInfo) public orders;\\n    mapping(bytes32 => BrokerInfo) public ownerBroker;\\n    mapping(bytes32 => BrokerInfo) public usersBroker;\\n    mapping(bytes32 => OrdersBidInfo[]) public ordersBid;\\n    mapping(bytes32 => OrdersBidInfo[]) public ordersOwnerBid;\\n\\n    // modifiers\\n    modifier onlyWhenVaultDefined() {\\n        require(\\n            address(vault) != address(0),\\n            \\\"101\\\"\\n        );\\n        _;\\n    }\\n    modifier onlyWhenOrderExists(bytes32 _id) {\\n        require(\\n            orders[_id].owner != address(0),\\n            \\\"102\\\"\\n        );\\n        _;\\n    }\\n    modifier onlyOrderOwner(bytes32 _id) {\\n        require(\\n            orders[_id].owner == _msgSender(),\\n            \\\"103\\\"\\n        );\\n        _;\\n    }\\n\\n    event OrderCreated(\\n        bytes32 id,\\n        address owner,\\n        address token,\\n        uint256 amountOfToken,\\n        uint256 expiratinDate,\\n        uint16 discount,\\n        OrderTypeInfo typeOrder,\\n        bool isManual\\n    );\\n\\n    event BuyOrderDeposit(\\n        bytes32 _id,\\n        address _token,\\n        address _from,\\n        uint256 _amount\\n    );\\n\\n    event SellOrderDeposit(\\n        bytes32 _id,\\n        address _token,\\n        address _from,\\n        uint256 _amount\\n    );\\n\\n    event OrderSwapped(bytes32 id);\\n\\n    event OrderCancelled(bytes32 id);\\n\\n    constructor() {}\\n\\n    function tokenFallback(\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external {}\\n\\n    function createOrder(\\n        bytes32 _id,\\n        address _token,\\n        uint256 _amountOfToken,\\n        uint256 _expirationDate,\\n        address _ownerBroker,\\n        uint256 _ownerBrokerPerc,\\n        address _usersBroker,\\n        uint256 _usersBrokerPerc,\\n        uint16 _discount,\\n        OrderTypeInfo typeOrder,\\n        bool _isManual\\n    ) external override nonReentrant onlyWhenVaultDefined {\\n        require(\\n            orders[_id].owner == address(0),\\n            \\\"201\\\"\\n        );\\n        require(_amountOfToken > 0, \\\"202\\\");\\n        require(_discount < 1000, \\\"203\\\");\\n        require(\\n            typeOrder != OrderTypeInfo.error,\\n            \\\"204\\\"\\n        );\\n        require(\\n            _expirationDate > block.timestamp,\\n            \\\"205\\\"\\n        );\\n\\n        orders[_id].owner = msg.sender;\\n        orders[_id].token = _token;\\n        orders[_id].amountOfToken = _amountOfToken;\\n        orders[_id].expirationDate = _expirationDate;\\n        orders[_id].discount = _discount;\\n        orders[_id].orderType = typeOrder;\\n        orders[_id].isManual = _isManual;\\n\\n        if (_ownerBroker != address(0)) {\\n            require(\\n                _ownerBrokerPerc > 0 && _ownerBrokerPerc < BROKERS_DENOMINATOR,\\n                \\\"206\\\"\\n            );\\n            ownerBroker[_id].broker = _ownerBroker;\\n            ownerBroker[_id].percents = _ownerBrokerPerc;\\n        }\\n\\n        if (_usersBroker != address(0)) {\\n            require(\\n                _usersBrokerPerc > 0 && _usersBrokerPerc < BROKERS_DENOMINATOR,\\n                \\\"207\\\"\\n            );\\n            usersBroker[_id].broker = _usersBroker;\\n            usersBroker[_id].percents = _usersBrokerPerc;\\n        }\\n\\n        emit OrderCreated(\\n            _id,\\n            msg.sender,\\n            _token,\\n            _amountOfToken,\\n            _expirationDate,\\n            _discount,\\n            typeOrder,\\n            _isManual\\n        );\\n    }\\n\\n    function orderDeposit(\\n        bytes32 _id,\\n        address _token,\\n        uint256 _amount\\n    )\\n        external\\n        payable\\n        override\\n        nonReentrant\\n        onlyWhenVaultDefined\\n        onlyWhenOrderExists(_id)\\n    {\\n        require(\\n            orders[_id].isCancelled == false,\\n            \\\"301\\\"\\n        );\\n        require(\\n            orders[_id].isSwapped == false,\\n            \\\"302\\\"\\n        );\\n        require(\\n            block.timestamp <= orders[_id].expirationDate,\\n            \\\"303\\\"\\n        );\\n        if (_token == address(0)) {\\n            require(\\n                msg.value == _amount,\\n                \\\"304\\\"\\n            );\\n            address(vault).transfer(msg.value);\\n        } else {\\n            require(msg.value == 0, \\\"305\\\");\\n            uint256 allowance =\\n                IERC20(_token).allowance(msg.sender, address(this));\\n            require(\\n                _amount <= allowance,\\n                \\\"306\\\"\\n            );\\n            require(\\n                IERC20(_token).transferFrom(\\n                    msg.sender,\\n                    address(vault),\\n                    _amount\\n                ),\\n                \\\"307\\\"\\n            );\\n        }\\n        if (orders[_id].orderType == OrderTypeInfo.buyType)\\n            _buyOrderDeposit(_id, _token, msg.sender, _amount);\\n        else if (orders[_id].orderType == OrderTypeInfo.sellType)\\n            _sellOrderDeposit(_id, _token, msg.sender, _amount);\\n    }\\n\\n    function cancel(bytes32 _id)\\n        external\\n        override\\n        nonReentrant\\n        onlyWhenVaultDefined\\n        onlyWhenOrderExists(_id)\\n    {\\n        require(\\n            orders[_id].isCancelled == false,\\n            \\\"401\\\"\\n        );\\n        require(\\n            orders[_id].isSwapped == false,\\n            \\\"402\\\"\\n        );\\n\\n        address caller = _msgSender();\\n        require(\\n            caller == orders[_id].owner || caller == owner(),\\n            \\\"403\\\"\\n        );\\n\\n        _cancel(_id);\\n\\n        emit OrderCancelled(_id);\\n    }\\n\\n    function makeSwap(bytes32 _id, OrdersBidInfo[] memory distribution)\\n        external\\n        override\\n        nonReentrant\\n        onlyOwner\\n        onlyWhenVaultDefined\\n        onlyWhenOrderExists(_id)\\n    {\\n        OrderInfo memory order = orders[_id];\\n        orders[_id].isSwapped = true;\\n        require(\\n            order.isCancelled == false,\\n            \\\"501\\\"\\n        );\\n        require(\\n            order.isSwapped == false,\\n            \\\"502\\\"\\n        );\\n        require(order.isManual == false, \\\"503\\\");\\n        require(\\n            block.timestamp <= order.expirationDate,\\n            \\\"504\\\"\\n        );\\n        require(distribution.length > 0, \\\"505\\\");\\n\\n        address[] memory ownerTokensInvested;\\n        uint256[] memory ownerAmountsInvested;\\n        (ownerTokensInvested, ownerAmountsInvested) = getOrderOwnerInvestments(\\n            _id\\n        );\\n\\n        address[] memory usersTokensInvested;\\n        uint256[] memory usersAmountsInvested;\\n        (usersTokensInvested, usersAmountsInvested) = getOrderUserInvestments(\\n            _id,\\n            address(0)\\n        );\\n        require(\\n            usersTokensInvested.length > 0,\\n            \\\"506\\\"\\n        );\\n        require(\\n            ownerTokensInvested.length > 0,\\n            \\\"507\\\"\\n        );\\n\\n        address[] memory orderInvestors = getInvestors(_id);\\n\\n        uint256 i;\\n        uint256 ind;\\n        BrokerInfo memory brInfo;\\n        uint256 toBroker;\\n        uint256 toUser;\\n        for (i = 0; i < distribution.length; i = i.add(1)) {\\n            if (distribution[i].amountInvested == 0) continue;\\n            if (distribution[i].investor != order.owner) {\\n                ind = _findAddress(\\n                    orderInvestors,\\n                    distribution[i].investor,\\n                    orderInvestors.length\\n                );\\n                require(\\n                    ind < orderInvestors.length,\\n                    \\\"508\\\"\\n                );\\n                brInfo = usersBroker[_id];\\n            } else {\\n                brInfo = ownerBroker[_id];\\n            }\\n            ind = _findAddress(\\n                ownerTokensInvested,\\n                distribution[i].investedToken,\\n                ownerTokensInvested.length\\n            );\\n            if (ind >= ownerTokensInvested.length) {\\n                ind = _findAddress(\\n                    usersTokensInvested,\\n                    distribution[i].investedToken,\\n                    usersTokensInvested.length\\n                );\\n                require(\\n                    ind < usersTokensInvested.length,\\n                    \\\"509\\\"\\n                );\\n                require(\\n                    usersAmountsInvested[ind] >= distribution[i].amountInvested,\\n                    \\\"510\\\"\\n                );\\n                usersAmountsInvested[ind] = usersAmountsInvested[ind].sub(\\n                    distribution[i].amountInvested\\n                );\\n            } else {\\n                require(\\n                    ownerAmountsInvested[ind] >= distribution[i].amountInvested,\\n                    \\\"511\\\"\\n                );\\n                ownerAmountsInvested[ind] = ownerAmountsInvested[ind].sub(\\n                    distribution[i].amountInvested\\n                );\\n            }\\n            (toBroker, toUser) = _calculateToBrokerToUser(\\n                distribution[i].amountInvested,\\n                brInfo.percents\\n            );\\n            vault.withdrawForTwo(\\n                distribution[i].investedToken,\\n                distribution[i].investor,\\n                toUser,\\n                brInfo.broker,\\n                toBroker\\n            );\\n        }\\n\\n        brInfo = ownerBroker[_id];\\n        for (i = 0; i < usersTokensInvested.length; i = i.add(1)) {\\n            if (usersAmountsInvested[i] == 0) continue;\\n            (toBroker, toUser) = _calculateToBrokerToUser(\\n                usersAmountsInvested[i],\\n                brInfo.percents\\n            );\\n            vault.withdrawForTwo(\\n                usersTokensInvested[i],\\n                brInfo.broker,\\n                toBroker,\\n                order.owner,\\n                toUser\\n            );\\n            usersAmountsInvested[i] = 0;\\n        }\\n\\n        for (i = 0; i < ownerTokensInvested.length; i = i.add(1)) {\\n            require(\\n                ownerAmountsInvested[i] == 0,\\n                \\\"512\\\"\\n            );\\n        }\\n        for (i = 0; i < usersTokensInvested.length; i = i.add(1)) {\\n            require(\\n                usersAmountsInvested[i] == 0,\\n                \\\"513\\\"\\n            );\\n        }\\n\\n        emit OrderSwapped(_id);\\n    }\\n\\n    function makeSwapOrderOwner(bytes32 _id, uint256 orderIndex)\\n        external\\n        override\\n        nonReentrant\\n        onlyOrderOwner(_id)\\n        onlyWhenVaultDefined\\n        onlyWhenOrderExists(_id)\\n    {\\n        require(\\n            orders[_id].isCancelled == false,\\n            \\\"601\\\"\\n        );\\n        require(\\n            orders[_id].isSwapped == false,\\n            \\\"602\\\"\\n        );\\n        require(\\n            orders[_id].isManual == true,\\n            \\\"603\\\"\\n        );\\n        require(\\n            block.timestamp <= orders[_id].expirationDate,\\n            \\\"604\\\"\\n        );\\n        uint256 len = ordersBid[_id].length;\\n        require(len > 0, \\\"605\\\");\\n        require(orderIndex < len, \\\"606\\\");\\n\\n        uint256 toBroker;\\n        uint256 toUser;\\n        (toBroker, toUser) = _calculateToBrokerToUser(\\n            ordersBid[_id][orderIndex].amountInvested,\\n            ownerBroker[_id].percents\\n        );\\n        vault.withdrawForTwo(\\n            ordersBid[_id][orderIndex].investedToken,\\n            orders[_id].owner,\\n            toUser,\\n            ownerBroker[_id].broker,\\n            toBroker\\n        );\\n\\n        uint256 i;\\n        for (i = 0; i < len; i = i.add(1)) {\\n            if (i == orderIndex) continue;\\n            vault.withdraw(\\n                ordersBid[_id][i].investedToken,\\n                ordersBid[_id][i].investor,\\n                ordersBid[_id][i].amountInvested\\n            );\\n        }\\n\\n        len = ordersOwnerBid[_id].length;\\n        for (i = 0; i < len; i = i.add(1)) {\\n            (toBroker, toUser) = _calculateToBrokerToUser(\\n                ordersOwnerBid[_id][i].amountInvested,\\n                usersBroker[_id].percents\\n            );\\n            vault.withdrawForTwo(\\n                ordersOwnerBid[_id][i].investedToken,\\n                ordersBid[_id][orderIndex].investor,\\n                toUser,\\n                usersBroker[_id].broker,\\n                toBroker\\n            );\\n        }\\n\\n        orders[_id].isSwapped = true;\\n\\n        emit OrderSwapped(_id);\\n    }\\n\\n    function cancelBid(bytes32 _id, uint256 bidIndex)\\n        external\\n        override\\n        nonReentrant\\n        onlyWhenVaultDefined\\n        onlyWhenOrderExists(_id)\\n    {\\n        uint256 len;\\n        OrdersBidInfo memory bidRead;\\n        OrdersBidInfo[] storage bidArrWrite;\\n        address sender = _msgSender();\\n\\n        if (orders[_id].owner == sender) {\\n            bidArrWrite = ordersOwnerBid[_id];\\n        } else {\\n            bidArrWrite = ordersBid[_id];\\n        }\\n        bidRead = bidArrWrite[bidIndex];\\n        len = bidArrWrite.length;\\n\\n        require(bidIndex < len, \\\"701\\\");\\n        require(\\n            bidRead.investor == sender,\\n            \\\"702\\\"\\n        );\\n        vault.withdraw(\\n            bidRead.investedToken,\\n            bidRead.investor,\\n            bidRead.amountInvested\\n        );\\n\\n        if (bidIndex < len - 1) bidArrWrite[bidIndex] = bidArrWrite[len - 1];\\n\\n        bidArrWrite.pop();\\n    }\\n\\n    function changeBid(\\n        bytes32 _id,\\n        uint256 bidIndex,\\n        uint256 newValue\\n    ) external nonReentrant onlyWhenVaultDefined onlyWhenOrderExists(_id) {\\n        require(newValue > 0, \\\"801\\\");\\n\\n        uint256 len;\\n        OrdersBidInfo memory bidRead;\\n        OrdersBidInfo[] storage bidArrWrite;\\n        address sender = _msgSender();\\n\\n        if (orders[_id].owner == sender) {\\n            bidArrWrite = ordersOwnerBid[_id];\\n        } else {\\n            bidArrWrite = ordersBid[_id];\\n        }\\n        bidRead = bidArrWrite[bidIndex];\\n        len = bidArrWrite.length;\\n\\n        require(bidIndex < len, \\\"802\\\");\\n        require(\\n            bidRead.investor == sender,\\n            \\\"803\\\"\\n        );\\n\\n        require(\\n            bidRead.amountInvested != newValue,\\n            \\\"804\\\"\\n        );\\n        if (bidRead.amountInvested < newValue) {\\n            require(\\n                IERC20(bidRead.investedToken).transferFrom(\\n                    sender,\\n                    address(vault),\\n                    newValue.sub(bidRead.amountInvested)\\n                ),\\n                \\\"805\\\"\\n            );\\n            bidArrWrite[bidIndex].amountInvested = newValue;\\n        } else if (bidRead.amountInvested > newValue) {\\n            vault.withdraw(\\n                bidRead.investedToken,\\n                bidRead.investor,\\n                bidRead.amountInvested.sub(newValue)\\n            );\\n            bidArrWrite[bidIndex].amountInvested = newValue;\\n        }\\n    }\\n\\n    function contractTimestamp() external view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    function setVault(Vault _vault) external onlyOwner {\\n        vault = _vault;\\n    }\\n\\n    function setDiscount(bytes32 _id, uint16 newDiscount)\\n        external\\n        onlyOrderOwner(_id)\\n        onlyWhenOrderExists(_id)\\n    {\\n        orders[_id].discount = newDiscount;\\n    }\\n\\n    function setAmountOfToken(bytes32 _id, uint256 newAmountOfToken)\\n        external\\n        onlyOrderOwner(_id)\\n        onlyWhenOrderExists(_id)\\n    {\\n        orders[_id].amountOfToken = newAmountOfToken;\\n    }\\n\\n    function addWhiteList(address newToken) external onlyOwner {\\n        isAddressInWhiteList[newToken] = true;\\n    }\\n\\n    function deleteFromWhiteList(address tokenToDelete) external onlyOwner {\\n        isAddressInWhiteList[tokenToDelete] = false;\\n    }\\n\\n    // view functions\\n    function createKey(address _owner) external view returns (bytes32 result) {\\n        uint256 creationTime = block.timestamp;\\n        result = 0x0000000000000000000000000000000000000000000000000000000000000000;\\n        assembly {\\n            result := or(result, mul(_owner, 0x1000000000000000000000000))\\n            result := or(result, and(creationTime, 0xffffffffffffffffffffffff))\\n        }\\n    }\\n\\n    function ordersBidLen(bytes32 id) external view returns (uint256) {\\n        return ordersBid[id].length;\\n    }\\n\\n    function ordersOwnerBidLen(bytes32 id) external view returns (uint256) {\\n        return ordersOwnerBid[id].length;\\n    }\\n\\n    function getOrderOwnerInvestments(bytes32 id)\\n        public\\n        view\\n        returns (address[] memory tokens, uint256[] memory amount)\\n    {\\n        return _getUserInvestments(ordersOwnerBid[id], orders[id].owner);\\n    }\\n\\n    function getOrderUserInvestments(bytes32 id, address user)\\n        public\\n        view\\n        returns (address[] memory tokens, uint256[] memory amount)\\n    {\\n        return _getUserInvestments(ordersBid[id], user);\\n    }\\n\\n    function getInvestors(bytes32 id)\\n        public\\n        view\\n        returns (address[] memory investors)\\n    {\\n        OrdersBidInfo[] storage bids = ordersBid[id];\\n        uint256 len = bids.length;\\n        investors = new address[](len);\\n        uint256 count = 0;\\n        for (uint256 i = 0; i < len; i = i.add(1)) {\\n            uint256 ind = _findAddress(investors, bids[i].investor, count);\\n            require(ind <= count, \\\"MarsBaseOtc: Internal error getInvestors\\\");\\n            if (ind == count) {\\n                investors[count] = bids[i].investor;\\n                count = count.add(1);\\n            }\\n        }\\n        uint256 delta = len.sub(count);\\n        if (delta > 0) {\\n            // decrease len of arrays tokens and amount\\n            // https://ethereum.stackexchange.com/questions/51891/how-to-pop-from-decrease-the-length-of-a-memory-array-in-solidity\\n            assembly {\\n                mstore(investors, sub(mload(investors), delta))\\n            }\\n        }\\n    }\\n\\n    // private functions\\n    function _buyOrderDeposit(\\n        bytes32 _id,\\n        address _token,\\n        address _from,\\n        uint256 _amount\\n    ) private {\\n        OrdersBidInfo memory ownersBid =\\n            OrdersBidInfo({\\n                investor: _from,\\n                investedToken: _token,\\n                amountInvested: _amount\\n            });\\n\\n        if (_from == orders[_id].owner) {\\n            require(\\n                isAddressInWhiteList[_token] == true,\\n                \\\"308\\\"\\n            );\\n            ordersOwnerBid[_id].push(ownersBid);\\n        } else {\\n            require(_token == orders[_id].token, \\\"309\\\");\\n            ordersBid[_id].push(ownersBid);\\n        }\\n\\n        emit BuyOrderDeposit(_id, _token, _from, _amount);\\n    }\\n\\n    function _sellOrderDeposit(\\n        bytes32 _id,\\n        address _token,\\n        address _from,\\n        uint256 _amount\\n    ) private {\\n        OrdersBidInfo memory ownersBid =\\n            OrdersBidInfo({\\n                investor: _from,\\n                investedToken: _token,\\n                amountInvested: _amount\\n            });\\n\\n        if (_from == orders[_id].owner) {\\n            require(_token == orders[_id].token, \\\"310\\\");\\n            ordersOwnerBid[_id].push(ownersBid);\\n        } else {\\n            require(\\n                isAddressInWhiteList[_token] == true,\\n                \\\"311\\\"\\n            );\\n            ordersBid[_id].push(ownersBid);\\n        }\\n\\n        emit SellOrderDeposit(_id, _token, _from, _amount);\\n    }\\n\\n    function _cancel(bytes32 _id)\\n        private\\n        onlyWhenVaultDefined\\n        onlyWhenOrderExists(_id)\\n    {\\n        address[] memory tokens;\\n        uint256[] memory investments;\\n        (tokens, investments) = getOrderOwnerInvestments(_id);\\n        uint256 len = tokens.length;\\n        uint256 i;\\n        for (i = 0; i < len; i = i.add(1)) {\\n            vault.withdraw(tokens[i], orders[_id].owner, investments[i]);\\n        }\\n\\n        address[] memory investors = getInvestors(_id);\\n        len = investors.length;\\n        uint256 len2;\\n        uint256 j;\\n        for (i = 0; i < len; i = i.add(1)) {\\n            (tokens, investments) = getOrderUserInvestments(_id, investors[i]);\\n            len2 = tokens.length;\\n            for (j = 0; j < len2; j = j.add(1)) {\\n                vault.withdraw(tokens[j], investors[i], investments[j]);\\n            }\\n        }\\n\\n        orders[_id].isCancelled = true;\\n    }\\n\\n    function _getUserInvestments(OrdersBidInfo[] storage bids, address user)\\n        private\\n        view\\n        returns (address[] memory tokens, uint256[] memory amount)\\n    {\\n        uint256 len = bids.length;\\n        tokens = new address[](len);\\n        amount = new uint256[](len);\\n        uint256 count = 0;\\n        for (uint256 i = 0; i < len; i = i.add(1)) {\\n            if (user == address(0) || bids[i].investor == user) {\\n                uint256 ind =\\n                    _findAddress(tokens, bids[i].investedToken, count);\\n                if (ind < count) {\\n                    amount[ind] = amount[ind].add(bids[i].amountInvested);\\n                } else {\\n                    tokens[count] = bids[i].investedToken;\\n                    amount[count] = bids[i].amountInvested;\\n                    count = count.add(1);\\n                }\\n            }\\n        }\\n        uint256 delta = len.sub(count);\\n        if (delta > 0) {\\n            // decrease len of arrays tokens and amount\\n            // https://ethereum.stackexchange.com/questions/51891/how-to-pop-from-decrease-the-length-of-a-memory-array-in-solidity\\n            assembly {\\n                mstore(tokens, sub(mload(tokens), delta))\\n            }\\n            assembly {\\n                mstore(amount, sub(mload(amount), delta))\\n            }\\n        }\\n    }\\n\\n    function _findAddress(\\n        address[] memory array,\\n        address toFind,\\n        uint256 len\\n    ) private pure returns (uint256 i) {\\n        require(array.length >= len, \\\"MarsBaseOtc: Wrong len argument\\\");\\n        for (i = 0; i < len; i = i.add(1)) {\\n            if (array[i] == toFind) return i;\\n        }\\n    }\\n\\n    function _calculateToBrokerToUser(uint256 amount, uint256 brokerPerc)\\n        private\\n        pure\\n        returns (uint256 toBroker, uint256 toUser)\\n    {\\n        toBroker = amount.mul(brokerPerc).div(BROKERS_DENOMINATOR);\\n        toUser = amount.sub(toBroker);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/tepnik/Desktop/MarsBase-gitlab/contracts/Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"openzeppelin-solidity/contracts/access/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Vault is Ownable {\\n    address public marsBaseOtc;\\n\\n    modifier onlyMarsBaseOtc() {\\n        require(msg.sender == marsBaseOtc);\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function tokenFallback(\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external {}\\n\\n    function setMarsBaseOtc(address _marsBaseOtc) external onlyOwner {\\n        require(\\n            _marsBaseOtc != address(0),\\n            \\\"Vault: MarsBaseOtc is zero address\\\"\\n        );\\n        marsBaseOtc = _marsBaseOtc;\\n    }\\n\\n    function withdraw(\\n        address _token,\\n        address _receiver,\\n        uint256 _amount\\n    ) external onlyMarsBaseOtc {\\n        require(\\n            _receiver != address(0),\\n            \\\"901\\\"\\n        );\\n        if (_token == address(0)) {\\n            payable(_receiver).transfer(_amount);\\n        } else {\\n            require(\\n                IERC20(_token).transfer(_receiver, _amount),\\n                \\\"901\\\"\\n            );\\n        }\\n    }\\n\\n    function withdrawForTwo(\\n        address _token,\\n        address _receiver1,\\n        uint256 _amount1,\\n        address _receiver2,\\n        uint256 _amount2\\n    ) external onlyMarsBaseOtc {\\n        if (_token == address(0)) {\\n            if (_receiver1 != address(0) && _amount1 > 0)\\n                payable(_receiver1).transfer(_amount1);\\n            if (_receiver2 != address(0) && _amount2 > 0)\\n                payable(_receiver2).transfer(_amount2);\\n        } else {\\n            if (_receiver1 != address(0) && _amount1 > 0) {\\n                require(\\n                    IERC20(_token).transfer(_receiver1, _amount1),\\n                    \\\"901\\\"\\n                );\\n            }\\n            if (_receiver2 != address(0) && _amount2 > 0) {\\n                require(\\n                    IERC20(_token).transfer(_receiver2, _amount2),\\n                    \\\"901\\\"\\n                );\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BuyOrderDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiratinDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"discount\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"enum IMarsBaseOtc.OrderTypeInfo\",\"name\":\"typeOrder\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isManual\",\"type\":\"bool\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"OrderSwapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SellOrderDeposit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BROKERS_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bidIndex\",\"type\":\"uint256\"}],\"name\":\"cancelBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bidIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"changeBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expirationDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ownerBroker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ownerBrokerPerc\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_usersBroker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usersBrokerPerc\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_discount\",\"type\":\"uint16\"},{\"internalType\":\"enum IMarsBaseOtc.OrderTypeInfo\",\"name\":\"typeOrder\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_isManual\",\"type\":\"bool\"}],\"name\":\"createOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToDelete\",\"type\":\"address\"}],\"name\":\"deleteFromWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getInvestors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"investors\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getOrderOwnerInvestments\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getOrderUserInvestments\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAddressInWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"investedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInvested\",\"type\":\"uint256\"}],\"internalType\":\"struct IMarsBaseOtc.OrdersBidInfo[]\",\"name\":\"distribution\",\"type\":\"tuple[]\"}],\"name\":\"makeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"}],\"name\":\"makeSwapOrderOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"orderDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOfToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"discount\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isCancelled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSwapped\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isManual\",\"type\":\"bool\"},{\"internalType\":\"enum IMarsBaseOtc.OrderTypeInfo\",\"name\":\"orderType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ordersBid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"investedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInvested\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ordersBidLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ordersOwnerBid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"investedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInvested\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ordersOwnerBidLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ownerBroker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"broker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percents\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"newAmountOfToken\",\"type\":\"uint256\"}],\"name\":\"setAmountOfToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"newDiscount\",\"type\":\"uint16\"}],\"name\":\"setDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Vault\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usersBroker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"broker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percents\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MarsBaseOtc","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}