{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\n/// @notice A library for performing overflow-/underflow-safe math,\r\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\r\nlibrary BoringMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b == 0 || (c = a * b) / b == a, \"BoringMath: Mul Overflow\");\r\n    }\r\n}\r\n\r\ninterface IAggregator {\r\n    function latestAnswer() external view returns (int256 answer);\r\n}\r\n\r\n/// @title xSUSHIOracle\r\n/// @author BoringCrypto\r\n/// @notice Oracle used for getting the price of xSUSHI based on Chainlink SUSHI price\r\n/// @dev\r\ncontract xSUSHIOracleUSD is IAggregator {\r\n    using BoringMath for uint256;\r\n\r\n    IERC20 public immutable sushi;\r\n    IERC20 public immutable bar;\r\n    IAggregator public immutable sushiOracle;\r\n    IAggregator public immutable ethUSDOracle;\r\n\r\n    constructor(\r\n        IERC20 sushi_,\r\n        IERC20 bar_,\r\n        IAggregator sushiOracle_,\r\n        IAggregator ethUSDOracle_\r\n    ) public {\r\n        sushi = sushi_;\r\n        bar = bar_;\r\n        sushiOracle = sushiOracle_;\r\n        ethUSDOracle = ethUSDOracle_;\r\n    }\r\n\r\n    // Calculates the lastest exchange rate\r\n    // Uses sushi rate and xSUSHI conversion\r\n    function latestAnswer() external view override returns (int256) {\r\n        return int256((uint256(sushiOracle.latestAnswer()).mul(sushi.balanceOf(address(bar))) / bar.totalSupply()).mul(uint256(ethUSDOracle.latestAnswer())));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"sushi_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"bar_\",\"type\":\"address\"},{\"internalType\":\"contract IAggregator\",\"name\":\"sushiOracle_\",\"type\":\"address\"},{\"internalType\":\"contract IAggregator\",\"name\":\"ethUSDOracle_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"bar\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethUSDOracle\",\"outputs\":[{\"internalType\":\"contract IAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiOracle\",\"outputs\":[{\"internalType\":\"contract IAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"xSUSHIOracleUSD","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"0000000000000000000000006b3595068778dd592e39a122f4f5a5cf09c90fe20000000000000000000000008798249c2e607446efb7ad49ec89dd1865ff4272000000000000000000000000e572cef69f43c2e488b33924af04bdace19079cf0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9687af9264788e565bfcf9e94f62b999d1d4c7feec2d6d2d078754a5af0cc428"}]}