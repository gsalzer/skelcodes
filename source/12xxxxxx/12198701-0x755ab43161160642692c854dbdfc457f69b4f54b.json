{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.11\r\n# (c) CoinFLEX\r\n# Hub for Upgrading ERC-20 Tokens\r\n'''\r\n@title TokenSwap\r\n@author CoinFLEX\r\n@license Copyright (c) CoinFLEX, 2021 - all rights reserved\r\n@notice Hub for Upgrading FLEXCoin ERC-20 Tokens\r\n@dev Holds a set amount of new ERC-20 token to give out in exchange for older version\r\n'''\r\nfrom vyper.interfaces import ERC20\r\n\r\n### Member Variables ###\r\nold_addr: public(address) # Address of the old ERC-20 token contract\r\nnew_addr: public(address) # Address of the new ERC-20 token contract\r\ntreasury: public(address) # Address to move old ERC-20 tokens to after handing out new ERC-20 tokens\r\nowner:    public(address) # Address where this contract belongs to\r\n\r\n### Events ###\r\nevent FundsRescued:\r\n  _token_addr: indexed(address)\r\n  _target:     indexed(address)\r\n  _amount:     uint256\r\n\r\nevent OwnershipTransferred:\r\n  _prev_owner: indexed(address)\r\n  _new_owner:  indexed(address)\r\n\r\nevent TokensSwapped:\r\n  _addr:       indexed(address)\r\n  _amount:     uint256\r\n\r\nevent TreasuryChanged:\r\n  _prev_treasury: indexed(address)\r\n  _new_treasury:  indexed(address)\r\n\r\n### Constructor ###\r\n@external\r\ndef __init__(_old_addr: address, _new_addr: address, _treasury: address):\r\n  '''\r\n  @notice Contract constructor\r\n  @param _old_addr  address of the old ERC-20 token contract\r\n  @param _new_addr  address of the old ERC-20 token contract\r\n  @param _treasury  address to move old ERC-20 tokens to after handing out new ERC-20 tokens\r\n  '''\r\n  assert _old_addr != ZERO_ADDRESS, 'Old ERC-20 token address cannot be zero.' # dev: old ERC-20 token address cannot be zero\r\n  self.old_addr = _old_addr\r\n  assert _new_addr != ZERO_ADDRESS, 'New ERC-20 token address cannot be zero.' # dev: new ERC-20 token address cannot be zero\r\n  self.new_addr = _new_addr\r\n  assert _treasury != ZERO_ADDRESS, 'Treasury address cannot be zero.' # dev: treasury address cannot be zero\r\n  self.treasury = _treasury\r\n  self.owner = msg.sender\r\n\r\n### Methods ###\r\n@external\r\ndef change_treasury(_addr: address) -> bool:\r\n  '''\r\n  @notice Change the treasury address where old ERC-20 tokens get transferred to after swap.\r\n  @dev only contract owner has access to this action\r\n  @param _addr  the address of the new ERC-20 token treasury\r\n  '''\r\n  assert msg.sender == self.owner, 'Only contract owner is permitted to this action.' # dev: only owner\r\n  assert _addr != ZERO_ADDRESS, 'Treasury address cannot be zero.' # dev: treasury address cannot be zero\r\n  _prev_treasury: address = self.treasury # dev: save previous treasury address for logging\r\n  self.treasury           = _addr         # dev: set new treasury address\r\n  log TreasuryChanged(_prev_treasury, _addr)\r\n  return True\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef rescue_funds(_addr: address, _amount: uint256) -> bool:\r\n  '''\r\n  @notice Rescue air-dropped fund from this contract\r\n  @dev only contract owner has access to this action\r\n  @param _addr  the token address to have its funds rescued\r\n  @param _amount  the amount of tokens to have its funds rescued\r\n  '''\r\n  assert msg.sender == self.owner, 'Only contract owner is permitted to this action.' # dev: only owner\r\n  assert _addr != ZERO_ADDRESS, 'Token address to rescue funds from cannot be zero.' # dev: token address to rescue funds from cannot be zero\r\n  assert _amount > 0, 'Amount to rescue must be greater than zero.' # dev: amount to rescue must be greater than zero\r\n  assert ERC20(_addr).transfer(msg.sender, _amount), 'Transfer failed.' # dev: transfer failed\r\n  log FundsRescued(_addr, msg.sender, _amount)\r\n  return True\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef swap(_amount: uint256) -> bool:\r\n  '''\r\n  @notice Swap old ERC-20 tokens with the new ERC-20 tokens\r\n  @dev old ERC-20 tokens are transfered to the treasury address and the new ERC-20 tokens are handed out from this contract\r\n  @param _amount  the amount to perform the swap\r\n  '''\r\n  assert _amount > 0, 'Amount to swap must be greater than zero.' # dev: amount to swap must be greater than zero\r\n  assert ERC20(self.old_addr).transferFrom(msg.sender, self.treasury, _amount), 'Old token transfer failed.' # dev: transfer failed\r\n  assert ERC20(self.new_addr).transfer(msg.sender, _amount), 'New token transfer failed.' # dev: transfer failed\r\n  log TokensSwapped(msg.sender, _amount)\r\n  return True\r\n\r\n@external\r\ndef transfer_ownership(_addr: address) -> bool:\r\n  '''\r\n  @notice Transfer ownership for this contract; Only one owner address allowed\r\n  @dev only contract owner has access to this action\r\n  @param _addr  the address to transfer this contract's ownership to\r\n  '''\r\n  assert msg.sender == self.owner, 'Only contract owner is permitted to this action.' # dev: only owner\r\n  assert _addr != ZERO_ADDRESS, 'Cannot transfer contract ownership to zero address.' # dev: cannot transfer ownership to zero address\r\n  self.owner = _addr # dev: set new owner\r\n  log OwnershipTransferred(msg.sender, _addr)\r\n  return True","ABI":"[{\"name\":\"FundsRescued\",\"inputs\":[{\"name\":\"_token_addr\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_target\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"_prev_owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_new_owner\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"TokensSwapped\",\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"TreasuryChanged\",\"inputs\":[{\"name\":\"_prev_treasury\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_new_treasury\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_old_addr\",\"type\":\"address\"},{\"name\":\"_new_addr\",\"type\":\"address\"},{\"name\":\"_treasury\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"change_treasury\",\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":38775},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"rescue_funds\",\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":80724},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"swap\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":82740},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transfer_ownership\",\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":38061},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"old_addr\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":1208},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"new_addr\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":1238},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"treasury\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":1268},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":1298}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.11","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000fcf8eda095e37a41e002e266daad7efc1579bc0a00000000000000000000000091e8a09636e93bb9f76316c613e508a383df583d00000000000000000000000060cc20c5ff95cc46b4ed606d940f657ad054c309","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}