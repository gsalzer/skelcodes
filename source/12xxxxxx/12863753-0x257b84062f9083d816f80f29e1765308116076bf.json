{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity 0.5.16;\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\npragma solidity 0.5.16;\r\n\r\ncontract Rookie_Flexible is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     *  @dev Structs to store user staking data.\r\n     */\r\n    struct Deposits {\r\n        uint256 depositAmount;\r\n        uint256 depositTime;\r\n        uint64 userIndex;\r\n        bool paid;\r\n        bool eligible;\r\n    }\r\n\r\n    /**\r\n     *  @dev Structs to store interest rate change.\r\n     */\r\n    struct Rates {\r\n        uint64 newInterestRate;\r\n        uint256 timeStamp;\r\n    }\r\n\r\n    mapping(address => Deposits) private deposits;\r\n    mapping(uint64 => Rates) public rates;\r\n    mapping(address => bool) private hasStaked;\r\n\r\n    address public tokenAddress;\r\n    uint256 public stakedBalance;\r\n    uint256 public rewardBalance;\r\n    uint256 public stakedTotal;\r\n    uint256 public totalReward;\r\n    uint64 public index;\r\n    uint64 public rate;\r\n    uint256 public eligibilityAmount;\r\n    string public name;\r\n\r\n    IERC20 public ERC20Interface;\r\n\r\n    /**\r\n     *  @dev Emitted when user stakes 'stakedAmount' value of tokens\r\n     */\r\n    event Staked(\r\n        address indexed token,\r\n        address indexed staker_,\r\n        uint256 stakedAmount_\r\n    );\r\n\r\n    /**\r\n     *  @dev Emitted when user withdraws his stakings\r\n     */\r\n    event PaidOut(\r\n        address indexed token,\r\n        address indexed staker_,\r\n        uint256 amount_,\r\n        uint256 reward_\r\n    );\r\n\r\n    /**\r\n     *   @param\r\n     *   name_ name of the contract\r\n     *   tokenAddress_ contract address of the token\r\n     *   rate_ APY rate for Flex contract\r\n     */\r\n    constructor(\r\n        string memory name_,\r\n        address tokenAddress_,\r\n        uint64 rate_\r\n    ) public Ownable() {\r\n        name = name_;\r\n        require(tokenAddress_ != address(0), \"Zero token address\");\r\n        tokenAddress = tokenAddress_;\r\n        require(rate_ != 0, \"Zero interest rate\");\r\n        rate = rate_;\r\n        rates[index] = Rates(rate, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     *  Requirements:\r\n     *  `rate_` New APY rate\r\n     *  @dev to set interest rates\r\n     */\r\n    function setRate(uint64 rate_) external onlyOwner {\r\n        require(rate_ != 0, \"Zero interest rate\");\r\n        rate = rate_;\r\n        index++;\r\n        rates[index] = Rates(rate_, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     *  Requirements:\r\n     *  `amount_` Eligibility amount to be set for platform unlocks\r\n     *  @dev to set eligibility amount\r\n     */\r\n    function setEligibilityAmount(uint256 eligibilityAmount_)\r\n        external\r\n        onlyOwner\r\n    {\r\n        eligibilityAmount = eligibilityAmount_;\r\n    }\r\n\r\n    /**\r\n     *  Requirements:\r\n     *  `user_` User wallet address\r\n     *  @dev to view eligibility status of user\r\n     */\r\n    function eligibility(address user_) external view returns (bool) {\r\n        return deposits[user_].eligible;\r\n    }\r\n\r\n    /**\r\n     *  Requirements:\r\n     *  `rewardAmount` rewards to be added to the staking contract\r\n     *  @dev to add rewards to the staking contract\r\n     *  once the allowance is given to this contract for 'rewardAmount' by the user\r\n     */\r\n    function addReward(uint256 rewardAmount)\r\n        external\r\n        _hasAllowance(msg.sender, rewardAmount)\r\n        returns (bool)\r\n    {\r\n        require(rewardAmount > 0, \"Reward must be positive\");\r\n        address from = msg.sender;\r\n\r\n        if (!_payMe(from, rewardAmount)) {\r\n            return false;\r\n        }\r\n\r\n        totalReward = totalReward.add(rewardAmount);\r\n        rewardBalance = rewardBalance.add(rewardAmount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *  Requirements:\r\n     *  `user` User wallet address\r\n     *  @dev returns user staking data\r\n     */\r\n    function userDeposits(address user)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            bool\r\n        )\r\n    {\r\n        if (hasStaked[user]) {\r\n            return (\r\n                deposits[user].depositAmount,\r\n                deposits[user].depositTime,\r\n                deposits[user].userIndex,\r\n                deposits[user].paid\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Requirements:\r\n     *  `amount` Amount to be staked\r\n     /**\r\n     *  @dev to stake 'amount' value of tokens \r\n     *  once the user has given allowance to the staking contract\r\n     */\r\n    function stake(uint256 amount)\r\n        external\r\n        _hasAllowance(msg.sender, amount)\r\n        returns (bool)\r\n    {\r\n        require(amount > 0, \"Can't stake 0 amount\");\r\n        address from = msg.sender;\r\n        require(!hasStaked[from], \"Already Staked\");\r\n        return (_stake(from, amount));\r\n    }\r\n\r\n    function _stake(address from, uint256 amount) private returns (bool) {\r\n        if (!_payMe(from, amount)) {\r\n            return false;\r\n        }\r\n\r\n        hasStaked[from] = true;\r\n        bool stakerEligibility;\r\n        if (amount >= eligibilityAmount) {\r\n            stakerEligibility = true;\r\n        }\r\n\r\n        deposits[from] = Deposits(\r\n            amount,\r\n            block.timestamp,\r\n            index,\r\n            false,\r\n            stakerEligibility\r\n        );\r\n\r\n        emit Staked(tokenAddress, from, amount);\r\n\r\n        stakedBalance = stakedBalance.add(amount);\r\n        stakedTotal = stakedTotal.add(amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev to withdraw user stakings.\r\n     */\r\n    function withdraw() external returns (bool) {\r\n        address from = msg.sender;\r\n        require(hasStaked[from], \"No stakes found for user\");\r\n        require(!deposits[from].paid, \"Already paid out\");\r\n        return (_withdraw(from));\r\n    }\r\n\r\n    function _withdraw(address from) private returns (bool) {\r\n        uint256 payOut = _calculate(from);\r\n        uint256 amount = deposits[from].depositAmount;\r\n        uint256 reward = payOut.sub(amount);\r\n        require(reward <= rewardBalance, \"Not enough rewards\");\r\n\r\n        stakedBalance = stakedBalance.sub(amount);\r\n        rewardBalance = rewardBalance.sub(reward);\r\n        deposits[from].paid = true;\r\n        hasStaked[from] = false;\r\n        if (deposits[from].eligible) {\r\n            deposits[from].eligible = false;\r\n        }\r\n\r\n        if (_payDirect(from, payOut)) {\r\n            emit PaidOut(tokenAddress, from, amount, reward);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function emergencyWithdraw() external returns (bool) {\r\n        address from = msg.sender;\r\n        require(hasStaked[from], \"No stakes found for user\");\r\n        require(!deposits[from].paid, \"Already paid out\");\r\n\r\n        return (_emergencyWithdraw(from));\r\n    }\r\n\r\n    function _emergencyWithdraw(address from) private returns (bool) {\r\n        uint256 amount = deposits[from].depositAmount;\r\n        stakedBalance = stakedBalance.sub(amount);\r\n        deposits[from].paid = true;\r\n        hasStaked[from] = false; //Check-Effects-Interactions pattern\r\n        if (deposits[from].eligible) {\r\n            deposits[from].eligible = false;\r\n        }\r\n\r\n        bool principalPaid = _payDirect(from, amount);\r\n        require(principalPaid, \"Error paying\");\r\n        emit PaidOut(tokenAddress, from, amount, 0);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *  Requirements:\r\n     *  `from` User wallet address\r\n     * @dev to calculate the rewards based on user staked 'amount'\r\n     * 'userIndex' - the index of the interest rate at the time of user stake.\r\n     * 'depositTime' - time of staking\r\n     */\r\n    function calculate(address from) external view returns (uint256) {\r\n        return _calculate(from);\r\n    }\r\n\r\n    function _calculate(address from) private view returns (uint256) {\r\n        if (!hasStaked[from]) return 0;\r\n        (uint256 amount, uint256 depositTime, uint64 userIndex) = (\r\n            deposits[from].depositAmount,\r\n            deposits[from].depositTime,\r\n            deposits[from].userIndex\r\n        );\r\n\r\n        uint256 time;\r\n        uint256 interest;\r\n\r\n        for (uint64 i = userIndex; i < index; i++) {\r\n            time = rates[i + 1].timeStamp.sub(depositTime);\r\n\r\n            interest = (\r\n                amount.mul(rates[i].newInterestRate).mul(time).div(315360000000)\r\n            );\r\n            amount = amount.add(interest);\r\n            depositTime = rates[i + 1].timeStamp;\r\n        }\r\n\r\n        time = block.timestamp.sub(depositTime);\r\n        interest = (amount.mul(rate).mul(time).div(315360000000));\r\n        amount = amount.add(interest);\r\n\r\n        return amount;\r\n    }\r\n\r\n    function _payMe(address payer, uint256 amount) private returns (bool) {\r\n        return _payTo(payer, address(this), amount);\r\n    }\r\n\r\n    function _payTo(\r\n        address allower,\r\n        address receiver,\r\n        uint256 amount\r\n    ) private _hasAllowance(allower, amount) returns (bool) {\r\n        ERC20Interface = IERC20(tokenAddress);\r\n        return ERC20Interface.transferFrom(allower, receiver, amount);\r\n    }\r\n\r\n    function _payDirect(address to, uint256 amount) private returns (bool) {\r\n        ERC20Interface = IERC20(tokenAddress);\r\n        return ERC20Interface.transfer(to, amount);\r\n    }\r\n\r\n    modifier _hasAllowance(address allower, uint256 amount) {\r\n        // Make sure the allower has provided the right allowance.\r\n        ERC20Interface = IERC20(tokenAddress);\r\n        uint256 ourAllowance = ERC20Interface.allowance(allower, address(this));\r\n        require(amount <= ourAllowance, \"Make sure to add enough allowance\");\r\n        _;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"rate_\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward_\",\"type\":\"uint256\"}],\"name\":\"PaidOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedAmount_\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC20Interface\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"calculate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"eligibility\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eligibilityAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"rates\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"newInterestRate\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eligibilityAmount_\",\"type\":\"uint256\"}],\"name\":\"setEligibilityAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rate_\",\"type\":\"uint64\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Rookie_Flexible","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000600000000000000000000000001de5e000c41c8d35b9f1f4985c23988f0583105700000000000000000000000000000000000000000000000000000000000009c4000000000000000000000000000000000000000000000000000000000000000f526f6f6b696520466c6578204554480000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://48cc563a45c9050e1ad4f03756d711e2d2cca85714481cb2414c4d3b609e4c27"}]}