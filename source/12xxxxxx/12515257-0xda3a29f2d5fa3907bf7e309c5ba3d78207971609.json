{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.6;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() public {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"REENTRANCY_ERROR\");\r\n\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n// Interface declarations\r\n/* solhint-disable func-order */\r\ninterface IUniswapRouter {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\ninterface IHarvestVault {\r\n    function deposit(uint256 amount) external;\r\n\r\n    function withdraw(uint256 numberOfShares) external;\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\ninterface IMintNoRewardPool {\r\n    function stake(uint256 amount) external;\r\n\r\n    function withdraw(uint256 amount) external;\r\n\r\n    function earned(address account) external view returns (uint256);\r\n\r\n    function lastTimeRewardApplicable() external view returns (uint256);\r\n\r\n    function rewardPerToken() external view returns (uint256);\r\n\r\n    function rewards(address account) external view returns (uint256);\r\n\r\n    function userRewardPerTokenPaid(address account)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function lastUpdateTime() external view returns (uint256);\r\n\r\n    function rewardRate() external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function rewardPerTokenStored() external view returns (uint256);\r\n\r\n    function periodFinish() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function getReward() external;\r\n}\r\n\r\ninterface IHarvest {\r\n    function setHarvestRewardVault(address _harvestRewardVault) external;\r\n\r\n    function setHarvestRewardPool(address _harvestRewardPool) external;\r\n\r\n    function setHarvestPoolToken(address _harvestfToken) external;\r\n\r\n    function setFarmToken(address _farmToken) external;\r\n\r\n    function updateReward() external;\r\n}\r\n\r\ninterface IStrategy {\r\n    function setTreasury(address payable _feeAddress) external;\r\n\r\n    function blacklistAddress(address account) external;\r\n\r\n    function removeFromBlacklist(address account) external;\r\n\r\n    function setCap(uint256 _cap) external;\r\n\r\n    function setLockTime(uint256 _lockTime) external;\r\n\r\n    function setFeeAddress(address payable _feeAddress) external;\r\n\r\n    function setFee(uint256 _fee) external;\r\n\r\n    function rescueDust() external;\r\n\r\n    function rescueAirdroppedTokens(address _token, address to) external;\r\n\r\n    function setSushiswapRouter(address _sushiswapRouter) external;\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// This contract is used for printing receipt tokens\r\n// Whenever someone joins a pool, a receipt token will be printed for that person\r\ncontract ReceiptToken is ERC20, Ownable {\r\n    ERC20 public underlyingToken;\r\n    address public underlyingStrategy;\r\n\r\n    constructor(address underlyingAddress, address strategy)\r\n        public\r\n        ERC20(\r\n            string(abi.encodePacked(\"pAT-\", ERC20(underlyingAddress).name())),\r\n            string(abi.encodePacked(\"pAT-\", ERC20(underlyingAddress).symbol()))\r\n        )\r\n    {\r\n        underlyingToken = ERC20(underlyingAddress);\r\n        underlyingStrategy = strategy;\r\n    }\r\n\r\n    /**\r\n     * @notice Mint new receipt tokens to some user\r\n     * @param to Address of the user that gets the receipt tokens\r\n     * @param amount Amount of receipt tokens that will get minted\r\n     */\r\n    function mint(address to, uint256 amount) public onlyOwner {\r\n        _mint(to, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Burn receipt tokens from some user\r\n     * @param from Address of the user that gets the receipt tokens burne\r\n     * @param amount Amount of receipt tokens that will get burned\r\n     */\r\n    function burn(address from, uint256 amount) public onlyOwner {\r\n        _burn(from, amount);\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\ncontract StrategyBase {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IUniswapRouter public sushiswapRouter;\r\n\r\n    ReceiptToken public receiptToken;\r\n\r\n    uint256 internal _minSlippage = 10; //0.1%\r\n    uint256 public fee = uint256(100);\r\n    uint256 constant feeFactor = uint256(10000);\r\n    uint256 public cap;\r\n\r\n    /// @notice Event emitted when user makes a deposit and receipt token is minted\r\n    event ReceiptMinted(address indexed user, uint256 amount);\r\n    /// @notice Event emitted when user withdraws and receipt token is burned\r\n    event ReceiptBurned(address indexed user, uint256 amount);\r\n\r\n    function _validateCommon(\r\n        uint256 deadline,\r\n        uint256 amount,\r\n        uint256 _slippage\r\n    ) internal view {\r\n        require(deadline >= block.timestamp, \"DEADLINE_ERROR\");\r\n        require(amount > 0, \"AMOUNT_0\");\r\n        require(_slippage >= _minSlippage, \"SLIPPAGE_ERROR\");\r\n        require(_slippage <= feeFactor, \"MAX_SLIPPAGE_ERROR\");\r\n    }\r\n\r\n    function _validateDeposit(\r\n        uint256 deadline,\r\n        uint256 amount,\r\n        uint256 total,\r\n        uint256 slippage\r\n    ) internal view {\r\n        _validateCommon(deadline, amount, slippage);\r\n\r\n        require(total.add(amount) <= cap, \"CAP_REACHED\");\r\n    }\r\n\r\n    function _mintParachainAuctionTokens(uint256 _amount) internal {\r\n        receiptToken.mint(msg.sender, _amount);\r\n        emit ReceiptMinted(msg.sender, _amount);\r\n    }\r\n\r\n    function _burnParachainAuctionTokens(uint256 _amount) internal {\r\n        receiptToken.burn(msg.sender, _amount);\r\n        emit ReceiptBurned(msg.sender, _amount);\r\n    }\r\n\r\n    function _calculateFee(uint256 _amount) internal view returns (uint256) {\r\n        return _calculatePortion(_amount, fee);\r\n    }\r\n\r\n    function _getBalance(address _token) internal view returns (uint256) {\r\n        return IERC20(_token).balanceOf(address(this));\r\n    }\r\n\r\n    function _increaseAllowance(\r\n        address _token,\r\n        address _contract,\r\n        uint256 _amount\r\n    ) internal {\r\n        IERC20(_token).safeIncreaseAllowance(address(_contract), _amount);\r\n    }\r\n\r\n    function _getRatio(\r\n        uint256 numerator,\r\n        uint256 denominator,\r\n        uint256 precision\r\n    ) internal pure returns (uint256) {\r\n        if (numerator == 0 || denominator == 0) {\r\n            return 0;\r\n        }\r\n        uint256 _numerator = numerator * 10**(precision + 1);\r\n        uint256 _quotient = ((_numerator / denominator) + 5) / 10;\r\n        return (_quotient);\r\n    }\r\n\r\n    function _swapTokenToEth(\r\n        address[] memory swapPath,\r\n        uint256 exchangeAmount,\r\n        uint256 deadline,\r\n        uint256 slippage,\r\n        uint256 ethPerToken\r\n    ) internal returns (uint256) {\r\n        uint256[] memory amounts =\r\n            sushiswapRouter.getAmountsOut(exchangeAmount, swapPath);\r\n        uint256 sushiAmount = amounts[amounts.length - 1]; //amount of ETH\r\n        uint256 portion = _calculatePortion(sushiAmount, slippage);\r\n        uint256 calculatedPrice = (exchangeAmount.mul(ethPerToken)).div(10**18);\r\n        uint256 decimals = ERC20(swapPath[0]).decimals();\r\n        if (decimals < 18) {\r\n            calculatedPrice = calculatedPrice.mul(10**(18 - decimals));\r\n        }\r\n        if (sushiAmount > calculatedPrice) {\r\n            require(\r\n                sushiAmount.sub(calculatedPrice) <= portion,\r\n                \"PRICE_ERROR_1\"\r\n            );\r\n        } else {\r\n            require(\r\n                calculatedPrice.sub(sushiAmount) <= portion,\r\n                \"PRICE_ERROR_2\"\r\n            );\r\n        }\r\n\r\n        _increaseAllowance(\r\n            swapPath[0],\r\n            address(sushiswapRouter),\r\n            exchangeAmount\r\n        );\r\n        uint256[] memory tokenSwapAmounts =\r\n            sushiswapRouter.swapExactTokensForETH(\r\n                exchangeAmount,\r\n                _getMinAmount(sushiAmount, slippage),\r\n                swapPath,\r\n                address(this),\r\n                deadline\r\n            );\r\n        return tokenSwapAmounts[tokenSwapAmounts.length - 1];\r\n    }\r\n\r\n    function _swapEthToToken(\r\n        address[] memory swapPath,\r\n        uint256 exchangeAmount,\r\n        uint256 deadline,\r\n        uint256 slippage,\r\n        uint256 tokensPerEth\r\n    ) internal returns (uint256) {\r\n        uint256[] memory amounts =\r\n            sushiswapRouter.getAmountsOut(exchangeAmount, swapPath);\r\n        uint256 sushiAmount = amounts[amounts.length - 1];\r\n        uint256 portion = _calculatePortion(sushiAmount, slippage);\r\n        uint256 calculatedPrice =\r\n            (exchangeAmount.mul(tokensPerEth)).div(10**18);\r\n        uint256 decimals = ERC20(swapPath[0]).decimals();\r\n        if (decimals < 18) {\r\n            calculatedPrice = calculatedPrice.mul(10**(18 - decimals));\r\n        }\r\n        if (sushiAmount > calculatedPrice) {\r\n            require(\r\n                sushiAmount.sub(calculatedPrice) <= portion,\r\n                \"PRICE_ERROR_1\"\r\n            );\r\n        } else {\r\n            require(\r\n                calculatedPrice.sub(sushiAmount) <= portion,\r\n                \"PRICE_ERROR_2\"\r\n            );\r\n        }\r\n\r\n        uint256[] memory swapResult =\r\n            sushiswapRouter.swapExactETHForTokens{value: exchangeAmount}(\r\n                _getMinAmount(sushiAmount, slippage),\r\n                swapPath,\r\n                address(this),\r\n                deadline\r\n            );\r\n\r\n        return swapResult[swapResult.length - 1];\r\n    }\r\n\r\n    function _getMinAmount(uint256 amount, uint256 slippage)\r\n        private\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 portion = _calculatePortion(amount, slippage);\r\n        return amount.sub(portion);\r\n    }\r\n\r\n    function _calculatePortion(uint256 _amount, uint256 _fee)\r\n        private\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (_amount.mul(_fee)).div(feeFactor);\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\ncontract HarvestBase is Ownable, StrategyBase, IHarvest, IStrategy {\r\n    address public token;\r\n    address public weth;\r\n    address public farmToken;\r\n    address public harvestfToken;\r\n    address payable public treasuryAddress;\r\n    address payable public feeAddress;\r\n    uint256 public ethDust;\r\n    uint256 public treasueryEthDust;\r\n    uint256 public totalDeposits;\r\n    uint256 public lockTime = 1;\r\n\r\n    mapping(address => bool) public blacklisted; //blacklisted users do not receive a receipt token\r\n\r\n    IMintNoRewardPool public harvestRewardPool;\r\n    IHarvestVault public harvestRewardVault;\r\n\r\n    /// @notice Info of each user.\r\n    struct UserInfo {\r\n        uint256 amountEth; //how much ETH the user entered with; should be 0 for HarvestSC\r\n        uint256 amountToken; //how much Token was obtained by swapping user's ETH\r\n        uint256 amountfToken; //how much fToken was obtained after deposit to vault\r\n        uint256 amountReceiptToken; //receipt tokens printed for user; should be equal to amountfToken\r\n        uint256 underlyingRatio; //ratio between obtained fToken and token\r\n        uint256 userTreasuryEth; //how much eth the user sent to treasury\r\n        uint256 userCollectedFees; //how much eth the user sent to fee address\r\n        bool wasUserBlacklisted; //if user was blacklist at deposit time, he is not receiving receipt tokens\r\n        uint256 timestamp; //first deposit timestamp; used for withdrawal lock time check\r\n        uint256 earnedTokens;\r\n        uint256 earnedRewards; //before fees\r\n        //----\r\n        uint256 rewards;\r\n        uint256 userRewardPerTokenPaid;\r\n    }\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n    struct UserDeposits {\r\n        uint256 timestamp;\r\n        uint256 amountfToken;\r\n    }\r\n    /// @notice Used internally for avoiding \"stack-too-deep\" error when depositing\r\n    struct DepositData {\r\n        address[] swapPath;\r\n        uint256[] swapAmounts;\r\n        uint256 obtainedToken;\r\n        uint256 obtainedfToken;\r\n        uint256 prevfTokenBalance;\r\n    }\r\n\r\n    /// @notice Used internally for avoiding \"stack-too-deep\" error when withdrawing\r\n    struct WithdrawData {\r\n        uint256 prevDustEthBalance;\r\n        uint256 prevfTokenBalance;\r\n        uint256 prevTokenBalance;\r\n        uint256 obtainedfToken;\r\n        uint256 obtainedToken;\r\n        uint256 feeableToken;\r\n        uint256 feeableEth;\r\n        uint256 totalEth;\r\n        uint256 totalToken;\r\n        uint256 auctionedEth;\r\n        uint256 auctionedToken;\r\n        uint256 rewards;\r\n        uint256 farmBalance;\r\n        uint256 burnAmount;\r\n        uint256 earnedTokens;\r\n        uint256 rewardsInEth;\r\n        uint256 auctionedRewardsInEth;\r\n        uint256 userRewardsInEth;\r\n        uint256 initialAmountfToken;\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------------//\r\n    //------------------------------------ Events -------------------------------------------------//\r\n    //-----------------------------------------------------------------------------------------------------------------//\r\n    event ExtraTokensExchanged(\r\n        address indexed user,\r\n        uint256 tokensAmount,\r\n        uint256 obtainedEth\r\n    );\r\n    event ObtainedInfo(\r\n        address indexed user,\r\n        uint256 underlying,\r\n        uint256 underlyingReceipt\r\n    );\r\n\r\n    event RewardsEarned(address indexed user, uint256 amount);\r\n    event ExtraTokens(address indexed user, uint256 amount);\r\n\r\n    /// @notice Event emitted when blacklist status for an address changes\r\n    event BlacklistChanged(\r\n        string actionType,\r\n        address indexed user,\r\n        bool oldVal,\r\n        bool newVal\r\n    );\r\n\r\n    /// @notice Event emitted when owner makes a rescue dust request\r\n    event RescuedDust(string indexed dustType, uint256 amount);\r\n\r\n    /// @notice Event emitted when owner changes any contract address\r\n    event ChangedAddress(\r\n        string indexed addressType,\r\n        address indexed oldAddress,\r\n        address indexed newAddress\r\n    );\r\n\r\n    /// @notice Event emitted when owner changes any contract address\r\n    event ChangedValue(\r\n        string indexed valueType,\r\n        uint256 indexed oldValue,\r\n        uint256 indexed newValue\r\n    );\r\n\r\n    //-----------------------------------------------------------------------------------------------------------------//\r\n    //------------------------------------ Setters -------------------------------------------------//\r\n    //-----------------------------------------------------------------------------------------------------------------//\r\n    /**\r\n     * @notice Update the address of VaultDAI\r\n     * @dev Can only be called by the owner\r\n     * @param _harvestRewardVault Address of VaultDAI\r\n     */\r\n    function setHarvestRewardVault(address _harvestRewardVault)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        require(_harvestRewardVault != address(0), \"VAULT_0x0\");\r\n        emit ChangedAddress(\r\n            \"VAULT\",\r\n            address(harvestRewardVault),\r\n            _harvestRewardVault\r\n        );\r\n        harvestRewardVault = IHarvestVault(_harvestRewardVault);\r\n    }\r\n\r\n    /**\r\n     * @notice Update the address of NoMintRewardPool\r\n     * @dev Can only be called by the owner\r\n     * @param _harvestRewardPool Address of NoMintRewardPool\r\n     */\r\n    function setHarvestRewardPool(address _harvestRewardPool)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        require(_harvestRewardPool != address(0), \"POOL_0x0\");\r\n        emit ChangedAddress(\r\n            \"POOL\",\r\n            address(harvestRewardPool),\r\n            _harvestRewardPool\r\n        );\r\n        harvestRewardPool = IMintNoRewardPool(_harvestRewardPool);\r\n    }\r\n\r\n    /**\r\n     * @notice Update the address of Sushiswap Router\r\n     * @dev Can only be called by the owner\r\n     * @param _sushiswapRouter Address of Sushiswap Router\r\n     */\r\n    function setSushiswapRouter(address _sushiswapRouter)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        require(_sushiswapRouter != address(0), \"0x0\");\r\n        emit ChangedAddress(\r\n            \"SUSHISWAP_ROUTER\",\r\n            address(sushiswapRouter),\r\n            _sushiswapRouter\r\n        );\r\n        sushiswapRouter = IUniswapRouter(_sushiswapRouter);\r\n    }\r\n\r\n    /**\r\n     * @notice Update the address of Pool's underlying token\r\n     * @dev Can only be called by the owner\r\n     * @param _harvestfToken Address of Pool's underlying token\r\n     */\r\n    function setHarvestPoolToken(address _harvestfToken)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        require(_harvestfToken != address(0), \"TOKEN_0x0\");\r\n        emit ChangedAddress(\"TOKEN\", harvestfToken, _harvestfToken);\r\n        harvestfToken = _harvestfToken;\r\n    }\r\n\r\n    /**\r\n     * @notice Update the address of FARM\r\n     * @dev Can only be called by the owner\r\n     * @param _farmToken Address of FARM\r\n     */\r\n    function setFarmToken(address _farmToken) external override onlyOwner {\r\n        require(_farmToken != address(0), \"FARM_0x0\");\r\n        emit ChangedAddress(\"FARM\", farmToken, _farmToken);\r\n        farmToken = _farmToken;\r\n    }\r\n\r\n    /**\r\n     * @notice Update the address for fees\r\n     * @dev Can only be called by the owner\r\n     * @param _feeAddress Fee's address\r\n     */\r\n    function setTreasury(address payable _feeAddress)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        require(_feeAddress != address(0), \"0x0\");\r\n        emit ChangedAddress(\r\n            \"TREASURY\",\r\n            address(treasuryAddress),\r\n            address(_feeAddress)\r\n        );\r\n        treasuryAddress = _feeAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Blacklist address; blacklisted addresses do not receive receipt tokens\r\n     * @dev Can only be called by the owner\r\n     * @param account User/contract address\r\n     */\r\n    function blacklistAddress(address account) external override onlyOwner {\r\n        require(account != address(0), \"0x0\");\r\n        emit BlacklistChanged(\"BLACKLIST\", account, blacklisted[account], true);\r\n        blacklisted[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @notice Remove address from blacklisted addresses; blacklisted addresses do not receive receipt tokens\r\n     * @dev Can only be called by the owner\r\n     * @param account User/contract address\r\n     */\r\n    function removeFromBlacklist(address account) external override onlyOwner {\r\n        require(account != address(0), \"0x0\");\r\n        emit BlacklistChanged(\"REMOVE\", account, blacklisted[account], false);\r\n        blacklisted[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @notice Set max ETH cap for this strategy\r\n     * @dev Can only be called by the owner\r\n     * @param _cap ETH amount\r\n     */\r\n    function setCap(uint256 _cap) external override onlyOwner {\r\n        emit ChangedValue(\"CAP\", cap, _cap);\r\n        cap = _cap;\r\n    }\r\n\r\n    /**\r\n     * @notice Set lock time\r\n     * @dev Can only be called by the owner\r\n     * @param _lockTime lock time in seconds\r\n     */\r\n    function setLockTime(uint256 _lockTime) external override onlyOwner {\r\n        require(_lockTime > 0, \"TIME_0\");\r\n        emit ChangedValue(\"LOCKTIME\", lockTime, _lockTime);\r\n        lockTime = _lockTime;\r\n    }\r\n\r\n    function setFeeAddress(address payable _feeAddress)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        emit ChangedAddress(\"FEE\", address(feeAddress), address(_feeAddress));\r\n        feeAddress = _feeAddress;\r\n    }\r\n\r\n    function setFee(uint256 _fee) external override onlyOwner {\r\n        require(_fee <= uint256(9000), \"FEE_TOO_HIGH\");\r\n        emit ChangedValue(\"FEE\", fee, _fee);\r\n    }\r\n\r\n    /**\r\n     * @notice Rescue dust resulted from swaps/liquidity\r\n     * @dev Can only be called by the owner\r\n     */\r\n    function rescueDust() external override onlyOwner {\r\n        if (ethDust > 0) {\r\n            safeTransferETH(treasuryAddress, ethDust);\r\n            treasueryEthDust = treasueryEthDust.add(ethDust);\r\n            emit RescuedDust(\"ETH\", ethDust);\r\n            ethDust = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Rescue any non-reward token that was airdropped to this contract\r\n     * @dev Can only be called by the owner\r\n     */\r\n    function rescueAirdroppedTokens(address _token, address to)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        require(_token != address(0), \"token_0x0\");\r\n        require(to != address(0), \"to_0x0\");\r\n        require(_token != farmToken, \"rescue_reward_error\");\r\n\r\n        uint256 balanceOfToken = IERC20(_token).balanceOf(address(this));\r\n        require(balanceOfToken > 0, \"balance_0\");\r\n\r\n        require(IERC20(_token).transfer(to, balanceOfToken), \"rescue_failed\");\r\n    }\r\n\r\n    /// @notice Transfer rewards to this strategy\r\n    function updateReward() external override onlyOwner {\r\n        harvestRewardPool.getReward();\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------------//\r\n    //------------------------------------ View methods -------------------------------------------------//\r\n    //-----------------------------------------------------------------------------------------------------------------//\r\n    /**\r\n     * @notice Check if user can withdraw based on current lock time\r\n     * @param user Address of the user\r\n     * @return true or false\r\n     */\r\n    function isWithdrawalAvailable(address user) public view returns (bool) {\r\n        if (lockTime > 0) {\r\n            return userInfo[user].timestamp.add(lockTime) <= block.timestamp;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice View function to see pending rewards for account.\r\n     * @param account user account to check\r\n     * @return pending rewards\r\n     */\r\n    function getPendingRewards(address account) public view returns (uint256) {\r\n        if (account != address(0)) {\r\n            if (userInfo[account].amountfToken == 0) {\r\n                return 0;\r\n            }\r\n            return\r\n                _earned(\r\n                    userInfo[account].amountfToken,\r\n                    userInfo[account].userRewardPerTokenPaid,\r\n                    userInfo[account].rewards\r\n                );\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------------//\r\n    //------------------------------------ Internal methods -------------------------------------------------//\r\n    //-----------------------------------------------------------------------------------------------------------------//\r\n    function _calculateRewards(\r\n        address account,\r\n        uint256 amount,\r\n        uint256 amountfToken\r\n    ) internal view returns (uint256) {\r\n        uint256 rewards = userInfo[account].rewards;\r\n        uint256 farmBalance = IERC20(farmToken).balanceOf(address(this));\r\n\r\n        if (amount == 0) {\r\n            if (rewards < farmBalance) {\r\n                return rewards;\r\n            }\r\n            return farmBalance;\r\n        }\r\n\r\n        return (amount.mul(rewards)).div(amountfToken);\r\n    }\r\n\r\n    function _updateRewards(address account) internal {\r\n        if (account != address(0)) {\r\n            UserInfo storage user = userInfo[account];\r\n\r\n            uint256 _stored = harvestRewardPool.rewardPerToken();\r\n\r\n            user.rewards = _earned(\r\n                user.amountfToken,\r\n                user.userRewardPerTokenPaid,\r\n                user.rewards\r\n            );\r\n            user.userRewardPerTokenPaid = _stored;\r\n        }\r\n    }\r\n\r\n    function _earned(\r\n        uint256 _amountfToken,\r\n        uint256 _userRewardPerTokenPaid,\r\n        uint256 _rewards\r\n    ) internal view returns (uint256) {\r\n        return\r\n            _amountfToken\r\n                .mul(\r\n                harvestRewardPool.rewardPerToken().sub(_userRewardPerTokenPaid)\r\n            )\r\n                .div(1e18)\r\n                .add(_rewards);\r\n    }\r\n\r\n    function _validateWithdraw(\r\n        uint256 deadline,\r\n        uint256 amount,\r\n        uint256 amountfToken,\r\n        uint256 receiptBalance,\r\n        uint256 amountReceiptToken,\r\n        bool wasUserBlacklisted,\r\n        uint256 timestamp,\r\n        uint256 slippage\r\n    ) internal view {\r\n        _validateCommon(deadline, amount, slippage);\r\n\r\n        require(amountfToken >= amount, \"AMOUNT_GREATER_THAN_BALANCE\");\r\n\r\n        if (!wasUserBlacklisted) {\r\n            require(receiptBalance >= amountReceiptToken, \"RECEIPT_AMOUNT\");\r\n        }\r\n        if (lockTime > 0) {\r\n            require(timestamp.add(lockTime) <= block.timestamp, \"LOCK_TIME\");\r\n        }\r\n    }\r\n\r\n    function _depositTokenToHarvestVault(uint256 amount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        _increaseAllowance(token, address(harvestRewardVault), amount);\r\n\r\n        uint256 prevfTokenBalance = _getBalance(harvestfToken);\r\n        harvestRewardVault.deposit(amount);\r\n        uint256 currentfTokenBalance = _getBalance(harvestfToken);\r\n\r\n        require(\r\n            currentfTokenBalance > prevfTokenBalance,\r\n            \"DEPOSIT_VAULT_ERROR\"\r\n        );\r\n\r\n        return currentfTokenBalance.sub(prevfTokenBalance);\r\n    }\r\n\r\n    function _withdrawTokenFromHarvestVault(uint256 amount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        _increaseAllowance(harvestfToken, address(harvestRewardVault), amount);\r\n\r\n        uint256 prevTokenBalance = _getBalance(token);\r\n        harvestRewardVault.withdraw(amount);\r\n        uint256 currentTokenBalance = _getBalance(token);\r\n\r\n        require(currentTokenBalance > prevTokenBalance, \"WITHDRAW_VAULT_ERROR\");\r\n\r\n        return currentTokenBalance.sub(prevTokenBalance);\r\n    }\r\n\r\n    function _stakefTokenToHarvestPool(uint256 amount) internal {\r\n        _increaseAllowance(harvestfToken, address(harvestRewardPool), amount);\r\n        harvestRewardPool.stake(amount);\r\n    }\r\n\r\n    function _unstakefTokenFromHarvestPool(uint256 amount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        _increaseAllowance(harvestfToken, address(harvestRewardPool), amount);\r\n\r\n        uint256 prevfTokenBalance = _getBalance(harvestfToken);\r\n        harvestRewardPool.withdraw(amount);\r\n        uint256 currentfTokenBalance = _getBalance(harvestfToken);\r\n\r\n        require(\r\n            currentfTokenBalance > prevfTokenBalance,\r\n            \"WITHDRAW_POOL_ERROR\"\r\n        );\r\n\r\n        return currentfTokenBalance.sub(prevfTokenBalance);\r\n    }\r\n\r\n    function _calculatefTokenRemainings(\r\n        uint256 obtainedfToken,\r\n        uint256 amountfToken,\r\n        bool wasUserBlacklisted,\r\n        uint256 amountReceiptToken\r\n    )\r\n        internal\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 burnAmount = 0;\r\n        if (obtainedfToken < amountfToken) {\r\n            amountfToken = amountfToken.sub(obtainedfToken);\r\n            if (!wasUserBlacklisted) {\r\n                amountReceiptToken = amountReceiptToken.sub(obtainedfToken);\r\n                burnAmount = obtainedfToken;\r\n            }\r\n        } else {\r\n            amountfToken = 0;\r\n            if (!wasUserBlacklisted) {\r\n                burnAmount = amountReceiptToken;\r\n                amountReceiptToken = 0;\r\n            }\r\n        }\r\n\r\n        return (amountfToken, amountReceiptToken, burnAmount);\r\n    }\r\n\r\n    event log(string s);\r\n    event log(uint256 amount);\r\n\r\n    function _calculateFeeableTokens(\r\n        uint256 amount,\r\n        uint256 amountfToken,\r\n        uint256 obtainedToken,\r\n        uint256 amountToken,\r\n        uint256 obtainedfToken,\r\n        uint256 underlyingRatio\r\n    ) internal returns (uint256 feeableToken, uint256 earnedTokens) {\r\n        emit log(\"_calculateFeeableTokens\");\r\n        emit log(amount);\r\n        emit log(amountfToken);\r\n        emit log(obtainedToken);\r\n        emit log(amountToken);\r\n        if (amount == amountfToken) {\r\n            //there is no point to do the ratio math as we can just get the difference between current obtained tokens and initial obtained tokens\r\n            if (obtainedToken > amountToken) {\r\n                feeableToken = obtainedToken.sub(amountToken);\r\n            }\r\n        } else {\r\n            uint256 currentRatio = _getRatio(obtainedfToken, obtainedToken, 18);\r\n\r\n            if (currentRatio < underlyingRatio) {\r\n                uint256 noOfOriginalTokensForCurrentAmount =\r\n                    (amount.mul(10**18)).div(underlyingRatio);\r\n                if (noOfOriginalTokensForCurrentAmount < obtainedToken) {\r\n                    feeableToken = obtainedToken.sub(\r\n                        noOfOriginalTokensForCurrentAmount\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        emit log(\"_calculateFeeableTokens end\");\r\n        emit log(feeableToken);\r\n\r\n        if (feeableToken > 0) {\r\n            uint256 extraTokensFee = _calculateFee(feeableToken);\r\n            emit ExtraTokens(msg.sender, feeableToken.sub(extraTokensFee));\r\n            earnedTokens = feeableToken.sub(extraTokensFee);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\ncontract HarvestSCBase is StrategyBase, HarvestBase {\r\n    uint256 public totalToken; //total invested eth\r\n\r\n    //-----------------------------------------------------------------------------------------------------------------//\r\n    //------------------------------------ Events -------------------------------------------------//\r\n    //-----------------------------------------------------------------------------------------------------------------//\r\n    /// @notice Event emitted when rewards are exchanged to ETH or to a specific Token\r\n    event RewardsExchanged(\r\n        address indexed user,\r\n        string exchangeType, //ETH or Token\r\n        uint256 rewardsAmount,\r\n        uint256 obtainedAmount\r\n    );\r\n\r\n    /// @notice Event emitted when user makes a deposit\r\n    event Deposit(\r\n        address indexed user,\r\n        address indexed origin,\r\n        uint256 amountToken,\r\n        uint256 amountfToken\r\n    );\r\n\r\n    /// @notice Event emitted when user withdraws\r\n    event Withdraw(\r\n        address indexed user,\r\n        address indexed origin,\r\n        uint256 amountToken,\r\n        uint256 amountfToken,\r\n        uint256 treasuryAmountEth\r\n    );\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/*\r\n  |Strategy Flow| \r\n      - User shows up with Token and we deposit it in Havest's Vault. \r\n      - After this we have fToken that we add in Harvest's Reward Pool which gives FARM as rewards\r\n\r\n    - Withdrawal flow does same thing, but backwards\r\n        - User can obtain extra Token when withdrawing. 50% of them goes to the user, 50% goes to the treasury in ETH\r\n        - User can obtain FARM tokens when withdrawing. 50% of them goes to the user in Token, 50% goes to the treasury in ETH \r\n*/\r\ncontract HarvestSC is HarvestSCBase, ReentrancyGuard {\r\n    /**\r\n     * @notice Create a new HarvestDAI contract\r\n     * @param _harvestRewardVault VaultDAI  address\r\n     * @param _harvestRewardPool NoMintRewardPool address\r\n     * @param _sushiswapRouter Sushiswap Router address\r\n     * @param _harvestfToken Pool's underlying token address\r\n     * @param _farmToken Farm address\r\n     * @param _token Token address\r\n     * @param _weth WETH address\r\n     * @param _treasuryAddress treasury address\r\n     * @param _feeAddress fee address\r\n     */\r\n    constructor(\r\n        address _harvestRewardVault,\r\n        address _harvestRewardPool,\r\n        address _sushiswapRouter,\r\n        address _harvestfToken,\r\n        address _farmToken,\r\n        address _token,\r\n        address _weth,\r\n        address payable _treasuryAddress,\r\n        address payable _feeAddress\r\n    ) public {\r\n        require(_harvestRewardVault != address(0), \"VAULT_0x0\");\r\n        require(_harvestRewardPool != address(0), \"POOL_0x0\");\r\n        require(_sushiswapRouter != address(0), \"ROUTER_0x0\");\r\n        require(_harvestfToken != address(0), \"fTOKEN_0x0\");\r\n        require(_farmToken != address(0), \"FARM_0x0\");\r\n        require(_token != address(0), \"TOKEN_0x0\");\r\n        require(_weth != address(0), \"WETH_0x0\");\r\n        require(_treasuryAddress != address(0), \"TREASURY_0x0\");\r\n        require(_feeAddress != address(0), \"FEE_0x0\");\r\n\r\n        harvestRewardVault = IHarvestVault(_harvestRewardVault);\r\n        harvestRewardPool = IMintNoRewardPool(_harvestRewardPool);\r\n        sushiswapRouter = IUniswapRouter(_sushiswapRouter);\r\n        harvestfToken = _harvestfToken;\r\n        farmToken = _farmToken;\r\n        token = _token;\r\n        weth = _weth;\r\n        treasuryAddress = _treasuryAddress;\r\n        receiptToken = new ReceiptToken(token, address(this));\r\n        feeAddress = _feeAddress;\r\n\r\n        cap = 5000000 * (10 ** 18);\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit to this strategy for rewards\r\n     * @param tokenAmount Amount of Token investment\r\n     * @param deadline Number of blocks until transaction expires\r\n     * @return Amount of fToken\r\n     */\r\n    function deposit(\r\n        uint256 tokenAmount,\r\n        uint256 deadline,\r\n        uint256 slippage\r\n    ) public nonReentrant returns (uint256) {\r\n        // -----\r\n        // validate\r\n        // -----\r\n        _validateDeposit(deadline, tokenAmount, totalToken, slippage);\r\n\r\n        _updateRewards(msg.sender);\r\n\r\n        IERC20(token).safeTransferFrom(msg.sender, address(this), tokenAmount);\r\n\r\n        DepositData memory results;\r\n        UserInfo storage user = userInfo[msg.sender];\r\n\r\n        if (user.amountfToken == 0) {\r\n            user.wasUserBlacklisted = blacklisted[msg.sender];\r\n        }\r\n        if (user.timestamp == 0) {\r\n            user.timestamp = block.timestamp;\r\n        }\r\n\r\n        totalToken = totalToken.add(tokenAmount);\r\n        user.amountToken = user.amountToken.add(tokenAmount);\r\n        results.obtainedToken = tokenAmount;\r\n\r\n        // -----\r\n        // deposit Token into harvest and get fToken\r\n        // -----\r\n        results.obtainedfToken = _depositTokenToHarvestVault(\r\n            results.obtainedToken\r\n        );\r\n\r\n        // -----\r\n        // stake fToken into the NoMintRewardPool\r\n        // -----\r\n        _stakefTokenToHarvestPool(results.obtainedfToken);\r\n        user.amountfToken = user.amountfToken.add(results.obtainedfToken);\r\n\r\n        // -----\r\n        // mint parachain tokens if user is not blacklisted\r\n        // -----\r\n        if (!user.wasUserBlacklisted) {\r\n            user.amountReceiptToken = user.amountReceiptToken.add(\r\n                results.obtainedfToken\r\n            );\r\n            _mintParachainAuctionTokens(results.obtainedfToken);\r\n        }\r\n\r\n        emit Deposit(\r\n            msg.sender,\r\n            tx.origin,\r\n            results.obtainedToken,\r\n            results.obtainedfToken\r\n        );\r\n\r\n\r\n        totalDeposits = totalDeposits.add(results.obtainedfToken);\r\n\r\n        user.underlyingRatio = _getRatio(\r\n            user.amountfToken,\r\n            user.amountToken,\r\n            18\r\n        );\r\n\r\n        return results.obtainedfToken;\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw tokens and claim rewards\r\n     * @param deadline Number of blocks until transaction expires\r\n     * @return Amount of ETH obtained\r\n     */\r\n    function withdraw(\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        uint256 slippage,\r\n        uint256 ethPerToken,\r\n        uint256 ethPerFarm,\r\n        uint256 tokensPerEth //no of tokens per 1 eth\r\n    ) public nonReentrant returns (uint256) {\r\n        // -----\r\n        // validation\r\n        // -----\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        uint256 receiptBalance = receiptToken.balanceOf(msg.sender);\r\n\r\n        _validateWithdraw(\r\n            deadline,\r\n            amount,\r\n            user.amountfToken,\r\n            receiptBalance,\r\n            user.amountReceiptToken,\r\n            user.wasUserBlacklisted,\r\n            user.timestamp,\r\n            slippage\r\n        );\r\n\r\n        _updateRewards(msg.sender);\r\n\r\n        WithdrawData memory results;\r\n        results.initialAmountfToken = user.amountfToken;\r\n        results.prevDustEthBalance = address(this).balance;\r\n\r\n        // -----\r\n        // withdraw from HarvestRewardPool (get fToken back)\r\n        // -----\r\n        results.obtainedfToken = _unstakefTokenFromHarvestPool(amount);\r\n\r\n        // -----\r\n        // get rewards\r\n        // -----\r\n        harvestRewardPool.getReward(); //transfers FARM to this contract\r\n\r\n        // -----\r\n        // calculate rewards and do the accounting for fTokens\r\n        // -----\r\n        uint256 transferableRewards =\r\n            _calculateRewards(msg.sender, amount, results.initialAmountfToken);\r\n\r\n        (\r\n        user.amountfToken,\r\n        user.amountReceiptToken,\r\n        results.burnAmount\r\n        ) = _calculatefTokenRemainings(\r\n            results.obtainedfToken,\r\n            results.initialAmountfToken,\r\n            user.wasUserBlacklisted,\r\n            user.amountReceiptToken\r\n        );\r\n        _burnParachainAuctionTokens(results.burnAmount);\r\n\r\n        // -----\r\n        // withdraw from HarvestRewardVault (return fToken and get Token back)\r\n        // -----\r\n        results.obtainedToken = _withdrawTokenFromHarvestVault(\r\n            results.obtainedfToken\r\n        );\r\n        emit ObtainedInfo(\r\n            msg.sender,\r\n            results.obtainedToken,\r\n            results.obtainedfToken\r\n        );\r\n        totalDeposits = totalDeposits.sub(results.obtainedfToken);\r\n\r\n        // -----\r\n        // calculate feeable tokens (extra Token obtained by returning fToken)\r\n        //              - feeableToken/2 (goes to the treasury in ETH)\r\n        //              - results.totalToken = obtainedToken + 1/2*feeableToken (goes to the user)\r\n        // -----\r\n        results.auctionedToken = 0;\r\n        (results.feeableToken, results.earnedTokens) = _calculateFeeableTokens(\r\n            amount,\r\n            results.initialAmountfToken,\r\n            results.obtainedToken,\r\n            user.amountToken,\r\n            results.obtainedfToken,\r\n            user.underlyingRatio\r\n        );\r\n        user.earnedTokens = user.earnedTokens.add(results.earnedTokens);\r\n        if (results.obtainedToken <= user.amountToken) {\r\n            user.amountToken = user.amountToken.sub(results.obtainedToken);\r\n        } else {\r\n            user.amountToken = 0;\r\n        }\r\n        results.obtainedToken = results.obtainedToken.sub(results.feeableToken);\r\n\r\n        if (results.feeableToken > 0) {\r\n            results.auctionedToken = results.feeableToken.div(2);\r\n            results.feeableToken = results.feeableToken.sub(\r\n                results.auctionedToken\r\n            );\r\n        }\r\n        results.totalToken = results.obtainedToken.add(results.feeableToken);\r\n\r\n        // -----\r\n        // swap auctioned Token to ETH\r\n        // -----\r\n        address[] memory swapPath = new address[](2);\r\n        swapPath[0] = token;\r\n        swapPath[1] = weth;\r\n\r\n        if (results.auctionedToken > 0) {\r\n            uint256 swapAuctionedTokenResult =\r\n            _swapTokenToEth(\r\n                swapPath,\r\n                results.auctionedToken,\r\n                deadline,\r\n                slippage,\r\n                ethPerToken\r\n            );\r\n            results.auctionedEth.add(swapAuctionedTokenResult);\r\n\r\n            emit ExtraTokensExchanged(\r\n                msg.sender,\r\n                results.auctionedToken,\r\n                swapAuctionedTokenResult\r\n            );\r\n        }\r\n\r\n        // -----\r\n        // check & swap FARM rewards with ETH (50% for treasury) and with Token by going through ETH first (the other 50% for user)\r\n        // -----\r\n\r\n        if (transferableRewards > 0) {\r\n            emit RewardsEarned(msg.sender, transferableRewards);\r\n            user.earnedRewards = user.earnedRewards.add(transferableRewards);\r\n\r\n            swapPath[0] = farmToken;\r\n\r\n            results.rewardsInEth = _swapTokenToEth(\r\n                swapPath,\r\n                transferableRewards,\r\n                deadline,\r\n                slippage,\r\n                ethPerFarm\r\n            );\r\n            results.auctionedRewardsInEth = results.rewardsInEth.div(2);\r\n            //50% goes to treasury in ETH\r\n            results.userRewardsInEth = results.rewardsInEth.sub(\r\n                results.auctionedRewardsInEth\r\n            );\r\n            //50% goes to user in Token (swapped below)\r\n\r\n            results.auctionedEth = results.auctionedEth.add(\r\n                results.auctionedRewardsInEth\r\n            );\r\n            emit RewardsExchanged(\r\n                msg.sender,\r\n                \"ETH\",\r\n                transferableRewards,\r\n                results.rewardsInEth\r\n            );\r\n        }\r\n        if (results.userRewardsInEth > 0) {\r\n            swapPath[0] = weth;\r\n            swapPath[1] = token;\r\n\r\n            uint256 userRewardsEthToTokenResult =\r\n            _swapEthToToken(\r\n                swapPath,\r\n                results.userRewardsInEth,\r\n                deadline,\r\n                slippage,\r\n                tokensPerEth\r\n            );\r\n            results.totalToken = results.totalToken.add(\r\n                userRewardsEthToTokenResult\r\n            );\r\n\r\n            emit RewardsExchanged(\r\n                msg.sender,\r\n                \"Token\",\r\n                transferableRewards.div(2),\r\n                userRewardsEthToTokenResult\r\n            );\r\n        }\r\n        user.rewards = user.rewards.sub(transferableRewards);\r\n\r\n        // -----\r\n        // final accounting\r\n        // -----\r\n        if (results.totalToken < totalToken) {\r\n            totalToken = totalToken.sub(results.totalToken);\r\n        } else {\r\n            totalToken = 0;\r\n        }\r\n\r\n        if (user.amountfToken == 0) {\r\n            user.amountToken = 0; //1e-18 dust\r\n        }\r\n        user.underlyingRatio = _getRatio(\r\n            user.amountfToken,\r\n            user.amountToken,\r\n            18\r\n        );\r\n\r\n        // -----\r\n        // transfer Token to user, ETH to fee address and ETH to the treasury address\r\n        // -----\r\n        if (fee > 0) {\r\n            uint256 feeToken = _calculateFee(results.totalToken);\r\n            results.totalToken = results.totalToken.sub(feeToken);\r\n\r\n            swapPath[0] = token;\r\n            swapPath[1] = weth;\r\n\r\n            uint256 feeTokenInEth =\r\n            _swapTokenToEth(\r\n                swapPath,\r\n                feeToken,\r\n                deadline,\r\n                slippage,\r\n                ethPerToken\r\n            );\r\n\r\n            safeTransferETH(feeAddress, feeTokenInEth);\r\n            user.userCollectedFees = user.userCollectedFees.add(feeTokenInEth);\r\n        }\r\n\r\n        IERC20(token).safeTransfer(msg.sender, results.totalToken);\r\n\r\n        safeTransferETH(treasuryAddress, results.auctionedEth);\r\n        user.userTreasuryEth = user.userTreasuryEth.add(results.auctionedEth);\r\n\r\n        emit Withdraw(\r\n            msg.sender,\r\n            tx.origin,\r\n            results.obtainedToken,\r\n            results.obtainedfToken,\r\n            results.auctionedEth\r\n        );\r\n\r\n        // -----\r\n        // dust check\r\n        // -----\r\n        if (address(this).balance > results.prevDustEthBalance) {\r\n            ethDust = ethDust.add(\r\n                address(this).balance.sub(results.prevDustEthBalance)\r\n            );\r\n        }\r\n\r\n        return results.totalToken;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvestRewardVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_harvestRewardPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sushiswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_harvestfToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farmToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"actionType\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldVal\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newVal\",\"type\":\"bool\"}],\"name\":\"BlacklistChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"addressType\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ChangedAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"valueType\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ChangedValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountfToken\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExtraTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"obtainedEth\",\"type\":\"uint256\"}],\"name\":\"ExtraTokensExchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingReceipt\",\"type\":\"uint256\"}],\"name\":\"ObtainedInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceiptBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceiptMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"dustType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RescuedDust\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsEarned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"exchangeType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"obtainedAmount\",\"type\":\"uint256\"}],\"name\":\"RewardsExchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountfToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryAmountEth\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"log\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethDust\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestRewardPool\",\"outputs\":[{\"internalType\":\"contract IMintNoRewardPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestRewardVault\",\"outputs\":[{\"internalType\":\"contract IHarvestVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestfToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isWithdrawalAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"contract ReceiptToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"rescueAirdroppedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farmToken\",\"type\":\"address\"}],\"name\":\"setFarmToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvestfToken\",\"type\":\"address\"}],\"name\":\"setHarvestPoolToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvestRewardPool\",\"type\":\"address\"}],\"name\":\"setHarvestRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvestRewardVault\",\"type\":\"address\"}],\"name\":\"setHarvestRewardVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockTime\",\"type\":\"uint256\"}],\"name\":\"setLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sushiswapRouter\",\"type\":\"address\"}],\"name\":\"setSushiswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasueryEthDust\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountfToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountReceiptToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userTreasuryEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCollectedFees\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"wasUserBlacklisted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userRewardPerTokenPaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethPerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethPerFarm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensPerEth\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"HarvestSC","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ab7fa2b2985bccfc13c6d86b1d5a17486ab1e04c00000000000000000000000015d3a64b2d5ab9e152f16593cdebc4bb165b5b4a000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f000000000000000000000000ab7fa2b2985bccfc13c6d86b1d5a17486ab1e04c000000000000000000000000a0246c9032bc3a600820415ae600c6388619a14d0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000cd8541b29f6667454f517cfd4372a6e210856757000000000000000000000000cd8541b29f6667454f517cfd4372a6e210856757","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ec4ea57a7be52012e282b35589478da676761ff4a0eb3a995e784121960b8056"}]}