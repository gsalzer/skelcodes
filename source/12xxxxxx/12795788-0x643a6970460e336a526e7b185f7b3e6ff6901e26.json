{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Test.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\ncontract Test {\\n    function test() public pure returns (bool) {\\n        return String.contains(\\\"abcdefg\\\", \\\"cd\\\");\\n    }\\n}\\n\\nlibrary String {\\n    /**\\n     * Convert a string to lowercase\\n     */\\n    function lowercase(string memory input) internal pure returns (string memory) {\\n        bytes memory _input = bytes(input);\\n        for (uint inputIdx = 0; inputIdx < _input.length; inputIdx++) {\\n            uint8 character = uint8(_input[inputIdx]);\\n            if (character >= 65 && character <= 90) {\\n                character += 0x20;\\n                _input[inputIdx] = bytes1(character);\\n            }\\n        }\\n        return string(_input);\\n    }\\n\\n    /**\\n     * Convert a string to uppercase\\n     */\\n    function uppercase(string memory input) internal pure returns (string memory) {\\n        bytes memory _input = bytes(input);\\n        for (uint inputIdx = 0; inputIdx < _input.length; inputIdx++) {\\n            uint8 character = uint8(_input[inputIdx]);\\n            if (character >= 97 && character <= 122) {\\n                character -= 0x20;\\n                _input[inputIdx] = bytes1(character);\\n            }\\n        }\\n        return string(_input);\\n    }\\n\\n    /**\\n     * Search for a needle in a haystack\\n     */\\n    function contains(string memory haystack, string memory needle) internal pure returns (bool) {\\n        return indexOf(needle, haystack) >= 0;\\n    }\\n    \\n    /**\\n     * Convert bytes32 to string and remove padding\\n     */\\n    function bytes32ToString(bytes32 _bytes32) public pure returns (string memory) {\\n        uint8 i = 0;\\n        while(i < 32 && _bytes32[i] != 0) {\\n            i++;\\n        }\\n        bytes memory bytesArray = new bytes(i);\\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\\n            bytesArray[i] = _bytes32[i];\\n        }\\n        return string(bytesArray);\\n    }\\n\\n    /**\\n     * Case insensitive string search\\n     *\\n     * @param needle The string to search for\\n     * @param haystack The string to search in\\n     * @return Returns -1 if no match is found, otherwise returns the index of the match \\n     */\\n    function indexOf(string memory needle, string memory haystack) internal pure returns (int256) {\\n        bytes memory _needle = bytes(lowercase(needle));\\n        bytes memory _haystack = bytes(lowercase(haystack));\\n        if (_haystack.length < _needle.length) {\\n            return -1;\\n        }\\n        bool _match;\\n        for (uint256 haystackIdx; haystackIdx < _haystack.length; haystackIdx++) {\\n            for (uint256 needleIdx; needleIdx < _needle.length; needleIdx++) {\\n                uint8 needleChar = uint8(_needle[needleIdx]);\\n                uint8 haystackChar = uint8(_haystack[haystackIdx + needleIdx]);\\n                if (needleChar == haystackChar) {\\n                    _match = true;\\n                    if (needleIdx == _needle.length - 1) {\\n                        return int(haystackIdx);\\n                    }\\n                } else {\\n                    _match = false;\\n                    break;\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"test\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"Test","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}