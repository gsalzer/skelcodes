{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TradeAccounting.sol\": {\r\n      \"content\": \"pragma solidity 0.5.15;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol\\\";\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport \\\"synthetix/contracts/interfaces/ISynthetix.sol\\\";\\nimport \\\"synthetix/contracts/interfaces/IRewardEscrowV2.sol\\\";\\nimport \\\"synthetix/contracts/interfaces/IExchangeRates.sol\\\";\\nimport \\\"synthetix/contracts/interfaces/ISynthetixState.sol\\\";\\nimport \\\"synthetix/contracts/interfaces/IAddressResolver.sol\\\";\\n\\nimport \\\"./interface/ISystemSettings.sol\\\";\\n\\nimport \\\"./interface/ICurveFi.sol\\\";\\nimport \\\"./interface/ISetToken.sol\\\";\\nimport \\\"./interface/IKyberNetworkProxy.sol\\\";\\nimport \\\"./interface/ISetAssetBaseCollateral.sol\\\";\\n\\n/* \\n\\txSNX Target Allocation (assuming 800% C-RATIO)\\n\\t----------------------\\n\\tAllocation         |  NAV   | % NAV\\n\\t--------------------------------------\\n\\t800 SNX @ $1/token | $800   | 100%\\n\\t100 sUSD Debt\\t   | ($100)\\t| (12.5%)\\n\\t75 USD equiv Set   | $75    | 9.375%\\n\\t25 USD equiv ETH   | $25    | 3.125%\\n\\t--------------------------------------\\n\\tTotal                $800   | 100%   \\n */\\n\\n/* \\n\\tConditions for `isRebalanceTowardsHedgeRequired` to return true\\n\\tAssuming 5% rebalance threshold\\n\\n\\tAllocation         |  NAV   | % NAV\\n\\t--------------------------------------\\n\\t800 SNX @ $1/token | $800   | 100.63%\\n\\t105 sUSD Debt\\t   | ($105)\\t| (13.21%)\\n\\t75 USD equiv Set   | $75    | 9.43%\\n\\t25 USD equiv ETH   | $25    | 3.14%\\n\\t--------------------------------------\\n\\tTotal                $795   | 100%   \\n\\n\\tDebt value\\t\\t   | $105\\n\\tHedge Assets\\t   | $100\\n\\t-------------------------\\n\\tDebt/hedge ratio   | 105%\\n  */\\n\\n/* \\n\\tConditions for `isRebalanceTowardsSnxRequired` to return true\\n\\tAssuming 5% rebalance threshold\\n\\n\\tAllocation         |  NAV   | % NAV\\n\\t--------------------------------------\\n\\t800 SNX @ $1/token | $800   | 99.37%\\n\\t100 sUSD Debt\\t   | ($100)\\t| (12.42%)\\n\\t75 USD equiv Set   | $75    | 9.31%\\n\\t30 USD equiv ETH   | $30    | 3.72%\\n\\t--------------------------------------\\n\\tTotal                $805   | 100%   \\n\\n\\tHedge Assets\\t   | $105\\n\\tDebt value\\t\\t   | $100\\n\\t-------------------------\\n\\tHedge/debt ratio   | 105%\\n  */\\n\\ncontract TradeAccounting is Ownable {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant TEN = 10;\\n    uint256 private constant DEC_18 = 1e18;\\n    uint256 private constant PERCENT = 100;\\n    uint256 private constant ETH_TARGET = 4; // targets 1/4th of hedge portfolio\\n    uint256 private constant SLIPPAGE_RATE = 99;\\n    uint256 private constant MAX_UINT = 2**256 - 1;\\n    uint256 private constant RATE_STALE_TIME = 28800; // 8 hours\\n    uint256 private constant REBALANCE_THRESHOLD = 105; // 5%\\n    uint256 private constant INITIAL_SUPPLY_MULTIPLIER = 10;\\n\\n    int128 usdcIndex;\\n    int128 susdIndex;\\n\\n    ICurveFi private curveFi;\\n    ISynthetixState private synthetixState;\\n    IAddressResolver private addressResolver;\\n    IKyberNetworkProxy private kyberNetworkProxy;\\n\\n    address private xSNXAdminInstance;\\n    address private addressValidator;\\n\\n    address private setAddress;\\n    address private susdAddress;\\n    address private usdcAddress;\\n\\n    address private nextCurveAddress;\\n\\n    bytes32 constant snx = \\\"SNX\\\";\\n    bytes32 constant susd = \\\"sUSD\\\";\\n    bytes32 constant seth = \\\"sETH\\\";\\n\\n    bytes32[2] synthSymbols;\\n\\n    address[2] setComponentAddresses;\\n\\n    bytes32 constant rewardEscrowName = \\\"RewardEscrow\\\";\\n    bytes32 constant exchangeRatesName = \\\"ExchangeRates\\\";\\n    bytes32 constant synthetixName = \\\"Synthetix\\\";\\n    bytes32 constant systemSettingsName = \\\"SystemSettings\\\";\\n    bytes32 constant rewardEscrowV2Name = \\\"RewardEscrowV2\\\";\\n\\n    uint256 private constant RATE_STALE_TIME_NEW = 86400; // 24 hours\\n\\n    function initialize(\\n        address _setAddress,\\n        address _kyberProxyAddress,\\n        address _addressResolver,\\n        address _susdAddress,\\n        address _usdcAddress,\\n        address _addressValidator,\\n        bytes32[2] memory _synthSymbols,\\n        address[2] memory _setComponentAddresses,\\n        address _ownerAddress\\n    ) public initializer {\\n        Ownable.initialize(_ownerAddress);\\n\\n        setAddress = _setAddress;\\n        kyberNetworkProxy = IKyberNetworkProxy(_kyberProxyAddress);\\n        addressResolver = IAddressResolver(_addressResolver);\\n        susdAddress = _susdAddress;\\n        usdcAddress = _usdcAddress;\\n        addressValidator = _addressValidator;\\n        synthSymbols = _synthSymbols;\\n        setComponentAddresses = _setComponentAddresses;\\n    }\\n\\n    modifier onlyXSNXAdmin {\\n        require(\\n            msg.sender == xSNXAdminInstance,\\n            \\\"Only xSNXAdmin contract can call\\\"\\n        );\\n        _;\\n    }\\n\\n    /* ========================================================================================= */\\n    /*                                         Kyber/Curve                                       */\\n    /* ========================================================================================= */\\n\\n    /*\\n     * @dev Function that processes all token to token exchanges,\\n     * sometimes via Kyber and sometimes via a combination of Kyber & Curve\\n     * @dev Only callable by xSNXAdmin contract\\n     */\\n    function swapTokenToToken(\\n        address fromToken,\\n        uint256 amount,\\n        address toToken,\\n        uint256 minKyberRate,\\n        uint256 minCurveReturn\\n    ) public onlyXSNXAdmin {\\n        if (fromToken == susdAddress) {\\n            _exchangeUnderlying(susdIndex, usdcIndex, amount, minCurveReturn);\\n\\n            if (toToken != usdcAddress) {\\n                uint256 usdcBal = getUsdcBalance();\\n                _swapTokenToToken(usdcAddress, usdcBal, toToken, minKyberRate);\\n            }\\n        } else if (toToken == susdAddress) {\\n            if (fromToken != usdcAddress) {\\n                _swapTokenToToken(fromToken, amount, usdcAddress, minKyberRate);\\n            }\\n\\n            uint256 usdcBal = getUsdcBalance();\\n            _exchangeUnderlying(usdcIndex, susdIndex, usdcBal, minCurveReturn);\\n        } else {\\n            _swapTokenToToken(fromToken, amount, toToken, minKyberRate);\\n        }\\n\\n        IERC20(toToken).transfer(\\n            xSNXAdminInstance,\\n            IERC20(toToken).balanceOf(address(this))\\n        );\\n    }\\n\\n    function _swapTokenToToken(\\n        address _fromToken,\\n        uint256 _amount,\\n        address _toToken,\\n        uint256 _minKyberRate\\n    ) private {\\n        kyberNetworkProxy.swapTokenToToken(\\n            ERC20(_fromToken),\\n            _amount,\\n            ERC20(_toToken),\\n            _minKyberRate\\n        );\\n    }\\n\\n    /*\\n     * @dev Function that processes all token to ETH exchanges,\\n     * sometimes via Kyber and sometimes via a combination of Kyber & Curve\\n     * @dev Only callable by xSNXAdmin contract\\n     */\\n    function swapTokenToEther(\\n        address fromToken,\\n        uint256 amount,\\n        uint256 minKyberRate,\\n        uint256 minCurveReturn\\n    ) public onlyXSNXAdmin {\\n        if (fromToken == susdAddress) {\\n            _exchangeUnderlying(susdIndex, usdcIndex, amount, minCurveReturn);\\n\\n            uint256 usdcBal = getUsdcBalance();\\n            _swapTokenToEther(usdcAddress, usdcBal, minKyberRate);\\n        } else {\\n            _swapTokenToEther(fromToken, amount, minKyberRate);\\n        }\\n\\n        uint256 ethBal = address(this).balance;\\n        (bool success, ) = msg.sender.call.value(ethBal)(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n\\n    function _swapTokenToEther(\\n        address _fromToken,\\n        uint256 _amount,\\n        uint256 _minKyberRate\\n    ) private {\\n        kyberNetworkProxy.swapTokenToEther(\\n            ERC20(_fromToken),\\n            _amount,\\n            _minKyberRate\\n        );\\n    }\\n\\n    /*\\n     * @dev Function that processes all ETH to token exchanges\\n     * @dev Processed using kyber\\n     * @dev Only callable by xSNXAdmin contract\\n     */\\n    function swapEtherToToken(\\n        address toToken,\\n        uint256 amount,\\n        uint256 minKyberRate\\n    ) public onlyXSNXAdmin {\\n        _swapEtherToToken(toToken, amount, minKyberRate);\\n        IERC20(toToken).transfer(\\n            xSNXAdminInstance,\\n            IERC20(toToken).balanceOf(address(this))\\n        );\\n    }\\n\\n    function _swapEtherToToken(\\n        address _toToken,\\n        uint256 _amount,\\n        uint256 _minKyberRate\\n    ) private {\\n        kyberNetworkProxy.swapEtherToToken.value(_amount)(\\n            ERC20(_toToken),\\n            _minKyberRate\\n        );\\n    }\\n\\n    function _exchangeUnderlying(\\n        int128 _inputIndex,\\n        int128 _outputIndex,\\n        uint256 _amount,\\n        uint256 _minReturn\\n    ) private {\\n        curveFi.exchange_underlying(\\n            _inputIndex,\\n            _outputIndex,\\n            _amount,\\n            _minReturn\\n        );\\n    }\\n\\n    function getUsdcBalance() internal view returns (uint256) {\\n        return IERC20(usdcAddress).balanceOf(address(this));\\n    }\\n\\n    /* ========================================================================================= */\\n    /*                                          NAV                                              */\\n    /* ========================================================================================= */\\n\\n    function getEthBalance() public view returns (uint256) {\\n        return address(xSNXAdminInstance).balance;\\n    }\\n\\n    /*\\n     * @dev Helper function for `xSNX.burn` that outputs NAV\\n     * redemption value in ETH terms\\n     * @param totalSupply: xSNX.totalSupply()\\n     * @param tokensToRedeem: xSNX to burn\\n     */\\n    function calculateRedemptionValue(\\n        uint256 totalSupply,\\n        uint256 tokensToRedeem\\n    ) public view returns (uint256 valueToRedeem) {\\n        uint256 snxBalanceOwned = getSnxBalanceOwned();\\n        uint256 contractDebtValue = getContractDebtValue();\\n\\n        uint256 pricePerToken = calculateRedeemTokenPrice(\\n            totalSupply,\\n            snxBalanceOwned,\\n            contractDebtValue\\n        );\\n\\n        valueToRedeem = pricePerToken.mul(tokensToRedeem).div(DEC_18);\\n    }\\n\\n    /*\\n     * @dev Helper function for `xSNX.mint` that\\n     * 1) determines whether ETH contribution should be maintained in ETH or exchanged for SNX and\\n     * 2) outputs the `nonSnxAssetValue` value to be used in NAV calculation\\n     * @param totalSupply: xSNX.totalSupply()\\n     */\\n    function getMintWithEthUtils(uint256 totalSupply)\\n        public\\n        view\\n        returns (bool allocateToEth, uint256 nonSnxAssetValue)\\n    {\\n        uint256 setHoldingsInWei = getSetHoldingsValueInWei();\\n\\n        // called before eth transferred from xSNX to xSNXAdmin\\n        uint256 ethBalBefore = getEthBalance();\\n        \\n        allocateToEth = shouldAllocateEthToEthReserve(\\n            setHoldingsInWei,\\n            ethBalBefore,\\n            totalSupply\\n        );\\n        nonSnxAssetValue = setHoldingsInWei.add(ethBalBefore);\\n    }\\n\\n    /*\\n     * @notice xSNX system targets 25% of hedge portfolio to be maintained in ETH\\n     * @dev Function produces binary yes allocate/no allocate decision point\\n     * determining whether ETH sent on xSNX.mint() is held or exchanged\\n     * @param setHoldingsInWei: value of Set portfolio in ETH terms\\n     * @param ethBalBefore: value of ETH reserve prior to tx\\n     * @param totalSupply: xSNX.totalSupply()\\n     */\\n    function shouldAllocateEthToEthReserve(\\n        uint256 setHoldingsInWei,\\n        uint256 ethBalBefore,\\n        uint256 totalSupply\\n    ) public pure returns (bool allocateToEth) {\\n        if (totalSupply == 0) return false;\\n\\n        if (ethBalBefore.mul(ETH_TARGET) < ethBalBefore.add(setHoldingsInWei)) {\\n            // ETH reserve is under target\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /*\\n     * @dev Helper function for calculateIssueTokenPrice\\n     * @dev Called indirectly by `xSNX.mint` and `xSNX.mintWithSnx`\\n     * @dev Calculates NAV of the fund, including value of escrowed SNX, in ETH terms\\n     * @param weiPerOneSnx: SNX price in ETH terms\\n     * @param snxBalanceBefore: SNX balance pre-mint\\n     * @param nonSnxAssetValue: NAV of non-SNX slice of fund\\n     */\\n    function calculateNetAssetValueOnMint(\\n        uint256 weiPerOneSnx,\\n        uint256 snxBalanceBefore,\\n        uint256 nonSnxAssetValue\\n    ) internal view returns (uint256) {\\n        uint256 snxTokenValueInWei = snxBalanceBefore.mul(weiPerOneSnx).div(\\n            DEC_18\\n        );\\n        uint256 contractDebtValue = getContractDebtValue();\\n        uint256 contractDebtValueInWei = calculateDebtValueInWei(\\n            contractDebtValue\\n        );\\n        return\\n            snxTokenValueInWei.add(nonSnxAssetValue).sub(\\n                contractDebtValueInWei\\n            );\\n    }\\n\\n    /*\\n     * @dev Helper function for calculateRedeemTokenPrice\\n     * @dev Called indirectly by `xSNX.burn`\\n     * @dev Calculates NAV of the fund, excluding value of escrowed SNX, in ETH terms\\n     * @param weiPerOneSnx: SNX price in ETH terms\\n     * @param snxBalanceOwned: non-escrowed SNX balance\\n     * @param contractDebtValueInWei: sUSD debt balance of fund in ETH terms\\n     */\\n    function calculateNetAssetValueOnRedeem(\\n        uint256 weiPerOneSnx,\\n        uint256 snxBalanceOwned,\\n        uint256 contractDebtValueInWei\\n    ) internal view returns (uint256) {\\n        uint256 snxTokenValueInWei = snxBalanceOwned.mul(weiPerOneSnx).div(\\n            DEC_18\\n        );\\n        uint256 nonSnxAssetValue = calculateNonSnxAssetValue();\\n        return\\n            snxTokenValueInWei.add(nonSnxAssetValue).sub(\\n                contractDebtValueInWei\\n            );\\n    }\\n\\n    /*\\n     * @dev NAV value of non-SNX assets, computed in ETH terms\\n     */\\n    function calculateNonSnxAssetValue() internal view returns (uint256) {\\n        return getSetHoldingsValueInWei().add(getEthBalance());\\n    }\\n\\n    /*\\n     * @dev SNX price in ETH terms, calculated for purposes of redemption NAV\\n     * @notice Return value discounted slightly to better represent liquidation price\\n     */\\n    function getWeiPerOneSnxOnRedeem()\\n        internal\\n        view\\n        returns (uint256 weiPerOneSnx)\\n    {\\n        uint256 snxUsdPrice = getSnxPrice();\\n        uint256 ethUsdPrice = getSynthPrice(seth);\\n        weiPerOneSnx = snxUsdPrice\\n            .mul(DEC_18)\\n            .div(ethUsdPrice)\\n            .mul(SLIPPAGE_RATE) // used to better represent liquidation price as volume scales\\n            .div(PERCENT);\\n    }\\n\\n    /*\\n     * @dev Returns Synthetix synth symbol for asset currently held in TokenSet (e.g., sETH for WETH)\\n     * @notice xSNX contract complex only compatible with Sets that hold a single asset at a time\\n     */\\n    function getActiveAssetSynthSymbol()\\n        internal\\n        view\\n        returns (bytes32 synthSymbol)\\n    {\\n        synthSymbol = getAssetCurrentlyActiveInSet() == setComponentAddresses[0]\\n            ? (synthSymbols[0])\\n            : (synthSymbols[1]);\\n    }\\n\\n    /*\\n     * @dev Returns SNX price in ETH terms, calculated for purposes of issuance NAV (when allocateToEth)\\n     */\\n    function getWeiPerOneSnxOnMint() internal view returns (uint256) {\\n        uint256 snxUsd = getSynthPrice(snx);\\n        uint256 ethUsd = getSynthPrice(seth);\\n        return snxUsd.mul(DEC_18).div(ethUsd);\\n    }\\n\\n    /*\\n     * @dev Single use function to define initial xSNX issuance\\n     */\\n    function getInitialSupply() internal view returns (uint256) {\\n        return\\n            IERC20(addressResolver.getAddress(synthetixName))\\n                .balanceOf(xSNXAdminInstance)\\n                .mul(INITIAL_SUPPLY_MULTIPLIER);\\n    }\\n\\n    /*\\n     * @dev Helper function for `xSNX.mint` that calculates token issuance\\n     * @param snxBalanceBefore: SNX balance pre-mint\\n     * @param ethContributed: ETH payable on mint, less fees\\n     * @param nonSnxAssetValue: NAV of non-SNX slice of fund\\n     * @param totalSupply: xSNX.totalSupply()\\n     */\\n    function calculateTokensToMintWithEth(\\n        uint256 snxBalanceBefore,\\n        uint256 ethContributed,\\n        uint256 nonSnxAssetValue,\\n        uint256 totalSupply\\n    ) public view returns (uint256) {\\n        if (totalSupply == 0) {\\n            return getInitialSupply();\\n        }\\n\\n        uint256 pricePerToken = calculateIssueTokenPrice(\\n            getWeiPerOneSnxOnMint(),\\n            snxBalanceBefore,\\n            nonSnxAssetValue,\\n            totalSupply\\n        );\\n\\n        return ethContributed.mul(DEC_18).div(pricePerToken);\\n    }\\n\\n    /*\\n     * @dev Helper function for `xSNX.mintWithSnx` that calculates token issuance\\n     * @param snxBalanceBefore: SNX balance pre-mint\\n     * @param snxAddedToBalance: SNX contributed by mint\\n     * @param totalSupply: xSNX.totalSupply()\\n     */\\n    function calculateTokensToMintWithSnx(\\n        uint256 snxBalanceBefore,\\n        uint256 snxAddedToBalance,\\n        uint256 totalSupply\\n    ) public view returns (uint256) {\\n        if (totalSupply == 0) {\\n            return getInitialSupply();\\n        }\\n\\n        uint256 weiPerOneSnx = getWeiPerOneSnxOnMint();\\n        // need to derive snx contribution in eth terms for NAV calc\\n        uint256 proxyEthContribution = weiPerOneSnx.mul(snxAddedToBalance).div(\\n            DEC_18\\n        );\\n        uint256 nonSnxAssetValue = calculateNonSnxAssetValue();\\n        uint256 pricePerToken = calculateIssueTokenPrice(\\n            weiPerOneSnx,\\n            snxBalanceBefore,\\n            nonSnxAssetValue,\\n            totalSupply\\n        );\\n        return proxyEthContribution.mul(DEC_18).div(pricePerToken);\\n    }\\n\\n    /*\\n     * @dev Called indirectly by `xSNX.mint` and `xSNX.mintWithSnx`\\n     * @dev Calculates token price on issuance, including value of escrowed SNX\\n     * @param weiPerOneSnx: SNX price in ETH terms\\n     * @param snxBalanceBefore: SNX balance pre-mint\\n     * @param nonSnxAssetValue: Non-SNX slice of fund\\n     * @param totalSupply: xSNX.totalSupply()\\n     */\\n    function calculateIssueTokenPrice(\\n        uint256 weiPerOneSnx,\\n        uint256 snxBalanceBefore,\\n        uint256 nonSnxAssetValue,\\n        uint256 totalSupply\\n    ) public view returns (uint256 pricePerToken) {\\n        pricePerToken = calculateNetAssetValueOnMint(\\n            weiPerOneSnx,\\n            snxBalanceBefore,\\n            nonSnxAssetValue\\n        )\\n            .mul(DEC_18)\\n            .div(totalSupply);\\n    }\\n\\n    /*\\n     * @dev Called indirectly by `xSNX.burn`\\n     * @dev Calculates token price on redemption, excluding value of escrowed SNX\\n     * @param totalSupply: xSNX.totalSupply()\\n     * @param snxBalanceOwned: non-escrowed SNX balance\\n     * @param contractDebtValue: sUSD debt in USD terms\\n     */\\n    function calculateRedeemTokenPrice(\\n        uint256 totalSupply,\\n        uint256 snxBalanceOwned,\\n        uint256 contractDebtValue\\n    ) public view returns (uint256 pricePerToken) {\\n        // SNX won't actually be sold (burns are only distributed in available ETH) but\\n        // this is a proxy for the return value of SNX that would be sold\\n        uint256 weiPerOneSnx = getWeiPerOneSnxOnRedeem();\\n\\n        uint256 debtValueInWei = calculateDebtValueInWei(contractDebtValue);\\n        pricePerToken = calculateNetAssetValueOnRedeem(\\n            weiPerOneSnx,\\n            snxBalanceOwned,\\n            debtValueInWei\\n        )\\n            .mul(DEC_18)\\n            .div(totalSupply);\\n    }\\n\\n    /* ========================================================================================= */\\n    /*                                          Set                                              */\\n    /* ========================================================================================= */\\n\\n    /*\\n     * @dev Balance of underlying asset \\\"active\\\" in Set (e.g., WETH or USDC)\\n     */\\n    function getActiveSetAssetBalance() public view returns (uint256) {\\n        return\\n            IERC20(getAssetCurrentlyActiveInSet()).balanceOf(xSNXAdminInstance);\\n    }\\n\\n    /*\\n     * @dev Calculates quantity of Set Token equivalent to quantity of underlying asset token\\n     * @notice rebalancingSetQuantity return value is reduced slightly to ensure successful execution\\n     * @param componentQuantity: balance of underlying Set asset, e.g., WETH\\n     */\\n    function calculateSetQuantity(uint256 componentQuantity)\\n        public\\n        view\\n        returns (uint256 rebalancingSetQuantity)\\n    {\\n        uint256 baseSetNaturalUnit = getBaseSetNaturalUnit();\\n        uint256 baseSetComponentUnits = getBaseSetComponentUnits();\\n        uint256 baseSetIssuable = componentQuantity.mul(baseSetNaturalUnit).div(\\n            baseSetComponentUnits\\n        );\\n\\n        uint256 rebalancingSetNaturalUnit = getSetNaturalUnit();\\n        uint256 unitShares = getSetUnitShares();\\n        rebalancingSetQuantity = baseSetIssuable\\n            .mul(rebalancingSetNaturalUnit)\\n            .div(unitShares)\\n            .mul(99) // ensure sufficient balance in underlying asset\\n            .div(100)\\n            .div(rebalancingSetNaturalUnit)\\n            .mul(rebalancingSetNaturalUnit);\\n    }\\n\\n    /*\\n     * @dev Calculates mintable quantity of Set Token given asset holdings\\n     */\\n    function calculateSetIssuanceQuantity()\\n        public\\n        view\\n        returns (uint256 rebalancingSetIssuable)\\n    {\\n        uint256 componentQuantity = getActiveSetAssetBalance();\\n        rebalancingSetIssuable = calculateSetQuantity(componentQuantity);\\n    }\\n\\n    /*\\n     * @dev Calculates Set token to sell given sUSD burn requirements\\n     * @param totalSusdToBurn: sUSD to burn to fix ratio or unlock staked SNX\\n     */\\n    function calculateSetRedemptionQuantity(uint256 totalSusdToBurn)\\n        public\\n        view\\n        returns (uint256 rebalancingSetRedeemable)\\n    {\\n        address currentSetAsset = getAssetCurrentlyActiveInSet();\\n\\n        bytes32 activeAssetSynthSymbol = getActiveAssetSynthSymbol();\\n        uint256 synthUsd = getSynthPrice(activeAssetSynthSymbol);\\n\\n        // expectedSetAssetRate = amount of current set asset needed to redeem for 1 sUSD\\n        uint256 expectedSetAssetRate = DEC_18.mul(DEC_18).div(synthUsd);\\n\\n        uint256 setAssetCollateralToSell = expectedSetAssetRate\\n            .mul(totalSusdToBurn)\\n            .div(DEC_18)\\n            .mul(103) // err on the high side\\n            .div(PERCENT);\\n\\n        uint256 decimals = (TEN**ERC20Detailed(currentSetAsset).decimals());\\n        setAssetCollateralToSell = setAssetCollateralToSell.mul(decimals).div(\\n            DEC_18\\n        );\\n\\n        rebalancingSetRedeemable = calculateSetQuantity(\\n            setAssetCollateralToSell\\n        );\\n    }\\n\\n    /*\\n     * @dev Calculates value of a single 1e18 Set unit in ETH terms\\n     */\\n    function calculateEthValueOfOneSetUnit()\\n        internal\\n        view\\n        returns (uint256 ethValue)\\n    {\\n        uint256 unitShares = getSetUnitShares();\\n        uint256 rebalancingSetNaturalUnit = getSetNaturalUnit();\\n        uint256 baseSetRequired = DEC_18.mul(unitShares).div(\\n            rebalancingSetNaturalUnit\\n        );\\n\\n        uint256 unitsOfUnderlying = getBaseSetComponentUnits();\\n        uint256 baseSetNaturalUnit = getBaseSetNaturalUnit();\\n        uint256 componentRequired = baseSetRequired.mul(unitsOfUnderlying).div(\\n            baseSetNaturalUnit\\n        );\\n\\n        address currentSetAsset = getAssetCurrentlyActiveInSet();\\n        uint256 decimals = (TEN**ERC20Detailed(currentSetAsset).decimals());\\n        componentRequired = componentRequired.mul(DEC_18).div(decimals);\\n\\n        bytes32 activeAssetSynthSymbol = getActiveAssetSynthSymbol();\\n\\n        uint256 synthUsd = getSynthPrice(activeAssetSynthSymbol);\\n        uint256 ethUsd = getSynthPrice(seth);\\n        ethValue = componentRequired.mul(synthUsd).div(ethUsd);\\n    }\\n\\n    /*\\n     * @dev Calculates value of Set Holdings in ETH terms\\n     */\\n    function getSetHoldingsValueInWei()\\n        public\\n        view\\n        returns (uint256 setValInWei)\\n    {\\n        uint256 setCollateralTokens = getSetCollateralTokens();\\n        bytes32 synthSymbol = getActiveAssetSynthSymbol();\\n        address currentSetAsset = getAssetCurrentlyActiveInSet();\\n\\n        uint256 synthUsd = getSynthPrice(synthSymbol);\\n        uint256 ethUsd = getSynthPrice(seth);\\n\\n        uint256 decimals = (TEN**ERC20Detailed(currentSetAsset).decimals());\\n        setCollateralTokens = setCollateralTokens.mul(DEC_18).div(decimals);\\n        setValInWei = setCollateralTokens.mul(synthUsd).div(ethUsd);\\n    }\\n\\n    function getBaseSetNaturalUnit() internal view returns (uint256) {\\n        return getCurrentCollateralSet().naturalUnit();\\n    }\\n\\n    /*\\n     * @dev Outputs current active Set asset\\n     * @notice xSNX contracts complex only compatible with Sets that hold a single asset at a time\\n     */\\n    function getAssetCurrentlyActiveInSet() public view returns (address) {\\n        address[] memory currentAllocation = getCurrentCollateralSet()\\n            .getComponents();\\n        return currentAllocation[0];\\n    }\\n\\n    function getCurrentCollateralSet()\\n        internal\\n        view\\n        returns (ISetAssetBaseCollateral)\\n    {\\n        return ISetAssetBaseCollateral(getCurrentSet());\\n    }\\n\\n    function getCurrentSet() internal view returns (address) {\\n        return ISetToken(setAddress).currentSet();\\n    }\\n\\n    /*\\n     * @dev Returns the number of underlying tokens in the current Set asset\\n     * e.g., the contract's Set holdings are collateralized by 10.4 WETH\\n     */\\n    function getSetCollateralTokens() internal view returns (uint256) {\\n        return\\n            getSetBalanceCollateral().mul(getBaseSetComponentUnits()).div(\\n                getBaseSetNaturalUnit()\\n            );\\n    }\\n\\n    function getSetBalanceCollateral() internal view returns (uint256) {\\n        uint256 unitShares = getSetUnitShares();\\n        uint256 naturalUnit = getSetNaturalUnit();\\n        return getContractSetBalance().mul(unitShares).div(naturalUnit);\\n    }\\n\\n    function getSetUnitShares() internal view returns (uint256) {\\n        return ISetToken(setAddress).unitShares();\\n    }\\n\\n    function getSetNaturalUnit() internal view returns (uint256) {\\n        return ISetToken(setAddress).naturalUnit();\\n    }\\n\\n    function getContractSetBalance() internal view returns (uint256) {\\n        return IERC20(setAddress).balanceOf(xSNXAdminInstance);\\n    }\\n\\n    function getBaseSetComponentUnits() internal view returns (uint256) {\\n        return ISetAssetBaseCollateral(getCurrentSet()).getUnits()[0];\\n    }\\n\\n    /* ========================================================================================= */\\n    /*                                         Synthetix\\t                                     */\\n    /* ========================================================================================= */\\n\\n    function getSusdBalance() public view returns (uint256) {\\n        return IERC20(susdAddress).balanceOf(xSNXAdminInstance);\\n    }\\n\\n    function getSnxBalance() public view returns (uint256) {\\n        return getSnxBalanceOwned().add(getSnxBalanceEscrowed());\\n    }\\n\\n    function getSnxBalanceOwned() internal view returns (uint256) {\\n        return\\n            IERC20(addressResolver.getAddress(synthetixName)).balanceOf(\\n                xSNXAdminInstance\\n            );\\n    }\\n\\n    function getSnxBalanceEscrowed() internal view returns (uint256) {\\n        return\\n            IRewardEscrowV2(addressResolver.getAddress(rewardEscrowV2Name))\\n                .balanceOf(xSNXAdminInstance);\\n    }\\n\\n    function getContractEscrowedSnxValue() internal view returns (uint256) {\\n        return getSnxBalanceEscrowed().mul(getSnxPrice()).div(DEC_18);\\n    }\\n\\n    function getContractOwnedSnxValue() internal view returns (uint256) {\\n        return getSnxBalanceOwned().mul(getSnxPrice()).div(DEC_18);\\n    }\\n\\n    function getSnxPrice() internal view returns (uint256) {\\n        (uint256 rate, uint256 time) = IExchangeRates(\\n            addressResolver.getAddress(exchangeRatesName)\\n        )\\n            .rateAndUpdatedTime(snx);\\n        require(time.add(RATE_STALE_TIME_NEW) > block.timestamp, \\\"Rate stale\\\");\\n        return rate;\\n    }\\n\\n    function getSynthPrice(bytes32 synth) internal view returns (uint256) {\\n        (uint256 rate, uint256 time) = IExchangeRates(\\n            addressResolver.getAddress(exchangeRatesName)\\n        )\\n            .rateAndUpdatedTime(synth);\\n        if (synth != susd) {\\n            require(time.add(RATE_STALE_TIME_NEW) > block.timestamp, \\\"Rate stale\\\");\\n        }\\n        return rate;\\n    }\\n\\n    /*\\n     * @dev Converts sUSD debt value into ETH terms\\n     * @param debtValue: sUSD-denominated debt value\\n     */\\n    function calculateDebtValueInWei(uint256 debtValue)\\n        internal\\n        view\\n        returns (uint256 debtBalanceInWei)\\n    {\\n        uint256 ethUsd = getSynthPrice(seth);\\n        debtBalanceInWei = debtValue.mul(DEC_18).div(ethUsd);\\n    }\\n\\n    function getContractDebtValue() internal view returns (uint256) {\\n        return\\n            ISynthetix(addressResolver.getAddress(synthetixName)).debtBalanceOf(\\n                xSNXAdminInstance,\\n                susd\\n            );\\n    }\\n\\n    /*\\n     * @notice Returns inverse of target C-RATIO\\n     */\\n    function getIssuanceRatio() internal view returns (uint256) {\\n        return\\n            ISystemSettings(addressResolver.getAddress(systemSettingsName))\\n                .issuanceRatio();\\n    }\\n\\n    /*\\n     * @notice Returns NAV contribution of SNX holdings in USD terms\\n     */\\n    function getContractSnxValue() internal view returns (uint256) {\\n        return getSnxBalance().mul(getSnxPrice()).div(DEC_18);\\n    }\\n\\n    /* ========================================================================================= */\\n    /*                                       Burning sUSD                                        */\\n    /* ========================================================================================= */\\n\\n    /*\\n     * @dev Calculates sUSD to burn to restore C-RATIO\\n     * @param snxValueHeld: USD value of SNX\\n     * @param contractDebtValue: USD value of sUSD debt\\n     * @param issuanceRatio: Synthetix C-RATIO requirement\\n     */\\n    function calculateSusdToBurnToFixRatio(\\n        uint256 snxValueHeld,\\n        uint256 contractDebtValue,\\n        uint256 issuanceRatio\\n    ) internal pure returns (uint256) {\\n        uint256 subtractor = issuanceRatio.mul(snxValueHeld).div(DEC_18);\\n\\n        if (subtractor > contractDebtValue) return 0;\\n        return contractDebtValue.sub(subtractor);\\n    }\\n\\n    /*\\n     * @dev Calculates sUSD to burn to restore C-RATIO\\n     */\\n    function calculateSusdToBurnToFixRatioExternal()\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 snxValueHeld = getContractSnxValue();\\n        uint256 debtValue = getContractDebtValue();\\n        uint256 issuanceRatio = getIssuanceRatio();\\n        return\\n            calculateSusdToBurnToFixRatio(\\n                snxValueHeld,\\n                debtValue,\\n                issuanceRatio\\n            );\\n    }\\n\\n    /*\\n     * @dev Calculates sUSD to burn to eclipse value of escrowed SNX\\n     * @notice Synthetix system requires escrowed SNX to be \\\"unlocked\\\" first\\n     * @param issuanceRatio: Synthetix C-RATIO requirement\\n     */\\n    function calculateSusdToBurnToEclipseEscrowed(uint256 issuanceRatio)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 escrowedSnxValue = getContractEscrowedSnxValue();\\n        if (escrowedSnxValue == 0) return 0;\\n\\n        return escrowedSnxValue.mul(issuanceRatio).div(DEC_18);\\n    }\\n\\n    /*\\n     * @dev Helper function to calculate sUSD burn required for a potential redemption\\n     * @param tokensToRedeem: potential tokens to burn\\n     * @param totalSupply: xSNX.totalSupply()\\n     * @param contractDebtValue: sUSD debt value\\n     * @param issuanceRatio: Synthetix C-RATIO requirement\\n     */\\n    function calculateSusdToBurnForRedemption(\\n        uint256 tokensToRedeem,\\n        uint256 totalSupply,\\n        uint256 contractDebtValue,\\n        uint256 issuanceRatio\\n    ) public view returns (uint256 susdToBurn) {\\n        uint256 nonEscrowedSnxValue = getContractOwnedSnxValue();\\n        uint256 lockedSnxValue = contractDebtValue.mul(DEC_18).div(\\n            issuanceRatio\\n        );\\n        uint256 valueOfSnxToSell = nonEscrowedSnxValue.mul(tokensToRedeem).div(\\n            totalSupply\\n        );\\n        susdToBurn = (\\n            lockedSnxValue.add(valueOfSnxToSell).sub(nonEscrowedSnxValue)\\n        )\\n            .mul(issuanceRatio)\\n            .div(DEC_18);\\n    }\\n\\n    /* ========================================================================================= */\\n    /*                                        Rebalances                                         */\\n    /* ========================================================================================= */\\n\\n    /*\\n     * @dev Helper function to facilitate xSNXAdmin.rebalanceTowardsHedge()\\n     */\\n    function calculateAssetChangesForRebalanceToHedge()\\n        internal\\n        view\\n        returns (uint256 totalSusdToBurn, uint256 snxToSell)\\n    {\\n        uint256 snxValueHeld = getContractSnxValue();\\n        uint256 debtValueInUsd = getContractDebtValue();\\n        uint256 issuanceRatio = getIssuanceRatio();\\n\\n        uint256 susdToBurnToFixRatio = calculateSusdToBurnToFixRatio(\\n            snxValueHeld,\\n            debtValueInUsd,\\n            issuanceRatio\\n        );\\n\\n\\n            uint256 susdToBurnToEclipseEscrowed\\n         = calculateSusdToBurnToEclipseEscrowed(issuanceRatio);\\n\\n        uint256 hedgeAssetsValueInUsd = calculateHedgeAssetsValueInUsd();\\n        uint256 valueToUnlockInUsd = debtValueInUsd.sub(hedgeAssetsValueInUsd);\\n\\n        uint256 susdToBurnToUnlockTransfer = valueToUnlockInUsd\\n            .mul(issuanceRatio)\\n            .div(DEC_18);\\n\\n        totalSusdToBurn = (\\n            susdToBurnToFixRatio.add(susdToBurnToEclipseEscrowed).add(\\n                susdToBurnToUnlockTransfer\\n            )\\n        );\\n        snxToSell = valueToUnlockInUsd.mul(DEC_18).div(getSnxPrice());\\n    }\\n\\n    /*\\n     * @dev Helper function to facilitate xSNXAdmin.rebalanceTowardsSnx()\\n     */\\n    function calculateAssetChangesForRebalanceToSnx()\\n        public\\n        view\\n        returns (uint256 setToSell)\\n    {\\n        (\\n            uint256 debtValueInWei,\\n            uint256 hedgeAssetsBalance\\n        ) = getRebalanceUtils();\\n        uint256 setValueToSell = hedgeAssetsBalance.sub(debtValueInWei);\\n        uint256 ethValueOfOneSet = calculateEthValueOfOneSetUnit();\\n        setToSell = setValueToSell.mul(DEC_18).div(ethValueOfOneSet);\\n\\n        // Set quantity must be multiple of natural unit\\n        uint256 naturalUnit = getSetNaturalUnit();\\n        setToSell = setToSell.div(naturalUnit).mul(naturalUnit);\\n    }\\n\\n    /*\\n     * @dev Helper function to facilitate xSNXAdmin.rebalanceTowardsSnx()\\n     */\\n    function getRebalanceTowardsSnxUtils()\\n        public\\n        view\\n        returns (uint256 setToSell, address activeAsset)\\n    {\\n        setToSell = calculateAssetChangesForRebalanceToSnx();\\n        activeAsset = getAssetCurrentlyActiveInSet();\\n    }\\n\\n    /*\\n     * @dev Helper function to facilitate xSNXAdmin.rebalanceTowardsSnx(), xSNXAdmin.rebalanceTowardsHedge()\\n     * @dev Denominated in ETH terms\\n     */\\n    function getRebalanceUtils()\\n        public\\n        view\\n        returns (uint256 debtValueInWei, uint256 hedgeAssetsBalance)\\n    {\\n        uint256 setHoldingsInWei = getSetHoldingsValueInWei();\\n        uint256 ethBalance = getEthBalance();\\n\\n        uint256 debtValue = getContractDebtValue();\\n        debtValueInWei = calculateDebtValueInWei(debtValue);\\n        hedgeAssetsBalance = setHoldingsInWei.add(ethBalance);\\n    }\\n\\n    /*\\n     * @dev Helper function to facilitate xSNXAdmin.rebalanceTowardsHedge()\\n     * @dev Denominated in USD terms\\n     */\\n    function calculateHedgeAssetsValueInUsd()\\n        internal\\n        view\\n        returns (uint256 hedgeAssetsValueInUsd)\\n    {\\n        address currentSetAsset = getAssetCurrentlyActiveInSet();\\n        uint256 decimals = (TEN**ERC20Detailed(currentSetAsset).decimals());\\n        uint256 setCollateralTokens = getSetCollateralTokens();\\n        setCollateralTokens = setCollateralTokens.mul(DEC_18).div(decimals);\\n\\n        bytes32 activeAssetSynthSymbol = getActiveAssetSynthSymbol();\\n\\n        uint256 synthUsd = getSynthPrice(activeAssetSynthSymbol);\\n        uint256 setValueUsd = setCollateralTokens.mul(synthUsd).div(DEC_18);\\n\\n        uint256 ethBalance = getEthBalance();\\n        uint256 ethUsd = getSynthPrice(seth);\\n        uint256 ethValueUsd = ethBalance.mul(ethUsd).div(DEC_18);\\n\\n        hedgeAssetsValueInUsd = setValueUsd.add(ethValueUsd);\\n    }\\n\\n    /*\\n     * @dev Helper function to determine whether xSNXAdmin.rebalanceTowardsSnx() is required\\n     */\\n    function isRebalanceTowardsSnxRequired() public view returns (bool) {\\n        (\\n            uint256 debtValueInWei,\\n            uint256 hedgeAssetsBalance\\n        ) = getRebalanceUtils();\\n\\n        if (\\n            debtValueInWei.mul(REBALANCE_THRESHOLD).div(PERCENT) <\\n            hedgeAssetsBalance\\n        ) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /*\\n     * @dev Helper function to determine whether xSNXAdmin.rebalanceTowardsHedge() is required\\n     */\\n    function isRebalanceTowardsHedgeRequired() public view returns (bool) {\\n        (\\n            uint256 debtValueInWei,\\n            uint256 hedgeAssetsBalance\\n        ) = getRebalanceUtils();\\n\\n        if (\\n            hedgeAssetsBalance.mul(REBALANCE_THRESHOLD).div(PERCENT) <\\n            debtValueInWei\\n        ) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /*\\n     * @dev Helper function to facilitate xSNXAdmin.rebalanceTowardsHedge()\\n     * @notice Will fail if !isRebalanceTowardsHedgeRequired()\\n     */\\n    function getRebalanceTowardsHedgeUtils()\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            address\\n        )\\n    {\\n        (\\n            uint256 totalSusdToBurn,\\n            uint256 snxToSell\\n        ) = calculateAssetChangesForRebalanceToHedge();\\n        address activeAsset = getAssetCurrentlyActiveInSet();\\n        return (totalSusdToBurn, snxToSell, activeAsset);\\n    }\\n\\n    /*\\n     * @dev Helper for `hedge` function\\n     * @dev Determines share of sUSD to allocate to ETH\\n     * @dev Implicitly determines Set allocation as well\\n     * @param susdBal: sUSD balance post minting\\n     */\\n    function getEthAllocationOnHedge(uint256 susdBal)\\n        public\\n        view\\n        returns (uint256 ethAllocation)\\n    {\\n        uint256 ethUsd = getSynthPrice(seth);\\n\\n        uint256 setHoldingsInUsd = getSetHoldingsValueInWei().mul(ethUsd).div(\\n            DEC_18\\n        );\\n        uint256 ethBalInUsd = getEthBalance().mul(ethUsd).div(DEC_18);\\n        uint256 hedgeAssets = setHoldingsInUsd.add(ethBalInUsd);\\n\\n        if (ethBalInUsd.mul(ETH_TARGET) >= hedgeAssets.add(susdBal)) {\\n            // full bal directed toward Set\\n            // eth allocation is 0\\n        } else if ((ethBalInUsd.add(susdBal)).mul(ETH_TARGET) < hedgeAssets) {\\n            // full bal directed toward Eth\\n            ethAllocation = susdBal;\\n        } else {\\n            // fractionate allocation\\n            ethAllocation = ((hedgeAssets.add(susdBal)).div(ETH_TARGET)).sub(\\n                ethBalInUsd\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @dev Helper function to facilitate xSNXAdmin.rebalanceSetToEth()\\n     */\\n    function calculateSetToSellForRebalanceSetToEth()\\n        public\\n        view\\n        returns (uint256 setQuantityToSell)\\n    {\\n        uint256 setHoldingsInWei = getSetHoldingsValueInWei();\\n        uint256 ethBal = getEthBalance();\\n        uint256 hedgeAssets = setHoldingsInWei.add(ethBal);\\n        require(\\n            ethBal.mul(ETH_TARGET) < hedgeAssets,\\n            \\\"Rebalance not necessary\\\"\\n        );\\n\\n        uint256 ethToAdd = ((hedgeAssets.div(ETH_TARGET)).sub(ethBal));\\n        setQuantityToSell = getContractSetBalance().mul(ethToAdd).div(\\n            setHoldingsInWei\\n        );\\n\\n        uint256 naturalUnit = getSetNaturalUnit();\\n        setQuantityToSell = setQuantityToSell.div(naturalUnit).mul(naturalUnit);\\n    }\\n\\n    /* ========================================================================================= */\\n    /*                                     Address Setters                                       */\\n    /* ========================================================================================= */\\n\\n    function setAdminInstanceAddress(address _xSNXAdminInstance)\\n        public\\n        onlyOwner\\n    {\\n        if (xSNXAdminInstance == address(0)) {\\n            xSNXAdminInstance = _xSNXAdminInstance;\\n        }\\n    }\\n\\n    function setCurve(\\n        address curvePoolAddress,\\n        int128 _usdcIndex,\\n        int128 _susdIndex\\n    ) public onlyOwner {\\n        if (address(curveFi) == address(0)) {\\n            // if initial set on deployment, immediately activate Curve address\\n            curveFi = ICurveFi(curvePoolAddress);\\n            nextCurveAddress = curvePoolAddress;\\n        } else {\\n            // if updating Curve address (i.e., not initial setting of address on deployment),\\n            // store nextCurveAddress but don't activate until addressValidator has confirmed\\n            nextCurveAddress = curvePoolAddress;\\n        }\\n        usdcIndex = _usdcIndex;\\n        susdIndex = _susdIndex;\\n    }\\n\\n    /* ========================================================================================= */\\n    /*                                   \\t\\t Utils           \\t\\t                         */\\n    /* ========================================================================================= */\\n\\n    // admin on deployment approve [snx, susd, setComponentA, setComponentB]\\n    function approveKyber(address tokenAddress) public onlyOwner {\\n        IERC20(tokenAddress).approve(address(kyberNetworkProxy), MAX_UINT);\\n    }\\n\\n    // admin on deployment approve [susd, usdc]\\n    function approveCurve(address tokenAddress) public onlyOwner {\\n        IERC20(tokenAddress).approve(address(curveFi), MAX_UINT);\\n    }\\n\\n    function confirmCurveAddress(address _nextCurveAddress) public {\\n        require(msg.sender == addressValidator, \\\"Incorrect caller\\\");\\n        require(nextCurveAddress == _nextCurveAddress, \\\"Addresses don't match\\\");\\n        curveFi = ICurveFi(nextCurveAddress);\\n    }\\n\\n    function() external payable {}\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Initializable, Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function initialize(address sender) public initializer {\\n        _owner = sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * > Note: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n */\\ncontract ERC20Detailed is Initializable, IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function initialize(string memory name, string memory symbol, uint8 decimals) public initializer {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/Initializable.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"synthetix/contracts/interfaces/ISynthetix.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\nimport \\\"./ISynth.sol\\\";\\nimport \\\"./IVirtualSynth.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/isynthetix\\ninterface ISynthetix {\\n    // Views\\n    function anySynthOrSNXRateIsInvalid() external view returns (bool anyRateInvalid);\\n\\n    function availableCurrencyKeys() external view returns (bytes32[] memory);\\n\\n    function availableSynthCount() external view returns (uint);\\n\\n    function availableSynths(uint index) external view returns (ISynth);\\n\\n    function collateral(address account) external view returns (uint);\\n\\n    function collateralisationRatio(address issuer) external view returns (uint);\\n\\n    function debtBalanceOf(address issuer, bytes32 currencyKey) external view returns (uint);\\n\\n    function isWaitingPeriod(bytes32 currencyKey) external view returns (bool);\\n\\n    function maxIssuableSynths(address issuer) external view returns (uint maxIssuable);\\n\\n    function remainingIssuableSynths(address issuer)\\n        external\\n        view\\n        returns (\\n            uint maxIssuable,\\n            uint alreadyIssued,\\n            uint totalSystemDebt\\n        );\\n\\n    function synths(bytes32 currencyKey) external view returns (ISynth);\\n\\n    function synthsByAddress(address synthAddress) external view returns (bytes32);\\n\\n    function totalIssuedSynths(bytes32 currencyKey) external view returns (uint);\\n\\n    function totalIssuedSynthsExcludeEtherCollateral(bytes32 currencyKey) external view returns (uint);\\n\\n    function transferableSynthetix(address account) external view returns (uint transferable);\\n\\n    // Mutative Functions\\n    function burnSynths(uint amount) external;\\n\\n    function burnSynthsOnBehalf(address burnForAddress, uint amount) external;\\n\\n    function burnSynthsToTarget() external;\\n\\n    function burnSynthsToTargetOnBehalf(address burnForAddress) external;\\n\\n    function exchange(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    ) external returns (uint amountReceived);\\n\\n    function exchangeOnBehalf(\\n        address exchangeForAddress,\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    ) external returns (uint amountReceived);\\n\\n    function exchangeWithTracking(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        address originator,\\n        bytes32 trackingCode\\n    ) external returns (uint amountReceived);\\n\\n    function exchangeOnBehalfWithTracking(\\n        address exchangeForAddress,\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        address originator,\\n        bytes32 trackingCode\\n    ) external returns (uint amountReceived);\\n\\n    function exchangeWithVirtual(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        bytes32 trackingCode\\n    ) external returns (uint amountReceived, IVirtualSynth vSynth);\\n\\n    function issueMaxSynths() external;\\n\\n    function issueMaxSynthsOnBehalf(address issueForAddress) external;\\n\\n    function issueSynths(uint amount) external;\\n\\n    function issueSynthsOnBehalf(address issueForAddress, uint amount) external;\\n\\n    function mint() external returns (bool);\\n\\n    function settle(bytes32 currencyKey)\\n        external\\n        returns (\\n            uint reclaimed,\\n            uint refunded,\\n            uint numEntries\\n        );\\n\\n    // Liquidations\\n    function liquidateDelinquentAccount(address account, uint susdAmount) external returns (bool);\\n\\n    // Restricted Functions\\n\\n    function mintSecondary(address account, uint amount) external;\\n\\n    function mintSecondaryRewards(uint amount) external;\\n\\n    function burnSecondary(address account, uint amount) external;\\n}\\n\"\r\n    },\r\n    \"synthetix/contracts/interfaces/IRewardEscrowV2.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\npragma experimental ABIEncoderV2;\\n\\nlibrary VestingEntries {\\n    struct VestingEntry {\\n        uint64 endTime;\\n        uint256 escrowAmount;\\n    }\\n    struct VestingEntryWithID {\\n        uint64 endTime;\\n        uint256 escrowAmount;\\n        uint256 entryID;\\n    }\\n}\\n\\ninterface IRewardEscrowV2 {\\n    // Views\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function numVestingEntries(address account) external view returns (uint);\\n\\n    function totalEscrowedAccountBalance(address account) external view returns (uint);\\n\\n    function totalVestedAccountBalance(address account) external view returns (uint);\\n\\n    function getVestingQuantity(address account, uint256[] calldata entryIDs) external view returns (uint);\\n\\n    function getVestingSchedules(\\n        address account,\\n        uint256 index,\\n        uint256 pageSize\\n    ) external view returns (VestingEntries.VestingEntryWithID[] memory);\\n\\n    function getAccountVestingEntryIDs(\\n        address account,\\n        uint256 index,\\n        uint256 pageSize\\n    ) external view returns (uint256[] memory);\\n\\n    function getVestingEntryClaimable(address account, uint256 entryID) external view returns (uint);\\n\\n    function getVestingEntry(address account, uint256 entryID) external view returns (uint64, uint256);\\n\\n    // Mutative functions\\n    function vest(uint256[] calldata entryIDs) external;\\n\\n    function createEscrowEntry(\\n        address beneficiary,\\n        uint256 deposit,\\n        uint256 duration\\n    ) external;\\n\\n    function appendVestingEntry(\\n        address account,\\n        uint256 quantity,\\n        uint256 duration\\n    ) external;\\n\\n    function migrateVestingSchedule(address _addressToMigrate) external;\\n\\n    function migrateAccountEscrowBalances(\\n        address[] calldata accounts,\\n        uint256[] calldata escrowBalances,\\n        uint256[] calldata vestedBalances\\n    ) external;\\n\\n    // Account Merging\\n    function startMergingWindow() external;\\n\\n    function mergeAccount(address accountToMerge, uint256[] calldata entryIDs) external;\\n\\n    function nominateAccountToMerge(address account) external;\\n\\n    function accountMergingIsOpen() external view returns (bool);\\n\\n    // L2 Migration\\n    function importVestingEntries(\\n        address account,\\n        uint256 escrowedAmount,\\n        VestingEntries.VestingEntry[] calldata vestingEntries\\n    ) external;\\n\\n    // Return amount of SNX transfered to SynthetixBridgeToOptimism deposit contract\\n    function burnForMigration(address account, uint256[] calldata entryIDs)\\n        external\\n        returns (uint256 escrowedAccountBalance, VestingEntries.VestingEntry[] memory vestingEntries);\\n}\\n\"\r\n    },\r\n    \"synthetix/contracts/interfaces/IExchangeRates.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/iexchangerates\\ninterface IExchangeRates {\\n    // Structs\\n    struct RateAndUpdatedTime {\\n        uint216 rate;\\n        uint40 time;\\n    }\\n\\n    struct InversePricing {\\n        uint entryPoint;\\n        uint upperLimit;\\n        uint lowerLimit;\\n        bool frozenAtUpperLimit;\\n        bool frozenAtLowerLimit;\\n    }\\n\\n    // Views\\n    function aggregators(bytes32 currencyKey) external view returns (address);\\n\\n    function aggregatorWarningFlags() external view returns (address);\\n\\n    function anyRateIsInvalid(bytes32[] calldata currencyKeys) external view returns (bool);\\n\\n    function canFreezeRate(bytes32 currencyKey) external view returns (bool);\\n\\n    function currentRoundForRate(bytes32 currencyKey) external view returns (uint);\\n\\n    function currenciesUsingAggregator(address aggregator) external view returns (bytes32[] memory);\\n\\n    function effectiveValue(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    ) external view returns (uint value);\\n\\n    function effectiveValueAndRates(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    )\\n        external\\n        view\\n        returns (\\n            uint value,\\n            uint sourceRate,\\n            uint destinationRate\\n        );\\n\\n    function effectiveValueAtRound(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        uint roundIdForSrc,\\n        uint roundIdForDest\\n    ) external view returns (uint value);\\n\\n    function getCurrentRoundId(bytes32 currencyKey) external view returns (uint);\\n\\n    function getLastRoundIdBeforeElapsedSecs(\\n        bytes32 currencyKey,\\n        uint startingRoundId,\\n        uint startingTimestamp,\\n        uint timediff\\n    ) external view returns (uint);\\n\\n    function inversePricing(bytes32 currencyKey)\\n        external\\n        view\\n        returns (\\n            uint entryPoint,\\n            uint upperLimit,\\n            uint lowerLimit,\\n            bool frozenAtUpperLimit,\\n            bool frozenAtLowerLimit\\n        );\\n\\n    function lastRateUpdateTimes(bytes32 currencyKey) external view returns (uint256);\\n\\n    function oracle() external view returns (address);\\n\\n    function rateAndTimestampAtRound(bytes32 currencyKey, uint roundId) external view returns (uint rate, uint time);\\n\\n    function rateAndUpdatedTime(bytes32 currencyKey) external view returns (uint rate, uint time);\\n\\n    function rateAndInvalid(bytes32 currencyKey) external view returns (uint rate, bool isInvalid);\\n\\n    function rateForCurrency(bytes32 currencyKey) external view returns (uint);\\n\\n    function rateIsFlagged(bytes32 currencyKey) external view returns (bool);\\n\\n    function rateIsFrozen(bytes32 currencyKey) external view returns (bool);\\n\\n    function rateIsInvalid(bytes32 currencyKey) external view returns (bool);\\n\\n    function rateIsStale(bytes32 currencyKey) external view returns (bool);\\n\\n    function rateStalePeriod() external view returns (uint);\\n\\n    function ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32 currencyKey, uint numRounds)\\n        external\\n        view\\n        returns (uint[] memory rates, uint[] memory times);\\n\\n    function ratesAndInvalidForCurrencies(bytes32[] calldata currencyKeys)\\n        external\\n        view\\n        returns (uint[] memory rates, bool anyRateInvalid);\\n\\n    function ratesForCurrencies(bytes32[] calldata currencyKeys) external view returns (uint[] memory);\\n\\n    // Mutative functions\\n    function freezeRate(bytes32 currencyKey) external;\\n}\\n\"\r\n    },\r\n    \"synthetix/contracts/interfaces/ISynthetixState.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/isynthetixstate\\ninterface ISynthetixState {\\n    // Views\\n    function debtLedger(uint index) external view returns (uint);\\n\\n    function issuanceData(address account) external view returns (uint initialDebtOwnership, uint debtEntryIndex);\\n\\n    function debtLedgerLength() external view returns (uint);\\n\\n    function hasIssued(address account) external view returns (bool);\\n\\n    function lastDebtLedgerEntry() external view returns (uint);\\n\\n    // Mutative functions\\n    function incrementTotalIssuerCount() external;\\n\\n    function decrementTotalIssuerCount() external;\\n\\n    function setCurrentIssuanceData(address account, uint initialDebtOwnership) external;\\n\\n    function appendDebtLedgerValue(uint value) external;\\n\\n    function clearIssuanceData(address account) external;\\n}\\n\"\r\n    },\r\n    \"synthetix/contracts/interfaces/IAddressResolver.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/iaddressresolver\\ninterface IAddressResolver {\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getSynth(bytes32 key) external view returns (address);\\n\\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ISystemSettings.sol\": {\r\n      \"content\": \"pragma solidity 0.5.15;\\n\\ninterface ISystemSettings {\\n    function issuanceRatio() external view returns(uint);\\n}\"\r\n    },\r\n    \"contracts/interface/ICurveFi.sol\": {\r\n      \"content\": \"pragma solidity 0.5.15;\\n\\ninterface ICurveFi {\\n  function exchange(\\n    int128 i,\\n    int128 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external;\\n  function exchange_underlying(\\n    int128 i,\\n    int128 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external;\\n  function get_dx_underlying(\\n    int128 i,\\n    int128 j,\\n    uint256 dy\\n  ) external view returns (uint256);\\n  function get_dy_underlying(\\n    int128 i,\\n    int128 j,\\n    uint256 dx\\n  ) external view returns (uint256);\\n  function get_dx(\\n    int128 i,\\n    int128 j,\\n    uint256 dy\\n  ) external view returns (uint256);\\n  function get_dy(\\n    int128 i,\\n    int128 j,\\n    uint256 dx\\n  ) external view returns (uint256);\\n  function get_virtual_price() external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interface/ISetToken.sol\": {\r\n      \"content\": \"pragma solidity 0.5.15;\\n\\ninterface ISetToken {\\n    function unitShares() external view returns(uint);\\n    function naturalUnit() external view returns(uint);\\n    function currentSet() external view returns(address);\\n    // function getUnits() external view returns (uint256[] memory);\\n}\"\r\n    },\r\n    \"contracts/interface/IKyberNetworkProxy.sol\": {\r\n      \"content\": \"pragma solidity 0.5.15;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract IKyberNetworkProxy {\\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) external view returns (uint expectedRate, uint slippageRate);\\n    function swapEtherToToken(ERC20 token, uint minConversionRate) external payable returns(uint);\\n    function swapTokenToEther(ERC20 token, uint tokenQty, uint minRate) external payable returns(uint);\\n    function swapTokenToToken(ERC20 src, uint srcAmount, ERC20 dest, uint minConversionRate) public returns(uint);\\n}\"\r\n    },\r\n    \"contracts/interface/ISetAssetBaseCollateral.sol\": {\r\n      \"content\": \"pragma solidity 0.5.15;\\n\\ninterface ISetAssetBaseCollateral {\\n    function getComponents() external view returns(address[] memory);\\n    function naturalUnit() external view returns(uint);\\n    function getUnits() external view returns (uint256[] memory);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"synthetix/contracts/interfaces/ISynth.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/isynth\\ninterface ISynth {\\n    // Views\\n    function currencyKey() external view returns (bytes32);\\n\\n    function transferableSynths(address account) external view returns (uint);\\n\\n    // Mutative functions\\n    function transferAndSettle(address to, uint value) external returns (bool);\\n\\n    function transferFromAndSettle(\\n        address from,\\n        address to,\\n        uint value\\n    ) external returns (bool);\\n\\n    // Restricted: used internally to Synthetix\\n    function burn(address account, uint amount) external;\\n\\n    function issue(address account, uint amount) external;\\n}\\n\"\r\n    },\r\n    \"synthetix/contracts/interfaces/IVirtualSynth.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\nimport \\\"./ISynth.sol\\\";\\n\\ninterface IVirtualSynth {\\n    // Views\\n    function balanceOfUnderlying(address account) external view returns (uint);\\n\\n    function rate() external view returns (uint);\\n\\n    function readyToSettle() external view returns (bool);\\n\\n    function secsLeftInWaitingPeriod() external view returns (uint);\\n\\n    function settled() external view returns (bool);\\n\\n    function synth() external view returns (ISynth);\\n\\n    // Mutative functions\\n    function settle(address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Initializable, Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"approveCurve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"approveKyber\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateAssetChangesForRebalanceToSnx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"setToSell\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiPerOneSnx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snxBalanceBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonSnxAssetValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"calculateIssueTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snxBalanceOwned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractDebtValue\",\"type\":\"uint256\"}],\"name\":\"calculateRedeemTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensToRedeem\",\"type\":\"uint256\"}],\"name\":\"calculateRedemptionValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"valueToRedeem\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateSetIssuanceQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rebalancingSetIssuable\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"componentQuantity\",\"type\":\"uint256\"}],\"name\":\"calculateSetQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rebalancingSetQuantity\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSusdToBurn\",\"type\":\"uint256\"}],\"name\":\"calculateSetRedemptionQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rebalancingSetRedeemable\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateSetToSellForRebalanceSetToEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"setQuantityToSell\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensToRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractDebtValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issuanceRatio\",\"type\":\"uint256\"}],\"name\":\"calculateSusdToBurnForRedemption\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"susdToBurn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"issuanceRatio\",\"type\":\"uint256\"}],\"name\":\"calculateSusdToBurnToEclipseEscrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateSusdToBurnToFixRatioExternal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snxBalanceBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethContributed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonSnxAssetValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"calculateTokensToMintWithEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snxBalanceBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snxAddedToBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"calculateTokensToMintWithSnx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextCurveAddress\",\"type\":\"address\"}],\"name\":\"confirmCurveAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getActiveSetAssetBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAssetCurrentlyActiveInSet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"susdBal\",\"type\":\"uint256\"}],\"name\":\"getEthAllocationOnHedge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAllocation\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"getMintWithEthUtils\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allocateToEth\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nonSnxAssetValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRebalanceTowardsHedgeUtils\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRebalanceTowardsSnxUtils\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"setToSell\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"activeAsset\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRebalanceUtils\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtValueInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hedgeAssetsBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSetHoldingsValueInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"setValInWei\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSnxBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSusdBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_setAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_kyberProxyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressResolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_susdAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32[2]\",\"name\":\"_synthSymbols\",\"type\":\"bytes32[2]\"},{\"internalType\":\"address[2]\",\"name\":\"_setComponentAddresses\",\"type\":\"address[2]\"},{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRebalanceTowardsHedgeRequired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRebalanceTowardsSnxRequired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xSNXAdminInstance\",\"type\":\"address\"}],\"name\":\"setAdminInstanceAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"curvePoolAddress\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"_usdcIndex\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"_susdIndex\",\"type\":\"int128\"}],\"name\":\"setCurve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setHoldingsInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethBalBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"shouldAllocateEthToEthReserve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allocateToEth\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minKyberRate\",\"type\":\"uint256\"}],\"name\":\"swapEtherToToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minKyberRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCurveReturn\",\"type\":\"uint256\"}],\"name\":\"swapTokenToEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minKyberRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCurveReturn\",\"type\":\"uint256\"}],\"name\":\"swapTokenToToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TradeAccounting","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}