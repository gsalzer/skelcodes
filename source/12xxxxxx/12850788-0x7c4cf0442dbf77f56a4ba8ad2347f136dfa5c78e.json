{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n * \r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n * \r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { cs := extcodesize(self) }\r\n        return cs == 0;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMathUpgradeable {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\ninterface IStrategy {\r\n    function want() external view returns (address);\r\n\r\n    function deposit() external;\r\n\r\n    // NOTE: must exclude any tokens used in the yield\r\n    // Controller role - withdraw should return to Controller\r\n    function withdrawOther(address) external returns (uint256 balance);\r\n\r\n    // Controller | Vault role - withdraw should always return to Vault\r\n    function withdraw(uint256) external;\r\n\r\n    // Controller | Vault role - withdraw should always return to Vault\r\n    function withdrawAll() external returns (uint256);\r\n\r\n    function balanceOf() external view returns (uint256);\r\n\r\n    function getName() external pure returns (string memory);\r\n\r\n    function setStrategist(address _strategist) external;\r\n\r\n    function setWithdrawalFee(uint256 _withdrawalFee) external;\r\n\r\n    function setPerformanceFeeStrategist(uint256 _performanceFeeStrategist) external;\r\n\r\n    function setPerformanceFeeGovernance(uint256 _performanceFeeGovernance) external;\r\n\r\n    function setGovernance(address _governance) external;\r\n\r\n    function setController(address _controller) external;\r\n\r\n    function tend() external;\r\n\r\n    function harvest() external;\r\n}\r\n\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n/// @title  IMStableVoterProxy\r\n/// @author mStable\r\n/// @notice VoterProxy that deposits into mStable vaults and uses MTA stake to boosts rewards.\r\n/// @dev    Receives MTA from Strategies and Loans in order to bolster Stake. Any MTA held here is\r\n///         assumed to be invested to staking.\r\ninterface IMStableVoterProxy {\r\n    /***************************************\r\n                    VOTINGLOCK\r\n    ****************************************/\r\n\r\n    function createLock(uint256 _endTime) external;\r\n\r\n    function harvestMta() external;\r\n\r\n    function extendLock(uint256 _unlockTime) external;\r\n\r\n    function exitLock() external returns (uint256 mtaBalance);\r\n\r\n    function changeLockAddress(address _newLock) external;\r\n\r\n    function changeRedistributionRate(uint256 _newRate) external;\r\n\r\n    /***************************************\r\n                        LOANS\r\n    ****************************************/\r\n\r\n    function loan(uint256 _amt) external;\r\n\r\n    function repayLoan(address _creditor) external;\r\n\r\n    /***************************************\r\n                    STRATEGIES\r\n    ****************************************/\r\n\r\n    function supportStrategy(address _strategy, address _vault) external;\r\n\r\n    /***************************************\r\n                    POOL\r\n    ****************************************/\r\n\r\n    function deposit(uint256 _amt) external;\r\n\r\n    function withdrawAll(address _want) external;\r\n\r\n    function withdrawSome(address _want, uint256 _amt) external;\r\n\r\n    function claim() external returns (uint256 immediateUnlock, uint256 vested);\r\n}\r\n\r\n\r\n\r\nabstract contract IMStableVotingLockup {\r\n    function createLock(uint256 _value, uint256 _unlockTime) external virtual;\r\n\r\n    function withdraw() external virtual;\r\n\r\n    function exit() external virtual;\r\n\r\n    function increaseLockAmount(uint256 _value) external virtual;\r\n\r\n    function increaseLockLength(uint256 _unlockTime) external virtual;\r\n\r\n    function claimReward() public virtual;\r\n\r\n    function earned(address _account) public virtual view returns (uint256);\r\n\r\n    // View only ERC20 fns\r\n\r\n    function balanceOf(address _owner) public virtual view returns (uint256);\r\n\r\n    function balanceOfAt(address _owner, uint256 _blockNumber) public virtual view returns (uint256);\r\n\r\n    function totalSupply() public virtual view returns (uint256);\r\n\r\n    function totalSupplyAt(uint256 _blockNumber) public virtual view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title INexus\r\n * @dev Basic interface for interacting with the Nexus i.e. SystemKernel\r\n */\r\ninterface IMStableNexus {\r\n    function governor() external view returns (address);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract PausableUpgradeable is Initializable, ContextUpgradeable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    function __Pausable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Pausable_init_unchained();\r\n    }\r\n\r\n    function __Pausable_init_unchained() internal initializer {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20Upgradeable {\r\n    using SafeMathUpgradeable for uint256;\r\n    using AddressUpgradeable for address;\r\n\r\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IMStableBoostedVault {\r\n    /**\r\n     * @dev Get the RAW balance of a given account\r\n     * @param _account User for which to retrieve balance\r\n     */\r\n    function rawBalanceOf(address _account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Stakes a given amount of the StakingToken for the sender\r\n     * @param _amount Units of StakingToken\r\n     */\r\n    function stake(uint256 _amount) external;\r\n\r\n    /**\r\n     * @dev Stakes a given amount of the StakingToken for a given beneficiary\r\n     * @param _beneficiary Staked tokens are credited to this address\r\n     * @param _amount      Units of StakingToken\r\n     */\r\n    function stake(address _beneficiary, uint256 _amount) external;\r\n\r\n    /**\r\n     * @dev Withdraws stake from pool and claims any unlocked rewards.\r\n     * Note, this function is costly - the args for _claimRewards\r\n     * should be determined off chain and then passed to other fn\r\n     */\r\n    function exit() external;\r\n\r\n    /**\r\n     * @dev Withdraws stake from pool and claims any unlocked rewards.\r\n     * @param _first    Index of the first array element to claim\r\n     * @param _last     Index of the last array element to claim\r\n     */\r\n    function exit(uint256 _first, uint256 _last) external;\r\n\r\n    /**\r\n     * @dev Withdraws given stake amount from the pool\r\n     * @param _amount Units of the staked token to withdraw\r\n     */\r\n    function withdraw(uint256 _amount) external;\r\n\r\n    /**\r\n     * @dev Claims only the tokens that have been immediately unlocked, not including\r\n     * those that are in the lockers.\r\n     */\r\n    function claimReward() external;\r\n\r\n    /**\r\n     * @dev Claims all unlocked rewards for sender.\r\n     * Note, this function is costly - the args for _claimRewards\r\n     * should be determined off chain and then passed to other fn\r\n     */\r\n    function claimRewards() external;\r\n\r\n    /**\r\n     * @dev Claims all unlocked rewards for sender. Both immediately unlocked\r\n     * rewards and also locked rewards past their time lock.\r\n     * @param _first    Index of the first array element to claim\r\n     * @param _last     Index of the last array element to claim\r\n     */\r\n    function claimRewards(uint256 _first, uint256 _last) external;\r\n\r\n    /**\r\n     * @dev Pokes a given account to reset the boost\r\n     */\r\n    function pokeBoost(address _account) external;\r\n\r\n    /**\r\n     * @dev Returned the units of IMMEDIATELY claimable rewards a user has to receive. Note - this\r\n     * does NOT include the majority of rewards which will be locked up.\r\n     * @param _account User address\r\n     * @return Total reward amount earned\r\n     */\r\n    function earned(address _account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Calculates all unclaimed reward data, finding both immediately unlocked rewards\r\n     * and those that have passed their time lock.\r\n     * @param _account User address\r\n     * @return amount Total units of unclaimed rewards\r\n     * @return first Index of the first userReward that has unlocked\r\n     * @return last Index of the last userReward that has unlocked\r\n     */\r\n    function unclaimedRewards(address _account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 amount,\r\n            uint256 first,\r\n            uint256 last\r\n        );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n    Common base for permissioned roles throughout Sett ecosystem\r\n*/\r\ncontract SettAccessControl is Initializable {\r\n    address public governance;\r\n    address public strategist;\r\n    address public keeper;\r\n\r\n    // ===== MODIFIERS =====\r\n    function _onlyGovernance() internal view {\r\n        require(msg.sender == governance, \"onlyGovernance\");\r\n    }\r\n\r\n    function _onlyGovernanceOrStrategist() internal view {\r\n        require(msg.sender == strategist || msg.sender == governance, \"onlyGovernanceOrStrategist\");\r\n    }\r\n\r\n    function _onlyAuthorizedActors() internal view {\r\n        require(msg.sender == keeper || msg.sender == governance, \"onlyAuthorizedActors\");\r\n    }\r\n\r\n    // ===== PERMISSIONED ACTIONS =====\r\n\r\n    /// @notice Change strategist address\r\n    /// @notice Can only be changed by governance itself\r\n    function setStrategist(address _strategist) external {\r\n        _onlyGovernance();\r\n        strategist = _strategist;\r\n    }\r\n\r\n    /// @notice Change keeper address\r\n    /// @notice Can only be changed by governance itself\r\n    function setKeeper(address _keeper) external {\r\n        _onlyGovernance();\r\n        keeper = _keeper;\r\n    }\r\n\r\n    /// @notice Change governance address\r\n    /// @notice Can only be changed by governance itself\r\n    function setGovernance(address _governance) public {\r\n        _onlyGovernance();\r\n        governance = _governance;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n/// @title  MStableVoterProxy\r\n/// @author mStable\r\n/// @notice VoterProxy that deposits into mStable vaults and uses MTA stake to boosts rewards.\r\n/// @dev    Receives MTA from Strategies and Loans in order to bolster Stake. Any MTA held here is\r\n///         assumed to be invested to staking.\r\n///         This is a dumb contract that:\r\n///          - Deposits and withdraws LP tokens from all mStable vaults\r\n///          - Manages the lock in the MTA staking contract\r\n///          - Earns APY on staked MTA and reinvests\r\n///          - Boosts rewards in vault deposits\r\n///          - Migrates to a new Staking contract if necessary\r\ncontract MStableVoterProxy is IMStableVoterProxy, PausableUpgradeable, SettAccessControl {\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n    using SafeMathUpgradeable for uint256;\r\n\r\n    mapping(address => IMStableBoostedVault) public strategyToVault; // strategy => vault\r\n    address[] public strategies;\r\n\r\n    address public badgerGovernance;\r\n    IMStableNexus public nexus; // mStable Nexus maintains record of governor address\r\n    IMStableVotingLockup public votingLockup; // Current MTA staking contract address\r\n\r\n    mapping(address => uint256) public loans; // Outstanding loans made to this contract\r\n    IERC20Upgradeable public constant mta = IERC20Upgradeable(0xa3BeD4E1c75D00fa6f4E5E6922DB7261B5E9AcD2);\r\n\r\n    uint256 public constant MAX_RATE = 10000;\r\n    uint256 public redistributionRate;\r\n\r\n    event LockCreated(uint256 amt, uint256 unlockTime);\r\n    event MtaHarvested(uint256 existing, uint256 harvested, uint256 distributed, uint256 invested);\r\n    event LockExtended(uint256 unlockTime);\r\n    event LockIncreased(uint256 amount);\r\n    event LockExited();\r\n    event LockChanged(address newLock);\r\n    event RedistributionRateChanged(uint256 newRate);\r\n\r\n    event Loaned(address creditor, uint256 amt);\r\n    event LoanRepaid(address creditor, uint256 amt);\r\n\r\n    event StrategyAdded(address strategy, address vault);\r\n\r\n    function initialize(\r\n        address _dualGovernance,\r\n        address _badgerGovernance,\r\n        address _strategist,\r\n        address _keeper,\r\n        address[2] memory _config,\r\n        uint256[1] memory _rates\r\n    ) public initializer {\r\n        __Pausable_init();\r\n        governance = _dualGovernance;\r\n        badgerGovernance = _badgerGovernance;\r\n        strategist = _strategist;\r\n        keeper = _keeper;\r\n\r\n        nexus = IMStableNexus(_config[0]);\r\n        votingLockup = IMStableVotingLockup(_config[1]);\r\n\r\n        redistributionRate = _rates[0];\r\n\r\n        mta.safeApprove(address(votingLockup), type(uint256).max);\r\n    }\r\n\r\n    /// @dev Verifies that the caller is an active strategy and returns the address of the vault\r\n    function _onlyActiveStrategy() internal view returns (IMStableBoostedVault vault) {\r\n        vault = strategyToVault[msg.sender];\r\n        require(address(vault) != address(0), \"onlyStrategy\");\r\n    }\r\n\r\n    /// @dev Callable by either the mStableDAO or the BadgerDAO signers\r\n    function _onlyGovernors() internal view {\r\n        require(msg.sender == badgerGovernance || msg.sender == nexus.governor(), \"onlyGovernors\");\r\n    }\r\n\r\n    /// @dev Callable by either the mStableDAO or the BadgerDAO signers\r\n    function _onlyHarvesters() internal view {\r\n        require(msg.sender == badgerGovernance || msg.sender == nexus.governor() || msg.sender == keeper, \"onlyHarvesters\");\r\n    }\r\n\r\n    /***************************************\r\n                    VOTINGLOCK\r\n    ****************************************/\r\n\r\n    /// @dev Creates a lock in the mStable MTA staking contract, using the mta balance of\r\n    /// this contract, and unlocking at the specified unlock time\r\n    /// @param _unlockTime Time at which the stake will unlock\r\n    function createLock(uint256 _unlockTime) external override {\r\n        _onlyGovernance();\r\n\r\n        uint256 bal = mta.balanceOf(address(this));\r\n        votingLockup.createLock(bal, _unlockTime);\r\n\r\n        emit LockCreated(bal, _unlockTime);\r\n    }\r\n\r\n    /// @dev Claims MTA rewards from Staking, distributes a percentage proportionately to all\r\n    /// active strategies, and reinvests the remainder back into the staking contract.\r\n    /// Also picks up any MTA that was transferred here FROM strategies, and adds this to the lock.\r\n    /// Callable by either mStable or Badger DAO multisigs, or keeper.\r\n    function harvestMta() external override {\r\n        _onlyHarvesters();\r\n\r\n        // balBefore = any MTA that was transferred here as a govMTA % from the stratgies\r\n        uint256 balBefore = mta.balanceOf(address(this));\r\n        votingLockup.claimReward();\r\n        uint256 balAfter = mta.balanceOf(address(this));\r\n        // e.g. (2e18 - 1e18) * 1000 / 10000;\r\n        uint256 redistribute = balAfter.sub(balBefore).mul(redistributionRate).div(MAX_RATE);\r\n        // Redistribute a % of the revenue from staking back to the strategies\r\n        if (redistribute > 0) {\r\n            uint256 len = strategies.length;\r\n            for (uint256 i = 0; i < len; i++) {\r\n                mta.safeTransfer(strategies[i], redistribute.div(len));\r\n            }\r\n        }\r\n        // Increase that lock\r\n        votingLockup.increaseLockAmount(balAfter.sub(redistribute));\r\n\r\n        emit MtaHarvested(balBefore, balAfter.sub(balBefore), redistribute, balAfter.sub(redistribute));\r\n    }\r\n\r\n    /// @dev Simply extends the lock period in staking\r\n    /// @param _unlockTime New time at which the stake will unlock\r\n    function extendLock(uint256 _unlockTime) external override {\r\n        _onlyGovernance();\r\n\r\n        votingLockup.increaseLockLength(_unlockTime);\r\n\r\n        emit LockExtended(_unlockTime);\r\n    }\r\n\r\n    /// @dev Simply extends the lock amount in staking\r\n    function increaseLock() external {\r\n        _onlyGovernance();\r\n\r\n        uint256 bal = mta.balanceOf(address(this));\r\n        votingLockup.increaseLockAmount(bal);\r\n\r\n        emit LockIncreased(bal);\r\n    }\r\n\r\n    /// @dev Exits the lock and keeps MTA in contract\r\n    /// @return mtaBalance Balance of MTA in this contract\r\n    function exitLock() external override returns (uint256 mtaBalance) {\r\n        _onlyGovernors();\r\n\r\n        votingLockup.exit();\r\n\r\n        emit LockExited();\r\n    }\r\n\r\n    /// @dev Changes the address of the VotingLockup\r\n    /// WARNING - this approves mta on the new contract, so should be taken with care\r\n    /// @param _newLock Address of the new VotingLockup\r\n    function changeLockAddress(address _newLock) external override {\r\n        _onlyGovernance();\r\n\r\n        require(votingLockup.balanceOf(address(this)) == 0, \"Active lockup\");\r\n\r\n        votingLockup = IMStableVotingLockup(_newLock);\r\n\r\n        IERC20Upgradeable(mta).safeApprove(_newLock, type(uint256).max);\r\n\r\n        emit LockChanged(_newLock);\r\n    }\r\n\r\n    /// @dev Changes the percentage of MTA earned via staking that gets redistributed to strategies\r\n    /// @param _newRate Scaled pct of earnings to redistribute to strategies, where 100% = 10000\r\n    function changeRedistributionRate(uint256 _newRate) external override {\r\n        _onlyGovernors();\r\n        require(_newRate < MAX_RATE, \"Invalid rate\");\r\n\r\n        redistributionRate = _newRate;\r\n\r\n        emit RedistributionRateChanged(_newRate);\r\n    }\r\n\r\n    /***************************************\r\n                        LOANS\r\n    ****************************************/\r\n\r\n    /// @dev Loans the voter proxy a given amt by transferring and logging\r\n    /// @param _amt Amt to send to the proxy!\r\n    function loan(uint256 _amt) external override {\r\n        require(loans[msg.sender] == 0, \"Existing loan\");\r\n\r\n        mta.safeTransferFrom(msg.sender, address(this), _amt);\r\n        loans[msg.sender] = _amt;\r\n\r\n        emit Loaned(msg.sender, _amt);\r\n    }\r\n\r\n    /// @dev Repays the initially loaned MTA amount to a creditor\r\n    /// @param _creditor Address of the initial creditor\r\n    function repayLoan(address _creditor) external override {\r\n        _onlyGovernors();\r\n\r\n        uint256 loanAmt = loans[_creditor];\r\n        require(loanAmt != 0, \"Non-existing loan\");\r\n\r\n        loans[_creditor] = 0;\r\n        mta.safeTransfer(_creditor, loanAmt);\r\n\r\n        emit LoanRepaid(_creditor, loanAmt);\r\n    }\r\n\r\n    /***************************************\r\n                    STRATEGIES\r\n    ****************************************/\r\n\r\n    /// @dev Adds a new supported strategy, looking up want and approving to vault\r\n    /// @param _strategy Address of the BadgerStrategy\r\n    /// @param _vault Address of the mStable vault\r\n    function supportStrategy(address _strategy, address _vault) external override {\r\n        _onlyGovernance();\r\n\r\n        require(address(strategyToVault[_strategy]) == address(0), \"Strategy already supported\");\r\n\r\n        uint256 len = strategies.length;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            address vaulti = address(strategyToVault[strategies[i]]);\r\n            require(vaulti != _vault, \"Vault already supported\");\r\n        }\r\n\r\n        // Lookup want in strategy\r\n        address want = IStrategy(_strategy).want();\r\n        // Approve spending to vault\r\n        IERC20Upgradeable(want).safeApprove(_vault, type(uint256).max);\r\n        // Whitelist strategy\r\n        strategyToVault[_strategy] = IMStableBoostedVault(_vault);\r\n        strategies.push(_strategy);\r\n\r\n        emit StrategyAdded(_strategy, _vault);\r\n    }\r\n\r\n    /***************************************\r\n                    POOL\r\n    ****************************************/\r\n\r\n    /// @dev Simply stakes in pool\r\n    /// NOTE - Assumes that the want has already been transferred here\r\n    /// @param _amt Amt of want that should be staked in the vault\r\n    function deposit(uint256 _amt) external override {\r\n        IMStableBoostedVault vault = _onlyActiveStrategy();\r\n\r\n        vault.stake(_amt);\r\n    }\r\n\r\n    /// @dev Withdraws balance from vault, returning to strategy\r\n    /// Passes _want to avoid having to read _want again via ext call\r\n    /// @param _want Address of the LP token to return back to sender\r\n    function withdrawAll(address _want) external override {\r\n        IMStableBoostedVault vault = _onlyActiveStrategy();\r\n\r\n        uint256 rawBal = vault.rawBalanceOf(address(this));\r\n        vault.withdraw(rawBal);\r\n        IERC20Upgradeable(_want).safeTransfer(msg.sender, rawBal);\r\n    }\r\n\r\n    /// @dev Withdraws _amt from vault, returning to strategy\r\n    /// Passes _want to avoid having to read _want again via ext call\r\n    /// @param _want Address of the LP token to return back to sender\r\n    /// @param _amt Amount of want to withdraw and return\r\n    function withdrawSome(address _want, uint256 _amt) external override {\r\n        IMStableBoostedVault vault = _onlyActiveStrategy();\r\n\r\n        vault.withdraw(_amt);\r\n        IERC20Upgradeable(_want).safeTransfer(msg.sender, _amt);\r\n    }\r\n\r\n    /// @dev Claims rewards from the matching vault, and returns them to sender.\r\n    /// @return immediateUnlock Amount of tokens that were earned without need for vesting\r\n    /// @return vested Amount of tokens that were earned post-vesting\r\n    function claim() external override returns (uint256 immediateUnlock, uint256 vested) {\r\n        IMStableBoostedVault vault = _onlyActiveStrategy();\r\n\r\n        // Get balance of MTA before (there could be residual MTA here waiting to be reinvested in vMTA)\r\n        uint256 balBefore = mta.balanceOf(address(this));\r\n        // Get MTA ready for immediate unlock (this is a view fn)\r\n        immediateUnlock = vault.earned(address(this));\r\n        // Actually claim rewards - both immediately unlocked as well as post-vesting rewards\r\n        vault.claimRewards();\r\n        // Calc the total amount claimed based on changing bal\r\n        uint256 balAfter = mta.balanceOf(address(this));\r\n        uint256 totalClaimed = balAfter.sub(balBefore);\r\n        // Amount of the claim that was subject to vesting\r\n        vested = totalClaimed.sub(immediateUnlock);\r\n\r\n        mta.safeTransfer(msg.sender, totalClaimed);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"LoanRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"Loaned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLock\",\"type\":\"address\"}],\"name\":\"LockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"LockCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LockExited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"LockExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"existing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distributed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invested\",\"type\":\"uint256\"}],\"name\":\"MtaHarvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"RedistributionRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"StrategyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"badgerGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newLock\",\"type\":\"address\"}],\"name\":\"changeLockAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"changeRedistributionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"immediateUnlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vested\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"createLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mtaBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"extendLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestMta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increaseLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dualGovernance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_badgerGovernance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address[2]\",\"name\":\"_config\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[1]\",\"name\":\"_rates\",\"type\":\"uint256[1]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"loan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mta\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nexus\",\"outputs\":[{\"internalType\":\"contract IMStableNexus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redistributionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creditor\",\"type\":\"address\"}],\"name\":\"repayLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategyToVault\",\"outputs\":[{\"internalType\":\"contract IMStableBoostedVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"supportStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingLockup\",\"outputs\":[{\"internalType\":\"contract IMStableVotingLockup\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_want\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_want\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"withdrawSome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MStableVoterProxy","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://828a4bcdb11ae869d21716059800878343e3064c8457296550c098c198876675"}]}