{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/BondToken_and_GDOTC/util/TransferETHInterface.sol\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.7.1;\r\n\r\ninterface TransferETHInterface {\r\n    receive() external payable;\r\n\r\n    event LogTransferETH(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/BondToken_and_GDOTC/bondToken/BondTokenInterface.sol\r\n\r\npragma solidity 0.7.1;\r\n\r\ninterface BondTokenInterface is IERC20 {\r\n    event LogExpire(uint128 rateNumerator, uint128 rateDenominator, bool firstTime);\r\n\r\n    function mint(address account, uint256 amount) external returns (bool success);\r\n\r\n    function expire(uint128 rateNumerator, uint128 rateDenominator)\r\n        external\r\n        returns (bool firstTime);\r\n\r\n    function simpleBurn(address account, uint256 amount) external returns (bool success);\r\n\r\n    function burn(uint256 amount) external returns (bool success);\r\n\r\n    function burnAll() external returns (uint256 amount);\r\n\r\n    function getRate() external view returns (uint128 rateNumerator, uint128 rateDenominator);\r\n}\r\n\r\n// File: contracts/BondToken_and_GDOTC/oracle/LatestPriceOracleInterface.sol\r\n\r\npragma solidity 0.7.1;\r\n\r\n/**\r\n * @dev Interface of the price oracle.\r\n */\r\ninterface LatestPriceOracleInterface {\r\n    /**\r\n     * @dev Returns `true`if oracle is working.\r\n     */\r\n    function isWorking() external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the last updated price. Decimals is 8.\r\n     **/\r\n    function latestPrice() external returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the timestamp of the last updated price.\r\n     */\r\n    function latestTimestamp() external returns (uint256);\r\n}\r\n\r\n// File: contracts/BondToken_and_GDOTC/oracle/PriceOracleInterface.sol\r\n\r\npragma solidity 0.7.1;\r\n\r\n/**\r\n * @dev Interface of the price oracle.\r\n */\r\ninterface PriceOracleInterface is LatestPriceOracleInterface {\r\n    /**\r\n     * @dev Returns the latest id. The id start from 1 and increments by 1.\r\n     */\r\n    function latestId() external returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the historical price specified by `id`. Decimals is 8.\r\n     */\r\n    function getPrice(uint256 id) external returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the timestamp of historical price specified by `id`.\r\n     */\r\n    function getTimestamp(uint256 id) external returns (uint256);\r\n}\r\n\r\n// File: contracts/BondToken_and_GDOTC/bondMaker/BondMakerInterface.sol\r\n\r\npragma solidity 0.7.1;\r\n\r\ninterface BondMakerInterface {\r\n    event LogNewBond(\r\n        bytes32 indexed bondID,\r\n        address indexed bondTokenAddress,\r\n        uint256 indexed maturity,\r\n        bytes32 fnMapID\r\n    );\r\n\r\n    event LogNewBondGroup(\r\n        uint256 indexed bondGroupID,\r\n        uint256 indexed maturity,\r\n        uint64 indexed sbtStrikePrice,\r\n        bytes32[] bondIDs\r\n    );\r\n\r\n    event LogIssueNewBonds(uint256 indexed bondGroupID, address indexed issuer, uint256 amount);\r\n\r\n    event LogReverseBondGroupToCollateral(\r\n        uint256 indexed bondGroupID,\r\n        address indexed owner,\r\n        uint256 amount\r\n    );\r\n\r\n    event LogExchangeEquivalentBonds(\r\n        address indexed owner,\r\n        uint256 indexed inputBondGroupID,\r\n        uint256 indexed outputBondGroupID,\r\n        uint256 amount\r\n    );\r\n\r\n    event LogLiquidateBond(bytes32 indexed bondID, uint128 rateNumerator, uint128 rateDenominator);\r\n\r\n    function registerNewBond(uint256 maturity, bytes calldata fnMap)\r\n        external\r\n        returns (\r\n            bytes32 bondID,\r\n            address bondTokenAddress,\r\n            bytes32 fnMapID\r\n        );\r\n\r\n    function registerNewBondGroup(bytes32[] calldata bondIDList, uint256 maturity)\r\n        external\r\n        returns (uint256 bondGroupID);\r\n\r\n    function reverseBondGroupToCollateral(uint256 bondGroupID, uint256 amount)\r\n        external\r\n        returns (bool success);\r\n\r\n    function exchangeEquivalentBonds(\r\n        uint256 inputBondGroupID,\r\n        uint256 outputBondGroupID,\r\n        uint256 amount,\r\n        bytes32[] calldata exceptionBonds\r\n    ) external returns (bool);\r\n\r\n    function liquidateBond(uint256 bondGroupID, uint256 oracleHintID)\r\n        external\r\n        returns (uint256 totalPayment);\r\n\r\n    function collateralAddress() external view returns (address);\r\n\r\n    function oracleAddress() external view returns (PriceOracleInterface);\r\n\r\n    function feeTaker() external view returns (address);\r\n\r\n    function decimalsOfBond() external view returns (uint8);\r\n\r\n    function decimalsOfOraclePrice() external view returns (uint8);\r\n\r\n    function maturityScale() external view returns (uint256);\r\n\r\n    function nextBondGroupID() external view returns (uint256);\r\n\r\n    function getBond(bytes32 bondID)\r\n        external\r\n        view\r\n        returns (\r\n            address bondAddress,\r\n            uint256 maturity,\r\n            uint64 solidStrikePrice,\r\n            bytes32 fnMapID\r\n        );\r\n\r\n    function getFnMap(bytes32 fnMapID) external view returns (bytes memory fnMap);\r\n\r\n    function getBondGroup(uint256 bondGroupID)\r\n        external\r\n        view\r\n        returns (bytes32[] memory bondIDs, uint256 maturity);\r\n\r\n    function generateFnMapID(bytes calldata fnMap) external view returns (bytes32 fnMapID);\r\n\r\n    function generateBondID(uint256 maturity, bytes calldata fnMap)\r\n        external\r\n        view\r\n        returns (bytes32 bondID);\r\n}\r\n\r\n// File: contracts/Interfaces/StrategyInterface.sol\r\n\r\npragma solidity 0.7.1;\r\n\r\ninterface SimpleStrategyInterface {\r\n    function calcNextMaturity() external view returns (uint256 nextTimeStamp);\r\n\r\n    function calcCallStrikePrice(\r\n        uint256 currentPriceE8,\r\n        uint64 priceUnit,\r\n        bool isReversedOracle\r\n    ) external pure returns (uint256 callStrikePrice);\r\n\r\n    function calcRoundPrice(\r\n        uint256 price,\r\n        uint64 priceUnit,\r\n        uint8 divisor\r\n    ) external pure returns (uint256 roundedPrice);\r\n\r\n    function getTrancheBonds(\r\n        BondMakerInterface bondMaker,\r\n        address aggregatorAddress,\r\n        uint256 issueBondGroupIdOrStrikePrice,\r\n        uint256 price,\r\n        uint256[] calldata bondGroupList,\r\n        uint64 priceUnit,\r\n        bool isReversedOracle\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256 issueAmount,\r\n            uint256 ethAmount,\r\n            uint256[2] memory IDAndAmountOfBurn\r\n        );\r\n\r\n    function getCurrentStrikePrice(\r\n        uint256 currentPriceE8,\r\n        uint64 priceUnit,\r\n        bool isReversedOracle\r\n    ) external pure returns (uint256);\r\n\r\n    function getCurrentSpread(\r\n        address owner,\r\n        address oracleAddress,\r\n        bool isReversedOracle\r\n    ) external view returns (int16);\r\n\r\n    function registerCurrentFeeBase(\r\n        int16 currentFeeBase,\r\n        uint256 currentCollateralPerToken,\r\n        uint256 nextCollateralPerToken,\r\n        address owner,\r\n        address oracleAddress,\r\n        bool isReversedOracle\r\n    ) external;\r\n}\r\n\r\n// File: contracts/Interfaces/VolatilityOracleInterface.sol\r\n\r\npragma solidity 0.7.1;\r\n\r\ninterface VolatilityOracleInterface {\r\n    function getVolatility(uint64 untilMaturity) external view returns (uint64 volatilityE8);\r\n}\r\n\r\n// File: contracts/BondToken_and_GDOTC/bondPricer/Enums.sol\r\n\r\npragma solidity 0.7.1;\r\n\r\n/**\r\n    Pure SBT:\r\n        ___________\r\n       /\r\n      /\r\n     /\r\n    /\r\n\r\n    LBT Shape:\r\n              /\r\n             /\r\n            /\r\n           /\r\n    ______/\r\n\r\n    SBT Shape:\r\n              ______\r\n             /\r\n            /\r\n    _______/\r\n\r\n    Triangle:\r\n              /\\\r\n             /  \\\r\n            /    \\\r\n    _______/      \\________\r\n */\r\nenum BondType {NONE, PURE_SBT, SBT_SHAPE, LBT_SHAPE, TRIANGLE}\r\n\r\n// File: contracts/BondToken_and_GDOTC/bondPricer/BondPricerInterface.sol\r\n\r\npragma solidity 0.7.1;\r\n\r\ninterface BondPricerInterface {\r\n    /**\r\n     * @notice Calculate bond price and leverage by black-scholes formula.\r\n     * @param bondType type of target bond.\r\n     * @param points coodinates of polyline which is needed for price calculation\r\n     * @param spotPrice is a oracle price.\r\n     * @param volatilityE8 is a oracle volatility.\r\n     * @param untilMaturity Remaining period of target bond in second\r\n     **/\r\n    function calcPriceAndLeverage(\r\n        BondType bondType,\r\n        uint256[] calldata points,\r\n        int256 spotPrice,\r\n        int256 volatilityE8,\r\n        int256 untilMaturity\r\n    ) external view returns (uint256 price, uint256 leverageE8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: contracts/Interfaces/ExchangeInterface.sol\r\n\r\npragma solidity 0.7.1;\r\n\r\ninterface ExchangeInterface {\r\n    function changeSpread(int16 spread) external;\r\n\r\n    function createVsBondPool(\r\n        BondMakerInterface bondMakerForUserAddress,\r\n        VolatilityOracleInterface volatilityOracleAddress,\r\n        BondPricerInterface bondPricerForUserAddress,\r\n        BondPricerInterface bondPricerAddress,\r\n        int16 feeBaseE4\r\n    ) external returns (bytes32 poolID);\r\n\r\n    function createVsErc20Pool(\r\n        ERC20 swapPairAddress,\r\n        LatestPriceOracleInterface swapPairOracleAddress,\r\n        BondPricerInterface bondPricerAddress,\r\n        int16 feeBaseE4,\r\n        bool isBondSale\r\n    ) external returns (bytes32 poolID);\r\n\r\n    function createVsEthPool(\r\n        LatestPriceOracleInterface ethOracleAddress,\r\n        BondPricerInterface bondPricerAddress,\r\n        int16 feeBaseE4,\r\n        bool isBondSale\r\n    ) external returns (bytes32 poolID);\r\n\r\n    function updateVsBondPool(\r\n        bytes32 poolID,\r\n        VolatilityOracleInterface volatilityOracleAddress,\r\n        BondPricerInterface bondPricerForUserAddress,\r\n        BondPricerInterface bondPricerAddress,\r\n        int16 feeBaseE4\r\n    ) external;\r\n\r\n    function updateVsErc20Pool(\r\n        bytes32 poolID,\r\n        LatestPriceOracleInterface swapPairOracleAddress,\r\n        BondPricerInterface bondPricerAddress,\r\n        int16 feeBaseE4\r\n    ) external;\r\n\r\n    function updateVsEthPool(\r\n        bytes32 poolID,\r\n        LatestPriceOracleInterface ethOracleAddress,\r\n        BondPricerInterface bondPricerAddress,\r\n        int16 feeBaseE4\r\n    ) external;\r\n\r\n    function generateVsBondPoolID(address seller, address bondMakerForUser)\r\n        external\r\n        view\r\n        returns (bytes32 poolID);\r\n\r\n    function generateVsErc20PoolID(\r\n        address seller,\r\n        address swapPairAddress,\r\n        bool isBondSale\r\n    ) external view returns (bytes32 poolID);\r\n\r\n    function generateVsEthPoolID(address seller, bool isBondSale)\r\n        external\r\n        view\r\n        returns (bytes32 poolID);\r\n\r\n    function withdrawEth() external;\r\n\r\n    function depositEth() external payable;\r\n\r\n    function ethAllowance(address owner) external view returns (uint256 amount);\r\n\r\n    function bondMakerAddress() external view returns (BondMakerInterface);\r\n}\r\n\r\n// File: contracts/Interfaces/SimpleAggragatorInterface.sol\r\n\r\npragma experimental ABIEncoderV2;\r\npragma solidity 0.7.1;\r\n\r\ninterface SimpleAggregatorInterface {\r\n    struct TotalReward {\r\n        uint64 term;\r\n        uint64 value;\r\n    }\r\n\r\n    enum AggregatorPhase {BEFORE_START, ACTIVE, COOL_TIME, AFTER_MATURITY, EXPIRED}\r\n\r\n    function renewMaturity() external;\r\n\r\n    function removeLiquidity(uint128 amount) external returns (bool success);\r\n\r\n    function settleTokens() external returns (uint256 unsentETH, uint256 unsentToken);\r\n\r\n    function changeSpread() external;\r\n\r\n    function liquidateBonds() external;\r\n\r\n    function trancheBonds() external;\r\n\r\n    function claimReward() external;\r\n\r\n    function addSuitableBondGroup() external returns (uint256 bondGroupID);\r\n\r\n    function getCollateralAddress() external view returns (address);\r\n\r\n    function getCollateralAmount() external view returns (uint256);\r\n\r\n    function getCollateralDecimal() external view returns (int16);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    function getExpectedBalance(address user, bool hasReservation)\r\n        external\r\n        view\r\n        returns (uint256 expectedBalance);\r\n\r\n    function getCurrentPhase() external view returns (AggregatorPhase);\r\n\r\n    function updateStartBondGroupId() external;\r\n\r\n    function getInfo()\r\n        external\r\n        view\r\n        returns (\r\n            address bondMaker,\r\n            address strategy,\r\n            address dotc,\r\n            address bondPricerAddress,\r\n            address oracleAddress,\r\n            address rewardTokenAddress,\r\n            address registratorAddress,\r\n            address owner,\r\n            bool reverseOracle,\r\n            uint64 basePriceUnit,\r\n            uint128 maxSupply\r\n        );\r\n\r\n    function getCurrentStatus()\r\n        external\r\n        view\r\n        returns (\r\n            uint256 term,\r\n            int16 feeBase,\r\n            uint32 uncheckbondGroupId,\r\n            uint64 unit,\r\n            uint64 trancheTime,\r\n            bool isDanger\r\n        );\r\n\r\n    function getTermInfo(uint256 term)\r\n        external\r\n        view\r\n        returns (\r\n            uint64 maturity,\r\n            uint64 solidStrikePrice,\r\n            bytes32 SBTID\r\n        );\r\n\r\n    function getBondGroupIDFromTermAndPrice(uint256 term, uint256 price)\r\n        external\r\n        view\r\n        returns (uint256 bondGroupID);\r\n\r\n    function getRewardAmount(address user) external view returns (uint64);\r\n\r\n    function getTotalRewards() external view returns (TotalReward[] memory);\r\n\r\n    function isTotalSupplySafe() external view returns (bool);\r\n\r\n    function getTotalUnmovedAssets() external view returns (uint256, uint256);\r\n\r\n    function totalShareData(uint256 term)\r\n        external\r\n        view\r\n        returns (uint128 totalShare, uint128 totalCollateralPerToken);\r\n\r\n    function getCollateralPerToken(uint256 term) external view returns (uint256);\r\n\r\n    function getBondGroupIdFromStrikePrice(uint256 term, uint256 strikePrice)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getBalanceData(address user)\r\n        external\r\n        view\r\n        returns (\r\n            uint128 amount,\r\n            uint64 term,\r\n            uint64 rewardAmount\r\n        );\r\n\r\n    function getIssuableBondGroups() external view returns (uint256[] memory);\r\n\r\n    function getLiquidationData(uint256 term)\r\n        external\r\n        view\r\n        returns (\r\n            bool isLiquidated,\r\n            uint32 liquidatedBondGroupID,\r\n            uint32 endBondGroupId\r\n        );\r\n}\r\n\r\n// File: contracts/BondToken_and_GDOTC/util/Polyline.sol\r\n\r\npragma solidity 0.7.1;\r\n\r\ncontract Polyline {\r\n    struct Point {\r\n        uint64 x; // Value of the x-axis of the x-y plane\r\n        uint64 y; // Value of the y-axis of the x-y plane\r\n    }\r\n\r\n    struct LineSegment {\r\n        Point left; // The left end of the line definition range\r\n        Point right; // The right end of the line definition range\r\n    }\r\n\r\n    /**\r\n     * @notice Return the value of y corresponding to x on the given line. line in the form of\r\n     * a rational number (numerator / denominator).\r\n     * If you treat a line as a line segment instead of a line, you should run\r\n     * includesDomain(line, x) to check whether x is included in the line's domain or not.\r\n     * @dev To guarantee accuracy, the bit length of the denominator must be greater than or equal\r\n     * to the bit length of x, and the bit length of the numerator must be greater than or equal\r\n     * to the sum of the bit lengths of x and y.\r\n     */\r\n    function _mapXtoY(LineSegment memory line, uint64 x)\r\n        internal\r\n        pure\r\n        returns (uint128 numerator, uint64 denominator)\r\n    {\r\n        int256 x1 = int256(line.left.x);\r\n        int256 y1 = int256(line.left.y);\r\n        int256 x2 = int256(line.right.x);\r\n        int256 y2 = int256(line.right.y);\r\n\r\n        require(x2 > x1, \"must be left.x < right.x\");\r\n\r\n        denominator = uint64(x2 - x1);\r\n\r\n        // Calculate y = ((x2 - x) * y1 + (x - x1) * y2) / (x2 - x1)\r\n        // in the form of a fraction (numerator / denominator).\r\n        int256 n = (x - x1) * y2 + (x2 - x) * y1;\r\n\r\n        require(n >= 0, \"underflow n\");\r\n        require(n < 2**128, \"system error: overflow n\");\r\n        numerator = uint128(n);\r\n    }\r\n\r\n    /**\r\n     * @notice Checking that a line segment is a valid format.\r\n     */\r\n    function assertLineSegment(LineSegment memory segment) internal pure {\r\n        uint64 x1 = segment.left.x;\r\n        uint64 x2 = segment.right.x;\r\n        require(x1 < x2, \"must be left.x < right.x\");\r\n    }\r\n\r\n    /**\r\n     * @notice Checking that a polyline is a valid format.\r\n     */\r\n    function assertPolyline(LineSegment[] memory polyline) internal pure {\r\n        uint256 numOfSegment = polyline.length;\r\n        require(numOfSegment != 0, \"polyline must not be empty array\");\r\n\r\n        LineSegment memory leftSegment = polyline[0]; // mutable\r\n        int256 gradientNumerator = int256(leftSegment.right.y) - int256(leftSegment.left.y); // mutable\r\n        int256 gradientDenominator = int256(leftSegment.right.x) - int256(leftSegment.left.x); // mutable\r\n\r\n        // The beginning of the first line segment's domain is 0.\r\n        require(\r\n            leftSegment.left.x == uint64(0),\r\n            \"the x coordinate of left end of the first segment must be 0\"\r\n        );\r\n        // The value of y when x is 0 is 0.\r\n        require(\r\n            leftSegment.left.y == uint64(0),\r\n            \"the y coordinate of left end of the first segment must be 0\"\r\n        );\r\n\r\n        // Making sure that the first line segment is a correct format.\r\n        assertLineSegment(leftSegment);\r\n\r\n        // The end of the domain of a segment and the beginning of the domain of the adjacent\r\n        // segment must coincide.\r\n        LineSegment memory rightSegment; // mutable\r\n        for (uint256 i = 1; i < numOfSegment; i++) {\r\n            rightSegment = polyline[i];\r\n\r\n            // Make sure that the i-th line segment is a correct format.\r\n            assertLineSegment(rightSegment);\r\n\r\n            // Checking that the x-coordinates are same.\r\n            require(\r\n                leftSegment.right.x == rightSegment.left.x,\r\n                \"given polyline has an undefined domain.\"\r\n            );\r\n\r\n            // Checking that the y-coordinates are same.\r\n            require(\r\n                leftSegment.right.y == rightSegment.left.y,\r\n                \"given polyline is not a continuous function\"\r\n            );\r\n\r\n            int256 nextGradientNumerator = int256(rightSegment.right.y) -\r\n                int256(rightSegment.left.y);\r\n            int256 nextGradientDenominator = int256(rightSegment.right.x) -\r\n                int256(rightSegment.left.x);\r\n            require(\r\n                nextGradientNumerator * gradientDenominator !=\r\n                    nextGradientDenominator * gradientNumerator,\r\n                \"the sequential segments must not have the same gradient\"\r\n            );\r\n\r\n            leftSegment = rightSegment;\r\n            gradientNumerator = nextGradientNumerator;\r\n            gradientDenominator = nextGradientDenominator;\r\n        }\r\n\r\n        // rightSegment is lastSegment\r\n\r\n        // About the last line segment.\r\n        require(\r\n            gradientNumerator >= 0 && gradientNumerator <= gradientDenominator,\r\n            \"the gradient of last line segment must be non-negative, and equal to or less than 1\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice zip a LineSegment structure to uint256\r\n     * @return zip uint256( 0 ... 0 | x1 | y1 | x2 | y2 )\r\n     */\r\n    function zipLineSegment(LineSegment memory segment) internal pure returns (uint256 zip) {\r\n        uint256 x1U256 = uint256(segment.left.x) << (64 + 64 + 64); // uint64\r\n        uint256 y1U256 = uint256(segment.left.y) << (64 + 64); // uint64\r\n        uint256 x2U256 = uint256(segment.right.x) << 64; // uint64\r\n        uint256 y2U256 = uint256(segment.right.y); // uint64\r\n        zip = x1U256 | y1U256 | x2U256 | y2U256;\r\n    }\r\n\r\n    /**\r\n     * @notice unzip uint256 to a LineSegment structure\r\n     */\r\n    function unzipLineSegment(uint256 zip) internal pure returns (LineSegment memory) {\r\n        uint64 x1 = uint64(zip >> (64 + 64 + 64));\r\n        uint64 y1 = uint64(zip >> (64 + 64));\r\n        uint64 x2 = uint64(zip >> 64);\r\n        uint64 y2 = uint64(zip);\r\n        return LineSegment({left: Point({x: x1, y: y1}), right: Point({x: x2, y: y2})});\r\n    }\r\n\r\n    /**\r\n     * @notice unzip the fnMap to uint256[].\r\n     */\r\n    function decodePolyline(bytes memory fnMap) internal pure returns (uint256[] memory) {\r\n        return abi.decode(fnMap, (uint256[]));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/SafeCast.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\r\n * checks.\r\n *\r\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n * reverting the transaction when such an operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n *\r\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\r\n * all math on `uint256` and `int256` and then downcasting.\r\n */\r\nlibrary SafeCast {\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(value < 2**128, \"SafeCast: value doesn't fit in 128 bits\");\r\n        return uint128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(value < 2**64, \"SafeCast: value doesn't fit in 64 bits\");\r\n        return uint64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(value < 2**32, \"SafeCast: value doesn't fit in 32 bits\");\r\n        return uint32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(value < 2**16, \"SafeCast: value doesn't fit in 16 bits\");\r\n        return uint16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(value < 2**8, \"SafeCast: value doesn't fit in 8 bits\");\r\n        return uint8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0.\r\n     */\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int128 from int256, reverting on\r\n     * overflow (when the input is less than smallest int128 or\r\n     * greater than largest int128).\r\n     *\r\n     * Counterpart to Solidity's `int128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt128(int256 value) internal pure returns (int128) {\r\n        require(value >= -2**127 && value < 2**127, \"SafeCast: value doesn't fit in 128 bits\");\r\n        return int128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int64 from int256, reverting on\r\n     * overflow (when the input is less than smallest int64 or\r\n     * greater than largest int64).\r\n     *\r\n     * Counterpart to Solidity's `int64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt64(int256 value) internal pure returns (int64) {\r\n        require(value >= -2**63 && value < 2**63, \"SafeCast: value doesn't fit in 64 bits\");\r\n        return int64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int32 from int256, reverting on\r\n     * overflow (when the input is less than smallest int32 or\r\n     * greater than largest int32).\r\n     *\r\n     * Counterpart to Solidity's `int32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt32(int256 value) internal pure returns (int32) {\r\n        require(value >= -2**31 && value < 2**31, \"SafeCast: value doesn't fit in 32 bits\");\r\n        return int32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int16 from int256, reverting on\r\n     * overflow (when the input is less than smallest int16 or\r\n     * greater than largest int16).\r\n     *\r\n     * Counterpart to Solidity's `int16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt16(int256 value) internal pure returns (int16) {\r\n        require(value >= -2**15 && value < 2**15, \"SafeCast: value doesn't fit in 16 bits\");\r\n        return int16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int8 from int256, reverting on\r\n     * overflow (when the input is less than smallest int8 or\r\n     * greater than largest int8).\r\n     *\r\n     * Counterpart to Solidity's `int8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt8(int256 value) internal pure returns (int8) {\r\n        require(value >= -2**7 && value < 2**7, \"SafeCast: value doesn't fit in 8 bits\");\r\n        return int8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\r\n        return int256(value);\r\n    }\r\n}\r\n\r\n// File: contracts/Strategy/StrategyForSimpleAggregator.sol\r\n\r\npragma solidity 0.7.1;\r\n\r\ncontract StrategyForSimpleAggregator is SimpleStrategyInterface, Polyline {\r\n    using SafeMath for uint256;\r\n    using SafeCast for uint256;\r\n    struct FeeInfo {\r\n        int16 currentFeeBase;\r\n        int32 upwardDifference;\r\n        int32 downwardDifference;\r\n    }\r\n    uint256 constant WEEK_LENGTH = 3;\r\n    mapping(bytes32 => address[]) public aggregators;\r\n    mapping(bytes32 => FeeInfo) public feeBases;\r\n    uint256 internal immutable TERM_INTERVAL;\r\n    uint256 internal immutable TERM_CORRECTION_FACTOR;\r\n    int16 constant INITIAL_FEEBASE = 250;\r\n\r\n    constructor(uint256 termInterval, uint256 termCF) {\r\n        TERM_INTERVAL = termInterval;\r\n        TERM_CORRECTION_FACTOR = termCF;\r\n    }\r\n\r\n    /**\r\n     * @notice Return next maturity.(Default: Friday 3 p.m UTC within 3 weeks )\r\n     */\r\n    function calcNextMaturity() public view override returns (uint256 nextTimeStamp) {\r\n        uint256 week = (block.timestamp - TERM_CORRECTION_FACTOR).div(TERM_INTERVAL);\r\n        nextTimeStamp = ((week + WEEK_LENGTH) * TERM_INTERVAL) + (TERM_CORRECTION_FACTOR);\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the bond token amount to be issued/burned.\r\n     * @param issueBondGroupId Bond group ID to be issued\r\n     * @param bondGroupList Determine bond group ID to be burned from this list.\r\n     */\r\n    function getTrancheBonds(\r\n        BondMakerInterface bondMaker,\r\n        address aggregatorAddress,\r\n        uint256 issueBondGroupId,\r\n        uint256 price,\r\n        uint256[] calldata bondGroupList,\r\n        uint64 priceUnit,\r\n        bool isReversedOracle\r\n    )\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (\r\n            uint256 issueAmount,\r\n            uint256,\r\n            uint256[2] memory IDAndAmountOfBurn\r\n        )\r\n    {\r\n        price = calcRoundPrice(price, priceUnit, 1);\r\n        uint256 baseAmount = _getBaseAmount(SimpleAggregatorInterface(aggregatorAddress));\r\n        for (uint64 i = 0; i < bondGroupList.length; i++) {\r\n            (issueAmount, ) = _getLBTStrikePrice(bondMaker, bondGroupList[i], isReversedOracle);\r\n            // If Call option strike price is different from current price by priceUnit * 5,\r\n            // this bond group becomes target of burn.\r\n            if ((issueAmount > price + priceUnit * 5 || issueAmount < price.sub(priceUnit * 5))) {\r\n                uint256 balance = _getMinBondAmount(bondMaker, bondGroupList[i], aggregatorAddress);\r\n                // If `balance` is larger than that of current target bond group,\r\n                // change the target bond group\r\n                if (balance > baseAmount / 2 && balance > IDAndAmountOfBurn[1]) {\r\n                    IDAndAmountOfBurn[0] = bondGroupList[i];\r\n                    IDAndAmountOfBurn[1] = balance;\r\n                }\r\n            }\r\n        }\r\n        {\r\n            uint256 balance = _getMinBondAmount(bondMaker, issueBondGroupId, aggregatorAddress);\r\n            baseAmount = baseAmount + (IDAndAmountOfBurn[1] / 5);\r\n            if (balance < baseAmount && issueBondGroupId != 0) {\r\n                issueAmount = baseAmount - balance;\r\n            } else {\r\n                issueAmount = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Register feebase for each type of aggregator.\r\n     * Fee base is shared among the same type of aggregators.\r\n     */\r\n    function registerCurrentFeeBase(\r\n        int16 currentFeeBase,\r\n        uint256 currentCollateralPerToken,\r\n        uint256 nextCollateralPerToken,\r\n        address owner,\r\n        address oracleAddress,\r\n        bool isReversedOracle\r\n    ) public override {\r\n        bytes32 aggregatorID = generateAggregatorID(owner, oracleAddress, isReversedOracle);\r\n        int16 feeBase = _calcFeeBase(\r\n            currentFeeBase,\r\n            currentCollateralPerToken,\r\n            nextCollateralPerToken,\r\n            feeBases[aggregatorID].upwardDifference,\r\n            feeBases[aggregatorID].downwardDifference\r\n        );\r\n        address[] memory aggregatorAddresses = aggregators[aggregatorID];\r\n        require(_isValidAggregator(aggregatorAddresses), \"sender is invalid aggregator\");\r\n        if (feeBase < INITIAL_FEEBASE) {\r\n            feeBases[aggregatorID].currentFeeBase = INITIAL_FEEBASE;\r\n        } else if (feeBase >= 1000) {\r\n            feeBases[aggregatorID].currentFeeBase = 999;\r\n        } else {\r\n            feeBases[aggregatorID].currentFeeBase = feeBase;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice If CollateralPerToken amount increases by 5% or more, reduce currentFeeBase by downwardDifference.\r\n     * If CollateralPerToken amount decreases by 5% or more, increase currentFeeBase by upwardDifference.\r\n     */\r\n    function _calcFeeBase(\r\n        int16 currentFeeBase,\r\n        uint256 currentCollateralPerToken,\r\n        uint256 nextCollateralPerToken,\r\n        int32 upwardDifference,\r\n        int32 downwardDifference\r\n    )\r\n        internal\r\n        pure\r\n        returns (\r\n            int16\r\n        )\r\n    {\r\n        if (\r\n            nextCollateralPerToken.mul(100).div(105) > currentCollateralPerToken &&\r\n            currentFeeBase > downwardDifference\r\n        ) {\r\n            return int16(currentFeeBase - downwardDifference);\r\n        } else if (nextCollateralPerToken.mul(105).div(100) < currentCollateralPerToken) {\r\n            return int16(currentFeeBase + upwardDifference);\r\n        }\r\n        return currentFeeBase;\r\n    }\r\n\r\n    function _isValidAggregator(address[] memory aggregatorAddresses) internal view returns (bool) {\r\n        for (uint256 i = 0; i < aggregatorAddresses.length; i++) {\r\n            if (aggregatorAddresses[i] == msg.sender) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice Register addresses of aggregators for each type of price feed\r\n     * @notice Aggregator owner should register aggregators for fee base registration\r\n     */\r\n    function registerAggregators(\r\n        address oracleAddress,\r\n        bool isReversedOracle,\r\n        address[] calldata aggregatorAddresses,\r\n        int32 upwardDifference,\r\n        int32 downwardDifference\r\n    ) external {\r\n        bytes32 aggregatorID = generateAggregatorID(msg.sender, oracleAddress, isReversedOracle);\r\n        require(aggregators[aggregatorID].length == 0, \"This aggregator ID is already registered\");\r\n        aggregators[aggregatorID] = aggregatorAddresses;\r\n        feeBases[aggregatorID] = FeeInfo(INITIAL_FEEBASE, upwardDifference, downwardDifference);\r\n    }\r\n\r\n    function generateAggregatorID(\r\n        address owner,\r\n        address oracleAddress,\r\n        bool isReversedOracle\r\n    ) public pure returns (bytes32) {\r\n        return keccak256(abi.encode(owner, oracleAddress, isReversedOracle));\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate call option price for the current price\r\n     * If reversed oracle is set to aggregator, return reversed strike price\r\n     */\r\n    function calcCallStrikePrice(\r\n        uint256 currentPriceE8,\r\n        uint64 priceUnit,\r\n        bool isReversedOracle\r\n    ) external pure override returns (uint256 callStrikePrice) {\r\n        if (isReversedOracle) {\r\n            callStrikePrice = _getReversedValue(\r\n                calcRoundPrice(currentPriceE8, priceUnit, 1),\r\n                isReversedOracle\r\n            );\r\n        } else {\r\n            callStrikePrice = calcRoundPrice(currentPriceE8, priceUnit, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the valid strike price for the new period.\r\n     * @dev SBT strike price is the half of current price.\r\n     * If reversed oracle is set to aggregator, reversed value is returned.\r\n     */\r\n    function getCurrentStrikePrice(\r\n        uint256 currentPriceE8,\r\n        uint64 priceUnit,\r\n        bool isReversedOracle\r\n    ) external pure override returns (uint256 strikePrice) {\r\n        if (isReversedOracle) {\r\n            strikePrice = _getReversedValue(\r\n                calcRoundPrice(currentPriceE8 * 2, priceUnit, 1),\r\n                isReversedOracle\r\n            );\r\n        } else {\r\n            strikePrice = calcRoundPrice(currentPriceE8, priceUnit, 2);\r\n        }\r\n        return strikePrice;\r\n    }\r\n\r\n    function getCurrentSpread(\r\n        address owner,\r\n        address oracleAddress,\r\n        bool isReversedOracle\r\n    ) public view override returns (int16) {\r\n        bytes32 aggregatorID = generateAggregatorID(owner, oracleAddress, isReversedOracle);\r\n        if (feeBases[aggregatorID].currentFeeBase == 0) {\r\n            return INITIAL_FEEBASE;\r\n        }\r\n        return feeBases[aggregatorID].currentFeeBase;\r\n    }\r\n\r\n    function _getReversedValue(uint256 value, bool isReversedOracle)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (!isReversedOracle) {\r\n            return value;\r\n        } else {\r\n            return 10**16 / value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate base bond amount of issue/burn\r\n     */\r\n    function _getBaseAmount(SimpleAggregatorInterface aggregator) internal view returns (uint256) {\r\n        uint256 collateralAmount = aggregator.getCollateralAmount();\r\n        int16 decimalGap = int16(aggregator.getCollateralDecimal()) - 8;\r\n        return _applyDecimalGap(collateralAmount.div(5), decimalGap);\r\n    }\r\n\r\n    function _applyDecimalGap(uint256 amount, int16 decimalGap) internal pure returns (uint256) {\r\n        if (decimalGap < 0) {\r\n            return amount.mul(10**uint256(decimalGap * -1));\r\n        } else {\r\n            return amount / (10**uint256(decimalGap));\r\n        }\r\n    }\r\n\r\n    function calcRoundPrice(\r\n        uint256 price,\r\n        uint64 priceUnit,\r\n        uint8 divisor\r\n    ) public pure override returns (uint256 roundedPrice) {\r\n        roundedPrice = price.div(priceUnit * divisor).mul(priceUnit);\r\n    }\r\n\r\n    function getFeeInfo(\r\n        address owner,\r\n        address oracleAddress,\r\n        bool isReversedOracle\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            int16 currentFeeBase,\r\n            int32 upwardDifference,\r\n            int32 downwardDifference\r\n        )\r\n    {\r\n        bytes32 aggregatorID = generateAggregatorID(owner, oracleAddress, isReversedOracle);\r\n        return (\r\n            feeBases[aggregatorID].currentFeeBase,\r\n            feeBases[aggregatorID].upwardDifference,\r\n            feeBases[aggregatorID].downwardDifference\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Get LBT strike price in Collateral / USD\r\n     */\r\n    function _getLBTStrikePrice(\r\n        BondMakerInterface bondMaker,\r\n        uint256 bondGroupID,\r\n        bool isReversedOracle\r\n    ) public view returns (uint128, address) {\r\n        (bytes32[] memory bondIDs, ) = bondMaker.getBondGroup(bondGroupID);\r\n        (address bondAddress, , , bytes32 fnMapID) = bondMaker.getBond(bondIDs[1]);\r\n        bytes memory fnMap = bondMaker.getFnMap(fnMapID);\r\n        uint256[] memory zippedLines = decodePolyline(fnMap);\r\n        LineSegment memory secondLine = unzipLineSegment(zippedLines[1]);\r\n        return (\r\n            _getReversedValue(uint256(secondLine.left.x), isReversedOracle).toUint128(),\r\n            bondAddress\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Get minimum bond amount in the bond group\r\n     */\r\n    function _getMinBondAmount(\r\n        BondMakerInterface bondMaker,\r\n        uint256 bondGroupID,\r\n        address aggregatorAddress\r\n    ) internal view returns (uint256 balance) {\r\n        (bytes32[] memory bondIDs, ) = bondMaker.getBondGroup(bondGroupID);\r\n        for (uint256 i = 0; i < bondIDs.length; i++) {\r\n            (address bondAddress, , , ) = bondMaker.getBond(bondIDs[i]);\r\n            uint256 bondBalance = IERC20(bondAddress).balanceOf(aggregatorAddress);\r\n            if (i == 0) {\r\n                balance = bondBalance;\r\n            } else if (balance > bondBalance) {\r\n                balance = bondBalance;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Strategy/StrategyForSimpleAggregatorETH.sol\r\n\r\npragma solidity 0.7.1;\r\n\r\ncontract StrategyForSimpleAggregatorETH is StrategyForSimpleAggregator {\r\n    using SafeMath for uint256;\r\n    ExchangeInterface internal immutable exchange;\r\n\r\n    constructor(\r\n        ExchangeInterface _exchange,\r\n        uint256 termInterval,\r\n        uint256 termCF\r\n    ) StrategyForSimpleAggregator(termInterval, termCF) {\r\n        exchange = _exchange;\r\n        require(address(_exchange) != address(0), \"_exchange cannot be zero\");\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the bond token amount to be issued/burned.\r\n     * @param issueBondGroupId Bond group ID to be issued\r\n     * @param bondGroupList Determine bond group ID to be burned from this list.\r\n     * @param ethAmount ETH amount to be depositted to GDOTC (if aggregator is ETH aggregator)\r\n     */\r\n    function getTrancheBonds(\r\n        BondMakerInterface bondMaker,\r\n        address aggregatorAddress,\r\n        uint256 issueBondGroupId,\r\n        uint256 price,\r\n        uint256[] calldata bondGroupList,\r\n        uint64 priceUnit,\r\n        bool isReversedOracle\r\n    )\r\n        public\r\n        view\r\n        override\r\n        returns (\r\n            uint256 issueAmount,\r\n            uint256 ethAmount,\r\n            uint256[2] memory IDAndAmountOfBurn\r\n        )\r\n    {\r\n        if (SimpleAggregatorInterface(aggregatorAddress).getCollateralAddress() == address(0)) {\r\n            uint256 currentDepositAmount = exchange.ethAllowance(aggregatorAddress);\r\n            uint256 baseETHAmount = aggregatorAddress.balance.div(10);\r\n            if (currentDepositAmount < baseETHAmount) {\r\n                ethAmount = baseETHAmount.sub(currentDepositAmount);\r\n            }\r\n        }\r\n\r\n        (issueAmount, , IDAndAmountOfBurn) = super.getTrancheBonds(\r\n            bondMaker,\r\n            aggregatorAddress,\r\n            issueBondGroupId,\r\n            price,\r\n            bondGroupList,\r\n            priceUnit,\r\n            isReversedOracle\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ExchangeInterface\",\"name\":\"_exchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termCF\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract BondMakerInterface\",\"name\":\"bondMaker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bondGroupID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isReversedOracle\",\"type\":\"bool\"}],\"name\":\"_getLBTStrikePrice\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"aggregators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPriceE8\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"priceUnit\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isReversedOracle\",\"type\":\"bool\"}],\"name\":\"calcCallStrikePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"callStrikePrice\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcNextMaturity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nextTimeStamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"priceUnit\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"divisor\",\"type\":\"uint8\"}],\"name\":\"calcRoundPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"roundedPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"feeBases\",\"outputs\":[{\"internalType\":\"int16\",\"name\":\"currentFeeBase\",\"type\":\"int16\"},{\"internalType\":\"int32\",\"name\":\"upwardDifference\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"downwardDifference\",\"type\":\"int32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isReversedOracle\",\"type\":\"bool\"}],\"name\":\"generateAggregatorID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isReversedOracle\",\"type\":\"bool\"}],\"name\":\"getCurrentSpread\",\"outputs\":[{\"internalType\":\"int16\",\"name\":\"\",\"type\":\"int16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPriceE8\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"priceUnit\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isReversedOracle\",\"type\":\"bool\"}],\"name\":\"getCurrentStrikePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isReversedOracle\",\"type\":\"bool\"}],\"name\":\"getFeeInfo\",\"outputs\":[{\"internalType\":\"int16\",\"name\":\"currentFeeBase\",\"type\":\"int16\"},{\"internalType\":\"int32\",\"name\":\"upwardDifference\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"downwardDifference\",\"type\":\"int32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract BondMakerInterface\",\"name\":\"bondMaker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aggregatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"issueBondGroupId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"bondGroupList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint64\",\"name\":\"priceUnit\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isReversedOracle\",\"type\":\"bool\"}],\"name\":\"getTrancheBonds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"issueAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"IDAndAmountOfBurn\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isReversedOracle\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"aggregatorAddresses\",\"type\":\"address[]\"},{\"internalType\":\"int32\",\"name\":\"upwardDifference\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"downwardDifference\",\"type\":\"int32\"}],\"name\":\"registerAggregators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"currentFeeBase\",\"type\":\"int16\"},{\"internalType\":\"uint256\",\"name\":\"currentCollateralPerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextCollateralPerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isReversedOracle\",\"type\":\"bool\"}],\"name\":\"registerCurrentFeeBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StrategyForSimpleAggregatorETH","CompilerVersion":"v0.7.1+commit.f4a555be","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000032234a46a1717cd79ab383c34635604ff33b2dc900000000000000000000000000000000000000000000000000000000000313800000000000000000000000000000000000000000000000000000000000023280","EVMVersion":"constantinople","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2456b9b86041be481b713d64803afc3c9e3c71f94c511d6f36add6e276e2a9b0"}]}