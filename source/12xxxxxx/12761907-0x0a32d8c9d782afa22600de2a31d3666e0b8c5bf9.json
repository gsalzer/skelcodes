{"status":"1","message":"OK","result":[{"SourceCode":"{\"wo1fcoin.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary SafeMath {\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n    c = a * b;\\n    assert(c / a == b);\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a / b;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    assert(b \\u003c= a);\\n    return a - b;\\n  }\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    c = a + b;\\n    assert(c \\u003e= a);\\n    return c;\\n  }\\n}\\n\\ninterface IERC20 {\\n \\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ncontract WFC is IERC20 {\\n    using SafeMath for uint256;\\n    \\n    string public _name;                    //\\u0027WO1FCOIN\\u0027;\\n    string public _symbol;                  //\\u0027WFC\\u0027;\\n    uint256 public _totalSupply;\\n    uint256 public _decimals;               //18;\\n    \\n    address public admin;\\n    \\n    mapping(address =\\u003e uint256) public _balanceOf;\\n    \\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) public _allowance;\\n    \\n    constructor(string memory _Tname, string memory _Tsymbol, uint256 _TtotalSupply, uint256 _Tdecimals) {\\n        _name = _Tname;\\n        _symbol = _Tsymbol;\\n        _totalSupply = _TtotalSupply;\\n        _decimals = _Tdecimals;\\n        _balanceOf[msg.sender] = _TtotalSupply;\\n        \\n        admin = msg.sender;\\n        \\n        emit Transfer(address(0), msg.sender, _TtotalSupply);    // Minting amount from the network\\n    }\\n    \\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n    \\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n    \\n    function decimals() public view returns (uint256) {\\n        return _decimals;\\n    }\\n    \\n    function totalSupply() override external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n    \\n    function balanceOf(address account) override external view returns (uint256) {\\n        return _balanceOf[account];\\n    }\\n    \\n    function transfer(address _to, uint256 _value) override public returns(bool success) {\\n        require(_to != address(0), \\\"Invalid address\\\");\\n        \\n        require(_value \\u003e 0, \\\"Invalid amount\\\");\\n        \\n        require(_balanceOf[msg.sender] \\u003e= _value, \\\"Insufficient balance\\\");\\n        \\n        _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\\n        _balanceOf[_to] = _balanceOf[_to].add(_value);\\n        \\n        emit Transfer(msg.sender, _to, _value);\\n        \\n        return true;\\n    }\\n    \\n    function approve(address _spender, uint256 _value) override public returns (bool success) {\\n        require(_spender != address(0), \\\"Invalid address\\\");\\n        \\n        require(_value \\u003e 0, \\\"Invalid amount\\\");\\n        \\n        require(_balanceOf[msg.sender] \\u003e= _value, \\\"Owner doesn\\u0027t have enough balance to approve\\\");\\n        \\n        _allowance[msg.sender][_spender] = _value;\\n        \\n        emit Approval(msg.sender, _spender, _value);\\n        \\n        return true;\\n    }\\n    \\n    function allowance(address _owner, address _spender) override public view returns (uint256 remaining) {\\n        return _allowance[_owner][_spender];\\n    }\\n    \\n    function transferFrom(address _from, address _to, uint256 _value) override public returns (bool success) {\\n        require(_from != address(0), \\\"Invalid address\\\");\\n        \\n        require(_to != address(0), \\\"Invalid address\\\");\\n        \\n        require(_value \\u003e 0, \\\"Invalid amount\\\");\\n        \\n        require(_allowance[_from][msg.sender] \\u003e= _value, \\\"You don\\u0027t have the approval to spend this amount of tokens\\\");\\n        \\n        require(_balanceOf[_from] \\u003e= _value, \\\"From address doesn\\u0027t have enough balance to transfer\\\");\\n        \\n        _balanceOf[_from] = _balanceOf[_from].sub(_value);\\n        _balanceOf[_to] = _balanceOf[_to].add(_value);\\n        \\n        _allowance[_from][msg.sender] = _allowance[_from][msg.sender].sub(_value);\\n        \\n        emit Transfer(_from, _to, _value);\\n        \\n        return true;\\n    }\\n    \\n    function mint(address to, uint256 value) public {\\n        require(msg.sender == admin, \\\"Only creator of the contract can mint tokens\\\");\\n        \\n        require(value \\u003e 0, \\\"Invalid amount to mint\\\");\\n        \\n        _totalSupply = _totalSupply.add(value);\\n        _balanceOf[to] = _balanceOf[to].add(value);\\n        \\n        emit Transfer(address(0), to, value);\\n    }\\n    \\n    function burn(address to, uint256 value) public {\\n        require(msg.sender == admin, \\\"Only creator of the contract can burn tokens\\\");\\n        \\n        require(value \\u003e 0, \\\"Invalid amount to burn\\\");\\n        \\n        require(_totalSupply \\u003e 0, \\\"Total Supply should be greater than 0\\\");\\n        \\n        require(value \\u003c= _totalSupply, \\\"Value cannot be greater than total supply of tokens\\\");\\n        \\n        require(_balanceOf[to] \\u003e= value, \\\"Not enough balance to burn\\\");\\n        \\n        _totalSupply = _totalSupply.sub(value);\\n        _balanceOf[to] = _balanceOf[to].sub(value);\\n        \\n        emit Transfer(to, address(0), value);\\n    }\\n}\\n\"},\"wo1fcoin_ico.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\u0027./wo1fcoin.sol\\u0027;\\n// import \\u0027./wo1fcoin_oracle.sol\\u0027;\\ninterface WFCSale_Oracle {\\n    function setTokenPrice(uint256 _price) external;\\n    function getTokenPrice() external view returns(uint256);\\n}\\n\\ncontract WFCCrowdSale {\\n    using SafeMath for uint256;\\n    \\n    address public admin;               // owner of the crowd sale \\n    WFC public tokenContract;\\n    // uint256 public tokenPrice;          // price of token in wei; 1 token = 10000000000000000 wei; 1 token = 0.01 ether\\n    uint256 public tokensSold;          // no. of tokens sold in crowd sale\\n    // uint256 public fundingGoal;         // funds need to be received through this sale, in wei \\n    \\n    bool isICORunning;\\n    \\n    WFCSale_Oracle public oracleContract;\\n    \\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    \\n    constructor(WFC _tokenContract, WFCSale_Oracle _oracleContractAddress) {\\n        require(WFC(_tokenContract) != WFC(address(0)), \\u0027Invalid token contract address given\\u0027);\\n        \\n        admin = msg.sender;\\n        tokenContract = _tokenContract;\\n        \\n        oracleContract = WFCSale_Oracle(_oracleContractAddress);\\n    }\\n    \\n    modifier onlyAdmin() {\\n        require(msg.sender == admin);\\n        _;\\n    }\\n    \\n    modifier whenICOEnded() {\\n        require(isICORunning == false);\\n        _;\\n    }\\n    \\n    function setPrice(uint256 _tokenPrice) public onlyAdmin {\\n        require(_tokenPrice \\u003e 0, \\u0027Token Price should be greater than 0\\u0027);\\n        \\n        // tokenPrice = _tokenPrice;\\n        oracleContract.setTokenPrice(_tokenPrice);\\n    }\\n    \\n    function startICO() public onlyAdmin {\\n        isICORunning = true;\\n    }\\n    \\n    function endICO() public onlyAdmin {\\n        isICORunning = false;\\n    }\\n    \\n    // function is payable here because ethers will be sent with this function\\n    function buyToken() public payable {\\n        \\n        require(isICORunning == true, \\u0027Cannot buy tokens, ICO not running\\u0027);\\n        \\n        require(msg.value \\u003e 0, \\u0027Invalid amount given\\u0027);\\n        \\n        // uint256 _tokensToTransfer = msg.value.div(tokenPrice);\\n        \\n        uint256 _tokensToTransfer = msg.value.div(oracleContract.getTokenPrice());\\n        \\n        // Check if Crowd Sale contract has enough tokens\\n        require(WFC(tokenContract).balanceOf(address(this)) \\u003e= _tokensToTransfer, \\\"Insufficient tokens\\\");\\n        \\n        // Give tokens to the user\\n        WFC(tokenContract).transfer(msg.sender, _tokensToTransfer);\\n        \\n        tokensSold = tokensSold.add(_tokensToTransfer);\\n        \\n        emit Transfer(address(this), msg.sender, _tokensToTransfer);\\n    }\\n    \\n    function returnTokensToICO(uint256 _tokenAmountToReturn) public {\\n        // uint256 balanceToReturn = _tokenAmountToReturn.mul(tokenPrice);\\n        uint256 balanceToReturn = _tokenAmountToReturn.mul(oracleContract.getTokenPrice());\\n        WFC(tokenContract).transfer(msg.sender, balanceToReturn);\\n        \\n        // Approve the token so that it can transfer tokens from msg.sender to ico contract\\n        \\n        WFC(tokenContract).transferFrom(msg.sender, address(this), _tokenAmountToReturn);\\n        emit Transfer(msg.sender, address(this), _tokenAmountToReturn);\\n        \\n        WFC(tokenContract).transfer(msg.sender, balanceToReturn);\\n        emit Transfer(address(this), msg.sender, _tokenAmountToReturn);\\n    }\\n    \\n    function withdrawRaisedFunds() public onlyAdmin whenICOEnded {\\n        uint256 raisedFunds = WFC(tokenContract).balanceOf(address(this));\\n        WFC(tokenContract).transfer(admin, raisedFunds);\\n    }\\n    \\n    // function transferTokenToSaleContractAdmin() public onlyAdmin {\\n    //     uint256 _totalTokens = tokenContract.totalSupply();\\n    //     WFC(tokenContract).transfer(admin, _totalTokens);\\n    // }\\n}\\n\"},\"wo1fcoin_oracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ncontract WFCSale_Oracle {\\n    uint256 public _tokenPrice;\\n    \\n    function setTokenPrice(uint256 _price) external {\\n        _tokenPrice = _price;\\n    }\\n    \\n    function getTokenPrice() external view returns(uint256) {\\n        return _tokenPrice;\\n    }\\n    \\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_Tname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_Tsymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_TtotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Tdecimals\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WFC","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0dd15fe86affad91249ef0eb713f39ebeaa987b6e6fd29fffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000008574f3146434f494e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035746430000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://71100545224deceb38b970f4a5fc8a9390b4069a24edc613f836ba9a28ebadc2"}]}