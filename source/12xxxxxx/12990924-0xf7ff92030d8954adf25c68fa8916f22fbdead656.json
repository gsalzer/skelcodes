{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.8.6;\r\n\r\ncontract LilPix {\r\n    // Mapping from owner to list of owned token IDs\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    address private _owner;\r\n\r\n    string private _base;\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    uint256 public price = 0.0003 ether;\r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        string memory baseURI\r\n    ) {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _base = baseURI;\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function create(uint256[] calldata tokenIds, address[] calldata recipients)\r\n        external\r\n        payable\r\n    {\r\n        uint256 mintCount = 0; // Only pay for what you mint\r\n        uint256 _price = price;\r\n\r\n        // 1. Mint\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            uint256 tokenId = tokenIds[i];\r\n            address to = i < recipients.length ? recipients[i] : msg.sender;\r\n            if (_owners[tokenId] == address(0)) {\r\n                _balances[to] += 1;\r\n                _owners[tokenId] = to;\r\n                if (to != msg.sender) {\r\n                    // record the sender as the creator, before transfering\r\n                    emit Transfer(address(0), msg.sender, tokenId);\r\n                    emit Transfer(msg.sender, to, tokenId);\r\n                } else {\r\n                    emit Transfer(address(0), to, tokenId);\r\n                }\r\n                mintCount += 1;\r\n            }\r\n        }\r\n\r\n        // 2. Paymint\r\n        uint256 expected = _price * mintCount;\r\n        if (msg.value < expected) {\r\n            revert(\"Not enough ETH\");\r\n        } else if (msg.value > expected) {\r\n            // Return any unused eth.\r\n            // This may fail silently and not transfer\r\n            // if reciever tries to use too much gas,\r\n            // or is a non-payable contract.\r\n            // Too bad, I tried. Not my problem any more.\r\n            payable(msg.sender).send(msg.value - expected);\r\n        }\r\n    }\r\n\r\n    function collect() external {\r\n        require(msg.sender == _owner, \"NO\");\r\n        payable(_owner).call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n    function setPrice(uint256 _price) external {\r\n        require(msg.sender == _owner, \"NO\");\r\n        price = _price;\r\n    }\r\n\r\n    fallback() external {\r\n        assembly {\r\n            calldatacopy(0, 0, calldatasize())\r\n            let result := delegatecall(\r\n                gas(),\r\n                // BIT IT AGAIN!\r\n                0x9B5D407F144dA142A0A5E3Ad9c53eE936fbBb3dd,\r\n                0,\r\n                calldatasize(),\r\n                0,\r\n                0\r\n            )\r\n            returndatacopy(0, 0, returndatasize())\r\n            switch result\r\n            case 0 {\r\n                revert(0, returndatasize())\r\n            }\r\n            default {\r\n                return(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"collect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LilPix","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000074c696c275069780000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064c494c5049580000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002668747470733a2f2f7777772e6c696c7069782e6172742f6e66746a736f6e2e7068703f69643d0000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7a5a031845d632e1157286c6cc1e18055724e902f0f5d076229eacb9fcac1c4e"}]}