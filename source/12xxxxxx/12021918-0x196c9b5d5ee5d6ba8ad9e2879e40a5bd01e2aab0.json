{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function ceil(uint256 a, uint256 m) internal pure returns (uint256 r) {\r\n        require(m != 0, \"SafeMath: to ceil number shall not be zero\");\r\n        return (a + m - 1) / m * m;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address tokenOwner) external view returns (uint256 balance);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"only allowed by owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0), \"Invalid address\");\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\ninterface IStakeContract{\r\n    function StakeTokens(address _ofUser, uint256 _tokens) external returns(bool);\r\n    function SetRewardClaimDate() external returns(bool);\r\n}\r\n\r\ncontract SeedRoundSale is Owned{\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    uint256 private maxSaleAmount = 20000000 * 10 ** 18;\r\n    bool sale;\r\n    address private tokenAddress;\r\n    address private stakingAddress;\r\n    \r\n    uint256 private minInvestment = 100000 * 10 ** 18;\r\n    uint256 private maxInvestment = 2000000 * 10 ** 18;\r\n    \r\n    uint256 cliffPeriod = 365 days; //365 days;\r\n    uint256 tokenUnLockDate;\r\n    uint256 withdrawPeriod = 30 days;\r\n    \r\n    struct UserTokens{\r\n        uint256 purchased;\r\n        uint256 claimed;\r\n    }\r\n    mapping(address => UserTokens) public purchasedTokens;\r\n    uint256 public totalTokensSold;\r\n    \r\n    AggregatorV3Interface internal ethPriceFeed;\r\n    \r\n    event SaleEnded(address by, uint256 unsoldTokens);\r\n    event CliffStarted(address by);\r\n    event TokensWithdraw(address by, uint256 tokens);\r\n     \r\n     /**\r\n     * Network: Main Network\r\n     * Aggregator: ETH/USD\r\n     * Address: 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\r\n     */\r\n    constructor(address _tokenAddress, address _stakingAddress) public{\r\n        tokenAddress = _tokenAddress;\r\n        ethPriceFeed = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\r\n        stakingAddress = _stakingAddress;\r\n        sale = true;\r\n    }\r\n    \r\n    function EndSale() external onlyOwner{\r\n        require(sale, \"sale is already close\");\r\n        sale = false;\r\n        \r\n        // send the unsold tokens back to owner\r\n        uint256 unsoldTokens = maxSaleAmount.sub(totalTokensSold);\r\n        if(unsoldTokens > 0)\r\n            IERC20(tokenAddress).transfer(tokenAddress, unsoldTokens);\r\n            \r\n        emit SaleEnded(msg.sender, unsoldTokens);\r\n    }\r\n    \r\n    receive() external payable {\r\n        uint256 tokens = getTokenAmount(msg.value);\r\n        _preValidatePurchase(msg.sender, tokens);\r\n        \r\n        purchasedTokens[msg.sender].purchased = purchasedTokens[msg.sender].purchased.add(tokens);\r\n        totalTokensSold = totalTokensSold.add(tokens);\r\n        (bool success, ) = owner.call{value: msg.value}('');\r\n        require(success, \"ether transfer to owner unsuccessful\");\r\n        \r\n        require(IStakeContract(stakingAddress).StakeTokens(msg.sender, tokens), \"token stake unsuccessful\");\r\n    }\r\n    \r\n    function addFiatBuyers(address _buyer, uint256 tokens) external onlyOwner{\r\n        _preValidatePurchase(_buyer, tokens);\r\n        totalTokensSold = totalTokensSold.add(tokens);\r\n        purchasedTokens[_buyer].purchased = purchasedTokens[_buyer].purchased.add(tokens);\r\n        require(IStakeContract(stakingAddress).StakeTokens(_buyer, tokens), \"token stake unsuccessful\");\r\n    }\r\n    \r\n    function _preValidatePurchase(address user, uint256 tokens) internal view{\r\n        require(sale, \"sale is closed\");\r\n        require(purchasedTokens[user].purchased.add(tokens) >= minInvestment, \"below min limit\");\r\n        require(purchasedTokens[user].purchased.add(tokens) <= maxInvestment, \"exceed max limit\");\r\n        require(IERC20(tokenAddress).balanceOf(address(this)) >= maxSaleAmount, \"insufficient balance of sale contract\");\r\n        require(totalTokensSold.add(tokens) <= maxSaleAmount, \"insufficient balance of sale contract, try lesser investment\");\r\n    }\r\n    \r\n    function getTokenAmount(uint256 amount) public view returns(uint256){\r\n        int latestPrice = getETHLatestPrice(); \r\n        latestPrice = latestPrice / 1e8; \r\n        \r\n        uint256 scaling = 1e18;\r\n        uint256 pointOneDollarsInEthers = (scaling).div(uint256(latestPrice).mul(10));//scaled\r\n        \r\n        return  ((amount.mul(scaling)).div(pointOneDollarsInEthers));\r\n    }\r\n    \r\n    /**\r\n     * Returns the latest price\r\n     */\r\n    function getETHLatestPrice() public view returns (int) {\r\n        (\r\n            uint80 roundID, \r\n            int price,\r\n            uint startedAt,\r\n            uint timeStamp,\r\n            uint80 answeredInRound\r\n        ) = ethPriceFeed.latestRoundData();\r\n        return price;\r\n    }\r\n    \r\n    function StartCliff() external onlyOwner{\r\n        require(tokenUnLockDate == 0, \"cliff already started\");\r\n        tokenUnLockDate = block.timestamp.add(cliffPeriod);\r\n        require(IStakeContract(stakingAddress).SetRewardClaimDate(), \"failed to set reward claim date in staking\");\r\n        emit CliffStarted(msg.sender);\r\n    }\r\n    \r\n    function withdrawTokens() external {\r\n        require(block.timestamp >= tokenUnLockDate, \"cliff period has not ended\");\r\n        require(tokenUnLockDate > 0, \"cliff period has not started\");\r\n        \r\n        uint256 monthsPassed = (block.timestamp.sub(tokenUnLockDate)).div(withdrawPeriod);\r\n        if(monthsPassed > 12)\r\n            monthsPassed = 12;\r\n        uint256 allowedToWithdrawPerMonth = (purchasedTokens[msg.sender].purchased.mul(1e18)).div(12); //scaled\r\n        uint256 availableToWithdrawNow = (allowedToWithdrawPerMonth.mul(monthsPassed)).div(1e18); // un-scaled\r\n        availableToWithdrawNow = (availableToWithdrawNow).sub(purchasedTokens[msg.sender].claimed);\r\n        require(availableToWithdrawNow > 0, \"nothing pending to claim\");\r\n        purchasedTokens[msg.sender].claimed = purchasedTokens[msg.sender].claimed.add(availableToWithdrawNow);\r\n        \r\n        require(IERC20(tokenAddress).transfer(msg.sender, availableToWithdrawNow), \"transfer of tokens from sale contract failed\");\r\n        emit TokensWithdraw(msg.sender, availableToWithdrawNow);\r\n    }\r\n    \r\n    function availableToWithdraw(address _user) external view returns(uint256){\r\n        if(tokenUnLockDate > 0 && block.timestamp >= tokenUnLockDate){\r\n            uint256 monthsPassed = (block.timestamp.sub(tokenUnLockDate)).div(withdrawPeriod);\r\n            if(monthsPassed > 12)\r\n                monthsPassed = 12;\r\n            uint256 allowedToWithdrawPerMonth = (purchasedTokens[_user].purchased.mul(1e18)).div(12); //scaled\r\n            uint256 availableToWithdrawNow = (allowedToWithdrawPerMonth.mul(monthsPassed)).div(1e18); // un-scaled\r\n            availableToWithdrawNow = (availableToWithdrawNow).sub(purchasedTokens[_user].claimed);\r\n            return availableToWithdrawNow;\r\n        }\r\n        else{\r\n            return 0;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"}],\"name\":\"CliffStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unsoldTokens\",\"type\":\"uint256\"}],\"name\":\"SaleEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"TokensWithdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EndSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StartCliff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"addFiatBuyers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"availableToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHLatestPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchasedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SeedRoundSale","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000dacd1e55c27fa55cff3e121c074a0dba266c21be000000000000000000000000cc1d1a5d0aa477c1d5279dfa17a53040eb0d96bd","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a6b9ba49bb4fe55856f1e384569592fe6915930a1b2f9b7ddbb4db961c10dd88"}]}