{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Proxys/Transfer/ITransferProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITransferProxy {\\n    function erc721SafeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    function erc1155SafeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Sales/BaseExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\n\\nimport '../Proxys/Transfer/ITransferProxy.sol';\\nimport '../Security/MessageSigning.sol';\\nimport '../Tokens/ERC2981/IERC2981Royalties.sol';\\n\\ncontract BaseExchange is OwnableUpgradeable, MessageSigning {\\n    address payable public beneficiary;\\n    ITransferProxy public transferProxy;\\n\\n    struct OrderTransfers {\\n        /* total order value */\\n        uint256 total;\\n        /* total value for seller (total - sellerServiceFees - royalties) */\\n        uint256 sellerEndValue;\\n        /* total transaction */\\n        uint256 totalTransaction;\\n        /* all service fees */\\n        uint256 serviceFees;\\n        /* royalties amount to transfer */\\n        uint256 royaltiesAmount;\\n        /* royalties recipient */\\n        address royaltiesRecipient;\\n    }\\n\\n    function __BaseExchange_init(\\n        address payable _beneficiary,\\n        address _transferProxy\\n    ) internal initializer {\\n        __Ownable_init();\\n\\n        setBeneficiary(_beneficiary);\\n        setTransferProxy(_transferProxy);\\n    }\\n\\n    function setTransferProxy(address transferProxy_) public virtual onlyOwner {\\n        require(transferProxy_ != address(0));\\n        transferProxy = ITransferProxy(transferProxy_);\\n    }\\n\\n    function setBeneficiary(address payable beneficiary_)\\n        public\\n        virtual\\n        onlyOwner\\n    {\\n        require(beneficiary_ != address(0));\\n        beneficiary = beneficiary_;\\n    }\\n\\n    function _computeValues(\\n        uint256 unitPrice,\\n        address token,\\n        uint256 tokenId,\\n        uint256 amount,\\n        uint256 buyerServiceFee,\\n        uint256 sellerServiceFee\\n    ) internal view returns (OrderTransfers memory orderTransfers) {\\n        orderTransfers.total = unitPrice * amount;\\n        uint256 buyerFee = (orderTransfers.total * buyerServiceFee) / 10000;\\n        uint256 sellerFee = (orderTransfers.total * sellerServiceFee) / 10000;\\n\\n        // total of transaction value (price + buyerFee)\\n        orderTransfers.totalTransaction = orderTransfers.total + buyerFee;\\n        // seller end value: price - sellerFee\\n        orderTransfers.sellerEndValue = orderTransfers.total - sellerFee;\\n        // all fees\\n        orderTransfers.serviceFees = sellerFee + buyerFee;\\n\\n        (address royaltiesRecipient, uint256 royaltiesAmount) = _getRoyalties(\\n            token,\\n            tokenId,\\n            orderTransfers.total\\n        );\\n\\n        // if there are royalties\\n        if (\\n            royaltiesAmount > 0 &&\\n            royaltiesAmount <= orderTransfers.sellerEndValue\\n        ) {\\n            orderTransfers.royaltiesRecipient = royaltiesRecipient;\\n            orderTransfers.royaltiesAmount = royaltiesAmount;\\n            // substract royalties to end value\\n            orderTransfers.sellerEndValue =\\n                orderTransfers.sellerEndValue -\\n                royaltiesAmount;\\n        }\\n    }\\n\\n    function _getRoyalties(\\n        address token,\\n        uint256 tokenId,\\n        uint256 saleValue\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (address royaltiesRecipient, uint256 royaltiesAmount)\\n    {\\n        IERC2981Royalties withRoyalties = IERC2981Royalties(token);\\n        if (\\n            withRoyalties.supportsInterface(type(IERC2981Royalties).interfaceId)\\n        ) {\\n            (royaltiesRecipient, royaltiesAmount) = withRoyalties.royaltyInfo(\\n                tokenId,\\n                saleValue\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Sales/Exchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\n\\nimport '../Proxys/Transfer/ITransferProxy.sol';\\n\\nimport './BaseExchange.sol';\\nimport './ExchangeStorage.sol';\\n\\ncontract Exchange is BaseExchange, ReentrancyGuardUpgradeable, ExchangeStorage {\\n    function initialize(\\n        address payable beneficiary_,\\n        address transferProxy_,\\n        address exchangeSigner_\\n    ) public initializer {\\n        __BaseExchange_init(beneficiary_, transferProxy_);\\n\\n        __ReentrancyGuard_init_unchained();\\n\\n        setExchangeSigner(exchangeSigner_);\\n    }\\n\\n    /// @dev Allows owner to set the address used to sign the sales Metadata\\n    /// @param exchangeSigner_ address of the signer\\n    function setExchangeSigner(address exchangeSigner_) public onlyOwner {\\n        require(exchangeSigner_ != address(0), 'Exchange signer must be valid');\\n        exchangeSigner = exchangeSigner_;\\n    }\\n\\n    function prepareOrderMessage(OrderData memory order)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encode(order));\\n    }\\n\\n    function prepareOrderMetaMessage(\\n        Signature memory orderSig,\\n        OrderMeta memory saleMeta\\n    ) public pure returns (bytes32) {\\n        return keccak256(abi.encode(orderSig, saleMeta));\\n    }\\n\\n    /**\\n     * @dev this function computes all the values that we need for the exchange.\\n     * this can be called off-chain before buying so all values can be computed easily\\n     *\\n     * It will also help when we introduce tokens for payment\\n     */\\n    function computeValues(\\n        OrderData memory order,\\n        uint256 amount,\\n        OrderMeta memory saleMeta\\n    ) public view returns (OrderTransfers memory orderTransfers) {\\n        return\\n            _computeValues(\\n                order.inAsset.quantity,\\n                order.outAsset.token,\\n                order.outAsset.tokenId,\\n                amount,\\n                saleMeta.buyerFee,\\n                saleMeta.sellerFee\\n            );\\n    }\\n\\n    function buy(\\n        OrderData memory order,\\n        Signature memory sig,\\n        uint256 amount, // quantity to buy\\n        OrderMeta memory saleMeta,\\n        Signature memory saleMetaSignature\\n    ) external payable nonReentrant {\\n        // verify that order is for this contract\\n        require(order.exchange == address(this), 'Sale: Wrong exchange.');\\n\\n        // verify if this order is for a specific address\\n        if (order.taker != address(0)) {\\n            require(msg.sender == order.taker, 'Sale: Wrong user.');\\n        }\\n\\n        require(\\n            // amount must be > 0\\n            (amount > 0) &&\\n                // and amount must be <= at maxPerBuy\\n                (order.maxPerBuy == 0 || amount <= order.maxPerBuy),\\n            'Sale: Wrong amount.'\\n        );\\n\\n        // verify exchange meta for buy\\n        _verifyOrderMeta(sig, saleMeta, saleMetaSignature);\\n\\n        // verify order signature\\n        _validateOrderSig(order, sig);\\n\\n        // update order state\\n        bool closed = _verifyOpenAndModifyState(order, amount);\\n\\n        // transfer everything\\n        OrderTransfers memory orderTransfers = _doTransfers(\\n            order,\\n            amount,\\n            saleMeta\\n        );\\n\\n        // emit buy\\n        emit Buy(\\n            order.orderNonce,\\n            order.outAsset.token,\\n            order.outAsset.tokenId,\\n            amount,\\n            order.maker,\\n            order.inAsset.token,\\n            order.inAsset.tokenId,\\n            order.inAsset.quantity,\\n            msg.sender,\\n            orderTransfers.total,\\n            orderTransfers.serviceFees\\n        );\\n\\n        // if order is closed, emit close.\\n        if (closed) {\\n            emit CloseOrder(\\n                order.orderNonce,\\n                order.outAsset.token,\\n                order.outAsset.tokenId,\\n                order.maker\\n            );\\n        }\\n    }\\n\\n    function cancelOrder(\\n        address token,\\n        uint256 tokenId,\\n        uint256 quantity,\\n        uint256 orderNonce\\n    ) public {\\n        bytes32 orderId = _getOrderId(\\n            token,\\n            tokenId,\\n            quantity,\\n            msg.sender,\\n            orderNonce\\n        );\\n        completed[orderId] = quantity;\\n        emit CloseOrder(orderNonce, token, tokenId, msg.sender);\\n    }\\n\\n    function _validateOrderSig(OrderData memory order, Signature memory sig)\\n        public\\n        pure\\n    {\\n        require(\\n            recoverMessageSignature(prepareOrderMessage(order), sig) ==\\n                order.maker,\\n            'Sale: Incorrect order signature'\\n        );\\n    }\\n\\n    // returns orderId for completion\\n    function _getOrderId(\\n        address token,\\n        uint256 tokenId,\\n        uint256 quantity,\\n        address maker,\\n        uint256 orderNonce\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(abi.encode(token, tokenId, quantity, maker, orderNonce));\\n    }\\n\\n    function _verifyOpenAndModifyState(\\n        OrderData memory order,\\n        uint256 buyingAmount\\n    ) internal returns (bool) {\\n        bytes32 orderId = _getOrderId(\\n            order.outAsset.token,\\n            order.outAsset.tokenId,\\n            order.outAsset.quantity,\\n            order.maker,\\n            order.orderNonce\\n        );\\n        uint256 comp = completed[orderId] + buyingAmount;\\n\\n        // makes sure order is not already closed\\n        require(\\n            comp <= order.outAsset.quantity,\\n            'Sale: Order already closed or quantity too high'\\n        );\\n\\n        // update order completion amount\\n        completed[orderId] = comp;\\n\\n        // returns if order is closed or not\\n        return comp == order.outAsset.quantity;\\n    }\\n\\n    /// @dev This function verifies meta for an order\\n    ///      We use meta to have buyerFee and sellerFee per transaction instead of global\\n    ///      this also allows to not have open ended orders that could be reused months after it was made\\n    /// @param orderSig the signature of the order\\n    /// @param saleMeta the meta for this sale\\n    /// @param saleSig signature for this sale\\n    function _verifyOrderMeta(\\n        Signature memory orderSig,\\n        OrderMeta memory saleMeta,\\n        Signature memory saleSig\\n    ) internal {\\n        require(\\n            saleMeta.expiration == 0 || saleMeta.expiration >= block.timestamp,\\n            'Sale: Buy Order expired'\\n        );\\n\\n        require(saleMeta.buyer == msg.sender, 'Sale Metadata not for operator');\\n\\n        // verifies that saleSig is right\\n        bytes32 message = prepareOrderMetaMessage(orderSig, saleMeta);\\n        require(\\n            recoverMessageSignature(message, saleSig) == exchangeSigner,\\n            'Sale: Incorrect order meta signature'\\n        );\\n\\n        require(usedSaleMeta[message] == false, 'Sale Metadata already used');\\n\\n        usedSaleMeta[message] = true;\\n    }\\n\\n    function _doTransfers(\\n        OrderData memory order,\\n        uint256 amount,\\n        OrderMeta memory saleMeta\\n    ) internal returns (OrderTransfers memory orderTransfers) {\\n        // get all values into a struct\\n        // it will help later when we introduce token payments\\n        orderTransfers = computeValues(order, amount, saleMeta);\\n\\n        // this here is because we're not using tokens\\n        // verify that msg.value is right\\n        require(\\n            // total = (unitPrice * amount) + buyerFee\\n            msg.value == orderTransfers.totalTransaction,\\n            'Sale: Sent value is incorrect'\\n        );\\n\\n        // transfer ethereum\\n        if (orderTransfers.totalTransaction > 0) {\\n            // send service fees (buyerFee + sellerFees) to beneficiary\\n            if (orderTransfers.serviceFees > 0) {\\n                beneficiary.transfer(orderTransfers.serviceFees);\\n            }\\n\\n            if (orderTransfers.royaltiesAmount > 0) {\\n                payable(orderTransfers.royaltiesRecipient).transfer(\\n                    orderTransfers.royaltiesAmount\\n                );\\n            }\\n\\n            // send what is left to seller\\n            if (orderTransfers.sellerEndValue > 0) {\\n                payable(order.maker).transfer(orderTransfers.sellerEndValue);\\n            }\\n        }\\n\\n        // send token to buyer\\n        if (order.outAsset.tokenType == TokenType.ERC1155) {\\n            transferProxy.erc1155SafeTransferFrom(\\n                order.outAsset.token,\\n                order.maker,\\n                msg.sender,\\n                order.outAsset.tokenId,\\n                amount,\\n                ''\\n            );\\n        } else {\\n            transferProxy.erc721SafeTransferFrom(\\n                order.outAsset.token,\\n                order.maker,\\n                msg.sender,\\n                order.outAsset.tokenId,\\n                ''\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Sales/ExchangeStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\n\\nimport '../Proxys/Transfer/ITransferProxy.sol';\\nimport '../Tokens/ERC2981/IERC2981Royalties.sol';\\n\\ncontract ExchangeStorage {\\n    enum TokenType {\\n        ETH,\\n        ERC20,\\n        ERC1155,\\n        ERC721\\n    }\\n\\n    event Buy(\\n        uint256 indexed orderNonce,\\n        address indexed token,\\n        uint256 indexed tokenId,\\n        uint256 amount,\\n        address maker,\\n        address buyToken,\\n        uint256 buyTokenId,\\n        uint256 buyAmount,\\n        address buyer,\\n        uint256 total,\\n        uint256 serviceFee\\n    );\\n\\n    event CloseOrder(\\n        uint256 orderNonce,\\n        address indexed token,\\n        uint256 indexed tokenId,\\n        address maker\\n    );\\n\\n    struct Asset {\\n        /* asset type, erc721 or erc1155 */\\n        TokenType tokenType;\\n        /* asset contract  */\\n        address token;\\n        /* asset id */\\n        uint256 tokenId;\\n        /* asset quantity */\\n        uint256 quantity;\\n    }\\n\\n    struct OrderData {\\n        /* Exchange address - should be current contract */\\n        address exchange;\\n        /* maker of the order */\\n        address maker;\\n        /* taker of the order */\\n        address taker;\\n        /* out asset */\\n        Asset outAsset;\\n        /* in asset: this is the UNIT PRICE; which means amount bought must be multiplicated by quantity here */\\n        Asset inAsset;\\n        /* Max items by each buy. Allow to create one big order, but to limit how many can be bought at once */\\n        uint256 maxPerBuy;\\n        /* OrderNonce so we can have different order for the same tokenId */\\n        uint256 orderNonce;\\n        /* expiration date for this order - usually 1 month | 0 means never expires */\\n        uint256 expiration;\\n    }\\n\\n    struct OrderMeta {\\n        /* buyer */\\n        address buyer;\\n        /* seller fee for the sale */\\n        uint256 sellerFee;\\n        /* buyer fee for the sale */\\n        uint256 buyerFee;\\n        /* expiration for this sale - usually 24h | 0 means never expires */\\n        uint256 expiration;\\n        /* Order Meta nonce so it can only be used once */\\n        uint256 nonce;\\n    }\\n\\n    // signer used to sign \\\"buys\\\"\\n    // this allows to have buyer and sellerFee per tx and not global\\n    // this also allows to invalidate orders without needed them to be canceled\\n    // in the contract since a buy can't be done without being signed\\n    address public exchangeSigner;\\n\\n    // To register saleMeta that were already used\\n    mapping(bytes32 => bool) public usedSaleMeta;\\n\\n    // orderId => completed amount\\n    mapping(bytes32 => uint256) public completed;\\n}\\n\"\r\n    },\r\n    \"contracts/Security/MessageSigning.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract MessageSigning {\\n    /* An ECDSA signature. */\\n    struct Signature {\\n        /* v parameter */\\n        uint8 v;\\n        /* r parameter */\\n        bytes32 r;\\n        /* s parameter */\\n        bytes32 s;\\n    }\\n\\n    /**\\n     * @dev verifies signature\\n     */\\n    function recoverMessageSignature(\\n        bytes32 message,\\n        Signature memory signature\\n    ) public pure returns (address) {\\n        uint8 v = signature.v;\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        return\\n            ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        '\\\\x19Ethereum Signed Message:\\\\n32',\\n                        message\\n                    )\\n                ),\\n                v,\\n                signature.r,\\n                signature.s\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Tokens/ERC2981/IERC2981Royalties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol';\\n\\n/**\\n * Early implementation of EIP-2981 as of comment\\n * https://github.com/ethereum/EIPs/issues/2907#issuecomment-831352868\\n *\\n * Interface ID:\\n *\\n * bytes4(keccak256('royaltyInfo(uint256,uint256,bytes)')) == 0xc155531d\\n *\\n * =>  0xc155531d\\n */\\ninterface IERC2981Royalties is IERC165Upgradeable {\\n    /**\\n     * @dev Returns an NFTs royalty payment information\\n     *\\n     * @param tokenId  The identifier for an NFT\\n     * @param value Purchase price of NFT\\n     *\\n     * @return receiver The royalty recipient address\\n     * @return royaltyAmount Amount to be paid to the royalty recipient\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 value)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serviceFee\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"}],\"name\":\"CloseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ExchangeStorage.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.Asset\",\"name\":\"outAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum ExchangeStorage.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.Asset\",\"name\":\"inAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"maxPerBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.OrderData\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct MessageSigning.Signature\",\"name\":\"sig\",\"type\":\"tuple\"}],\"name\":\"_validateOrderSig\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ExchangeStorage.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.Asset\",\"name\":\"outAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum ExchangeStorage.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.Asset\",\"name\":\"inAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"maxPerBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.OrderData\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct MessageSigning.Signature\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.OrderMeta\",\"name\":\"saleMeta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct MessageSigning.Signature\",\"name\":\"saleMetaSignature\",\"type\":\"tuple\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"completed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ExchangeStorage.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.Asset\",\"name\":\"outAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum ExchangeStorage.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.Asset\",\"name\":\"inAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"maxPerBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.OrderData\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.OrderMeta\",\"name\":\"saleMeta\",\"type\":\"tuple\"}],\"name\":\"computeValues\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerEndValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTransaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"serviceFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltiesRecipient\",\"type\":\"address\"}],\"internalType\":\"struct BaseExchange.OrderTransfers\",\"name\":\"orderTransfers\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"beneficiary_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transferProxy_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeSigner_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ExchangeStorage.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.Asset\",\"name\":\"outAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum ExchangeStorage.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.Asset\",\"name\":\"inAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"maxPerBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.OrderData\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"prepareOrderMessage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct MessageSigning.Signature\",\"name\":\"orderSig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.OrderMeta\",\"name\":\"saleMeta\",\"type\":\"tuple\"}],\"name\":\"prepareOrderMetaMessage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct MessageSigning.Signature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"recoverMessageSignature\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"beneficiary_\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchangeSigner_\",\"type\":\"address\"}],\"name\":\"setExchangeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transferProxy_\",\"type\":\"address\"}],\"name\":\"setTransferProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferProxy\",\"outputs\":[{\"internalType\":\"contract ITransferProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedSaleMeta\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Exchange","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}