{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.12\r\n\"\"\"\r\n@title Root-Chain Gauge\r\n@author Curve Finance\r\n@license MIT\r\n@notice Calculates total allocated weekly CRV emission\r\n        mints and sends across a sidechain bridge\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\n\r\ninterface CRV20:\r\n    def future_epoch_time_write() -> uint256: nonpayable\r\n    def rate() -> uint256: view\r\n\r\ninterface Controller:\r\n    def period() -> int128: view\r\n    def period_write() -> int128: nonpayable\r\n    def period_timestamp(p: int128) -> uint256: view\r\n    def gauge_relative_weight(addr: address, time: uint256) -> uint256: view\r\n    def voting_escrow() -> address: view\r\n    def checkpoint(): nonpayable\r\n    def checkpoint_gauge(addr: address): nonpayable\r\n\r\ninterface Minter:\r\n    def token() -> address: view\r\n    def controller() -> address: view\r\n    def minted(user: address, gauge: address) -> uint256: view\r\n    def mint(gauge: address): nonpayable\r\n\r\n\r\nevent Deposit:\r\n    provider: indexed(address)\r\n    value: uint256\r\n\r\nevent Withdraw:\r\n    provider: indexed(address)\r\n    value: uint256\r\n\r\nevent UpdateLiquidityLimit:\r\n    user: address\r\n    original_balance: uint256\r\n    original_supply: uint256\r\n    working_balance: uint256\r\n    working_supply: uint256\r\n\r\nevent CommitOwnership:\r\n    admin: address\r\n\r\nevent ApplyOwnership:\r\n    admin: address\r\n\r\nevent Transfer:\r\n    _from: indexed(address)\r\n    _to: indexed(address)\r\n    _value: uint256\r\n\r\nevent Approval:\r\n    _owner: indexed(address)\r\n    _spender: indexed(address)\r\n    _value: uint256\r\n\r\n\r\nWEEK: constant(uint256) = 604800\r\n\r\nminter: public(address)\r\ncrv_token: public(address)\r\ncontroller: public(address)\r\nfuture_epoch_time: public(uint256)\r\n\r\nperiod: public(uint256)\r\nemissions: public(uint256)\r\ninflation_rate: public(uint256)\r\n\r\nadmin: public(address)\r\nfuture_admin: public(address)  # Can and will be a smart contract\r\nis_killed: public(bool)\r\n\r\ncheckpoint_admin: public(address)\r\nanyswap_bridge: public(address)\r\n\r\n\r\n@external\r\ndef __init__(_minter: address, _admin: address, _anyswap_bridge: address):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @param _minter Minter contract address\r\n    @param _admin Admin who can kill the gauge\r\n    @param _anyswap_bridge Address of the AnySwap bridge where CRV is transferred\r\n    \"\"\"\r\n\r\n    crv_token: address = Minter(_minter).token()\r\n    controller: address = Minter(_minter).controller()\r\n\r\n    self.minter = _minter\r\n    self.admin = _admin\r\n    self.crv_token = crv_token\r\n    self.controller = controller\r\n    self.anyswap_bridge = _anyswap_bridge\r\n\r\n    self.period = block.timestamp / WEEK\r\n    self.inflation_rate = CRV20(crv_token).rate()\r\n    self.future_epoch_time = CRV20(crv_token).future_epoch_time_write()\r\n\r\n\r\n\r\n@external\r\ndef checkpoint() -> bool:\r\n    \"\"\"\r\n    @notice Mint all allocated CRV emissions and transfer across the bridge\r\n    @dev Should be called once per week, after the new epoch period has begun\r\n    \"\"\"\r\n    assert self.checkpoint_admin in [ZERO_ADDRESS, msg.sender]\r\n    rate: uint256 = self.inflation_rate\r\n    new_rate: uint256 = rate\r\n    prev_future_epoch: uint256 = self.future_epoch_time\r\n    token: address = self.crv_token\r\n    if prev_future_epoch < block.timestamp:\r\n        self.future_epoch_time = CRV20(token).future_epoch_time_write()\r\n        new_rate = CRV20(token).rate()\r\n        self.inflation_rate = new_rate\r\n\r\n    last_period: uint256 = self.period\r\n    current_period: uint256 = block.timestamp / WEEK\r\n\r\n    if last_period < current_period:\r\n        controller: address = self.controller\r\n        Controller(controller).checkpoint_gauge(self)\r\n\r\n        emissions: uint256 = 0\r\n        last_period += 1\r\n        for i in range(last_period, last_period+255):\r\n            if i > current_period:\r\n                break\r\n            week_time: uint256 = i * WEEK\r\n            gauge_weight: uint256 = Controller(controller).gauge_relative_weight(self, i * WEEK)\r\n            emissions += gauge_weight * rate * WEEK / 10**18\r\n\r\n            if prev_future_epoch < week_time:\r\n                # If we went across one or multiple epochs, apply the rate\r\n                # of the first epoch until it ends, and then the rate of\r\n                # the last epoch.\r\n                # If more than one epoch is crossed - the gauge gets less,\r\n                # but that'd meen it wasn't called for more than 1 year\r\n                rate = new_rate\r\n                prev_future_epoch = MAX_UINT256\r\n\r\n        self.period = current_period\r\n        self.emissions += emissions\r\n        if emissions > 0 and not self.is_killed:\r\n            Minter(self.minter).mint(self)\r\n            ERC20(token).transfer(self.anyswap_bridge, emissions)\r\n\r\n    return True\r\n\r\n\r\n@view\r\n@external\r\ndef user_checkpoint(addr: address) -> bool:\r\n    return True\r\n\r\n\r\n@view\r\n@external\r\ndef integrate_fraction(addr: address) -> uint256:\r\n    assert addr == self, \"Gauge can only mint for itself\"\r\n    return self.emissions\r\n\r\n\r\n@external\r\ndef set_killed(_is_killed: bool):\r\n    \"\"\"\r\n    @notice Set the killed status for this contract\r\n    @dev When killed, the gauge always yields a rate of 0 and so cannot mint CRV\r\n    @param _is_killed Killed status to set\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin only\r\n\r\n    self.is_killed = _is_killed\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(addr: address):\r\n    \"\"\"\r\n    @notice Transfer ownership of GaugeController to `addr`\r\n    @param addr Address to have ownership transferred to\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin only\r\n\r\n    self.future_admin = addr\r\n    log CommitOwnership(addr)\r\n\r\n\r\n@external\r\ndef accept_transfer_ownership():\r\n    \"\"\"\r\n    @notice Accept a pending ownership transfer\r\n    \"\"\"\r\n    _admin: address = self.future_admin\r\n    assert msg.sender == _admin  # dev: future admin only\r\n\r\n    self.admin = _admin\r\n    log ApplyOwnership(_admin)\r\n\r\n\r\n@external\r\ndef set_checkpoint_admin(_admin: address):\r\n    \"\"\"\r\n    @notice Set the checkpoint admin address\r\n    @dev Setting to ZERO_ADDRESS allows anyone to call `checkpoint`\r\n    @param _admin Address of the checkpoint admin\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin only\r\n\r\n    self.checkpoint_admin = _admin","ABI":"[{\"name\":\"Deposit\",\"inputs\":[{\"name\":\"provider\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Withdraw\",\"inputs\":[{\"name\":\"provider\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateLiquidityLimit\",\"inputs\":[{\"name\":\"user\",\"type\":\"address\",\"indexed\":false},{\"name\":\"original_balance\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"original_supply\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"working_balance\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"working_supply\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"CommitOwnership\",\"inputs\":[{\"name\":\"admin\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ApplyOwnership\",\"inputs\":[{\"name\":\"admin\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Transfer\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_to\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approval\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_spender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_anyswap_bridge\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"checkpoint\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":1161779},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"user_checkpoint\",\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":418},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"integrate_fraction\",\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2673},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_killed\",\"inputs\":[{\"name\":\"_is_killed\",\"type\":\"bool\"}],\"outputs\":[],\"gas\":37635},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"commit_transfer_ownership\",\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"outputs\":[],\"gas\":39015},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_transfer_ownership\",\"inputs\":[],\"outputs\":[],\"gas\":38960},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_checkpoint_admin\",\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"outputs\":[],\"gas\":37725},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"minter\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2598},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"crv_token\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2628},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"controller\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2658},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_epoch_time\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2688},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"period\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2718},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"emissions\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2748},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"inflation_rate\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2778},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2808},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_admin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2838},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"is_killed\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":2868},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"checkpoint_admin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2898},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"anyswap_bridge\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2928}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.12","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000d061d61a4d941c39e5453435b6345dc261c2fce0000000000000000000000000edf2c58e16cc606da1977e79e1e69e79c54fe242000000000000000000000000c564ee9f21ed8a2d8e7e76c085740d5e4c5fafbe","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}