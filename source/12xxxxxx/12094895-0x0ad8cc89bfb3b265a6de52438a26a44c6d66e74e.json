{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface MemoryInterface {\r\n    function getUint(uint _id) external returns (uint _num);\r\n    function setUint(uint _id, uint _val) external;\r\n}\r\n\r\ninterface EventInterface {\r\n    function emitEvent(uint connectorType, uint connectorID, bytes32 eventCode, bytes calldata eventData) external;\r\n}\r\n\r\ninterface TokenInterface {\r\n    function balanceOf(address) external view returns (uint);\r\n    function allowance(address, address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n}\r\n\r\ninterface CTokenInterface {\r\n    function mint(uint mintAmount) external returns (uint);\r\n    function redeem(uint redeemTokens) external returns (uint);\r\n    function borrow(uint borrowAmount) external returns (uint);\r\n    function repayBorrow(uint repayAmount) external returns (uint);\r\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint); // For ERC20\r\n    function liquidateBorrow(address borrower, uint repayAmount, address cTokenCollateral) external returns (uint);\r\n\r\n    function borrowBalanceCurrent(address account) external returns (uint);\r\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\r\n    function exchangeRateCurrent() external returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n}\r\n\r\ninterface CETHInterface {\r\n    function mint() external payable;\r\n    function repayBorrow() external payable;\r\n    function repayBorrowBehalf(address borrower) external payable;\r\n    function liquidateBorrow(address borrower, address cTokenCollateral) external payable;\r\n}\r\n\r\ninterface InstaCompoundMapping {\r\n    function getMapping(string calldata tokenId) external view returns (address, address);\r\n}\r\n\r\ninterface ComptrollerInterface {\r\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\r\n    function exitMarket(address cTokenAddress) external returns (uint);\r\n    function getAssetsIn(address account) external view returns (address[] memory);\r\n    function getAccountLiquidity(address account) external view returns (uint, uint, uint);\r\n}\r\n\r\ninterface DSAInterface {\r\n    function isAuth(address) external view returns(bool);\r\n}\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\ncontract Helpers is DSMath {\r\n\r\n    /**\r\n     * @dev Return ethereum address\r\n     */\r\n    function getAddressETH() internal pure returns (address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\r\n    }\r\n\r\n    /**\r\n     * @dev Return InstaEvent Address.\r\n     */\r\n    function getEventAddr() internal pure returns (address) {\r\n        return 0x2af7ea6Cb911035f3eb1ED895Cb6692C39ecbA97; // InstaEvent Address\r\n    }\r\n\r\n    /**\r\n     * @dev Return Memory Variable Address\r\n     */\r\n    function getMemoryAddr() internal pure returns (address) {\r\n        return 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F; // InstaMemory Address\r\n    }\r\n\r\n    /**\r\n     * @dev Get Uint value from InstaMemory Contract.\r\n    */\r\n    function getUint(uint getId, uint val) internal returns (uint returnVal) {\r\n        returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\r\n    }\r\n\r\n    /**\r\n     * @dev Set Uint value in InstaMemory Contract.\r\n    */\r\n    function setUint(uint setId, uint val) internal {\r\n        if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\r\n    }\r\n\r\n    /**\r\n     * @dev Connector Details.\r\n     */\r\n    function connectorID() public pure returns(uint model, uint id) {\r\n        (model, id) = (1, 88);\r\n    }\r\n\r\n    // /**\r\n    //  * @dev emit event on event contract\r\n    //  */\r\n    // function emitEvent(bytes32 eventCode, bytes memory eventData) internal {\r\n    //     (uint model, uint id) = connectorID();\r\n    //     EventInterface(getEventAddr()).emitEvent(model, id, eventCode, eventData);\r\n    // }\r\n}\r\n\r\ncontract ImportHelper is Helpers {\r\n    /**\r\n     * @dev Return InstaDApp Mapping Address\r\n     */\r\n    function getMappingAddr() internal pure returns (address) {\r\n        return 0xA8F9D4aA7319C54C04404765117ddBf9448E2082; // InstaCompoundMapping Address\r\n    }\r\n\r\n    /**\r\n     * @dev Return CETH Address\r\n     */\r\n    function getCETHAddr() internal pure returns (address) {\r\n        return 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\r\n    }\r\n\r\n    /**\r\n     * @dev Return Compound Comptroller Address\r\n     */\r\n    function getComptrollerAddress() internal pure returns (address) {\r\n        return 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\r\n    }\r\n\r\n   /**\r\n     * @dev enter compound market\r\n     */\r\n    function enterMarkets(address[] memory cErc20) internal {\r\n        ComptrollerInterface(getComptrollerAddress()).enterMarkets(cErc20);\r\n    }\r\n}\r\n\r\ncontract ImportResolver is ImportHelper {\r\n\r\n    event LogCompoundImport(\r\n        address user,\r\n        address[] cTokens,\r\n        uint[] cTknBals,\r\n        uint[] borrowBals\r\n    );\r\n\r\n    function _borrow(CTokenInterface[] memory ctokenContracts, uint[] memory amts, uint _length) internal {\r\n        for (uint i = 0; i < _length; i++) {\r\n            if (amts[i] > 0) {\r\n                require(ctokenContracts[i].borrow(amts[i]) == 0, \"borrow-failed-collateral?\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _paybackOnBehalf(\r\n        address userAddress,\r\n        CTokenInterface[] memory ctokenContracts,\r\n        uint[] memory amts,\r\n        uint _length\r\n    ) internal {\r\n        address cethAddr = getCETHAddr();\r\n        for (uint i = 0; i < _length; i++) {\r\n            if (amts[i] > 0) {\r\n                if (address(ctokenContracts[i]) == cethAddr) {\r\n                     CETHInterface(cethAddr).repayBorrowBehalf.value(amts[i])(userAddress);\r\n                } else {\r\n                    require(ctokenContracts[i].repayBorrowBehalf(userAddress, amts[i]) == 0, \"repayOnBehalf-failed\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _transferCtokens(\r\n        address userAccount,\r\n        CTokenInterface[] memory ctokenContracts,\r\n        uint[] memory amts,\r\n        uint _length\r\n    ) internal {\r\n        for (uint i = 0; i < _length; i++) {\r\n            if (amts[i] > 0) {\r\n                require(ctokenContracts[i].transferFrom(userAccount, address(this), amts[i]), \"ctoken-transfer-failed-allowance?\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function importCompound(address userAccount, string[] calldata tokenIds) external payable {\r\n        require(DSAInterface(address(this)).isAuth(userAccount), \"user-account-not-auth\");\r\n\r\n        uint _length = tokenIds.length;\r\n        require(_length > 0, \"0-tokens-not-allowed\");\r\n\r\n\r\n        address[] memory ctokens = new address[](_length);\r\n        uint[] memory borrowAmts = new uint[](_length);\r\n        uint[] memory ctokensBal = new uint[](_length);\r\n        CTokenInterface[] memory ctokenContracts = new CTokenInterface[](_length);\r\n\r\n        InstaCompoundMapping compMapping = InstaCompoundMapping(getMappingAddr());\r\n\r\n        for (uint i = 0; i < _length; i++) {\r\n            (address _token, address _ctoken) = compMapping.getMapping(tokenIds[i]);\r\n            require(_token != address(0) && _ctoken != address(0), \"ctoken mapping not found\");\r\n\r\n            ctokens[i] = _ctoken;\r\n\r\n            ctokenContracts[i] = CTokenInterface(ctokens[i]);\r\n\r\n            ctokensBal[i] = ctokenContracts[i].balanceOf(userAccount);\r\n            borrowAmts[i] = ctokenContracts[i].borrowBalanceCurrent(userAccount);\r\n            if (_token != getAddressETH() && borrowAmts[i] > 0) {\r\n                TokenInterface(_token).approve(ctokens[i], borrowAmts[i]);\r\n            }\r\n        }\r\n\r\n        enterMarkets(ctokens);\r\n        _borrow(ctokenContracts, borrowAmts, _length);\r\n        _paybackOnBehalf(userAccount, ctokenContracts, borrowAmts, _length);\r\n        _transferCtokens(userAccount, ctokenContracts, ctokensBal, _length);\r\n\r\n        emit LogCompoundImport(userAccount, ctokens, ctokensBal, borrowAmts);\r\n    }\r\n}\r\n\r\ncontract ConnectCompoundImport is ImportResolver {\r\n    string public name = \"Compound-Import-v2.1\";\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"cTknBals\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"borrowBals\",\"type\":\"uint256[]\"}],\"name\":\"LogCompoundImport\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"connectorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"model\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAccount\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"tokenIds\",\"type\":\"string[]\"}],\"name\":\"importCompound\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ConnectCompoundImport","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ec25ae053b1e8954b93137d35c4f26026310146f1322871ab6d1ad3d9109738d"}]}