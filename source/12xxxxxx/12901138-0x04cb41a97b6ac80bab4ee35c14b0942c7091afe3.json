{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Crowdsale.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\ninterface IERC721 {\\r\\n    function mint(address to, uint256 tokenId) external;\\r\\n    function exists(uint256 tokenId) external view returns (bool);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Crowdsale\\r\\n * @dev Crowdsale contract allowing investors to purchase the cell token with our ERC20 land tokens.\\r\\n * This contract implements such functionality in its most fundamental form and can be extended \\r\\n * to provide additional functionality and/or custom behavior.\\r\\n */\\r\\ncontract Crowdsale is Context {\\r\\n    using SafeMath for uint256;\\r\\n    // The token being sold\\r\\n    IERC721 private _cellToken;\\r\\n\\r\\n    // The main token that you can buy cell with it\\r\\n    IERC20 private _land;\\r\\n    address private _tokenWallet;\\r\\n\\r\\n    // Address where your paid land tokens are collected\\r\\n    address payable private _wallet;\\r\\n\\r\\n    // Amount of land token raised\\r\\n    uint256 private _tokenRaised;\\r\\n\\r\\n    // Amount of token to be pay for one ERC721 token\\r\\n    uint256 private _landPerToken;\\r\\n\\r\\n    // Max token count to be sale\\r\\n    uint256 private _maxTokenCount;\\r\\n\\r\\n    uint256 constant private CLD_RATE_10000 = 50000;\\r\\n    uint256 constant private CLD_RATE_10000_30000 = 52000;\\r\\n    uint256 constant private CLD_RATE_30000_70000 = 53000;\\r\\n    uint256 constant private CLD_RATE_70000_200000 = 54500;\\r\\n    uint256 constant private CLD_RATE_200000_500000 = 57000;\\r\\n    uint256 constant private CLD_RATE_500000_up = 60000;\\r\\n\\r\\n    /**\\r\\n     * Event for token purchase logging\\r\\n     * @param purchaser who paid for the tokens\\r\\n     * @param beneficiary who got the tokens\\r\\n     * @param tokenId uint256 ID of the token to be purchased\\r\\n     */\\r\\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 tokenId);\\r\\n\\r\\n    /**\\r\\n     * @param wallet_ Address where collected tokens will be forwarded to\\r\\n     * @param landToken_ Address of the Land token that you can buy with it\\r\\n     * @param cellToken_ Address of the Cell token being sold\\r\\n     * @param landPerToken_ tokens amount paid for purchase a Cell token\\r\\n     */\\r\\n    constructor (address payable wallet_, IERC20 landToken_, address tokenWallet_, IERC721 cellToken_, uint256 landPerToken_, uint256 maxTokenCoun_)\\r\\n        public\\r\\n    {\\r\\n        require(wallet_ != address(0), \\\"Crowdsale: wallet is the zero address\\\");\\r\\n        require(address(landToken_) != address(0), \\\"Crowdsale: land token is the zero address\\\");\\r\\n        require(address(cellToken_) != address(0), \\\"Crowdsale: cell token is the zero address\\\");\\r\\n        require(landPerToken_ > 0, \\\"Crowdsale: token price must be greater than zero\\\");\\r\\n        require(maxTokenCoun_ > 0, \\\"Crowdsale: max token count must be greater than zero\\\");\\r\\n        _wallet = wallet_;\\r\\n        _land = landToken_;\\r\\n        _tokenWallet = tokenWallet_;\\r\\n        _cellToken = cellToken_;\\r\\n        _landPerToken = landPerToken_;\\r\\n        _maxTokenCount = maxTokenCoun_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fallback function revert your fund.\\r\\n     * Only buy Cell token with Land token.\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        revert(\\\"Crowdsale: cannot accept any amount directly\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return The base token that you can buy with it\\r\\n     */\\r\\n    function land() public view returns (IERC20) {\\r\\n        return _land;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return The token being sold.\\r\\n     */\\r\\n    function cellToken() public view returns (IERC721) {\\r\\n        return _cellToken;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return Amount of Land token to be pay for a Cell token\\r\\n     */\\r\\n    function landPerToken() public view returns (uint256) {\\r\\n        return _landPerToken;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return The address where tokens amounts are collected.\\r\\n     */\\r\\n    function wallet() public view returns (address) {\\r\\n        return _wallet;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return The amount of Land token raised.\\r\\n     */\\r\\n    function tokenRaised() public view returns (uint256) {\\r\\n        return _tokenRaised;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @return The amount of Cell token can be sold.\\r\\n     */\\r\\n    function getMaxTokenCount() public view returns (uint256) {\\r\\n        return _maxTokenCount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns x and y where represent the position of the cell.\\r\\n     */\\r\\n    function cellById(uint256 tokenId) public pure returns (uint256 x, uint256 y){\\r\\n        y = tokenId / 90;\\r\\n        x = tokenId - (y * 90);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev token purchase with pay Land tokens\\r\\n     * @param beneficiary Recipient of the token purchase\\r\\n     * @param tokenId uint256 ID of the token to be purchase\\r\\n     */\\r\\n    function buyToken(address beneficiary, uint256 tokenId) public payable{\\r\\n        require(beneficiary != address(0), \\\"Crowdsale: beneficiary is the zero address\\\");\\r\\n        require(_landPerToken <= _land.allowance(_msgSender(), address(this)), \\\"Crowdsale: Not enough CLD allowance\\\");\\r\\n        require(tokenId < getMaxTokenCount(), \\\"Crowdsale: tokenId must be less than max token count\\\");\\r\\n        (uint256 x, uint256 y) = cellById(tokenId);\\r\\n        require(x < 38 || x > 53 || y < 28 || y > 43, \\\"Crowdsale: tokenId should not be in the unsold range\\\");\\r\\n        require(!_cellToken.exists(tokenId), \\\"Crowdsale: token already minted\\\");\\r\\n        uint256 balance = _land.balanceOf(_msgSender());\\r\\n        if (_landPerToken <= balance){\\r\\n            _land.transferFrom(_msgSender(), _wallet, _landPerToken);\\r\\n        }\\r\\n        else{\\r\\n            require(msg.value > 0, \\\"Crowdsale: Not enough CLD or ETH\\\");\\r\\n            uint256 newAmount = _getTokenAmount(msg.value);\\r\\n            require(newAmount.add(balance) >= _landPerToken, \\\"Crowdsale: Not enough CLD or ETH\\\");\\r\\n            _land.transferFrom(_tokenWallet, _msgSender(), newAmount);\\r\\n            _land.transferFrom(_msgSender(), _wallet, _landPerToken);\\r\\n            _wallet.transfer(msg.value);\\r\\n        }\\r\\n        _tokenRaised += _landPerToken;\\r\\n        _cellToken.mint(beneficiary, tokenId);\\r\\n        emit TokensPurchased(msg.sender, beneficiary, tokenId);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev batch token purchase with pay our ERC20 tokens\\r\\n     * @param beneficiary Recipient of the token purchase\\r\\n     * @param tokenIds uint256 IDs of the token to be purchase\\r\\n     */\\r\\n    function buyBatchTokens(address beneficiary, uint256[] memory tokenIds) public payable{\\r\\n        require(beneficiary != address(0), \\\"Crowdsale: beneficiary is the zero address\\\");\\r\\n        uint256 tokenAmount = _landPerToken * tokenIds.length;\\r\\n        require(tokenAmount <= _land.allowance(_msgSender(), address(this)), \\\"Crowdsale: Not enough CLD allowance\\\");\\r\\n        for (uint256 i = 0; i < tokenIds.length; ++i) {\\r\\n            require(tokenIds[i] < getMaxTokenCount(), \\\"Crowdsale: tokenId must be less than max token count\\\");\\r\\n            (uint256 x, uint256 y) = cellById(tokenIds[i]);\\r\\n            require(x < 38 || x > 53 || y < 28 || y > 43, \\\"Crowdsale: tokenId should not be in the unsold range\\\");\\r\\n            require(!_cellToken.exists(tokenIds[i]), \\\"Crowdsale: token already minted\\\");\\r\\n        }\\r\\n        uint256 balance = _land.balanceOf(_msgSender());\\r\\n        if (tokenAmount <= balance){\\r\\n            _land.transferFrom(_msgSender(), _wallet, tokenAmount);\\r\\n        }\\r\\n        else{\\r\\n            require(msg.value > 0, \\\"Crowdsale: Not enough CLD or ETH\\\");\\r\\n            uint256 newAmount = _getTokenAmount(msg.value);\\r\\n            require(newAmount.add(balance) >= tokenAmount, \\\"Crowdsale: Not enough CLD or ETH\\\");\\r\\n            _land.transferFrom(_tokenWallet, _msgSender(), newAmount);\\r\\n            _land.transferFrom(_msgSender(), _wallet, tokenAmount);\\r\\n            _wallet.transfer(msg.value);\\r\\n        }\\r\\n        \\r\\n        _tokenRaised += tokenAmount;\\r\\n        for (uint256 i = 0; i < tokenIds.length; ++i) {\\r\\n            _cellToken.mint(beneficiary, tokenIds[i]);\\r\\n            emit TokensPurchased(msg.sender, beneficiary, tokenIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Overrides function in the Crowdsale contract to enable a custom phased distribution\\r\\n     * @param weiAmount Value in wei to be converted into tokens\\r\\n     * @return Number of tokens that can be purchased with the specified weiAmount\\r\\n     */\\r\\n    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\\r\\n        if (weiAmount >= 10 * 1e18) {\\r\\n            return weiAmount.mul(CLD_RATE_500000_up);\\r\\n        } else if (weiAmount >= 4 * 1e18) {\\r\\n            return weiAmount.mul(CLD_RATE_200000_500000);\\r\\n        } else if (weiAmount >= 1400 * 1e15 ) {\\r\\n            return weiAmount.mul(CLD_RATE_70000_200000);\\r\\n        } else if (weiAmount >= 600 * 1e15) {\\r\\n            return weiAmount.mul(CLD_RATE_30000_70000);\\r\\n        } else if (weiAmount >= 200 * 1e15) {\\r\\n            return weiAmount.mul(CLD_RATE_10000_30000);\\r\\n        } else {\\r\\n            return weiAmount.mul(CLD_RATE_10000);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"landToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenWallet_\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"cellToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"landPerToken_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokenCoun_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"buyBatchTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cellById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cellToken\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"land\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"landPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a1a6e865f08918fc2994386530fa9d169c9e1fc3000000000000000000000000be5ec791eeb4a12221094126e7c829bbb8c776fe000000000000000000000000d9f07b350537cdb89a4be9658539b5115988cbb5000000000000000000000000e79e93a4dbc01f928cde67321d70b577ec44819200000000000000000000000000000000000000000000010f0cf064dd592000000000000000000000000000000000000000000000000000000000000000002d00","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}