{"status":"1","message":"OK","result":[{"SourceCode":"{\"PErc20Delegator.sol\":{\"content\":\"pragma solidity ^0.7.6;\\n\\nimport \\\"./ProxyWithRegistry.sol\\\";\\nimport \\\"./RegistryInterface.sol\\\";\\n\\n/**\\n * @title DeFiPie\\u0027s PErc20Delegator Contract\\n * @notice PTokens which wrap an EIP-20 underlying and delegate to an implementation\\n * @author DeFiPie\\n */\\ncontract PErc20Delegator is ProxyWithRegistry {\\n\\n    /**\\n     * @notice Construct a new money market\\n     * @param underlying_ The address of the underlying asset\\n     * @param controller_ The address of the Controller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param initialReserveFactorMantissa_ The initial reserve factor, scaled by 1e18\\n     * @param name_ ERC-20 name of this token\\n     * @param symbol_ ERC-20 symbol of this token\\n     * @param decimals_ ERC-20 decimal precision of this token\\n     * @param registry_ The address of the registry contract\\n     */\\n    constructor(\\n        address underlying_,\\n        address controller_,\\n        address interestRateModel_,\\n        uint initialExchangeRateMantissa_,\\n        uint initialReserveFactorMantissa_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_,\\n        address registry_\\n    ) {\\n        // Set registry\\n        _setRegistry(registry_);\\n\\n        // First delegate gets to initialize the delegator (i.e. storage contract)\\n        delegateTo(_pTokenImplementation(), abi.encodeWithSignature(\\\"initialize(address,address,address,address,uint256,uint256,string,string,uint8)\\\",\\n                                                            underlying_,\\n                                                            registry_,\\n                                                            controller_,\\n                                                            interestRateModel_,\\n                                                            initialExchangeRateMantissa_,\\n                                                            initialReserveFactorMantissa_,\\n                                                            name_,\\n                                                            symbol_,\\n                                                            decimals_));\\n    }\\n\\n    /**\\n     * @notice Internal method to delegate execution to another contract\\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\\n     * @param callee The contract to delegatecall\\n     * @param data The raw data to delegatecall\\n     * @return The returned bytes from the delegatecall\\n     */\\n    function delegateTo(address callee, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returnData) = callee.delegatecall(data);\\n        assembly {\\n            if eq(success, 0) {\\n                revert(add(returnData, 0x20), returndatasize())\\n            }\\n        }\\n        return returnData;\\n    }\\n\\n    function delegateAndReturn() internal returns (bytes memory) {\\n        (bool success, ) = _pTokenImplementation().delegatecall(msg.data);\\n\\n        assembly {\\n            let free_mem_ptr := mload(0x40)\\n            returndatacopy(free_mem_ptr, 0, returndatasize())\\n\\n            switch success\\n            case 0 { revert(free_mem_ptr, returndatasize()) }\\n            default { return(free_mem_ptr, returndatasize()) }\\n        }\\n    }\\n\\n    /**\\n     * @notice Delegates execution to an implementation contract\\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\\n     */\\n    fallback() external {\\n        // delegate all other functions to current implementation\\n        delegateAndReturn();\\n    }\\n}\\n\"},\"ProxyWithRegistry.sol\":{\"content\":\"pragma solidity ^0.7.6;\\n\\nimport \\\"./RegistryInterface.sol\\\";\\n\\ncontract ProxyWithRegistryStorage {\\n\\n    /**\\n     * @notice Address of the registry contract\\n     */\\n    address public registry;\\n}\\n\\nabstract contract ProxyWithRegistryInterface is ProxyWithRegistryStorage {\\n    function _setRegistry(address _registry) internal virtual;\\n    function _pTokenImplementation() internal view virtual returns (address);\\n}\\n\\ncontract ProxyWithRegistry is ProxyWithRegistryInterface {\\n    /**\\n     *  Returns actual address of the implementation contract from current registry\\n     *  @return registry Address of the registry\\n     */\\n    function _pTokenImplementation() internal view override returns (address) {\\n        return RegistryInterface(registry).pTokenImplementation();\\n    }\\n\\n    function _setRegistry(address _registry) internal override {\\n        registry = _registry;\\n    }\\n}\\n\\ncontract ImplementationStorage {\\n\\n    address public implementation;\\n\\n    function _setImplementation(address implementation_) internal {\\n        implementation = implementation_;\\n    }\\n}\\n\"},\"RegistryInterface.sol\":{\"content\":\"pragma solidity ^0.7.6;\\n\\ninterface RegistryInterface {\\n\\n    /**\\n     *  Returns admin address for cToken contracts\\n     *  @return admin address\\n     */\\n    function admin() external view returns (address payable);\\n\\n    /**\\n     *  Returns address of actual PToken implementation contract\\n     *  @return Address of contract\\n     */\\n    function pTokenImplementation() external view returns (address);\\n\\n    function addPToken(address underlying, address pToken) external returns(uint);\\n    function addPETH(address pETH_) external returns(uint);\\n    function addPPIE(address pPIE_) external returns(uint);\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateModel_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeRateMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialReserveFactorMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PErc20Delegator","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"0000000000000000000000006f87d756daf0503d08eb8993686c7fc01dc44fb100000000000000000000000036de5bbc618a04c9b471208ef52ee2b1f536e92d000000000000000000000000d47d39a66bb4912d127fbfc1b90884fcb3546137000000000000000000000000000000000000000000a56fa5b99019a5c8000000000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000080000000000000000000000001135270bbb0627e769a7a2e24f2b2c7f14b3d83a00000000000000000000000000000000000000000000000000000000000000104465466950696520556e6954726164650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000067054524144450000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"1","Implementation":"0x897540454fe376a747e009189d2912f1ce110949","SwarmSource":"ipfs://21678440ec8ef4fb1f1cf85d2a016440b895bcc4be5ad69047bfbbf21d1df920"}]}