{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.26;\r\n\r\n// ----------------------------------------------------------------------------\r\n// LHASA ICO contract\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe math\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Ownership contract\r\n// _newOwner is address of new owner\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    \r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // transfer Ownership to other address\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0x0));\r\n        emit OwnershipTransferred(owner,_newOwner);\r\n        owner = _newOwner;\r\n    }\r\n    \r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// LHASAToken interface\r\n// ----------------------------------------------------------------------------\r\ncontract LHASAToken {\r\n    \r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// LHASAICO smart contract\r\n// ----------------------------------------------------------------------------\r\ncontract LHASAICO is Owned {\r\n\r\n    using SafeMath for uint256;\r\n    \r\n    enum State {\r\n        PrivateSale,\r\n        PreSale,\r\n        Successful\r\n    }\r\n    \r\n    // public variables\r\n    State public state; // Set initial stage\r\n    uint256 public totalRaised; // eth in wei\r\n    uint256 public totalDistributed; // tokens distributed\r\n    LHASAToken public LHASA; // LHASA token address\r\n    \r\n    // caps\r\n    uint256 public hardcap_PrivateSale = 37.5 ether;\r\n    uint256 public hardcap_PreSale = 116 ether;\r\n    uint256 public currentcap_PrivateSale;\r\n    uint256 public currentcap_PreSale;\r\n\r\n    // events for log\r\n    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\r\n    event LogBeneficiaryPaid(address _beneficiaryAddress);\r\n    event LogFundingSuccessful(uint _totalRaised);\r\n    event LogFunderInitialized(address _creator);\r\n    event LogContributorsPayout(address _addr, uint _amount);\r\n    \r\n    // To determine whether the ICO is running or stopped\r\n    modifier onlyIfNotFinished {\r\n        require(state != State.Successful);\r\n        _;\r\n    }\r\n    \r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // LHASAICO constructor\r\n    // _addressOfToken is the token totalDistributed\r\n    // ----------------------------------------------------------------------------\r\n    constructor(LHASAToken _addressOfToken) public {\r\n        require(_addressOfToken != address(0)); // should have valid address\r\n        LHASA = LHASAToken(_addressOfToken);\r\n        state = State.PrivateSale;\r\n        emit LogFunderInitialized(owner);\r\n    }\r\n    \r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Function to handle eth transfers\r\n    // It invokes when someone sends ETH to this contract address.\r\n    // Requires enough gas for the execution otherwise it'll throw out of gas error.\r\n    // tokens are transferred to user\r\n    // ETH are transferred to current owner\r\n    // ----------------------------------------------------------------------------\r\n    function() public payable {\r\n        contribute();\r\n    }\r\n\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // Acceptes ETH and send equivalent LHASA with bonus if any.\r\n    // ----------------------------------------------------------------------------\r\n    function contribute() onlyIfNotFinished public payable {\r\n        \r\n        uint256 tokenBought; // Variable to store amount of tokens bought\r\n        uint256 tokenPrice;\r\n        \r\n        // Token allocation calculation\r\n        if (state == State.PrivateSale){\r\n            // check min and max investment\r\n            require(msg.value >= 0.1 ether && msg.value <= 2 ether, \"Private sale investment should be between 0.1 - 2 ETH\");\r\n            \r\n            // token price\r\n            tokenPrice = 4000000000000; // 1 ETH = 4 Trillions\r\n            \r\n            // increase current cap\r\n            currentcap_PrivateSale = currentcap_PrivateSale.add(msg.value);\r\n            \r\n            // check hardcap \r\n            require(currentcap_PrivateSale <= hardcap_PrivateSale, \"PrivateSale hardcap reached\");\r\n        } \r\n        else if (state == State.PreSale){\r\n            // check min and max investment\r\n            require(msg.value >= 0.1 ether && msg.value <= 5 ether, \"Pre sale investment should be between 0.1 - 5 ETH\");\r\n            \r\n            // token price\r\n            tokenPrice = 3000000000000; // 1 ETH = 3 Trillions\r\n            \r\n            // increase current cap\r\n            currentcap_PreSale = currentcap_PreSale.add(msg.value);\r\n            \r\n            // check hardcap \r\n            require(currentcap_PreSale <= hardcap_PreSale, \"PreSale hardcap reached\");\r\n        } \r\n        else {\r\n            revert();\r\n        }\r\n    \r\n        tokenBought = (msg.value).mul(tokenPrice).div(10 ** 9);\r\n        \r\n        // this smart contract should have enough tokens to distribute\r\n        require(LHASA.balanceOf(this) >= tokenBought);\r\n        \r\n        totalRaised = totalRaised.add(msg.value); // Save the total eth totalRaised (in wei)\r\n        totalDistributed = totalDistributed.add(tokenBought); //Save to total tokens distributed\r\n        \r\n        LHASA.transfer(msg.sender,tokenBought); // Send Tokens to user\r\n        owner.transfer(msg.value); // Send ETH to owner\r\n        \r\n        // LOGS\r\n        emit LogContributorsPayout(msg.sender,tokenBought); // Log investor paid event\r\n        emit LogBeneficiaryPaid(owner); // Log owner paid event\r\n        emit LogFundingReceived(msg.sender, msg.value, totalRaised); // Log funding event\r\n    }\r\n    \r\n    \r\n    function finished() onlyOwner public { \r\n        \r\n        uint256 remainder = LHASA.balanceOf(this); //Remaining tokens on contract\r\n        \r\n        // Funds send to creator if any\r\n        if(address(this).balance > 0) {\r\n            owner.transfer(address(this).balance);\r\n            emit LogBeneficiaryPaid(owner);\r\n        }\r\n \r\n        LHASA.transfer(owner,remainder); //remainder tokens send to creator\r\n        emit LogContributorsPayout(owner, remainder);\r\n        \r\n        state = State.Successful; // updating the state\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Move to next ICO state\r\n    // ------------------------------------------------------------------------\r\n    function nextState() onlyOwner public {\r\n        require(state != State.PreSale);\r\n        state = State(uint(state) + 1);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Move to previous ICO state\r\n    // ------------------------------------------------------------------------\r\n    function previousState() onlyOwner public {\r\n        require(state != State.PrivateSale);\r\n        state = State(uint(state) - 1);\r\n    }\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // Function to claim any token stuck on contract\r\n    // ----------------------------------------------------------------------------\r\n    function claimTokens() onlyOwner public {\r\n        uint256 remainder = LHASA.balanceOf(this); //Check remainder tokens\r\n        LHASA.transfer(owner,remainder); //Transfer tokens to owner\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"previousState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentcap_PrivateSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nextState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap_PreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentcap_PreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap_PrivateSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finished\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LHASA\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_addressOfToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"LogBeneficiaryPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_totalRaised\",\"type\":\"uint256\"}],\"name\":\"LogFundingSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"LogFunderInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogContributorsPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LHASAICO","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009caec9632268eb9226b049b9be6464121bbd4ee3","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"bzzr://2033bbac68d61eb569f45c97c9df3eb809a4e89347f26b3e21599e8b305423de"}]}