{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Bridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n\\nimport \\\"./utils/DistributedOwnable.sol\\\";\\nimport \\\"./interfaces/IBridge.sol\\\";\\nimport \\\"./utils/Nonce.sol\\\";\\nimport \\\"./utils/RedButton.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\n\\n/**\\n    @title Ethereum Bridge contract.\\n**/\\ncontract Bridge is Initializable, DistributedOwnable, RedButton, Nonce, IBridge {\\n    BridgeConfiguration bridgeConfiguration;\\n\\n    /**\\n        @notice Bridge initializer\\n        @param owners Initial list of owners addresses\\n        @param admin Red button caller, probably multisig\\n        @param _bridgeConfiguration Bridge configuration\\n    **/\\n    function initialize(\\n        address[] memory owners,\\n        address admin,\\n        BridgeConfiguration memory _bridgeConfiguration\\n    ) public initializer {\\n        for (uint i=0; i < owners.length; i++) {\\n            grantOwnership(owners[i]);\\n        }\\n\\n        _setAdmin(admin);\\n\\n        bridgeConfiguration = _bridgeConfiguration;\\n    }\\n\\n    /*\\n        Is address relay or not.\\n        Handy wrapper around ownership functionality.\\n        @param candidate Address\\n        @returns Boolean is relay or not\\n    */\\n    function isRelay(\\n        address candidate\\n    ) override public view returns(bool) {\\n        return isOwner(candidate);\\n    }\\n\\n    /**\\n     * @notice Count how much signatures are made by owners.\\n     * @param payload Bytes payload, which was signed\\n     * @param signatures Bytes array with payload signatures\\n    */\\n    function countRelaysSignatures(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    ) public override view returns(uint) {\\n        uint ownersConfirmations = 0;\\n\\n        address[] memory signers = new address[](signatures.length);\\n\\n        for (uint i=0; i<signatures.length; i++) {\\n            address signer = recoverSignature(payload, signatures[i]);\\n\\n            if (isOwner(signer)) {\\n                // Check this owner is not used before\\n                for (uint u=0; u<signers.length; u++) {\\n                    require(signers[u] != signer, \\\"Signer already seen\\\");\\n                }\\n\\n                ownersConfirmations++;\\n                signers[i] = signer;\\n            }\\n        }\\n\\n        return ownersConfirmations;\\n    }\\n\\n    /*\\n        Update Bridge configuration\\n        @dev Check enough owners signed and apply update\\n        @param payload Bytes encoded BridgeConfiguration structure\\n    */\\n    function updateBridgeConfiguration(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    ) public {\\n        require(\\n            countRelaysSignatures(\\n                payload,\\n                signatures\\n            ) >= bridgeConfiguration.bridgeUpdateRequiredConfirmations,\\n            'Not enough confirmations'\\n        );\\n\\n        (BridgeConfiguration memory _bridgeConfiguration) = abi.decode(payload, (BridgeConfiguration));\\n\\n        require(nonceNotUsed(_bridgeConfiguration.nonce), 'Nonce already used');\\n\\n        bridgeConfiguration = _bridgeConfiguration;\\n\\n        rememberNonce(_bridgeConfiguration.nonce);\\n    }\\n\\n    /*\\n        Update Bridge relay\\n        @dev Check enough owners signed and apply update\\n        @param payload Bytes encoded BridgeRelay structure\\n    */\\n    function updateBridgeRelay(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    ) public {\\n        require(\\n            countRelaysSignatures(\\n                payload,\\n                signatures\\n            ) >= bridgeConfiguration.bridgeUpdateRequiredConfirmations,\\n            'Not enough confirmations'\\n        );\\n\\n        (BridgeRelay memory bridgeRelay) = abi.decode(payload, (BridgeRelay));\\n\\n        require(nonceNotUsed(bridgeRelay.nonce), 'Nonce already used');\\n\\n        if (bridgeRelay.action) {\\n            grantOwnership(bridgeRelay.account);\\n        } else {\\n            removeOwnership(bridgeRelay.account);\\n        }\\n\\n        rememberNonce(bridgeRelay.nonce);\\n    }\\n\\n    /*\\n        Get current bridge configuration\\n        @return Bridge configuration structure\\n    */\\n    function getConfiguration() public view override returns (BridgeConfiguration memory) {\\n        return bridgeConfiguration;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/DistributedOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./../libraries/ECDSA.sol\\\";\\nimport \\\"./../libraries/Array.sol\\\";\\n\\n\\ncontract DistributedOwnable {\\n    using ECDSA for bytes32;\\n    using Array for address[];\\n\\n    mapping (address => bool) private _owners;\\n    address[] private _ownersList;\\n\\n    event OwnershipGranted(address indexed newOwner);\\n    event OwnershipRemoved(address indexed removedOwner);\\n\\n    /**\\n     * @notice Check if account has ownership\\n     * @param checkAddr Address to be checked\\n     * @return Boolean status of the address\\n     */\\n    function isOwner(address checkAddr) public view returns (bool) {\\n        return _owners[checkAddr];\\n    }\\n\\n    /**\\n     * @notice Get the list of owners\\n     * @return List of addresses\\n     */\\n    function getOwners() public view returns(address[] memory) {\\n        return _ownersList;\\n    }\\n\\n    /**\\n     * @dev Handy wrapper for Solidity recover function. Returns signature author address.\\n     * @param payload - payload which was signed\\n     * @param signature - payload signature\\n    */\\n    function recoverSignature(\\n        bytes memory payload,\\n        bytes memory signature\\n    ) public pure returns(address) {\\n        return keccak256(payload).toBytesPrefixed().recover(signature);\\n    }\\n\\n    /**\\n     * @dev Internal ownership granting.\\n     * @param newOwner - Account to grant ownership\\n    */\\n    function grantOwnership(address newOwner) internal {\\n        require(!_owners[newOwner], 'Already owner');\\n\\n        _owners[newOwner] = true;\\n        _ownersList.push(newOwner);\\n\\n        emit OwnershipGranted(newOwner);\\n    }\\n\\n    /**\\n     * @dev Internal ownership removing.\\n     * @param ownerToRemove - Account to remove ownership\\n    */\\n    function removeOwnership(address ownerToRemove) internal {\\n        require(_owners[ownerToRemove], 'Not an owner');\\n\\n        _owners[ownerToRemove] = false;\\n        _ownersList.removeByValue(ownerToRemove);\\n\\n        emit OwnershipRemoved(ownerToRemove);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface IBridge {\\n    function isRelay(address candidate) external view returns (bool);\\n    function countRelaysSignatures(\\n        bytes calldata payload,\\n        bytes[] calldata signatures\\n    ) external view returns(uint);\\n\\n    struct BridgeConfiguration {\\n        uint16 nonce;\\n        uint16 bridgeUpdateRequiredConfirmations;\\n    }\\n\\n    struct BridgeRelay {\\n        uint16 nonce;\\n        address account;\\n        bool action;\\n    }\\n\\n    function getConfiguration() external view returns (BridgeConfiguration memory);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Nonce.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n\\n/*\\n    Handy contract for remembering already used nonces.\\n*/\\ncontract Nonce {\\n    mapping(uint16 => bool) public nonce;\\n\\n    event NonceUsed(uint16 _nonce);\\n\\n    function nonceNotUsed(uint16 _nonce) public view returns(bool) {\\n        return !nonce[_nonce];\\n    }\\n\\n    function rememberNonce(uint16 _nonce) internal {\\n        nonce[_nonce] = true;\\n\\n        emit NonceUsed(_nonce);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/RedButton.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/*\\n    Naturally Red Button functionality.\\n    Creates special role - admin. He's allowed to perform the list of any\\n    external calls.\\n*/\\ncontract RedButton {\\n    address public admin;\\n\\n    /*\\n        Internal function for transferring admin ownership\\n    */\\n    function _setAdmin(address _admin) internal {\\n        admin = _admin;\\n    }\\n\\n    /*\\n        Transfer admin ownership\\n        @dev Only called by\\n        @param _newAdmin New admin address\\n    */\\n    function transferAdmin(address _newAdmin) public onlyAdmin {\\n        require(_newAdmin != address(0), 'Cant set admin to zero address');\\n        _setAdmin(_newAdmin);\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, 'Sender not admin');\\n        _;\\n    }\\n\\n    /*\\n        Execute list of calls. Any calls allowed - transfer ETH, call any contract any function.\\n        @param _to List of addresses to which make a calls\\n        @param _data List of call data, may be empty for ETH transfer\\n        @param weiAmount List of ETH amounts to send on each call\\n        @dev All params should be same length\\n    */\\n    function externalCallEth(\\n        address payable[] memory  _to,\\n        bytes[] memory _data,\\n        uint256[] memory weiAmount\\n    ) onlyAdmin public payable {\\n        require(\\n            _to.length == _data.length && _data.length == weiAmount.length,\\n            \\\"Parameters should be equal length\\\"\\n        );\\n\\n        for (uint16 i = 0; i < _to.length; i++) {\\n            _cast(_to[i], _data[i], weiAmount[i]);\\n        }\\n    }\\n\\n    function _cast(\\n        address payable _to,\\n        bytes memory _data,\\n        uint256 weiAmount\\n    ) internal {\\n        bytes32 response;\\n\\n        assembly {\\n            let succeeded := call(sub(gas(), 5000), _to, weiAmount, add(_data, 0x20), mload(_data), 0, 32)\\n            response := mload(0)\\n            switch iszero(succeeded)\\n            case 1 {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\nlibrary ECDSA {\\n\\n    /**\\n     * @dev Recover signer address from a message by using their signature\\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\\n     * @param signature bytes signature, the signature is generated using web3.eth.sign()\\n     */\\n    function recover(bytes32 hash, bytes memory signature)\\n    internal\\n    pure\\n    returns (address)\\n    {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            return (address(0));\\n        }\\n\\n        // Divide the signature in r, s and v variables with inline assembly.\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        // If the version is correct return the signer address\\n        if (v != 27 && v != 28) {\\n            return (address(0));\\n        } else {\\n            // solium-disable-next-line arg-overflow\\n            return ecrecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n      * toBytesPrefixed\\n      * @dev prefix a bytes32 value with \\\"\\\\x19Ethereum Signed Message:\\\"\\n      * and hash the result\\n      */\\n    function toBytesPrefixed(bytes32 hash)\\n    internal\\n    pure\\n    returns (bytes32)\\n    {\\n        return keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Array.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n\\nlibrary Array {\\n    function indexOf(address[] storage values, address value) internal view returns(uint) {\\n        uint i = 0;\\n\\n        while (values[i] != value && i <= values.length) {\\n            i++;\\n        }\\n\\n        return i;\\n    }\\n\\n    /** Removes the given value in an array. */\\n    function removeByValue(address[] storage values, address value) internal {\\n        uint i = indexOf(values, value);\\n\\n        removeByIndex(values, i);\\n    }\\n\\n    /** Removes the value at the given index in an array. */\\n    function removeByIndex(address[] storage values, uint i) internal {\\n        while (i<values.length-1) {\\n            values[i] = values[i+1];\\n            i++;\\n        }\\n\\n        values.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_nonce\",\"type\":\"uint16\"}],\"name\":\"NonceUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"countRelaysSignatures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weiAmount\",\"type\":\"uint256[]\"}],\"name\":\"externalCallEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"nonce\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"bridgeUpdateRequiredConfirmations\",\"type\":\"uint16\"}],\"internalType\":\"struct IBridge.BridgeConfiguration\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"nonce\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"bridgeUpdateRequiredConfirmations\",\"type\":\"uint16\"}],\"internalType\":\"struct IBridge.BridgeConfiguration\",\"name\":\"_bridgeConfiguration\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"checkAddr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"isRelay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_nonce\",\"type\":\"uint16\"}],\"name\":\"nonceNotUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"recoverSignature\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"updateBridgeConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"updateBridgeRelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Bridge","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}