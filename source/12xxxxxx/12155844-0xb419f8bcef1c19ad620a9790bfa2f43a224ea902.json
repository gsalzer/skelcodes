{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/libraries/TransferHelper.sol\r\n\r\npragma solidity >=0.6.0;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: APPROVE_FAILED\");\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: TRANSFER_FAILED\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: TRANSFER_FROM_FAILED\");\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/SafeMath.sol\r\n\r\npragma solidity =0.6.6;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n}\r\n\r\n// File: dxswap-core/contracts/interfaces/IDXswapPair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IDXswapPair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n    function swapFee() external view returns (uint32);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n    function setSwapFee(uint32) external;\r\n}\r\n\r\n// File: contracts/libraries/DXswapLibrary.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\n\r\n\r\nlibrary DXswapLibrary {\r\n    using SafeMath for uint256;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, \"DXswapLibrary: IDENTICAL_ADDRESSES\");\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), \"DXswapLibrary: ZERO_ADDRESS\");\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB\r\n    ) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(\r\n            uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        hex\"ff\",\r\n                        factory,\r\n                        keccak256(abi.encodePacked(token0, token1)),\r\n                        hex\"2db943b381c6ef706828ea5e89f480bd449d4d3a2b98e6da97b30d0eb41fb6d6\" // init code hash\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB\r\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\r\n        (address token0, ) = sortTokens(tokenA, tokenB);\r\n        (uint256 reserve0, uint256 reserve1, ) = IDXswapPair(pairFor(factory, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getSwapFee(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB\r\n    ) internal view returns (uint256 swapFee) {\r\n        (address token0, ) = sortTokens(tokenA, tokenB);\r\n        swapFee = IDXswapPair(pairFor(factory, tokenA, tokenB)).swapFee();\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) internal pure returns (uint256 amountB) {\r\n        require(amountA > 0, \"DXswapLibrary: INSUFFICIENT_AMOUNT\");\r\n        require(reserveA > 0 && reserveB > 0, \"DXswapLibrary: INSUFFICIENT_LIQUIDITY\");\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut,\r\n        uint256 swapFee\r\n    ) internal pure returns (uint256 amountOut) {\r\n        require(amountIn > 0, \"DXswapLibrary: INSUFFICIENT_INPUT_AMOUNT\");\r\n        require(reserveIn > 0 && reserveOut > 0, \"DXswapLibrary: INSUFFICIENT_LIQUIDITY\");\r\n        uint256 amountInWithFee = amountIn.mul(uint256(10000).sub(swapFee));\r\n        uint256 numerator = amountInWithFee.mul(reserveOut);\r\n        uint256 denominator = reserveIn.mul(10000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut,\r\n        uint256 swapFee\r\n    ) internal pure returns (uint256 amountIn) {\r\n        require(amountOut > 0, \"DXswapLibrary: INSUFFICIENT_OUTPUT_AMOUNT\");\r\n        require(reserveIn > 0 && reserveOut > 0, \"DXswapLibrary: INSUFFICIENT_LIQUIDITY\");\r\n        uint256 numerator = reserveIn.mul(amountOut).mul(10000);\r\n        uint256 denominator = reserveOut.sub(amountOut).mul(uint256(10000).sub(swapFee));\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function getAmountsOut(\r\n        address factory,\r\n        uint256 amountIn,\r\n        address[] memory path\r\n    ) internal view returns (uint256[] memory amounts) {\r\n        require(path.length >= 2, \"DXswapLibrary: INVALID_PATH\");\r\n        amounts = new uint256[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint256 i; i < path.length - 1; i++) {\r\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\r\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, getSwapFee(factory, path[i], path[i + 1]));\r\n        }\r\n    }\r\n\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n    function getAmountsIn(\r\n        address factory,\r\n        uint256 amountOut,\r\n        address[] memory path\r\n    ) internal view returns (uint256[] memory amounts) {\r\n        require(path.length >= 2, \"DXswapLibrary: INVALID_PATH\");\r\n        amounts = new uint256[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint256 i = path.length - 1; i > 0; i--) {\r\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\r\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut, getSwapFee(factory, path[i - 1], path[i]));\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IDXswapFactory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IDXswapFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\r\n\r\n    function INIT_CODE_PAIR_HASH() external pure returns (bytes32);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function protocolFeeDenominator() external view returns (uint8);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n    function setProtocolFee(uint8 _protocolFee) external;\r\n\r\n    function setSwapFee(address pair, uint32 swapFee) external;\r\n}\r\n\r\n// File: contracts/interfaces/IERC20.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IWETH.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function withdraw(uint256) external;\r\n\r\n    function balanceOf(address guy) external returns (uint256);\r\n\r\n    function approve(address guy, uint256 wad) external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IBatchExchange.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IBatchExchange {\r\n    function tokenAddressToIdMap(address addr) external view returns (uint16);\r\n\r\n    function tokenIdToAddressMap(uint16 id) external view returns (address);\r\n\r\n    function hasToken(address addr) external view returns (bool);\r\n\r\n    function placeOrder(\r\n        uint16 buyToken,\r\n        uint16 sellToken,\r\n        uint32 validUntil,\r\n        uint128 buyAmount,\r\n        uint128 sellAmount\r\n    ) external returns (uint256);\r\n\r\n    function placeValidFromOrders(\r\n        uint16[] calldata buyTokens,\r\n        uint16[] calldata sellTokens,\r\n        uint32[] calldata validFroms,\r\n        uint32[] calldata validUntils,\r\n        uint128[] calldata buyAmounts,\r\n        uint128[] calldata sellAmounts\r\n    ) external returns (uint16[] memory orderIds);\r\n\r\n    function cancelOrders(uint16[] calldata orderIds) external;\r\n}\r\n\r\n// File: contracts/interfaces/IEpochTokenLocker.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IEpochTokenLocker {\r\n    function deposit(address token, uint256 amount) external;\r\n\r\n    function withdraw(address user, address token) external;\r\n\r\n    function getCurrentBatchId() external view returns (uint32);\r\n\r\n    function requestWithdraw(address token, uint256 amount) external;\r\n\r\n    function BATCH_TIME() external view returns (uint32);\r\n}\r\n\r\n// File: contracts/libraries/FixedPoint.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\r\nlibrary FixedPoint {\r\n    // range: [0, 2**112 - 1]\r\n    // resolution: 1 / 2**112\r\n    struct uq112x112 {\r\n        uint224 _x;\r\n    }\r\n\r\n    // range: [0, 2**144 - 1]\r\n    // resolution: 1 / 2**112\r\n    struct uq144x112 {\r\n        uint256 _x;\r\n    }\r\n\r\n    uint8 private constant RESOLUTION = 112;\r\n\r\n    // encode a uint112 as a UQ112x112\r\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\r\n        return uq112x112(uint224(x) << RESOLUTION);\r\n    }\r\n\r\n    // encodes a uint144 as a UQ144x112\r\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\r\n        return uq144x112(uint256(x) << RESOLUTION);\r\n    }\r\n\r\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\r\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\r\n        require(x != 0, \"FixedPoint: DIV_BY_ZERO\");\r\n        return uq112x112(self._x / uint224(x));\r\n    }\r\n\r\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\r\n    // reverts on overflow\r\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\r\n        uint256 z;\r\n        require(y == 0 || (z = uint256(self._x) * y) / y == uint256(self._x), \"FixedPoint: MULTIPLICATION_OVERFLOW\");\r\n        return uq144x112(z);\r\n    }\r\n\r\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\r\n    // equivalent to encode(numerator).div(denominator)\r\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\r\n        require(denominator > 0, \"FixedPoint: DIV_BY_ZERO\");\r\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\r\n    }\r\n\r\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\r\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\r\n        return uint112(self._x >> RESOLUTION);\r\n    }\r\n\r\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\r\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\r\n        return uint144(self._x >> RESOLUTION);\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/DXswapOracleLibrary.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\n\r\n\r\n// library with helper methods for oracles that are concerned with computing average prices\r\nlibrary DXswapOracleLibrary {\r\n    using FixedPoint for *;\r\n\r\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\r\n    function currentBlockTimestamp() internal view returns (uint32) {\r\n        return uint32(block.timestamp % 2**32);\r\n    }\r\n\r\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\r\n    function currentCumulativePrices(address pair)\r\n        internal\r\n        view\r\n        returns (\r\n            uint256 price0Cumulative,\r\n            uint256 price1Cumulative,\r\n            uint32 blockTimestamp\r\n        )\r\n    {\r\n        blockTimestamp = currentBlockTimestamp();\r\n        price0Cumulative = IDXswapPair(pair).price0CumulativeLast();\r\n        price1Cumulative = IDXswapPair(pair).price1CumulativeLast();\r\n\r\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\r\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IDXswapPair(pair).getReserves();\r\n        if (blockTimestampLast != blockTimestamp) {\r\n            // subtraction overflow is desired\r\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\r\n            // addition overflow is desired\r\n            // counterfactual\r\n            price0Cumulative += uint256(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\r\n            // counterfactual\r\n            price1Cumulative += uint256(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/OracleCreator.sol\r\n\r\npragma solidity =0.6.6;\r\n\r\n\r\n\r\n\r\ncontract OracleCreator {\r\n    using FixedPoint for *;\r\n    using SafeMath for uint256;\r\n\r\n    event OracleCreated(\r\n        uint256 indexed _oracleIndex,\r\n        address indexed _pair,\r\n        uint256 _windowTime\r\n    );\r\n\r\n    struct Oracle{\r\n        uint256 windowTime;\r\n        address token0;\r\n        address token1;\r\n        IDXswapPair pair;\r\n        uint32 blockTimestampLast;\r\n        uint256 price0CumulativeLast;\r\n        uint256 price1CumulativeLast;\r\n        FixedPoint.uq112x112 price0Average;\r\n        FixedPoint.uq112x112 price1Average;\r\n        uint256 observationsCount;\r\n        address owner;\r\n    }\r\n\r\n    mapping(uint256 => Oracle) public oracles;\r\n    uint256 public oraclesIndex;\r\n\r\n    function createOracle(\r\n        uint256 windowTime,\r\n        address pair\r\n    ) public returns (uint256 oracleId) {\r\n        IDXswapPair sourcePair = IDXswapPair(pair);\r\n        address token0 = sourcePair.token0();\r\n        address token1 = sourcePair.token1();\r\n        (,, uint32 blockTimestampLast) =  sourcePair.getReserves();\r\n\r\n        oracles[oraclesIndex] = Oracle({\r\n            windowTime: windowTime,\r\n            token0: token0,\r\n            token1: token1,\r\n            pair: sourcePair,\r\n            blockTimestampLast: blockTimestampLast,\r\n            price0CumulativeLast: sourcePair.price0CumulativeLast(),\r\n            price1CumulativeLast: sourcePair.price1CumulativeLast(),\r\n            price0Average: FixedPoint.uq112x112(0),\r\n            price1Average: FixedPoint.uq112x112(0),\r\n            observationsCount: 0,\r\n            owner: msg.sender\r\n        });\r\n        oracleId = oraclesIndex;\r\n        oraclesIndex++;\r\n        emit OracleCreated(oracleId, address(sourcePair), windowTime);\r\n    }\r\n\r\n    function update(uint256 oracleIndex) public {\r\n        Oracle storage oracle = oracles[oracleIndex];\r\n        require(msg.sender == oracle.owner, 'OracleCreator: CALLER_NOT_OWNER');\r\n        require(oracle.observationsCount < 2, 'OracleCreator: FINISHED_OBERSERVATION');\r\n        (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) =\r\n            DXswapOracleLibrary.currentCumulativePrices(address(oracle.pair));\r\n        uint32 timeElapsed = blockTimestamp - oracle.blockTimestampLast; // overflow is desired\r\n\r\n        // first update can be executed immediately. Ensure that at least one full period has passed since the first update \r\n        require(\r\n          oracle.observationsCount == 0 || timeElapsed >= oracle.windowTime, \r\n          'OracleCreator: PERIOD_NOT_ELAPSED'\r\n        );\r\n\r\n        // overflow is desired, casting never truncates\r\n        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\r\n        oracle.price0Average = FixedPoint.uq112x112(\r\n          uint224((price0Cumulative - oracle.price0CumulativeLast) / timeElapsed)\r\n        );\r\n        oracle.price1Average = FixedPoint.uq112x112(\r\n          uint224((price1Cumulative - oracle.price1CumulativeLast) / timeElapsed)\r\n        );\r\n\r\n        oracle.price0CumulativeLast = price0Cumulative;\r\n        oracle.price1CumulativeLast = price1Cumulative;\r\n        oracle.blockTimestampLast = blockTimestamp;\r\n        oracle.observationsCount++;\r\n    }\r\n\r\n    // note this will always return 0 before update has been called successfully for the first time.\r\n    function consult(uint256 oracleIndex, address token, uint256 amountIn) external view returns (uint256 amountOut) {\r\n        Oracle storage oracle = oracles[oracleIndex];\r\n        FixedPoint.uq112x112 memory avg;\r\n        if (token == oracle.token0) { \r\n          avg = oracle.price0Average;\r\n        } else {\r\n          require(token == oracle.token1, 'OracleCreator: INVALID_TOKEN'); \r\n          avg = oracle.price1Average;\r\n        }\r\n        amountOut = avg.mul(amountIn).decode144();\r\n    }\r\n\r\n    function isOracleFinalized(uint256 oracleIndex) external view returns (bool){\r\n        return oracles[oracleIndex].observationsCount == 2;\r\n    }\r\n\r\n    function getOracleDetails(uint256 oracleIndex) external view returns (Oracle memory) {\r\n      return oracles[oracleIndex];\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/GnosisProtocolRelayer.sol\r\n\r\npragma solidity =0.6.6;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract GnosisProtocolRelayer {\r\n    using SafeMath for uint256;\r\n\r\n    event NewOrder(\r\n        uint256 indexed _orderIndex\r\n    );\r\n\r\n    event PlacedTrade(\r\n        uint256 indexed _orderIndex,\r\n        uint256 _gpOrderID,\r\n        uint16 buyToken,\r\n        uint16 sellToken,\r\n        uint32 validUntil,\r\n        uint128 expectedAmountMin,\r\n        uint128 tokenInAmount\r\n    );\r\n\r\n    event PlacedExactTrade(\r\n        uint16 _gpOrderID,\r\n        uint16 buyToken,\r\n        uint16 sellToken,\r\n        uint32 validFrom,\r\n        uint32 validUntil,\r\n        uint128 tokenOutAmount,\r\n        uint128 tokenInAmount\r\n    );\r\n\r\n    event WithdrawnExpiredOrder(\r\n        uint256 indexed _orderIndex\r\n    );\r\n\r\n    struct Order {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint128 tokenInAmount;\r\n        uint128 minTokenOutAmount;\r\n        uint256 priceTolerance;\r\n        uint256 minReserve;\r\n        address oraclePair;\r\n        uint256 startDate;\r\n        uint256 deadline;\r\n        uint256 oracleId;\r\n        uint256 gpOrderId;\r\n        address factory;\r\n        bool executed;\r\n    }\r\n\r\n    uint256 public immutable GAS_ORACLE_UPDATE = 168364;\r\n    uint256 public immutable PARTS_PER_MILLION = 1000000;\r\n    uint256 public immutable BOUNTY = 0.01 ether;\r\n    uint256 public immutable ORACLE_WINDOW_TIME = 120; // 2 Minutes\r\n    uint32 public immutable BATCH_TIME;\r\n    uint32 public immutable UINT32_MAX_VALUE = 2**32 - 1;\r\n    uint128 public immutable UINT128_MAX_VALUE = 2**128 - 1;\r\n\r\n    address public immutable batchExchange;\r\n    address public immutable epochTokenLocker;\r\n    address payable public owner;\r\n    address public immutable WETH;\r\n\r\n    OracleCreator public oracleCreator;\r\n    uint256 public orderCount;\r\n    mapping(uint256 => Order) public orders;\r\n    mapping(address => bool) public exchangeFactoryWhitelist;\r\n\r\n    constructor(\r\n        address payable _owner,\r\n        address _batchExchange,\r\n        address _epochTokenLocker,\r\n        address[] memory _factoryWhitelist,\r\n        address _WETH,\r\n        OracleCreator _oracleCreater\r\n    ) public {\r\n        require(_factoryWhitelist.length > 0, 'GnosisProtocolRelayer: MISSING_FACTORY_WHITELIST');\r\n        batchExchange = _batchExchange;\r\n        epochTokenLocker = _epochTokenLocker;\r\n        oracleCreator = _oracleCreater;\r\n        owner = _owner;\r\n        WETH = _WETH;\r\n        BATCH_TIME = IEpochTokenLocker(_epochTokenLocker).BATCH_TIME();\r\n\r\n        for (uint i=0; i < _factoryWhitelist.length; i++) {\r\n            exchangeFactoryWhitelist[_factoryWhitelist[i]] = true;\r\n        }\r\n    }\r\n\r\n    function orderTrade(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint128 tokenInAmount,\r\n        uint128 minTokenOutAmount,\r\n        uint256 priceTolerance,\r\n        uint256 minReserve,\r\n        uint256 startDate,\r\n        uint256 deadline,\r\n        address factory\r\n    ) external payable returns (uint256 orderIndex) {\r\n        require(exchangeFactoryWhitelist[factory], 'GnosisProtocolRelayer: INVALID_FACTORY');\r\n        require(msg.sender == owner, 'GnosisProtocolRelayer: CALLER_NOT_OWNER');\r\n        require(tokenIn != tokenOut, 'GnosisProtocolRelayer: INVALID_PAIR');\r\n        require(tokenInAmount > 0 && minTokenOutAmount > 0, 'GnosisProtocolRelayer: INVALID_TOKEN_AMOUNT');\r\n        require(priceTolerance <= PARTS_PER_MILLION, 'GnosisProtocolRelayer: INVALID_TOLERANCE');\r\n        require(deadline <= UINT32_MAX_VALUE, 'GnosisProtocolRelayer: INVALID_DEADLINE');\r\n        require(block.timestamp <= deadline, 'GnosisProtocolRelayer: DEADLINE_REACHED');\r\n        if (tokenIn == address(0)) {\r\n            require(address(this).balance >= tokenInAmount, 'GnosisProtocolRelayer: INSUFFICIENT_ETH');\r\n            tokenIn = WETH;\r\n            IWETH(WETH).deposit{value: tokenInAmount}();\r\n        } else if (tokenOut == address(0)) {\r\n            tokenOut = WETH;\r\n        }\r\n        require(IERC20(tokenIn).balanceOf(address(this)) >= tokenInAmount, 'GnosisProtocolRelayer: INSUFFIENT_TOKEN_IN');\r\n\r\n        address pair = _pair(tokenIn, tokenOut, factory);\r\n        require(pair != address(0), 'GnosisProtocolRelayer: UNKOWN_PAIR');\r\n        orderIndex = _OrderIndex();\r\n        orders[orderIndex] = Order({\r\n            tokenIn: tokenIn,\r\n            tokenOut: tokenOut,\r\n            tokenInAmount: tokenInAmount,\r\n            minTokenOutAmount: minTokenOutAmount,\r\n            priceTolerance: priceTolerance,\r\n            minReserve: minReserve,\r\n            oraclePair: pair,\r\n            startDate: startDate,\r\n            deadline: deadline,\r\n            oracleId: 0,\r\n            gpOrderId: 0,\r\n            factory: factory,\r\n            executed: false\r\n        });\r\n\r\n        /* Create an oracle to calculate average price */\r\n        orders[orderIndex].oracleId = oracleCreator.createOracle(ORACLE_WINDOW_TIME, pair);\r\n        emit NewOrder(orderIndex);\r\n    }\r\n\r\n    function placeTrade(uint256 orderIndex) external {\r\n        Order storage order = orders[orderIndex];\r\n        require(orderIndex < orderCount, 'GnosisProtocolRelayer: INVALID_ORDER');\r\n        require(!order.executed, 'GnosisProtocolRelayer: ORDER_EXECUTED');\r\n        require(oracleCreator.isOracleFinalized(order.oracleId) , 'GnosisProtocolRelayer: OBSERVATION_RUNNING');\r\n        require(block.timestamp <= order.deadline, 'GnosisProtocolRelayer: DEADLINE_REACHED');\r\n        require(block.timestamp > order.startDate , 'GnosisProtocolRelayer: FUTURE_STARTDATE');\r\n\r\n        order.executed = true;\r\n        /* Approve token on Gnosis Protocol */\r\n        TransferHelper.safeApprove(order.tokenIn, epochTokenLocker, order.tokenInAmount);\r\n\r\n        /* Deposit token in Gnosis Protocol */\r\n        IEpochTokenLocker(epochTokenLocker).deposit(order.tokenIn, order.tokenInAmount);\r\n\r\n        /* Lookup TokenIds in Gnosis Protocol */\r\n        uint16 sellToken = IBatchExchange(batchExchange).tokenAddressToIdMap(order.tokenIn);\r\n        uint16 buyToken = IBatchExchange(batchExchange).tokenAddressToIdMap(order.tokenOut);\r\n        \r\n        uint256 expectedAmount = oracleCreator.consult(\r\n          order.oracleId,\r\n          order.tokenIn == address(0) ? WETH : order.tokenIn,\r\n          order.tokenInAmount \r\n        );\r\n\r\n        uint256 expectedAmountMin = expectedAmount.sub(expectedAmount.mul(order.priceTolerance) / PARTS_PER_MILLION);\r\n        \r\n        require(expectedAmountMin >= order.minTokenOutAmount, 'GnosisProtocolRelayer: INVALID_PRICE_RANGE');\r\n        require(expectedAmountMin <= UINT128_MAX_VALUE,'GnosisProtocolRelayer: AMOUNT_OUT_OF_RANGE');\r\n       \r\n        /* Calculate batch Deadline (5 Minutes window) */\r\n        uint32 validUntil = uint32(order.deadline/BATCH_TIME);\r\n        uint256 gpOrderId = IBatchExchange(batchExchange).placeOrder(buyToken, sellToken, validUntil, uint128(expectedAmountMin), order.tokenInAmount);\r\n        order.gpOrderId = gpOrderId;\r\n        emit PlacedTrade(orderIndex, gpOrderId, buyToken, sellToken, validUntil, uint128(expectedAmountMin), order.tokenInAmount);\r\n    }\r\n\r\n    function placeExactTrade(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint128 tokenInAmount,\r\n        uint128 tokenOutAmount,\r\n        uint256 startDate,\r\n        uint256 deadline\r\n    ) external {\r\n        require(startDate < deadline, 'GnosisProtocolRelayer: INVALID_STARTDATE');\r\n        require(block.timestamp <= deadline, 'GnosisProtocolRelayer: DEADLINE_REACHED');\r\n        require(deadline <= UINT32_MAX_VALUE, 'GnosisProtocolRelayer: INVALID_DEADLINE');\r\n        require(msg.sender == owner, 'GnosisProtocolRelayer: CALLER_NOT_OWNER');\r\n        require(tokenIn != tokenOut, 'GnosisProtocolRelayer: INVALID_PAIR');\r\n        require(tokenInAmount > 0 && tokenOutAmount > 0, 'GnosisProtocolRelayer: INVALID_TOKEN_AMOUNT');\r\n        \r\n\r\n        if (tokenIn == address(0)) {\r\n            require(address(this).balance >= tokenInAmount, 'GnosisProtocolRelayer: INSUFFICIENT_ETH');\r\n            tokenIn = WETH;\r\n            IWETH(WETH).deposit{value: tokenInAmount}();\r\n        } else if (tokenOut == address(0)) {\r\n            tokenOut = WETH;\r\n        }\r\n\r\n        require(IERC20(tokenIn).balanceOf(address(this)) >= tokenInAmount, 'GnosisProtocolRelayer: INSUFFIENT_TOKEN_IN');\r\n\r\n        /* Extend startDate if needed, to make sure the order will be placed on GP */\r\n        if(startDate <= block.timestamp){\r\n          startDate = block.timestamp.add(ORACLE_WINDOW_TIME) < deadline ? block.timestamp.add(ORACLE_WINDOW_TIME) : startDate;\r\n        }\r\n\r\n        /* Approve token on Gnosis Protocol */\r\n        TransferHelper.safeApprove(tokenIn, epochTokenLocker, tokenInAmount);\r\n\r\n        /* Deposit token in Gnosis Protocol */\r\n        IEpochTokenLocker(epochTokenLocker).deposit(tokenIn, tokenInAmount);\r\n\r\n        uint16[] memory sellTokens = new uint16[](1);\r\n        uint16[] memory buyTokens = new uint16[](1);\r\n        uint32[] memory validFroms = new uint32[](1);\r\n        uint32[] memory validUntils = new uint32[](1);\r\n        uint128[] memory buyAmounts = new uint128[](1);\r\n        uint128[] memory sellAmounts = new uint128[](1);\r\n        \r\n         /* Lookup TokenIds in Gnosis Protocol */\r\n        sellTokens[0] = IBatchExchange(batchExchange).tokenAddressToIdMap(tokenIn);\r\n        buyTokens[0] = IBatchExchange(batchExchange).tokenAddressToIdMap(tokenOut);\r\n        validFroms[0] = uint32(startDate/BATCH_TIME);\r\n        validUntils[0] = uint32(deadline/BATCH_TIME);\r\n        buyAmounts[0] = tokenOutAmount;\r\n        sellAmounts[0] = tokenInAmount;\r\n\r\n        uint16[] memory gpOrderId = IBatchExchange(batchExchange).placeValidFromOrders(buyTokens, sellTokens, validFroms, validUntils, buyAmounts, sellAmounts);\r\n        emit PlacedExactTrade(gpOrderId[0], buyTokens[0], sellTokens[0], validFroms[0], validUntils[0], buyAmounts[0], sellAmounts[0]);\r\n    }\r\n\r\n    function cancelOrder(uint16 gpOrderId) external {\r\n        require(msg.sender == owner, 'GnosisProtocolRelayer: CALLER_NOT_OWNER');\r\n\r\n        uint16[] memory orderArray = new uint16[](1);\r\n        orderArray[0] = uint16(gpOrderId);\r\n        IBatchExchange(batchExchange).cancelOrders(orderArray);\r\n    }\r\n\r\n    // Updates a price oracle and sends a bounty to msg.sender\r\n    function updateOracle(uint256 orderIndex) external {\r\n        Order storage order = orders[orderIndex];\r\n        require(orderIndex < orderCount, 'GnosisProtocolRelayer: INVALID_ORDER');\r\n        require(block.timestamp <= order.deadline, 'GnosisProtocolRelayer: DEADLINE_REACHED');\r\n        require(!oracleCreator.isOracleFinalized(order.oracleId) , 'GnosisProtocolRelayer: OBSERVATION_ENDED');\r\n        require(block.timestamp > order.startDate, 'GnosisProtocolRelayer: FUTURE_STARTDATE');\r\n        uint256 amountBounty = GAS_ORACLE_UPDATE.mul(tx.gasprice).add(BOUNTY);\r\n        (uint reserve0, uint reserve1,) = IDXswapPair(order.oraclePair).getReserves();\r\n        address token0 = IDXswapPair(order.oraclePair).token0();\r\n        address tokenIn = order.tokenIn == address(0) ? WETH : order.tokenIn;\r\n\r\n        // Makes sure the reserve of TokenIn is higher then minReserve\r\n        if(tokenIn == token0){\r\n            require(\r\n              reserve0 >= order.minReserve,\r\n              'GnosisProtocolRelayer: RESERVE_TO_LOW'\r\n            );\r\n        } else {\r\n            require(\r\n              reserve1 >= order.minReserve,\r\n              'GnosisProtocolRelayer: RESERVE_TO_LOW'\r\n            );\r\n        }\r\n        \r\n        oracleCreator.update(order.oracleId);\r\n        if(address(this).balance >= amountBounty){\r\n            TransferHelper.safeTransferETH(msg.sender, amountBounty);\r\n        }\r\n    }\r\n\r\n    function withdrawExpiredOrder(uint256 orderIndex) external {\r\n        Order storage order = orders[orderIndex];\r\n        require(orderIndex < orderCount, 'GnosisProtocolRelayer: INVALID_ORDER');\r\n        require(block.timestamp > order.deadline, 'GnosisProtocolRelayer: DEADLINE_NOT_REACHED');\r\n        require(!order.executed, 'GnosisProtocolRelayer: ORDER_EXECUTED');\r\n\r\n        if (order.tokenIn == WETH) {\r\n            IWETH(WETH).withdraw(order.tokenInAmount);\r\n            TransferHelper.safeTransferETH(owner, order.tokenInAmount);\r\n        } else {\r\n            TransferHelper.safeTransfer(order.tokenIn, owner, order.tokenInAmount);\r\n        }\r\n\r\n        order.executed = true;\r\n        emit WithdrawnExpiredOrder(orderIndex);\r\n    }\r\n\r\n    // Requests a token withdraw on GP\r\n    function requestWithdraw(address token, uint256 amount) public{\r\n      require(msg.sender == owner, 'GnosisProtocolRelayer: CALLER_NOT_OWNER');\r\n      IEpochTokenLocker(epochTokenLocker).requestWithdraw(token,amount);\r\n    }\r\n\r\n    // Releases tokens from Gnosis Protocol\r\n    function withdrawToken(address token) public {\r\n      require(msg.sender == owner, 'GnosisProtocolRelayer: CALLER_NOT_OWNER');\r\n      IEpochTokenLocker(epochTokenLocker).withdraw(address(this), token);\r\n      if (token == WETH) {\r\n          uint balance = IWETH(WETH).balanceOf(address(this));\r\n          IWETH(WETH).withdraw(balance);\r\n          ETHWithdraw(balance);\r\n      } else {\r\n          uint balance = IERC20(token).balanceOf(address(this));\r\n          ERC20Withdraw(token, balance);\r\n      }\r\n    }\r\n\r\n    // Internal function to return the pair address on a given factory\r\n    function _pair(address tokenA, address tokenB, address factory) internal view returns (address pair) {\r\n      require(exchangeFactoryWhitelist[factory], 'GnosisProtocolRelayer: INVALID_FACTORY');\r\n      pair = IDXswapFactory(factory).getPair(tokenA, tokenB);\r\n    }\r\n\r\n    // Returns an OrderIndex that is used to reference liquidity orders\r\n    function _OrderIndex() internal returns(uint256 orderIndex){\r\n        orderIndex = orderCount;\r\n        orderCount++;\r\n    }\r\n\r\n    function changeOwner(address payable _newOwner) public{\r\n      require(msg.sender == owner, 'GnosisProtocolRelayer: CALLER_NOT_OWNER');\r\n      owner = _newOwner;\r\n    }\r\n    \r\n    // Allows the owner to withdraw any ERC20 from the relayer\r\n    function ERC20Withdraw(address token, uint256 amount) public {\r\n        require(msg.sender == owner, 'GnosisProtocolRelayer: CALLER_NOT_OWNER');\r\n        TransferHelper.safeTransfer(token, owner, amount);\r\n    }\r\n\r\n    // Allows the owner to withdraw any ETH amount from the relayer\r\n    function ETHWithdraw(uint256 amount) public {\r\n        require(msg.sender == owner, 'GnosisProtocolRelayer: CALLER_NOT_OWNER');\r\n        TransferHelper.safeTransferETH(owner, amount);\r\n    }\r\n\r\n    // Returns the data of one specific order\r\n    function GetOrderDetails(uint256 orderIndex) external view returns (Order memory) {\r\n      return orders[orderIndex];\r\n    }\r\n\r\n    receive() external payable {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_batchExchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_epochTokenLocker\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_factoryWhitelist\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"contract OracleCreator\",\"name\":\"_oracleCreater\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"NewOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_gpOrderID\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"buyToken\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"sellToken\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"validFrom\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"validUntil\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"tokenOutAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"tokenInAmount\",\"type\":\"uint128\"}],\"name\":\"PlacedExactTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_gpOrderID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"buyToken\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"sellToken\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"validUntil\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"expectedAmountMin\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"tokenInAmount\",\"type\":\"uint128\"}],\"name\":\"PlacedTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"WithdrawnExpiredOrder\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BATCH_TIME\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOUNTY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAS_ORACLE_UPDATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"}],\"name\":\"GetOrderDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"tokenInAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"minTokenOutAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"priceTolerance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReserve\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oraclePair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oracleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gpOrderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct GnosisProtocolRelayer.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE_WINDOW_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PARTS_PER_MILLION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UINT128_MAX_VALUE\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UINT32_MAX_VALUE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batchExchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"gpOrderId\",\"type\":\"uint16\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochTokenLocker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exchangeFactoryWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleCreator\",\"outputs\":[{\"internalType\":\"contract OracleCreator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"tokenInAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"minTokenOutAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"priceTolerance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"orderTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"tokenInAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"minTokenOutAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"priceTolerance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReserve\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oraclePair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oracleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gpOrderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"tokenInAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokenOutAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"placeExactTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"}],\"name\":\"placeTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"}],\"name\":\"updateOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawExpiredOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"GnosisProtocolRelayer","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a601aed34dda12ff760d8abb64fd4eb3664e35af0000000000000000000000006f400810b62df8e13fded51be75ff5393eaa841f0000000000000000000000006f400810b62df8e13fded51be75ff5393eaa841f00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000c6b655f3d2732969516f47dd90a5155cd697df1f0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000d34971bab6e5e356fd250715f5de0492bb0704520000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f000000000000000000000000c0aee478e3658e2610c5f7a4a2e1777ce9e4f2ac","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7d02495289cbd83f4b8b318e8c11459ffd87e780cd93632e3564ab35c512edd8"}]}