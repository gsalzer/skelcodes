{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/oracle/chainlink/ChainlinkOracleUSD.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"../../lib/AddressSet.sol\\\";\\nimport \\\"../../oracle/OracleCommon.sol\\\";\\nimport \\\"../../interface/IERC20Extended.sol\\\";\\nimport \\\"../../_chainlink/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"../../_openzeppelin/math/SafeMath.sol\\\";\\n\\n/**\\n @notice Generic ChainLink Oracle for USD\\n */\\n\\ncontract ChainlinkOracleUSD is OracleCommon {\\n\\n    using SafeMath for uint256;\\n    using AddressSet for AddressSet.Set;\\n\\n    // only accepting USD Chainlink oracles, which all use 8 decimals\\n    uint256 private constant SHIFT_DECIMALS = 10 ** 10;\\n\\n    // token address => chainlink oracle address\\n    mapping(address => address) public chainlinkOracles; \\n    // interable key set with delete\\n    AddressSet.Set chainlinkOraclesSet;\\n    \\n    event RegisterChainlinkOracle(address sender, address token, address oracle);\\n    event UpdateChainlinkOracle(address sender, address token, address oracle);\\n    event UnregisterChainlinkOracle(address sender, address token);\\n    \\n    /** \\n     @param oneTokenFactory_ oneToken factory to bind to\\n     @param description_ description has no bearing on logic\\n     @param indexToken_ token to use for price quotes\\n     */\\n    constructor(address oneTokenFactory_, string memory description_, address indexToken_)\\n        OracleCommon(oneTokenFactory_, description_, indexToken_) {\\n    }\\n\\n    /**\\n     @notice update is called when a oneToken wants to persist observations\\n     @dev there is nothing to do in this case\\n     */\\n    function update(address /* token */) external override {}\\n\\n    /**\\n     @notice returns equivalent amount of index tokens for an amount of baseTokens and volatility metric\\n     @param token address of the token\\n     @param amountTokens quantity, token native precision\\n     @param amountUsd US dollar equivalent, precision 18\\n     @param volatility metric for future use-cases\\n     */\\n    function read(address token, uint256 amountTokens) external view override returns(uint256 amountUsd, uint256 volatility) {\\n        uint256 normalizedAmountUsd = tokensToNormalized(token, amountTokens);\\n        amountUsd = (normalizedAmountUsd.mul(getThePrice(token))).div(PRECISION);\\n        volatility = 1;\\n    }\\n\\n    /**\\n     @notice returns the tokens needed to reach a target usd value\\n     @param token address of the token\\n     @param amountUsd Usd required, precision 18\\n     @param amountTokens tokens required, token native precision\\n     @param volatility metric for future use-cases\\n     */\\n    function amountRequired(address token, uint256 amountUsd) external view override returns(uint256 amountTokens, uint256 volatility) {\\n        uint256 normalizedAmountTokens = amountUsd.mul(PRECISION).div(getThePrice(token));\\n        amountTokens = normalizedToTokens(token, normalizedAmountTokens);\\n        volatility = 1;\\n    }\\n\\n    /**\\n     * @notice returns the latest price for the token\\n     * @param token address of the token\\n     */\\n    function getThePrice(address token) public view returns (uint256 price) {\\n        require(chainlinkOraclesSet.exists(token), \\\"ChainlinkOracle: unknown token\\\");\\n        (\\n            , \\n            int256 price_,\\n            ,\\n            ,\\n            \\n        ) = AggregatorV3Interface(chainlinkOracles[token]).latestRoundData();\\n        require(price_ > 0); // price oracle responded 0, or negative. No event emitted because this is a view function.\\n        price = uint256(price_);\\n        price = price.mul(SHIFT_DECIMALS);  //price is natively in 8 decimals make it 18\\n    }\\n\\n    /*********************************\\n     * Discoverable Internal Structure\\n     *********************************/\\n\\n    /**\\n     * @notice count registered Chainlink oracles\\n     * @param count number of registered Chainlink oracles\\n     */\\n    function oraclesCount() external view returns(uint256 count) {\\n        count = chainlinkOraclesSet.count();\\n    }\\n\\n    /**\\n     * @notice enumerate the registered Chainlink oracles\\n     * @param index row number to inspect\\n     * @param oracle address of the Chainlink oracle\\n     */\\n    function oracleAtIndex(uint256 index) external view returns(address oracle) {\\n        require(chainlinkOraclesSet.count() > index, \\\"ChainlinkOracle: index number is too high\\\");\\n        oracle = chainlinkOracles[chainlinkOraclesSet.keyAtIndex(index)];\\n    }\\n\\n    /**\\n     * @notice enumerate the registered tokens\\n     * @param index row number to inspect\\n     * @param token address of the registered token\\n     */\\n    function tokenAtIndex(uint256 index) external view returns(address token) {\\n        require(chainlinkOraclesSet.count() > index, \\\"ChainlinkOracle: index number is too high\\\");\\n        token = chainlinkOraclesSet.keyAtIndex(index);\\n    }\\n\\n    /*********************************\\n     * CRUD\\n     *********************************/\\n\\n    /**\\n     * @notice register a new Chainlink oracle\\n     * @param token address of the token to register the oracle for\\n     * @param oracle address of the Chainlink oracle to register\\n     */\\n    function registerOracle(address token, address oracle) external onlyOwner {\\n        require(AggregatorV3Interface(oracle).decimals() == 8, \\\"ChainlinkOracle: the oracle must return USD values\\\");\\n        chainlinkOraclesSet.insert(token, \\\"ChainlinkOracle: oracle is already registered\\\");\\n        chainlinkOracles[token] = oracle;\\n        emit RegisterChainlinkOracle(msg.sender, token, oracle);\\n    }\\n\\n    /**\\n     * @notice unregister a Chainlink oracle\\n     * @param token address of the token to unregister the oracle for\\n     */\\n    function unregisterOracle(address token) external onlyOwner {\\n        chainlinkOraclesSet.remove(token, \\\"ChainlinkOracle: unknown token\\\");\\n        delete chainlinkOracles[token];\\n        emit UnregisterChainlinkOracle(msg.sender, token);\\n    }\\n\\n    /**\\n     * @notice replace oracle for the given token\\n     * @param token address of the token to have the oracle replaced\\n     * @param oracle address of the new Chainlink oracle to be used for the token\\n     */\\n    function updateOracle(address token, address oracle) external onlyOwner {\\n        require(chainlinkOraclesSet.exists(token), \\\"ChainlinkOracle: unknown token\\\");\\n        require(AggregatorV3Interface(oracle).decimals() == 8, \\\"ChainlinkOracle: the oracle must return USD values\\\");\\n        chainlinkOracles[token] = oracle;\\n        emit UpdateChainlinkOracle(msg.sender, token, oracle);\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/lib/AddressSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @notice Key sets with enumeration and delete. Uses mappings for random access\\n * and existence checks and dynamic arrays for enumeration. Key uniqueness is enforced. \\n * @dev Sets are unordered. Delete operations reorder keys. All operations have a \\n * fixed gas cost at any scale, O(1). \\n */\\n\\nlibrary AddressSet {\\n    \\n    struct Set {\\n        mapping(address => uint256) keyPointers;\\n        address[] keyList;\\n    }\\n\\n    /**\\n     @notice insert a key. \\n     @dev duplicate keys are not permitted.\\n     @param self storage pointer to a Set. \\n     @param key value to insert.\\n     */    \\n    function insert(Set storage self, address key, string memory errorMessage) internal {\\n        require(!exists(self, key), errorMessage);\\n        self.keyList.push(key);\\n        self.keyPointers[key] = self.keyList.length-1;\\n    }\\n\\n    /**\\n     @notice remove a key.\\n     @dev key to remove must exist. \\n     @param self storage pointer to a Set.\\n     @param key value to remove.\\n     */    \\n    function remove(Set storage self, address key, string memory errorMessage) internal {\\n        require(exists(self, key), errorMessage);\\n        uint256 last = count(self) - 1;\\n        uint256 rowToReplace = self.keyPointers[key];\\n        address keyToMove = self.keyList[last];\\n        self.keyPointers[keyToMove] = rowToReplace;\\n        self.keyList[rowToReplace] = keyToMove;\\n        delete self.keyPointers[key];\\n        self.keyList.pop();\\n    }\\n\\n    /**\\n     @notice count the keys.\\n     @param self storage pointer to a Set. \\n     */       \\n    function count(Set storage self) internal view returns(uint256) {\\n        return(self.keyList.length);\\n    }\\n\\n    /**\\n     @notice check if a key is in the Set.\\n     @param self storage pointer to a Set.\\n     @param key value to check. Version\\n     @return bool true: Set member, false: not a Set member.\\n     */  \\n    function exists(Set storage self, address key) internal view returns(bool) {\\n        if(self.keyList.length == 0) return false;\\n        return self.keyList[self.keyPointers[key]] == key;\\n    }\\n\\n    /**\\n     @notice fetch a key by row (enumerate).\\n     @param self storage pointer to a Set.\\n     @param index row to enumerate. Must be < count() - 1.\\n     */      \\n    function keyAtIndex(Set storage self, uint256 index) internal view returns(address) {\\n        return self.keyList[index];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/OracleCommon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"../interface/IOracle.sol\\\";\\nimport \\\"../common/ICHIModuleCommon.sol\\\";\\n\\nabstract contract OracleCommon is IOracle, ICHIModuleCommon {\\n\\n    uint256 constant NORMAL = 18;\\n    bytes32 constant public override MODULE_TYPE = keccak256(abi.encodePacked(\\\"ICHI V1 Oracle Implementation\\\"));\\n    address public override indexToken;\\n\\n    event OracleDeployed(address sender, string description, address indexToken);\\n    event OracleInitialized(address sender, address baseToken, address indexToken);\\n    \\n    /**\\n     @notice records the oracle description and the index that will be used for all quotes\\n     @dev oneToken implementations can share oracles\\n     @param oneTokenFactory_ oneTokenFactory to bind to\\n     @param description_ all modules have a description. No processing or validation\\n     @param indexToken_ every oracle has an index token for reporting the value of a base token\\n     */\\n    constructor(address oneTokenFactory_, string memory description_, address indexToken_) \\n        ICHIModuleCommon(oneTokenFactory_, ModuleType.Oracle, description_) \\n    { \\n        require(indexToken_ != NULL_ADDRESS, \\\"OracleCommon: indexToken cannot be empty\\\");\\n        indexToken = indexToken_;\\n        emit OracleDeployed(msg.sender, description_, indexToken_);\\n    }\\n\\n    /**\\n     @notice oneTokens can share Oracles. Oracles must be re-initializable. They are initialized from the Factory.\\n     @param baseToken oracles _can be_ multi-tenant with separately initialized baseTokens\\n     */\\n    function init(address baseToken) external onlyModuleOrFactory virtual override {\\n        emit OracleInitialized(msg.sender, baseToken, indexToken);\\n    }\\n\\n    /**\\n     @notice converts normalized precision 18 amounts to token native precision amounts, truncates low-order values\\n     @param token ERC20 token contract\\n     @param amountNormal quantity in precision-18\\n     @param amountTokens quantity scaled to token decimals()\\n     */    \\n    function normalizedToTokens(address token, uint256 amountNormal) public view override returns(uint256 amountTokens) {\\n        IERC20Extended t = IERC20Extended(token);\\n        uint256 nativeDecimals = t.decimals();\\n        require(nativeDecimals <= 18, \\\"OracleCommon: unsupported token precision (greater than 18)\\\");\\n        if(nativeDecimals == NORMAL) return amountNormal;\\n        return amountNormal / ( 10 ** (NORMAL - nativeDecimals));\\n    }\\n\\n    /**\\n     @notice converts token native precision amounts to normalized precision 18 amounts\\n     @param token ERC20 token contract\\n     @param amountTokens quantity scaled to token decimals\\n     @param amountNormal quantity in precision-18\\n     */  \\n    function tokensToNormalized(address token, uint256 amountTokens) public view override returns(uint256 amountNormal) {\\n        IERC20Extended t = IERC20Extended(token);\\n        uint256 nativeDecimals = t.decimals();\\n        require(nativeDecimals <= 18, \\\"OracleCommon: unsupported token precision (greater than 18)\\\");\\n        if(nativeDecimals == NORMAL) return amountTokens;\\n        return amountTokens * ( 10 ** (NORMAL - nativeDecimals));\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IERC20Extended.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"../_openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Extended is IERC20 {\\n    \\n    function decimals() external view returns(uint8);\\n    function symbol() external view returns(string memory);\\n    function name() external view returns(string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/_chainlink/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\"\r\n    },\r\n    \"contracts/_openzeppelin/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./IModule.sol\\\";\\n\\ninterface IOracle is IModule {\\n\\n    function init(address baseToken) external;\\n    function update(address token) external;\\n    function indexToken() external view returns(address);\\n\\n    /**\\n     @param token ERC20 token\\n     @param amountTokens quantity, token native precision\\n     @param amountUsd US dollar equivalent, precision 18\\n     @param volatility metric for future use-cases\\n     */\\n    function read(address token, uint amountTokens) external view returns(uint amountUsd, uint volatility);\\n\\n    /**\\n     @param token ERC20 token\\n     @param amountTokens token quantity, token native precision\\n     @param amountUsd US dollar equivalent, precision 18\\n     @param volatility metric for future use-cases\\n     */    \\n    function amountRequired(address token, uint amountUsd) external view returns(uint amountTokens, uint volatility);\\n\\n    /**\\n     @notice converts normalized precision-18 amounts to token native precision amounts, truncates low-order values\\n     @param token ERC20 token contract\\n     @param amountNormal quantity, precision 18\\n     @param amountTokens quantity scaled to token precision\\n     */    \\n    function normalizedToTokens(address token, uint amountNormal) external view returns(uint amountTokens);\\n\\n    /**\\n     @notice converts token native precision amounts to normalized precision-18 amounts\\n     @param token ERC20 token contract\\n     @param amountNormal quantity, precision 18\\n     @param amountTokens quantity scaled to token precision\\n     */  \\n    function tokensToNormalized(address token, uint amountTokens) external view returns(uint amountNormal);\\n}\\n\"\r\n    },\r\n    \"contracts/common/ICHIModuleCommon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"../interface/IModule.sol\\\";\\nimport \\\"../interface/IOneTokenFactory.sol\\\";\\nimport \\\"../interface/IOneTokenV1Base.sol\\\";\\nimport \\\"./ICHICommon.sol\\\";\\n\\nabstract contract ICHIModuleCommon is IModule, ICHICommon {\\n    \\n    ModuleType public immutable override moduleType;\\n    string public override moduleDescription;\\n    address public immutable override oneTokenFactory;\\n\\n    event ModuleDeployed(address sender, ModuleType moduleType, string description);\\n    event DescriptionUpdated(address sender, string description);\\n   \\n    modifier onlyKnownToken {\\n        require(IOneTokenFactory(oneTokenFactory).isOneToken(msg.sender), \\\"ICHIModuleCommon: msg.sender is not a known oneToken\\\");\\n        _;\\n    }\\n    \\n    modifier onlyTokenOwner (address oneToken) {\\n        require(msg.sender == IOneTokenV1Base(oneToken).owner(), \\\"ICHIModuleCommon: msg.sender is not oneToken owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyModuleOrFactory {\\n        if(!IOneTokenFactory(oneTokenFactory).isModule(msg.sender)) {\\n            require(msg.sender == oneTokenFactory, \\\"ICHIModuleCommon: msg.sender is not module owner, token factory or registed module\\\");\\n        }\\n        _;\\n    }\\n    \\n    /**\\n     @notice modules are bound to the factory at deployment time\\n     @param oneTokenFactory_ factory to bind to\\n     @param moduleType_ type number helps prevent governance errors\\n     @param description_ human-readable, descriptive only\\n     */    \\n    constructor (address oneTokenFactory_, ModuleType moduleType_, string memory description_) {\\n        require(oneTokenFactory_ != NULL_ADDRESS, \\\"ICHIModuleCommon: oneTokenFactory cannot be empty\\\");\\n        require(bytes(description_).length > 0, \\\"ICHIModuleCommon: description cannot be empty\\\");\\n        oneTokenFactory = oneTokenFactory_;\\n        moduleType = moduleType_;\\n        moduleDescription = description_;\\n        emit ModuleDeployed(msg.sender, moduleType_, description_);\\n    }\\n\\n    /**\\n     @notice set a module description\\n     @param description new module desciption\\n     */\\n    function updateDescription(string memory description) external onlyOwner override {\\n        require(bytes(description).length > 0, \\\"ICHIModuleCommon: description cannot be empty\\\");\\n        moduleDescription = description;\\n        emit DescriptionUpdated(msg.sender, description);\\n    }  \\n}\\n\"\r\n    },\r\n    \"contracts/interface/IModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./IICHICommon.sol\\\";\\nimport \\\"./InterfaceCommon.sol\\\";\\n\\ninterface IModule is IICHICommon { \\n       \\n    function oneTokenFactory() external view returns(address);\\n    function updateDescription(string memory description) external;\\n    function moduleDescription() external view returns(string memory);\\n    function MODULE_TYPE() external view returns(bytes32);\\n    function moduleType() external view returns(ModuleType);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IICHICommon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./IICHIOwnable.sol\\\";\\nimport \\\"./InterfaceCommon.sol\\\";\\n\\ninterface IICHICommon is IICHIOwnable, InterfaceCommon {}\\n\"\r\n    },\r\n    \"contracts/interface/InterfaceCommon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface InterfaceCommon {\\n\\n    enum ModuleType { Version, Controller, Strategy, MintMaster, Oracle }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IICHIOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\ninterface IICHIOwnable {\\n    \\n    function renounceOwnership() external;\\n    function transferOwnership(address newOwner) external;\\n    function owner() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IOneTokenFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./InterfaceCommon.sol\\\";\\n\\ninterface IOneTokenFactory is InterfaceCommon {\\n\\n    function oneTokenProxyAdmins(address) external returns(address);\\n    function deployOneTokenProxy(\\n        string memory name,\\n        string memory symbol,\\n        address governance, \\n        address version,\\n        address controller,\\n        address mintMaster,              \\n        address memberToken, \\n        address collateral,\\n        address oneTokenOracle\\n    ) \\n        external \\n        returns(address newOneTokenProxy, address proxyAdmin);\\n\\n    function admitModule(address module, ModuleType moduleType, string memory name, string memory url) external;\\n    function updateModule(address module, string memory name, string memory url) external;\\n    function removeModule(address module) external;\\n\\n    function admitForeignToken(address foreignToken, bool collateral, address oracle) external;\\n    function updateForeignToken(address foreignToken, bool collateral) external;\\n    function removeForeignToken(address foreignToken) external;\\n\\n    function assignOracle(address foreignToken, address oracle) external;\\n    function removeOracle(address foreignToken, address oracle) external; \\n\\n    /**\\n     * View functions\\n     */\\n    \\n    function MODULE_TYPE() external view returns(bytes32);\\n\\n    function oneTokenCount() external view returns(uint256);\\n    function oneTokenAtIndex(uint256 index) external view returns(address);\\n    function isOneToken(address oneToken) external view returns(bool);\\n \\n    // modules\\n\\n    function moduleCount() external view returns(uint256);\\n    function moduleAtIndex(uint256 index) external view returns(address module);\\n    function isModule(address module) external view returns(bool);\\n    function isValidModuleType(address module, ModuleType moduleType) external view returns(bool);\\n\\n    // foreign tokens\\n\\n    function foreignTokenCount() external view returns(uint256);\\n    function foreignTokenAtIndex(uint256 index) external view returns(address);\\n    function foreignTokenInfo(address foreignToken) external view returns(bool collateral, uint256 oracleCount);\\n    function foreignTokenOracleCount(address foreignToken) external view returns(uint256);\\n    function foreignTokenOracleAtIndex(address foreignToken, uint256 index) external view returns(address);\\n    function isOracle(address foreignToken, address oracle) external view returns(bool);\\n    function isForeignToken(address foreignToken) external view returns(bool);\\n    function isCollateral(address foreignToken) external view returns(bool);\\n}\"\r\n    },\r\n    \"contracts/interface/IOneTokenV1Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./IICHICommon.sol\\\";\\nimport \\\"./IERC20Extended.sol\\\";\\n\\ninterface IOneTokenV1Base is IICHICommon, IERC20 {\\n    \\n    function init(string memory name_, string memory symbol_, address oneTokenOracle_, address controller_,  address mintMaster_, address memberToken_, address collateral_) external;\\n    function changeController(address controller_) external;\\n    function changeMintMaster(address mintMaster_, address oneTokenOracle) external;\\n    function addAsset(address token, address oracle) external;\\n    function removeAsset(address token) external;\\n    function setStrategy(address token, address strategy, uint256 allowance) external;\\n    function executeStrategy(address token) external;\\n    function removeStrategy(address token) external;\\n    function closeStrategy(address token) external;\\n    function increaseStrategyAllowance(address token, uint256 amount) external;\\n    function decreaseStrategyAllowance(address token, uint256 amount) external;\\n    function setFactory(address newFactory) external;\\n\\n    function MODULE_TYPE() external view returns(bytes32);\\n    function oneTokenFactory() external view returns(address);\\n    function controller() external view returns(address);\\n    function mintMaster() external view returns(address);\\n    function memberToken() external view returns(address);\\n    function assets(address) external view returns(address, address);\\n    function balances(address token) external view returns(uint256 inVault, uint256 inStrategy);\\n    function collateralTokenCount() external view returns(uint256);\\n    function collateralTokenAtIndex(uint256 index) external view returns(address);\\n    function isCollateral(address token) external view returns(bool);\\n    function otherTokenCount() external view  returns(uint256);\\n    function otherTokenAtIndex(uint256 index) external view returns(address); \\n    function isOtherToken(address token) external view returns(bool);\\n    function assetCount() external view returns(uint256);\\n    function assetAtIndex(uint256 index) external view returns(address); \\n    function isAsset(address token) external view returns(bool);\\n}\\n\"\r\n    },\r\n    \"contracts/common/ICHICommon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"../oz_modified/ICHIOwnable.sol\\\";\\nimport \\\"../oz_modified/ICHIInitializable.sol\\\";\\nimport \\\"../interface/IERC20Extended.sol\\\";\\nimport \\\"../interface/IICHICommon.sol\\\";\\n\\ncontract ICHICommon is IICHICommon, ICHIOwnable, ICHIInitializable {\\n\\n    uint256 constant PRECISION = 10 ** 18;\\n    uint256 constant INFINITE = uint256(0-1);\\n    address constant NULL_ADDRESS = address(0);\\n    \\n    // @dev internal fingerprints help prevent deployment-time governance errors\\n\\n    bytes32 constant COMPONENT_CONTROLLER = keccak256(abi.encodePacked(\\\"ICHI V1 Controller\\\"));\\n    bytes32 constant COMPONENT_VERSION = keccak256(abi.encodePacked(\\\"ICHI V1 OneToken Implementation\\\"));\\n    bytes32 constant COMPONENT_STRATEGY = keccak256(abi.encodePacked(\\\"ICHI V1 Strategy Implementation\\\"));\\n    bytes32 constant COMPONENT_MINTMASTER = keccak256(abi.encodePacked(\\\"ICHI V1 MintMaster Implementation\\\"));\\n    bytes32 constant COMPONENT_ORACLE = keccak256(abi.encodePacked(\\\"ICHI V1 Oracle Implementation\\\"));\\n    bytes32 constant COMPONENT_VOTERROLL = keccak256(abi.encodePacked(\\\"ICHI V1 VoterRoll Implementation\\\"));\\n    bytes32 constant COMPONENT_FACTORY = keccak256(abi.encodePacked(\\\"ICHI OneToken Factory\\\"));\\n}\\n\"\r\n    },\r\n    \"contracts/_openzeppelin/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/oz_modified/ICHIOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @dev Constructor visibility has been removed from the original.\\n * _transferOwnership() has been added to support proxied deployments.\\n * Abstract tag removed from contract block.\\n * Added interface inheritance and override modifiers.\\n * Changed contract identifier in require error messages.\\n */\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../_openzeppelin/utils/Context.sol\\\";\\nimport \\\"../interface/IICHIOwnable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract ICHIOwnable is IICHIOwnable, Context {\\n    \\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n     \\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"ICHIOwnable: caller is not the owner\\\");\\n        _;\\n    }    \\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     * Ineffective for proxied deployed. Use initOwnable.\\n     */\\n    constructor() {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     @dev initialize proxied deployment\\n     */\\n    function initOwnable() internal {\\n        require(owner() == address(0), \\\"ICHIOwnable: already initialized\\\");\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual override returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual override onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev be sure to call this in the initialization stage of proxied deployment or owner will not be set\\n     */\\n\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"ICHIOwnable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oz_modified/ICHIInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"../_openzeppelin/utils/Address.sol\\\";\\n\\ncontract ICHIInitializable {\\n\\n    bool private _initialized;\\n    bool private _initializing;\\n\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"ICHIInitializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    modifier initialized {\\n        require(_initialized, \\\"ICHIInitializable: contract is not initialized\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\\n\\n\"\r\n    },\r\n    \"contracts/_openzeppelin/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/_openzeppelin/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oneTokenFactory_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"indexToken_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"DescriptionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum InterfaceCommon.ModuleType\",\"name\":\"moduleType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ModuleDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"}],\"name\":\"OracleDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"}],\"name\":\"OracleInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"RegisterChainlinkOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"UnregisterChainlinkOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"UpdateChainlinkOracle\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MODULE_TYPE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountUsd\",\"type\":\"uint256\"}],\"name\":\"amountRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"volatility\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"chainlinkOracles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getThePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"indexToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleType\",\"outputs\":[{\"internalType\":\"enum InterfaceCommon.ModuleType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountNormal\",\"type\":\"uint256\"}],\"name\":\"normalizedToTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneTokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"oracleAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oraclesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"read\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"volatility\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"registerOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"tokensToNormalized\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountNormal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"unregisterOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"updateDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"updateOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ChainlinkOracleUSD","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d0092632b9ac5a7856664eec1abb6e3403a6a36a0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000014436861696e6c696e6b204f7261636c6520555344000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}