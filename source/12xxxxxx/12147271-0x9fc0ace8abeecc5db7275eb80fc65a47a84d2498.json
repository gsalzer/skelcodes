{"status":"1","message":"OK","result":[{"SourceCode":"{\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENCED\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\ncontract Ownable {\\n\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor(){\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0));\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n}\\n\\n\\n\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n\"},\"SCoinPrivateDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENCED\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\ninterface Token{\\n    function transferOwnership(address newOwner) external;\\n    function stop() external;\\n    function start() external;\\n    function close() external;\\n    function decimals() external view returns(uint256);\\n    function symbol() external view returns(string memory);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address who) external view returns (uint256);\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n    function approve(address spender, uint256 value) external returns (bool);\\n    function mint( address to, uint256 value ) external returns (bool);\\n    function increaseApproval(address _spender, uint _addedValue) external returns (bool);\\n    function decreaseApproval(address _spender, uint _subtractedValue) external returns (bool);\\n    function burn(uint256 _value) external;\\n    function burnTokens(address who,uint256 _value) external;\\n}\\ncontract SCoinPrivateDistribution  is Ownable{\\n    \\n    using SafeMath for uint256;\\n    \\n    uint256 coreContributionTeam = 2000; // 20%, multiplication factor 100\\n    uint256 legalComplianceTeams = 500; // 5%, multiplication factor 100\\n    uint256 marketingTeams = 1000; // 10%, multiplication factor 100\\n    \\n    uint256 public internalDistributionLeftCounter = 1; // a total of 1 times \\n    \\n    uint256 public totalTokenAmount;\\n    uint256 public decimalFactor;\\n    uint256 public teamCount=3;\\n    \\n    mapping(uint256=\\u003eaddress) public internalTokenReceiverAddresses;\\n    address[] tempArray;\\n    //0-\\u003ecoreContributionTeam\\n    //1=\\u003elegalComplianceTeams\\n    //2=\\u003emarketingTeams\\n    \\n    mapping(address=\\u003euint256) public bondTokensHolded;\\n    \\n    address public tokenContractAddress=0x1dfed394649BdCF973554Db52fE903f9e5e534a2;\\n    \\n    constructor(){\\n        decimalFactor=10**Token(tokenContractAddress).decimals();\\n        totalTokenAmount=600000000*decimalFactor;\\n    }\\n    \\n    function updateTokenContractAddress(address _tokenAddress) external onlyOwner{\\n        tokenContractAddress=_tokenAddress;\\n    }\\n    \\n    function saveInternalDistributions() public onlyOwner{\\n        require(internalDistributionLeftCounter!=0, \\\"All tokens distributed\\\");\\n        require((getTeamMember(0)!=address(0)) ,\\\"Please enter core team distribution address.\\\");\\n        require((getTeamMember(1)!=address(0)) ,\\\"Please enter legal and  compliance team distribution address.\\\");\\n        require((getTeamMember(2)!=address(0)) ,\\\"Please enter lmarketing team distribution address.\\\");\\n\\n\\n        //core get amount to be distributed\\n        uint256 amountTobeDistributedForCoreTeam = (coreContributionTeam\\n                                        .mul(totalTokenAmount))\\n                                        .div(10**4);\\n                                        \\n        //core team amount distribution\\n        distributeTokens(0,amountTobeDistributedForCoreTeam);\\n        \\n        //legalAndComplianceTeam get amount to be distributed\\n         uint256 amountTobeDistributedForLegalComplianceTeam = (legalComplianceTeams\\n                                                    .mul(totalTokenAmount))\\n                                                    .div(10**4);\\n        //leganAndCompliance amount distribution\\n        distributeTokens(1,amountTobeDistributedForLegalComplianceTeam);\\n        \\n        //marketingTeam get amount to be distributed\\n         uint256 amountTobeDistributedForMarketingTeam =( marketingTeams\\n                                                        .mul(totalTokenAmount))\\n                                                         .div(10**4);\\n        // marketingTeam amount distribution\\n        distributeTokens(2,amountTobeDistributedForMarketingTeam);\\n        \\n        internalDistributionLeftCounter = internalDistributionLeftCounter.sub(1);\\n        releaseTokenByAdmin();\\n    }\\n    \\n    function releaseTokenByAdmin() internal{\\n        releaseTokenToParticularTeam(getTeamMember(0));\\n        releaseTokenToParticularTeam(getTeamMember(1));\\n        releaseTokenToParticularTeam(getTeamMember(2));\\n    }\\n    \\n     function releaseTokenToParticularTeam(address teamAddress) internal{\\n        Token obj = Token(tokenContractAddress);\\n        require(bondTokensHolded[teamAddress]\\u003e0,\\\"No token given\\\");\\n        obj.transfer(teamAddress,bondTokensHolded[teamAddress]);\\n        bondTokensHolded[teamAddress] = 0;\\n    }\\n    \\n    \\n    function distributeTokens(uint256 index, uint256 amount) internal{\\n         address distributionAddress = internalTokenReceiverAddresses[index];\\n         bondTokensHolded[distributionAddress]=amount;\\n    }\\n\\n\\n    function addUpdateTeamMember(uint index,address memberAddress) public onlyOwner{\\n        require(index\\u003cteamCount,\\u0027Invalid index.\\u0027);\\n        require(memberAddress!=address(0),\\u0027Invalid address.\\u0027);\\n        internalTokenReceiverAddresses[index]=memberAddress;\\n    }\\n    \\n    function getTeamMember(uint index) public  view  returns(address){\\n        require(index\\u003cteamCount,\\u0027Invalid index.\\u0027);\\n        return internalTokenReceiverAddresses[index];\\n    }\\n    \\n    function removeTeamMember(uint index) public onlyOwner{\\n        require(index\\u003cteamCount,\\u0027Invalid index.\\u0027);\\n        delete internalTokenReceiverAddresses[index];\\n    }\\n    \\n    function getAllTeamMembers() public  returns(address[] memory){\\n        tempArray=new address[](0);\\n        for(uint i=0;i\\u003cteamCount;i++){\\n            tempArray.push(internalTokenReceiverAddresses[i]);\\n        }\\n        return tempArray;\\n    }\\n}\\n\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"memberAddress\",\"type\":\"address\"}],\"name\":\"addUpdateTeamMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bondTokensHolded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTeamMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTeamMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"internalDistributionLeftCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"internalTokenReceiverAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeTeamMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saveInternalDistributions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"updateTokenContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SCoinPrivateDistribution","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ae04a76dc1aabdb58d500c3d84c9d53477f3607dfdb810a50db3c749c09ecde8"}]}