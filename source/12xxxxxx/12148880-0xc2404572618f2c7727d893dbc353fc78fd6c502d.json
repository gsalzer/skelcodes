{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.2;\r\n\r\ncontract FreedomDividendSwap {\r\n\r\n  constructor()\r\n  public\r\n  {\r\n    uniswapRouter = IUniswapV2Router02(UniswapV2Router2);\r\n    owner = msg.sender;\r\n  }\r\n\r\n  string private version = \"v1\";\r\n\r\n  address private UniswapV2Router2=0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n  IUniswapV2Router02 private uniswapRouter;\r\n  \r\n  uint private swapFeeModifier = 500;\r\n  \r\n  address private owner;\r\n  \r\n  uint private swapReward = 277778;\r\n  \r\n  address private FDCContract=0x311C6769461e1d2173481F8d789AF00B39DF6d75;\r\n\r\n  function Swap(string memory swapFunction, uint amountIn, uint amountOutMin, address[] memory path, uint deadline) public payable returns (bool) {\r\n    \r\n    if (keccak256(abi.encodePacked((swapFunction))) == keccak256(abi.encodePacked((\"swapExactETHForTokens\")))) {\r\n        uint swapFee = msg.value / swapFeeModifier;\r\n        require(swapFee > 0, \"Swap Fee needs to be higher than 0\");\r\n        uint finalValue = msg.value - swapFee;\r\n        require(finalValue > 0, \"finalValue needs to be higher than 0\");\r\n        \r\n        uniswapRouter.swapExactETHForTokens{value:finalValue}(amountOutMin, path, msg.sender, deadline);\r\n        \r\n        giveReward();\r\n        \r\n        return true;\r\n    } else if (keccak256(abi.encodePacked((swapFunction))) == keccak256(abi.encodePacked((\"swapExactTokensForETH\")))) {\r\n        require(msg.value > 0, \"Swap Fee needs to be higher than 0\");\r\n        \r\n        TransferHelper.safeTransferFrom(\r\n            path[0], msg.sender, address(this), amountIn\r\n        );\r\n        \r\n        TransferHelper.safeApprove(\r\n            path[0], UniswapV2Router2, amountIn\r\n        );\r\n        \r\n        uniswapRouter.swapExactTokensForETH(amountIn, amountOutMin, path, msg.sender, deadline);\r\n        \r\n        giveReward();\r\n        \r\n        return true;\r\n    } else if (keccak256(abi.encodePacked((swapFunction))) == keccak256(abi.encodePacked((\"swapExactTokensForTokens\")))) {\r\n        require(msg.value > 0, \"Swap Fee needs to be higher than 0\");\r\n        \r\n        TransferHelper.safeTransferFrom(\r\n            path[0], msg.sender, address(this), amountIn\r\n        );\r\n        \r\n        TransferHelper.safeApprove(\r\n            path[0], UniswapV2Router2, amountIn\r\n        );\r\n        \r\n        uniswapRouter.swapExactTokensForTokens(amountIn, amountOutMin, path, msg.sender, deadline);\r\n        \r\n        giveReward();\r\n        \r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n  }\r\n  \r\n  function giveReward() internal {\r\n    (bool successBalance, bytes memory dataBalance) = FDCContract.call(abi.encodeWithSelector(bytes4(keccak256(bytes('balanceOf(address)'))), address(this)));\r\n    require(successBalance, \"Freedom Dividend Coin swap reward balanceOf failed.\");\r\n    uint rewardLeft = abi.decode(dataBalance, (uint));\r\n\r\n    if (rewardLeft >= swapReward) {\r\n        (bool successTransfer, bytes memory dataTransfer) = FDCContract.call(abi.encodeWithSelector(bytes4(keccak256(bytes('transfer(address,uint256)'))), msg.sender, swapReward));\r\n        require(successTransfer, \"Freedom Dividend Coin swap reward failed.\");\r\n    }\r\n  }\r\n\r\n  function getVersion() public view returns (string memory) {\r\n    return version;\r\n  }\r\n  \r\n  function withdraw(uint value) public returns (bool) {\r\n    require(msg.sender == owner, \"Only owner can use\");\r\n    TransferHelper.safeTransferETH(\r\n          owner, value\r\n    );\r\n    return true;\r\n  }\r\n  \r\n  function setReward(uint value) public returns (bool) {\r\n    require(msg.sender == owner, \"Only owner can use\");\r\n    swapReward = value;\r\n    return true;\r\n  }\r\n  \r\n  function getReward() public view returns (uint) {\r\n    return swapReward;\r\n  }\r\n\r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"swapFunction\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FreedomDividendSwap","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://86496097c03759c271e8e8010f6fa38b66d7075a735ada66f0829fec82e24a80"}]}