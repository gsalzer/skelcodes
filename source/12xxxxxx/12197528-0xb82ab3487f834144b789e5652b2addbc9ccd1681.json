{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.2 \\u003c0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address =\\u003e uint256) private _balances;\\n\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"},\"Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.3;\\n\\nimport \\\"./IATokenV1.sol\\\";\\nimport \\\"./ICToken.sol\\\";\\nimport \\\"./IComptroller.sol\\\";\\nimport \\\"./ILendingPoolV1.sol\\\";\\nimport \\\"./ISushiBar.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\n\\ninterface IBDPI {\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n    \\n    function totalSupply() external view returns (uint256);\\n\\n    function mint(uint256) external;\\n\\n    function getOne() external view returns (address[] memory, uint256[] memory);\\n\\n    function getAssetsAndBalances() external view returns (address[] memory, uint256[] memory);\\n}\\n\\ncontract Helpers {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Aave\\n    address constant LENDING_POOL_V1 = 0x398eC7346DcD622eDc5ae82352F02bE94C62d119;\\n    address constant LENDING_POOL_CORE_V1 = 0x3dfd23A6c5E8BbcFc9581d2E864a68feb6a076d3;\\n\\n    // Compound\\n    address constant COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\\n\\n    // Router address\\n    address constant SUSHISWAP_ROUTER = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\\n    address constant UNIV2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n\\n    // CTokens\\n    address constant CUNI = 0x35A18000230DA775CAc24873d00Ff85BccdeD550;\\n    address constant CCOMP = 0x70e36f6BF80a52b3B46b3aF8e106CC0ed743E8e4;\\n\\n    // SUSHI\\n    address constant XSUSHI = 0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272;\\n\\n    // WETH\\n    address constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    // DPI\\n    address constant DPI = 0x1494CA1F11D487c2bBe4543E90080AeBa4BA3C2b;\\n\\n    // Defi tokens\\n    address constant UNI = 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984;\\n    address constant COMP = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\\n    address constant YFI = 0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e;\\n    address constant SNX = 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F;\\n    address constant MKR = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2;\\n    address constant REN = 0x408e41876cCCDC0F92210600ef50372656052a38;\\n    address constant KNC = 0xdd974D5C2e2928deA5F71b9825b8b646686BD200;\\n    address constant LRC = 0xBBbbCA6A901c926F240b89EacB641d8Aec7AEafD;\\n    address constant BAL = 0xba100000625a3754423978a60c9317c58a424e3D;\\n    address constant AAVE = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\\n    address constant MTA = 0xa3BeD4E1c75D00fa6f4E5E6922DB7261B5E9AcD2;\\n    address constant SUSHI = 0x6B3595068778DD592e39A122f4f5a5cF09C90fE2;\\n\\n    // **** Public ****\\n\\n    /// @notice Enters Compound market. *Must be called before toCToken*\\n    /// @param  _markets  Compound markets to enter (underlying, not cTokens)\\n    function enterMarkets(address[] memory _markets) public {\\n        IComptroller(COMPTROLLER).enterMarkets(_markets);\\n    }\\n\\n    // **** Internal ****\\n\\n    /// @notice Converts underlying to derivative\\n    /// @param  _derivative  Address of the derivative token\\n    function _toDerivative(address _underlying, address _derivative) internal {\\n        if (_underlying == _derivative) {\\n            return;\\n        }\\n\\n        if (_derivative == CUNI || _derivative == CCOMP) {\\n            _toCToken(_underlying);\\n        } else if (_derivative == XSUSHI) {\\n            _toXSushi();\\n        } else {\\n            _toATokenV1(_underlying);\\n        }\\n    }\\n\\n    /// @notice Supplies assets to the Compound market\\n    /// @param  _token  Underlying token to supply to Compound\\n    function _toCToken(address _token) internal {\\n        // Only doing UNI or COMP for CTokens\\n        require(_token == UNI || _token == COMP, \\\"!valid-to-ctoken\\\");\\n\\n        address _ctoken = _getTokenToCToken(_token);\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n\\n        require(balance \\u003e 0, \\\"!token-bal\\\");\\n\\n        IERC20(_token).safeApprove(_ctoken, balance);\\n        require(ICToken(_ctoken).mint(balance) == 0, \\\"!ctoken-mint\\\");\\n    }\\n\\n    /// @notice Supplies assets to the Aave market\\n    /// @param  _token  Underlying to supply to Aave\\n    function _toATokenV1(address _token) internal {\\n        require(_token != UNI \\u0026\\u0026 _token != COMP, \\\"no-uni-or-comp\\\");\\n\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n\\n        require(balance \\u003e 0, \\\"!token-bal\\\");\\n\\n        IERC20(_token).safeApprove(LENDING_POOL_CORE_V1, balance);\\n        ILendingPoolV1(LENDING_POOL_V1).deposit(_token, balance, 0);\\n    }\\n\\n    /// @dev Token to CToken mapping\\n    /// @param  _token Token address\\n    function _getTokenToCToken(address _token) internal pure returns (address) {\\n        if (_token == UNI) {\\n            return CUNI;\\n        }\\n        if (_token == COMP) {\\n            return CCOMP;\\n        }\\n        revert(\\\"!supported-token-to-ctoken\\\");\\n    }\\n\\n    /// @notice Converts sushi to xsushi\\n    function _toXSushi() internal {\\n        uint256 balance = IERC20(SUSHI).balanceOf(address(this));\\n        require(balance \\u003e 0, \\\"!sushi-bal\\\");\\n\\n        IERC20(SUSHI).safeApprove(XSUSHI, balance);\\n        ISushiBar(XSUSHI).enter(balance);\\n    }\\n}\\n\"},\"IATokenV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.3;\\n\\ninterface IATokenV1 {\\n    function UINT_MAX_VALUE() external view returns (uint256);\\n\\n    function allowInterestRedirectionTo(address _to) external;\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function balanceOf(address _user) external view returns (uint256);\\n\\n    function burnOnLiquidation(address _account, uint256 _value) external;\\n\\n    function decimals() external view returns (uint8);\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n    function getInterestRedirectionAddress(address _user) external view returns (address);\\n\\n    function getRedirectedBalance(address _user) external view returns (uint256);\\n\\n    function getUserIndex(address _user) external view returns (uint256);\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n    function isTransferAllowed(address _user, uint256 _amount) external view returns (bool);\\n\\n    function mintOnDeposit(address _account, uint256 _amount) external;\\n\\n    function name() external view returns (string memory);\\n\\n    function principalBalanceOf(address _user) external view returns (uint256);\\n\\n    function redeem(uint256 _amount) external;\\n\\n    function redirectInterestStream(address _to) external;\\n\\n    function redirectInterestStreamOf(address _from, address _to) external;\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transferOnLiquidation(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external;\\n\\n    function underlyingAssetAddress() external view returns (address);\\n}\\n\"},\"IBasicIssuanceModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.3;\\n\\ninterface IBasicIssuanceModule {\\n    function controller() external view returns (address);\\n\\n    function getRequiredComponentUnitsForIssue(address _setToken, uint256 _quantity)\\n        external\\n        view\\n        returns (address[] memory, uint256[] memory);\\n\\n    function initialize(address _setToken, address _preIssueHook) external;\\n\\n    function issue(\\n        address _setToken,\\n        uint256 _quantity,\\n        address _to\\n    ) external;\\n\\n    function managerIssuanceHook(address) external view returns (address);\\n\\n    function redeem(\\n        address _setToken,\\n        uint256 _quantity,\\n        address _to\\n    ) external;\\n\\n    function removeModule() external;\\n}\\n\"},\"ICompoundLens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.3;\\n\\ninterface ICompoundLens {\\n    function getCompBalanceMetadataExt(\\n        address comp,\\n        address comptroller,\\n        address account\\n    )\\n        external\\n        returns (\\n            uint256 balance,\\n            uint256 votes,\\n            address delegate,\\n            uint256 allocated\\n        );\\n}\\n\"},\"IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.3;\\n\\ninterface IComptroller {\\n    function _addCompMarkets(address[] memory cTokens) external;\\n\\n    function _become(address unitroller) external;\\n\\n    function _borrowGuardianPaused() external view returns (bool);\\n\\n    function _dropCompMarket(address cToken) external;\\n\\n    function _grantComp(address recipient, uint256 amount) external;\\n\\n    function _mintGuardianPaused() external view returns (bool);\\n\\n    function _setBorrowCapGuardian(address newBorrowCapGuardian) external;\\n\\n    function _setBorrowPaused(address cToken, bool state) external returns (bool);\\n\\n    function _setCloseFactor(uint256 newCloseFactorMantissa) external returns (uint256);\\n\\n    function _setCollateralFactor(address cToken, uint256 newCollateralFactorMantissa) external returns (uint256);\\n\\n    function _setCompRate(uint256 compRate_) external;\\n\\n    function _setContributorCompSpeed(address contributor, uint256 compSpeed) external;\\n\\n    function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external returns (uint256);\\n\\n    function _setMarketBorrowCaps(address[] memory cTokens, uint256[] memory newBorrowCaps) external;\\n\\n    function _setMintPaused(address cToken, bool state) external returns (bool);\\n\\n    function _setPauseGuardian(address newPauseGuardian) external returns (uint256);\\n\\n    function _setPriceOracle(address newOracle) external returns (uint256);\\n\\n    function _setSeizePaused(bool state) external returns (bool);\\n\\n    function _setTransferPaused(bool state) external returns (bool);\\n\\n    function _supportMarket(address cToken) external returns (uint256);\\n\\n    function accountAssets(address, uint256) external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function allMarkets(uint256) external view returns (address);\\n\\n    function borrowAllowed(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external returns (uint256);\\n\\n    function borrowCapGuardian() external view returns (address);\\n\\n    function borrowCaps(address) external view returns (uint256);\\n\\n    function borrowGuardianPaused(address) external view returns (bool);\\n\\n    function borrowVerify(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external;\\n\\n    function checkMembership(address account, address cToken) external view returns (bool);\\n\\n    function claimComp(address holder, address[] memory cTokens) external;\\n\\n    function claimComp(\\n        address[] memory holders,\\n        address[] memory cTokens,\\n        bool borrowers,\\n        bool suppliers\\n    ) external;\\n\\n    function claimComp(address holder) external;\\n\\n    function closeFactorMantissa() external view returns (uint256);\\n\\n    function compAccrued(address) external view returns (uint256);\\n\\n    function compBorrowState(address) external view returns (uint224 index, uint32);\\n\\n    function compBorrowerIndex(address, address) external view returns (uint256);\\n\\n    function compClaimThreshold() external view returns (uint256);\\n\\n    function compContributorSpeeds(address) external view returns (uint256);\\n\\n    function compInitialIndex() external view returns (uint224);\\n\\n    function compRate() external view returns (uint256);\\n\\n    function compSpeeds(address) external view returns (uint256);\\n\\n    function compSupplierIndex(address, address) external view returns (uint256);\\n\\n    function compSupplyState(address) external view returns (uint224 index, uint32);\\n\\n    function comptrollerImplementation() external view returns (address);\\n\\n    function enterMarkets(address[] memory cTokens) external returns (uint256[] memory);\\n\\n    function exitMarket(address cTokenAddress) external returns (uint256);\\n\\n    function getAccountLiquidity(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getAllMarkets() external view returns (address[] memory);\\n\\n    function getAssetsIn(address account) external view returns (address[] memory);\\n\\n    function getBlockNumber() external view returns (uint256);\\n\\n    function getCompAddress() external view returns (address);\\n\\n    function getHypotheticalAccountLiquidity(\\n        address account,\\n        address cTokenModify,\\n        uint256 redeemTokens,\\n        uint256 borrowAmount\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function isComptroller() external view returns (bool);\\n\\n    function lastContributorBlock(address) external view returns (uint256);\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 actualRepayAmount,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint256 actualRepayAmount\\n    ) external view returns (uint256, uint256);\\n\\n    function liquidationIncentiveMantissa() external view returns (uint256);\\n\\n    function markets(address)\\n        external\\n        view\\n        returns (\\n            bool isListed,\\n            uint256 collateralFactorMantissa,\\n            bool isComped\\n        );\\n\\n    function maxAssets() external view returns (uint256);\\n\\n    function mintAllowed(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount\\n    ) external returns (uint256);\\n\\n    function mintGuardianPaused(address) external view returns (bool);\\n\\n    function mintVerify(\\n        address cToken,\\n        address minter,\\n        uint256 actualMintAmount,\\n        uint256 mintTokens\\n    ) external;\\n\\n    function oracle() external view returns (address);\\n\\n    function pauseGuardian() external view returns (address);\\n\\n    function pendingAdmin() external view returns (address);\\n\\n    function pendingComptrollerImplementation() external view returns (address);\\n\\n    function redeemAllowed(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external returns (uint256);\\n\\n    function redeemVerify(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemTokens\\n    ) external;\\n\\n    function refreshCompSpeeds() external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 actualRepayAmount,\\n        uint256 borrowerIndex\\n    ) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function seizeGuardianPaused() external view returns (bool);\\n\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function transferAllowed(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external returns (uint256);\\n\\n    function transferGuardianPaused() external view returns (bool);\\n\\n    function transferVerify(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external;\\n\\n    function updateContributorRewards(address contributor) external;\\n}\\n\"},\"ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.3;\\n\\ninterface ICToken {\\n    function _acceptAdmin() external returns (uint256);\\n\\n    function _addReserves(uint256 addAmount) external returns (uint256);\\n\\n    function _reduceReserves(uint256 reduceAmount) external returns (uint256);\\n\\n    function _setComptroller(address newComptroller) external returns (uint256);\\n\\n    function _setImplementation(\\n        address implementation_,\\n        bool allowResign,\\n        bytes memory becomeImplementationData\\n    ) external;\\n\\n    function _setInterestRateModel(address newInterestRateModel) external returns (uint256);\\n\\n    function _setPendingAdmin(address newPendingAdmin) external returns (uint256);\\n\\n    function _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\\n\\n    function accrualBlockNumber() external view returns (uint256);\\n\\n    function accrueInterest() external returns (uint256);\\n\\n    function admin() external view returns (address);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n\\n    function borrowIndex() external view returns (uint256);\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n\\n    function comptroller() external view returns (address);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function delegateToImplementation(bytes memory data) external returns (bytes memory);\\n\\n    function delegateToViewImplementation(bytes memory data) external view returns (bytes memory);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getCash() external view returns (uint256);\\n\\n    function implementation() external view returns (address);\\n\\n    function interestRateModel() external view returns (address);\\n\\n    function isCToken() external view returns (bool);\\n\\n    function liquidateBorrow(\\n        address borrower,\\n        uint256 repayAmount,\\n        address cTokenCollateral\\n    ) external returns (uint256);\\n\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function pendingAdmin() external view returns (address);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n    function reserveFactorMantissa() external view returns (uint256);\\n\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function supplyRatePerBlock() external view returns (uint256);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalBorrows() external view returns (uint256);\\n\\n    function totalBorrowsCurrent() external returns (uint256);\\n\\n    function totalReserves() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function underlying() external view returns (address);\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"ILendingPoolV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.3;\\n\\ninterface ILendingPoolV1 {\\n    function LENDINGPOOL_REVISION() external view returns (uint256);\\n\\n    function UINT_MAX_VALUE() external view returns (uint256);\\n\\n    function addressesProvider() external view returns (address);\\n\\n    function borrow(\\n        address _reserve,\\n        uint256 _amount,\\n        uint256 _interestRateMode,\\n        uint16 _referralCode\\n    ) external;\\n\\n    function core() external view returns (address);\\n\\n    function dataProvider() external view returns (address);\\n\\n    function deposit(\\n        address _reserve,\\n        uint256 _amount,\\n        uint16 _referralCode\\n    ) external payable;\\n\\n    function flashLoan(\\n        address _receiver,\\n        address _reserve,\\n        uint256 _amount,\\n        bytes memory _params\\n    ) external;\\n\\n    function getReserveConfigurationData(address _reserve)\\n        external\\n        view\\n        returns (\\n            uint256 ltv,\\n            uint256 liquidationThreshold,\\n            uint256 liquidationBonus,\\n            address interestRateStrategyAddress,\\n            bool usageAsCollateralEnabled,\\n            bool borrowingEnabled,\\n            bool stableBorrowRateEnabled,\\n            bool isActive\\n        );\\n\\n    function getReserveData(address _reserve)\\n        external\\n        view\\n        returns (\\n            uint256 totalLiquidity,\\n            uint256 availableLiquidity,\\n            uint256 totalBorrowsStable,\\n            uint256 totalBorrowsVariable,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 utilizationRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            address aTokenAddress,\\n            uint40 lastUpdateTimestamp\\n        );\\n\\n    function getReserves() external view returns (address[] memory);\\n\\n    function getUserAccountData(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 totalLiquidityETH,\\n            uint256 totalCollateralETH,\\n            uint256 totalBorrowsETH,\\n            uint256 totalFeesETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    function getUserReserveData(address _reserve, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 currentATokenBalance,\\n            uint256 currentBorrowBalance,\\n            uint256 principalBorrowBalance,\\n            uint256 borrowRateMode,\\n            uint256 borrowRate,\\n            uint256 liquidityRate,\\n            uint256 originationFee,\\n            uint256 variableBorrowIndex,\\n            uint256 lastUpdateTimestamp,\\n            bool usageAsCollateralEnabled\\n        );\\n\\n    function initialize(address _addressesProvider) external;\\n\\n    function liquidationCall(\\n        address _collateral,\\n        address _reserve,\\n        address _user,\\n        uint256 _purchaseAmount,\\n        bool _receiveAToken\\n    ) external payable;\\n\\n    function parametersProvider() external view returns (address);\\n\\n    function rebalanceStableBorrowRate(address _reserve, address _user) external;\\n\\n    function redeemUnderlying(\\n        address _reserve,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _aTokenBalanceAfterRedeem\\n    ) external;\\n\\n    function repay(\\n        address _reserve,\\n        uint256 _amount,\\n        address _onBehalfOf\\n    ) external payable;\\n\\n    function setUserUseReserveAsCollateral(address _reserve, bool _useAsCollateral) external;\\n\\n    function swapBorrowRateMode(address _reserve) external;\\n}\\n\"},\"IOneInch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.3;\\n\\ninterface IOneInch {\\n    function FLAG_DISABLE_AAVE() external view returns (uint256);\\n\\n    function FLAG_DISABLE_BANCOR() external view returns (uint256);\\n\\n    function FLAG_DISABLE_BDAI() external view returns (uint256);\\n\\n    function FLAG_DISABLE_CHAI() external view returns (uint256);\\n\\n    function FLAG_DISABLE_COMPOUND() external view returns (uint256);\\n\\n    function FLAG_DISABLE_CURVE_BINANCE() external view returns (uint256);\\n\\n    function FLAG_DISABLE_CURVE_COMPOUND() external view returns (uint256);\\n\\n    function FLAG_DISABLE_CURVE_SYNTHETIX() external view returns (uint256);\\n\\n    function FLAG_DISABLE_CURVE_USDT() external view returns (uint256);\\n\\n    function FLAG_DISABLE_CURVE_Y() external view returns (uint256);\\n\\n    function FLAG_DISABLE_FULCRUM() external view returns (uint256);\\n\\n    function FLAG_DISABLE_IEARN() external view returns (uint256);\\n\\n    function FLAG_DISABLE_KYBER() external view returns (uint256);\\n\\n    function FLAG_DISABLE_OASIS() external view returns (uint256);\\n\\n    function FLAG_DISABLE_SMART_TOKEN() external view returns (uint256);\\n\\n    function FLAG_DISABLE_UNISWAP() external view returns (uint256);\\n\\n    function FLAG_DISABLE_WETH() external view returns (uint256);\\n\\n    function FLAG_ENABLE_KYBER_BANCOR_RESERVE() external view returns (uint256);\\n\\n    function FLAG_ENABLE_KYBER_OASIS_RESERVE() external view returns (uint256);\\n\\n    function FLAG_ENABLE_KYBER_UNISWAP_RESERVE() external view returns (uint256);\\n\\n    function FLAG_ENABLE_MULTI_PATH_DAI() external view returns (uint256);\\n\\n    function FLAG_ENABLE_MULTI_PATH_ETH() external view returns (uint256);\\n\\n    function FLAG_ENABLE_MULTI_PATH_USDC() external view returns (uint256);\\n\\n    function FLAG_ENABLE_UNISWAP_COMPOUND() external view returns (uint256);\\n\\n    function claimAsset(address asset, uint256 amount) external;\\n\\n    function getExpectedReturn(\\n        address fromToken,\\n        address toToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 featureFlags\\n    ) external view returns (uint256 returnAmount, uint256[] memory distribution);\\n\\n    function isOwner() external view returns (bool);\\n\\n    function oneSplitImpl() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function renounceOwnership() external;\\n\\n    function setNewImpl(address impl) external;\\n\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] memory distribution,\\n        uint256 featureFlags\\n    ) external payable;\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\"},\"ISushiBar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.3;\\n\\ninterface ISushiBar {\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n    function enter(uint256 _amount) external;\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n    function leave(uint256 _share) external;\\n\\n    function name() external view returns (string memory);\\n\\n    function sushi() external view returns (address);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"},\"IUniswapV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setMigrator(address) external;\\n}\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length \\u003e 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c \\u003c a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b \\u003e a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"SocialWeaverV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.3;\\n\\nimport \\\"./Helpers.sol\\\";\\n\\nimport \\\"./IATokenV1.sol\\\";\\nimport \\\"./ICToken.sol\\\";\\nimport \\\"./IComptroller.sol\\\";\\nimport \\\"./ISushiBar.sol\\\";\\nimport \\\"./ILendingPoolV1.sol\\\";\\nimport \\\"./ICompoundLens.sol\\\";\\nimport \\\"./IUniswapV2.sol\\\";\\nimport \\\"./IBasicIssuanceModule.sol\\\";\\nimport \\\"./IOneInch.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\n\\n// Basket Weaver is a way to socialize gas costs related to minting baskets tokens\\ncontract SocialWeaverV1 is ReentrancyGuard, Helpers {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IOneInch public constant OneInch = IOneInch(0xC586BeF4a0992C495Cf22e1aeEE4E446CECDee0E);\\n    IBDPI public constant BDPI = IBDPI(0x0309c98B1bffA350bcb3F9fB9780970CA32a5060);\\n\\n    IBasicIssuanceModule public constant DPI_ISSUER = IBasicIssuanceModule(0xd8EF3cACe8b4907117a45B0b125c68560532F94D);\\n\\n    address public governance;\\n\\n    // **** ETH **** //\\n\\n    // Current weaveId\\n    uint256 public weaveIdETH = 0;\\n\\n    // User Address =\\u003e WeaveId =\\u003e Amount deposited\\n    mapping(address =\\u003e mapping(uint256 =\\u003e uint256)) public depositsETH;\\n\\n    // User Address =\\u003e WeaveId =\\u003e Claimed\\n    mapping(address =\\u003e mapping(uint256 =\\u003e bool)) public basketsClaimedETH;\\n\\n    // WeaveId =\\u003e Amount deposited\\n    mapping(uint256 =\\u003e uint256) public totalDepositedETH;\\n\\n    // Basket minted per weaveId\\n    mapping(uint256 =\\u003e uint256) public basketsMintedETH;\\n\\n    // **** DPI **** //\\n    uint256 public weaveIdDPI = 0;\\n\\n    // User Address =\\u003e WeaveId =\\u003e Amount deposited\\n    mapping(address =\\u003e mapping(uint256 =\\u003e uint256)) public depositsDPI;\\n\\n    // User Address =\\u003e WeaveId =\\u003e Claimed\\n    mapping(address =\\u003e mapping(uint256 =\\u003e bool)) public basketsClaimedDPI;\\n\\n    // WeaveId =\\u003e Amount deposited\\n    mapping(uint256 =\\u003e uint256) public totalDepositedDPI;\\n\\n    // Basket minted per weaveId\\n    mapping(uint256 =\\u003e uint256) public basketsMintedDPI;\\n\\n    // Approved users to call weave\\n    // This is v important as invalid inputs will\\n    // be basically a \\\"fat finger\\\"\\n    mapping(address =\\u003e bool) public approvedWeavers;\\n\\n    // **** Constructor and modifiers ****\\n\\n    constructor(address _governance) {\\n        governance = _governance;\\n\\n        // Enter compound markets\\n        address[] memory markets = new address[](2);\\n        markets[0] = CUNI;\\n        markets[0] = CCOMP;\\n        enterMarkets(markets);\\n    }\\n\\n    modifier onlyGov() {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        _;\\n    }\\n\\n    modifier onlyWeavers {\\n        require(msg.sender == governance || approvedWeavers[msg.sender], \\\"!weaver\\\");\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    // **** Protected functions ****\\n\\n    function approveWeaver(address _weaver) public onlyGov {\\n        approvedWeavers[_weaver] = true;\\n    }\\n\\n    function revokeWeaver(address _weaver) public onlyGov {\\n        approvedWeavers[_weaver] = false;\\n    }\\n\\n    function setGov(address _governance) public onlyGov {\\n        governance = _governance;\\n    }\\n\\n    // Emergency\\n    function recoverERC20(address _token) public onlyGov {\\n        require(address(_token) != address(BDPI), \\\"!dpi\\\");\\n        require(address(_token) != address(DPI), \\\"!dpi\\\");\\n        IERC20(_token).safeTransfer(governance, IERC20(_token).balanceOf(address(this)));\\n    }\\n\\n    /// @notice Converts DPI into a Basket, socializing gas cost\\n    /// @param  derivatives  Address of the derivatives (e.g. cUNI, aYFI)\\n    /// @param  underlyings  Address of the underlyings (e.g. UNI,   YFI)\\n    /// @param  minMintAmount Minimum amount of basket token to mint\\n    /// @param  deadline      Deadline to mint by\\n    function weaveWithDPI(\\n        address[] memory derivatives,\\n        address[] memory underlyings,\\n        uint256 minMintAmount,\\n        uint256 deadline\\n    ) public onlyWeavers {\\n        require(block.timestamp \\u003c= deadline, \\\"expired\\\");\\n        uint256 bdpiToMint = _burnDPIAndGetMintableBDPI(derivatives, underlyings);\\n        require(bdpiToMint \\u003e= minMintAmount, \\\"!mint-min-amount\\\");\\n\\n        // Save the amount minted to mintId\\n        // Leftover dust will be rolledover to next batch\\n        basketsMintedDPI[weaveIdDPI] = bdpiToMint;\\n\\n        // Mint tokens\\n        BDPI.mint(bdpiToMint);\\n\\n        weaveIdDPI++;\\n    }\\n\\n    /// @notice Converts ETH into a Basket, socializing gas cost\\n    /// @param  derivatives  Address of the derivatives (e.g. cUNI, aYFI)\\n    /// @param  underlyings  Address of the underlyings (e.g. UNI,   YFI)\\n    /// @param  minMintAmount Minimum amount of basket token to mint\\n    /// @param  deadline      Deadline to mint by\\n    function weaveWithETH(\\n        address[] memory derivatives,\\n        address[] memory underlyings,\\n        uint256 minMintAmount,\\n        uint256 deadline\\n    ) public onlyWeavers {\\n        require(block.timestamp \\u003c= deadline, \\\"expired\\\");\\n\\n        // ETH -\\u003e DPI\\n        // address(0) is ETH\\n        (uint256 retAmount, uint256[] memory distribution) =\\n            OneInch.getExpectedReturn(address(0), DPI, address(this).balance, 2, 0);\\n        OneInch.swap{ value: address(this).balance }(\\n            address(0),\\n            DPI,\\n            address(this).balance,\\n            retAmount,\\n            distribution,\\n            0\\n        );\\n        // DPI -\\u003e BDPI\\n        uint256 bdpiToMint = _burnDPIAndGetMintableBDPI(derivatives, underlyings);\\n        require(bdpiToMint \\u003e= minMintAmount, \\\"!mint-min-amount\\\");\\n\\n        // Save the amount minted to mintId\\n        // Leftover dust will be rolledover to next batch\\n        basketsMintedETH[weaveIdETH] = bdpiToMint;\\n\\n        // Mint tokens\\n        BDPI.mint(bdpiToMint);\\n\\n        weaveIdETH++;\\n    }\\n\\n    // **** Public functions ****\\n\\n    //// DPI\\n\\n    /// @notice Deposits DPI to be later converted into the Basket by some kind soul\\n    function depositDPI(uint256 _amount) public nonReentrant {\\n        require(_amount \\u003e 1e8, \\\"!dust-dpi\\\");\\n        IERC20(DPI).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        depositsDPI[msg.sender][weaveIdDPI] = depositsDPI[msg.sender][weaveIdDPI].add(_amount);\\n        totalDepositedDPI[weaveIdDPI] = totalDepositedDPI[weaveIdDPI].add(_amount);\\n    }\\n\\n    /// @notice User doesn\\u0027t want to wait anymore and just wants their DPI back\\n    function withdrawDPI(uint256 _amount) public nonReentrant {\\n        // Reverts if withdrawing too many\\n        depositsDPI[msg.sender][weaveIdDPI] = depositsDPI[msg.sender][weaveIdDPI].sub(_amount);\\n        totalDepositedDPI[weaveIdDPI] = totalDepositedDPI[weaveIdDPI].sub(_amount);\\n\\n        IERC20(DPI).safeTransfer(msg.sender, _amount);\\n    }\\n\\n    /// @notice User withdraws converted Basket token\\n    function withdrawBasketDPI(uint256 _weaveId) public payable nonReentrant {\\n        require(_weaveId \\u003c weaveIdDPI, \\\"!weaved\\\");\\n        require(!basketsClaimedDPI[msg.sender][_weaveId], \\\"already-claimed\\\");\\n        uint256 userDeposited = depositsDPI[msg.sender][_weaveId];\\n        require(userDeposited \\u003e 0, \\\"!deposit\\\");\\n\\n        uint256 ratio = userDeposited.mul(1e18).div(totalDepositedDPI[_weaveId]);\\n        uint256 userBasketAmount = basketsMintedDPI[_weaveId].mul(ratio).div(1e18);\\n        basketsClaimedDPI[msg.sender][_weaveId] = true;\\n\\n        IERC20(address(BDPI)).safeTransfer(msg.sender, userBasketAmount);\\n    }\\n\\n    //// ETH\\n\\n    /// @notice Deposits ETH to be later converted into the Basket by some kind soul\\n    function depositETH() public payable nonReentrant {\\n        require(msg.value \\u003e 1e8, \\\"!dust-eth\\\");\\n\\n        depositsETH[msg.sender][weaveIdETH] = depositsETH[msg.sender][weaveIdETH].add(msg.value);\\n        totalDepositedETH[weaveIdETH] = totalDepositedETH[weaveIdETH].add(msg.value);\\n    }\\n\\n    /// @notice User doesn\\u0027t want to wait anymore and just wants their ETH back\\n    function withdrawETH(uint256 _amount) public nonReentrant {\\n        // Reverts if withdrawing too many\\n        depositsETH[msg.sender][weaveIdETH] = depositsETH[msg.sender][weaveIdETH].sub(_amount);\\n        totalDepositedETH[weaveIdETH] = totalDepositedETH[weaveIdETH].sub(_amount);\\n\\n        (bool s, ) = msg.sender.call{ value: _amount }(\\\"\\\");\\n        require(s, \\\"!transfer-eth\\\");\\n    }\\n\\n    /// @notice User withdraws converted Basket token\\n    function withdrawBasketETH(uint256 _weaveId) public payable nonReentrant {\\n        require(_weaveId \\u003c weaveIdETH, \\\"!weaved\\\");\\n        require(!basketsClaimedETH[msg.sender][_weaveId], \\\"already-claimed\\\");\\n        uint256 userDeposited = depositsETH[msg.sender][_weaveId];\\n        require(userDeposited \\u003e 0, \\\"!deposit\\\");\\n\\n        uint256 ratio = userDeposited.mul(1e18).div(totalDepositedETH[_weaveId]);\\n        uint256 userBasketAmount = basketsMintedETH[_weaveId].mul(ratio).div(1e18);\\n        basketsClaimedETH[msg.sender][_weaveId] = true;\\n\\n        IERC20(address(BDPI)).safeTransfer(msg.sender, userBasketAmount);\\n    }\\n\\n    // **** Internals ****\\n\\n    /// @notice Chooses which router address to use\\n    function _getRouterAddressForToken(address _token) internal pure returns (address) {\\n        // Chooses which router (uniswap or sushiswap) to use to swap tokens\\n        // By default: SUSHI\\n        // But some tokens don\\u0027t have liquidity on SUSHI, so we use UNI\\n        // Don\\u0027t want to use 1inch as its too costly gas-wise\\n\\n        if (_token == KNC || _token == LRC || _token == BAL || _token == MTA) {\\n            return UNIV2_ROUTER;\\n        }\\n\\n        return SUSHISWAP_ROUTER;\\n    }\\n\\n    /// @notice\\n    function _burnDPIAndGetMintableBDPI(address[] memory derivatives, address[] memory underlyings)\\n        internal\\n        returns (uint256)\\n    {\\n        // Burn DPI\\n        uint256 dpiBal = IERC20(DPI).balanceOf(address(this));\\n        IERC20(DPI).approve(address(DPI_ISSUER), dpiBal);\\n        DPI_ISSUER.redeem(address(DPI), dpiBal, address(this));\\n\\n        // Convert components to derivative\\n        (, uint256[] memory tokenAmountsInBasket) = BDPI.getAssetsAndBalances();\\n        uint256 basketTotalSupply = BDPI.totalSupply();\\n        uint256 bdpiToMint;\\n        for (uint256 i = 0; i \\u003c derivatives.length; i++) {\\n            // Convert to from respective token to derivative\\n            _toDerivative(underlyings[i], derivatives[i]);\\n\\n            // Approve derivative and calculate mint amount\\n            bdpiToMint = _approveDerivativeAndGetMintAmount(\\n                derivatives[i],\\n                basketTotalSupply,\\n                tokenAmountsInBasket[i],\\n                bdpiToMint\\n            );\\n        }\\n\\n        return bdpiToMint;\\n    }\\n\\n    /// @notice Approves derivative to the basket address and gets the mint amount.\\n    ///         Mainly here to avoid stack too deep errors\\n    /// @param  derivative  Address of the derivative (e.g. cUNI, aYFI)\\n    /// @param  basketTotalSupply  Total supply of the basket token\\n    /// @param  tokenAmountInBasket  Amount of derivative currently in the basket\\n    /// @param  curMintAmount  Accumulator - whats the minimum mint amount right now\\n    function _approveDerivativeAndGetMintAmount(\\n        address derivative,\\n        uint256 basketTotalSupply,\\n        uint256 tokenAmountInBasket,\\n        uint256 curMintAmount\\n    ) internal returns (uint256) {\\n        uint256 derivativeBal = IERC20(derivative).balanceOf(address(this));\\n\\n        IERC20(derivative).safeApprove(address(BDPI), derivativeBal);\\n\\n        // Calculate how much BDPI we can mint at max\\n        // Formula: min(e for e in bdpiSupply * tokenWeHave[e] / tokenInBDPI[e])\\n        if (curMintAmount == 0) {\\n            return basketTotalSupply.mul(derivativeBal).div(tokenAmountInBasket);\\n        }\\n\\n        uint256 temp = basketTotalSupply.mul(derivativeBal).div(tokenAmountInBasket);\\n        if (temp \\u003c curMintAmount) {\\n            return temp;\\n        }\\n\\n        return curMintAmount;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BDPI\",\"outputs\":[{\"internalType\":\"contract IBDPI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DPI_ISSUER\",\"outputs\":[{\"internalType\":\"contract IBasicIssuanceModule\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OneInch\",\"outputs\":[{\"internalType\":\"contract IOneInch\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weaver\",\"type\":\"address\"}],\"name\":\"approveWeaver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedWeavers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"basketsClaimedDPI\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"basketsClaimedETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"basketsMintedDPI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"basketsMintedETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositDPI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositsDPI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositsETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_markets\",\"type\":\"address[]\"}],\"name\":\"enterMarkets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weaver\",\"type\":\"address\"}],\"name\":\"revokeWeaver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalDepositedDPI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalDepositedETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weaveIdDPI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weaveIdETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"derivatives\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"underlyings\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"weaveWithDPI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"derivatives\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"underlyings\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"weaveWithETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weaveId\",\"type\":\"uint256\"}],\"name\":\"withdrawBasketDPI\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weaveId\",\"type\":\"uint256\"}],\"name\":\"withdrawBasketETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawDPI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SocialWeaverV1","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002bf3cc8fa6f067cc1741c7467c8ee9f00e837757","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://791511177b1a2523e2dd3188808c7d33f8f06dca4b0a4243d25db36bdbc24ce8"}]}