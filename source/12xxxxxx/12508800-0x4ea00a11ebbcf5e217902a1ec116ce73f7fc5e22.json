{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/controllableToken/TokenControllerI.sol\r\n\r\npragma solidity 0.4.19;\r\n\r\n/// @title Interface for token controllers. The controller specifies whether a transfer can be done.\r\ncontract TokenControllerI {\r\n\r\n    /// @dev Specifies whether a transfer is allowed or not.\r\n    /// @return True if the transfer is allowed\r\n    function transferAllowed(address _from, address _to) external view returns (bool);\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\npragma solidity 0.4.19;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/controllableToken/TokenController.sol\r\n\r\npragma solidity 0.4.19;\r\n\r\n\r\n\r\ncontract TokenController is TokenControllerI, Ownable {\r\n\r\n    event ContractReady();\r\n    event SourceAddressDenyListed(address denyListedAddress);\r\n    event SourceAddressAllowed(address allowedAddress);\r\n    event TargetAddressAllowListed(address allowedAddress);\r\n    event TargetAddressDisallowed(address disallowedAddress);\r\n\r\n    bool public isReady;\r\n\r\n    mapping(address=>bool) public sourceDenyMapping;\r\n    mapping(address=>bool) public targetAllowMapping;\r\n\r\n    modifier whenPreparing(){\r\n        require(!isReady);\r\n        _;\r\n    }\r\n\r\n    function transferAllowed(address _from, address _to) external view returns (bool){\r\n        if(!isReady){\r\n            return false;\r\n        }\r\n        return !sourceDenyMapping[_from] || targetAllowMapping[_to];\r\n    }\r\n\r\n    function addToSourceDenyList(address[] addressesToDenyTransfers) external onlyOwner {\r\n        for(uint i = 0; i< addressesToDenyTransfers.length; i++){\r\n            address addressToDeny = addressesToDenyTransfers[i];\r\n            sourceDenyMapping[addressToDeny] = true;\r\n            SourceAddressDenyListed(addressToDeny);\r\n        }\r\n    }\r\n\r\n    function removeFromSourceDenyList(address[] addressesToAllowTransfers) external onlyOwner {\r\n        for(uint i = 0; i< addressesToAllowTransfers.length; i++){\r\n            address addressToAllow = addressesToAllowTransfers[i];\r\n            sourceDenyMapping[addressToAllow] = false;\r\n            SourceAddressAllowed(addressToAllow);\r\n        }\r\n    }\r\n\r\n    function addToTargetAllowList(address[] targetAddressesToAllow) external onlyOwner {\r\n        for(uint i = 0; i< targetAddressesToAllow.length; i++){\r\n            address targetAddressToAllow = targetAddressesToAllow[i];\r\n            targetAllowMapping[targetAddressToAllow] = true;\r\n            TargetAddressAllowListed(targetAddressToAllow);\r\n        }\r\n    }\r\n\r\n    function removeFromTargetAllowList(address[] addressesToDenyTransfers) external onlyOwner {\r\n        for(uint i = 0; i< addressesToDenyTransfers.length; i++){\r\n            address addressToDeny = addressesToDenyTransfers[i];\r\n            targetAllowMapping[addressToDeny] = false;\r\n            TargetAddressDisallowed(addressToDeny);\r\n        }\r\n    }\r\n\r\n    function setReady() external onlyOwner whenPreparing {\r\n        isReady = true;\r\n        ContractReady();\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"targetAddressesToAllow\",\"type\":\"address[]\"}],\"name\":\"addToTargetAllowList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sourceDenyMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isReady\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setReady\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressesToDenyTransfers\",\"type\":\"address[]\"}],\"name\":\"removeFromTargetAllowList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressesToDenyTransfers\",\"type\":\"address[]\"}],\"name\":\"addToSourceDenyList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressesToAllowTransfers\",\"type\":\"address[]\"}],\"name\":\"removeFromSourceDenyList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"targetAllowMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractReady\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"denyListedAddress\",\"type\":\"address\"}],\"name\":\"SourceAddressDenyListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"allowedAddress\",\"type\":\"address\"}],\"name\":\"SourceAddressAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"allowedAddress\",\"type\":\"address\"}],\"name\":\"TargetAddressAllowListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"disallowedAddress\",\"type\":\"address\"}],\"name\":\"TargetAddressDisallowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenController","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"10000000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://67d0e3ad3e724f283847be6cd85791ac9f45732f0c140c4463d06d34f6c412fe"}]}