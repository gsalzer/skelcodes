{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.7.6;\r\n\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\ninterface LinkTokenInterface {\r\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n  function approve(address spender, uint256 value) external returns (bool success);\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n  function decimals() external view returns (uint8 decimalPlaces);\r\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\r\n  function increaseApproval(address spender, uint256 subtractedValue) external;\r\n  function name() external view returns (string memory tokenName);\r\n  function symbol() external view returns (string memory tokenSymbol);\r\n  function totalSupply() external view returns (uint256 totalTokensIssued);\r\n  function transfer(address to, uint256 value) external returns (bool success);\r\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMathChainlink {\r\n  /**\r\n    * @dev Returns the addition of two unsigned integers, reverting on\r\n    * overflow.\r\n    *\r\n    * Counterpart to Solidity's `+` operator.\r\n    *\r\n    * Requirements:\r\n    * - Addition cannot overflow.\r\n    */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the subtraction of two unsigned integers, reverting on\r\n    * overflow (when the result is negative).\r\n    *\r\n    * Counterpart to Solidity's `-` operator.\r\n    *\r\n    * Requirements:\r\n    * - Subtraction cannot overflow.\r\n    */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"SafeMath: subtraction overflow\");\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the multiplication of two unsigned integers, reverting on\r\n    * overflow.\r\n    *\r\n    * Counterpart to Solidity's `*` operator.\r\n    *\r\n    * Requirements:\r\n    * - Multiplication cannot overflow.\r\n    */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the integer division of two unsigned integers. Reverts on\r\n    * division by zero. The result is rounded towards zero.\r\n    *\r\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n    * uses an invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    * - The divisor cannot be zero.\r\n    */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, \"SafeMath: division by zero\");\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n    * Reverts when dividing by zero.\r\n    *\r\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n    * invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    * - The divisor cannot be zero.\r\n    */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \"SafeMath: modulo by zero\");\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title The Owned contract\r\n * @notice A contract with helpers for basic contract ownership.\r\n */\r\ncontract Owned {\r\n\r\n  address public owner;\r\n  address private pendingOwner;\r\n\r\n  event OwnershipTransferRequested(\r\n    address indexed from,\r\n    address indexed to\r\n  );\r\n  event OwnershipTransferred(\r\n    address indexed from,\r\n    address indexed to\r\n  );\r\n\r\n  constructor() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows an owner to begin transferring ownership to a new address,\r\n   * pending.\r\n   */\r\n  function transferOwnership(address _to)\r\n    external\r\n    onlyOwner()\r\n  {\r\n    pendingOwner = _to;\r\n\r\n    emit OwnershipTransferRequested(owner, _to);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows an ownership transfer to be completed by the recipient.\r\n   */\r\n  function acceptOwnership()\r\n    external\r\n  {\r\n    require(msg.sender == pendingOwner, \"Must be proposed owner\");\r\n\r\n    address oldOwner = owner;\r\n    owner = msg.sender;\r\n    pendingOwner = address(0);\r\n\r\n    emit OwnershipTransferred(oldOwner, msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if called by anyone other than the contract owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"Only callable by owner\");\r\n    _;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n *\r\n * This library is a version of Open Zeppelin's SafeMath, modified to support\r\n * unsigned 96 bit integers.\r\n */\r\nlibrary SafeMath96 {\r\n  /**\r\n    * @dev Returns the addition of two unsigned integers, reverting on\r\n    * overflow.\r\n    *\r\n    * Counterpart to Solidity's `+` operator.\r\n    *\r\n    * Requirements:\r\n    * - Addition cannot overflow.\r\n    */\r\n  function add(uint96 a, uint96 b) internal pure returns (uint96) {\r\n    uint96 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the subtraction of two unsigned integers, reverting on\r\n    * overflow (when the result is negative).\r\n    *\r\n    * Counterpart to Solidity's `-` operator.\r\n    *\r\n    * Requirements:\r\n    * - Subtraction cannot overflow.\r\n    */\r\n  function sub(uint96 a, uint96 b) internal pure returns (uint96) {\r\n    require(b <= a, \"SafeMath: subtraction overflow\");\r\n    uint96 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the multiplication of two unsigned integers, reverting on\r\n    * overflow.\r\n    *\r\n    * Counterpart to Solidity's `*` operator.\r\n    *\r\n    * Requirements:\r\n    * - Multiplication cannot overflow.\r\n    */\r\n  function mul(uint96 a, uint96 b) internal pure returns (uint96) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint96 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the integer division of two unsigned integers. Reverts on\r\n    * division by zero. The result is rounded towards zero.\r\n    *\r\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n    * uses an invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    * - The divisor cannot be zero.\r\n    */\r\n  function div(uint96 a, uint96 b) internal pure returns (uint96) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, \"SafeMath: division by zero\");\r\n    uint96 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n    * Reverts when dividing by zero.\r\n    *\r\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n    * invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    * - The divisor cannot be zero.\r\n    */\r\n  function mod(uint96 a, uint96 b) internal pure returns (uint96) {\r\n    require(b != 0, \"SafeMath: modulo by zero\");\r\n    return a % b;\r\n  }\r\n}\r\n\r\ncontract KeeperBase {\r\n\r\n  /**\r\n   * @notice method that allows it to be simulated via eth_call by checking that\r\n   * the sender is the zero address.\r\n   */\r\n  function preventExecution()\r\n    internal\r\n    view\r\n  {\r\n    require(tx.origin == address(0), \"only for simulated backend\");\r\n  }\r\n\r\n  /**\r\n   * @notice modifier that allows it to be simulated via eth_call by checking\r\n   * that the sender is the zero address.\r\n   */\r\n  modifier cannotExecute()\r\n  {\r\n    preventExecution();\r\n    _;\r\n  }\r\n\r\n}\r\n\r\ninterface KeeperCompatibleInterface {\r\n\r\n  /**\r\n   * @notice method that is simulated by the keepers to see if any work actually\r\n   * needs to be performed. This method does does not actually need to be\r\n   * executable, and since it is only ever simulated it can consume lots of gas.\r\n   * @dev To ensure that it is never called, you may want to add the\r\n   * cannotExecute modifier from KeeperBase to your implementation of this\r\n   * method.\r\n   * @param checkData specified in the upkeep registration so it is always the\r\n   * same for a registered upkeep. This can easilly be broken down into specific\r\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\r\n   * same contract and easily differentiated by the contract.\r\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\r\n   * performUpkeep or not.\r\n   * @return performData bytes that the keeper should call performUpkeep with, if\r\n   * upkeep is needed. If you would like to encode data to decode later, try\r\n   * `abi.encode`.\r\n   */\r\n  function checkUpkeep(\r\n    bytes calldata checkData\r\n  )\r\n    external\r\n    returns (\r\n      bool upkeepNeeded,\r\n      bytes memory performData\r\n    );\r\n  /**\r\n   * @notice method that is actually executed by the keepers, via the registry.\r\n   * The data returned by the checkUpkeep simulation will be passed into\r\n   * this method to actually be executed.\r\n   * @dev The input to this method should not be trusted, and the caller of the\r\n   * method should not even be restricted to any single registry. Anyone should\r\n   * be able call it, and the input should be validated, there is no guarantee\r\n   * that the data passed in is the performData returned from checkUpkeep. This\r\n   * could happen due to malicious keepers, racing keepers, or simply a state\r\n   * change while the performUpkeep transaction is waiting for confirmation.\r\n   * Always validate the data passed in.\r\n   * @param performData is the data which was passed back from the checkData\r\n   * simulation. If it is encoded, it can easily be decoded into other types by\r\n   * calling `abi.decode`. This data should not be trusted, and should be\r\n   * validated against the contract's current state.\r\n   */\r\n  function performUpkeep(\r\n    bytes calldata performData\r\n  ) external;\r\n}\r\n\r\ninterface KeeperRegistryBaseInterface {\r\n  function registerUpkeep(\r\n    address target,\r\n    uint32 gasLimit,\r\n    address admin,\r\n    bytes calldata checkData\r\n  ) external returns (\r\n      uint256 id\r\n    );\r\n  function performUpkeep(\r\n    uint256 id,\r\n    bytes calldata performData\r\n  ) external returns (\r\n      bool success\r\n    );\r\n  function cancelUpkeep(\r\n    uint256 id\r\n  ) external;\r\n  function addFunds(\r\n    uint256 id,\r\n    uint96 amount\r\n  ) external;\r\n\r\n  function getUpkeep(uint256 id)\r\n    external view returns (\r\n      address target,\r\n      uint32 executeGas,\r\n      bytes memory checkData,\r\n      uint96 balance,\r\n      address lastKeeper,\r\n      address admin,\r\n      uint64 maxValidBlocknumber\r\n    );\r\n  function getUpkeepCount()\r\n    external view returns (uint256);\r\n  function getCanceledUpkeepList()\r\n    external view returns (uint256[] memory);\r\n  function getKeeperList()\r\n    external view returns (address[] memory);\r\n  function getKeeperInfo(address query)\r\n    external view returns (\r\n      address payee,\r\n      bool active,\r\n      uint96 balance\r\n    );\r\n  function getConfig()\r\n    external view returns (\r\n      uint32 paymentPremiumPPB,\r\n      uint24 checkFrequencyBlocks,\r\n      uint32 checkGasLimit,\r\n      uint24 stalenessSeconds,\r\n      int256 fallbackGasPrice,\r\n      int256 fallbackLinkPrice\r\n    );\r\n}\r\n\r\n/**\r\n  * @dev The view methods are not actually marked as view in the implementation\r\n  * but we want them to be easily queried off-chain. Solidity will not compile\r\n  * if we actually inherrit from this interface, so we document it here.\r\n  */\r\ninterface KeeperRegistryInterface is KeeperRegistryBaseInterface {\r\n  function checkUpkeep(\r\n    uint256 upkeepId,\r\n    address from\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      bytes memory performData,\r\n      uint256 maxLinkPayment,\r\n      uint256 gasLimit,\r\n      int256 gasWei,\r\n      int256 linkEth\r\n    );\r\n}\r\n\r\ninterface KeeperRegistryExecutableInterface is KeeperRegistryBaseInterface {\r\n  function checkUpkeep(\r\n    uint256 upkeepId,\r\n    address from\r\n  )\r\n    external\r\n    returns (\r\n      bytes memory performData,\r\n      uint256 maxLinkPayment,\r\n      uint256 gasLimit,\r\n      int256 gasWei,\r\n      int256 linkEth\r\n    );\r\n}\r\n\r\n/**\r\n  * @notice Registry for adding work for Chainlink Keepers to perform on client\r\n  * contracts. Clients must support the Upkeep interface.\r\n  */\r\ncontract KeeperRegistry is Owned, KeeperBase, ReentrancyGuard, KeeperRegistryExecutableInterface {\r\n  using Address for address;\r\n  using SafeMathChainlink for uint256;\r\n  using SafeMath96 for uint96;\r\n\r\n  address constant private ZERO_ADDRESS = address(0);\r\n  bytes4 constant private CHECK_SELECTOR = KeeperCompatibleInterface.checkUpkeep.selector;\r\n  bytes4 constant private PERFORM_SELECTOR = KeeperCompatibleInterface.performUpkeep.selector;\r\n  uint256 constant private CALL_GAS_MAX = 2_500_000;\r\n  uint256 constant private CALL_GAS_MIN = 2_300;\r\n  uint256 constant private CANCELATION_DELAY = 50;\r\n  uint256 constant private CUSHION = 5_000;\r\n  uint256 constant private REGISTRY_GAS_OVERHEAD = 80_000;\r\n  uint256 constant private PPB_BASE = 1_000_000_000;\r\n  uint64 constant private UINT64_MAX = 2**64 - 1;\r\n  uint96 constant private LINK_TOTAL_SUPPLY = 1e27;\r\n\r\n  uint256 private s_upkeepCount;\r\n  uint256[] private s_canceledUpkeepList;\r\n  address[] private s_keeperList;\r\n  mapping(uint256 => Upkeep) private s_upkeep;\r\n  mapping(address => KeeperInfo) private s_keeperInfo;\r\n  mapping(address => address) private s_proposedPayee;\r\n  mapping(uint256 => bytes) private s_checkData;\r\n  Config private s_config;\r\n  int256 private s_fallbackGasPrice;  // not in config object for gas savings\r\n  int256 private s_fallbackLinkPrice; // not in config object for gas savings\r\n\r\n  LinkTokenInterface public immutable LINK;\r\n  AggregatorV3Interface public immutable LINK_ETH_FEED;\r\n  AggregatorV3Interface public immutable FAST_GAS_FEED;\r\n\r\n  struct Upkeep {\r\n    address target;\r\n    uint32 executeGas;\r\n    uint96 balance;\r\n    address admin;\r\n    uint64 maxValidBlocknumber;\r\n    address lastKeeper;\r\n  }\r\n\r\n  struct KeeperInfo {\r\n    address payee;\r\n    uint96 balance;\r\n    bool active;\r\n  }\r\n\r\n  struct Config {\r\n    uint32 paymentPremiumPPB;\r\n    uint24 blockCountPerTurn;\r\n    uint32 checkGasLimit;\r\n    uint24 stalenessSeconds;\r\n  }\r\n\r\n  struct PerformParams {\r\n    address from;\r\n    uint256 id;\r\n    bytes performData;\r\n  }\r\n\r\n  event UpkeepRegistered(\r\n    uint256 indexed id,\r\n    uint32 executeGas,\r\n    address admin\r\n  );\r\n  event UpkeepPerformed(\r\n    uint256 indexed id,\r\n    bool indexed success,\r\n    address indexed from,\r\n    uint96 payment,\r\n    bytes performData\r\n  );\r\n  event UpkeepCanceled(\r\n    uint256 indexed id,\r\n    uint64 indexed atBlockHeight\r\n  );\r\n  event FundsAdded(\r\n    uint256 indexed id,\r\n    address indexed from,\r\n    uint96 amount\r\n  );\r\n  event FundsWithdrawn(\r\n    uint256 indexed id,\r\n    uint256 amount,\r\n    address to\r\n  );\r\n  event ConfigSet(\r\n    uint32 paymentPremiumPPB,\r\n    uint24 blockCountPerTurn,\r\n    uint32 checkGasLimit,\r\n    uint24 stalenessSeconds,\r\n    int256 fallbackGasPrice,\r\n    int256 fallbackLinkPrice\r\n  );\r\n  event KeepersUpdated(\r\n    address[] keepers,\r\n    address[] payees\r\n  );\r\n  event PaymentWithdrawn(\r\n    address indexed keeper,\r\n    uint256 indexed amount,\r\n    address indexed to,\r\n    address payee\r\n  );\r\n  event PayeeshipTransferRequested(\r\n    address indexed keeper,\r\n    address indexed from,\r\n    address indexed to\r\n  );\r\n  event PayeeshipTransferred(\r\n    address indexed keeper,\r\n    address indexed from,\r\n    address indexed to\r\n  );\r\n\r\n  /**\r\n   * @param link address of the LINK Token\r\n   * @param linkEthFeed address of the LINK/ETH price feed\r\n   * @param fastGasFeed address of the Fast Gas price feed\r\n   * @param paymentPremiumPPB payment premium rate oracles receive on top of\r\n   * being reimbursed for gas, measured in parts per billion\r\n   * @param blockCountPerTurn number of blocks each oracle has during their turn to\r\n   * perform upkeep before it will be the next keeper's turn to submit\r\n   * @param checkGasLimit gas limit when checking for upkeep\r\n   * @param stalenessSeconds number of seconds that is allowed for feed data to\r\n   * be stale before switching to the fallback pricing\r\n   * @param fallbackGasPrice gas price used if the gas price feed is stale\r\n   * @param fallbackLinkPrice LINK price used if the LINK price feed is stale\r\n   */\r\n  constructor(\r\n    address link,\r\n    address linkEthFeed,\r\n    address fastGasFeed,\r\n    uint32 paymentPremiumPPB,\r\n    uint24 blockCountPerTurn,\r\n    uint32 checkGasLimit,\r\n    uint24 stalenessSeconds,\r\n    int256 fallbackGasPrice,\r\n    int256 fallbackLinkPrice\r\n  ) {\r\n    LINK = LinkTokenInterface(link);\r\n    LINK_ETH_FEED = AggregatorV3Interface(linkEthFeed);\r\n    FAST_GAS_FEED = AggregatorV3Interface(fastGasFeed);\r\n\r\n    setConfig(\r\n      paymentPremiumPPB,\r\n      blockCountPerTurn,\r\n      checkGasLimit,\r\n      stalenessSeconds,\r\n      fallbackGasPrice,\r\n      fallbackLinkPrice\r\n    );\r\n  }\r\n\r\n\r\n  // ACTIONS\r\n\r\n  /**\r\n   * @notice adds a new upkeep\r\n   * @param target address to peform upkeep on\r\n   * @param gasLimit amount of gas to provide the target contract when\r\n   * performing upkeep\r\n   * @param admin address to cancel upkeep and withdraw remaining funds\r\n   * @param checkData data passed to the contract when checking for upkeep\r\n   */\r\n  function registerUpkeep(\r\n    address target,\r\n    uint32 gasLimit,\r\n    address admin,\r\n    bytes calldata checkData\r\n  )\r\n    external\r\n    override\r\n    onlyOwner()\r\n    returns (\r\n      uint256 id\r\n    )\r\n  {\r\n    require(target.isContract(), \"target is not a contract\");\r\n    require(gasLimit >= CALL_GAS_MIN, \"min gas is 2300\");\r\n    require(gasLimit <= CALL_GAS_MAX, \"max gas is 2500000\");\r\n\r\n    id = s_upkeepCount;\r\n    s_upkeep[id] = Upkeep({\r\n      target: target,\r\n      executeGas: gasLimit,\r\n      balance: 0,\r\n      admin: admin,\r\n      maxValidBlocknumber: UINT64_MAX,\r\n      lastKeeper: address(0)\r\n    });\r\n    s_checkData[id] = checkData;\r\n    s_upkeepCount++;\r\n\r\n    emit UpkeepRegistered(id, gasLimit, admin);\r\n\r\n    return id;\r\n  }\r\n\r\n  /**\r\n   * @notice simulated by keepers via eth_call to see if the upkeep needs to be\r\n   * performed. If it does need to be performed then the call simulates the\r\n   * transaction performing upkeep to make sure it succeeds. It then eturns the\r\n   * success status along with payment information and the perform data payload.\r\n   * @param id identifier of the upkeep to check\r\n   * @param from the address to simulate performing the upkeep from\r\n   */\r\n  function checkUpkeep(\r\n    uint256 id,\r\n    address from\r\n  )\r\n    external\r\n    override\r\n    cannotExecute()\r\n    returns (\r\n      bytes memory performData,\r\n      uint256 maxLinkPayment,\r\n      uint256 gasLimit,\r\n      int256 gasWei,\r\n      int256 linkEth\r\n    )\r\n  {\r\n    Upkeep storage upkeep = s_upkeep[id];\r\n    gasLimit = upkeep.executeGas;\r\n    (gasWei, linkEth) = getFeedData();\r\n    maxLinkPayment = calculatePaymentAmount(gasLimit, gasWei, linkEth);\r\n    require(maxLinkPayment < upkeep.balance, \"insufficient funds\");\r\n\r\n    bytes memory callData = abi.encodeWithSelector(CHECK_SELECTOR, s_checkData[id]);\r\n    (\r\n      bool success,\r\n      bytes memory result\r\n    ) = upkeep.target.call{gas: s_config.checkGasLimit}(callData);\r\n    require(success, \"call to check target failed\");\r\n\r\n    (\r\n      success,\r\n      performData\r\n    ) = abi.decode(result, (bool, bytes));\r\n    require(success, \"upkeep not needed\");\r\n\r\n    success = performUpkeepWithParams(PerformParams({\r\n      from: from,\r\n      id: id,\r\n      performData: performData\r\n    }));\r\n    require(success, \"call to perform upkeep failed\");\r\n\r\n    return (performData, maxLinkPayment, gasLimit, gasWei, linkEth);\r\n  }\r\n\r\n  /**\r\n   * @notice executes the upkeep with the perform data returned from\r\n   * checkUpkeep, validates the keeper's permissions, and pays the keeper.\r\n   * @param id identifier of the upkeep to execute the data with.\r\n   * @param performData calldata paramter to be passed to the target upkeep.\r\n   */\r\n  function performUpkeep(\r\n    uint256 id,\r\n    bytes calldata performData\r\n  )\r\n    external\r\n    override\r\n    returns (\r\n      bool success\r\n    )\r\n  {\r\n    return performUpkeepWithParams(PerformParams({\r\n      from: msg.sender,\r\n      id: id,\r\n      performData: performData\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * @notice prevent an upkeep from being performed in the future\r\n   * @param id upkeep to be canceled\r\n   */\r\n  function cancelUpkeep(\r\n    uint256 id\r\n  )\r\n    external\r\n    override\r\n  {\r\n    uint64 maxValid = s_upkeep[id].maxValidBlocknumber;\r\n    bool notCanceled = maxValid == UINT64_MAX;\r\n    bool isOwner = msg.sender == owner;\r\n    require(notCanceled || (isOwner && maxValid > block.number), \"too late to cancel upkeep\");\r\n    require(isOwner|| msg.sender == s_upkeep[id].admin, \"only owner or admin\");\r\n\r\n    uint256 height = block.number;\r\n    if (!isOwner) {\r\n      height = height.add(CANCELATION_DELAY);\r\n    }\r\n    s_upkeep[id].maxValidBlocknumber = uint64(height);\r\n    if (notCanceled) {\r\n      s_canceledUpkeepList.push(id);\r\n    }\r\n\r\n    emit UpkeepCanceled(id, uint64(height));\r\n  }\r\n\r\n  /**\r\n   * @notice adds LINK funding for an upkeep by tranferring from the sender's\r\n   * LINK balance\r\n   * @param id upkeep to fund\r\n   * @param amount number of LINK to transfer\r\n   */\r\n  function addFunds(\r\n    uint256 id,\r\n    uint96 amount\r\n  )\r\n    external\r\n    override\r\n    validUpkeep(id)\r\n  {\r\n    s_upkeep[id].balance = s_upkeep[id].balance.add(amount);\r\n    LINK.transferFrom(msg.sender, address(this), amount);\r\n    emit FundsAdded(id, msg.sender, amount);\r\n  }\r\n\r\n  /**\r\n   * @notice uses LINK's transferAndCall to LINK and add funding to an upkeep\r\n   * @dev safe to cast uint256 to uint96 as total LINK supply is under UINT96MAX\r\n   * @param sender the account which transferred the funds\r\n   * @param amount number of LINK transfer\r\n   */\r\n  function onTokenTransfer(\r\n    address sender,\r\n    uint256 amount,\r\n    bytes calldata data\r\n  )\r\n    external\r\n  {\r\n    require(msg.sender == address(LINK), \"only callable through LINK\");\r\n    require(data.length == 32, \"data must be 32 bytes\");\r\n    uint256 id = abi.decode(data, (uint256));\r\n    validateUpkeep(id);\r\n\r\n    s_upkeep[id].balance = s_upkeep[id].balance.add(uint96(amount));\r\n\r\n    emit FundsAdded(id, sender, uint96(amount));\r\n  }\r\n\r\n  /**\r\n   * @notice removes funding from a cancelled upkeep\r\n   * @param id upkeep to withdraw funds from\r\n   * @param to destination address for sending remaining funds\r\n   */\r\n  function withdrawFunds(\r\n    uint256 id,\r\n    address to\r\n  )\r\n    external\r\n    validateRecipient(to)\r\n  {\r\n    require(s_upkeep[id].admin == msg.sender, \"only callable by admin\");\r\n    require(s_upkeep[id].maxValidBlocknumber <= block.number, \"upkeep must be canceled\");\r\n\r\n    uint256 amount = s_upkeep[id].balance;\r\n    s_upkeep[id].balance = 0;\r\n    emit FundsWithdrawn(id, amount, to);\r\n\r\n    LINK.transfer(to, amount);\r\n  }\r\n\r\n  /**\r\n   * @notice recovers LINK funds improperly transfered to the registry\r\n   * @dev In principle this function’s execution cost could exceed block\r\n   * gaslimit. However, in our anticipated deployment, the number of upkeeps and\r\n   * keepers will be low enough to avoid this problem.\r\n   */\r\n  function recoverFunds()\r\n    external\r\n    onlyOwner()\r\n  {\r\n    uint96 locked = 0;\r\n    uint256 max = s_upkeepCount;\r\n    for (uint256 i = 0; i < max; i++) {\r\n      locked = s_upkeep[i].balance.add(locked);\r\n    }\r\n    max = s_keeperList.length;\r\n    for (uint256 i = 0; i < max; i++) {\r\n      address addr = s_keeperList[i];\r\n      locked = s_keeperInfo[addr].balance.add(locked);\r\n    }\r\n\r\n    uint256 total = LINK.balanceOf(address(this));\r\n    LINK.transfer(msg.sender, total.sub(locked));\r\n  }\r\n\r\n  /**\r\n   * @notice withdraws a keeper's payment, callable only by the keeper's payee\r\n   * @param from keeper address\r\n   * @param to address to send the payment to\r\n   */\r\n  function withdrawPayment(\r\n    address from,\r\n    address to\r\n  )\r\n    external\r\n    validateRecipient(to)\r\n  {\r\n    KeeperInfo memory keeper = s_keeperInfo[from];\r\n    require(keeper.payee == msg.sender, \"only callable by payee\");\r\n\r\n    s_keeperInfo[from].balance = 0;\r\n    emit PaymentWithdrawn(from, keeper.balance, to, msg.sender);\r\n\r\n    LINK.transfer(to, keeper.balance);\r\n  }\r\n\r\n  /**\r\n   * @notice proposes the safe transfer of a keeper's payee to another address\r\n   * @param keeper address of the keeper to transfer payee role\r\n   * @param proposed address to nominate for next payeeship\r\n   */\r\n  function transferPayeeship(\r\n    address keeper,\r\n    address proposed\r\n  )\r\n    external\r\n  {\r\n    require(s_keeperInfo[keeper].payee == msg.sender, \"only callable by payee\");\r\n    require(proposed != msg.sender, \"cannot transfer to self\");\r\n\r\n    if (s_proposedPayee[keeper] != proposed) {\r\n      s_proposedPayee[keeper] = proposed;\r\n      emit PayeeshipTransferRequested(keeper, msg.sender, proposed);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice accepts the safe transfer of payee role for a keeper\r\n   * @param keeper address to accept the payee role for\r\n   */\r\n  function acceptPayeeship(\r\n    address keeper\r\n  )\r\n    external\r\n  {\r\n    require(s_proposedPayee[keeper] == msg.sender, \"only callable by proposed payee\");\r\n    address past = s_keeperInfo[keeper].payee;\r\n    s_keeperInfo[keeper].payee = msg.sender;\r\n    s_proposedPayee[keeper] = ZERO_ADDRESS;\r\n\r\n    emit PayeeshipTransferred(keeper, past, msg.sender);\r\n  }\r\n\r\n\r\n  // SETTERS\r\n\r\n  /**\r\n   * @notice updates the configuration of the registry\r\n   * @param paymentPremiumPPB payment premium rate oracles receive on top of\r\n   * being reimbursed for gas, measured in parts per billion\r\n   * @param blockCountPerTurn number of blocks an oracle should wait before\r\n   * checking for upkeep\r\n   * @param checkGasLimit gas limit when checking for upkeep\r\n   * @param stalenessSeconds number of seconds that is allowed for feed data to\r\n   * be stale before switching to the fallback pricing\r\n   * @param fallbackGasPrice gas price used if the gas price feed is stale\r\n   * @param fallbackLinkPrice LINK price used if the LINK price feed is stale\r\n   */\r\n  function setConfig(\r\n    uint32 paymentPremiumPPB,\r\n    uint24 blockCountPerTurn,\r\n    uint32 checkGasLimit,\r\n    uint24 stalenessSeconds,\r\n    int256 fallbackGasPrice,\r\n    int256 fallbackLinkPrice\r\n  )\r\n    onlyOwner()\r\n    public\r\n  {\r\n    s_config = Config({\r\n      paymentPremiumPPB: paymentPremiumPPB,\r\n      blockCountPerTurn: blockCountPerTurn,\r\n      checkGasLimit: checkGasLimit,\r\n      stalenessSeconds: stalenessSeconds\r\n    });\r\n    s_fallbackGasPrice = fallbackGasPrice;\r\n    s_fallbackLinkPrice = fallbackLinkPrice;\r\n\r\n    emit ConfigSet(\r\n      paymentPremiumPPB,\r\n      blockCountPerTurn,\r\n      checkGasLimit,\r\n      stalenessSeconds,\r\n      fallbackGasPrice,\r\n      fallbackLinkPrice\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice update the list of keepers allowed to peform upkeep\r\n   * @param keepers list of addresses allowed to perform upkeep\r\n   * @param payees addreses corresponding to keepers who are allowed to\r\n   * move payments which have been acrued\r\n   */\r\n  function setKeepers(\r\n    address[] calldata keepers,\r\n    address[] calldata payees\r\n  )\r\n    external\r\n    onlyOwner()\r\n  {\r\n    for (uint256 i = 0; i < s_keeperList.length; i++) {\r\n      address keeper = s_keeperList[i];\r\n      s_keeperInfo[keeper].active = false;\r\n    }\r\n    for (uint256 i = 0; i < keepers.length; i++) {\r\n      address keeper = keepers[i];\r\n      KeeperInfo storage s_keeper = s_keeperInfo[keeper];\r\n      address oldPayee = s_keeper.payee;\r\n      address newPayee = payees[i];\r\n      require(oldPayee == ZERO_ADDRESS || oldPayee == newPayee, \"cannot change payee\");\r\n      require(!s_keeper.active, \"cannot add keeper twice\");\r\n      s_keeper.payee = newPayee;\r\n      s_keeper.active = true;\r\n    }\r\n    s_keeperList = keepers;\r\n    emit KeepersUpdated(keepers, payees);\r\n  }\r\n\r\n\r\n  // GETTERS\r\n\r\n  /**\r\n   * @notice read all of the details about an upkeep\r\n   */\r\n  function getUpkeep(\r\n    uint256 id\r\n  )\r\n    external\r\n    view\r\n    override\r\n    returns (\r\n      address target,\r\n      uint32 executeGas,\r\n      bytes memory checkData,\r\n      uint96 balance,\r\n      address lastKeeper,\r\n      address admin,\r\n      uint64 maxValidBlocknumber\r\n    )\r\n  {\r\n    Upkeep memory reg = s_upkeep[id];\r\n    return (\r\n      reg.target,\r\n      reg.executeGas,\r\n      s_checkData[id],\r\n      reg.balance,\r\n      reg.lastKeeper,\r\n      reg.admin,\r\n      reg.maxValidBlocknumber\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice read the total number of upkeep's registered\r\n   */\r\n  function getUpkeepCount()\r\n    external\r\n    view\r\n    override\r\n    returns (\r\n      uint256\r\n    )\r\n  {\r\n    return s_upkeepCount;\r\n  }\r\n\r\n  /**\r\n   * @notice read the current list canceled upkeep IDs\r\n   */\r\n  function getCanceledUpkeepList()\r\n    external\r\n    view\r\n    override\r\n    returns (\r\n      uint256[] memory\r\n    )\r\n  {\r\n    return s_canceledUpkeepList;\r\n  }\r\n\r\n  /**\r\n   * @notice read the current list of addresses allowed to perform upkeep\r\n   */\r\n  function getKeeperList()\r\n    external\r\n    view\r\n    override\r\n    returns (\r\n      address[] memory\r\n    )\r\n  {\r\n    return s_keeperList;\r\n  }\r\n\r\n  /**\r\n   * @notice read the current info about any keeper address\r\n   */\r\n  function getKeeperInfo(\r\n    address query\r\n  )\r\n    external\r\n    view\r\n    override\r\n    returns (\r\n      address payee,\r\n      bool active,\r\n      uint96 balance\r\n    )\r\n  {\r\n    KeeperInfo memory keeper = s_keeperInfo[query];\r\n    return (keeper.payee, keeper.active, keeper.balance);\r\n  }\r\n\r\n  /**\r\n   * @notice read the current configuration of the registry\r\n   */\r\n  function getConfig()\r\n    external\r\n    view\r\n    override\r\n    returns (\r\n      uint32 paymentPremiumPPB,\r\n      uint24 blockCountPerTurn,\r\n      uint32 checkGasLimit,\r\n      uint24 stalenessSeconds,\r\n      int256 fallbackGasPrice,\r\n      int256 fallbackLinkPrice\r\n    )\r\n  {\r\n    Config memory config = s_config;\r\n    return (\r\n      config.paymentPremiumPPB,\r\n      config.blockCountPerTurn,\r\n      config.checkGasLimit,\r\n      config.stalenessSeconds,\r\n      s_fallbackGasPrice,\r\n      s_fallbackLinkPrice\r\n    );\r\n  }\r\n\r\n\r\n  // PRIVATE\r\n\r\n  /**\r\n   * @dev retrieves feed data for fast gas/eth and link/eth prices. if the feed\r\n   * data is stale it uses the configured fallback price. Once a price is picked\r\n   * for gas it takes the min of gas price in the transaction or the fast gas\r\n   * price in order to reduce costs for the upkeep clients.\r\n   */\r\n  function getFeedData()\r\n    private\r\n    view\r\n    returns (\r\n      int256 gasWei,\r\n      int256 linkEth\r\n    )\r\n  {\r\n    uint32 stalenessSeconds = s_config.stalenessSeconds;\r\n    bool staleFallback = stalenessSeconds > 0;\r\n    uint256 timestamp;\r\n    (,gasWei,,timestamp,) = FAST_GAS_FEED.latestRoundData();\r\n    if (staleFallback && stalenessSeconds < block.timestamp - timestamp) {\r\n      gasWei = s_fallbackGasPrice;\r\n    }\r\n    (,linkEth,,timestamp,) = LINK_ETH_FEED.latestRoundData();\r\n    if (staleFallback && stalenessSeconds < block.timestamp - timestamp) {\r\n      linkEth = s_fallbackLinkPrice;\r\n    }\r\n    return (gasWei, linkEth);\r\n  }\r\n\r\n  /**\r\n   * @dev calculates LINK paid for gas spent plus a configure premium percentage\r\n   */\r\n  function calculatePaymentAmount(\r\n    uint256 gasLimit,\r\n    int256 gasWei,\r\n    int256 linkEth\r\n  )\r\n    private\r\n    view\r\n    returns (\r\n      uint96 payment\r\n    )\r\n  {\r\n    uint256 weiForGas = uint256(gasWei).mul(gasLimit.add(REGISTRY_GAS_OVERHEAD));\r\n    uint256 premium = PPB_BASE.add(s_config.paymentPremiumPPB);\r\n    uint256 total = weiForGas.mul(1e9).mul(premium).div(uint256(linkEth));\r\n    require(total <= LINK_TOTAL_SUPPLY, \"payment greater than all LINK\");\r\n    return uint96(total); // LINK_TOTAL_SUPPLY < UINT96_MAX\r\n  }\r\n\r\n  /**\r\n   * @dev calls target address with exactly gasAmount gas and data as calldata\r\n   * or reverts if at least gasAmount gas is not available\r\n   */\r\n  function callWithExactGas(\r\n    uint256 gasAmount,\r\n    address target,\r\n    bytes memory data\r\n  )\r\n    private\r\n    returns (\r\n      bool success\r\n    )\r\n  {\r\n    assembly{\r\n      let g := gas()\r\n      // Compute g -= CUSHION and check for underflow\r\n      if lt(g, CUSHION) { revert(0, 0) }\r\n      g := sub(g, CUSHION)\r\n      // if g - g//64 <= gasAmount, revert\r\n      // (we subtract g//64 because of EIP-150)\r\n      if iszero(gt(sub(g, div(g, 64)), gasAmount)) { revert(0, 0) }\r\n      // solidity calls check that a contract actually exists at the destination, so we do the same\r\n      if iszero(extcodesize(target)) { revert(0, 0) }\r\n      // call and return whether we succeeded. ignore return data\r\n      success := call(gasAmount, target, 0, add(data, 0x20), mload(data), 0, 0)\r\n    }\r\n    return success;\r\n  }\r\n\r\n  /**\r\n   * @dev calls the Upkeep target with the performData param passed in by the\r\n   * keeper and the exact gas required by the Upkeep\r\n   */\r\n  function performUpkeepWithParams(\r\n    PerformParams memory params\r\n  )\r\n    private\r\n    nonReentrant()\r\n    validUpkeep(params.id)\r\n    returns (\r\n      bool success\r\n    )\r\n  {\r\n    require(s_keeperInfo[params.from].active, \"only active keepers\");\r\n    Upkeep memory upkeep = s_upkeep[params.id];\r\n    uint256 gasLimit = upkeep.executeGas;\r\n    (int256 gasWei, int256 linkEth) = getFeedData();\r\n    if (gasWei > int256(tx.gasprice)) {\r\n      gasWei = int256(tx.gasprice);\r\n    }\r\n    uint96 payment = calculatePaymentAmount(gasLimit, gasWei, linkEth);\r\n    require(upkeep.balance >= payment, \"insufficient payment\");\r\n    require(upkeep.lastKeeper != params.from, \"keepers must take turns\");\r\n\r\n    uint256  gasUsed = gasleft();\r\n    bytes memory callData = abi.encodeWithSelector(PERFORM_SELECTOR, params.performData);\r\n    success = callWithExactGas(gasLimit, upkeep.target, callData);\r\n    gasUsed = gasUsed - gasleft();\r\n\r\n    payment = calculatePaymentAmount(gasUsed, gasWei, linkEth);\r\n    upkeep.balance = upkeep.balance.sub(payment);\r\n    upkeep.lastKeeper = params.from;\r\n    s_upkeep[params.id] = upkeep;\r\n    uint96 newBalance = s_keeperInfo[params.from].balance.add(payment);\r\n    s_keeperInfo[params.from].balance = newBalance;\r\n\r\n    emit UpkeepPerformed(\r\n      params.id,\r\n      success,\r\n      params.from,\r\n      payment,\r\n      params.performData\r\n    );\r\n    return success;\r\n  }\r\n\r\n  /**\r\n   * @dev ensures a upkeep is valid\r\n   */\r\n  function validateUpkeep(\r\n    uint256 id\r\n  )\r\n    private\r\n    view\r\n  {\r\n    require(s_upkeep[id].maxValidBlocknumber > block.number, \"invalid upkeep id\");\r\n  }\r\n\r\n\r\n  // MODIFIERS\r\n\r\n  /**\r\n   * @dev ensures a upkeep is valid\r\n   */\r\n  modifier validUpkeep(\r\n    uint256 id\r\n  ) {\r\n    validateUpkeep(id);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev ensures that burns don't accidentally happen by sending to the zero\r\n   * address\r\n   */\r\n  modifier validateRecipient(\r\n    address to\r\n  ) {\r\n    require(to != address(0), \"cannot send to zero address\");\r\n    _;\r\n  }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"link\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"linkEthFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fastGasFeed\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"paymentPremiumPPB\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"blockCountPerTurn\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"checkGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"stalenessSeconds\",\"type\":\"uint24\"},{\"internalType\":\"int256\",\"name\":\"fallbackGasPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"fallbackLinkPrice\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"paymentPremiumPPB\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"blockCountPerTurn\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"checkGasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"stalenessSeconds\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fallbackGasPrice\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fallbackLinkPrice\",\"type\":\"int256\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"FundsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"keepers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"}],\"name\":\"KeepersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"PayeeshipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"PayeeshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"PaymentWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"atBlockHeight\",\"type\":\"uint64\"}],\"name\":\"UpkeepCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"payment\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"UpkeepPerformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"executeGas\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"UpkeepRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FAST_GAS_FEED\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LINK\",\"outputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LINK_ETH_FEED\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"acceptPayeeship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"addFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cancelUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"maxLinkPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"gasWei\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"linkEth\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCanceledUpkeepList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"paymentPremiumPPB\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"blockCountPerTurn\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"checkGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"stalenessSeconds\",\"type\":\"uint24\"},{\"internalType\":\"int256\",\"name\":\"fallbackGasPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"fallbackLinkPrice\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"query\",\"type\":\"address\"}],\"name\":\"getKeeperInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKeeperList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getUpkeep\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"executeGas\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"},{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"lastKeeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"maxValidBlocknumber\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUpkeepCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"registerUpkeep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"paymentPremiumPPB\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"blockCountPerTurn\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"checkGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"stalenessSeconds\",\"type\":\"uint24\"},{\"internalType\":\"int256\",\"name\":\"fallbackGasPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"fallbackLinkPrice\",\"type\":\"int256\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"keepers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"}],\"name\":\"setKeepers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposed\",\"type\":\"address\"}],\"name\":\"transferPayeeship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"KeeperRegistry","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"000000000000000000000000514910771af9ca656af840dff83e8264ecf986ca000000000000000000000000dc530d9457755926550b59e8eccdae7624181557000000000000000000000000169e633a2d1e6c10dd91238ba11c4a708dfef37c000000000000000000000000000000000000000000000000000000000bebc20000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000001312d00000000000000000000000000000000000000000000000000000000000000ab2c00000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000000000000000000000000000000000000bebc200","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8c0c2e852348e21082acacb50cfa335e17b21c47523d9034b739dff966432a8e"}]}