{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint256);\r\n}\r\n\r\ninterface IUniswapV3Pool {\r\n\r\n    function slot0()\r\n        external\r\n        view\r\n        returns (\r\n            uint160 sqrtPriceX96,\r\n            int24 tick,\r\n            uint16 observationIndex,\r\n            uint16 observationCardinality,\r\n            uint16 observationCardinalityNext,\r\n            uint8 feeProtocol,\r\n            bool unlocked\r\n        );\r\n\r\n}\r\n\r\ninterface IGUniPool {\r\n    function token0() external view returns (IERC20);\r\n\r\n    function token1() external view returns (IERC20);\r\n\r\n    function pool() external view returns (IUniswapV3Pool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function getMintAmounts(uint256 amount0Max, uint256 amount1Max)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 amount0,\r\n            uint256 amount1,\r\n            uint256 mintAmount\r\n        );\r\n\r\n    function getPositionID() external view returns (bytes32 positionID);\r\n\r\n    function lowerTick() external view returns (int24);\r\n\r\n    function upperTick() external view returns (int24);\r\n\r\n\r\n}\r\n\r\ninterface GUniResolver {\r\n\r\n    function getPoolUnderlyingBalances(IGUniPool pool)\r\n        external\r\n        view\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function getUnderlyingBalances(\r\n        IGUniPool pool,\r\n        uint256 balance\r\n    ) external view returns (uint256 amount0, uint256 amount1);\r\n\r\n    function getRebalanceParams(\r\n        IGUniPool pool,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint16 slippageBPS\r\n    ) external view returns (\r\n        bool zeroForOne,\r\n        uint256 swapAmount,\r\n        uint160 swapThreshold\r\n    );\r\n\r\n}\r\n\r\nstruct StakingRewardsInfo {\r\n    address stakingRewards;\r\n    uint rewardAmount;\r\n}\r\ninterface StakingFactoryInterface {\r\n\r\n    function stakingRewardsInfoByStakingToken(address) external view returns(StakingRewardsInfo memory);\r\n\r\n}\r\n\r\ninterface StakingInterface {\r\n    function totalSupply() external view returns (uint256);\r\n    function rewardRate() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function earned(address account) external view returns (uint256);\r\n    function rewardPerToken() external view returns (uint256);\r\n}\r\n\r\ninterface IndexInterface {\r\n    function master() external view returns (address);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n}\r\n\r\ncontract Helpers is DSMath {\r\n\r\n    GUniResolver public constant gelatoRouter = GUniResolver(0x3B01f3534c9505fE8e7cf42794a545A0d2ede976);\r\n    StakingFactoryInterface public getStakingFactory;\r\n\r\n    function updateFactory(address _stakingFactory) public {\r\n        require(msg.sender == IndexInterface(0x2971AdFa57b20E5a416aE5a708A8655A9c74f723).master(), \"not-master\");\r\n        require(address(getStakingFactory) != _stakingFactory, \"already-enabled\");\r\n        getStakingFactory = StakingFactoryInterface(_stakingFactory);\r\n    }\r\n\r\n    struct UserData {\r\n        address pool; // address of pool contract\r\n        address staking; // address of staking contract\r\n        address token0Addr; // address of token 0\r\n        address token1Addr; // address of token 1\r\n        uint poolTokenSupply; // Total supply of Pool token\r\n        uint poolToken0Bal; // balance of total pool for token0\r\n        uint poolToken1Bal; // balance of total pool for token1\r\n        uint poolTokenSupplyStaked; // total pool token locked in staking contract\r\n        uint stakingToken0Bal; // total balance of token0 in Staking\r\n        uint stakingToken1Bal; // total balance of token1 in Staking\r\n        uint rewardRate; // INST distributing per second\r\n        uint token0Bal; // balance of token 0 of user\r\n        uint token1Bal; // balance of token 1 of user\r\n        uint earned; // INST earned from staking\r\n        uint stakedBal; // user's pool token bal in staking contract\r\n        uint poolBal; // ideal pool token in user's DSA\r\n        uint totalBal; // stakedBal + poolTknBal\r\n        uint token0Decimals; // token0 decimals\r\n        uint token1Decimals; // token1 decimals\r\n        int24 currentTick; // Current price of 1 token w.r.t to other\r\n        int24 lowerTick; // Price of 1 token w.r.t to other at lower tick\r\n        int24 upperTick; // Price of 1 token w.r.t to other at upper tick\r\n    }\r\n\r\n}\r\n\r\ncontract Resolver is Helpers {\r\n\r\n    function getSinglePosition(address user, address pool) public view returns(UserData memory _data) {\r\n        _data.pool = pool;\r\n        StakingInterface stakingContract = StakingInterface(getStakingFactory.stakingRewardsInfoByStakingToken(pool).stakingRewards);\r\n        _data.staking = address(stakingContract);\r\n        IGUniPool poolContract = IGUniPool(pool);\r\n        _data.token0Addr = address(poolContract.token0());\r\n        _data.token1Addr = address(poolContract.token1());\r\n        if (_data.staking == address(0)) {\r\n            _data.earned = 0;\r\n            _data.stakedBal = 0;\r\n        } else {\r\n            _data.earned = stakingContract.earned(user);\r\n            _data.stakedBal = stakingContract.balanceOf(user);\r\n        }\r\n        _data.poolBal = poolContract.balanceOf(user);\r\n        _data.totalBal = add(_data.stakedBal, _data.poolBal);\r\n        (_data.token0Bal, _data.token1Bal) = gelatoRouter.getUnderlyingBalances(poolContract, _data.totalBal);\r\n        _data.poolTokenSupply = poolContract.balanceOf(user);\r\n        (_data.poolToken0Bal, _data.poolToken1Bal) = gelatoRouter.getPoolUnderlyingBalances(poolContract);\r\n        _data.poolTokenSupplyStaked = stakingContract.totalSupply();\r\n        (_data.stakingToken0Bal, _data.stakingToken1Bal) = gelatoRouter.getUnderlyingBalances(poolContract, _data.poolTokenSupplyStaked);\r\n        _data.rewardRate = stakingContract.rewardRate();\r\n\r\n        _data.token0Decimals = poolContract.token0().decimals();\r\n        _data.token1Decimals = poolContract.token1().decimals();\r\n\r\n        IUniswapV3Pool uniNft = poolContract.pool();\r\n        (, _data.currentTick, , , , , ) = uniNft.slot0();\r\n        _data.lowerTick = poolContract.lowerTick();\r\n        _data.upperTick = poolContract.upperTick();\r\n    }\r\n\r\n    function getPosition(address user, address[] memory pools) public view returns(UserData[] memory _data) {\r\n        _data = new UserData[](pools.length);\r\n        for (uint i = 0; i < pools.length; i++) {\r\n            _data[i] = getSinglePosition(user, pools[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @param pool - gelato pool address.\r\n    * @param amount0In - amount of token0 user wants to deposit.\r\n    * @param amount1In - amount of token1 user wants to deposit.\r\n    * @param slippage in 18 decimal where 100% = 1e18.\r\n    * @return zeroForOne - if true swap token0 for token1 else vice versa\r\n    * @return swapAmount - Amount of tokens to swap.\r\n    * @return swapThreshold - Max slippage that the swap can take.\r\n    */\r\n    function getSwapAndDepositParams(\r\n        address pool, \r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint slippage\r\n    ) public view returns (\r\n        bool zeroForOne,\r\n        uint256 swapAmount,\r\n        uint160 swapThreshold\r\n    ) {\r\n        uint slippageBPS = slippage / 1e16;\r\n        (zeroForOne, swapAmount, swapThreshold) = gelatoRouter.getRebalanceParams(IGUniPool(pool), amount0In, amount1In, uint16(slippageBPS));\r\n    }\r\n\r\n    /**\r\n     * @param user - address of user.\r\n     * @param pool - address of Gelato Pool.\r\n     * @param burnPercent - in 18 decimal where 100% = 1e18.\r\n     * @param slippage in 18 decimal where 100% = 1e18.\r\n     * @return burnAmt - Amount of pool tokens to burn.\r\n     * @return amount0 - Amount of token0 user will get.\r\n     * @return amount1 - Amount of token1 user will get.\r\n     * @return amount0Min - Min amount of token0 user should get.\r\n     * @return amount1Min - Min amount of token1 user should get.\r\n    */\r\n    function getWithdrawParams(address user, address pool, uint burnPercent, uint slippage) public view returns (uint burnAmt, uint amount0, uint amount1, uint amount0Min, uint amount1Min) {\r\n        UserData memory _data = getSinglePosition(user, pool);\r\n        burnPercent = burnPercent > 1e18 ? 1e18 : burnPercent;\r\n        burnAmt = wmul(_data.totalBal, burnPercent);\r\n        amount0 = wmul(_data.token0Bal, burnPercent);\r\n        amount1 = wmul(_data.token1Bal, burnPercent);\r\n        amount0Min = wmul(amount0, sub(1e18, slippage));\r\n        amount1Min = wmul(amount1, sub(1e18, slippage));\r\n    }\r\n\r\n}\r\n\r\ncontract InstaGUNIV3PoolResolver is Resolver {\r\n\r\n    constructor (address _stakingFactory) public {\r\n        getStakingFactory = StakingFactoryInterface(_stakingFactory);\r\n    }\r\n\r\n\r\n    string public constant name = \"G-UNI-V3-Resolver-v1.0\";\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"gelatoRouter\",\"outputs\":[{\"internalType\":\"contract GUniResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolToken0Bal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolToken1Bal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenSupplyStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingToken0Bal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingToken1Bal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0Bal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Bal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0Decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Decimals\",\"type\":\"uint256\"},{\"internalType\":\"int24\",\"name\":\"currentTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperTick\",\"type\":\"int24\"}],\"internalType\":\"struct Helpers.UserData[]\",\"name\":\"_data\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getSinglePosition\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolToken0Bal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolToken1Bal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenSupplyStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingToken0Bal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingToken1Bal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0Bal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Bal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0Decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Decimals\",\"type\":\"uint256\"},{\"internalType\":\"int24\",\"name\":\"currentTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperTick\",\"type\":\"int24\"}],\"internalType\":\"struct Helpers.UserData\",\"name\":\"_data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingFactory\",\"outputs\":[{\"internalType\":\"contract StakingFactoryInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"getSwapAndDepositParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"swapThreshold\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burnPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"getWithdrawParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingFactory\",\"type\":\"address\"}],\"name\":\"updateFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"InstaGUNIV3PoolResolver","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000fd3a7db79f31a3acf47951dc3e61155c1ec4e3b4","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9168969e7b24daba68512ffe8beed976326bc812cafa7d64f808dcbbdb092b3e"}]}