{"status":"1","message":"OK","result":[{"SourceCode":"// This is just a experimental contract called RoundByRound (♻)\r\n// =============================================================\r\n// * There are 16 tokens that are being sold in circulations\r\n// * all tokens has the same price (begin with 300 wei)\r\n// * A token can be bought, but not sold or transferred\r\n// * Every time 16 tokens have been sold, a new round begins\r\n// * At the beginning of each round, the price of all tokens increases\r\n//\r\n// What happens with Token 0 at Round 1 ? Token 0 has already a holder?!\r\n// * The current owner of Token 0 will receive 2/3 of the current price and the token will be transferred to the new holder\r\n// * Example: Token 0 was bought at Round 0 for 300wei. The next Round (1) will increase the price to 900wei\r\n// *          Once Token 0 got sold the current owner receive 600wei. (+100%)\r\n//\r\n// So u telling me by just put my ETH into this experiment i will get 100% of my invest back when my token is sold?\r\n// * YES, well... no :D You can only invest the value which was given by the current price function... but yes :)\r\n// * Round 0 starts with  300 wei which are 0,0000000000000003 ETH\r\n// * Round 1 starts with  900 wei which are 0,0000000000000009 ETH\r\n// * Round 2 starts with 2700 wei which are 0,0000000000000027 ETH ...\r\n//\r\n// Are there events out ?\r\n// * Yes, there are 3 events fired, \"Transfer\", \"NewRound\", \"Reward\"\r\n//\r\n// Sound strange, where is the source code ?\r\n// * Checkout Etherscan, contract tab. The whole contract is published!\r\n//\r\n// Ookay u got me, how can i play these stupid game ?\r\n// * there is no interface available, you need a little bit of knowledge.\r\n// * Contract: 0xFa8F0150A53A7a3BC2470a04A208536D129DeFa6\r\n// * Open the Read Contract tab: https://etherscan.io/address/0xFa8F0150A53A7a3BC2470a04A208536D129DeFa6#readContract\r\n// * Get the current Price\r\n// * Open the Write Contract tab: https://etherscan.io/address/0xFa8F0150A53A7a3BC2470a04A208536D129DeFa6#writeContract\r\n// * Call buyIndex with the correct price value.\r\n// * thats it, now just wait until your token is sold again :)\r\n\r\n\r\npragma solidity >=0.4.25 <0.7.0;\r\n\r\ncontract MetaCoin {\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint8 public decimals;\r\n\tuint256 public totalSupply;\r\n\tuint256 public price = 300;  // Round 0 start at 300 wei\r\n\tuint256 public round = 0;\r\n\tuint256 public currentIndex = 0;\r\n\r\n\taddress payable private owner;\r\n\r\n\tmapping (uint => address payable) index2Address;\r\n\tmapping (address => uint) address2Index;\r\n\r\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _pixelId);\r\n\tevent NewRound( uint256 _price, uint256 _roundNumber);\r\n\tevent Reward(address indexed _to, uint256 _value);\r\n\r\n\tconstructor() public {\r\n\t\towner = msg.sender;\r\n\t\tname = \"RoundByRound\";\r\n\t\tsymbol = \"♻\";\r\n\t\tdecimals = 0;\r\n\t\ttotalSupply = 15;\r\n\t}\r\n\r\n\tfunction buyIndex() public payable {\r\n\t\trequire(msg.value >= price, \"price invalid\");\r\n\r\n\t\taddress payable _holder = index2Address[currentIndex];\r\n\r\n\t\tif (_holder != address(0x0)){\r\n\t\t\tuint _reward = (price / 3) * 2;\r\n\t\t\t_holder.transfer(_reward);\t//send the current owner 2/3 of the value\r\n\t\t\temit Reward(_holder, _reward);\r\n\t\t}\r\n\r\n\t\temit Transfer(_holder, msg.sender, 1);\r\n\r\n\t\taddress2Index[msg.sender] = currentIndex;\r\n\t\tindex2Address[currentIndex] = msg.sender;\r\n\r\n\t\t//next round starts!\r\n\t\tif(currentIndex == totalSupply){\r\n\t\t\tcurrentIndex = 0;\r\n\t\t\tround++;\r\n\t\t\tprice = price * 3;\t\t\t\t\t//new round, new price\r\n\r\n\t\t\temit NewRound(price, round);\r\n\t\t}else{\r\n\t\t\tcurrentIndex++;\t\t\t\t\t\t//increase index\r\n\t\t}\r\n\t}\r\n\r\n\tfunction ownerOf(uint id) public view returns( address ) { return index2Address[id]; }\r\n\r\n\tfunction withdraw(uint256 _amount) public {\r\n\t\trequire(msg.sender == owner);\r\n\t\tmsg.sender.transfer(_amount);\r\n\t}\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_roundNumber\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pixelId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyIndex\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MetaCoin","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://9df616a42d4d8798e3608fb2c1f0b61facfcb96a970d7e734082e0530e1aa084"}]}