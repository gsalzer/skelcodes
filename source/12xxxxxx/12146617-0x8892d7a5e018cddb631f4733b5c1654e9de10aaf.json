{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.8.2;\r\n\r\n\r\nabstract contract IERC20WithCheckpointing {\r\n    function balanceOf(address _owner) public view virtual returns (uint256);\r\n\r\n    function balanceOfAt(address _owner, uint256 _blockNumber)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256);\r\n\r\n    function totalSupply() public view virtual returns (uint256);\r\n\r\n    function totalSupplyAt(uint256 _blockNumber) public view virtual returns (uint256);\r\n}\r\n\r\nabstract contract IIncentivisedVotingLockup is IERC20WithCheckpointing {\r\n    function getLastUserPoint(address _addr)\r\n        external\r\n        view\r\n        virtual\r\n        returns (\r\n            int128 bias,\r\n            int128 slope,\r\n            uint256 ts\r\n        );\r\n\r\n    function createLock(uint256 _value, uint256 _unlockTime) external virtual;\r\n\r\n    function withdraw() external virtual;\r\n\r\n    function increaseLockAmount(uint256 _value) external virtual;\r\n\r\n    function increaseLockLength(uint256 _unlockTime) external virtual;\r\n\r\n    function eject(address _user) external virtual;\r\n\r\n    function expireContract() external virtual;\r\n\r\n    function claimReward() public virtual;\r\n\r\n    function earned(address _account) public view virtual returns (uint256);\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IBoostedVaultWithLockup {\r\n    /**\r\n     * @dev Stakes a given amount of the StakingToken for the sender\r\n     * @param _amount Units of StakingToken\r\n     */\r\n    function stake(uint256 _amount) external;\r\n\r\n    /**\r\n     * @dev Stakes a given amount of the StakingToken for a given beneficiary\r\n     * @param _beneficiary Staked tokens are credited to this address\r\n     * @param _amount      Units of StakingToken\r\n     */\r\n    function stake(address _beneficiary, uint256 _amount) external;\r\n\r\n    /**\r\n     * @dev Withdraws stake from pool and claims any unlocked rewards.\r\n     * Note, this function is costly - the args for _claimRewards\r\n     * should be determined off chain and then passed to other fn\r\n     */\r\n    function exit() external;\r\n\r\n    /**\r\n     * @dev Withdraws stake from pool and claims any unlocked rewards.\r\n     * @param _first    Index of the first array element to claim\r\n     * @param _last     Index of the last array element to claim\r\n     */\r\n    function exit(uint256 _first, uint256 _last) external;\r\n\r\n    /**\r\n     * @dev Withdraws given stake amount from the pool\r\n     * @param _amount Units of the staked token to withdraw\r\n     */\r\n    function withdraw(uint256 _amount) external;\r\n\r\n    /**\r\n     * @dev Claims only the tokens that have been immediately unlocked, not including\r\n     * those that are in the lockers.\r\n     */\r\n    function claimReward() external;\r\n\r\n    /**\r\n     * @dev Claims all unlocked rewards for sender.\r\n     * Note, this function is costly - the args for _claimRewards\r\n     * should be determined off chain and then passed to other fn\r\n     */\r\n    function claimRewards() external;\r\n\r\n    /**\r\n     * @dev Claims all unlocked rewards for sender. Both immediately unlocked\r\n     * rewards and also locked rewards past their time lock.\r\n     * @param _first    Index of the first array element to claim\r\n     * @param _last     Index of the last array element to claim\r\n     */\r\n    function claimRewards(uint256 _first, uint256 _last) external;\r\n\r\n    /**\r\n     * @dev Pokes a given account to reset the boost\r\n     */\r\n    function pokeBoost(address _account) external;\r\n\r\n    /**\r\n     * @dev Gets the last applicable timestamp for this reward period\r\n     */\r\n    function lastTimeRewardApplicable() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Calculates the amount of unclaimed rewards per token since last update,\r\n     * and sums with stored to give the new cumulative reward per token\r\n     * @return 'Reward' per staked token\r\n     */\r\n    function rewardPerToken() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returned the units of IMMEDIATELY claimable rewards a user has to receive. Note - this\r\n     * does NOT include the majority of rewards which will be locked up.\r\n     * @param _account User address\r\n     * @return Total reward amount earned\r\n     */\r\n    function earned(address _account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Calculates all unclaimed reward data, finding both immediately unlocked rewards\r\n     * and those that have passed their time lock.\r\n     * @param _account User address\r\n     * @return amount Total units of unclaimed rewards\r\n     * @return first Index of the first userReward that has unlocked\r\n     * @return last Index of the last userReward that has unlocked\r\n     */\r\n    function unclaimedRewards(address _account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 amount,\r\n            uint256 first,\r\n            uint256 last\r\n        );\r\n}\r\n\r\ninterface IBoostDirector {\r\n    function getBalance(address _user) external returns (uint256);\r\n\r\n    function setDirection(\r\n        address _old,\r\n        address _new,\r\n        bool _pokeNew\r\n    ) external;\r\n\r\n    function whitelistVaults(address[] calldata _vaults) external;\r\n}\r\n\r\ncontract ModuleKeys {\r\n    // Governance\r\n    // ===========\r\n    // keccak256(\"Governance\");\r\n    bytes32 internal constant KEY_GOVERNANCE =\r\n        0x9409903de1e6fd852dfc61c9dacb48196c48535b60e25abf92acc92dd689078d;\r\n    //keccak256(\"Staking\");\r\n    bytes32 internal constant KEY_STAKING =\r\n        0x1df41cd916959d1163dc8f0671a666ea8a3e434c13e40faef527133b5d167034;\r\n    //keccak256(\"ProxyAdmin\");\r\n    bytes32 internal constant KEY_PROXY_ADMIN =\r\n        0x96ed0203eb7e975a4cbcaa23951943fa35c5d8288117d50c12b3d48b0fab48d1;\r\n\r\n    // mStable\r\n    // =======\r\n    // keccak256(\"OracleHub\");\r\n    bytes32 internal constant KEY_ORACLE_HUB =\r\n        0x8ae3a082c61a7379e2280f3356a5131507d9829d222d853bfa7c9fe1200dd040;\r\n    // keccak256(\"Manager\");\r\n    bytes32 internal constant KEY_MANAGER =\r\n        0x6d439300980e333f0256d64be2c9f67e86f4493ce25f82498d6db7f4be3d9e6f;\r\n    //keccak256(\"Recollateraliser\");\r\n    bytes32 internal constant KEY_RECOLLATERALISER =\r\n        0x39e3ed1fc335ce346a8cbe3e64dd525cf22b37f1e2104a755e761c3c1eb4734f;\r\n    //keccak256(\"MetaToken\");\r\n    bytes32 internal constant KEY_META_TOKEN =\r\n        0xea7469b14936af748ee93c53b2fe510b9928edbdccac3963321efca7eb1a57a2;\r\n    // keccak256(\"SavingsManager\");\r\n    bytes32 internal constant KEY_SAVINGS_MANAGER =\r\n        0x12fe936c77a1e196473c4314f3bed8eeac1d757b319abb85bdda70df35511bf1;\r\n    // keccak256(\"Liquidator\");\r\n    bytes32 internal constant KEY_LIQUIDATOR =\r\n        0x1e9cb14d7560734a61fa5ff9273953e971ff3cd9283c03d8346e3264617933d4;\r\n    // keccak256(\"InterestValidator\");\r\n    bytes32 internal constant KEY_INTEREST_VALIDATOR =\r\n        0xc10a28f028c7f7282a03c90608e38a4a646e136e614e4b07d119280c5f7f839f;\r\n}\r\n\r\ninterface INexus {\r\n    function governor() external view returns (address);\r\n\r\n    function getModule(bytes32 key) external view returns (address);\r\n\r\n    function proposeModule(bytes32 _key, address _addr) external;\r\n\r\n    function cancelProposedModule(bytes32 _key) external;\r\n\r\n    function acceptProposedModule(bytes32 _key) external;\r\n\r\n    function acceptProposedModules(bytes32[] calldata _keys) external;\r\n\r\n    function requestLockModule(bytes32 _key) external;\r\n\r\n    function cancelLockModule(bytes32 _key) external;\r\n\r\n    function lockModule(bytes32 _key) external;\r\n}\r\n\r\nabstract contract ImmutableModule is ModuleKeys {\r\n    INexus public immutable nexus;\r\n\r\n    /**\r\n     * @dev Initialization function for upgradable proxy contracts\r\n     * @param _nexus Nexus contract address\r\n     */\r\n    constructor(address _nexus) {\r\n        require(_nexus != address(0), \"Nexus address is zero\");\r\n        nexus = INexus(_nexus);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Governor.\r\n     */\r\n    modifier onlyGovernor() {\r\n        _onlyGovernor();\r\n        _;\r\n    }\r\n\r\n    function _onlyGovernor() internal view {\r\n        require(msg.sender == _governor(), \"Only governor can execute\");\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Governance.\r\n     *      Governance is either Governor address or Governance address.\r\n     */\r\n    modifier onlyGovernance() {\r\n        require(\r\n            msg.sender == _governor() || msg.sender == _governance(),\r\n            \"Only governance can execute\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the ProxyAdmin.\r\n     */\r\n    modifier onlyProxyAdmin() {\r\n        require(msg.sender == _proxyAdmin(), \"Only ProxyAdmin can execute\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Manager.\r\n     */\r\n    modifier onlyManager() {\r\n        require(msg.sender == _manager(), \"Only manager can execute\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns Governor address from the Nexus\r\n     * @return Address of Governor Contract\r\n     */\r\n    function _governor() internal view returns (address) {\r\n        return nexus.governor();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns Governance Module address from the Nexus\r\n     * @return Address of the Governance (Phase 2)\r\n     */\r\n    function _governance() internal view returns (address) {\r\n        return nexus.getModule(KEY_GOVERNANCE);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Staking Module address from the Nexus\r\n     * @return Address of the Staking Module contract\r\n     */\r\n    function _staking() internal view returns (address) {\r\n        return nexus.getModule(KEY_STAKING);\r\n    }\r\n\r\n    /**\r\n     * @dev Return ProxyAdmin Module address from the Nexus\r\n     * @return Address of the ProxyAdmin Module contract\r\n     */\r\n    function _proxyAdmin() internal view returns (address) {\r\n        return nexus.getModule(KEY_PROXY_ADMIN);\r\n    }\r\n\r\n    /**\r\n     * @dev Return MetaToken Module address from the Nexus\r\n     * @return Address of the MetaToken Module contract\r\n     */\r\n    function _metaToken() internal view returns (address) {\r\n        return nexus.getModule(KEY_META_TOKEN);\r\n    }\r\n\r\n    /**\r\n     * @dev Return OracleHub Module address from the Nexus\r\n     * @return Address of the OracleHub Module contract\r\n     */\r\n    function _oracleHub() internal view returns (address) {\r\n        return nexus.getModule(KEY_ORACLE_HUB);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Manager Module address from the Nexus\r\n     * @return Address of the Manager Module contract\r\n     */\r\n    function _manager() internal view returns (address) {\r\n        return nexus.getModule(KEY_MANAGER);\r\n    }\r\n\r\n    /**\r\n     * @dev Return SavingsManager Module address from the Nexus\r\n     * @return Address of the SavingsManager Module contract\r\n     */\r\n    function _savingsManager() internal view returns (address) {\r\n        return nexus.getModule(KEY_SAVINGS_MANAGER);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Recollateraliser Module address from the Nexus\r\n     * @return  Address of the Recollateraliser Module contract (Phase 2)\r\n     */\r\n    function _recollateraliser() internal view returns (address) {\r\n        return nexus.getModule(KEY_RECOLLATERALISER);\r\n    }\r\n}\r\n\r\n\r\n// Internal\r\n/**\r\n * @title  BoostDirector\r\n * @author mStable\r\n * @notice Supports the directing of vMTA balance from Staking up to X accounts\r\n * @dev    Uses a bitmap to store the id's of a given users chosen vaults in a gas efficient manner.\r\n */\r\ncontract BoostDirector is IBoostDirector, ImmutableModule {\r\n\r\n    event Directed(address user, address boosted);\r\n    event RedirectedBoost(address user, address boosted, address replaced);\r\n    event Whitelisted(address vaultAddress, uint8 vaultId);\r\n\r\n    // Read the vMTA balance from here\r\n    IIncentivisedVotingLockup public immutable stakingContract;\r\n\r\n    // Whitelisted vaults set by governance (only these vaults can read balances)\r\n    uint8 private vaultCount;\r\n    // Vault address -> internal id for tracking\r\n    mapping(address => uint8) public _vaults;\r\n    // uint128 packed with up to 16 uint8's. Each uint is a vault ID\r\n    mapping(address => uint128) public _directedBitmap;\r\n\r\n\r\n    /***************************************\r\n                      ADMIN\r\n    ****************************************/\r\n\r\n    // Simple constructor\r\n    constructor(address _nexus, address _stakingContract) ImmutableModule(_nexus) {\r\n        stakingContract = IIncentivisedVotingLockup(_stakingContract);\r\n    }\r\n\r\n    /**\r\n     * @dev Initialize function - simply sets the initial array of whitelisted vaults\r\n     */\r\n    function initialize(address[] calldata _newVaults) external {\r\n        require(vaultCount == 0, \"Already initialized\");\r\n        _whitelistVaults(_newVaults);\r\n    }\r\n\r\n    /**\r\n     * @dev Whitelist vaults - only callable by governance. Whitelists vaults, unless they\r\n     * have already been whitelisted\r\n     */\r\n    function whitelistVaults(address[] calldata _newVaults) external override onlyGovernor {\r\n        _whitelistVaults(_newVaults);\r\n    }\r\n\r\n    /**\r\n     * @dev Takes an array of newVaults. For each, determines if it is already whitelisted.\r\n     * If not, then increment vaultCount and same the vault with new ID\r\n     */\r\n    function _whitelistVaults(address[] calldata _newVaults) internal {\r\n        uint256 len = _newVaults.length;\r\n        require(len > 0, \"Must be at least one vault\");\r\n        for (uint256 i = 0; i < len; i++) {\r\n            uint8 id = _vaults[_newVaults[i]];\r\n            require(id == 0, \"Vault already whitelisted\");\r\n\r\n            vaultCount += 1;\r\n            _vaults[_newVaults[i]] = vaultCount;\r\n\r\n            emit Whitelisted(_newVaults[i], vaultCount);\r\n        }\r\n    }\r\n\r\n\r\n    /***************************************\r\n                      Vault\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Gets the balance of a user that has been directed to the caller (a vault).\r\n     * If the user has not directed to this vault, or there are less than 3 directed,\r\n     * then add this to the list\r\n     * @param _user     Address of the user for which to get balance\r\n     * @return Directed balance\r\n     */\r\n    function getBalance(address _user) external override returns (uint256) {\r\n        // Get vault details\r\n        uint8 id = _vaults[msg.sender];\r\n        // If vault has not been whitelisted, just return zero\r\n        if(id == 0) return 0;\r\n\r\n        // Get existing bitmap and balance\r\n        uint128 bitmap = _directedBitmap[_user];\r\n        uint256 bal = stakingContract.balanceOf(_user);\r\n\r\n        (bool isWhitelisted, uint8 count, ) = _indexExists(bitmap, id);\r\n\r\n        if (isWhitelisted) return bal;\r\n\r\n        if (count < 3) {\r\n            _directedBitmap[_user] = _direct(bitmap, count, id);\r\n            emit Directed(_user, msg.sender);\r\n            return bal;\r\n        }\r\n\r\n        if (count >= 3) return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Directs rewards to a vault, and removes them from the old vault. Provided\r\n     * that old is active and the new vault is whitelisted.\r\n     * @param _old     Address of the old vault that will no longer get boosted\r\n     * @param _new     Address of the new vault that will get boosted\r\n     * @param _pokeNew Bool to say if we should poke the boost on the new vault\r\n     */\r\n    function setDirection(\r\n        address _old,\r\n        address _new,\r\n        bool _pokeNew\r\n    ) external override {\r\n        uint8 idOld = _vaults[_old];\r\n        uint8 idNew = _vaults[_new];\r\n\r\n        require(idOld > 0 && idNew > 0, \"Vaults not whitelisted\");\r\n\r\n        uint128 bitmap = _directedBitmap[msg.sender];\r\n        (bool isWhitelisted, uint8 count, uint8 pos) = _indexExists(bitmap, idOld);\r\n        require(isWhitelisted && count >= 3, \"No need to replace old\");\r\n\r\n        _directedBitmap[msg.sender] = _direct(bitmap, pos, idNew);\r\n\r\n        IBoostedVaultWithLockup(_old).pokeBoost(msg.sender);\r\n\r\n        if (_pokeNew) {\r\n            IBoostedVaultWithLockup(_new).pokeBoost(msg.sender);\r\n        }\r\n\r\n        emit RedirectedBoost(msg.sender, _new, _old);\r\n    }\r\n\r\n    /**\r\n     * @dev Resets the bitmap given the new _id for _pos. Takes each uint8 in seperate and re-compiles\r\n     */\r\n    function _direct(\r\n        uint128 _bitmap,\r\n        uint8 _pos,\r\n        uint8 _id\r\n    ) internal returns (uint128 newMap) {\r\n        // bitmap          = ... 00000000 00000000 00000011 00001010\r\n        // pos = 1, id = 1 = 00000001\r\n        // step            = ... 00000000 00000000 00000001 00000000\r\n        uint8 id;\r\n        uint128 step;\r\n        for (uint8 i = 0; i < 3; i++) {\r\n            unchecked {\r\n                // id is either the one that is passed, or existing\r\n                id = _pos == i ? _id : uint8(_bitmap >> (i * 8));\r\n                step = uint128(uint128(id) << (i * 8));\r\n            }\r\n            newMap |= step;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Given a 128 bit bitmap packed with 8 bit ids, should be able to filter for specific ids by moving\r\n     * the bitmap gradually to the right and reading each 8 bit section as a uint8.\r\n     */\r\n    function _indexExists(uint128 _bitmap, uint8 _target)\r\n        internal\r\n        view\r\n        returns (\r\n            bool isWhitelisted,\r\n            uint8 count,\r\n            uint8 pos\r\n        )\r\n    {\r\n        // bitmap   = ... 00000000 00000000 00000011 00001010 // positions 1 and 2 have ids 10 and 3 respectively\r\n        // e.g.\r\n        // i = 1: bitmap moves 8 bits to the right\r\n        // bitmap   = ... 00000000 00000000 00000000 00000011 // reading uint8 should return 3\r\n        uint8 id;\r\n        for (uint8 i = 0; i < 3; i++) {\r\n            unchecked {\r\n                id = uint8(_bitmap >> (i * 8));\r\n            }\r\n            if (id > 0) count += 1;\r\n            if (id == _target) {\r\n                isWhitelisted = true;\r\n                pos = i;\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nexus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"boosted\",\"type\":\"address\"}],\"name\":\"Directed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"boosted\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"replaced\",\"type\":\"address\"}],\"name\":\"RedirectedBoost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"vaultId\",\"type\":\"uint8\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_directedBitmap\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_vaults\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newVaults\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nexus\",\"outputs\":[{\"internalType\":\"contract INexus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_pokeNew\",\"type\":\"bool\"}],\"name\":\"setDirection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"contract IIncentivisedVotingLockup\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newVaults\",\"type\":\"address[]\"}],\"name\":\"whitelistVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BoostDirector","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000afce80b19a8ce13dec0739a1aab7a028d6845eb3000000000000000000000000ae8bc96da4f9a9613c323478be181fdb2aa0e1bf","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://77c56cff8e12788104ec92d02b4e56fdb28f1c3b905d5384a0ae4db2d0086fd6"}]}