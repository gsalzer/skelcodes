{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.8.3;\r\n\r\ncontract NestInfo36 {\r\n    \r\n    // Nest锁仓合约\r\n    address public nestStaking = 0xaA7A74a46EFE0C58FBfDf5c43Da30216a8aa84eC;\r\n    // Nest回售\r\n    address public nestRedeeming = 0xF48D58649dDb13E6e29e03059Ea518741169ceC8;\r\n    // 手续费账本\r\n    address public nestLedger = 0x34B931C7e5Dc45dDc9098A1f588A0EA0dA45025D;\r\n    // 投票合约 \r\n    address public nestVote = 0xDa52f53a5bE4cb876DE79DcfF16F34B95e2D38e9;\r\n    // nest地址\r\n    address public nest = 0x04abEdA201850aC0124161F037Efd70c74ddC74C;\r\n    // 价格数据合约\r\n    address public nestPriceFacade = 0xB5D2890c061c321A5B6A4a4254bb1522425BAF0A;\r\n    // 管理员\r\n    address public governance;\r\n    \r\n    // Proposal\r\n    struct DataView {\r\n\r\n        // Index of proposal\r\n        uint index;\r\n        \r\n        // The immutable field and the variable field are stored separately\r\n        /* ========== Immutable field ========== */\r\n\r\n        // The contract address which will be executed when the proposal is approved. (Must implemented IVotePropose)\r\n        address contractAddress;\r\n\r\n        // Voting start time\r\n        uint48 startTime;\r\n\r\n        // Voting stop time\r\n        uint48 stopTime;\r\n\r\n        // Proposer\r\n        address proposer;\r\n\r\n        // Staked nest amount\r\n        uint96 staked;\r\n\r\n        /* ========== Mutable field ========== */\r\n\r\n        // Gained value\r\n        // The maximum value of uint96 can be expressed as 79228162514264337593543950335, which is more than the total \r\n        // number of nest 10000000000 ether. Therefore, uint96 can be used to express the total number of votes\r\n        uint96 gainValue;\r\n\r\n        // The state of this proposal\r\n        uint32 state;  // 0: proposed | 1: accepted | 2: cancelled\r\n\r\n        // The executor of this proposal\r\n        address executor;\r\n\r\n        // The execution time (if any, such as block number or time stamp) is placed in the contract and is limited by the contract itself\r\n\r\n        // Circulation of nest\r\n        uint96 nestCirculation;\r\n    }\r\n    \r\n    constructor() public{\r\n        governance = msg.sender;\r\n    }\r\n    \r\n    //---------modifier---------\r\n    \r\n    modifier onlyGovernance() {\r\n        require(msg.sender == governance);\r\n        _;\r\n    }\r\n    \r\n    //---------governance-------\r\n    \r\n    function setNestStaking(address add) external onlyGovernance {\r\n        require(add != address(0x0));\r\n        nestStaking = add;\r\n    }\r\n    \r\n    function setNestRedeeming(address add) external onlyGovernance {\r\n        require(add != address(0x0));\r\n        nestRedeeming = add;\r\n    }\r\n    \r\n    function setNestLedger(address add) external onlyGovernance {\r\n        require(add != address(0x0));\r\n        nestLedger = add;\r\n    }\r\n    \r\n    function setNestVote(address add) external onlyGovernance {\r\n        require(add != address(0x0));\r\n        nestVote = add;\r\n    }\r\n    \r\n    function setNest(address add) external onlyGovernance {\r\n        require(add != address(0x0));\r\n        nest = add;\r\n    }\r\n    \r\n    function setNestPriceFacade(address add) external onlyGovernance {\r\n        require(add != address(0x0));\r\n        nestPriceFacade = add;\r\n    }\r\n    \r\n    //---------view-------------\r\n    \r\n    /**\r\n    * @dev 收益页面信息\r\n    * @param nToken 查询的ntoken或nest地址\r\n    * @return accountStaked 账户锁仓量\r\n    * @return accountEarned 账户可领取收益\r\n    */\r\n    function getStakingInfo(address nToken) external view returns (uint256 accountStaked, uint256 accountEarned) {\r\n        INestStaking C_NestStake = INestStaking(address(nestStaking));\r\n        accountStaked = C_NestStake.stakedBalanceOf(nToken, address(msg.sender));\r\n        accountEarned = C_NestStake.earned(nToken, address(msg.sender));\r\n    }\r\n    \r\n    /**\r\n    * @dev 回售页面信息\r\n    * @param nToken 查询的ntoken或nest地址\r\n    * @param tokenAmount 价值 1 ETH 的 ntoken 数量\r\n    * @return resolvableAmount 可回购数量\r\n    * @return priceAmount 当前价格\r\n    * @return totalAmount 已锁定总量 \r\n    * @return tokenBalance token余额\r\n    * @return tokenAllow token授权额度\r\n    * @return tokenTotal token流通量\r\n    * @return nestIn01 nest销毁额度\r\n    */\r\n    function getRedeemingInfo(address nToken, uint256 tokenAmount) external view returns(uint256 resolvableAmount, \r\n                                                                                         uint256 priceAmount, \r\n                                                                                         uint256 totalAmount,\r\n                                                                                         uint256 tokenBalance, \r\n                                                                                         uint256 tokenAllow,\r\n                                                                                         uint256 tokenTotal,\r\n                                                                                         uint256 nestIn01,\r\n                                                                                         uint256 fee) {\r\n        uint256 ethBalance = INestLedger(address(nestLedger)).totalRewards(nToken);\r\n        uint256 ethResolvable = tokenAmount * ethBalance / uint256(1 ether);\r\n        uint256 realResolvable = INestRedeeming(nestRedeeming).quotaOf(nToken);\r\n        if (ethResolvable < realResolvable) {\r\n            resolvableAmount = ethResolvable;\r\n        } else {\r\n            resolvableAmount = realResolvable;\r\n        }\r\n        priceAmount = tokenAmount;\r\n        totalAmount = IERC20(nToken).balanceOf(address(nestLedger));                                                                                     \r\n        tokenBalance = IERC20(nToken).balanceOf(address(msg.sender));\r\n        tokenAllow = IERC20(nToken).allowance(address(msg.sender), address(nestRedeeming));\r\n        if (nToken == nest) {\r\n            tokenTotal = INestVote(nestVote).getNestCirculation();\r\n        } else {\r\n            tokenTotal = IERC20(nToken).totalSupply() - IERC20(nToken).balanceOf(address(nestLedger));\r\n        }\r\n        nestIn01 = IERC20(nest).balanceOf(address(0x0000000000000000000000000000000000000001));\r\n        INestPriceFacade.Config memory info = INestPriceFacade(nestPriceFacade).getConfig();\r\n        // fee = info.singleFee * 0.0001 ether;\r\n        fee = uint256(info.singleFee) * 0.0001 ether;\r\n    }\r\n    \r\n    /**\r\n    * @dev token余额授权信息\r\n    * @param token 查询的token\r\n    * @param to 授权目标\r\n    * @return balanceAmount 钱包余额\r\n    * @return allowAmount 授权额度\r\n    */\r\n    function balanceAndAllow(address token, address to) external view returns(uint256 balanceAmount, uint256 allowAmount) {\r\n        balanceAmount = IERC20(address(token)).balanceOf(address(msg.sender));\r\n        allowAmount = IERC20(address(token)).allowance(address(msg.sender), address(to));\r\n    }\r\n    \r\n    \r\n    function list(uint offset, uint count, uint order) public view returns (DataView[] memory) {\r\n        INestVote.ProposalView[] memory data = INestVote(nestVote).list(offset, count, order);\r\n        DataView[] memory returnData = new DataView[](data.length);\r\n        for (uint256 i = 0; i < data.length; i++) {\r\n            INestVote.ProposalView memory vote = data[i];\r\n            DataView memory info = DataView(vote.index, vote.contractAddress, vote.startTime, vote.stopTime, vote.proposer, vote.staked, vote.gainValue, vote.state, vote.executor, vote.nestCirculation);\r\n            returnData[i] = info;\r\n        }\r\n        return returnData;\r\n    }\r\n}\r\n\r\n\r\ninterface INestStaking {\r\n\r\n    function totalStaked(address ntoken) external view returns (uint256);\r\n\r\n    function stakedBalanceOf(address ntoken, address account) external view returns (uint256);\r\n    \r\n    function totalRewards(address ntoken) external view returns (uint256);\r\n    \r\n    function earned(address ntoken, address account) external view returns (uint256);\r\n}\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    \r\n}\r\n\r\ninterface INestRedeeming {\r\n    function quotaOf(address ntokenAddress) external view returns (uint);\r\n}\r\n\r\ninterface INestLedger {\r\n    function totalRewards(address ntokenAddress) external view returns (uint);\r\n}\r\n\r\ninterface INestVote {\r\n    // Proposal\r\n    struct ProposalView {\r\n\r\n        // Index of proposal\r\n        uint index;\r\n        \r\n        // The immutable field and the variable field are stored separately\r\n        /* ========== Immutable field ========== */\r\n\r\n        // Brief of this proposal\r\n        string brief;\r\n\r\n        // The contract address which will be executed when the proposal is approved. (Must implemented IVotePropose)\r\n        address contractAddress;\r\n\r\n        // Voting start time\r\n        uint48 startTime;\r\n\r\n        // Voting stop time\r\n        uint48 stopTime;\r\n\r\n        // Proposer\r\n        address proposer;\r\n\r\n        // Staked nest amount\r\n        uint96 staked;\r\n\r\n        /* ========== Mutable field ========== */\r\n\r\n        // Gained value\r\n        // The maximum value of uint96 can be expressed as 79228162514264337593543950335, which is more than the total \r\n        // number of nest 10000000000 ether. Therefore, uint96 can be used to express the total number of votes\r\n        uint96 gainValue;\r\n\r\n        // The state of this proposal\r\n        uint32 state;  // 0: proposed | 1: accepted | 2: cancelled\r\n\r\n        // The executor of this proposal\r\n        address executor;\r\n\r\n        // The execution time (if any, such as block number or time stamp) is placed in the contract and is limited by the contract itself\r\n\r\n        // Circulation of nest\r\n        uint96 nestCirculation;\r\n    }\r\n    function getNestCirculation() external view returns (uint);\r\n    function list(uint offset, uint count, uint order) external view returns (ProposalView[] memory);\r\n}\r\n\r\ninterface INestPriceFacade {\r\n    \r\n    /// @dev Price call entry configuration structure\r\n    struct Config {\r\n\r\n        // Single query fee（0.0001 ether, DIMI_ETHER). 100\r\n        uint16 singleFee;\r\n\r\n        // Double query fee（0.0001 ether, DIMI_ETHER). 100\r\n        uint16 doubleFee;\r\n\r\n        // The normal state flag of the call address. 0\r\n        uint8 normalFlag;\r\n    }\r\n    function getConfig() external view returns (Config memory);\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"balanceAndAllow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"getRedeemingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"resolvableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAllow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nestIn01\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nToken\",\"type\":\"address\"}],\"name\":\"getStakingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accountEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"order\",\"type\":\"uint256\"}],\"name\":\"list\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"staked\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"gainValue\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"state\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"nestCirculation\",\"type\":\"uint96\"}],\"internalType\":\"struct NestInfo36.DataView[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nestLedger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nestPriceFacade\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nestRedeeming\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nestStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nestVote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setNest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setNestLedger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setNestPriceFacade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setNestRedeeming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setNestStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setNestVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NestInfo36","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2ffdae2feb041771f0aa5c961984d5023f84cbd78717e9a759144cc0ec5ba599"}]}