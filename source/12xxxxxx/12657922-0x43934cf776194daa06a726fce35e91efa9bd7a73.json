{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/YvdaiAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./interfaces/external/yearn/IVault.sol\\\";\\nimport \\\"./AdapterBase.sol\\\";\\n\\n// https://docs.yearn.finance/developers/yvaults-documentation/vault-interfaces#ivault\\ncontract YvdaiAdapter is AdapterBase {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    address public governanceAccount;\\n    address public underlyingAssetAddress;\\n    address public programAddress;\\n    address public farmingPoolAddress;\\n\\n    IVault private _yvdai;\\n    IERC20 private _underlyingAsset;\\n\\n    constructor(\\n        address underlyingAssetAddress_,\\n        address programAddress_,\\n        address farmingPoolAddress_\\n    ) {\\n        require(\\n            underlyingAssetAddress_ != address(0),\\n            \\\"YvdaiAdapter: underlying asset address is the zero address\\\"\\n        );\\n        require(\\n            programAddress_ != address(0),\\n            \\\"YvdaiAdapter: yvDai address is the zero address\\\"\\n        );\\n        require(\\n            farmingPoolAddress_ != address(0),\\n            \\\"YvdaiAdapter: farming pool address is the zero address\\\"\\n        );\\n\\n        governanceAccount = msg.sender;\\n        underlyingAssetAddress = underlyingAssetAddress_;\\n        programAddress = programAddress_;\\n        farmingPoolAddress = farmingPoolAddress_;\\n\\n        _yvdai = IVault(programAddress);\\n        _underlyingAsset = IERC20(underlyingAssetAddress);\\n    }\\n\\n    modifier onlyBy(address account) {\\n        require(msg.sender == account, \\\"YvdaiAdapter: sender not authorized\\\");\\n        _;\\n    }\\n\\n    function getTotalWrappedTokenAmountCore()\\n        internal\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _yvdai.balanceOf(address(this));\\n    }\\n\\n    function getWrappedTokenPriceInUnderlyingCore()\\n        internal\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            _yvdai.decimals() <= 18,\\n            \\\"YvdaiAdapter: greater than 18 decimal places\\\"\\n        );\\n\\n        uint256 originalPrice = _yvdai.pricePerShare();\\n        uint256 scale = 18 - _yvdai.decimals();\\n\\n        return originalPrice.mul(10**scale);\\n    }\\n\\n    // https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3\\n    // The reentrancy check is in farming pool.\\n    function depositUnderlyingToken(uint256 amount)\\n        external\\n        override\\n        onlyBy(farmingPoolAddress)\\n        returns (uint256)\\n    {\\n        require(amount != 0, \\\"YvdaiAdapter: can't add 0\\\");\\n\\n        _underlyingAsset.safeTransferFrom(msg.sender, address(this), amount);\\n        _underlyingAsset.safeApprove(programAddress, amount);\\n        uint256 receivedWrappedTokenQuantity =\\n            _yvdai.deposit(amount, address(this));\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit DepositUnderlyingToken(\\n            underlyingAssetAddress,\\n            programAddress,\\n            amount,\\n            receivedWrappedTokenQuantity,\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        return receivedWrappedTokenQuantity;\\n    }\\n\\n    // https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3\\n    // The reentrancy check is in farming pool.\\n    function redeemWrappedToken(uint256 maxAmount)\\n        external\\n        override\\n        onlyBy(farmingPoolAddress)\\n        returns (uint256, uint256)\\n    {\\n        require(maxAmount != 0, \\\"YvdaiAdapter: can't redeem 0\\\");\\n\\n        uint256 beforeBalance = _yvdai.balanceOf(address(this));\\n        // The default maxLoss is 1: https://github.com/yearn/yearn-vaults/blob/v0.3.0/contracts/Vault.vy#L860\\n        uint256 receivedUnderlyingTokenQuantity =\\n            _yvdai.withdraw(maxAmount, msg.sender, 1);\\n        uint256 afterBalance = _yvdai.balanceOf(address(this));\\n\\n        uint256 actualAmount = beforeBalance.sub(afterBalance);\\n        // slither-disable-next-line reentrancy-events\\n        emit RedeemWrappedToken(\\n            underlyingAssetAddress,\\n            programAddress,\\n            maxAmount,\\n            actualAmount,\\n            receivedUnderlyingTokenQuantity,\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        return (actualAmount, receivedUnderlyingTokenQuantity);\\n    }\\n\\n    function setGovernanceAccount(address newGovernanceAccount)\\n        external\\n        onlyBy(governanceAccount)\\n    {\\n        require(\\n            newGovernanceAccount != address(0),\\n            \\\"YvdaiAdapter: new governance account is the zero address\\\"\\n        );\\n\\n        governanceAccount = newGovernanceAccount;\\n    }\\n\\n    function setFarmingPoolAddress(address newFarmingPoolAddress)\\n        external\\n        onlyBy(governanceAccount)\\n    {\\n        require(\\n            newFarmingPoolAddress != address(0),\\n            \\\"YvdaiAdapter: new farming pool address is the zero address\\\"\\n        );\\n\\n        farmingPoolAddress = newFarmingPoolAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/yearn/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// v1:\\n//  - https://docs.yearn.finance/developers/yvaults-documentation/vault-interfaces#ivault\\n//  - https://github.com/yearn/yearn-protocol/blob/develop/interfaces/yearn/IVault.sol\\n//\\n// Current:\\n//  - https://etherscan.io/address/0x19D3364A399d251E894aC732651be8B0E4e85001#code\\n//  - https://github.com/yearn/yearn-vaults/blob/v0.3.0/contracts/Vault.vy\\n\\npragma solidity ^0.7.6;\\n\\ninterface IVault {\\n    function decimals() external view returns (uint256);\\n\\n    /**\\n     * @notice Gives the price for a single Vault share.\\n     * @dev See dev note on `withdraw`.\\n     * @return The value of a single share.\\n     */\\n    function pricePerShare() external view returns (uint256);\\n\\n    /**\\n     * @notice\\n     *     Deposits `_amount` `token`, issuing shares to `recipient`. If the\\n     *     Vault is in Emergency Shutdown, deposits will not be accepted and this\\n     *     call will fail.\\n     * @dev\\n     *     Measuring quantity of shares to issues is based on the total\\n     *     outstanding debt that this contract has (\\\"expected value\\\") instead\\n     *     of the total balance sheet it has (\\\"estimated value\\\") has important\\n     *     security considerations, and is done intentionally. If this value were\\n     *     measured against external systems, it could be purposely manipulated by\\n     *     an attacker to withdraw more assets than they otherwise should be able\\n     *     to claim by redeeming their shares.\\n     *     On deposit, this means that shares are issued against the total amount\\n     *     that the deposited capital can be given in service of the debt that\\n     *     Strategies assume. If that number were to be lower than the \\\"expected\\n     *     value\\\" at some future point, depositing shares via this method could\\n     *     entitle the depositor to *less* than the deposited value once the\\n     *     \\\"realized value\\\" is updated from further reports by the Strategies\\n     *     to the Vaults.\\n     *     Care should be taken by integrators to account for this discrepancy,\\n     *     by using the view-only methods of this contract (both off-chain and\\n     *     on-chain) to determine if depositing into the Vault is a \\\"good idea\\\".\\n     * @param _amount   The quantity of tokens to deposit, defaults to all.\\n     * @param recipient The address to issue the shares in this Vault to. Defaults\\n     *                  to the caller's address.\\n     * @return The issued Vault shares.\\n     */\\n    function deposit(uint256 _amount, address recipient)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice\\n     *     Withdraws the calling account's tokens from this Vault, redeeming\\n     *     amount `_shares` for an appropriate amount of tokens.\\n     *     See note on `setWithdrawalQueue` for further details of withdrawal\\n     *     ordering and behavior.\\n     * @dev\\n     *     Measuring the value of shares is based on the total outstanding debt\\n     *     that this contract has (\\\"expected value\\\") instead of the total balance\\n     *     sheet it has (\\\"estimated value\\\") has important security considerations,\\n     *     and is done intentionally. If this value were measured against external\\n     *     systems, it could be purposely manipulated by an attacker to withdraw\\n     *     more assets than they otherwise should be able to claim by redeeming\\n     *     their shares.\\n     *     On withdrawal, this means that shares are redeemed against the total\\n     *     amount that the deposited capital had \\\"realized\\\" since the point it\\n     *     was deposited, up until the point it was withdrawn. If that number\\n     *     were to be higher than the \\\"expected value\\\" at some future point,\\n     *     withdrawing shares via this method could entitle the depositor to\\n     *     *more* than the expected value once the \\\"realized value\\\" is updated\\n     *     from further reports by the Strategies to the Vaults.\\n     *     Under exceptional scenarios, this could cause earlier withdrawals to\\n     *     earn \\\"more\\\" of the underlying assets than Users might otherwise be\\n     *     entitled to, if the Vault's estimated value were otherwise measured\\n     *     through external means, accounting for whatever exceptional scenarios\\n     *     exist for the Vault (that aren't covered by the Vault's own design.)\\n     * @param maxShares How many shares to try and redeem for tokens, defaults to\\n     *                  all.\\n     * @param recipient The address to issue the shares in this Vault to. Defaults\\n     *                  to the caller's address.\\n     * @param maxLoss   The maximum acceptable loss to sustain on withdrawal. Defaults\\n     *                  to 0%.\\n     * @return The quantity of tokens redeemed for `_shares`.\\n     */\\n    function withdraw(\\n        uint256 maxShares,\\n        address recipient,\\n        uint256 maxLoss\\n    ) external returns (uint256);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    /**\\n     * @notice\\n     *     Transfers shares from the caller's address to `receiver`. This function\\n     *     will always return true, unless the user is attempting to transfer\\n     *     shares to this contract's address, or to 0x0.\\n     * @param receiver  The address shares are being transferred to. Must not be\\n     *                   this contract's address, must not be 0x0.\\n     * @param amount    The quantity of shares to transfer.\\n     * @return\\n     *     True if transfer is sent to an address other than this contract's or\\n     *     0x0, otherwise the transaction will fail.\\n     */\\n    function transfer(address receiver, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/AdapterBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/IAdapter.sol\\\";\\n\\nabstract contract AdapterBase is IAdapter {\\n    using SafeMath for uint256;\\n\\n    // https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code\\n    // slither-disable-next-line dead-code\\n    function getTotalWrappedTokenAmountCore()\\n        internal\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    // https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code\\n    // slither-disable-next-line dead-code\\n    function getWrappedTokenPriceInUnderlyingCore()\\n        internal\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function getRedeemableUnderlyingTokensForCore(uint256 amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 price = getWrappedTokenPriceInUnderlyingCore();\\n\\n        return amount.mul(price).div(10**18);\\n    }\\n\\n    function getWrappedTokenPriceInUnderlying()\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return getWrappedTokenPriceInUnderlyingCore();\\n    }\\n\\n    function getRedeemableUnderlyingTokensFor(uint256 amount)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return getRedeemableUnderlyingTokensForCore(amount);\\n    }\\n\\n    function getTotalRedeemableUnderlyingTokens()\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 totalWrappedTokenAmount = getTotalWrappedTokenAmountCore();\\n\\n        return getRedeemableUnderlyingTokensForCore(totalWrappedTokenAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\n\\ninterface IAdapter {\\n    /*\\n     * @return The wrapped token price in underlying (18 decimal places).\\n     */\\n    function getWrappedTokenPriceInUnderlying() external view returns (uint256);\\n\\n    function getTotalRedeemableUnderlyingTokens()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getRedeemableUnderlyingTokensFor(uint256 amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function depositUnderlyingToken(uint256 amount) external returns (uint256);\\n\\n    function redeemWrappedToken(uint256 maxAmount)\\n        external\\n        returns (uint256 actualAmount, uint256 quantity);\\n\\n    event DepositUnderlyingToken(\\n        address indexed underlyingAssetAddress,\\n        address indexed wrappedTokenAddress,\\n        uint256 underlyingAssetAmount,\\n        uint256 wrappedTokenQuantity,\\n        address operator,\\n        uint256 timestamp\\n    );\\n\\n    event RedeemWrappedToken(\\n        address indexed underlyingAssetAddress,\\n        address indexed wrappedTokenAddress,\\n        uint256 maxWrappedTokenAmount,\\n        uint256 actualWrappedTokenAmount,\\n        uint256 underlyingAssetQuantity,\\n        address operator,\\n        uint256 timestamp\\n    );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingAssetAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"programAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"farmingPoolAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlyingAssetAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wrappedTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingAssetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wrappedTokenQuantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DepositUnderlyingToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlyingAssetAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wrappedTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWrappedTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualWrappedTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingAssetQuantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RedeemWrappedToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositUnderlyingToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmingPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getRedeemableUnderlyingTokensFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRedeemableUnderlyingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWrappedTokenPriceInUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"programAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"redeemWrappedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFarmingPoolAddress\",\"type\":\"address\"}],\"name\":\"setFarmingPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernanceAccount\",\"type\":\"address\"}],\"name\":\"setGovernanceAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingAssetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"YvdaiAdapter","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f00000000000000000000000019d3364a399d251e894ac732651be8b0e4e85001000000000000000000000000c325c45a7b652098f5971813e43ba41250f269bc","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}