{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/ivannikov/work/snake-jungle/cosmomasks-contracts-deployer/src/cosmofund/contracts/CosmoFund.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"./utils/Approvable.sol\\\";\\n\\ninterface IERC20 {\\n  function balanceOf(address account) external view returns (uint256);\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n}\\n\\n/**\\n * CosmoFund Contract\\n * https://CosmoFund.space/\\n */\\ncontract CosmoFund is Approvable {\\n    using SafeMath for uint256;\\n\\n    string private _url;\\n\\n    struct Transfer {\\n        uint256 id;\\n        bool executed;\\n        address token;\\n        uint256 amount;\\n        address payable to;\\n        uint256 approvalsWeight;\\n    }\\n    Transfer[] private _transfers;\\n    mapping(address => mapping(uint256 => bool)) private _approvalsTransfer;\\n\\n    event NewTransfer(uint256 indexed id, address indexed token, uint256 amount, address indexed to);\\n    event VoteForTransfer(uint256 indexed id, address indexed voter, uint256 voterWeight, uint256 approvalsWeight);\\n    event Transferred(uint256 indexed id, address indexed token, uint256 amount, address indexed to);\\n\\n    constructor(uint256 weight, uint256 threshold) public {\\n        _setupApprover(_msgSender(), weight);\\n        _setupThreshold(threshold);\\n        _setURL(\\\"https://CosmoFund.space/\\\");\\n    }\\n\\n    function url() public view returns (string memory) {\\n        return _url;\\n    }\\n\\n    function balance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function balanceERC20(address token) public view returns (uint256) {\\n        return IERC20(token).balanceOf(address(this));\\n    }\\n\\n\\n    // Transfer\\n    function transfersCount() public view returns (uint256) {\\n        return _transfers.length;\\n    }\\n\\n    function getTransfer(uint256 id) public view returns (Transfer memory) {\\n        return _transfers[id];\\n    }\\n\\n    function createTransferETH(uint256 amount, address payable to) public onlyApprover returns (uint256) {\\n        uint256 id = _addNewTransfer(address(0), amount, to);\\n        _voteForTransfer(id);\\n        return id;\\n    }\\n\\n    function createTransferERC20(address token, uint256 amount, address payable to) public onlyApprover returns (uint256) {\\n        uint256 id = _addNewTransfer(token, amount, to);\\n        _voteForTransfer(id);\\n        return id;\\n    }\\n\\n    function approveTransfer(uint256 id) public onlyApprover returns (bool) {\\n        require(_transfers[id].executed == false, \\\"CosmoFund: Transfer has already executed\\\");\\n        require(_approvalsTransfer[_msgSender()][id] == false, \\\"CosmoFund: Cannot approve transfer twice\\\");\\n        return _voteForTransfer(id);\\n    }\\n\\n    function executeTransfer(uint256 id) public onlyApprover returns (bool) {\\n        require(_transfers[id].executed == false, \\\"CosmoFund: Transfer has already executed\\\");\\n        require(_transfers[id].approvalsWeight >= getThreshold(), \\\"CosmoFund: Insufficient approvals weight\\\");\\n        return _executeTransfer(id);\\n    }\\n\\n    function _addNewTransfer(address token, uint256 amount, address payable to) private returns (uint256) {\\n        require(to != address(0), \\\"CosmoFund: to is the zero address\\\");\\n        uint256 id = _transfers.length;\\n        _transfers.push(Transfer(id, false, token, amount, to, 0));\\n        emit NewTransfer(id, token, amount, to);\\n        return id;\\n    }\\n\\n    function _voteForTransfer(uint256 id) private returns (bool) {\\n        address msgSender = _msgSender();\\n        _approvalsTransfer[msgSender][id] = true;\\n        _transfers[id].approvalsWeight = _transfers[id].approvalsWeight.add(getApproverWeight(msgSender));\\n        emit VoteForTransfer(id, msgSender, getApproverWeight(msgSender), _transfers[id].approvalsWeight);\\n        if (_transfers[id].approvalsWeight >= getThreshold())\\n            _executeTransfer(id);\\n        return true;\\n    }\\n\\n    function _executeTransfer(uint256 id) private returns (bool) {\\n        if (_transfers[id].token == address(0))\\n            require(_executeTransferETH(id), \\\"CosmoFund: Failed to transfer ETH\\\");\\n        else\\n            require(_executeTransferERC20(id), \\\"CosmoFund: Failed to transfer ERC20\\\");\\n        _transfers[id].executed = true;\\n        emit Transferred(_transfers[id].id, _transfers[id].token, _transfers[id].amount, _transfers[id].to);\\n        return true;\\n    }\\n\\n    function _executeTransferETH(uint256 id) private returns (bool) {\\n        return _transfers[id].to.send(_transfers[id].amount);\\n    }\\n\\n    function _executeTransferERC20(uint256 id) private returns (bool) {\\n        return IERC20(_transfers[id].token).transfer(_transfers[id].to, _transfers[id].amount);\\n    }\\n\\n    function setURL(string memory newUrl) public onlyApprover {\\n        _setURL(newUrl);\\n    }\\n\\n    function _setURL(string memory newUrl) private {\\n        _url = newUrl;\\n    }\\n    \\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"/Users/ivannikov/work/snake-jungle/cosmomasks-contracts-deployer/src/cosmofund/contracts/libraries/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n */\\nlibrary EnumerableSet {\\n    struct Set {\\n        bytes32[] _values;\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        uint256 valueIndex = set._indexes[value];\\n        if (valueIndex != 0) {\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n            bytes32 lastvalue = set._values[lastIndex];\\n            set._values[toDeleteIndex] = lastvalue;\\n            set._indexes[lastvalue] = toDeleteIndex + 1;\\n            set._values.pop();\\n            delete set._indexes[value];\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/ivannikov/work/snake-jungle/cosmomasks-contracts-deployer/src/cosmofund/contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n */\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/ivannikov/work/snake-jungle/cosmomasks-contracts-deployer/src/cosmofund/contracts/utils/Approvable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../libraries/EnumerableSet.sol\\\";\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n */\\nabstract contract Approvable is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeMath for uint256;\\n\\n    EnumerableSet.AddressSet _approvers;\\n    mapping(address => uint256) private _weights;\\n    uint256 private _totalWeight;\\n    uint256 private _threshold;\\n\\n\\n    struct GrantApprover {\\n        uint256 id;\\n        bool executed;\\n        address account;\\n        uint256 weight;\\n        uint256 approvalsWeight;\\n    }\\n    GrantApprover[] private _grantApprovers;\\n    mapping(address => mapping(uint256 => bool)) private _approvalsGrantApprover;\\n\\n\\n    struct ChangeApproverWeight {\\n        uint256 id;\\n        bool executed;\\n        address account;\\n        uint256 weight;\\n        uint256 approvalsWeight;\\n    }\\n    ChangeApproverWeight[] private _changeApproverWeights;\\n    mapping(address => mapping(uint256 => bool)) private _approvalsChangeApproverWeight;\\n\\n\\n    struct RevokeApprover {\\n        uint256 id;\\n        bool executed;\\n        address account;\\n        uint256 approvalsWeight;\\n    }\\n    RevokeApprover[] private _revokeApprovers;\\n    mapping(address => mapping(uint256 => bool)) private _approvalsRevokeApprover;\\n\\n\\n    struct ChangeThreshold {\\n        uint256 id;\\n        bool executed;\\n        uint256 threshold;\\n        uint256 approvalsWeight;\\n    }\\n    ChangeThreshold[] private _changeThresholds;\\n    mapping(address => mapping(uint256 => bool)) private _approvalsChangeThreshold;\\n\\n\\n    event NewGrantApprover(uint256 indexed id, address indexed account, uint256 weight);\\n    event VoteForGrantApprover(uint256 indexed id, address indexed voter, uint256 voterWeight, uint256 approvalsWeight);\\n    event ApproverGranted(address indexed account);\\n\\n    event NewChangeApproverWeight(uint256 indexed id, address indexed account, uint256 weight);\\n    event VoteForChangeApproverWeight(uint256 indexed id, address indexed voter, uint256 voterWeight, uint256 approvalsWeight);\\n    event ApproverWeightChanged(address indexed account, uint256 oldWeight, uint256 newWeight);\\n\\n    event NewRevokeApprover(uint256 indexed id, address indexed account);\\n    event VoteForRevokeApprover(uint256 indexed id, address indexed voter, uint256 voterWeight, uint256 approvalsWeight);\\n    event ApproverRevoked(address indexed account);\\n\\n    event NewChangeThreshold(uint256 indexed id, uint256 threshold);\\n    event VoteForChangeThreshold(uint256 indexed id, address indexed voter, uint256 voterWeight, uint256 approvalsWeight);\\n    event ThresholdChanged(uint256 oldThreshold, uint256 newThreshold);\\n\\n    event TotalWeightChanged(uint256 oldTotalWeight, uint256 newTotalWeight);\\n\\n\\n    function getThreshold() public view returns (uint256) {\\n        return _threshold;\\n    }\\n\\n    function getTotalWeight() public view returns (uint256) {\\n        return _totalWeight;\\n    }\\n\\n    function getApproversCount() public view returns (uint256) {\\n        return _approvers.length();\\n    }\\n\\n    function isApprover(address account) public view returns (bool) {\\n        return _approvers.contains(account);\\n    }\\n\\n    function getApprover(uint256 index) public view returns (address) {\\n        return _approvers.at(index);\\n    }\\n\\n    function getApproverWeight(address account) public view returns (uint256) {\\n        return _weights[account];\\n    }\\n\\n\\n    // GrantApprovers\\n    function getGrantApproversCount() public view returns (uint256) {\\n        return _grantApprovers.length;\\n    }\\n\\n    function getGrantApprover(uint256 id) public view returns (GrantApprover memory) {\\n        return _grantApprovers[id];\\n    }\\n\\n    // ChangeApproverWeights\\n    function getChangeApproverWeightsCount() public view returns (uint256) {\\n        return _changeApproverWeights.length;\\n    }\\n\\n    function getChangeApproverWeight(uint256 id) public view returns (ChangeApproverWeight memory) {\\n        return _changeApproverWeights[id];\\n    }\\n\\n    // RevokeApprovers\\n    function getRevokeApproversCount() public view returns (uint256) {\\n        return _revokeApprovers.length;\\n    }\\n\\n    function getRevokeApprover(uint256 id) public view returns (RevokeApprover memory) {\\n        return _revokeApprovers[id];\\n    }\\n\\n    // ChangeThresholds\\n    function getChangeThresholdsCount() public view returns (uint256) {\\n        return _changeThresholds.length;\\n    }\\n\\n    function getChangeThreshold(uint256 id) public view returns (ChangeThreshold memory) {\\n        return _changeThresholds[id];\\n    }\\n\\n\\n    // Grant Approver\\n    function grantApprover(address account, uint256 weight) public onlyApprover returns (uint256) {\\n        uint256 id = _addNewGrantApprover(account, weight);\\n        _voteForGrantApprover(id);\\n        return id;\\n    }\\n\\n    function _addNewGrantApprover(address account, uint256 weight) private returns (uint256) {\\n        require(account != address(0), \\\"Approvable: account is the zero address\\\");\\n        uint256 id = _grantApprovers.length;\\n        _grantApprovers.push(GrantApprover(id, false, account, weight, 0));\\n        emit NewGrantApprover(id, account, weight);\\n        return id;\\n    }\\n\\n    function _voteForGrantApprover(uint256 id) private returns (bool) {\\n        address msgSender = _msgSender();\\n        _approvalsGrantApprover[msgSender][id] = true;\\n        _grantApprovers[id].approvalsWeight = _grantApprovers[id].approvalsWeight.add(_weights[msgSender]);\\n        emit VoteForGrantApprover(id, msgSender, _weights[msgSender], _grantApprovers[id].approvalsWeight);\\n        return true;\\n    }\\n\\n    function _grantApprover(address account, uint256 weight) private returns (bool) {\\n        if (_approvers.add(account)) {\\n            _changeApproverWeight(account, weight);\\n            emit ApproverGranted(account);\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _setupApprover(address account, uint256 weight) internal returns (bool) {\\n        return _grantApprover(account, weight);\\n    }\\n\\n    function approveGrantApprover(uint256 id) public onlyApprover returns (bool) {\\n        require(_grantApprovers[id].executed == false, \\\"Approvable: action has already executed\\\");\\n        require(_approvalsGrantApprover[_msgSender()][id] == false, \\\"Approvable: Cannot approve action twice\\\");\\n        return _voteForGrantApprover(id);\\n    }\\n\\n    function confirmGrantApprover(uint256 id) public returns (bool) {\\n        require(_grantApprovers[id].account == _msgSender(), \\\"Approvable: only pending approver\\\");\\n        require(_grantApprovers[id].executed == false, \\\"Approvable: action has already executed\\\");\\n        if (_grantApprovers[id].approvalsWeight >= _threshold) {\\n            _grantApprover(_grantApprovers[id].account, _grantApprovers[id].weight);\\n            _grantApprovers[id].executed = true;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n\\n    // Change Approver Weight\\n    function changeApproverWeight(address account, uint256 weight) public onlyApprover returns (uint256) {\\n        require(_totalWeight.sub(_weights[account]).add(weight) >= _threshold, \\\"Approvable: The threshold is greater than new totalWeight\\\");\\n        uint256 id = _addNewChangeApproverWeight(account, weight);\\n        _voteForChangeApproverWeight(id);\\n        return id;\\n    }\\n\\n    function _addNewChangeApproverWeight(address account, uint256 weight) private returns (uint256) {\\n        require(account != address(0), \\\"Approvable: account is the zero address\\\");\\n        uint256 id = _changeApproverWeights.length;\\n        _changeApproverWeights.push(ChangeApproverWeight(id, false, account, weight, 0));\\n        emit NewChangeApproverWeight(id, account, weight);\\n        return id;\\n    }\\n\\n    function _voteForChangeApproverWeight(uint256 id) private returns (bool) {\\n        address msgSender = _msgSender();\\n        _approvalsChangeApproverWeight[msgSender][id] = true;\\n        _changeApproverWeights[id].approvalsWeight = _changeApproverWeights[id].approvalsWeight.add(_weights[msgSender]);\\n        emit VoteForChangeApproverWeight(id, msgSender, _weights[msgSender], _changeApproverWeights[id].approvalsWeight);\\n        if (_changeApproverWeights[id].approvalsWeight >= _threshold) {\\n            _changeApproverWeight(_changeApproverWeights[id].account, _changeApproverWeights[id].weight);\\n            _changeApproverWeights[id].executed = true;\\n        }\\n        return true;\\n    }\\n\\n    function _changeApproverWeight(address account, uint256 weight) private returns (bool) {\\n        uint256 newTotalWeight = _totalWeight.sub(_weights[account]).add(weight);\\n        require(newTotalWeight >= _threshold, \\\"Approvable: The threshold is greater than new totalWeight\\\");\\n        _setTotalWeight(newTotalWeight);\\n        emit ApproverWeightChanged(account, _weights[account], weight);\\n        _weights[account] = weight;\\n        return true;\\n    }\\n\\n    function approveChangeApproverWeight(uint256 id) public onlyApprover returns (bool) {\\n        require(_changeApproverWeights[id].executed == false, \\\"Approvable: action has already executed\\\");\\n        require(_approvalsChangeApproverWeight[_msgSender()][id] == false, \\\"Approvable: Cannot approve action twice\\\");\\n        return _voteForChangeApproverWeight(id);\\n    }\\n\\n\\n    // Revoke Approver\\n    function revokeApprover(address account) public onlyApprover returns (uint256) {\\n        require(_totalWeight.sub(_weights[account]) >= _threshold, \\\"Approvable: The threshold is greater than new totalWeight\\\");\\n        uint256 id = _addNewRevokeApprover(account);\\n        _voteForRevokeApprover(id);\\n        return id;\\n    }\\n\\n    function _addNewRevokeApprover(address account) private returns (uint256) {\\n        require(account != address(0), \\\"Approvable: account is the zero address\\\");\\n        uint256 id = _revokeApprovers.length;\\n        _revokeApprovers.push(RevokeApprover(id, false, account, 0));\\n        emit NewRevokeApprover(id, account);\\n        return id;\\n    }\\n\\n    function _voteForRevokeApprover(uint256 id) private returns (bool) {\\n        address msgSender = _msgSender();\\n        _approvalsRevokeApprover[msgSender][id] = true;\\n        _revokeApprovers[id].approvalsWeight = _revokeApprovers[id].approvalsWeight.add(_weights[msgSender]);\\n        emit VoteForRevokeApprover(id, msgSender, _weights[msgSender], _revokeApprovers[id].approvalsWeight);\\n        if (_revokeApprovers[id].approvalsWeight >= _threshold) {\\n            _revokeApprover(_revokeApprovers[id].account);\\n            _revokeApprovers[id].executed = true;\\n        }\\n        return true;\\n    }\\n\\n    function _revokeApprover(address account) private returns (bool) {\\n        uint256 newTotalWeight = _totalWeight.sub(_weights[account]);\\n        require(newTotalWeight >= _threshold, \\\"Approvable: The threshold is greater than new totalWeight\\\");\\n        if (_approvers.remove(account)) {\\n            _changeApproverWeight(account, 0);\\n            emit ApproverRevoked(account);\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function approveRevokeApprover(uint256 id) public onlyApprover returns (bool) {\\n        require(_revokeApprovers[id].executed == false, \\\"Approvable: action has already executed\\\");\\n        require(_approvalsRevokeApprover[_msgSender()][id] == false, \\\"Approvable: Cannot approve action twice\\\");\\n        return _voteForRevokeApprover(id);\\n    }\\n\\n    function renounceApprover(address account) public returns (bool) {\\n        require(account == _msgSender(), \\\"Approvable: can only renounce roles for self\\\");\\n        return _revokeApprover(account);\\n    }\\n\\n\\n    // Change Threshold\\n    function changeThreshold(uint256 threshold) public onlyApprover returns (uint256) {\\n        require(getTotalWeight() >= threshold, \\\"Approvable: The new threshold is greater than totalWeight\\\");\\n        uint256 id = _addNewChangeThreshold(threshold);\\n        _voteForChangeThreshold(id);\\n        return id;\\n    }\\n\\n    function _addNewChangeThreshold(uint256 threshold) private returns (uint256) {\\n        uint256 id = _changeThresholds.length;\\n        _changeThresholds.push(ChangeThreshold(id, false, threshold, 0));\\n        emit NewChangeThreshold(id, threshold);\\n        return id;\\n    }\\n\\n    function _voteForChangeThreshold(uint256 id) private returns (bool) {\\n        address msgSender = _msgSender();\\n        _approvalsChangeThreshold[msgSender][id] = true;\\n        _changeThresholds[id].approvalsWeight = _changeThresholds[id].approvalsWeight.add(_weights[msgSender]);\\n        emit VoteForChangeThreshold(id, msgSender, _weights[msgSender], _changeThresholds[id].approvalsWeight);\\n        if (_changeThresholds[id].approvalsWeight >= _threshold) {\\n            _setThreshold(_changeThresholds[id].threshold);\\n            _changeThresholds[id].executed = true;\\n        }\\n        return true;\\n    }\\n\\n    function approveChangeThreshold(uint256 id) public onlyApprover returns (bool) {\\n        require(_changeThresholds[id].executed == false, \\\"Approvable: action has already executed\\\");\\n        require(_approvalsChangeThreshold[_msgSender()][id] == false, \\\"Approvable: Cannot approve action twice\\\");\\n        return _voteForChangeThreshold(id);\\n    }\\n\\n    function _setThreshold(uint256 threshold) private returns (bool) {\\n        require(getTotalWeight() >= threshold, \\\"Approvable: The new threshold is greater than totalWeight\\\");\\n        emit ThresholdChanged(_threshold, threshold);\\n        _threshold = threshold;\\n        return true;\\n    }\\n\\n    function _setupThreshold(uint256 threshold) internal returns (bool) {\\n        return _setThreshold(threshold);\\n    }\\n\\n\\n    // Total Weight\\n    function _setTotalWeight(uint256 totalWeight) private returns (bool) {\\n        emit TotalWeightChanged(_totalWeight, totalWeight);\\n        _totalWeight = totalWeight;\\n        return true;\\n    }\\n\\n    modifier onlyApprover() {\\n        require(isApprover(_msgSender()), \\\"Approvable: caller is not the approver\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/ivannikov/work/snake-jungle/cosmomasks-contracts-deployer/src/cosmofund/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ApproverGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ApproverRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWeight\",\"type\":\"uint256\"}],\"name\":\"ApproverWeightChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"NewChangeApproverWeight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"NewChangeThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"NewGrantApprover\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NewRevokeApprover\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"NewTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"ThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTotalWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalWeight\",\"type\":\"uint256\"}],\"name\":\"TotalWeightChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voterWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"approvalsWeight\",\"type\":\"uint256\"}],\"name\":\"VoteForChangeApproverWeight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voterWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"approvalsWeight\",\"type\":\"uint256\"}],\"name\":\"VoteForChangeThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voterWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"approvalsWeight\",\"type\":\"uint256\"}],\"name\":\"VoteForGrantApprover\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voterWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"approvalsWeight\",\"type\":\"uint256\"}],\"name\":\"VoteForRevokeApprover\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voterWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"approvalsWeight\",\"type\":\"uint256\"}],\"name\":\"VoteForTransfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approveChangeApproverWeight\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approveChangeThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approveGrantApprover\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approveRevokeApprover\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approveTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"changeApproverWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"changeThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"confirmGrantApprover\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"createTransferERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"createTransferETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"executeTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getApprover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getApproverWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getApproversCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getChangeApproverWeight\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"approvalsWeight\",\"type\":\"uint256\"}],\"internalType\":\"struct Approvable.ChangeApproverWeight\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChangeApproverWeightsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getChangeThreshold\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"approvalsWeight\",\"type\":\"uint256\"}],\"internalType\":\"struct Approvable.ChangeThreshold\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChangeThresholdsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getGrantApprover\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"approvalsWeight\",\"type\":\"uint256\"}],\"internalType\":\"struct Approvable.GrantApprover\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGrantApproversCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRevokeApprover\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"approvalsWeight\",\"type\":\"uint256\"}],\"internalType\":\"struct Approvable.RevokeApprover\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRevokeApproversCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTransfer\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"approvalsWeight\",\"type\":\"uint256\"}],\"internalType\":\"struct CosmoFund.Transfer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"grantApprover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isApprover\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceApprover\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeApprover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUrl\",\"type\":\"string\"}],\"name\":\"setURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"url\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CosmoFund","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000003","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}