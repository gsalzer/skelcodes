{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/mainnet/connectors_old/refinance.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface TokenInterface {\\n    function approve(address, uint256) external;\\n    function transfer(address, uint) external;\\n    function transferFrom(address, address, uint) external;\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n    function balanceOf(address) external view returns (uint);\\n    function decimals() external view returns (uint);\\n}\\n\\n// Compound Helpers\\ninterface CTokenInterface {\\n    function mint(uint mintAmount) external returns (uint);\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n}\\n\\ninterface CETHInterface {\\n    function mint() external payable;\\n    function repayBorrow() external payable;\\n}\\n\\ninterface CompoundMappingInterface {\\n    function cTokenMapping(string calldata tokenId) external view returns (address);\\n    function getMapping(string calldata tokenId) external view returns (address, address);\\n}\\n\\ninterface ComptrollerInterface {\\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\\n}\\n// End Compound Helpers\\n\\n// Aave v1 Helpers\\ninterface AaveV1Interface {\\n    function deposit(address _reserve, uint256 _amount, uint16 _referralCode) external payable;\\n    function redeemUnderlying(\\n        address _reserve,\\n        address payable _user,\\n        uint256 _amount,\\n        uint256 _aTokenBalanceAfterRedeem\\n    ) external;\\n    \\n    function setUserUseReserveAsCollateral(address _reserve, bool _useAsCollateral) external;\\n    function getUserReserveData(address _reserve, address _user) external view returns (\\n        uint256 currentATokenBalance,\\n        uint256 currentBorrowBalance,\\n        uint256 principalBorrowBalance,\\n        uint256 borrowRateMode,\\n        uint256 borrowRate,\\n        uint256 liquidityRate,\\n        uint256 originationFee,\\n        uint256 variableBorrowIndex,\\n        uint256 lastUpdateTimestamp,\\n        bool usageAsCollateralEnabled\\n    );\\n    function borrow(address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode) external;\\n    function repay(address _reserve, uint256 _amount, address payable _onBehalfOf) external payable;\\n}\\n\\ninterface AaveV1ProviderInterface {\\n    function getLendingPool() external view returns (address);\\n    function getLendingPoolCore() external view returns (address);\\n}\\n\\ninterface AaveV1CoreInterface {\\n    function getReserveATokenAddress(address _reserve) external view returns (address);\\n}\\n\\ninterface ATokenV1Interface {\\n    function redeem(uint256 _amount) external;\\n    function balanceOf(address _user) external view returns(uint256);\\n    function principalBalanceOf(address _user) external view returns(uint256);\\n\\n    function allowance(address, address) external view returns (uint);\\n    function approve(address, uint) external;\\n    function transfer(address, uint) external returns (bool);\\n    function transferFrom(address, address, uint) external returns (bool);\\n}\\n// End Aave v1 Helpers\\n\\n// Aave v2 Helpers\\ninterface AaveV2Interface {\\n    function deposit(address _asset, uint256 _amount, address _onBehalfOf, uint16 _referralCode) external;\\n    function withdraw(address _asset, uint256 _amount, address _to) external;\\n    function borrow(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _interestRateMode,\\n        uint16 _referralCode,\\n        address _onBehalfOf\\n    ) external;\\n    function repay(address _asset, uint256 _amount, uint256 _rateMode, address _onBehalfOf) external;\\n    function setUserUseReserveAsCollateral(address _asset, bool _useAsCollateral) external;\\n}\\n\\ninterface AaveV2LendingPoolProviderInterface {\\n    function getLendingPool() external view returns (address);\\n}\\n\\n// Aave Protocol Data Provider\\ninterface AaveV2DataProviderInterface {\\n    function getUserReserveData(address _asset, address _user) external view returns (\\n        uint256 currentATokenBalance,\\n        uint256 currentStableDebt,\\n        uint256 currentVariableDebt,\\n        uint256 principalStableDebt,\\n        uint256 scaledVariableDebt,\\n        uint256 stableBorrowRate,\\n        uint256 liquidityRate,\\n        uint40 stableRateLastUpdated,\\n        bool usageAsCollateralEnabled\\n    );\\n}\\n// End Aave v2 Helpers\\n\\ncontract DSMath {\\n\\n    uint constant WAD = 10 ** 18;\\n    uint constant RAY = 10 ** 27;\\n\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, \\\"math-not-safe\\\");\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, \\\"sub-overflow\\\");\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"math-not-safe\\\");\\n    }\\n\\n    function wmul(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n}\\n\\ncontract Helpers is DSMath {\\n\\n    using SafeERC20 for IERC20;\\n\\n    enum Protocol {\\n        Aave,\\n        AaveV2,\\n        Compound\\n    }\\n\\n    address payable constant feeCollector = 0xb1DC62EC38E6E3857a887210C38418E4A17Da5B2;\\n\\n    /**\\n     * @dev Return ethereum address\\n     */\\n    function getEthAddr() internal pure returns (address) {\\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\\n    }\\n\\n    /**\\n     * @dev Return Weth address\\n    */\\n    function getWethAddr() internal pure returns (address) {\\n        return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // Mainnet WETH Address\\n        // return 0xd0A1E359811322d97991E03f863a0C30C2cF029C; // Kovan WETH Address\\n    }\\n\\n    /**\\n     * @dev Return InstaDApp Mapping Address\\n     */\\n    function getMappingAddr() internal pure returns (address) {\\n        return 0xA8F9D4aA7319C54C04404765117ddBf9448E2082; // CompoundMapping Address\\n    }\\n\\n    /**\\n     * @dev Return Compound Comptroller Address\\n     */\\n    function getComptrollerAddress() internal pure returns (address) {\\n        return 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\\n    }\\n\\n    /**\\n     * @dev get Aave Provider\\n    */\\n    function getAaveProvider() internal pure returns (AaveV1ProviderInterface) {\\n        return AaveV1ProviderInterface(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8); //mainnet\\n        // return AaveV1ProviderInterface(0x506B0B2CF20FAA8f38a4E2B524EE43e1f4458Cc5); //kovan\\n    }\\n\\n    /**\\n     * @dev get Aave Lending Pool Provider\\n    */\\n    function getAaveV2Provider() internal pure returns (AaveV2LendingPoolProviderInterface) {\\n        return AaveV2LendingPoolProviderInterface(0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5); //mainnet\\n        // return AaveV2LendingPoolProviderInterface(0x652B2937Efd0B5beA1c8d54293FC1289672AFC6b); //kovan\\n    }\\n\\n    /**\\n     * @dev get Aave Protocol Data Provider\\n    */\\n    function getAaveV2DataProvider() internal pure returns (AaveV2DataProviderInterface) {\\n        return AaveV2DataProviderInterface(0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d); //mainnet\\n        // return AaveV2DataProviderInterface(0x744C1aaA95232EeF8A9994C4E0b3a89659D9AB79); //kovan\\n    }\\n\\n    /**\\n     * @dev get Referral Code\\n    */\\n    function getReferralCode() internal pure returns (uint16) {\\n        return 3228;\\n    }\\n\\n    function getWithdrawBalance(AaveV1Interface aave, address token) internal view returns (uint bal) {\\n        (bal, , , , , , , , , ) = aave.getUserReserveData(token, address(this));\\n    }\\n\\n    function getPaybackBalance(AaveV1Interface aave, address token) internal view returns (uint bal, uint fee) {\\n        (, bal, , , , , fee, , , ) = aave.getUserReserveData(token, address(this));\\n    }\\n\\n    function getTotalBorrowBalance(AaveV1Interface aave, address token) internal view returns (uint amt) {\\n        (, uint bal, , , , , uint fee, , , ) = aave.getUserReserveData(token, address(this));\\n        amt = add(bal, fee);\\n    }\\n\\n    function getWithdrawBalanceV2(AaveV2DataProviderInterface aaveData, address token) internal view returns (uint bal) {\\n        (bal, , , , , , , , ) = aaveData.getUserReserveData(token, address(this));\\n    }\\n\\n    function getPaybackBalanceV2(AaveV2DataProviderInterface aaveData, address token, uint rateMode) internal view returns (uint bal) {\\n        if (rateMode == 1) {\\n            (, bal, , , , , , , ) = aaveData.getUserReserveData(token, address(this));\\n        } else {\\n            (, , bal, , , , , , ) = aaveData.getUserReserveData(token, address(this));\\n        }\\n    }\\n\\n    function getIsColl(AaveV1Interface aave, address token) internal view returns (bool isCol) {\\n        (, , , , , , , , , isCol) = aave.getUserReserveData(token, address(this));\\n    }\\n\\n    function getIsCollV2(AaveV2DataProviderInterface aaveData, address token) internal view returns (bool isCol) {\\n        (, , , , , , , , isCol) = aaveData.getUserReserveData(token, address(this));\\n    }\\n\\n    function convertEthToWeth(bool isEth, TokenInterface token, uint amount) internal {\\n        if(isEth) token.deposit{value:amount}();\\n    }\\n\\n    function convertWethToEth(bool isEth, TokenInterface token, uint amount) internal {\\n       if(isEth) {\\n            token.approve(address(token), amount);\\n            token.withdraw(amount);\\n        }\\n    }\\n\\n    function getMaxBorrow(Protocol target, address token, CTokenInterface ctoken, uint rateMode) internal returns (uint amt) {\\n        AaveV1Interface aaveV1 = AaveV1Interface(getAaveProvider().getLendingPool());\\n        AaveV2DataProviderInterface aaveData = getAaveV2DataProvider();\\n\\n        if (target == Protocol.Aave) {\\n            (uint _amt, uint _fee) = getPaybackBalance(aaveV1, token);\\n            amt = _amt + _fee;\\n        } else if (target == Protocol.AaveV2) {\\n            amt = getPaybackBalanceV2(aaveData, token, rateMode);\\n        } else if (target == Protocol.Compound) {\\n            amt = ctoken.borrowBalanceCurrent(address(this));\\n        }\\n    }\\n\\n    function transferFees(address token, uint feeAmt) internal {\\n        if (feeAmt > 0) {\\n            if (token == getEthAddr()) {\\n                feeCollector.transfer(feeAmt);\\n            } else {\\n                IERC20(token).safeTransfer(feeCollector, feeAmt);\\n            }\\n        }\\n    }\\n\\n    function calculateFee(uint256 amount, uint256 fee, bool toAdd) internal pure returns(uint feeAmount, uint _amount){\\n        feeAmount = wmul(amount, fee);\\n        _amount = toAdd ? add(amount, feeAmount) : sub(amount, feeAmount);\\n    }\\n\\n    function getTokenInterfaces(uint length, address[] memory tokens) internal pure returns (TokenInterface[] memory) {\\n        TokenInterface[] memory _tokens = new TokenInterface[](length);\\n        for (uint i = 0; i < length; i++) {\\n            if (tokens[i] ==  getEthAddr()) {\\n                _tokens[i] = TokenInterface(getWethAddr());\\n            } else {\\n                _tokens[i] = TokenInterface(tokens[i]);\\n            }\\n        }\\n        return _tokens;\\n    }\\n\\n    function getCtokenInterfaces(uint length, string[] memory tokenIds) internal view returns (CTokenInterface[] memory) {\\n        CTokenInterface[] memory _ctokens = new CTokenInterface[](length);\\n        for (uint i = 0; i < length; i++) {\\n            (address token, address cToken) = CompoundMappingInterface(getMappingAddr()).getMapping(tokenIds[i]);\\n            require(token != address(0) && cToken != address(0), \\\"invalid token/ctoken address\\\");\\n            _ctokens[i] = CTokenInterface(cToken);\\n        }\\n        return _ctokens;\\n    }\\n}\\n\\ncontract CompoundHelpers is Helpers {\\n\\n    struct CompoundBorrowData {\\n        uint length;\\n        uint fee;\\n        Protocol target;\\n        CTokenInterface[] ctokens;\\n        TokenInterface[] tokens;\\n        uint[] amts;\\n        uint[] rateModes;\\n    }\\n\\n    function _compEnterMarkets(uint length, CTokenInterface[] memory ctokens) internal {\\n        ComptrollerInterface troller = ComptrollerInterface(getComptrollerAddress());\\n        address[] memory _cTokens = new address[](length);\\n\\n        for (uint i = 0; i < length; i++) {\\n            _cTokens[i] = address(ctokens[i]);\\n        }\\n        troller.enterMarkets(_cTokens);\\n    }\\n\\n    function _compBorrowOne(\\n        uint fee,\\n        CTokenInterface ctoken,\\n        TokenInterface token,\\n        uint amt,\\n        Protocol target,\\n        uint rateMode\\n    ) internal returns (uint) {\\n        if (amt > 0) {\\n            address _token = address(token) == getWethAddr() ? getEthAddr() : address(token);\\n\\n            if (amt == uint(-1)) {\\n                amt = getMaxBorrow(target, address(token), ctoken, rateMode);\\n            }\\n\\n            (uint feeAmt, uint _amt) = calculateFee(amt, fee, true);\\n\\n            require(ctoken.borrow(_amt) == 0, \\\"borrow-failed-collateral?\\\");\\n            transferFees(_token, feeAmt);\\n        }\\n        return amt;\\n    }\\n\\n    function _compBorrow(\\n        CompoundBorrowData memory data\\n    ) internal returns (uint[] memory) {\\n        uint[] memory finalAmts = new uint[](data.length);\\n        for (uint i = 0; i < data.length; i++) {\\n            finalAmts[i] = _compBorrowOne(\\n                data.fee, \\n                data.ctokens[i], \\n                data.tokens[i], \\n                data.amts[i], \\n                data.target, \\n                data.rateModes[i]\\n            );\\n        }\\n        return finalAmts;\\n    }\\n\\n    function _compDepositOne(uint fee, CTokenInterface ctoken, TokenInterface token, uint amt) internal {\\n        if (amt > 0) {\\n            address _token = address(token) == getWethAddr() ? getEthAddr() : address(token);\\n\\n            (uint feeAmt, uint _amt) = calculateFee(amt, fee, false);\\n\\n            if (_token != getEthAddr()) {\\n                token.approve(address(ctoken), _amt);\\n                require(ctoken.mint(_amt) == 0, \\\"deposit-failed\\\");\\n            } else {\\n                CETHInterface(address(ctoken)).mint{value:_amt}();\\n            }\\n            transferFees(_token, feeAmt);\\n        }\\n    }\\n\\n    function _compDeposit(\\n        uint length,\\n        uint fee,\\n        CTokenInterface[] memory ctokens,\\n        TokenInterface[] memory tokens,\\n        uint[] memory amts\\n    ) internal {\\n        for (uint i = 0; i < length; i++) {\\n            _compDepositOne(fee, ctokens[i], tokens[i], amts[i]);\\n        }\\n    }\\n\\n    function _compWithdrawOne(CTokenInterface ctoken, TokenInterface token, uint amt) internal returns (uint) {\\n        if (amt > 0) {\\n            if (amt == uint(-1)) {\\n                bool isEth = address(token) == getWethAddr();\\n                uint initalBal = isEth ? address(this).balance : token.balanceOf(address(this));\\n                require(ctoken.redeem(ctoken.balanceOf(address(this))) == 0, \\\"withdraw-failed\\\");\\n                uint finalBal = isEth ? address(this).balance : token.balanceOf(address(this));\\n                amt = sub(finalBal, initalBal);\\n            } else {\\n                require(ctoken.redeemUnderlying(amt) == 0, \\\"withdraw-failed\\\");\\n            }\\n        }\\n        return amt;\\n    }\\n\\n    function _compWithdraw(\\n        uint length,\\n        CTokenInterface[] memory ctokens,\\n        TokenInterface[] memory tokens,\\n        uint[] memory amts\\n    ) internal returns(uint[] memory) {\\n        uint[] memory finalAmts = new uint[](length);\\n        for (uint i = 0; i < length; i++) {\\n            finalAmts[i] = _compWithdrawOne(ctokens[i], tokens[i], amts[i]);\\n        }\\n        return finalAmts;\\n    }\\n\\n    function _compPaybackOne(CTokenInterface ctoken, TokenInterface token, uint amt) internal returns (uint) {\\n        if (amt > 0) {\\n            if (amt == uint(-1)) {\\n                amt = ctoken.borrowBalanceCurrent(address(this));\\n            }\\n            if (address(token) != getWethAddr()) {\\n                token.approve(address(ctoken), amt);\\n                require(ctoken.repayBorrow(amt) == 0, \\\"repay-failed.\\\");\\n            } else {\\n                CETHInterface(address(ctoken)).repayBorrow{value:amt}();\\n            }\\n        }\\n        return amt;\\n    }\\n\\n    function _compPayback(\\n        uint length,\\n        CTokenInterface[] memory ctokens,\\n        TokenInterface[] memory tokens,\\n        uint[] memory amts\\n    ) internal {\\n        for (uint i = 0; i < length; i++) {\\n            _compPaybackOne(ctokens[i], tokens[i], amts[i]);\\n        }\\n    }\\n}\\n\\ncontract AaveV1Helpers is CompoundHelpers {\\n\\n    struct AaveV1BorrowData {\\n        AaveV1Interface aave;\\n        uint length;\\n        uint fee;\\n        Protocol target;\\n        TokenInterface[] tokens;\\n        CTokenInterface[] ctokens;\\n        uint[] amts;\\n        uint[] borrowRateModes;\\n        uint[] paybackRateModes;\\n    }\\n\\n    struct AaveV1DepositData {\\n        AaveV1Interface aave;\\n        AaveV1CoreInterface aaveCore;\\n        uint length;\\n        uint fee;\\n        TokenInterface[] tokens;\\n        uint[] amts;\\n    }\\n\\n    function _aaveV1BorrowOne(\\n        AaveV1Interface aave,\\n        uint fee,\\n        Protocol target,\\n        TokenInterface token,\\n        CTokenInterface ctoken,\\n        uint amt,\\n        uint borrowRateMode,\\n        uint paybackRateMode\\n    ) internal returns (uint) {\\n        if (amt > 0) {\\n\\n            address _token = address(token) == getWethAddr() ? getEthAddr() : address(token);\\n\\n            if (amt == uint(-1)) {\\n                amt = getMaxBorrow(target, address(token), ctoken, paybackRateMode);\\n            }\\n\\n            (uint feeAmt, uint _amt) = calculateFee(amt, fee, true);\\n\\n            aave.borrow(_token, _amt, borrowRateMode, getReferralCode());\\n            transferFees(_token, feeAmt);\\n        }\\n        return amt;\\n    }\\n\\n    function _aaveV1Borrow(\\n        AaveV1BorrowData memory data\\n    ) internal returns (uint[] memory) {\\n        uint[] memory finalAmts = new uint[](data.length);\\n        for (uint i = 0; i < data.length; i++) {\\n            finalAmts[i] = _aaveV1BorrowOne(\\n                data.aave,\\n                data.fee,\\n                data.target,\\n                data.tokens[i],\\n                data.ctokens[i],\\n                data.amts[i],\\n                data.borrowRateModes[i],\\n                data.paybackRateModes[i]\\n            );\\n        }\\n        return finalAmts;\\n    }\\n\\n    function _aaveV1DepositOne(\\n        AaveV1Interface aave,\\n        AaveV1CoreInterface aaveCore,\\n        uint fee,\\n        TokenInterface token,\\n        uint amt\\n    ) internal {\\n        if (amt > 0) {\\n            uint ethAmt;\\n            (uint feeAmt, uint _amt) = calculateFee(amt, fee, false);\\n\\n            bool isEth = address(token) == getWethAddr();\\n\\n            address _token = isEth ? getEthAddr() : address(token);\\n\\n            if (isEth) {\\n                ethAmt = _amt;\\n            } else {\\n                token.approve(address(aaveCore), _amt);\\n            }\\n\\n            transferFees(_token, feeAmt);\\n\\n            aave.deposit{value:ethAmt}(_token, _amt, getReferralCode());\\n\\n            if (!getIsColl(aave, _token))\\n                aave.setUserUseReserveAsCollateral(_token, true);\\n        }\\n    }\\n\\n    function _aaveV1Deposit(\\n        AaveV1DepositData memory data\\n    ) internal {\\n        for (uint i = 0; i < data.length; i++) {\\n            _aaveV1DepositOne(\\n                data.aave,\\n                data.aaveCore,\\n                data.fee,\\n                data.tokens[i],\\n                data.amts[i]\\n            );\\n        }\\n    }\\n\\n    function _aaveV1WithdrawOne(\\n        AaveV1Interface aave,\\n        AaveV1CoreInterface aaveCore,\\n        TokenInterface token,\\n        uint amt\\n    ) internal returns (uint) {\\n        if (amt > 0) {\\n            address _token = address(token) == getWethAddr() ? getEthAddr() : address(token);\\n            ATokenV1Interface atoken = ATokenV1Interface(aaveCore.getReserveATokenAddress(_token));\\n            if (amt == uint(-1)) {\\n                amt = getWithdrawBalance(aave, _token);\\n            }\\n            atoken.redeem(amt);\\n        }\\n        return amt;\\n    }\\n\\n    function _aaveV1Withdraw(\\n        AaveV1Interface aave,\\n        AaveV1CoreInterface aaveCore,\\n        uint length,\\n        TokenInterface[] memory tokens,\\n        uint[] memory amts\\n    ) internal returns (uint[] memory) {\\n        uint[] memory finalAmts = new uint[](length);\\n        for (uint i = 0; i < length; i++) {\\n            finalAmts[i] = _aaveV1WithdrawOne(aave, aaveCore, tokens[i], amts[i]);\\n        }\\n        return finalAmts;\\n    }\\n\\n    function _aaveV1PaybackOne(\\n        AaveV1Interface aave,\\n        AaveV1CoreInterface aaveCore,\\n        TokenInterface token,\\n        uint amt\\n    ) internal returns (uint) {\\n        if (amt > 0) {\\n            uint ethAmt;\\n\\n            bool isEth = address(token) == getWethAddr();\\n\\n            address _token = isEth ? getEthAddr() : address(token);\\n\\n            if (amt == uint(-1)) {\\n                (uint _amt, uint _fee) = getPaybackBalance(aave, _token);\\n                amt = _amt + _fee;\\n            }\\n\\n            if (isEth) {\\n                ethAmt = amt;\\n            } else {\\n                token.approve(address(aaveCore), amt);\\n            }\\n\\n            aave.repay{value:ethAmt}(_token, amt, payable(address(this)));\\n        }\\n        return amt;\\n    }\\n\\n    function _aaveV1Payback(\\n        AaveV1Interface aave,\\n        AaveV1CoreInterface aaveCore,\\n        uint length,\\n        TokenInterface[] memory tokens,\\n        uint[] memory amts\\n    ) internal {\\n        for (uint i = 0; i < length; i++) {\\n            _aaveV1PaybackOne(aave, aaveCore, tokens[i], amts[i]);\\n        }\\n    }\\n}\\n\\ncontract AaveV2Helpers is AaveV1Helpers {\\n\\n    struct AaveV2BorrowData {\\n        AaveV2Interface aave;\\n        uint length;\\n        uint fee;\\n        Protocol target;\\n        TokenInterface[] tokens;\\n        CTokenInterface[] ctokens;\\n        uint[] amts;\\n        uint[] rateModes;\\n    }\\n\\n    struct AaveV2PaybackData {\\n        AaveV2Interface aave;\\n        AaveV2DataProviderInterface aaveData;\\n        uint length;\\n        TokenInterface[] tokens;\\n        uint[] amts;\\n        uint[] rateModes;\\n    }\\n\\n    struct AaveV2WithdrawData {\\n        AaveV2Interface aave;\\n        AaveV2DataProviderInterface aaveData;\\n        uint length;\\n        TokenInterface[] tokens;\\n        uint[] amts;\\n    }\\n\\n    function _aaveV2BorrowOne(\\n        AaveV2Interface aave,\\n        uint fee,\\n        Protocol target,\\n        TokenInterface token,\\n        CTokenInterface ctoken,\\n        uint amt,\\n        uint rateMode\\n    ) internal returns (uint) {\\n        if (amt > 0) {\\n            bool isEth = address(token) == getWethAddr();\\n            \\n            address _token = isEth ? getEthAddr() : address(token);\\n\\n            if (amt == uint(-1)) {\\n                amt = getMaxBorrow(target, _token, ctoken, rateMode);\\n            }\\n\\n            (uint feeAmt, uint _amt) = calculateFee(amt, fee, true);\\n\\n            aave.borrow(address(token), _amt, rateMode, getReferralCode(), address(this));\\n            convertWethToEth(isEth, token, amt);\\n\\n            transferFees(_token, feeAmt);\\n        }\\n        return amt;\\n    }\\n\\n    function _aaveV2Borrow(\\n        AaveV2BorrowData memory data\\n    ) internal returns (uint[] memory) {\\n        uint[] memory finalAmts = new uint[](data.length);\\n        for (uint i = 0; i < data.length; i++) {\\n            finalAmts[i] = _aaveV2BorrowOne(\\n                data.aave,\\n                data.fee,\\n                data.target,\\n                data.tokens[i],\\n                data.ctokens[i],\\n                data.amts[i],\\n                data.rateModes[i]\\n            );\\n        }\\n        return finalAmts;\\n    }\\n\\n    function _aaveV2DepositOne(\\n        AaveV2Interface aave,\\n        AaveV2DataProviderInterface aaveData,\\n        uint fee,\\n        TokenInterface token,\\n        uint amt\\n    ) internal {\\n        if (amt > 0) {\\n            (uint feeAmt, uint _amt) = calculateFee(amt, fee, false);\\n\\n            bool isEth = address(token) == getWethAddr();\\n            address _token = isEth ? getEthAddr() : address(token);\\n\\n            transferFees(_token, feeAmt);\\n\\n            convertEthToWeth(isEth, token, _amt);\\n\\n            token.approve(address(aave), _amt);\\n\\n            aave.deposit(address(token), _amt, address(this), getReferralCode());\\n\\n            if (!getIsCollV2(aaveData, address(token))) {\\n                aave.setUserUseReserveAsCollateral(address(token), true);\\n            }\\n        }\\n    }\\n\\n    function _aaveV2Deposit(\\n        AaveV2Interface aave,\\n        AaveV2DataProviderInterface aaveData,\\n        uint length,\\n        uint fee,\\n        TokenInterface[] memory tokens,\\n        uint[] memory amts\\n    ) internal {\\n        for (uint i = 0; i < length; i++) {\\n            _aaveV2DepositOne(aave, aaveData, fee, tokens[i], amts[i]);\\n        }\\n    }\\n\\n    function _aaveV2WithdrawOne(\\n        AaveV2Interface aave,\\n        AaveV2DataProviderInterface aaveData,\\n        TokenInterface token,\\n        uint amt\\n    ) internal returns (uint _amt) {\\n        if (amt > 0) {\\n            bool isEth = address(token) == getWethAddr();\\n\\n            aave.withdraw(address(token), amt, address(this));\\n\\n            _amt = amt == uint(-1) ? getWithdrawBalanceV2(aaveData, address(token)) : amt;\\n\\n            convertWethToEth(isEth, token, _amt);\\n        }\\n    }\\n\\n    function _aaveV2Withdraw(\\n        AaveV2WithdrawData memory data\\n    ) internal returns (uint[] memory) {\\n        uint[] memory finalAmts = new uint[](data.length);\\n        for (uint i = 0; i < data.length; i++) {\\n            finalAmts[i] = _aaveV2WithdrawOne(\\n                data.aave,\\n                data.aaveData,\\n                data.tokens[i],\\n                data.amts[i]\\n            );\\n        }\\n        return finalAmts;\\n    }\\n\\n    function _aaveV2PaybackOne(\\n        AaveV2Interface aave,\\n        AaveV2DataProviderInterface aaveData,\\n        TokenInterface token,\\n        uint amt,\\n        uint rateMode\\n    ) internal returns (uint _amt) {\\n        if (amt > 0) {\\n            bool isEth = address(token) == getWethAddr();\\n\\n            _amt = amt == uint(-1) ? getPaybackBalanceV2(aaveData, address(token), rateMode) : amt;\\n\\n            convertEthToWeth(isEth, token, _amt);\\n\\n            token.approve(address(aave), _amt);\\n\\n            aave.repay(address(token), _amt, rateMode, address(this));\\n        }\\n    }\\n\\n    function _aaveV2Payback(\\n        AaveV2PaybackData memory data\\n    ) internal {\\n        for (uint i = 0; i < data.length; i++) {\\n            _aaveV2PaybackOne(\\n                data.aave,\\n                data.aaveData,\\n                data.tokens[i],\\n                data.amts[i],\\n                data.rateModes[i]\\n            );\\n        }\\n    }\\n}\\n\\ncontract RefinanceResolver is AaveV2Helpers {\\n\\n    struct RefinanceData {\\n        Protocol source;\\n        Protocol target;\\n        uint collateralFee;\\n        uint debtFee;\\n        address[] tokens;\\n        string[] ctokenIds;\\n        uint[] borrowAmts;\\n        uint[] withdrawAmts;\\n        uint[] borrowRateModes;\\n        uint[] paybackRateModes;\\n    }\\n\\n    function refinance(RefinanceData calldata data) external payable {\\n\\n        require(data.source != data.target, \\\"source-and-target-unequal\\\");\\n\\n        uint length = data.tokens.length;\\n\\n        require(data.borrowAmts.length == length, \\\"length-mismatch\\\");\\n        require(data.withdrawAmts.length == length, \\\"length-mismatch\\\");\\n        require(data.borrowRateModes.length == length, \\\"length-mismatch\\\");\\n        require(data.paybackRateModes.length == length, \\\"length-mismatch\\\");\\n        require(data.ctokenIds.length == length, \\\"length-mismatch\\\");\\n\\n        AaveV2Interface aaveV2 = AaveV2Interface(getAaveV2Provider().getLendingPool());\\n        AaveV1Interface aaveV1 = AaveV1Interface(getAaveProvider().getLendingPool());\\n        AaveV1CoreInterface aaveCore = AaveV1CoreInterface(getAaveProvider().getLendingPoolCore());\\n        AaveV2DataProviderInterface aaveData = getAaveV2DataProvider();\\n\\n        uint[] memory depositAmts;\\n        uint[] memory paybackAmts;\\n\\n        TokenInterface[] memory tokens = getTokenInterfaces(length, data.tokens);\\n        CTokenInterface[] memory _ctokens = getCtokenInterfaces(length, data.ctokenIds);\\n\\n        if (data.source == Protocol.Aave && data.target == Protocol.AaveV2) {\\n            AaveV2BorrowData memory _aaveV2BorrowData;\\n\\n            _aaveV2BorrowData.aave = aaveV2;\\n            _aaveV2BorrowData.length = length;\\n            _aaveV2BorrowData.fee = data.debtFee;\\n            _aaveV2BorrowData.target = data.source;\\n            _aaveV2BorrowData.tokens = tokens;\\n            _aaveV2BorrowData.ctokens = _ctokens;\\n            _aaveV2BorrowData.amts = data.borrowAmts;\\n            _aaveV2BorrowData.rateModes = data.borrowRateModes;\\n\\n            paybackAmts = _aaveV2Borrow(_aaveV2BorrowData);\\n            _aaveV1Payback(aaveV1, aaveCore, length, tokens, paybackAmts);\\n            depositAmts = _aaveV1Withdraw(aaveV1, aaveCore, length, tokens, data.withdrawAmts);\\n            _aaveV2Deposit(aaveV2, aaveData, length, data.collateralFee, tokens, depositAmts);\\n        } else if (data.source == Protocol.Aave && data.target == Protocol.Compound) {\\n            _compEnterMarkets(length, _ctokens);\\n\\n            CompoundBorrowData memory _compoundBorrowData;\\n\\n            _compoundBorrowData.length = length;\\n            _compoundBorrowData.fee = data.debtFee;\\n            _compoundBorrowData.target = data.source;\\n            _compoundBorrowData.ctokens = _ctokens;\\n            _compoundBorrowData.tokens = tokens;\\n            _compoundBorrowData.amts = data.borrowAmts;\\n            _compoundBorrowData.rateModes = data.borrowRateModes;\\n\\n            paybackAmts = _compBorrow(_compoundBorrowData);\\n            \\n            _aaveV1Payback(aaveV1, aaveCore, length, tokens, paybackAmts);\\n            depositAmts = _aaveV1Withdraw(aaveV1, aaveCore, length, tokens, data.withdrawAmts);\\n            _compDeposit(length, data.collateralFee, _ctokens, tokens, depositAmts);\\n        } else if (data.source == Protocol.AaveV2 && data.target == Protocol.Aave) {\\n\\n            AaveV1BorrowData memory _aaveV1BorrowData;\\n            AaveV2PaybackData memory _aaveV2PaybackData;\\n            AaveV2WithdrawData memory _aaveV2WithdrawData;\\n\\n            {\\n                _aaveV1BorrowData.aave = aaveV1;\\n                _aaveV1BorrowData.length = length;\\n                _aaveV1BorrowData.fee = data.debtFee;\\n                _aaveV1BorrowData.target = data.source;\\n                _aaveV1BorrowData.tokens = tokens;\\n                _aaveV1BorrowData.ctokens = _ctokens;\\n                _aaveV1BorrowData.amts = data.borrowAmts;\\n                _aaveV1BorrowData.borrowRateModes = data.borrowRateModes;\\n                _aaveV1BorrowData.paybackRateModes = data.paybackRateModes;\\n\\n                paybackAmts = _aaveV1Borrow(_aaveV1BorrowData);\\n            }\\n            \\n            {\\n                _aaveV2PaybackData.aave = aaveV2;\\n                _aaveV2PaybackData.aaveData = aaveData;\\n                _aaveV2PaybackData.length = length;\\n                _aaveV2PaybackData.tokens = tokens;\\n                _aaveV2PaybackData.amts = paybackAmts;\\n                _aaveV2PaybackData.rateModes = data.paybackRateModes;\\n                _aaveV2Payback(_aaveV2PaybackData);\\n            }\\n\\n            {\\n                _aaveV2WithdrawData.aave = aaveV2;\\n                _aaveV2WithdrawData.aaveData = aaveData;\\n                _aaveV2WithdrawData.length = length;\\n                _aaveV2WithdrawData.tokens = tokens;\\n                _aaveV2WithdrawData.amts = data.withdrawAmts;\\n                depositAmts = _aaveV2Withdraw(_aaveV2WithdrawData);\\n            }\\n            {\\n                AaveV1DepositData memory _aaveV1DepositData;\\n                \\n                _aaveV1DepositData.aave = aaveV1;\\n                _aaveV1DepositData.aaveCore = aaveCore;\\n                _aaveV1DepositData.length = length;\\n                _aaveV1DepositData.fee = data.collateralFee;\\n                _aaveV1DepositData.tokens = tokens;\\n                _aaveV1DepositData.amts = depositAmts;\\n\\n                _aaveV1Deposit(_aaveV1DepositData);\\n            }\\n        } else if (data.source == Protocol.AaveV2 && data.target == Protocol.Compound) {\\n            _compEnterMarkets(length, _ctokens);\\n\\n            {\\n                CompoundBorrowData memory _compoundBorrowData;\\n\\n                _compoundBorrowData.length = length;\\n                _compoundBorrowData.fee = data.debtFee;\\n                _compoundBorrowData.target = data.source;\\n                _compoundBorrowData.ctokens = _ctokens;\\n                _compoundBorrowData.tokens = tokens;\\n                _compoundBorrowData.amts = data.borrowAmts;\\n                _compoundBorrowData.rateModes = data.borrowRateModes;\\n\\n                paybackAmts = _compBorrow(_compoundBorrowData);\\n            }\\n\\n            AaveV2PaybackData memory _aaveV2PaybackData;\\n\\n            _aaveV2PaybackData.aave = aaveV2;\\n            _aaveV2PaybackData.aaveData = aaveData;\\n            _aaveV2PaybackData.length = length;\\n            _aaveV2PaybackData.tokens = tokens;\\n            _aaveV2PaybackData.amts = paybackAmts;\\n            _aaveV2PaybackData.rateModes = data.paybackRateModes;\\n            \\n            _aaveV2Payback(_aaveV2PaybackData);\\n\\n            {\\n                AaveV2WithdrawData memory _aaveV2WithdrawData;\\n\\n                _aaveV2WithdrawData.aave = aaveV2;\\n                _aaveV2WithdrawData.aaveData = aaveData;\\n                _aaveV2WithdrawData.length = length;\\n                _aaveV2WithdrawData.tokens = tokens;\\n                _aaveV2WithdrawData.amts = data.withdrawAmts;\\n                depositAmts = _aaveV2Withdraw(_aaveV2WithdrawData);\\n            }\\n            _compDeposit(length, data.collateralFee, _ctokens, tokens, depositAmts);\\n        } else if (data.source == Protocol.Compound && data.target == Protocol.Aave) {\\n\\n            AaveV1BorrowData memory _aaveV1BorrowData;\\n\\n            _aaveV1BorrowData.aave = aaveV1;\\n            _aaveV1BorrowData.length = length;\\n            _aaveV1BorrowData.fee = data.debtFee;\\n            _aaveV1BorrowData.target = data.source;\\n            _aaveV1BorrowData.tokens = tokens;\\n            _aaveV1BorrowData.ctokens = _ctokens;\\n            _aaveV1BorrowData.amts = data.borrowAmts;\\n            _aaveV1BorrowData.borrowRateModes = data.borrowRateModes;\\n            _aaveV1BorrowData.paybackRateModes = data.paybackRateModes;\\n            \\n            paybackAmts = _aaveV1Borrow(_aaveV1BorrowData);\\n            {\\n            _compPayback(length, _ctokens, tokens, paybackAmts);\\n            depositAmts = _compWithdraw(length, _ctokens, tokens, data.withdrawAmts);\\n            }\\n\\n            {\\n                AaveV1DepositData memory _aaveV1DepositData;\\n                \\n                _aaveV1DepositData.aave = aaveV1;\\n                _aaveV1DepositData.aaveCore = aaveCore;\\n                _aaveV1DepositData.length = length;\\n                _aaveV1DepositData.fee = data.collateralFee;\\n                _aaveV1DepositData.tokens = tokens;\\n                _aaveV1DepositData.amts = depositAmts;\\n\\n                _aaveV1Deposit(_aaveV1DepositData);\\n            }\\n        } else if (data.source == Protocol.Compound && data.target == Protocol.AaveV2) {\\n            AaveV2BorrowData memory _aaveV2BorrowData;\\n\\n            _aaveV2BorrowData.aave = aaveV2;\\n            _aaveV2BorrowData.length = length;\\n            _aaveV2BorrowData.fee = data.debtFee;\\n            _aaveV2BorrowData.target = data.source;\\n            _aaveV2BorrowData.tokens = tokens;\\n            _aaveV2BorrowData.ctokens = _ctokens;\\n            _aaveV2BorrowData.amts = data.borrowAmts;\\n            _aaveV2BorrowData.rateModes = data.borrowRateModes;\\n            \\n            paybackAmts = _aaveV2Borrow(_aaveV2BorrowData);\\n            _compPayback(length, _ctokens, tokens, paybackAmts);\\n            depositAmts = _compWithdraw(length, _ctokens, tokens, data.withdrawAmts);\\n            _aaveV2Deposit(aaveV2, aaveData, length, data.collateralFee, tokens, depositAmts);\\n        } else {\\n            revert(\\\"invalid-options\\\");\\n        }\\n    }\\n}\\n\\ncontract ConnectRefinance is RefinanceResolver {\\n     /**\\n     * @dev Connector Details.\\n    */\\n    function connectorID() public pure returns(uint _type, uint _id) {\\n        (_type, _id) = (1, 96);\\n    }\\n\\n    string public name = \\\"Refinance-v1.2\\\";\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"connectorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum Helpers.Protocol\",\"name\":\"source\",\"type\":\"uint8\"},{\"internalType\":\"enum Helpers.Protocol\",\"name\":\"target\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"collateralFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtFee\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"ctokenIds\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowAmts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"withdrawAmts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowRateModes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"paybackRateModes\",\"type\":\"uint256[]\"}],\"internalType\":\"struct RefinanceResolver.RefinanceData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"refinance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"ConnectRefinance","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}