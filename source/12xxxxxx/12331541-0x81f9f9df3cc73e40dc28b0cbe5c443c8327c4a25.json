{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle trees (hash trees),\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\r\n        bytes32 computedHash = leaf;\r\n\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            bytes32 proofElement = proof[i];\r\n\r\n            if (computedHash <= proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n            }\r\n        }\r\n\r\n        // Check if the computed hash (root) is equal to the provided root\r\n        return computedHash == root;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Accounting is an abstract contract that encapsulates the most critical logic in the Hop contracts.\r\n * The accounting system works by using two balances that can only increase `_credit` and `_debit`.\r\n * A bonder's available balance is the total credit minus the total debit. The contract exposes\r\n * two external functions that allows a bonder to stake and unstake and exposes two internal\r\n * functions to its child contracts that allow the child contract to add to the credit \r\n * and debit balance. In addition, child contracts can override `_additionalDebit` to account\r\n * for any additional debit balance in an alternative way. Lastly, it exposes a modifier,\r\n * `requirePositiveBalance`, that can be used by child contracts to ensure the bonder does not\r\n * use more than its available stake.\r\n */\r\n\r\nabstract contract Accounting is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => bool) private _isBonder;\r\n\r\n    mapping(address => uint256) private _credit;\r\n    mapping(address => uint256) private _debit;\r\n\r\n    event Stake (\r\n        address account,\r\n        uint256 amount\r\n    );\r\n\r\n    event Unstake (\r\n        address account,\r\n        uint256 amount\r\n    );\r\n\r\n    event BonderAdded (\r\n        address newBonder\r\n    );\r\n\r\n    event BonderRemoved (\r\n        address previousBonder\r\n    );\r\n\r\n    /* ========== Modifiers ========== */\r\n\r\n    modifier onlyBonder {\r\n        require(_isBonder[msg.sender], \"ACT: Caller is not bonder\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovernance {\r\n        _requireIsGovernance();\r\n        _;\r\n    }\r\n\r\n    /// @dev Used by parent contract to ensure that the bonder is solvent at the end of the transaction.\r\n    modifier requirePositiveBalance {\r\n        _;\r\n        require(getCredit(msg.sender) >= getDebitAndAdditionalDebit(msg.sender), \"ACT: Not enough available credit\");\r\n    }\r\n\r\n    /// @dev Sets the bonder addresses\r\n    constructor(address[] memory bonders) public {\r\n        for (uint256 i = 0; i < bonders.length; i++) {\r\n            _isBonder[bonders[i]] = true;\r\n        }\r\n    }\r\n\r\n    /* ========== Virtual functions ========== */\r\n    /**\r\n     * @dev The following functions are overridden in L1_Bridge and L2_Bridge\r\n     */\r\n    function _transferFromBridge(address recipient, uint256 amount) internal virtual;\r\n    function _transferToBridge(address from, uint256 amount) internal virtual;\r\n    function _requireIsGovernance() internal virtual;\r\n\r\n    /**\r\n     * @dev This function can be optionally overridden by a parent contract to track any additional\r\n     * debit balance in an alternative way.\r\n     */\r\n    function _additionalDebit(address /*bonder*/) internal view virtual returns (uint256) {\r\n        this; // Silence state mutability warning without generating any additional byte code\r\n        return 0;\r\n    }\r\n\r\n    /* ========== Public/external getters ========== */\r\n\r\n    /**\r\n     * @dev Check if address is a Bonder\r\n     * @param maybeBonder The address being checked\r\n     * @return true if address is a Bonder\r\n     */\r\n    function getIsBonder(address maybeBonder) public view returns (bool) {\r\n        return _isBonder[maybeBonder];\r\n    }\r\n\r\n    /**\r\n     * @dev Get the Bonder's credit balance\r\n     * @param bonder The owner of the credit balance being checked\r\n     * @return The credit balance for the Bonder\r\n     */\r\n    function getCredit(address bonder) public view returns (uint256) {\r\n        return _credit[bonder];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the debit balance tracked by `_debit` and does not include `_additionalDebit()`\r\n     * @param bonder The owner of the _debit balance being checked\r\n     * @return The _debit amount for the Bonder\r\n     */\r\n    function getRawDebit(address bonder) external view returns (uint256) {\r\n        return _debit[bonder];\r\n    }\r\n\r\n    /**\r\n     * @dev Get the Bonder's total debit\r\n     * @param bonder The owner of the debit balance being checked\r\n     * @return The Bonder's total debit balance\r\n     */\r\n    function getDebitAndAdditionalDebit(address bonder) public view returns (uint256) {\r\n        return _debit[bonder].add(_additionalDebit(bonder));\r\n    }\r\n\r\n    /* ========== Bonder external functions ========== */\r\n\r\n    /** \r\n     * @dev Allows the bonder to deposit tokens and increase its credit balance\r\n     * @param bonder The address being staked on\r\n     * @param amount The amount being staked\r\n     */\r\n    function stake(address bonder, uint256 amount) external payable nonReentrant {\r\n        require(_isBonder[bonder] == true, \"ACT: Address is not bonder\");\r\n        _transferToBridge(msg.sender, amount);\r\n        _addCredit(bonder, amount);\r\n\r\n        emit Stake(bonder, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the caller to withdraw any available balance and add to their debit balance\r\n     * @param amount The amount being staked\r\n     */\r\n    function unstake(uint256 amount) external requirePositiveBalance nonReentrant {\r\n        _addDebit(msg.sender, amount);\r\n        _transferFromBridge(msg.sender, amount);\r\n\r\n        emit Unstake(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Add Bonder to allowlist\r\n     * @param bonder The address being added as a Bonder\r\n     */\r\n    function addBonder(address bonder) external onlyGovernance {\r\n        require(_isBonder[bonder] == false, \"ACT: Address is already bonder\");\r\n        _isBonder[bonder] = true;\r\n\r\n        emit BonderAdded(bonder);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove Bonder from allowlist\r\n     * @param bonder The address being removed as a Bonder\r\n     */\r\n    function removeBonder(address bonder) external onlyGovernance {\r\n        require(_isBonder[bonder] == true, \"ACT: Address is not bonder\");\r\n        _isBonder[bonder] = false;\r\n\r\n        emit BonderRemoved(bonder);\r\n    }\r\n\r\n    /* ========== Internal functions ========== */\r\n\r\n    function _addCredit(address bonder, uint256 amount) internal {\r\n        _credit[bonder] = _credit[bonder].add(amount);\r\n    }\r\n\r\n    function _addDebit(address bonder, uint256 amount) internal {\r\n        _debit[bonder] = _debit[bonder].add(amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Lib_MerkleTree\r\n * @author River Keefer\r\n */\r\nlibrary Lib_MerkleTree {\r\n\r\n    /**********************\r\n     * Internal Functions *\r\n     **********************/\r\n\r\n    /**\r\n     * Calculates a merkle root for a list of 32-byte leaf hashes.  WARNING: If the number\r\n     * of leaves passed in is not a power of two, it pads out the tree with zero hashes.\r\n     * If you do not know the original length of elements for the tree you are verifying,\r\n     * then this may allow empty leaves past _elements.length to pass a verification check down the line.\r\n     * Note that the _elements argument is modified, therefore it must not be used again afterwards\r\n     * @param _elements Array of hashes from which to generate a merkle root.\r\n     * @return Merkle root of the leaves, with zero hashes for non-powers-of-two (see above).\r\n     */\r\n    function getMerkleRoot(\r\n        bytes32[] memory _elements\r\n    )\r\n        internal\r\n        pure\r\n        returns (\r\n            bytes32\r\n        )\r\n    {\r\n        require(\r\n            _elements.length > 0,\r\n            \"Lib_MerkleTree: Must provide at least one leaf hash.\"\r\n        );\r\n\r\n        if (_elements.length == 1) {\r\n            return _elements[0];\r\n        }\r\n\r\n        uint256[16] memory defaults = [\r\n            0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563,\r\n            0x633dc4d7da7256660a892f8f1604a44b5432649cc8ec5cb3ced4c4e6ac94dd1d,\r\n            0x890740a8eb06ce9be422cb8da5cdafc2b58c0a5e24036c578de2a433c828ff7d,\r\n            0x3b8ec09e026fdc305365dfc94e189a81b38c7597b3d941c279f042e8206e0bd8,\r\n            0xecd50eee38e386bd62be9bedb990706951b65fe053bd9d8a521af753d139e2da,\r\n            0xdefff6d330bb5403f63b14f33b578274160de3a50df4efecf0e0db73bcdd3da5,\r\n            0x617bdd11f7c0a11f49db22f629387a12da7596f9d1704d7465177c63d88ec7d7,\r\n            0x292c23a9aa1d8bea7e2435e555a4a60e379a5a35f3f452bae60121073fb6eead,\r\n            0xe1cea92ed99acdcb045a6726b2f87107e8a61620a232cf4d7d5b5766b3952e10,\r\n            0x7ad66c0a68c72cb89e4fb4303841966e4062a76ab97451e3b9fb526a5ceb7f82,\r\n            0xe026cc5a4aed3c22a58cbd3d2ac754c9352c5436f638042dca99034e83636516,\r\n            0x3d04cffd8b46a874edf5cfae63077de85f849a660426697b06a829c70dd1409c,\r\n            0xad676aa337a485e4728a0b240d92b3ef7b3c372d06d189322bfd5f61f1e7203e,\r\n            0xa2fca4a49658f9fab7aa63289c91b7c7b6c832a6d0e69334ff5b0a3483d09dab,\r\n            0x4ebfd9cd7bca2505f7bef59cc1c12ecc708fff26ae4af19abe852afe9e20c862,\r\n            0x2def10d13dd169f550f578bda343d9717a138562e0093b380a1120789d53cf10\r\n        ];\r\n\r\n        // Reserve memory space for our hashes.\r\n        bytes memory buf = new bytes(64);\r\n\r\n        // We'll need to keep track of left and right siblings.\r\n        bytes32 leftSibling;\r\n        bytes32 rightSibling;\r\n\r\n        // Number of non-empty nodes at the current depth.\r\n        uint256 rowSize = _elements.length;\r\n\r\n        // Current depth, counting from 0 at the leaves\r\n        uint256 depth = 0;\r\n\r\n        // Common sub-expressions\r\n        uint256 halfRowSize;         // rowSize / 2\r\n        bool rowSizeIsOdd;           // rowSize % 2 == 1\r\n\r\n        while (rowSize > 1) {\r\n            halfRowSize = rowSize / 2;\r\n            rowSizeIsOdd = rowSize % 2 == 1;\r\n\r\n            for (uint256 i = 0; i < halfRowSize; i++) {\r\n                leftSibling  = _elements[(2 * i)    ];\r\n                rightSibling = _elements[(2 * i) + 1];\r\n                assembly {\r\n                    mstore(add(buf, 32), leftSibling )\r\n                    mstore(add(buf, 64), rightSibling)\r\n                }\r\n\r\n                _elements[i] = keccak256(buf);\r\n            }\r\n\r\n            if (rowSizeIsOdd) {\r\n                leftSibling  = _elements[rowSize - 1];\r\n                rightSibling = bytes32(defaults[depth]);\r\n                assembly {\r\n                    mstore(add(buf, 32), leftSibling)\r\n                    mstore(add(buf, 64), rightSibling)\r\n                }\r\n\r\n                _elements[halfRowSize] = keccak256(buf);\r\n            }\r\n\r\n            rowSize = halfRowSize + (rowSizeIsOdd ? 1 : 0);\r\n            depth++;\r\n        }\r\n\r\n        return _elements[0];\r\n    }\r\n\r\n    /**\r\n     * Verifies a merkle branch for the given leaf hash.  Assumes the original length\r\n     * of leaves generated is a known, correct input, and does not return true for indices\r\n     * extending past that index (even if _siblings would be otherwise valid.)\r\n     * @param _root The Merkle root to verify against.\r\n     * @param _leaf The leaf hash to verify inclusion of.\r\n     * @param _index The index in the tree of this leaf.\r\n     * @param _siblings Array of sibline nodes in the inclusion proof, starting from depth 0 (bottom of the tree).\r\n     * @param _totalLeaves The total number of leaves originally passed into.\r\n     * @return Whether or not the merkle branch and leaf passes verification.\r\n     */\r\n    function verify(\r\n        bytes32 _root,\r\n        bytes32 _leaf,\r\n        uint256 _index,\r\n        bytes32[] memory _siblings,\r\n        uint256 _totalLeaves\r\n    )\r\n        internal\r\n        pure\r\n        returns (\r\n            bool\r\n        )\r\n    {\r\n        require(\r\n            _totalLeaves > 0,\r\n            \"Lib_MerkleTree: Total leaves must be greater than zero.\"\r\n        );\r\n\r\n        require(\r\n            _index < _totalLeaves,\r\n            \"Lib_MerkleTree: Index out of bounds.\"\r\n        );\r\n\r\n        require(\r\n            _siblings.length == _ceilLog2(_totalLeaves),\r\n            \"Lib_MerkleTree: Total siblings does not correctly correspond to total leaves.\"\r\n        );\r\n\r\n        bytes32 computedRoot = _leaf;\r\n\r\n        for (uint256 i = 0; i < _siblings.length; i++) {\r\n            if ((_index & 1) == 1) {\r\n                computedRoot = keccak256(\r\n                    abi.encodePacked(\r\n                        _siblings[i],\r\n                        computedRoot\r\n                    )\r\n                );\r\n            } else {\r\n                computedRoot = keccak256(\r\n                    abi.encodePacked(\r\n                        computedRoot,\r\n                        _siblings[i]\r\n                    )\r\n                );\r\n            }\r\n\r\n            _index >>= 1;\r\n        }\r\n\r\n        return _root == computedRoot;\r\n    }\r\n\r\n\r\n    /*********************\r\n     * Private Functions *\r\n     *********************/\r\n\r\n    /**\r\n     * Calculates the integer ceiling of the log base 2 of an input.\r\n     * @param _in Unsigned input to calculate the log.\r\n     * @return ceil(log_base_2(_in))\r\n     */\r\n    function _ceilLog2(\r\n        uint256 _in\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256\r\n        )\r\n    {\r\n        require(\r\n            _in > 0,\r\n            \"Lib_MerkleTree: Cannot compute ceil(log_2) of 0.\"\r\n        );\r\n\r\n        if (_in == 1) {\r\n            return 0;\r\n        }\r\n\r\n        // Find the highest set bit (will be floor(log_2)).\r\n        // Borrowed with <3 from https://github.com/ethereum/solidity-examples\r\n        uint256 val = _in;\r\n        uint256 highest = 0;\r\n        for (uint256 i = 128; i >= 1; i >>= 1) {\r\n            if (val & (uint(1) << i) - 1 << i != 0) {\r\n                highest += i;\r\n                val >>= i;\r\n            }\r\n        }\r\n\r\n        // Increment by one if this is not a perfect logarithm.\r\n        if ((uint(1) << highest) != _in) {\r\n            highest += 1;\r\n        }\r\n\r\n        return highest;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Bridge extends the accounting system and encapsulates the logic that is shared by both the\r\n * L1 and L2 Bridges. It allows to TransferRoots to be set by parent contracts and for those\r\n * TransferRoots to be withdrawn against. It also allows the bonder to bond and withdraw Transfers\r\n * directly through `bondWithdrawal` and then settle those bonds against their TransferRoot once it\r\n * has been set.\r\n */\r\n\r\nabstract contract Bridge is Accounting {\r\n    using MerkleProof for bytes32[];\r\n\r\n    struct TransferRoot {\r\n        uint256 total;\r\n        uint256 amountWithdrawn;\r\n        uint256 createdAt;\r\n    }\r\n\r\n    /* ========== Events ========== */\r\n\r\n    event Withdrew(\r\n        bytes32 indexed transferId,\r\n        address indexed recipient,\r\n        uint256 amount,\r\n        bytes32 transferNonce\r\n    );\r\n\r\n    event WithdrawalBonded(\r\n        bytes32 indexed transferId,\r\n        uint256 amount\r\n    );\r\n\r\n    event WithdrawalBondSettled(\r\n        address bonder,\r\n        bytes32 transferId,\r\n        bytes32 rootHash\r\n    );\r\n\r\n    event MultipleWithdrawalsSettled(\r\n        address bonder,\r\n        bytes32 rootHash,\r\n        uint256 totalBondsSettled\r\n    );\r\n\r\n    event TransferRootSet(\r\n        bytes32 rootHash,\r\n        uint256 totalAmount\r\n    );\r\n\r\n    /* ========== State ========== */\r\n\r\n    mapping(bytes32 => TransferRoot) private _transferRoots;\r\n    mapping(bytes32 => bool) private _spentTransferIds;\r\n    mapping(address => mapping(bytes32 => uint256)) private _bondedWithdrawalAmounts;\r\n\r\n    uint256 constant RESCUE_DELAY = 8 weeks;\r\n\r\n    constructor(address[] memory bonders) public Accounting(bonders) {}\r\n\r\n    /* ========== Public Getters ========== */\r\n\r\n    /**\r\n     * @dev Get the hash that represents an individual Transfer.\r\n     * @param chainId The id of the destination chain\r\n     * @param recipient The address receiving the Transfer\r\n     * @param amount The amount being transferred including the `_bonderFee`\r\n     * @param transferNonce Used to avoid transferId collisions\r\n     * @param bonderFee The amount paid to the address that withdraws the Transfer\r\n     * @param amountOutMin The minimum amount received after attempting to swap in the destination\r\n     * AMM market. 0 if no swap is intended.\r\n     * @param deadline The deadline for swapping in the destination AMM market. 0 if no\r\n     * swap is intended.\r\n     */\r\n    function getTransferId(\r\n        uint256 chainId,\r\n        address recipient,\r\n        uint256 amount,\r\n        bytes32 transferNonce,\r\n        uint256 bonderFee,\r\n        uint256 amountOutMin,\r\n        uint256 deadline\r\n    )\r\n        public\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(abi.encode(\r\n            chainId,\r\n            recipient,\r\n            amount,\r\n            transferNonce,\r\n            bonderFee,\r\n            amountOutMin,\r\n            deadline\r\n        ));\r\n    }\r\n\r\n    /**\r\n     * @notice getChainId can be overridden by subclasses if needed for compatibility or testing purposes.\r\n     * @dev Get the current chainId\r\n     * @return chainId The current chainId\r\n     */\r\n    function getChainId() public virtual view returns (uint256 chainId) {\r\n        this; // Silence state mutability warning without generating any additional byte code\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get the TransferRoot id for a given rootHash and totalAmount\r\n     * @param rootHash The merkle root of the TransferRoot\r\n     * @param totalAmount The total of all Transfers in the TransferRoot\r\n     * @return The calculated transferRootId\r\n     */\r\n    function getTransferRootId(bytes32 rootHash, uint256 totalAmount) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(rootHash, totalAmount));\r\n    }\r\n\r\n    /**\r\n     * @dev Get the TransferRoot for a given rootHash and totalAmount\r\n     * @param rootHash The merkle root of the TransferRoot\r\n     * @param totalAmount The total of all Transfers in the TransferRoot\r\n     * @return The TransferRoot with the calculated transferRootId\r\n     */\r\n    function getTransferRoot(bytes32 rootHash, uint256 totalAmount) public view returns (TransferRoot memory) {\r\n        return _transferRoots[getTransferRootId(rootHash, totalAmount)];\r\n    }\r\n\r\n    /**\r\n     * @dev Get the amount bonded for the withdrawal of a transfer\r\n     * @param bonder The Bonder of the withdrawal\r\n     * @param transferId The Transfer's unique identifier\r\n     * @return The amount bonded for a Transfer withdrawal\r\n     */\r\n    function getBondedWithdrawalAmount(address bonder, bytes32 transferId) external view returns (uint256) {\r\n        return _bondedWithdrawalAmounts[bonder][transferId];\r\n    }\r\n\r\n    /**\r\n     * @dev Get the spent status of a transfer ID\r\n     * @param transferId The transfer's unique identifier\r\n     * @return True if the transferId has been spent\r\n     */\r\n    function isTransferIdSpent(bytes32 transferId) external view returns (bool) {\r\n        return _spentTransferIds[transferId];\r\n    }\r\n\r\n    /* ========== User/Relayer External Functions ========== */\r\n\r\n    /**\r\n     * @notice Can be called by anyone (recipient or relayer)\r\n     * @dev Withdraw a Transfer from its destination bridge\r\n     * @param recipient The address receiving the Transfer\r\n     * @param amount The amount being transferred including the `_bonderFee`\r\n     * @param transferNonce Used to avoid transferId collisions\r\n     * @param bonderFee The amount paid to the address that withdraws the Transfer\r\n     * @param amountOutMin The minimum amount received after attempting to swap in the destination\r\n     * AMM market. 0 if no swap is intended. (only used to calculate `transferId` in this function)\r\n     * @param deadline The deadline for swapping in the destination AMM market. 0 if no\r\n     * swap is intended. (only used to calculate `transferId` in this function)\r\n     * @param rootHash The Merkle root of the TransferRoot\r\n     * @param transferRootTotalAmount The total amount being transferred in a TransferRoot\r\n     * @param proof The Merkle proof that proves the Transfer's inclusion in the TransferRoot\r\n     */\r\n    function withdraw(\r\n        address recipient,\r\n        uint256 amount,\r\n        bytes32 transferNonce,\r\n        uint256 bonderFee,\r\n        uint256 amountOutMin,\r\n        uint256 deadline,\r\n        bytes32 rootHash,\r\n        uint256 transferRootTotalAmount,\r\n        bytes32[] calldata proof\r\n    )\r\n        external\r\n        nonReentrant\r\n    {\r\n        bytes32 transferId = getTransferId(\r\n            getChainId(),\r\n            recipient,\r\n            amount,\r\n            transferNonce,\r\n            bonderFee,\r\n            amountOutMin,\r\n            deadline\r\n        );\r\n\r\n        require(proof.verify(rootHash, transferId), \"BRG: Invalid transfer proof\");\r\n        bytes32 transferRootId = getTransferRootId(rootHash, transferRootTotalAmount);\r\n        _addToAmountWithdrawn(transferRootId, amount);\r\n        _fulfillWithdraw(transferId, recipient, amount, uint256(0));\r\n\r\n        emit Withdrew(transferId, recipient, amount, transferNonce);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the bonder to bond individual withdrawals before their TransferRoot has been committed.\r\n     * @param recipient The address receiving the Transfer\r\n     * @param amount The amount being transferred including the `_bonderFee`\r\n     * @param transferNonce Used to avoid transferId collisions\r\n     * @param bonderFee The amount paid to the address that withdraws the Transfer\r\n     */\r\n    function bondWithdrawal(\r\n        address recipient,\r\n        uint256 amount,\r\n        bytes32 transferNonce,\r\n        uint256 bonderFee\r\n    )\r\n        external\r\n        onlyBonder\r\n        requirePositiveBalance\r\n        nonReentrant\r\n    {\r\n        bytes32 transferId = getTransferId(\r\n            getChainId(),\r\n            recipient,\r\n            amount,\r\n            transferNonce,\r\n            bonderFee,\r\n            0,\r\n            0\r\n        );\r\n\r\n        _bondWithdrawal(transferId, amount);\r\n        _fulfillWithdraw(transferId, recipient, amount, bonderFee);\r\n    }\r\n\r\n    /**\r\n     * @dev Refunds the bonders stake from a bonded withdrawal and counts that withdrawal against\r\n     * its TransferRoot.\r\n     * @param bonder The Bonder of the withdrawal\r\n     * @param transferId The Transfer's unique identifier\r\n     * @param rootHash The merkle root of the TransferRoot\r\n     * @param transferRootTotalAmount The total amount being transferred in a TransferRoot\r\n     * @param proof The Merkle proof that proves the Transfer's inclusion in the TransferRoot\r\n     */\r\n    function settleBondedWithdrawal(\r\n        address bonder,\r\n        bytes32 transferId,\r\n        bytes32 rootHash,\r\n        uint256 transferRootTotalAmount,\r\n        bytes32[] calldata proof\r\n    )\r\n        external\r\n    {\r\n        require(proof.verify(rootHash, transferId), \"L2_BRG: Invalid transfer proof\");\r\n        bytes32 transferRootId = getTransferRootId(rootHash, transferRootTotalAmount);\r\n\r\n        uint256 amount = _bondedWithdrawalAmounts[bonder][transferId];\r\n        require(amount > 0, \"L2_BRG: transferId has no bond\");\r\n\r\n        _bondedWithdrawalAmounts[bonder][transferId] = 0;\r\n        _addToAmountWithdrawn(transferRootId, amount);\r\n        _addCredit(bonder, amount);\r\n\r\n        emit WithdrawalBondSettled(bonder, transferId, rootHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Refunds the Bonder for all withdrawals that they bonded in a TransferRoot.\r\n     * @param bonder The address of the Bonder being refunded\r\n     * @param transferIds All transferIds in the TransferRoot in order\r\n     * @param totalAmount The totalAmount of the TransferRoot\r\n     */\r\n    function settleBondedWithdrawals(\r\n        address bonder,\r\n        // transferIds _must_ be calldata or it will be mutated by Lib_MerkleTree.getMerkleRoot\r\n        bytes32[] calldata transferIds,\r\n        uint256 totalAmount\r\n    )\r\n        external\r\n    {\r\n        bytes32 rootHash = Lib_MerkleTree.getMerkleRoot(transferIds);\r\n        bytes32 transferRootId = getTransferRootId(rootHash, totalAmount);\r\n\r\n        uint256 totalBondsSettled = 0;\r\n        for(uint256 i = 0; i < transferIds.length; i++) {\r\n            uint256 transferBondAmount = _bondedWithdrawalAmounts[bonder][transferIds[i]];\r\n            if (transferBondAmount > 0) {\r\n                totalBondsSettled = totalBondsSettled.add(transferBondAmount);\r\n                _bondedWithdrawalAmounts[bonder][transferIds[i]] = 0;\r\n            }\r\n        }\r\n\r\n        _addToAmountWithdrawn(transferRootId, totalBondsSettled);\r\n        _addCredit(bonder, totalBondsSettled);\r\n\r\n        emit MultipleWithdrawalsSettled(bonder, rootHash, totalBondsSettled);\r\n    }\r\n\r\n    /* ========== External TransferRoot Rescue ========== */\r\n\r\n    /**\r\n     * @dev Allows governance to withdraw the remaining amount from a TransferRoot after the rescue delay has passed.\r\n     * @param rootHash the Merkle root of the TransferRoot\r\n     * @param originalAmount The TransferRoot's recorded total\r\n     * @param recipient The address receiving the remaining balance\r\n     */\r\n    function rescueTransferRoot(bytes32 rootHash, uint256 originalAmount, address recipient) external onlyGovernance {\r\n        bytes32 transferRootId = getTransferRootId(rootHash, originalAmount);\r\n        TransferRoot memory transferRoot = getTransferRoot(rootHash, originalAmount);\r\n\r\n        require(transferRoot.createdAt != 0, \"BRG: TransferRoot not found\");\r\n        assert(transferRoot.total == originalAmount);\r\n        uint256 rescueDelayEnd = transferRoot.createdAt.add(RESCUE_DELAY);\r\n        require(block.timestamp >= rescueDelayEnd, \"BRG: TransferRoot cannot be rescued before the Rescue Delay\");\r\n\r\n        uint256 remainingAmount = transferRoot.total.sub(transferRoot.amountWithdrawn);\r\n        _addToAmountWithdrawn(transferRootId, remainingAmount);\r\n        _transferFromBridge(recipient, remainingAmount);\r\n    }\r\n\r\n    /* ========== Internal Functions ========== */\r\n\r\n    function _markTransferSpent(bytes32 transferId) internal {\r\n        require(!_spentTransferIds[transferId], \"BRG: The transfer has already been withdrawn\");\r\n        _spentTransferIds[transferId] = true;\r\n    }\r\n\r\n    function _addToAmountWithdrawn(bytes32 transferRootId, uint256 amount) internal {\r\n        TransferRoot storage transferRoot = _transferRoots[transferRootId];\r\n        require(transferRoot.total > 0, \"BRG: Transfer root not found\");\r\n\r\n        uint256 newAmountWithdrawn = transferRoot.amountWithdrawn.add(amount);\r\n        require(newAmountWithdrawn <= transferRoot.total, \"BRG: Withdrawal exceeds TransferRoot total\");\r\n\r\n        transferRoot.amountWithdrawn = newAmountWithdrawn;\r\n    }\r\n\r\n    function _setTransferRoot(bytes32 rootHash, uint256 totalAmount) internal {\r\n        bytes32 transferRootId = getTransferRootId(rootHash, totalAmount);\r\n        require(_transferRoots[transferRootId].total == 0, \"BRG: Transfer root already set\");\r\n        require(totalAmount > 0, \"BRG: Cannot set TransferRoot totalAmount of 0\");\r\n\r\n        _transferRoots[transferRootId] = TransferRoot(totalAmount, 0, block.timestamp);\r\n\r\n        emit TransferRootSet(rootHash, totalAmount);\r\n    }\r\n\r\n    function _bondWithdrawal(bytes32 transferId, uint256 amount) internal {\r\n        require(_bondedWithdrawalAmounts[msg.sender][transferId] == 0, \"BRG: Withdrawal has already been bonded\");\r\n        _addDebit(msg.sender, amount);\r\n        _bondedWithdrawalAmounts[msg.sender][transferId] = amount;\r\n\r\n        emit WithdrawalBonded(transferId, amount);\r\n    }\r\n\r\n    /* ========== Private Functions ========== */\r\n\r\n    /// @dev Completes the Transfer, distributes the Bonder fee and marks the Transfer as spent.\r\n    function _fulfillWithdraw(\r\n        bytes32 transferId,\r\n        address recipient,\r\n        uint256 amount,\r\n        uint256 bonderFee\r\n    ) private {\r\n        _markTransferSpent(transferId);\r\n        _transferFromBridge(recipient, amount.sub(bonderFee));\r\n        if (bonderFee > 0) {\r\n            _transferFromBridge(msg.sender, bonderFee);\r\n        }\r\n    }\r\n}\r\n\r\ninterface IMessengerWrapper {\r\n    function sendCrossDomainMessage(bytes memory _calldata) external;\r\n    function verifySender(address l1BridgeCaller, bytes memory _data) external;\r\n}\r\n\r\n\r\n/**\r\n * @dev L1_Bridge is responsible for the bonding and challenging of TransferRoots. All TransferRoots\r\n * originate in the L1_Bridge through `bondTransferRoot` and are propagated up to destination L2s.\r\n */\r\n\r\nabstract contract L1_Bridge is Bridge {\r\n\r\n    struct TransferBond {\r\n        address bonder;\r\n        uint256 createdAt;\r\n        uint256 totalAmount;\r\n        uint256 challengeStartTime;\r\n        address challenger;\r\n        bool challengeResolved;\r\n    }\r\n\r\n    /* ========== State ========== */\r\n\r\n    mapping(bytes32 => uint256) public transferRootCommittedAt;\r\n    mapping(bytes32 => TransferBond) public transferBonds;\r\n    mapping(uint256 => mapping(address => uint256)) public timeSlotToAmountBonded;\r\n    mapping(uint256 => uint256) public chainBalance;\r\n\r\n    /* ========== Config State ========== */\r\n\r\n    address public governance;\r\n    mapping(uint256 => IMessengerWrapper) public crossDomainMessengerWrappers;\r\n    mapping(uint256 => bool) public isChainIdPaused;\r\n    uint256 public challengePeriod = 1 days;\r\n    uint256 public challengeResolutionPeriod = 10 days;\r\n    uint256 public minTransferRootBondDelay = 15 minutes;\r\n    \r\n    uint256 public constant CHALLENGE_AMOUNT_DIVISOR = 10;\r\n    uint256 public constant TIME_SLOT_SIZE = 4 hours;\r\n\r\n    /* ========== Events ========== */\r\n\r\n    event TransferRootBonded (\r\n        bytes32 indexed root,\r\n        uint256 amount\r\n    );\r\n\r\n    event TransferRootConfirmed(\r\n        uint256 originChainId,\r\n        uint256 destinationChainId,\r\n        bytes32 rootHash,\r\n        uint256 totalAmount\r\n    );\r\n\r\n    event TransferBondChallenged(\r\n        bytes32 transferRootId,\r\n        bytes32 rootHash,\r\n        uint256 originalAmount\r\n    );\r\n\r\n    event ChallengeResolved(\r\n        bytes32 transferRootId,\r\n        bytes32 rootHash,\r\n        uint256 originalAmount\r\n    );\r\n\r\n    /* ========== Modifiers ========== */\r\n\r\n    modifier onlyL2Bridge(uint256 chainId) {\r\n        IMessengerWrapper messengerWrapper = crossDomainMessengerWrappers[chainId];\r\n        messengerWrapper.verifySender(msg.sender, msg.data);\r\n        _;\r\n    }\r\n\r\n    constructor (address[] memory bonders, address _governance) public Bridge(bonders) {\r\n        governance = _governance;\r\n    }\r\n\r\n    /* ========== Send Functions ========== */\r\n\r\n    /**\r\n     * @notice `amountOutMin` and `deadline` should be 0 when no swap is intended at the destination.\r\n     * @notice `amount` is the total amount the user wants to send including the relayer fee\r\n     * @dev Send tokens to a supported layer-2 to mint hToken and optionally swap the hToken in the\r\n     * AMM at the destination.\r\n     * @param chainId The chainId of the destination chain\r\n     * @param recipient The address receiving funds at the destination\r\n     * @param amount The amount being sent\r\n     * @param amountOutMin The minimum amount received after attempting to swap in the destination\r\n     * AMM market. 0 if no swap is intended.\r\n     * @param deadline The deadline for swapping in the destination AMM market. 0 if no\r\n     * swap is intended.\r\n     * @param relayer The address of the at the destination.\r\n     * @param relayerFee The amount distributed to the relayer at the destination. This is subtracted from the `amount`.\r\n     */\r\n    function sendToL2(\r\n        uint256 chainId,\r\n        address recipient,\r\n        uint256 amount,\r\n        uint256 amountOutMin,\r\n        uint256 deadline,\r\n        address relayer,\r\n        uint256 relayerFee\r\n    )\r\n        external\r\n        payable\r\n    {\r\n        IMessengerWrapper messengerWrapper = crossDomainMessengerWrappers[chainId];\r\n        require(messengerWrapper != IMessengerWrapper(0), \"L1_BRG: chainId not supported\");\r\n        require(isChainIdPaused[chainId] == false, \"L1_BRG: Sends to this chainId are paused\");\r\n        require(amount > 0, \"L1_BRG: Must transfer a non-zero amount\");\r\n        require(amount >= relayerFee, \"L1_BRG: Relayer fee cannot exceed amount\");\r\n\r\n        _transferToBridge(msg.sender, amount);\r\n\r\n        bytes memory message = abi.encodeWithSignature(\r\n            \"distribute(address,uint256,uint256,uint256,address,uint256)\",\r\n            recipient,\r\n            amount,\r\n            amountOutMin,\r\n            deadline,\r\n            relayer,\r\n            relayerFee\r\n        );\r\n\r\n        chainBalance[chainId] = chainBalance[chainId].add(amount);\r\n        messengerWrapper.sendCrossDomainMessage(message);\r\n    }\r\n\r\n    /* ========== TransferRoot Functions ========== */\r\n\r\n    /**\r\n     * @dev Setting a TransferRoot is a two step process.\r\n     * @dev   1. The TransferRoot is bonded with `bondTransferRoot`. Withdrawals can now begin on L1\r\n     * @dev      and recipient L2's\r\n     * @dev   2. The TransferRoot is confirmed after `confirmTransferRoot` is called by the l2 bridge\r\n     * @dev      where the TransferRoot originated.\r\n     */\r\n\r\n    /**\r\n     * @dev Used by the bonder to bond a TransferRoot and propagate it up to destination L2s\r\n     * @param rootHash The Merkle root of the TransferRoot Merkle tree\r\n     * @param destinationChainId The id of the destination chain\r\n     * @param totalAmount The amount destined for the destination chain\r\n     */\r\n    function bondTransferRoot(\r\n        bytes32 rootHash,\r\n        uint256 destinationChainId,\r\n        uint256 totalAmount\r\n    )\r\n        external\r\n        onlyBonder\r\n        requirePositiveBalance\r\n    {\r\n        bytes32 transferRootId = getTransferRootId(rootHash, totalAmount);\r\n        require(transferRootCommittedAt[transferRootId] == 0, \"L1_BRG: TransferRoot has already been confirmed\");\r\n        require(transferBonds[transferRootId].createdAt == 0, \"L1_BRG: TransferRoot has already been bonded\");\r\n\r\n        uint256 currentTimeSlot = getTimeSlot(block.timestamp);\r\n        uint256 bondAmount = getBondForTransferAmount(totalAmount);\r\n        timeSlotToAmountBonded[currentTimeSlot][msg.sender] = timeSlotToAmountBonded[currentTimeSlot][msg.sender].add(bondAmount);\r\n\r\n        transferBonds[transferRootId] = TransferBond(\r\n            msg.sender,\r\n            block.timestamp,\r\n            totalAmount,\r\n            uint256(0),\r\n            address(0),\r\n            false\r\n        );\r\n\r\n        _distributeTransferRoot(rootHash, destinationChainId, totalAmount);\r\n\r\n        emit TransferRootBonded(rootHash, totalAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Used by an L2 bridge to confirm a TransferRoot via cross-domain message. Once a TransferRoot\r\n     * has been confirmed, any challenge against that TransferRoot can be resolved as unsuccessful.\r\n     * @param originChainId The id of the origin chain\r\n     * @param rootHash The Merkle root of the TransferRoot Merkle tree\r\n     * @param destinationChainId The id of the destination chain\r\n     * @param totalAmount The amount destined for each destination chain\r\n     * @param rootCommittedAt The block timestamp when the TransferRoot was committed on its origin chain\r\n     */\r\n    function confirmTransferRoot(\r\n        uint256 originChainId,\r\n        bytes32 rootHash,\r\n        uint256 destinationChainId,\r\n        uint256 totalAmount,\r\n        uint256 rootCommittedAt\r\n    )\r\n        external\r\n        onlyL2Bridge(originChainId)\r\n    {\r\n        bytes32 transferRootId = getTransferRootId(rootHash, totalAmount);\r\n        require(transferRootCommittedAt[transferRootId] == 0, \"L1_BRG: TransferRoot already confirmed\");\r\n        require(rootCommittedAt > 0, \"L1_BRG: rootCommittedAt must be greater than 0\");\r\n        transferRootCommittedAt[transferRootId] = rootCommittedAt;\r\n        chainBalance[originChainId] = chainBalance[originChainId].sub(totalAmount, \"L1_BRG: Amount exceeds chainBalance. This indicates a layer-2 failure.\");\r\n\r\n        // If the TransferRoot was never bonded, distribute the TransferRoot.\r\n        TransferBond storage transferBond = transferBonds[transferRootId];\r\n        if (transferBond.createdAt == 0) {\r\n            _distributeTransferRoot(rootHash, destinationChainId, totalAmount);\r\n        }\r\n\r\n        emit TransferRootConfirmed(originChainId, destinationChainId, rootHash, totalAmount);\r\n    }\r\n\r\n    function _distributeTransferRoot(\r\n        bytes32 rootHash,\r\n        uint256 chainId,\r\n        uint256 totalAmount\r\n    )\r\n        internal\r\n    {\r\n        // Set TransferRoot on recipient Bridge\r\n        if (chainId == getChainId()) {\r\n            // Set L1 TransferRoot\r\n            _setTransferRoot(rootHash, totalAmount);\r\n        } else {\r\n            IMessengerWrapper messengerWrapper = crossDomainMessengerWrappers[chainId];\r\n            require(messengerWrapper != IMessengerWrapper(0), \"L1_BRG: chainId not supported\");\r\n\r\n            // Set L2 TransferRoot\r\n            bytes memory setTransferRootMessage = abi.encodeWithSignature(\r\n                \"setTransferRoot(bytes32,uint256)\",\r\n                rootHash,\r\n                totalAmount\r\n            );\r\n            messengerWrapper.sendCrossDomainMessage(setTransferRootMessage);\r\n        }\r\n    }\r\n\r\n    /* ========== External TransferRoot Challenges ========== */\r\n\r\n    /**\r\n     * @dev Challenge a TransferRoot believed to be fraudulent\r\n     * @param rootHash The Merkle root of the TransferRoot Merkle tree\r\n     * @param originalAmount The total amount bonded for this TransferRoot\r\n     */\r\n    function challengeTransferBond(bytes32 rootHash, uint256 originalAmount) external payable {\r\n        bytes32 transferRootId = getTransferRootId(rootHash, originalAmount);\r\n        TransferBond storage transferBond = transferBonds[transferRootId];\r\n\r\n        require(transferRootCommittedAt[transferRootId] == 0, \"L1_BRG: TransferRoot has already been confirmed\");\r\n        require(transferBond.createdAt != 0, \"L1_BRG: TransferRoot has not been bonded\");\r\n        uint256 challengePeriodEnd = transferBond.createdAt.add(challengePeriod);\r\n        require(challengePeriodEnd >= block.timestamp, \"L1_BRG: TransferRoot cannot be challenged after challenge period\");\r\n        require(transferBond.challengeStartTime == 0, \"L1_BRG: TransferRoot already challenged\");\r\n\r\n        transferBond.challengeStartTime = block.timestamp;\r\n        transferBond.challenger = msg.sender;\r\n\r\n        // Move amount from timeSlotToAmountBonded to debit\r\n        uint256 timeSlot = getTimeSlot(transferBond.createdAt);\r\n        uint256 bondAmount = getBondForTransferAmount(originalAmount);\r\n        address bonder = transferBond.bonder;\r\n        timeSlotToAmountBonded[timeSlot][bonder] = timeSlotToAmountBonded[timeSlot][bonder].sub(bondAmount);\r\n\r\n        _addDebit(transferBond.bonder, bondAmount);\r\n\r\n        // Get stake for challenge\r\n        uint256 challengeStakeAmount = getChallengeAmountForTransferAmount(originalAmount);\r\n        _transferToBridge(msg.sender, challengeStakeAmount);\r\n\r\n        emit TransferBondChallenged(transferRootId, rootHash, originalAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Resolve a challenge after the `challengeResolutionPeriod` has passed\r\n     * @param rootHash The Merkle root of the TransferRoot Merkle tree\r\n     * @param originalAmount The total amount originally bonded for this TransferRoot\r\n     */\r\n    function resolveChallenge(bytes32 rootHash, uint256 originalAmount) external {\r\n        bytes32 transferRootId = getTransferRootId(rootHash, originalAmount);\r\n        TransferBond storage transferBond = transferBonds[transferRootId];\r\n\r\n        require(transferBond.challengeStartTime != 0, \"L1_BRG: TransferRoot has not been challenged\");\r\n        require(block.timestamp > transferBond.challengeStartTime.add(challengeResolutionPeriod), \"L1_BRG: Challenge period has not ended\");\r\n        require(transferBond.challengeResolved == false, \"L1_BRG: TransferRoot already resolved\");\r\n        transferBond.challengeResolved = true;\r\n\r\n        uint256 challengeStakeAmount = getChallengeAmountForTransferAmount(originalAmount);\r\n\r\n        if (transferRootCommittedAt[transferRootId] > 0) {\r\n            // Invalid challenge\r\n\r\n            if (transferBond.createdAt > transferRootCommittedAt[transferRootId].add(minTransferRootBondDelay)) {\r\n                // Credit the bonder back with the bond amount plus the challenger's stake\r\n                _addCredit(transferBond.bonder, getBondForTransferAmount(originalAmount).add(challengeStakeAmount));\r\n            } else {\r\n                // If the TransferRoot was bonded before it was committed, the challenger and Bonder\r\n                // get their stake back. This discourages Bonders from tricking challengers into\r\n                // challenging a valid TransferRoots that haven't yet been committed. It also ensures\r\n                // that Bonders are not punished if a TransferRoot is bonded too soon in error.\r\n\r\n                // Return the challenger's stake\r\n                _addCredit(transferBond.challenger, challengeStakeAmount);\r\n                // Credit the bonder back with the bond amount\r\n                _addCredit(transferBond.bonder, getBondForTransferAmount(originalAmount));\r\n            }\r\n        } else {\r\n            // Valid challenge\r\n            // Burn 25% of the challengers stake\r\n            _transferFromBridge(address(0xdead), challengeStakeAmount.mul(1).div(4));\r\n            // Reward challenger with the remaining 75% of their stake plus 100% of the Bonder's stake\r\n            _addCredit(transferBond.challenger, challengeStakeAmount.mul(7).div(4));\r\n        }\r\n\r\n        emit ChallengeResolved(transferRootId, rootHash, originalAmount);\r\n    }\r\n\r\n    /* ========== Override Functions ========== */\r\n\r\n    function _additionalDebit(address bonder) internal view override returns (uint256) {\r\n        uint256 currentTimeSlot = getTimeSlot(block.timestamp);\r\n        uint256 bonded = 0;\r\n\r\n        uint256 numTimeSlots = challengePeriod / TIME_SLOT_SIZE;\r\n        for (uint256 i = 0; i < numTimeSlots; i++) {\r\n            bonded = bonded.add(timeSlotToAmountBonded[currentTimeSlot - i][bonder]);\r\n        }\r\n\r\n        return bonded;\r\n    }\r\n\r\n    function _requireIsGovernance() internal override {\r\n        require(governance == msg.sender, \"L1_BRG: Caller is not the owner\");\r\n    }\r\n\r\n    /* ========== External Config Management Setters ========== */\r\n\r\n    function setGovernance(address _newGovernance) external onlyGovernance {\r\n        require(_newGovernance != address(0), \"L1_BRG: _newGovernance cannot be address(0)\");\r\n        governance = _newGovernance;\r\n    }\r\n\r\n    function setCrossDomainMessengerWrapper(uint256 chainId, IMessengerWrapper _crossDomainMessengerWrapper) external onlyGovernance {\r\n        crossDomainMessengerWrappers[chainId] = _crossDomainMessengerWrapper;\r\n    }\r\n\r\n    function setChainIdDepositsPaused(uint256 chainId, bool isPaused) external onlyGovernance {\r\n        isChainIdPaused[chainId] = isPaused;\r\n    }\r\n\r\n    function setChallengePeriod(uint256 _challengePeriod) external onlyGovernance {\r\n        require(_challengePeriod % TIME_SLOT_SIZE == 0, \"L1_BRG: challengePeriod must be divisible by TIME_SLOT_SIZE\");\r\n\r\n        challengePeriod = _challengePeriod;\r\n    }\r\n\r\n    function setChallengeResolutionPeriod(uint256 _challengeResolutionPeriod) external onlyGovernance {\r\n        challengeResolutionPeriod = _challengeResolutionPeriod;\r\n    }\r\n\r\n    function setMinTransferRootBondDelay(uint256 _minTransferRootBondDelay) external onlyGovernance {\r\n        minTransferRootBondDelay = _minTransferRootBondDelay;\r\n    }\r\n\r\n    /* ========== Public Getters ========== */\r\n\r\n    function getBondForTransferAmount(uint256 amount) public view returns (uint256) {\r\n        // Bond covers amount plus a bounty to pay a potential challenger\r\n        return amount.add(getChallengeAmountForTransferAmount(amount));\r\n    }\r\n\r\n    function getChallengeAmountForTransferAmount(uint256 amount) public view returns (uint256) {\r\n        // Bond covers amount plus a bounty to pay a potential challenger\r\n        return amount.div(CHALLENGE_AMOUNT_DIVISOR);\r\n    }\r\n\r\n    function getTimeSlot(uint256 time) public pure returns (uint256) {\r\n        return time / TIME_SLOT_SIZE;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev A L1_Bridge that uses an ERC20 as the canonical token\r\n */\r\n\r\ncontract L1_ERC20_Bridge is L1_Bridge {\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public immutable l1CanonicalToken;\r\n\r\n    constructor (IERC20 _l1CanonicalToken, address[] memory bonders, address _governance) public L1_Bridge(bonders, _governance) {\r\n        l1CanonicalToken = _l1CanonicalToken;\r\n    }\r\n\r\n    /* ========== Override Functions ========== */\r\n\r\n    function _transferFromBridge(address recipient, uint256 amount) internal override {\r\n        l1CanonicalToken.safeTransfer(recipient, amount);\r\n    }\r\n\r\n    function _transferToBridge(address from, uint256 amount) internal override {\r\n        l1CanonicalToken.safeTransferFrom(from, address(this), amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_l1CanonicalToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"bonders\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBonder\",\"type\":\"address\"}],\"name\":\"BonderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousBonder\",\"type\":\"address\"}],\"name\":\"BonderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transferRootId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalAmount\",\"type\":\"uint256\"}],\"name\":\"ChallengeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBondsSettled\",\"type\":\"uint256\"}],\"name\":\"MultipleWithdrawalsSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transferRootId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalAmount\",\"type\":\"uint256\"}],\"name\":\"TransferBondChallenged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferRootBonded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"TransferRootConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"TransferRootSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"}],\"name\":\"WithdrawalBondSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalBonded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transferNonce\",\"type\":\"bytes32\"}],\"name\":\"Withdrew\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHALLENGE_AMOUNT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_SLOT_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"}],\"name\":\"addBonder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"bondTransferRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transferNonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bonderFee\",\"type\":\"uint256\"}],\"name\":\"bondWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chainBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeResolutionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"originalAmount\",\"type\":\"uint256\"}],\"name\":\"challengeTransferBond\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"originChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rootCommittedAt\",\"type\":\"uint256\"}],\"name\":\"confirmTransferRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"crossDomainMessengerWrappers\",\"outputs\":[{\"internalType\":\"contract IMessengerWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBondForTransferAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"}],\"name\":\"getBondedWithdrawalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getChallengeAmountForTransferAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"}],\"name\":\"getCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"}],\"name\":\"getDebitAndAdditionalDebit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maybeBonder\",\"type\":\"address\"}],\"name\":\"getIsBonder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"}],\"name\":\"getRawDebit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"getTimeSlot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transferNonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bonderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"getTransferId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"getTransferRoot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Bridge.TransferRoot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"getTransferRootId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isChainIdPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"}],\"name\":\"isTransferIdSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1CanonicalToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTransferRootBondDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"}],\"name\":\"removeBonder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"originalAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"rescueTransferRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"originalAmount\",\"type\":\"uint256\"}],\"name\":\"resolveChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"}],\"name\":\"sendToL2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"setChainIdDepositsPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengePeriod\",\"type\":\"uint256\"}],\"name\":\"setChallengePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengeResolutionPeriod\",\"type\":\"uint256\"}],\"name\":\"setChallengeResolutionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"contract IMessengerWrapper\",\"name\":\"_crossDomainMessengerWrapper\",\"type\":\"address\"}],\"name\":\"setCrossDomainMessengerWrapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTransferRootBondDelay\",\"type\":\"uint256\"}],\"name\":\"setMinTransferRootBondDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"transferRootTotalAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"settleBondedWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"transferIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"settleBondedWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"timeSlotToAmountBonded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"transferBonds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"challengeStartTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"challengeResolved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"transferRootCommittedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transferNonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bonderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"transferRootTotalAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"L1_ERC20_Bridge","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000000600000000000000000000000002a6303e6b99d451df3566068ebb110708335658f00000000000000000000000000000000000000000000000000000000000000010000000000000000000000002a6303e6b99d451df3566068ebb110708335658f","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://aec4e54a2c644da221ff52da8d3d0d48ce84cc34fd964c9178a73585be9b3113"}]}