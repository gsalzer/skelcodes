{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n// File: StakeROTS.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\ninterface IOracle{\r\n    function getPrice() external view returns(uint256);\r\n}\r\n\r\n\r\ncontract Staketoken is Context,Ownable{\r\n    using SafeMath for uint256;\r\n    \r\n\r\n    \r\n    struct StakeType1{\r\n        uint256 dividentStart;\r\n        uint256 claimedDividents;\r\n    }\r\n    struct StakeType2{\r\n        uint256 dividentStart;\r\n        uint256 claimedDividents;\r\n        bytes32 referredStake;\r\n    }\r\n    struct StakeType3{\r\n        uint256 dividentStart;\r\n        uint256 claimedDividents;\r\n        bytes32 referredStake;\r\n    }\r\n    struct TimeLock{\r\n        uint256 amount;\r\n        uint256 unlockTime;\r\n    }\r\n    struct StakeMeta{\r\n        address initiator;\r\n        uint256 nonce;\r\n        uint256 timestamp;\r\n        uint256 amount;\r\n        bool referral;\r\n        bool extention;\r\n        bool expired;\r\n    }\r\n    struct ReferralTree{\r\n        address r1;\r\n        address r2;\r\n        address r3;\r\n        address r4;\r\n        address r5;\r\n        address r6;\r\n        address r7;\r\n        address r8;\r\n        address r9;\r\n        address r10;\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    mapping (bytes32 => StakeMeta) private _stakeHub;\r\n    mapping (bytes32 => StakeType1) private _stake1;\r\n    mapping (bytes32 => StakeType2) private _stake2;\r\n    mapping (bytes32 => StakeType3) private _stake3;\r\n    mapping (bytes32 => TimeLock) private _timeLock;\r\n    mapping (address => uint256) private _nonce;\r\n    mapping (bytes32 => uint256) private _claimedRewards;\r\n    \r\n    \r\n    \r\n    mapping (address => uint256) private EWallet;\r\n    mapping (address => bool) private registered;\r\n    mapping (address => uint256) private _stakeAmount;\r\n    mapping (address => uint256) private _RstakeAmount;\r\n    \r\n    \r\n    mapping (uint256 => uint256) private _dividents;\r\n    mapping (address => bool) private _registered;\r\n    mapping (address => ReferralTree) private _referrals;\r\n    mapping (address => uint256) private _directCount;\r\n    mapping (address => uint256) private _registerTime;\r\n    mapping (address => bool) private _cashback;\r\n    \r\n    \r\n    \r\n    uint256 private Supply;\r\n    address private ROTHS;\r\n    address private admin;\r\n    address private oracle;\r\n    uint256 public lastDivident;\r\n    uint256 private _totalStaked;\r\n    \r\n    function getSupply() public view returns (uint256){\r\n        return Supply;\r\n    }\r\n    function getClaimedRewards(bytes32 stakeid) public view returns (uint256){\r\n        return _claimedRewards[stakeid];\r\n    }\r\n    \r\n    function getStaked() public view returns (uint256) {\r\n        return _totalStaked;\r\n    }\r\n    \r\n     constructor(address token) {\r\n        ROTHS = token;\r\n        Supply = 895 * 1e5 * 1e18;\r\n        admin = msg.sender;\r\n        lastDivident = getDividentId();\r\n    }\r\n    \r\n    \r\n    modifier isRegistered{\r\n        require(getRegistered(_msgSender()), \"User not Registered.\");\r\n        _updateDivident();\r\n        _;\r\n    }\r\n    \r\n    \r\n    function min(uint256 a,\r\n        uint256 b) internal pure returns (uint256 minN) {\r\n        if (a <= b) minN = a;\r\n        if (b < a) minN = b;\r\n    }\r\n    \r\n    \r\n    function getDividents(uint256 dividentId) public view returns (uint256) {\r\n        require(_dividents[dividentId] != 0, \"Divident Id does not exist.\");\r\n        return _dividents[dividentId];\r\n    }\r\n    function _updateDivident() public virtual {\r\n        while (getDividentId() > lastDivident) {\r\n            lastDivident++;\r\n            _dividents[lastDivident] = _dividents[lastDivident - 1] + IOracle(oracle).getPrice() * 5 / 1e3;\r\n        }\r\n    }\r\n    function getDividentId() internal view returns(uint256){\r\n        return block.timestamp/60/60/24;\r\n    }\r\n    \r\n    \r\n   \r\n    \r\n    function setOracle(address _oracle) public onlyOwner {\r\n        oracle=_oracle;\r\n    }\r\n    \r\n    \r\n    \r\n    function register(address refree) public virtual {\r\n        register();\r\n        _setRefree(_msgSender(),refree);\r\n    }\r\n    function register() public virtual {\r\n        require(_registered[_msgSender()] == false, \"User already registered.\");\r\n        IERC20(ROTHS).transferFrom(_msgSender(),admin,getTokens(25*1e18));\r\n        _registerTime[_msgSender()]=block.timestamp;\r\n        _register(_msgSender());\r\n    }\r\n    function getRegistered(address user) public view virtual returns(bool){\r\n        return _registered[user];\r\n    }\r\n    function _register(address user) internal virtual {\r\n        _registered[user]=true;\r\n    }\r\n    \r\n    function getrefree (address user) public view returns(address) {\r\n        return _referrals[user].r1;\r\n        \r\n    }\r\n    function _setRefree(address user,\r\n        address refree) internal virtual {\r\n        _directCount[refree]++;\r\n        _referrals[user].r1=refree;\r\n        _referrals[user].r2=_referrals[refree].r1;\r\n        _referrals[user].r3=_referrals[refree].r2;\r\n        _referrals[user].r4=_referrals[refree].r3;\r\n        _referrals[user].r5=_referrals[refree].r4;\r\n        _referrals[user].r6=_referrals[refree].r5;\r\n        _referrals[user].r7=_referrals[refree].r6;\r\n        _referrals[user].r8=_referrals[refree].r7;\r\n        _referrals[user].r9=_referrals[refree].r8;\r\n        _referrals[user].r10=_referrals[refree].r9;\r\n        if (_directCount[refree]==2){\r\n            createStake(refree, getTokens(50*1e18), false, true);\r\n        }\r\n        if (_directCount[refree] >= 5 && block.timestamp-_registerTime[refree] <= 7 days && _cashback[refree] == false){\r\n            uint256 tokens=getTokens(25*1e18);\r\n            transferToEWallet(refree,tokens);\r\n            _cashback[refree]=true;\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function getTokens(uint256 usdIn) internal view virtual returns (uint256 amount) {\r\n        amount= IOracle(oracle).getPrice() * usdIn / 1e18;\r\n    }\r\n    function getEWalletBalance(address user) public view returns(uint256){\r\n        return EWallet[user];\r\n    }\r\n    function getStakeAmount(address user) public view returns(uint256){\r\n        return _stakeAmount[user];\r\n    }\r\n    function getRStakeAmount(address user) public view returns(uint256){\r\n        return _RstakeAmount[user];\r\n    }\r\n    function getDirectCount(address user) public view returns(uint256){\r\n        return _directCount[user];\r\n    }\r\n    function getRegisterTime(address user) public view returns(uint256){\r\n        return _registerTime[user];\r\n    }\r\n    function getNonce(address user) public view virtual returns (uint256) {\r\n        return _nonce[user]+1;\r\n    }\r\n    function isStakeActive(bytes32 stakeid) public view returns(bool) {\r\n        return !_stakeHub[stakeid].expired;\r\n    }\r\n    \r\n    function getStakeMeta(bytes32 stakeid) public view returns(address initiator,\r\n        uint256 nonce,\r\n        uint256 timestamp,\r\n        uint256 amount,\r\n        bool referral,\r\n        bool extention,\r\n        bool expired) {\r\n            initiator = _stakeHub[stakeid].initiator;\r\n            nonce = _stakeHub[stakeid].nonce;\r\n            timestamp = _stakeHub[stakeid].timestamp;\r\n            amount = _stakeHub[stakeid].amount;\r\n            referral = _stakeHub[stakeid].referral;\r\n            extention = _stakeHub[stakeid].extention;\r\n            expired = _stakeHub[stakeid].expired;\r\n                 \r\n    }\r\n    function getStakeT1(bytes32 stakeid) public view returns(uint256 dividentStart,\r\n        uint256 claimedDividents) {\r\n            dividentStart = _stake1[stakeid].dividentStart;\r\n            claimedDividents = _stake1[stakeid].claimedDividents;\r\n    }\r\n    function getStakeT2(bytes32 stakeid) public view returns(uint256 dividentStart,\r\n        uint256 claimedDividents,\r\n        bytes32 referredStake) {\r\n            dividentStart = _stake2[stakeid].dividentStart;\r\n            claimedDividents = _stake2[stakeid].claimedDividents;\r\n            referredStake = _stake2[stakeid].referredStake;\r\n    }\r\n    function getStakeT3(bytes32 stakeid) public view returns(uint256 dividentStart,\r\n        uint256 claimedDividents,\r\n        bytes32 referredStake) {\r\n            dividentStart = _stake3[stakeid].dividentStart;\r\n            claimedDividents = _stake3[stakeid].claimedDividents;\r\n            referredStake = _stake3[stakeid].referredStake;\r\n    }\r\n    function getTimeLock(bytes32 stakeid) public view returns (uint256 amount, uint256 unlockTime) {\r\n        amount = _timeLock[stakeid].amount;\r\n        unlockTime = _timeLock[stakeid].unlockTime;\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    function transferToEWallet(address user,\r\n        uint256 amount) internal {\r\n        Supply = Supply.sub(amount);\r\n        EWallet[user] = EWallet[user].add(amount);\r\n    }\r\n    \r\n    function createStake(address user,\r\n        uint256 amount,\r\n        bool referral,\r\n        bool extention) internal virtual returns (bytes32 stakeid) {\r\n        stakeid = createStake(user, amount, referral, extention, bytes32(0));\r\n    }\r\n    function createStake(address user,\r\n        uint256 amount,\r\n        bool referral,\r\n        bool extention,\r\n        bytes32 referredstakeid) internal virtual returns (bytes32 stakeid) {\r\n        stakeid=_createStakeMeta(user, amount, referral, extention);\r\n        if (referral == false && extention == false) {\r\n            _createTimeStake(stakeid, amount, block.timestamp + 300 days);\r\n            _createStakeT1(stakeid);\r\n        } else if (referral == false && extention == true) {\r\n            _createTimeStake(stakeid, amount, block.timestamp + 100 days);\r\n        } else if (referral == true && extention == false) {\r\n            _createStakeT2(stakeid, referredstakeid);\r\n        } else {\r\n            _createTimeStake(stakeid, amount, block.timestamp + 300 days);\r\n            _createStakeT3(stakeid, referredstakeid);\r\n        }\r\n        \r\n    }\r\n    \r\n    function calcStakeHash(address user, uint256 nonce) public pure returns(bytes32){\r\n        return keccak256(abi.encodePacked(user,nonce));\r\n    }\r\n    \r\n    \r\n    function _createStakeMeta(address user,\r\n        uint256 amount,\r\n         bool referral,\r\n        bool extention) internal virtual returns (bytes32 stakeid){\r\n        uint256 nonce = getNonce(user);\r\n        stakeid= keccak256(abi.encodePacked(user,nonce));\r\n        _stakeHub[stakeid].initiator = user;\r\n        _stakeHub[stakeid].amount = amount;\r\n        _stakeHub[stakeid].nonce = nonce;\r\n        _stakeHub[stakeid].timestamp = block.timestamp;\r\n        _stakeHub[stakeid].referral=referral;\r\n        _stakeHub[stakeid].extention=extention;\r\n        _nonce[user]++;\r\n    }\r\n    function _createTimeStake(bytes32 stakeid,\r\n        uint256 amount,\r\n        uint256 UnlockTime) internal virtual {\r\n        _timeLock[stakeid].unlockTime = UnlockTime;\r\n        _timeLock[stakeid].amount = amount;\r\n    }\r\n    function _createStakeT1(bytes32 stakeid) internal virtual {\r\n        _stake1[stakeid].dividentStart = getDividentId();\r\n        _stake1[stakeid].claimedDividents = getDividentId();\r\n        \r\n    }\r\n    function _createStakeT2(bytes32 stakeid,\r\n        bytes32 referredstakeid) internal virtual {\r\n        _stake2[stakeid].dividentStart = getDividentId();\r\n        _stake2[stakeid].claimedDividents = getDividentId();\r\n        _stake2[stakeid].referredStake = referredstakeid;\r\n    }\r\n    function _createStakeT3(bytes32 stakeid,\r\n        bytes32 referredstakeid) internal virtual {\r\n        _stake3[stakeid].dividentStart = getDividentId();\r\n        _stake3[stakeid].claimedDividents = getDividentId();\r\n        _stake3[stakeid].referredStake = referredstakeid;\r\n    }\r\n    function _createReferralStakes(address refree,\r\n        uint256 direct,\r\n        uint256 kickback,\r\n        uint256 amount,\r\n        bytes32 referredstakeid) internal virtual {\r\n        if (_stakeAmount[refree]>=_stakeAmount[_msgSender()] && _directCount[refree] >= direct){\r\n            createStake(refree, amount * kickback / 100, true, false, referredstakeid);\r\n            _RstakeAmount[refree]=_RstakeAmount[refree]+(amount * kickback / 100);\r\n        }\r\n    }\r\n    \r\n    function claimStake(bytes32 stakeid) internal virtual {\r\n        require(_stakeHub[stakeid].expired == false, \"Stake has expired.\");\r\n        bool referral = _stakeHub[stakeid].referral;\r\n        bool extention = _stakeHub[stakeid].extention;\r\n        if (referral == false && extention == false) {\r\n            _claimStakeT1(stakeid);\r\n            _claimTimeStake(stakeid);\r\n        } else if (referral == false && extention == true) {\r\n            _claimTimeStake(stakeid);\r\n        } else if (referral == true && extention == false) {\r\n            _claimStakeT2(stakeid);\r\n        } else {\r\n            _claimStakeT3(stakeid);\r\n            _claimTimeStake(stakeid);\r\n        }\r\n    }\r\n    function _claimTimeStake(bytes32 stakeid) internal virtual {\r\n        if (_timeLock[stakeid].unlockTime <= block.timestamp){\r\n            transferToEWallet(_stakeHub[stakeid].initiator, _timeLock[stakeid].amount);\r\n            bool referral = _stakeHub[stakeid].referral;\r\n            bool extention = _stakeHub[stakeid].extention;\r\n            if (!(referral == false && extention == true)) {\r\n                _stakeAmount[_msgSender()] = _stakeAmount[_msgSender()] - _stakeHub[stakeid].amount;\r\n                _totalStaked = _totalStaked.sub(_stakeHub[stakeid].amount);\r\n            }\r\n            _stakeHub[stakeid].expired=true;\r\n            \r\n        }\r\n        \r\n    }\r\n    function _claimStakeT1(bytes32 stakeid) internal virtual {\r\n        uint256 payableDividents= min(getDividentId(), _stake1[stakeid].dividentStart+300);\r\n        uint256 tokens = (_dividents[payableDividents].sub(_dividents[_stake1[stakeid].claimedDividents])) * _stakeHub[stakeid].amount /1e18;\r\n        _stake1[stakeid].claimedDividents = payableDividents;\r\n        transferToEWallet(_stakeHub[stakeid].initiator, tokens);\r\n        _claimedRewards[stakeid] = _claimedRewards[stakeid].add(tokens);\r\n    }\r\n    function _claimStakeT2(bytes32 stakeid) internal virtual {\r\n        uint256 payableDividents= min(getDividentId(), _stake2[stakeid].dividentStart+300);\r\n        if (payableDividents == _stake2[stakeid].dividentStart+300){\r\n            _stakeHub[stakeid].expired=true;\r\n            _RstakeAmount[_stakeHub[stakeid].initiator] = _RstakeAmount[_stakeHub[stakeid].initiator] - _stakeHub[stakeid].amount; \r\n        }\r\n        uint256 tokens = (_dividents[payableDividents].sub(_dividents[_stake2[stakeid].claimedDividents])) * _stakeHub[stakeid].amount /1e18;\r\n        _stake2[stakeid].claimedDividents = payableDividents;\r\n        transferToEWallet(_stakeHub[stakeid].initiator, tokens);\r\n        _claimedRewards[stakeid] = _claimedRewards[stakeid].add(tokens);\r\n    }\r\n    function _claimStakeT3(bytes32 stakeid) internal virtual {\r\n        uint256 payableDividents= min(getDividentId(), _stake3[stakeid].dividentStart+300);\r\n        uint256 tokens = (_dividents[payableDividents].sub(_dividents[_stake3[stakeid].claimedDividents])) * _stakeHub[stakeid].amount * 2 /1e18;\r\n        _stake3[stakeid].claimedDividents = payableDividents;\r\n        transferToEWallet(_stakeHub[stakeid].initiator, tokens);\r\n        _claimedRewards[stakeid] = _claimedRewards[stakeid].add(tokens);\r\n    }\r\n    \r\n    \r\n    \r\n    function claimableStake(bytes32 stakeid) public view virtual returns (uint256){\r\n        if (_stakeHub[stakeid].expired) {return 0;}\r\n        bool referral = _stakeHub[stakeid].referral;\r\n        bool extention = _stakeHub[stakeid].extention;\r\n        if (referral == false && extention == false) {\r\n           return  _claimableStakeT1(stakeid);\r\n            \r\n        } else if (referral == true && extention == false) {\r\n         return _claimableStakeT2(stakeid);\r\n        } else if (referral == true && extention == true) {\r\n           return _claimableStakeT3(stakeid);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    function _claimableStakeT1(bytes32 stakeid) internal view virtual returns (uint256 tokens){\r\n        uint256 payableDividents= min(getDividentId(), _stake1[stakeid].dividentStart+300);\r\n        tokens = (_dividents[payableDividents].sub(_dividents[_stake1[stakeid].claimedDividents])) * _stakeHub[stakeid].amount /1e18;\r\n        \r\n    }\r\n    function _claimableStakeT2(bytes32 stakeid) internal view virtual  returns (uint256 tokens) {\r\n        uint256 payableDividents= min(getDividentId(), _stake2[stakeid].dividentStart+300);\r\n       tokens = (_dividents[payableDividents].sub(_dividents[_stake2[stakeid].claimedDividents])) * _stakeHub[stakeid].amount /1e18;\r\n    }\r\n    function _claimableStakeT3(bytes32 stakeid) internal view virtual returns (uint256 tokens) {\r\n        uint256 payableDividents= min(getDividentId(), _stake3[stakeid].dividentStart+300);\r\n        tokens = (_dividents[payableDividents].sub(_dividents[_stake3[stakeid].claimedDividents])) * _stakeHub[stakeid].amount * 2 /1e18;\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function stake(uint256 amount,\r\n        bytes32 referredstakeid) public isRegistered {\r\n        require(_msgSender() == _stakeHub[referredstakeid].initiator, \"Referred StakeId should belong to you.\");\r\n        require(amount >= _stakeHub[referredstakeid].amount, \"New stake amount should be higher or euqal to referred stake.\");\r\n        require((_stakeHub[referredstakeid].referral==false && _stakeHub[referredstakeid].extention == false), \"Referred Stake Id invalid.\");\r\n        _claimStakeT1(referredstakeid);\r\n        _stakeHub[referredstakeid].expired=true;\r\n        createStake(_msgSender(), _stakeHub[referredstakeid].amount, true, true, referredstakeid);\r\n        stake(amount);\r\n    }\r\n    function stake(uint256 amount) public isRegistered {\r\n        IERC20(ROTHS).transferFrom(_msgSender(), address(this), amount);\r\n        bytes32 stakeid = createStake(_msgSender(), amount, false, false);\r\n        _stakeAmount[_msgSender()] = _stakeAmount[_msgSender()] + amount;\r\n        _totalStaked = _totalStaked.add(amount);\r\n        address r1= _referrals[_msgSender()].r1;\r\n        address r2= _referrals[_msgSender()].r2;\r\n        address r3= _referrals[_msgSender()].r3;\r\n        address r4= _referrals[_msgSender()].r4;\r\n        address r5= _referrals[_msgSender()].r5;\r\n        address r6= _referrals[_msgSender()].r6;\r\n        address r7= _referrals[_msgSender()].r7;\r\n        address r8= _referrals[_msgSender()].r8;\r\n        address r9= _referrals[_msgSender()].r9;\r\n        address r10= _referrals[_msgSender()].r10;\r\n        \r\n        _createReferralStakes(r1,2,20, amount, stakeid);\r\n        _createReferralStakes(r2,4,10, amount, stakeid);\r\n        _createReferralStakes(r3,6,5, amount, stakeid);\r\n        _createReferralStakes(r4,8,5, amount, stakeid);\r\n        _createReferralStakes(r5,10,4, amount, stakeid);\r\n        _createReferralStakes(r6,12,4, amount, stakeid);\r\n        _createReferralStakes(r7,14,3, amount, stakeid);\r\n        _createReferralStakes(r8,16,3, amount, stakeid);\r\n        _createReferralStakes(r9,18,2, amount, stakeid);\r\n        _createReferralStakes(r10,20,2, amount, stakeid);\r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function claim(bytes32 stakeid) public isRegistered {\r\n        require(isStakeActive(stakeid), \"Stake already finished.\");\r\n        require(_stakeHub[stakeid].initiator == _msgSender(), \"Stake does not belong to user.\");\r\n        claimStake(stakeid);\r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    function withdraw(uint256 amount) public isRegistered {\r\n        require(amount <= EWallet[_msgSender()], \"Not enough balance.\");\r\n        EWallet[_msgSender()] = EWallet[_msgSender()].sub(amount); \r\n        IERC20(ROTHS).transfer(_msgSender(),amount);\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_updateDivident\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"calcStakeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stakeid\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stakeid\",\"type\":\"bytes32\"}],\"name\":\"claimableStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stakeid\",\"type\":\"bytes32\"}],\"name\":\"getClaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDirectCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dividentId\",\"type\":\"uint256\"}],\"name\":\"getDividents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getEWalletBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getRStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getRegisterTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stakeid\",\"type\":\"bytes32\"}],\"name\":\"getStakeMeta\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"referral\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"extention\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"expired\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stakeid\",\"type\":\"bytes32\"}],\"name\":\"getStakeT1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dividentStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedDividents\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stakeid\",\"type\":\"bytes32\"}],\"name\":\"getStakeT2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dividentStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedDividents\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"referredStake\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stakeid\",\"type\":\"bytes32\"}],\"name\":\"getStakeT3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dividentStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedDividents\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"referredStake\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stakeid\",\"type\":\"bytes32\"}],\"name\":\"getTimeLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getrefree\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stakeid\",\"type\":\"bytes32\"}],\"name\":\"isStakeActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDivident\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"refree\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"referredstakeid\",\"type\":\"bytes32\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Staketoken","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003498c7927da877faa14198d24caebd6516189646","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://00c6424fe398589796032d176cc2da3c2789630f436be7c54aa87fdfa5f97bec"}]}