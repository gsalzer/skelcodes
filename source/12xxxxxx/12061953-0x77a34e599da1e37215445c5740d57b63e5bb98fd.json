{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/v2/accounts/Implementation_m1.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport { Variables } from \\\"./variables.sol\\\";\\n\\n/**\\n * @title InstaAccountV2.\\n * @dev DeFi Smart Account Wallet.\\n */\\n\\ninterface ConnectorsInterface {\\n    function isConnectors(string[] calldata connectorNames) external view returns (bool, address[] memory);\\n}\\n\\ncontract Constants is Variables {\\n    // InstaIndex Address.\\n    address internal constant instaIndex = 0x2971AdFa57b20E5a416aE5a708A8655A9c74f723;\\n    // Connnectors Address.\\n    address public immutable connectorsM1;\\n\\n    constructor(address _connectors) {\\n        connectorsM1 = _connectors;\\n    }\\n}\\n\\ncontract InstaImplementationM1 is Constants {\\n\\n    constructor(address _connectors) Constants(_connectors) {}\\n\\n    function decodeEvent(bytes memory response) internal pure returns (string memory _eventCode, bytes memory _eventParams) {\\n        if (response.length > 0) {\\n            (_eventCode, _eventParams) = abi.decode(response, (string, bytes));\\n        }\\n    }\\n\\n    event LogCast(\\n        address indexed origin,\\n        address indexed sender,\\n        uint256 value,\\n        string[] targetsNames,\\n        address[] targets,\\n        string[] eventNames,\\n        bytes[] eventParams\\n    );\\n\\n    receive() external payable {}\\n\\n     /**\\n     * @dev Delegate the calls to Connector.\\n     * @param _target Connector address\\n     * @param _data CallData of function.\\n    */\\n    function spell(address _target, bytes memory _data) internal returns (bytes memory response) {\\n        require(_target != address(0), \\\"target-invalid\\\");\\n        assembly {\\n            let succeeded := delegatecall(gas(), _target, add(_data, 0x20), mload(_data), 0, 0)\\n            let size := returndatasize()\\n            \\n            response := mload(0x40)\\n            mstore(0x40, add(response, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n            mstore(response, size)\\n            returndatacopy(add(response, 0x20), 0, size)\\n\\n            switch iszero(succeeded)\\n                case 1 {\\n                    // throw if delegatecall failed\\n                    returndatacopy(0x00, 0x00, size)\\n                    revert(0x00, size)\\n                }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is the main function, Where all the different functions are called\\n     * from Smart Account.\\n     * @param _targetNames Array of Connector address.\\n     * @param _datas Array of Calldata.\\n    */\\n    function cast(\\n        string[] calldata _targetNames,\\n        bytes[] calldata _datas,\\n        address _origin\\n    )\\n    external\\n    payable \\n    returns (bytes32) // Dummy return to fix instaIndex buildWithCast function\\n    {   \\n        uint256 _length = _targetNames.length;\\n        require(_auth[msg.sender] || msg.sender == instaIndex, \\\"1: permission-denied\\\");\\n        require(_length != 0, \\\"1: length-invalid\\\");\\n        require(_length == _datas.length , \\\"1: array-length-invalid\\\");\\n\\n        string[] memory eventNames = new string[](_length);\\n        bytes[] memory eventParams = new bytes[](_length);\\n\\n        (bool isOk, address[] memory _targets) = ConnectorsInterface(connectorsM1).isConnectors(_targetNames);\\n\\n        require(isOk, \\\"1: not-connector\\\");\\n\\n        for (uint i = 0; i < _length; i++) {\\n            bytes memory response = spell(_targets[i], _datas[i]);\\n            (eventNames[i], eventParams[i]) = decodeEvent(response);\\n        }\\n\\n        emit LogCast(\\n            _origin,\\n            msg.sender,\\n            msg.value,\\n            _targetNames,\\n            _targets,\\n            eventNames,\\n            eventParams\\n        );\\n    }\\n}\"\r\n    },\r\n    \"contracts/v2/accounts/variables.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\ncontract Variables {\\n    // Auth Module(Address of Auth => bool).\\n    mapping (address => bool) internal _auth;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_connectors\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"targetsNames\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"eventNames\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"eventParams\",\"type\":\"bytes[]\"}],\"name\":\"LogCast\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_targetNames\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_datas\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"_origin\",\"type\":\"address\"}],\"name\":\"cast\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectorsM1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"InstaImplementationM1","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000fe2390dad597594439f218190fc2de40f9cf1179","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}