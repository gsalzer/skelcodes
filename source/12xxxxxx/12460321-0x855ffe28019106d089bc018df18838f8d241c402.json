{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.2;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address spender, address owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\ninterface IOracle {\r\n    function getNormalizedValueUsdc(\r\n        address tokenAddress,\r\n        uint256 amount,\r\n        uint256 price\r\n    ) external view returns (uint256);\r\n\r\n    function getPriceUsdcRecommended(address tokenAddress)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\n/**\r\n * Static token data\r\n */\r\nstruct TokenMetadata {\r\n    address id; // Token address\r\n    string name; // Token name\r\n    string symbol; // Token symbol\r\n    uint8 decimals; // Token decimals\r\n}\r\n\r\ncontract BalancesHelper {\r\n    address public owner; // Owner can update storage slots\r\n    address public oracleAddress; // Oracle address\r\n\r\n    struct TokenBalance {\r\n        address tokenId; // Token address\r\n        uint256 priceUsdc; // Token price in USDC (6 decimals)\r\n        uint256 balance; // Token balance in underlying token\r\n        uint256 balanceUsdc; // Token balance value in USDC (6 decimals)\r\n    }\r\n\r\n    struct TokenPrice {\r\n        address tokenId; // Token address\r\n        uint256 priceUsdc; // Token price in USDC (6 decimals)\r\n    }\r\n\r\n    constructor(address _oracleAddress) {\r\n        owner = msg.sender;\r\n        oracleAddress = _oracleAddress;\r\n    }\r\n\r\n    /**\r\n     * Fetch token balances given an array of token addresses and account address\r\n     */\r\n    function tokensBalances(\r\n        address accountAddress,\r\n        address[] memory tokensAddresses\r\n    ) public view returns (TokenBalance[] memory) {\r\n        TokenBalance[] memory _tokensBalances =\r\n            new TokenBalance[](tokensAddresses.length);\r\n        for (\r\n            uint256 tokenIdx = 0;\r\n            tokenIdx < tokensAddresses.length;\r\n            tokenIdx++\r\n        ) {\r\n            address tokenAddress = tokensAddresses[tokenIdx];\r\n            IERC20 token = IERC20(tokenAddress);\r\n            uint256 balance = token.balanceOf(accountAddress);\r\n            uint256 priceUsdc =\r\n                IOracle(oracleAddress).getPriceUsdcRecommended(tokenAddress);\r\n            uint256 balanceUsdc =\r\n                IOracle(oracleAddress).getNormalizedValueUsdc(\r\n                    tokenAddress,\r\n                    balance,\r\n                    priceUsdc\r\n                );\r\n\r\n            _tokensBalances[tokenIdx] = TokenBalance({\r\n                tokenId: tokenAddress,\r\n                priceUsdc: priceUsdc,\r\n                balance: balance,\r\n                balanceUsdc: balanceUsdc\r\n            });\r\n        }\r\n        return _tokensBalances;\r\n    }\r\n\r\n    /**\r\n     * Fetch token prices given an array of token addresses\r\n     */\r\n    function tokensPrices(address[] memory tokensAddresses)\r\n        public\r\n        view\r\n        returns (TokenPrice[] memory)\r\n    {\r\n        TokenPrice[] memory _tokensPrices =\r\n            new TokenPrice[](tokensAddresses.length);\r\n        for (\r\n            uint256 tokenIdx = 0;\r\n            tokenIdx < tokensAddresses.length;\r\n            tokenIdx++\r\n        ) {\r\n            address tokenAddress = tokensAddresses[tokenIdx];\r\n            _tokensPrices[tokenIdx] = TokenPrice({\r\n                tokenId: tokenAddress,\r\n                priceUsdc: IOracle(oracleAddress).getPriceUsdcRecommended(\r\n                    tokenAddress\r\n                )\r\n            });\r\n        }\r\n        return _tokensPrices;\r\n    }\r\n\r\n    /**\r\n     * Fetch basic static token metadata\r\n     */\r\n    function tokensMetadata(address[] memory tokensAddresses)\r\n        public\r\n        view\r\n        returns (TokenMetadata[] memory)\r\n    {\r\n        TokenMetadata[] memory _tokensMetadata =\r\n            new TokenMetadata[](tokensAddresses.length);\r\n        for (\r\n            uint256 tokenIdx = 0;\r\n            tokenIdx < tokensAddresses.length;\r\n            tokenIdx++\r\n        ) {\r\n            address tokenAddress = tokensAddresses[tokenIdx];\r\n            IERC20 _token = IERC20(tokenAddress);\r\n            _tokensMetadata[tokenIdx] = TokenMetadata({\r\n                id: tokenAddress,\r\n                name: _token.name(),\r\n                symbol: _token.symbol(),\r\n                decimals: _token.decimals()\r\n            });\r\n        }\r\n        return _tokensMetadata;\r\n    }\r\n\r\n    function updateSlot(bytes32 slot, bytes32 value) external {\r\n        require(msg.sender == owner);\r\n        assembly {\r\n            sstore(slot, value)\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"oracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokensAddresses\",\"type\":\"address[]\"}],\"name\":\"tokensBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"priceUsdc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceUsdc\",\"type\":\"uint256\"}],\"internalType\":\"struct BalancesHelper.TokenBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokensAddresses\",\"type\":\"address[]\"}],\"name\":\"tokensMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct TokenMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokensAddresses\",\"type\":\"address[]\"}],\"name\":\"tokensPrices\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"priceUsdc\",\"type\":\"uint256\"}],\"internalType\":\"struct BalancesHelper.TokenPrice[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"updateSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BalancesHelper","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000083d95e0d5f402511db06817aff3f9ea88224b030","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e49b28277d7053819b79c9293549d21a98d90b89e16eb026c4960586d31a4c0e"}]}