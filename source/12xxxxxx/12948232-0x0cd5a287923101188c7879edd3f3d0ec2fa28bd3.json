{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/VotingPower.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IVotingPowerFormula.sol\\\";\\nimport \\\"./lib/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./lib/PrismProxyImplementation.sol\\\";\\nimport \\\"./lib/VotingPowerStorage.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\n\\n/**\\n * @title VotingPower\\n * @dev Implementation contract for voting power prism proxy\\n * Calls should not be made directly to this contract, instead make calls to the VotingPowerPrism proxy contract\\n * The exception to this is the `become` function specified in PrismProxyImplementation \\n * This function is called once and is used by this contract to accept its role as the implementation for the prism proxy\\n */\\ncontract VotingPower is PrismProxyImplementation, ReentrancyGuardUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice restrict functions to just owner address\\n    modifier onlyOwner {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        require(msg.sender == app.owner, \\\"only owner\\\");\\n        _;\\n    }\\n\\n    /// @notice An event that's emitted when a user's staked balance increases\\n    event Staked(address indexed user, address indexed token, uint256 indexed amount, uint256 votingPower);\\n\\n    /// @notice An event that's emitted when a user's staked balance decreases\\n    event Withdrawn(address indexed user, address indexed token, uint256 indexed amount, uint256 votingPower);\\n\\n    /// @notice An event that's emitted when an account's vote balance changes\\n    event VotingPowerChanged(address indexed voter, uint256 indexed previousBalance, uint256 indexed newBalance);\\n\\n    /// @notice Event emitted when the owner of the voting power contract is updated\\n    event ChangedOwner(address indexed oldOwner, address indexed newOwner);\\n\\n    /**\\n     * @notice Initialize VotingPower contract\\n     * @dev Should be called via VotingPowerPrism before calling anything else\\n     * @param _edenToken address of EDEN token\\n     */\\n    function initialize(\\n        address _edenToken,\\n        address _owner\\n    ) public initializer {\\n        __ReentrancyGuard_init_unchained();\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        app.edenToken = IEdenToken(_edenToken);\\n        app.owner = _owner;\\n    }\\n\\n    /**\\n     * @notice Address of EDEN token\\n     * @return Address of EDEN token\\n     */\\n    function edenToken() public view returns (address) {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        return address(app.edenToken);\\n    }\\n\\n    /**\\n     * @notice Decimals used for voting power\\n     * @return decimals\\n     */\\n    function decimals() public pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @notice Address of token registry\\n     * @return Address of token registry\\n     */\\n    function tokenRegistry() public view returns (address) {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        return address(app.tokenRegistry);\\n    }\\n\\n    /**\\n     * @notice Address of lockManager\\n     * @return Address of lockManager\\n     */\\n    function lockManager() public view returns (address) {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        return app.lockManager;\\n    }\\n\\n    /**\\n     * @notice Address of owner\\n     * @return Address of owner\\n     */\\n    function owner() public view returns (address) {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        return app.owner;\\n    }\\n\\n    /**\\n     * @notice Sets token registry address\\n     * @param registry Address of token registry\\n     */\\n    function setTokenRegistry(address registry) public onlyOwner {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        app.tokenRegistry = ITokenRegistry(registry);\\n    }\\n\\n    /**\\n     * @notice Sets lockManager address\\n     * @param newLockManager Address of lockManager\\n     */\\n    function setLockManager(address newLockManager) public onlyOwner {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        app.lockManager = newLockManager;\\n    }\\n\\n    /**\\n     * @notice Change owner of vesting contract\\n     * @param newOwner New owner address\\n     */\\n    function changeOwner(address newOwner) external onlyOwner {\\n        require(newOwner != address(0) && newOwner != address(this), \\\"VP::changeOwner: not valid address\\\");\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        emit ChangedOwner(app.owner, newOwner);\\n        app.owner = newOwner;   \\n    }\\n\\n    /**\\n     * @notice Stake EDEN tokens using offchain approvals to unlock voting power\\n     * @param amount The amount to stake\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function stakeWithPermit(uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external nonReentrant {\\n        require(amount > 0, \\\"VP::stakeWithPermit: cannot stake 0\\\");\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        require(app.edenToken.balanceOf(msg.sender) >= amount, \\\"VP::stakeWithPermit: not enough tokens\\\");\\n\\n        app.edenToken.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n\\n        _stake(msg.sender, address(app.edenToken), amount, amount);\\n    }\\n\\n    /**\\n     * @notice Stake EDEN tokens to unlock voting power for `msg.sender`\\n     * @param amount The amount to stake\\n     */\\n    function stake(uint256 amount) external nonReentrant {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        require(amount > 0, \\\"VP::stake: cannot stake 0\\\");\\n        require(app.edenToken.balanceOf(msg.sender) >= amount, \\\"VP::stake: not enough tokens\\\");\\n        require(app.edenToken.allowance(msg.sender, address(this)) >= amount, \\\"VP::stake: must approve tokens before staking\\\");\\n\\n        _stake(msg.sender, address(app.edenToken), amount, amount);\\n    }\\n\\n    /**\\n     * @notice Stake LP tokens to unlock voting power for `msg.sender`\\n     * @param token The token to stake\\n     * @param amount The amount to stake\\n     */\\n    function stake(address token, uint256 amount) external nonReentrant {\\n        IERC20 lptoken = IERC20(token);\\n        require(amount > 0, \\\"VP::stake: cannot stake 0\\\");\\n        require(lptoken.balanceOf(msg.sender) >= amount, \\\"VP::stake: not enough tokens\\\");\\n        require(lptoken.allowance(msg.sender, address(this)) >= amount, \\\"VP::stake: must approve tokens before staking\\\");\\n\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        address tokenFormulaAddress = app.tokenRegistry.tokenFormulas(token);\\n        require(tokenFormulaAddress != address(0), \\\"VP::stake: token not supported\\\");\\n        \\n        IVotingPowerFormula tokenFormula = IVotingPowerFormula(tokenFormulaAddress);\\n        uint256 votingPower = tokenFormula.convertTokensToVotingPower(amount);\\n        _stake(msg.sender, token, amount, votingPower);\\n    }\\n\\n    /**\\n     * @notice Count locked tokens toward voting power for `account`\\n     * @param account The recipient of voting power\\n     * @param amount The amount of voting power to add\\n     */\\n    function addVotingPowerForLockedTokens(address account, uint256 amount) external nonReentrant {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        require(amount > 0, \\\"VP::addVPforLT: cannot add 0 voting power\\\");\\n        require(msg.sender == app.lockManager, \\\"VP::addVPforLT: only lockManager contract\\\");\\n\\n        _increaseVotingPower(account, amount);\\n    }\\n\\n    /**\\n     * @notice Remove unlocked tokens from voting power for `account`\\n     * @param account The account with voting power\\n     * @param amount The amount of voting power to remove\\n     */\\n    function removeVotingPowerForUnlockedTokens(address account, uint256 amount) external nonReentrant {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        require(amount > 0, \\\"VP::removeVPforUT: cannot remove 0 voting power\\\");\\n        require(msg.sender == app.lockManager, \\\"VP::removeVPforUT: only lockManager contract\\\");\\n\\n        _decreaseVotingPower(account, amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw staked EDEN tokens, removing voting power for `msg.sender`\\n     * @param amount The amount to withdraw\\n     */\\n    function withdraw(uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"VP::withdraw: cannot withdraw 0\\\");\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        _withdraw(msg.sender, address(app.edenToken), amount, amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw staked LP tokens, removing voting power for `msg.sender`\\n     * @param token The token to withdraw\\n     * @param amount The amount to withdraw\\n     */\\n    function withdraw(address token, uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"VP::withdraw: cannot withdraw 0\\\");\\n        Stake memory s = getStake(msg.sender, token);\\n        uint256 vpToWithdraw = amount * s.votingPower / s.amount;\\n        _withdraw(msg.sender, token, amount, vpToWithdraw);\\n    }\\n\\n    /**\\n     * @notice Get total amount of EDEN tokens staked in contract by `staker`\\n     * @param staker The user with staked EDEN\\n     * @return total EDEN amount staked\\n     */\\n    function getEDENAmountStaked(address staker) public view returns (uint256) {\\n        return getEDENStake(staker).amount;\\n    }\\n\\n    /**\\n     * @notice Get total amount of tokens staked in contract by `staker`\\n     * @param staker The user with staked tokens\\n     * @param stakedToken The staked token\\n     * @return total amount staked\\n     */\\n    function getAmountStaked(address staker, address stakedToken) public view returns (uint256) {\\n        return getStake(staker, stakedToken).amount;\\n    }\\n\\n    /**\\n     * @notice Get staked amount and voting power from EDEN tokens staked in contract by `staker`\\n     * @param staker The user with staked EDEN\\n     * @return total EDEN staked\\n     */\\n    function getEDENStake(address staker) public view returns (Stake memory) {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        return getStake(staker, address(app.edenToken));\\n    }\\n\\n    /**\\n     * @notice Get total staked amount and voting power from `stakedToken` staked in contract by `staker`\\n     * @param staker The user with staked tokens\\n     * @param stakedToken The staked token\\n     * @return total staked\\n     */\\n    function getStake(address staker, address stakedToken) public view returns (Stake memory) {\\n        StakeStorage storage ss = VotingPowerStorage.stakeStorage();\\n        return ss.stakes[staker][stakedToken];\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        CheckpointStorage storage cs = VotingPowerStorage.checkpointStorage();\\n        uint32 nCheckpoints = cs.numCheckpoints[account];\\n        return nCheckpoints > 0 ? cs.checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function balanceOfAt(address account, uint256 blockNumber) public view returns (uint256) {\\n        require(blockNumber < block.number, \\\"VP::balanceOfAt: not yet determined\\\");\\n        \\n        CheckpointStorage storage cs = VotingPowerStorage.checkpointStorage();\\n        uint32 nCheckpoints = cs.numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (cs.checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return cs.checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (cs.checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = cs.checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return cs.checkpoints[account][lower].votes;\\n    }\\n\\n    /**\\n     * @notice Internal implementation of stake\\n     * @param voter The user that is staking tokens\\n     * @param token The token to stake\\n     * @param tokenAmount The amount of token to stake\\n     * @param votingPower The amount of voting power stake translates into\\n     */\\n    function _stake(address voter, address token, uint256 tokenAmount, uint256 votingPower) internal {\\n        IERC20(token).safeTransferFrom(voter, address(this), tokenAmount);\\n\\n        StakeStorage storage ss = VotingPowerStorage.stakeStorage();\\n        ss.stakes[voter][token].amount = ss.stakes[voter][token].amount + tokenAmount;\\n        ss.stakes[voter][token].votingPower = ss.stakes[voter][token].votingPower + votingPower;\\n\\n        emit Staked(voter, token, tokenAmount, votingPower);\\n\\n        _increaseVotingPower(voter, votingPower);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of withdraw\\n     * @param voter The user with tokens staked\\n     * @param token The token that is staked\\n     * @param tokenAmount The amount of token to withdraw\\n     * @param votingPower The amount of voting power stake translates into\\n     */\\n    function _withdraw(address voter, address token, uint256 tokenAmount, uint256 votingPower) internal {\\n        StakeStorage storage ss = VotingPowerStorage.stakeStorage();\\n        require(ss.stakes[voter][token].amount >= tokenAmount, \\\"VP::_withdraw: not enough tokens staked\\\");\\n        require(ss.stakes[voter][token].votingPower >= votingPower, \\\"VP::_withdraw: not enough voting power\\\");\\n        ss.stakes[voter][token].amount = ss.stakes[voter][token].amount - tokenAmount;\\n        ss.stakes[voter][token].votingPower = ss.stakes[voter][token].votingPower - votingPower;\\n        \\n        IERC20(token).safeTransfer(voter, tokenAmount);\\n\\n        emit Withdrawn(voter, token, tokenAmount, votingPower);\\n        \\n        _decreaseVotingPower(voter, votingPower);\\n    }\\n\\n    /**\\n     * @notice Increase voting power of voter\\n     * @param voter The voter whose voting power is increasing \\n     * @param amount The amount of voting power to increase by\\n     */\\n    function _increaseVotingPower(address voter, uint256 amount) internal {\\n        CheckpointStorage storage cs = VotingPowerStorage.checkpointStorage();\\n        uint32 checkpointNum = cs.numCheckpoints[voter];\\n        uint256 votingPowerOld = checkpointNum > 0 ? cs.checkpoints[voter][checkpointNum - 1].votes : 0;\\n        uint256 votingPowerNew = votingPowerOld + amount;\\n        _writeCheckpoint(voter, checkpointNum, votingPowerOld, votingPowerNew);\\n    }\\n\\n    /**\\n     * @notice Decrease voting power of voter\\n     * @param voter The voter whose voting power is decreasing \\n     * @param amount The amount of voting power to decrease by\\n     */\\n    function _decreaseVotingPower(address voter, uint256 amount) internal {\\n        CheckpointStorage storage cs = VotingPowerStorage.checkpointStorage();\\n        uint32 checkpointNum = cs.numCheckpoints[voter];\\n        uint256 votingPowerOld = checkpointNum > 0 ? cs.checkpoints[voter][checkpointNum - 1].votes : 0;\\n        uint256 votingPowerNew = votingPowerOld - amount;\\n        _writeCheckpoint(voter, checkpointNum, votingPowerOld, votingPowerNew);\\n    }\\n\\n    /**\\n     * @notice Create checkpoint of voting power for voter at current block number\\n     * @param voter The voter whose voting power is changing\\n     * @param nCheckpoints The current checkpoint number for voter\\n     * @param oldVotes The previous voting power of this voter\\n     * @param newVotes The new voting power of this voter\\n     */\\n    function _writeCheckpoint(address voter, uint32 nCheckpoints, uint256 oldVotes, uint256 newVotes) internal {\\n      uint32 blockNumber = _safe32(block.number, \\\"VP::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n      CheckpointStorage storage cs = VotingPowerStorage.checkpointStorage();\\n      if (nCheckpoints > 0 && cs.checkpoints[voter][nCheckpoints - 1].fromBlock == blockNumber) {\\n          cs.checkpoints[voter][nCheckpoints - 1].votes = newVotes;\\n      } else {\\n          cs.checkpoints[voter][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n          cs.numCheckpoints[voter] = nCheckpoints + 1;\\n      }\\n\\n      emit VotingPowerChanged(voter, oldVotes, newVotes);\\n    }\\n\\n    /**\\n     * @notice Converts uint256 to uint32 safely\\n     * @param n Number\\n     * @param errorMessage Error message to use if number cannot be converted\\n     * @return uint32 number\\n     */\\n    function _safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Burnable is IERC20 {\\n    function burn(uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Extended.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Metadata.sol\\\";\\nimport \\\"./IERC20Mintable.sol\\\";\\nimport \\\"./IERC20Burnable.sol\\\";\\nimport \\\"./IERC20Permit.sol\\\";\\nimport \\\"./IERC20TransferWithAuth.sol\\\";\\nimport \\\"./IERC20SafeAllowance.sol\\\";\\n\\ninterface IERC20Extended is \\n    IERC20Metadata, \\n    IERC20Mintable, \\n    IERC20Burnable, \\n    IERC20Permit,\\n    IERC20TransferWithAuth,\\n    IERC20SafeAllowance \\n{}\\n    \"\r\n    },\r\n    \"contracts/interfaces/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Mintable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Mintable is IERC20 {\\n    function mint(address dst, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Permit is IERC20 {\\n    function getDomainSeparator() external view returns (bytes32);\\n    function DOMAIN_TYPEHASH() external view returns (bytes32);\\n    function VERSION_HASH() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\n    function nonces(address) external view returns (uint);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20SafeAllowance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20SafeAllowance is IERC20 {\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20TransferWithAuth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20TransferWithAuth is IERC20 {\\n    function transferWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s) external;\\n    function receiveWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s) external;\\n    function TRANSFER_WITH_AUTHORIZATION_TYPEHASH() external view returns (bytes32);\\n    function RECEIVE_WITH_AUTHORIZATION_TYPEHASH() external view returns (bytes32);\\n    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IEdenToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Extended.sol\\\";\\n\\ninterface IEdenToken is IERC20Extended {\\n    function maxSupply() external view returns (uint256);\\n    function updateTokenMetadata(string memory tokenName, string memory tokenSymbol) external returns (bool);\\n    function metadataManager() external view returns (address);\\n    function setMetadataManager(address newMetadataManager) external returns (bool);\\n    event MetadataManagerChanged(address indexed oldManager, address indexed newManager);\\n    event TokenMetaUpdated(string indexed name, string indexed symbol);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITokenRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITokenRegistry {\\n    function owner() external view returns (address);\\n    function tokenFormulas(address) external view returns (address);\\n    function setTokenFormula(address token, address formula) external;\\n    function removeToken(address token) external;\\n    function changeOwner(address newOwner) external;\\n    event ChangedOwner(address indexed oldOwner, address indexed newOwner);\\n    event TokenAdded(address indexed token, address indexed formula);\\n    event TokenRemoved(address indexed token);\\n    event TokenFormulaUpdated(address indexed token, address indexed formula);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVault {\\n    \\n    struct Lock {\\n        address token;\\n        address receiver;\\n        uint48 startTime;\\n        uint16 vestingDurationInDays;\\n        uint16 cliffDurationInDays;\\n        uint256 amount;\\n        uint256 amountClaimed;\\n        uint256 votingPower;\\n    }\\n\\n    struct LockBalance {\\n        uint256 id;\\n        uint256 claimableAmount;\\n        Lock lock;\\n    }\\n\\n    struct TokenBalance {\\n        uint256 totalAmount;\\n        uint256 claimableAmount;\\n        uint256 claimedAmount;\\n        uint256 votingPower;\\n    }\\n\\n    function lockTokens(address token, address locker, address receiver, uint48 startTime, uint256 amount, uint16 lockDurationInDays, uint16 cliffDurationInDays, bool grantVotingPower) external;\\n    function lockTokensWithPermit(address token, address locker, address receiver, uint48 startTime, uint256 amount, uint16 lockDurationInDays, uint16 cliffDurationInDays, bool grantVotingPower, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function claimUnlockedTokenAmounts(uint256[] memory lockIds, uint256[] memory amounts) external;\\n    function claimAllUnlockedTokens(uint256[] memory lockIds) external;\\n    function tokenLocks(uint256 lockId) external view returns(Lock memory);\\n    function allActiveLockIds() external view returns(uint256[] memory);\\n    function allActiveLocks() external view returns(Lock[] memory);\\n    function allActiveLockBalances() external view returns(LockBalance[] memory);\\n    function activeLockIds(address receiver) external view returns(uint256[] memory);\\n    function allLocks(address receiver) external view returns(Lock[] memory);\\n    function activeLocks(address receiver) external view returns(Lock[] memory);\\n    function activeLockBalances(address receiver) external view returns(LockBalance[] memory);\\n    function totalTokenBalance(address token) external view returns(TokenBalance memory balance);\\n    function tokenBalance(address token, address receiver) external view returns(TokenBalance memory balance);\\n    function lockBalance(uint256 lockId) external view returns (LockBalance memory);\\n    function claimableBalance(uint256 lockId) external view returns (uint256);\\n    function extendLock(uint256 lockId, uint16 vestingDaysToAdd, uint16 cliffDaysToAdd) external;\\n} \"\r\n    },\r\n    \"contracts/interfaces/IVotingPowerFormula.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVotingPowerFormula {\\n    function convertTokensToVotingPower(uint256 amount) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/lib/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/lib/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/lib/PrismProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract PrismProxy {\\n\\n    /// @notice Proxy admin and implementation storage variables\\n    struct ProxyStorage {\\n        // Administrator for this contract\\n        address admin;\\n\\n        // Pending administrator for this contract\\n        address pendingAdmin;\\n\\n        // Active implementation of this contract\\n        address implementation;\\n\\n        // Pending implementation of this contract\\n        address pendingImplementation;\\n\\n        // Implementation version of this contract\\n        uint8 version;\\n    }\\n\\n    /// @dev Position in contract storage where prism ProxyStorage struct will be stored\\n    bytes32 constant PRISM_PROXY_STORAGE_POSITION = keccak256(\\\"prism.proxy.storage\\\");\\n\\n    /// @notice Emitted when pendingImplementation is changed\\n    event NewPendingImplementation(address indexed oldPendingImplementation, address indexed newPendingImplementation);\\n\\n    /// @notice Emitted when pendingImplementation is accepted, which means implementation is updated\\n    event NewImplementation(address indexed oldImplementation, address indexed newImplementation);\\n\\n    /// @notice Emitted when pendingAdmin is changed\\n    event NewPendingAdmin(address indexed oldPendingAdmin, address indexed newPendingAdmin);\\n\\n    /// @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n    event NewAdmin(address indexed oldAdmin, address indexed newAdmin);\\n\\n    /**\\n     * @notice Load proxy storage struct from specified PRISM_PROXY_STORAGE_POSITION\\n     * @return ps ProxyStorage struct\\n     */\\n    function proxyStorage() internal pure returns (ProxyStorage storage ps) {        \\n        bytes32 position = PRISM_PROXY_STORAGE_POSITION;\\n        assembly {\\n            ps.slot := position\\n        }\\n    }\\n\\n    /*** Admin Functions ***/\\n    \\n    /**\\n     * @notice Create new pending implementation for prism. msg.sender must be admin\\n     * @dev Admin function for proposing new implementation contract\\n     * @return boolean indicating success of operation\\n     */\\n    function setPendingProxyImplementation(address newPendingImplementation) public returns (bool) {\\n        ProxyStorage storage s = proxyStorage();\\n        require(msg.sender == s.admin, \\\"Prism::setPendingProxyImp: caller must be admin\\\");\\n\\n        address oldPendingImplementation = s.pendingImplementation;\\n\\n        s.pendingImplementation = newPendingImplementation;\\n\\n        emit NewPendingImplementation(oldPendingImplementation, s.pendingImplementation);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Accepts new implementation for prism. msg.sender must be pendingImplementation\\n     * @dev Admin function for new implementation to accept it's role as implementation\\n     * @return boolean indicating success of operation\\n     */\\n    function acceptProxyImplementation() public returns (bool) {\\n        ProxyStorage storage s = proxyStorage();\\n        // Check caller is pendingImplementation and pendingImplementation ≠ address(0)\\n        require(msg.sender == s.pendingImplementation && s.pendingImplementation != address(0), \\\"Prism::acceptProxyImp: caller must be pending implementation\\\");\\n \\n        // Save current values for inclusion in log\\n        address oldImplementation = s.implementation;\\n        address oldPendingImplementation = s.pendingImplementation;\\n\\n        s.implementation = s.pendingImplementation;\\n\\n        s.pendingImplementation = address(0);\\n        s.version++;\\n\\n        emit NewImplementation(oldImplementation, s.implementation);\\n        emit NewPendingImplementation(oldPendingImplementation, s.pendingImplementation);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `acceptAdmin` to finalize the transfer.\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `acceptAdmin` to finalize the transfer.\\n     * @param newPendingAdmin New pending admin.\\n     * @return boolean indicating success of operation\\n     */\\n    function setPendingProxyAdmin(address newPendingAdmin) public returns (bool) {\\n        ProxyStorage storage s = proxyStorage();\\n        // Check caller = admin\\n        require(msg.sender == s.admin, \\\"Prism::setPendingProxyAdmin: caller must be admin\\\");\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = s.pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        s.pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n     * @dev Admin function for pending admin to accept role and update admin\\n     * @return boolean indicating success of operation\\n     */\\n    function acceptProxyAdmin() public returns (bool) {\\n        ProxyStorage storage s = proxyStorage();\\n        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\\n        require(msg.sender == s.pendingAdmin && msg.sender != address(0), \\\"Prism::acceptProxyAdmin: caller must be pending admin\\\");\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = s.admin;\\n        address oldPendingAdmin = s.pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        s.admin = s.pendingAdmin;\\n\\n        // Clear the pending value\\n        s.pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, s.admin);\\n        emit NewPendingAdmin(oldPendingAdmin, s.pendingAdmin);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get current admin for prism proxy\\n     * @return admin address\\n     */\\n    function proxyAdmin() public view returns (address) {\\n        ProxyStorage storage s = proxyStorage();\\n        return s.admin;\\n    }\\n\\n    /**\\n     * @notice Get pending admin for prism proxy\\n     * @return admin address\\n     */\\n    function pendingProxyAdmin() public view returns (address) {\\n        ProxyStorage storage s = proxyStorage();\\n        return s.pendingAdmin;\\n    }\\n\\n    /**\\n     * @notice Address of implementation contract\\n     * @return implementation address\\n     */\\n    function proxyImplementation() public view returns (address) {\\n        ProxyStorage storage s = proxyStorage();\\n        return s.implementation;\\n    }\\n\\n    /**\\n     * @notice Address of pending implementation contract\\n     * @return pending implementation address\\n     */\\n    function pendingProxyImplementation() public view returns (address) {\\n        ProxyStorage storage s = proxyStorage();\\n        return s.pendingImplementation;\\n    }\\n\\n    /**\\n     * @notice Current implementation version for proxy\\n     * @return version number\\n     */\\n    function proxyImplementationVersion() public view returns (uint8) {\\n        ProxyStorage storage s = proxyStorage();\\n        return s.version;\\n    }\\n\\n    /**\\n     * @notice Delegates execution to an implementation contract.\\n     * @dev Returns to the external caller whatever the implementation returns or forwards reverts\\n     */\\n    function _forwardToImplementation() internal {\\n        ProxyStorage storage s = proxyStorage();\\n        // delegate all other functions to current implementation\\n        (bool success, ) = s.implementation.delegatecall(msg.data);\\n\\n        assembly {\\n              let free_mem_ptr := mload(0x40)\\n              returndatacopy(free_mem_ptr, 0, returndatasize())\\n\\n              switch success\\n              case 0 { revert(free_mem_ptr, returndatasize()) }\\n              default { return(free_mem_ptr, returndatasize()) }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/lib/PrismProxyImplementation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./PrismProxy.sol\\\";\\n\\ncontract PrismProxyImplementation is Initializable {\\n    /**\\n     * @notice Accept invitation to be implementation contract for proxy\\n     * @param prism Prism Proxy contract\\n     */\\n    function become(PrismProxy prism) public {\\n        require(msg.sender == prism.proxyAdmin(), \\\"Prism::become: only proxy admin can change implementation\\\");\\n        require(prism.acceptProxyImplementation() == true, \\\"Prism::become: change not authorized\\\");\\n    }\\n}\"\r\n    },\r\n    \"contracts/lib/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\"\r\n    },\r\n    \"contracts/lib/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/lib/VotingPowerStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../interfaces/IEdenToken.sol\\\";\\r\\nimport \\\"../interfaces/IVault.sol\\\";\\r\\nimport \\\"../interfaces/ITokenRegistry.sol\\\";\\r\\n\\r\\n/// @notice App metadata storage\\r\\nstruct AppStorage {\\r\\n    // A record of states for signing / validating signatures\\r\\n    mapping (address => uint) nonces;\\r\\n\\r\\n    // Eden token\\r\\n    IEdenToken edenToken;\\r\\n\\r\\n    // Voting Power owner\\r\\n    address owner;\\r\\n    \\r\\n    // lockManager contract\\r\\n    address lockManager;\\r\\n\\r\\n    // Token registry contract\\r\\n    ITokenRegistry tokenRegistry;\\r\\n}\\r\\n\\r\\n/// @notice A checkpoint for marking number of votes from a given block\\r\\nstruct Checkpoint {\\r\\n    uint32 fromBlock;\\r\\n    uint256 votes;\\r\\n}\\r\\n\\r\\n/// @notice All storage variables related to checkpoints\\r\\nstruct CheckpointStorage {\\r\\n     // A record of vote checkpoints for each account, by index\\r\\n    mapping (address => mapping (uint32 => Checkpoint)) checkpoints;\\r\\n\\r\\n    // The number of checkpoints for each account\\r\\n    mapping (address => uint32) numCheckpoints;\\r\\n}\\r\\n\\r\\n/// @notice The amount of a given token that has been staked, and the resulting voting power\\r\\nstruct Stake {\\r\\n    uint256 amount;\\r\\n    uint256 votingPower;\\r\\n}\\r\\n\\r\\n/// @notice All storage variables related to staking\\r\\nstruct StakeStorage {\\r\\n    // Official record of staked balances for each account > token > stake\\r\\n    mapping (address => mapping (address => Stake)) stakes;\\r\\n}\\r\\n\\r\\nlibrary VotingPowerStorage {\\r\\n    bytes32 constant VOTING_POWER_APP_STORAGE_POSITION = keccak256(\\\"voting.power.app.storage\\\");\\r\\n    bytes32 constant VOTING_POWER_CHECKPOINT_STORAGE_POSITION = keccak256(\\\"voting.power.checkpoint.storage\\\");\\r\\n    bytes32 constant VOTING_POWER_STAKE_STORAGE_POSITION = keccak256(\\\"voting.power.stake.storage\\\");\\r\\n    \\r\\n    /**\\r\\n     * @notice Load app storage struct from specified VOTING_POWER_APP_STORAGE_POSITION\\r\\n     * @return app AppStorage struct\\r\\n     */\\r\\n    function appStorage() internal pure returns (AppStorage storage app) {        \\r\\n        bytes32 position = VOTING_POWER_APP_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            app.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Load checkpoint storage struct from specified VOTING_POWER_CHECKPOINT_STORAGE_POSITION\\r\\n     * @return cs CheckpointStorage struct\\r\\n     */\\r\\n    function checkpointStorage() internal pure returns (CheckpointStorage storage cs) {        \\r\\n        bytes32 position = VOTING_POWER_CHECKPOINT_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            cs.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Load stake storage struct from specified VOTING_POWER_STAKE_STORAGE_POSITION\\r\\n     * @return ss StakeStorage struct\\r\\n     */\\r\\n    function stakeStorage() internal pure returns (StakeStorage storage ss) {        \\r\\n        bytes32 position = VOTING_POWER_STAKE_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ss.slot := position\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ChangedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"VotingPowerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addVotingPowerForLockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PrismProxy\",\"name\":\"prism\",\"type\":\"address\"}],\"name\":\"become\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"edenToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"}],\"name\":\"getAmountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getEDENAmountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getEDENStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Stake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Stake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_edenToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeVotingPowerForUnlockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLockManager\",\"type\":\"address\"}],\"name\":\"setLockManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"setTokenRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"stakeWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"VotingPower","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}