{"status":"1","message":"OK","result":[{"SourceCode":"// Verified by Darwinia Network\n\n// hevm: flattened sources of src/MetaDataTeller.sol\npragma solidity >0.4.13 >=0.4.23 >=0.4.24 <0.7.0 >=0.6.7 <0.7.0;\n\n////// lib/ds-auth/src/auth.sol\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity >=0.4.23; */\n\ninterface DSAuthority {\n    function canCall(\n        address src, address dst, bytes4 sig\n    ) external view returns (bool);\n}\n\ncontract DSAuthEvents {\n    event LogSetAuthority (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority  public  authority;\n    address      public  owner;\n\n    constructor() public {\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_)\n        public\n        auth\n    {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_)\n        public\n        auth\n    {\n        authority = authority_;\n        emit LogSetAuthority(address(authority));\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, address(this), sig);\n        }\n    }\n}\n\n////// lib/ds-math/src/math.sol\n/// math.sol -- mixin for inline numerical wizardry\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity >0.4.13; */\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    //rounds to zero if x*y < WAD / 2\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    //rounds to zero if x*y < WAD / 2\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    //rounds to zero if x*y < WAD / 2\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    //rounds to zero if x*y < RAY / 2\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\n////// lib/zeppelin-solidity/src/proxy/Initializable.sol\n// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\n/* pragma solidity >=0.4.24 <0.7.0; */\n\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n * \n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n * \n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        // extcodesize checks the size of the code stored in an address, and\n        // address returns the current address. Since the code is still not\n        // deployed when running a constructor, any checks on its code size will\n        // yield zero, making it an effective way to detect if a contract is\n        // under construction or not.\n        address self = address(this);\n        uint256 cs;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { cs := extcodesize(self) }\n        return cs == 0;\n    }\n}\n\n////// src/FurnaceSettingIds.sol\n/* pragma solidity ^0.6.7; */\n\ncontract FurnaceSettingIds {\n\tuint256 public constant PREFER_GOLD = 1 << 1;\n\tuint256 public constant PREFER_WOOD = 1 << 2;\n\tuint256 public constant PREFER_WATER = 1 << 3;\n\tuint256 public constant PREFER_FIRE = 1 << 4;\n\tuint256 public constant PREFER_SOIL = 1 << 5;\n\n\tuint8 public constant DRILL_OBJECT_CLASS = 4; // Drill\n\tuint8 public constant ITEM_OBJECT_CLASS = 5; // Item\n\tuint8 public constant DARWINIA_OBJECT_CLASS = 254; // Darwinia\n\n\t//0x4655524e4143455f415050000000000000000000000000000000000000000000\n\tbytes32 public constant FURNACE_APP = \"FURNACE_APP\";\n\n\t//0x4655524e4143455f4954454d5f4d494e455f4645450000000000000000000000\n\tbytes32 public constant FURNACE_ITEM_MINE_FEE = \"FURNACE_ITEM_MINE_FEE\";\n\n\tuint128 public constant RATE_PRECISION = 10**8;\n\n\t// 0x434f4e54524143545f494e5445525354454c4c41525f454e434f444552000000\n\tbytes32 public constant CONTRACT_INTERSTELLAR_ENCODER =\n\t\t\"CONTRACT_INTERSTELLAR_ENCODER\";\n\n\t// 0x434f4e54524143545f4c414e445f4954454d5f42415200000000000000000000\n\tbytes32 public constant CONTRACT_LAND_ITEM_BAR = \"CONTRACT_LAND_ITEM_BAR\";\n\n\t// 0x434f4e54524143545f41504f53544c455f4954454d5f42415200000000000000\n\tbytes32 public constant CONTRACT_APOSTLE_ITEM_BAR =\n\t\t\"CONTRACT_APOSTLE_ITEM_BAR\";\n\n\t// 0x434f4e54524143545f4954454d5f424153450000000000000000000000000000\n\tbytes32 public constant CONTRACT_ITEM_BASE = \"CONTRACT_ITEM_BASE\";\n\n\t// 0x434f4e54524143545f4452494c4c5f4241534500000000000000000000000000\n\tbytes32 public constant CONTRACT_DRILL_BASE = \"CONTRACT_DRILL_BASE\";\n\n\t// 0x434f4e54524143545f44415257494e49415f49544f5f42415345000000000000\n\tbytes32 public constant CONTRACT_DARWINIA_ITO_BASE = \"CONTRACT_DARWINIA_ITO_BASE\";\n\n\t// 0x434f4e54524143545f4c414e445f424153450000000000000000000000000000\n\tbytes32 public constant CONTRACT_LAND_BASE = \"CONTRACT_LAND_BASE\";\n\n\t// 0x434f4e54524143545f4f424a4543545f4f574e45525348495000000000000000\n\tbytes32 public constant CONTRACT_OBJECT_OWNERSHIP =\n\t\t\"CONTRACT_OBJECT_OWNERSHIP\";\n\n\t// 0x434f4e54524143545f4552433732315f4745474f000000000000000000000000\n\tbytes32 public constant CONTRACT_ERC721_GEGO = \"CONTRACT_ERC721_GEGO\";\n\n\t// 0x434f4e54524143545f464f524d554c4100000000000000000000000000000000\n\tbytes32 public constant CONTRACT_FORMULA = \"CONTRACT_FORMULA\";\n\n\t// 0x434f4e54524143545f4d455441444154415f54454c4c45520000000000000000\n\tbytes32 public constant CONTRACT_METADATA_TELLER =\n\t\t\"CONTRACT_METADATA_TELLER\";\n\n\t//0x434f4e54524143545f4c505f454c454d454e545f544f4b454e00000000000000\n\tbytes32 public constant CONTRACT_LP_ELEMENT_TOKEN = \n\t\t\"CONTRACT_LP_ELEMENT_TOKEN\";\n\n\t// 0x434f4e54524143545f4c505f474f4c445f45524332305f544f4b454e00000000\n\tbytes32 public constant CONTRACT_LP_GOLD_ERC20_TOKEN =\n\t\t\"CONTRACT_LP_GOLD_ERC20_TOKEN\";\n\n\t// 0x434f4e54524143545f4c505f574f4f445f45524332305f544f4b454e00000000\n\tbytes32 public constant CONTRACT_LP_WOOD_ERC20_TOKEN =\n\t\t\"CONTRACT_LP_WOOD_ERC20_TOKEN\";\n\n\t// 0x434f4e54524143545f4c505f57415445525f45524332305f544f4b454e000000\n\tbytes32 public constant CONTRACT_LP_WATER_ERC20_TOKEN =\n\t\t\"CONTRACT_LP_WATER_ERC20_TOKEN\";\n\n\t// 0x434f4e54524143545f4c505f464952455f45524332305f544f4b454e00000000\n\tbytes32 public constant CONTRACT_LP_FIRE_ERC20_TOKEN =\n\t\t\"CONTRACT_LP_FIRE_ERC20_TOKEN\";\n\n\t// 0x434f4e54524143545f4c505f534f494c5f45524332305f544f4b454e00000000\n\tbytes32 public constant CONTRACT_LP_SOIL_ERC20_TOKEN =\n\t\t\"CONTRACT_LP_SOIL_ERC20_TOKEN\";\n\n\t// 0x434f4e54524143545f52494e475f45524332305f544f4b454e00000000000000\n\tbytes32 public constant CONTRACT_RING_ERC20_TOKEN =\n\t\t\"CONTRACT_RING_ERC20_TOKEN\";\n\n\t// 0x434f4e54524143545f4b544f4e5f45524332305f544f4b454e00000000000000\n\tbytes32 public constant CONTRACT_KTON_ERC20_TOKEN =\n\t\t\"CONTRACT_KTON_ERC20_TOKEN\";\n\n\t//0x434f4e54524143545f454c454d454e545f544f4b454e00000000000000000000\n\tbytes32 public constant CONTRACT_ELEMENT_TOKEN = \n\t\t\"CONTRACT_ELEMENT_TOKEN\";\n\n\t// 0x434f4e54524143545f474f4c445f45524332305f544f4b454e00000000000000\n\tbytes32 public constant CONTRACT_GOLD_ERC20_TOKEN =\n\t\t\"CONTRACT_GOLD_ERC20_TOKEN\";\n\n\t// 0x434f4e54524143545f574f4f445f45524332305f544f4b454e00000000000000\n\tbytes32 public constant CONTRACT_WOOD_ERC20_TOKEN =\n\t\t\"CONTRACT_WOOD_ERC20_TOKEN\";\n\n\t// 0x434f4e54524143545f57415445525f45524332305f544f4b454e000000000000\n\tbytes32 public constant CONTRACT_WATER_ERC20_TOKEN =\n\t\t\"CONTRACT_WATER_ERC20_TOKEN\";\n\n\t// 0x434f4e54524143545f464952455f45524332305f544f4b454e00000000000000\n\tbytes32 public constant CONTRACT_FIRE_ERC20_TOKEN =\n\t\t\"CONTRACT_FIRE_ERC20_TOKEN\";\n\n\t// 0x434f4e54524143545f534f494c5f45524332305f544f4b454e00000000000000\n\tbytes32 public constant CONTRACT_SOIL_ERC20_TOKEN =\n\t\t\"CONTRACT_SOIL_ERC20_TOKEN\";\n}\n\n////// src/interfaces/IELIP002.sol\n/* pragma solidity ^0.6.7; */\n\n/**\n@title IELIP002\n@dev See https://github.com/evolutionlandorg/furnace/blob/main/elip-002.md\n@author echo.hu@itering.com\n*/\ninterface IELIP002 {\n\tstruct Item {\n\t\t// index of `Formula`\n\t\tuint256 index;\n\t\t//  strength rate\n\t\tuint128 rate;\n\t\tuint16 objClassExt;\n\t\tuint16 class;\n\t\tuint16 grade;\n\t\t// element prefer\n\t\tuint16 prefer;\n\t\t//  major material\n\t\taddress major;\n\t\tuint256 id;\n\t\t// amount of minor material\n\t\taddress minor;\n\t\tuint256 amount;\n\t}\n\n\t/**\n        @dev `Enchanted` MUST emit when item is enchanted.\n        The `user` argument MUST be the address of an account/contract that is approved to make the enchant (SHOULD be msg.sender).\n        The `tokenId` argument MUST be token Id of the item which it is enchanted.\n        The `index` argument MUST be index of the `Formula`.\n        The `rate` argument MUST be rate of minor material.\n        The `objClassExt` argument MUST be extension of `ObjectClass`.\n        The `class` argument MUST be class of the item.\n        The `grade` argument MUST be grade of the item.\n        The `prefer` argument MUST be prefer of the item.\n        The `major` argument MUST be token address of major material.\n        The `id` argument MUST be token id of major material.\n        The `minor` argument MUST be token address of minor material.\n        The `amount` argument MUST be token amount of minor material.\n        The `now` argument MUST be timestamp of enchant.\n    */\n\tevent Enchanced(\n\t\taddress indexed user,\n\t\tuint256 indexed tokenId,\n\t\tuint256 index,\n\t\tuint128 rate,\n\t\tuint16 objClassExt,\n\t\tuint16 class,\n\t\tuint16 grade,\n\t\tuint16 prefer,\n\t\taddress major,\n\t\tuint256 id,\n\t\taddress minor,\n\t\tuint256 amount,\n\t\tuint256 now\n\t);\n\n\t/**\n        @dev `Disenchanted` MUST emit when item is disenchanted.\n        The `user` argument MUST be the address of an account/contract that is approved to make the disenchanted (SHOULD be msg.sender).\n        The `tokenId` argument MUST be token Id of the item which it is disenchated.\n        The `majors` argument MUST be major token addresses of major material.\n        The `id` argument MUST be token ids of major material.\n        The `minor` argument MUST be token addresses of minor material.\n        The `amount` argument MUST be token amounts of minor material.\n    */\n\tevent Disenchanted(\n\t\taddress indexed user,\n\t\tuint256 tokenId,\n\t\taddress major,\n\t\tuint256 id,\n\t\taddress minor,\n\t\tuint256 amount\n\t);\n\n\t/**\n        @notice Caller must be owner of tokens to enchant.\n        @dev Enchant function, Enchant a new NFT token from ERC721 tokens and ERC20 tokens. Enchant rule is according to `Formula`.\n        MUST revert if `_index` is not in `formula`.\n        MUST revert on any other error.        \n\t\t@param _index  Index of formula to enchant.\n        @param _id     ID of NFT tokens.\n        @param _token  Address of FT token.\n\t\t@return {\n\t\t\t\"tokenId\": \"New Token ID of Enchanting.\"\n\t\t}\n    */\n\tfunction enchant(\n\t\tuint256 _index,\n\t\tuint256 _id,\n\t\taddress _token\n\t) external returns (uint256);\n\n\t// {\n\t// \t### smelt\n\t// \t1. check Formula rule by index\n\t//  2. transfer FT and NFT to address(this)\n\t// \t3. track FTs NFT to new NFT\n\t// \t4. mint new NFT to caller\n\t// }\n\n\t/**\n        @notice Caller must be owner of token id to disenchat.\n        @dev Disenchant function, A enchanted NFT can be disenchanted into origin ERC721 tokens and ERC20 tokens recursively.\n        MUST revert on any other error.        \n        @param _id     Token ID to disenchant.\n        @param _depth   Depth of disenchanting recursively.\n    */\n\tfunction disenchant(uint256 _id, uint256 _depth) external;\n\n\t// {\n\t// \t### disenchant\n\t//  1. tranfer _id to address(this)\n\t// \t2. burn new NFT\n\t// \t3. delete track FTs NFTs to new NFT\n\t// \t4. transfer FNs NFTs to owner\n\t// }\n\n\t/**\n        @dev Get base info of item.\n        @param _tokenId Token id of item.\n\t\t@return {\n\t\t\t\"objClassExt\": \"Extension of `ObjectClass`.\",\n\t\t\t\"class\": \"Class of the item.\",\n\t\t\t\"grade\": \"Grade of the item.\"\n\t\t}\n    */\n\tfunction getBaseInfo(uint256 _tokenId)\n\t\texternal\n\t\tview\n\t\treturns (\n\t\t\tuint16,\n\t\t\tuint16,\n\t\t\tuint16\n\t\t);\n\n\t/**\n        @dev Get rate of item.\n        @param _tokenId Token id of item.\n        @param _element Element item prefer.\n\t\t@return {\n\t\t\t\"rate\": \"strength rate of item.\"\n\t\t}\n    */\n\tfunction getRate(uint256 _tokenId, uint256 _element)\n\t\texternal\n\t\tview\n\t\treturns (uint256);\n\n\tfunction getPrefer(uint256 _tokenId)\n\t\texternal\n\t\tview\n\t\treturns (uint16);\n\n\tfunction getObjectClassExt(uint256 _tokenId) \n\t\texternal\t\n\t\tview\n\t\treturns (uint16);\n}\n\n////// src/interfaces/IInterstellarEncoder.sol\n/* pragma solidity ^0.6.7; */\n\ninterface IInterstellarEncoder {\n\tfunction registerNewObjectClass(address _objectContract, uint8 objectClass)\n\t\texternal;\n\n\tfunction encodeTokenId(\n\t\taddress _tokenAddress,\n\t\tuint8 _objectClass,\n\t\tuint128 _objectIndex\n\t) external view returns (uint256 _tokenId);\n\n\tfunction encodeTokenIdForObjectContract(\n\t\taddress _tokenAddress,\n\t\taddress _objectContract,\n\t\tuint128 _objectId\n\t) external view returns (uint256 _tokenId);\n\n\tfunction encodeTokenIdForOuterObjectContract(\n\t\taddress _objectContract,\n\t\taddress nftAddress,\n\t\taddress _originNftAddress,\n\t\tuint128 _objectId,\n\t\tuint16 _producerId,\n\t\tuint8 _convertType\n\t) external view returns (uint256);\n\n\tfunction getContractAddress(uint256 _tokenId)\n\t\texternal\n\t\tview\n\t\treturns (address);\n\n\tfunction getObjectId(uint256 _tokenId)\n\t\texternal\n\t\tview\n\t\treturns (uint128 _objectId);\n\n\tfunction getObjectClass(uint256 _tokenId) external view returns (uint8);\n\n\tfunction getObjectAddress(uint256 _tokenId) external view returns (address);\n\n\tfunction getProducerId(uint256 _tokenId) external view returns (uint16);\n\n\tfunction getOriginAddress(uint256 _tokenId) external view returns (address);\n}\n\n////// src/interfaces/ILandBase.sol\n/* pragma solidity ^0.6.7; */\n\ninterface ILandBase { \n    function resourceToken2RateAttrId(address _resourceToken) external view returns (uint256);\n}\n\n////// src/interfaces/ISettingsRegistry.sol\n/* pragma solidity ^0.6.7; */\n\ninterface ISettingsRegistry {\n    function uintOf(bytes32 _propertyName) external view returns (uint256);\n\n    function stringOf(bytes32 _propertyName) external view returns (string memory);\n\n    function addressOf(bytes32 _propertyName) external view returns (address);\n\n    function bytesOf(bytes32 _propertyName) external view returns (bytes memory);\n\n    function boolOf(bytes32 _propertyName) external view returns (bool);\n\n    function intOf(bytes32 _propertyName) external view returns (int);\n\n    function setUintProperty(bytes32 _propertyName, uint _value) external;\n\n    function setStringProperty(bytes32 _propertyName, string calldata _value) external;\n\n    function setAddressProperty(bytes32 _propertyName, address _value) external;\n\n    function setBytesProperty(bytes32 _propertyName, bytes calldata _value) external;\n\n    function setBoolProperty(bytes32 _propertyName, bool _value) external;\n\n    function setIntProperty(bytes32 _propertyName, int _value) external;\n\n    function getValueTypeOf(bytes32 _propertyName) external view returns (uint /* SettingsValueTypes */ );\n\n    event ChangeProperty(bytes32 indexed _propertyName, uint256 _type);\n}\n\n////// src/interfaces/IUniswapV2Pair.sol\n/* pragma solidity ^0.6.7; */\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    // solhint-disable-next-line func-name-mixedcase\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n\n    // solhint-disable-next-line func-name-mixedcase\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\n////// src/MetaDataTeller.sol\n/* pragma solidity ^0.6.7; */\n\n/* import \"ds-math/math.sol\"; */\n/* import \"ds-auth/auth.sol\"; */\n/* import \"zeppelin-solidity/proxy/Initializable.sol\"; */\n/* import \"./interfaces/ISettingsRegistry.sol\"; */\n/* import \"./interfaces/IUniswapV2Pair.sol\"; */\n/* import \"./interfaces/IELIP002.sol\"; */\n/* import \"./interfaces/IInterstellarEncoder.sol\"; */\n/* import \"./interfaces/ILandBase.sol\"; */\n/* import \"./interfaces/IELIP002.sol\"; */\n/* import \"./FurnaceSettingIds.sol\"; */\n\ncontract MetaDataTeller is Initializable, DSAuth, DSMath, FurnaceSettingIds {\n\tevent AddLPToken(bytes32 _class, address _lpToken, uint8 _resourceId);\n\tevent AddInternalTokenMeta(\n\t\tbytes32 indexed token,\n\t\tuint16 grade,\n\t\tuint256 trengthRate\n\t);\n\tevent AddExternalTokenMeta(\n\t\taddress indexed token,\n\t\tuint16 objectClassExt,\n\t\tuint16 grade,\n\t\tuint256 trengthRate\n\t);\n\tevent RemoveLPToken(bytes32 _class, address _lpToken);\n\tevent RemoveExternalTokenMeta(address indexed token);\n\tevent RemoveInternalTokenMeta(bytes32 indexed token, uint16 grade);\n\n\tstruct Meta {\n\t\tuint16 objectClassExt;\n\t\tmapping(uint16 => uint256) grade2StrengthRate;\n\t}\n\n\tuint16 internal constant _EXTERNAL_DEFAULT_CLASS = 0;\n\tuint16 internal constant _EXTERNAL_DEFAULT_GRADE = 1;\n\n\tISettingsRegistry public registry;\n\t/**\n\t * @dev mapping from resource lptoken address to resource atrribute rate id.\n\t * atrribute rate id starts from 1 to 15, NAN is 0.\n\t * goldrate is 1, woodrate is 2, waterrate is 3, firerate is 4, soilrate is 5\n\t */\n\t// (ID => (LP_TOKENA_TOKENB => resourceId))\n\tmapping(bytes32 => mapping(address => uint8))\n\t\tpublic resourceLPToken2RateAttrId;\n\tmapping(address => Meta) public externalToken2Meta;\n\tmapping(bytes32 => mapping(uint16 => uint256)) public internalToken2Meta;\n\n\tfunction initialize(address _registry) public initializer {\n\t\towner = msg.sender;\n\t\temit LogSetOwner(msg.sender);\n\t\tregistry = ISettingsRegistry(_registry);\n\n\t\tresourceLPToken2RateAttrId[CONTRACT_LP_ELEMENT_TOKEN][\n\t\t\tregistry.addressOf(CONTRACT_LP_GOLD_ERC20_TOKEN)\n\t\t] = 1;\n\t\tresourceLPToken2RateAttrId[CONTRACT_LP_ELEMENT_TOKEN][\n\t\t\tregistry.addressOf(CONTRACT_LP_WOOD_ERC20_TOKEN)\n\t\t] = 2;\n\t\tresourceLPToken2RateAttrId[CONTRACT_LP_ELEMENT_TOKEN][\n\t\t\tregistry.addressOf(CONTRACT_LP_WATER_ERC20_TOKEN)\n\t\t] = 3;\n\t\tresourceLPToken2RateAttrId[CONTRACT_LP_ELEMENT_TOKEN][\n\t\t\tregistry.addressOf(CONTRACT_LP_FIRE_ERC20_TOKEN)\n\t\t] = 4;\n\t\tresourceLPToken2RateAttrId[CONTRACT_LP_ELEMENT_TOKEN][\n\t\t\tregistry.addressOf(CONTRACT_LP_SOIL_ERC20_TOKEN)\n\t\t] = 5;\n\t}\n\n\tfunction addLPToken(\n\t\tbytes32 _id,\n\t\taddress _lpToken,\n\t\tuint8 _resourceId\n\t) public auth {\n\t\trequire(\n\t\t\t_resourceId > 0 && _resourceId < 6,\n\t\t\t\"Furnace: INVALID_RESOURCEID\"\n\t\t);\n\t\tresourceLPToken2RateAttrId[_id][_lpToken] = _resourceId;\n\t\temit AddLPToken(_id, _lpToken, _resourceId);\n\t}\n\n\tfunction addInternalTokenMeta(\n\t\tbytes32 _token,\n\t\tuint16 _grade,\n\t\tuint256 _strengthRate\n\t) public auth {\n\t\tinternalToken2Meta[_token][_grade] = _strengthRate;\n\t\temit AddInternalTokenMeta(_token, _grade, _strengthRate);\n\t}\n\n\tfunction addExternalTokenMeta(\n\t\taddress _token,\n\t\tuint16 _objectClassExt,\n\t\tuint16 _grade,\n\t\tuint256 _strengthRate\n\t) public auth {\n\t\trequire(_objectClassExt > 0, \"Furnace: INVALID_OBJCLASSEXT\");\n\t\texternalToken2Meta[_token].objectClassExt = _objectClassExt;\n\t\texternalToken2Meta[_token].grade2StrengthRate[_grade] = _strengthRate;\n\t\temit AddExternalTokenMeta(\n\t\t\t_token,\n\t\t\t_objectClassExt,\n\t\t\t_grade,\n\t\t\t_strengthRate\n\t\t);\n\t}\n\n\tfunction removeLPToken(bytes32 _id, address _lpToken) public auth {\n\t\trequire(\n\t\t\tresourceLPToken2RateAttrId[_id][_lpToken] > 0,\n\t\t\t\"Furnace: EMPTY\"\n\t\t);\n\t\tdelete resourceLPToken2RateAttrId[_id][_lpToken];\n\t\temit RemoveLPToken(_id, _lpToken);\n\t}\n\n\tfunction removeExternalTokenMeta(address _token) public auth {\n\t\trequire(\n\t\t\texternalToken2Meta[_token].objectClassExt > 0,\n\t\t\t\"Furnace: EMPTY\"\n\t\t);\n\t\tdelete externalToken2Meta[_token];\n\t\temit RemoveExternalTokenMeta(_token);\n\t}\n\n\tfunction removeInternalTokenMeta(bytes32 _token, uint16 _grade)\n\t\tpublic\n\t\tauth\n\t{\n\t\tdelete internalToken2Meta[_token][_grade];\n\t\temit RemoveInternalTokenMeta(_token, _grade);\n\t}\n\n\tfunction getExternalObjectClassExt(address _token)\n\t\tpublic\n\t\tview\n\t\treturns (uint16)\n\t{\n\t\trequire(\n\t\t\texternalToken2Meta[_token].objectClassExt > 0,\n\t\t\t\"Furnace: NOT_SUPPORT\"\n\t\t);\n\t\treturn externalToken2Meta[_token].objectClassExt;\n\t}\n\n\tfunction getExternalStrengthRate(address _token, uint16 _grade)\n\t\tpublic\n\t\tview\n\t\treturns (uint256)\n\t{\n\t\trequire(\n\t\t\texternalToken2Meta[_token].objectClassExt > 0,\n\t\t\t\"Furnace: NOT_SUPPORT\"\n\t\t);\n\t\treturn uint256(externalToken2Meta[_token].grade2StrengthRate[_grade]);\n\t}\n\n\tfunction getInternalStrengthRate(bytes32 _token, uint16 _grade)\n\t\tpublic\n\t\tview\n\t\treturns (uint256)\n\t{\n        require(internalToken2Meta[_token][_grade] > 0, \"Furnace: NOT_SUPPORT\");\n\t\treturn uint256(internalToken2Meta[_token][_grade]);\n\t}\n\n\tfunction getMetaData(address _token, uint256 _id)\n\t\tpublic\n\t\tview\n\t\treturns (\n\t\t\tuint16,\n\t\t\tuint16,\n\t\t\tuint16\n\t\t)\n\t{\n\t\tif (_token == registry.addressOf(CONTRACT_OBJECT_OWNERSHIP)) {\n\t\t\tuint8 objectClass =\n\t\t\t\tIInterstellarEncoder(\n\t\t\t\t\tregistry.addressOf(CONTRACT_INTERSTELLAR_ENCODER)\n\t\t\t\t)\n\t\t\t\t\t.getObjectClass(_id);\n\t\t\tif (objectClass == ITEM_OBJECT_CLASS) {\n\t\t\t\treturn\n\t\t\t\t\tIELIP002(registry.addressOf(CONTRACT_ITEM_BASE))\n\t\t\t\t\t\t.getBaseInfo(_id);\n\t\t\t} else if (objectClass == DRILL_OBJECT_CLASS) {\n\t\t\t\treturn (\n\t\t\t\t\tobjectClass,\n\t\t\t\t\t_EXTERNAL_DEFAULT_CLASS,\n\t\t\t\t\tgetDrillGrade(_id)\n\t\t\t\t);\n\t\t\t} \n\t\t}\n\t\t// external token\n\t\treturn (\n\t\t\tgetExternalObjectClassExt(_token),\n\t\t\t_EXTERNAL_DEFAULT_CLASS,\n\t\t\t_EXTERNAL_DEFAULT_GRADE\n\t\t);\n\t}\n\n\tfunction getDrillGrade(uint256 _tokenId) public pure returns (uint16) {\n\t\tuint128 objectId = uint128(_tokenId);\n\t\treturn uint16(objectId >> 112);\n\t}\n\n\tfunction getPrefer(bytes32 _minor, address _token)\n\t\texternal\n\t\tview\n\t\treturns (uint256)\n\t{\n\t\tif (_minor == CONTRACT_ELEMENT_TOKEN) {\n\t\t\treturn\n\t\t\t\tILandBase(registry.addressOf(CONTRACT_LAND_BASE))\n\t\t\t\t\t.resourceToken2RateAttrId(_token);\n\t\t} else {\n\t\t\treturn resourceLPToken2RateAttrId[_minor][_token];\n\t\t}\n\t}\n\n\tfunction getRate(\n\t\taddress _token,\n\t\tuint256 _id,\n\t\tuint256 _element\n\t) external view returns (uint256) {\n\t\tif (_token == address(0)) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (_token == registry.addressOf(CONTRACT_OBJECT_OWNERSHIP)) {\n\t\t\tuint8 objectClass =\n\t\t\t\tIInterstellarEncoder(\n\t\t\t\t\tregistry.addressOf(CONTRACT_INTERSTELLAR_ENCODER)\n\t\t\t\t)\n\t\t\t\t\t.getObjectClass(_id);\n\t\t\tif (objectClass == ITEM_OBJECT_CLASS) {\n\t\t\t\treturn\n\t\t\t\t\tIELIP002(registry.addressOf(CONTRACT_ITEM_BASE)).getRate(\n\t\t\t\t\t\t_id,\n\t\t\t\t\t\t_element\n\t\t\t\t\t);\n\t\t\t} else if (objectClass == DRILL_OBJECT_CLASS) {\n\t\t\t\tuint16 grade = getDrillGrade(_id);\n\t\t\t\treturn getInternalStrengthRate(CONTRACT_DRILL_BASE, grade);\n\t\t\t} \n\t\t}\n\t\treturn getExternalStrengthRate(_token, _EXTERNAL_DEFAULT_GRADE);\n\t}\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"objectClassExt\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"grade\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trengthRate\",\"type\":\"uint256\"}],\"name\":\"AddExternalTokenMeta\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"token\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"grade\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trengthRate\",\"type\":\"uint256\"}],\"name\":\"AddInternalTokenMeta\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_class\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_resourceId\",\"type\":\"uint8\"}],\"name\":\"AddLPToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RemoveExternalTokenMeta\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"token\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"grade\",\"type\":\"uint16\"}],\"name\":\"RemoveInternalTokenMeta\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_class\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"RemoveLPToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTRACT_APOSTLE_ITEM_BAR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_DARWINIA_ITO_BASE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_DRILL_BASE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_ELEMENT_TOKEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_ERC721_GEGO\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_FIRE_ERC20_TOKEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_FORMULA\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_GOLD_ERC20_TOKEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_INTERSTELLAR_ENCODER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_ITEM_BASE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_KTON_ERC20_TOKEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_LAND_BASE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_LAND_ITEM_BAR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_LP_ELEMENT_TOKEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_LP_FIRE_ERC20_TOKEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_LP_GOLD_ERC20_TOKEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_LP_SOIL_ERC20_TOKEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_LP_WATER_ERC20_TOKEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_LP_WOOD_ERC20_TOKEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_METADATA_TELLER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_OBJECT_OWNERSHIP\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_RING_ERC20_TOKEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_SOIL_ERC20_TOKEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_WATER_ERC20_TOKEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_WOOD_ERC20_TOKEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DARWINIA_OBJECT_CLASS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DRILL_OBJECT_CLASS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FURNACE_APP\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FURNACE_ITEM_MINE_FEE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ITEM_OBJECT_CLASS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PREFER_FIRE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PREFER_GOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PREFER_SOIL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PREFER_WATER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PREFER_WOOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE_PRECISION\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_objectClassExt\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_grade\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_strengthRate\",\"type\":\"uint256\"}],\"name\":\"addExternalTokenMeta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_token\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_grade\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_strengthRate\",\"type\":\"uint256\"}],\"name\":\"addInternalTokenMeta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_resourceId\",\"type\":\"uint8\"}],\"name\":\"addLPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract DSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"externalToken2Meta\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"objectClassExt\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getDrillGrade\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getExternalObjectClassExt\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_grade\",\"type\":\"uint16\"}],\"name\":\"getExternalStrengthRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_token\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_grade\",\"type\":\"uint16\"}],\"name\":\"getInternalStrengthRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getMetaData\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_minor\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getPrefer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_element\",\"type\":\"uint256\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"internalToken2Meta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract ISettingsRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeExternalTokenMeta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_token\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_grade\",\"type\":\"uint16\"}],\"name\":\"removeInternalTokenMeta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"removeLPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"resourceLPToken2RateAttrId\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract DSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MetaDataTeller","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}