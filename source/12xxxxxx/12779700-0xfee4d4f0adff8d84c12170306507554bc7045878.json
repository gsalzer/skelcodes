{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ProxyReader.sol\": {\r\n      \"content\": \"// @author Unstoppable Domains, Inc.\\n// @date June 16th, 2021\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\n\\nimport './cns/ICNSRegistry.sol';\\nimport './cns/IResolver.sol';\\nimport './IDataReader.sol';\\nimport './IRecordReader.sol';\\nimport './IUNSRegistry.sol';\\nimport './IRegistryReader.sol';\\n\\ncontract ProxyReader is ERC165Upgradeable, IRegistryReader, IRecordReader, IDataReader {\\n    using SafeMathUpgradeable for uint256;\\n\\n    string public constant NAME = 'UNS: Proxy Reader';\\n    string public constant VERSION = '0.1.0';\\n\\n    IUNSRegistry private immutable _unsRegistry;\\n    ICNSRegistry private immutable _cnsRegistry;\\n\\n    constructor(IUNSRegistry unsRegistry, ICNSRegistry cnsRegistry) {\\n        _unsRegistry = unsRegistry;\\n        _cnsRegistry = cnsRegistry;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IRegistryReader).interfaceId ||\\n            interfaceId == type(IRecordReader).interfaceId ||\\n            interfaceId == type(IDataReader).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function tokenURI(uint256 tokenId) external view override returns (string memory) {\\n        if (_unsRegistry.exists(tokenId)) {\\n            return _unsRegistry.tokenURI(tokenId);\\n        } else {\\n            return _cnsRegistry.tokenURI(tokenId);\\n        }\\n    }\\n\\n    function isApprovedOrOwner(address spender, uint256 tokenId) external view override returns (bool) {\\n        if (_unsRegistry.exists(tokenId)) {\\n            return _unsRegistry.isApprovedOrOwner(spender, tokenId);\\n        } else {\\n            return _cnsRegistry.isApprovedOrOwner(spender, tokenId);\\n        }\\n    }\\n\\n    function resolverOf(uint256 tokenId) external view override returns (address) {\\n        if (_unsRegistry.exists(tokenId)) {\\n            return _unsRegistry.resolverOf(tokenId);\\n        } else {\\n            return _cnsRegistry.resolverOf(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev returns token id of child. The function is universal for all registries.\\n     */\\n    function childIdOf(uint256 tokenId, string calldata label) external view override returns (uint256) {\\n        return _unsRegistry.childIdOf(tokenId, label);\\n    }\\n\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        return _unsRegistry.balanceOf(owner).add(_cnsRegistry.balanceOf(owner));\\n    }\\n\\n    function ownerOf(uint256 tokenId) external view override returns (address) {\\n        return _ownerOf(tokenId);\\n    }\\n\\n    function getApproved(uint256 tokenId) external view override returns (address) {\\n        if (_unsRegistry.exists(tokenId)) {\\n            return _unsRegistry.getApproved(tokenId);\\n        } else {\\n            return _cnsRegistry.getApproved(tokenId);\\n        }\\n    }\\n\\n    // Deprecated\\n    function isApprovedForAll(address, address) external pure override returns (bool) {\\n        revert('ProxyReader: UNSUPPORTED_METHOD');\\n    }\\n\\n    function exists(uint256 tokenId) external view override returns (bool) {\\n        return _unsRegistry.exists(tokenId) || _cnsOwnerOf(tokenId) != address(0x0);\\n    }\\n\\n    function get(string calldata key, uint256 tokenId) external view override returns (string memory value) {\\n        if (_unsRegistry.exists(tokenId)) {\\n            return _unsRegistry.get(key, tokenId);\\n        } else {\\n            address resolver = _cnsResolverOf(tokenId);\\n            if (resolver != address(0x0)) {\\n                value = IResolver(resolver).get(key, tokenId);\\n            }\\n        }\\n    }\\n\\n    function getMany(string[] calldata keys, uint256 tokenId) external view override returns (string[] memory values) {\\n        values = new string[](keys.length);\\n        if (_unsRegistry.exists(tokenId)) {\\n            return _unsRegistry.getMany(keys, tokenId);\\n        } else {\\n            address resolver = _cnsResolverOf(tokenId);\\n            if (resolver != address(0x0) && keys.length > 0) {\\n                values = IResolver(resolver).getMany(keys, tokenId);\\n            }\\n        }\\n    }\\n\\n    function getByHash(uint256 keyHash, uint256 tokenId)\\n        external\\n        view\\n        override\\n        returns (string memory key, string memory value)\\n    {\\n        if (_unsRegistry.exists(tokenId)) {\\n            return _unsRegistry.getByHash(keyHash, tokenId);\\n        } else {\\n            address resolver = _cnsResolverOf(tokenId);\\n            if (resolver != address(0x0)) {\\n                (key, value) = IResolver(resolver).getByHash(keyHash, tokenId);\\n            }\\n        }\\n    }\\n\\n    function getManyByHash(uint256[] calldata keyHashes, uint256 tokenId)\\n        external\\n        view\\n        override\\n        returns (string[] memory keys, string[] memory values)\\n    {\\n        keys = new string[](keyHashes.length);\\n        values = new string[](keyHashes.length);\\n        if (_unsRegistry.exists(tokenId)) {\\n            return _unsRegistry.getManyByHash(keyHashes, tokenId);\\n        } else {\\n            address resolver = _cnsResolverOf(tokenId);\\n            if (resolver != address(0x0) && keyHashes.length > 0) {\\n                (keys, values) = IResolver(resolver).getManyByHash(keyHashes, tokenId);\\n            }\\n        }\\n    }\\n\\n    function getData(string[] calldata keys, uint256 tokenId)\\n        external\\n        view\\n        override\\n        returns (\\n            address resolver,\\n            address owner,\\n            string[] memory values\\n        )\\n    {\\n        return _getData(keys, tokenId);\\n    }\\n\\n    function getDataForMany(string[] calldata keys, uint256[] calldata tokenIds)\\n        external\\n        view\\n        override\\n        returns (\\n            address[] memory resolvers,\\n            address[] memory owners,\\n            string[][] memory values\\n        )\\n    {\\n        resolvers = new address[](tokenIds.length);\\n        owners = new address[](tokenIds.length);\\n        values = new string[][](tokenIds.length);\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            (resolvers[i], owners[i], values[i]) = _getData(keys, tokenIds[i]);\\n        }\\n    }\\n\\n    function getDataByHash(uint256[] calldata keyHashes, uint256 tokenId)\\n        external\\n        view\\n        override\\n        returns (\\n            address resolver,\\n            address owner,\\n            string[] memory keys,\\n            string[] memory values\\n        )\\n    {\\n        return _getDataByHash(keyHashes, tokenId);\\n    }\\n\\n    function getDataByHashForMany(uint256[] calldata keyHashes, uint256[] calldata tokenIds)\\n        external\\n        view\\n        override\\n        returns (\\n            address[] memory resolvers,\\n            address[] memory owners,\\n            string[][] memory keys,\\n            string[][] memory values\\n        )\\n    {\\n        resolvers = new address[](tokenIds.length);\\n        owners = new address[](tokenIds.length);\\n        keys = new string[][](tokenIds.length);\\n        values = new string[][](tokenIds.length);\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            (resolvers[i], owners[i], keys[i], values[i]) = _getDataByHash(keyHashes, tokenIds[i]);\\n        }\\n    }\\n\\n    function ownerOfForMany(uint256[] calldata tokenIds) external view override returns (address[] memory owners) {\\n        owners = new address[](tokenIds.length);\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            owners[i] = _ownerOf(tokenIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns registry address for specified token or zero address if token does not exist.\\n     */\\n    function registryOf(uint256 tokenId) external view returns (address) {\\n        if (_unsRegistry.exists(tokenId)) {\\n            return address(_unsRegistry);\\n        } else if (_cnsOwnerOf(tokenId) != address(0x0)) {\\n            return address(_cnsRegistry);\\n        }\\n        return address(0x0);\\n    }\\n\\n    function _getData(string[] calldata keys, uint256 tokenId)\\n        private\\n        view\\n        returns (\\n            address resolver,\\n            address owner,\\n            string[] memory values\\n        )\\n    {\\n        values = new string[](keys.length);\\n        if (_unsRegistry.exists(tokenId)) {\\n            resolver = _unsRegistry.resolverOf(tokenId);\\n            owner = _unsRegistry.ownerOf(tokenId);\\n            values = _unsRegistry.getMany(keys, tokenId);\\n        } else {\\n            resolver = _cnsResolverOf(tokenId);\\n            owner = _cnsOwnerOf(tokenId);\\n            if (resolver != address(0x0) && keys.length > 0) {\\n                values = IResolver(resolver).getMany(keys, tokenId);\\n            }\\n        }\\n    }\\n\\n    function _getDataByHash(uint256[] calldata keyHashes, uint256 tokenId)\\n        private\\n        view\\n        returns (\\n            address resolver,\\n            address owner,\\n            string[] memory keys,\\n            string[] memory values\\n        )\\n    {\\n        keys = new string[](keyHashes.length);\\n        values = new string[](keyHashes.length);\\n        if (_unsRegistry.exists(tokenId)) {\\n            resolver = _unsRegistry.resolverOf(tokenId);\\n            owner = _unsRegistry.ownerOf(tokenId);\\n            (keys, values) = _unsRegistry.getManyByHash(keyHashes, tokenId);\\n        } else {\\n            resolver = _cnsResolverOf(tokenId);\\n            owner = _cnsOwnerOf(tokenId);\\n            if (resolver != address(0x0) && keys.length > 0) {\\n                (keys, values) = IResolver(resolver).getManyByHash(keyHashes, tokenId);\\n            }\\n        }\\n    }\\n\\n    function _ownerOf(uint256 tokenId) private view returns (address) {\\n        if (_unsRegistry.exists(tokenId)) {\\n            return _unsRegistry.ownerOf(tokenId);\\n        } else {\\n            return _cnsOwnerOf(tokenId);\\n        }\\n    }\\n\\n    function _cnsOwnerOf(uint256 tokenId) private view returns (address) {\\n        try _cnsRegistry.ownerOf(tokenId) returns (address _owner) {\\n            return _owner;\\n        } catch {\\n            return address(0x0);\\n        }\\n    }\\n\\n    function _cnsResolverOf(uint256 tokenId) private view returns (address) {\\n        try _cnsRegistry.resolverOf(tokenId) returns (address _resolver) {\\n            return _resolver;\\n        } catch {\\n            return address(0x0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/cns/ICNSRegistry.sol\": {\r\n      \"content\": \"// @author Unstoppable Domains, Inc.\\n// @date June 16th, 2021\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol';\\n\\ninterface ICNSRegistry is IERC721MetadataUpgradeable {\\n    function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\n\\n    function resolverOf(uint256 tokenId) external view returns (address);\\n\\n    function childIdOf(uint256 tokenId, string calldata label) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/cns/IResolver.sol\": {\r\n      \"content\": \"// @author Unstoppable Domains, Inc.\\n// @date June 16th, 2021\\n\\npragma solidity ^0.8.0;\\n\\ninterface IResolver {\\n    function preconfigure(\\n        string[] memory keys,\\n        string[] memory values,\\n        uint256 tokenId\\n    ) external;\\n\\n    function get(string calldata key, uint256 tokenId) external view returns (string memory);\\n\\n    function getMany(string[] calldata keys, uint256 tokenId) external view returns (string[] memory);\\n\\n    function getByHash(uint256 keyHash, uint256 tokenId) external view returns (string memory key, string memory value);\\n\\n    function getManyByHash(uint256[] calldata keyHashes, uint256 tokenId)\\n        external\\n        view\\n        returns (string[] memory keys, string[] memory values);\\n\\n    function set(\\n        string calldata key,\\n        string calldata value,\\n        uint256 tokenId\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/IDataReader.sol\": {\r\n      \"content\": \"// @author Unstoppable Domains, Inc.\\n// @date June 16th, 2021\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDataReader {\\n    /**\\n     * @dev Function to get resolver address, owner address and requested records.\\n     * @param keys Keys to query values.\\n     * @param tokenId The token id to fetch.\\n     */\\n    function getData(string[] calldata keys, uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            address resolver,\\n            address owner,\\n            string[] memory values\\n        );\\n\\n    /**\\n     * @dev Function to get resolver address, owner address and requested records for array of tokens.\\n     * @param keys Keys to query values.\\n     * @param tokenIds Array of token ids to fetch.\\n     */\\n    function getDataForMany(string[] calldata keys, uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (\\n            address[] memory resolvers,\\n            address[] memory owners,\\n            string[][] memory values\\n        );\\n\\n    /**\\n     * @dev Function to get resolver address, owner address and requested records.\\n     * @param keyHashes Key hashes to query values.\\n     * @param tokenId The token id to fetch.\\n     */\\n    function getDataByHash(uint256[] calldata keyHashes, uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            address resolver,\\n            address owner,\\n            string[] memory keys,\\n            string[] memory values\\n        );\\n\\n    /**\\n     * @dev Function to get resolver address, owner address and requested records for array of tokens.\\n     * @param keyHashes Key hashes to query values.\\n     * @param tokenIds Array of token ids to fetch.\\n     */\\n    function getDataByHashForMany(uint256[] calldata keyHashes, uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (\\n            address[] memory resolvers,\\n            address[] memory owners,\\n            string[][] memory keys,\\n            string[][] memory values\\n        );\\n\\n    /**\\n     * @param tokenIds Array of token ids to fetch.\\n     */\\n    function ownerOfForMany(uint256[] calldata tokenIds) external view returns (address[] memory owners);\\n}\\n\"\r\n    },\r\n    \"contracts/IRecordReader.sol\": {\r\n      \"content\": \"// @author Unstoppable Domains, Inc.\\n// @date June 16th, 2021\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRecordReader {\\n    /**\\n     * @dev Function to get record.\\n     * @param key The key to query the value of.\\n     * @param tokenId The token id to fetch.\\n     * @return The value string.\\n     */\\n    function get(string calldata key, uint256 tokenId) external view returns (string memory);\\n\\n    /**\\n     * @dev Function to get multiple record.\\n     * @param keys The keys to query the value of.\\n     * @param tokenId The token id to fetch.\\n     * @return The values.\\n     */\\n    function getMany(string[] calldata keys, uint256 tokenId) external view returns (string[] memory);\\n\\n    /**\\n     * @dev Function get value by provied key hash.\\n     * @param keyHash The key to query the value of.\\n     * @param tokenId The token id to set.\\n     */\\n    function getByHash(uint256 keyHash, uint256 tokenId) external view returns (string memory key, string memory value);\\n\\n    /**\\n     * @dev Function get values by provied key hashes.\\n     * @param keyHashes The key to query the value of.\\n     * @param tokenId The token id to set.\\n     */\\n    function getManyByHash(uint256[] calldata keyHashes, uint256 tokenId)\\n        external\\n        view\\n        returns (string[] memory keys, string[] memory values);\\n}\\n\"\r\n    },\r\n    \"contracts/IUNSRegistry.sol\": {\r\n      \"content\": \"// @author Unstoppable Domains, Inc.\\n// @date June 16th, 2021\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol';\\n\\nimport './IRecordStorage.sol';\\n\\ninterface IUNSRegistry is IERC721MetadataUpgradeable, IRecordStorage {\\n    event NewURI(uint256 indexed tokenId, string uri);\\n\\n    event NewURIPrefix(string prefix);\\n\\n    /**\\n     * @dev Function to set the token URI Prefix for all tokens.\\n     * @param prefix string URI to assign\\n     */\\n    function setTokenURIPrefix(string calldata prefix) external;\\n\\n    /**\\n     * @dev Returns whether the given spender can transfer a given token ID.\\n     * @param spender address of the spender to query\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @return bool whether the msg.sender is approved for the given token ID,\\n     * is an operator of the owner, or is the owner of the token\\n     */\\n    function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\n\\n    /**\\n     * @dev Gets the resolver of the specified token ID.\\n     * @param tokenId uint256 ID of the token to query the resolver of\\n     * @return address currently marked as the resolver of the given token ID\\n     */\\n    function resolverOf(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Provides child token (subdomain) of provided tokenId.\\n     * @param tokenId uint256 ID of the token\\n     * @param label label of subdomain (for `aaa.bbb.crypto` it will be `aaa`)\\n     */\\n    function childIdOf(uint256 tokenId, string calldata label) external pure returns (uint256);\\n\\n    /**\\n     * @dev Existence of token.\\n     * @param tokenId uint256 ID of the token\\n     */\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    /**\\n     * @dev Transfer domain ownership without resetting domain records.\\n     * @param to address of new domain owner\\n     * @param tokenId uint256 ID of the token to be transferred\\n     */\\n    function setOwner(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) external;\\n\\n    /**\\n     * @dev Mints token.\\n     * @param to address to mint the new SLD to.\\n     * @param tokenId id of token.\\n     * @param uri domain URI.\\n     */\\n    function mint(\\n        address to,\\n        uint256 tokenId,\\n        string calldata uri\\n    ) external;\\n\\n    /**\\n     * @dev Safely mints token.\\n     * Implements a ERC721Reciever check unlike mint.\\n     * @param to address to mint the new SLD to.\\n     * @param tokenId id of token.\\n     * @param uri domain URI.\\n     */\\n    function safeMint(\\n        address to,\\n        uint256 tokenId,\\n        string calldata uri\\n    ) external;\\n\\n    /**\\n     * @dev Safely mints token.\\n     * Implements a ERC721Reciever check unlike mint.\\n     * @param to address to mint the new SLD to.\\n     * @param tokenId id of token.\\n     * @param uri domain URI.\\n     * @param data bytes data to send along with a safe transfer check\\n     */\\n    function safeMint(\\n        address to,\\n        uint256 tokenId,\\n        string calldata uri,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Mints token with records\\n     * @param to address to mint the new SLD to\\n     * @param tokenId id of token\\n     * @param keys New record keys\\n     * @param values New record values\\n     * @param uri domain URI\\n     */\\n    function mintWithRecords(\\n        address to,\\n        uint256 tokenId,\\n        string calldata uri,\\n        string[] calldata keys,\\n        string[] calldata values\\n    ) external;\\n\\n    /**\\n     * @dev Safely mints token with records\\n     * @param to address to mint the new SLD to\\n     * @param tokenId id of token\\n     * @param keys New record keys\\n     * @param values New record values\\n     * @param uri domain URI\\n     */\\n    function safeMintWithRecords(\\n        address to,\\n        uint256 tokenId,\\n        string calldata uri,\\n        string[] calldata keys,\\n        string[] calldata values\\n    ) external;\\n\\n    /**\\n     * @dev Safely mints token with records\\n     * @param to address to mint the new SLD to\\n     * @param tokenId id of token\\n     * @param keys New record keys\\n     * @param values New record values\\n     * @param uri domain URI\\n     * @param data bytes data to send along with a safe transfer check\\n     */\\n    function safeMintWithRecords(\\n        address to,\\n        uint256 tokenId,\\n        string calldata uri,\\n        string[] calldata keys,\\n        string[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/IRegistryReader.sol\": {\r\n      \"content\": \"// @author Unstoppable Domains, Inc.\\n// @date June 16th, 2021\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRegistryReader {\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    /**\\n     * @dev Returns whether the given spender can transfer a given token ID. Registry related function.\\n     * @param spender address of the spender to query\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @return bool whether the msg.sender is approved for the given token ID,\\n     * is an operator of the owner, or is the owner of the token\\n     */\\n    function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\n\\n    /**\\n     * @dev Gets the resolver of the specified token ID. Registry related function.\\n     * @param tokenId uint256 ID of the token to query the resolver of\\n     * @return address currently marked as the resolver of the given token ID\\n     */\\n    function resolverOf(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Provides child token (subdomain) of provided tokenId. Registry related function.\\n     * @param tokenId uint256 ID of the token\\n     * @param label label of subdomain (for `aaa.bbb.crypto` it will be `aaa`)\\n     */\\n    function childIdOf(uint256 tokenId, string calldata label) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the number of NFTs in `owner`'s account. ERC721 related function.\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the owner of the NFT specified by `tokenId`. ERC721 related function.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev ERC721 related function.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev ERC721 related function.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Returns whether token exists or not.\\n     */\\n    function exists(uint256 tokenId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"contracts/IRecordStorage.sol\": {\r\n      \"content\": \"// @author Unstoppable Domains, Inc.\\n// @date June 16th, 2021\\n\\npragma solidity ^0.8.0;\\n\\nimport './IRecordReader.sol';\\n\\ninterface IRecordStorage is IRecordReader {\\n    event Set(uint256 indexed tokenId, string indexed keyIndex, string indexed valueIndex, string key, string value);\\n\\n    event NewKey(uint256 indexed tokenId, string indexed keyIndex, string key);\\n\\n    event ResetRecords(uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Set record by key\\n     * @param key The key set the value of\\n     * @param value The value to set key to\\n     * @param tokenId ERC-721 token id to set\\n     */\\n    function set(\\n        string calldata key,\\n        string calldata value,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Set records by keys\\n     * @param keys The keys set the values of\\n     * @param values Records values\\n     * @param tokenId ERC-721 token id of the domain\\n     */\\n    function setMany(\\n        string[] memory keys,\\n        string[] memory values,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Set record by key hash\\n     * @param keyHash The key hash set the value of\\n     * @param value The value to set key to\\n     * @param tokenId ERC-721 token id to set\\n     */\\n    function setByHash(\\n        uint256 keyHash,\\n        string calldata value,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Set records by key hashes\\n     * @param keyHashes The key hashes set the values of\\n     * @param values Records values\\n     * @param tokenId ERC-721 token id of the domain\\n     */\\n    function setManyByHash(\\n        uint256[] calldata keyHashes,\\n        string[] calldata values,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Reset all domain records and set new ones\\n     * @param keys New record keys\\n     * @param values New record values\\n     * @param tokenId ERC-721 token id of the domain\\n     */\\n    function reconfigure(\\n        string[] memory keys,\\n        string[] memory values,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Function to reset all existing records on a domain.\\n     * @param tokenId ERC-721 token id to set.\\n     */\\n    function reset(uint256 tokenId) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IUNSRegistry\",\"name\":\"unsRegistry\",\"type\":\"address\"},{\"internalType\":\"contract ICNSRegistry\",\"name\":\"cnsRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"childIdOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"keyHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getByHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"values\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"keyHashes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getDataByHash\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"values\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"keyHashes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getDataByHashForMany\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"resolvers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"string[][]\",\"name\":\"keys\",\"type\":\"string[][]\"},{\"internalType\":\"string[][]\",\"name\":\"values\",\"type\":\"string[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getDataForMany\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"resolvers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"string[][]\",\"name\":\"values\",\"type\":\"string[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getMany\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"values\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"keyHashes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getManyByHash\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"values\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isApprovedOrOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"ownerOfForMany\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"registryOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"resolverOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ProxyReader","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000049aba7510f45ba5b64ea9e658e342f904db358d000000000000000000000000d1e5b0ff1287aa9f9a268759062e4ab08b9dacbe","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}