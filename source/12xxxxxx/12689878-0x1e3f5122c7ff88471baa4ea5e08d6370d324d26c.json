{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/utils/EnumerableSet.sol\r\n\r\n// SPDX-License-Identifier: NONE\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/AccessControl.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using Address for address;\r\n\r\n    struct RoleData {\r\n        EnumerableSet.AddressSet members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping (bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view returns (bool) {\r\n        return _roles[role].members.contains(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\r\n        return _roles[role].members.length();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\r\n        return _roles[role].members.at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual {\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\r\n\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual {\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.add(account)) {\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.remove(account)) {\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/IStatusStorage.sol\r\n\r\npragma solidity ^0.7.4; // See \"Solidity version\" of README.md\r\n\r\n\r\n/**\r\n * @title The Status Storage/Database contract.\r\n * @notice copyrights Coinfirm Limited.\r\n * @author Ville Sundell <development@solarius.fi>\r\n * @dev The Status Storage Contract which is queried by the Oracles.\r\n *\r\n * This must be simple: just setting and getting database entries for any\r\n * address (`string calldata`).\r\n *\r\n * Access control is implemented by OpenZeppelin's {AccessControl} contract.\r\n * It allows us to specify different accounts for different administrative\r\n * actions (if desired). By default, `admin` is set for every role as a Role\r\n * Admin.\r\n *\r\n * There are two actions guarded by the Access Control logic:\r\n *  - Setting a Status (256 bits/flags) for any address (`string`), and\r\n *  - Getting a Status (256 bits/flags) for any address (`string`).\r\n *\r\n * The Roles are `SET_STATUS_ROLE` and `GET_STATUS_ROLE` respectively.\r\n *\r\n * Target address is intentionally implemented as `string calldata`:\r\n *  - `target` is not meant to be manipulated, only relayed from Oracle\r\n *    Contracts, and\r\n *  - `calldata` saves gas when handling arrays such as `string`.\r\n */\r\ninterface IStatusStorage {\r\n    /**\r\n     * @dev Setting Status (256 bits/flags) for an account.\r\n     *\r\n     * @param target Target account, any account on any network\r\n     * @param status 256 bits (flags) status for an account\r\n     */\r\n    function setStatus(string calldata target, bytes32 status) external;\r\n\r\n    /**\r\n     * @dev Getting Status (256 bits/flags) for an account.\r\n     *\r\n     * @param target Target account, any account on any network\r\n     * @return status 256 bits (flags) status for an account\r\n     */\r\n    function getStatus(string calldata target) external view returns (bytes32 status);\r\n\r\n    /**\r\n     * @dev Emitted when a status for an account is set\r\n     *\r\n     * @param status Set status, 256 bit flags\r\n     */\r\n    event StatusSet(string target, bytes32 status);\r\n}\r\n\r\n// File: contracts/IBaseAtomicOracle.sol\r\n\r\npragma solidity ^0.7.4; // See \"Solidity version\" of README.md\r\n\r\n\r\n\r\n/**\r\n * @title Base contract for Atomic Oracles\r\n * @notice copyrights Coinfirm Limited.\r\n * @author Ville Sundell <development@solarius.fi>\r\n * @dev This is a base contract for Atomic Oracles to inherit. This contract\r\n * handles communication to the {StatusStorage} contract.\r\n *\r\n * Access control is implemented by OpenZeppelin's {AccessControl} contract.\r\n * It allows us to specify different accounts for different administrative\r\n * actions (if desired). By default, `admin` is set for every role as a Role\r\n * Admin.\r\n *\r\n * For this particular contract, only one administrative action can be taken:\r\n *  - Replacing the current Status Storage Contract with another\r\n *    (`SET_STATUS_STORAGE_ROLE`).\r\n *\r\n * Status Storage can be replaced with another, because it's possible that in\r\n * the future there will be a highly optimized Status Storage. This way Client\r\n * Smart Contracts can use this same oracle in the future too.\r\n *\r\n * Target address is intentionally implemented as `string calldata`:\r\n *  - `target` is not meant to be manipulated, only relayed to the Storage\r\n *    Contract, and\r\n *  - `calldata` saves gas when handling arrays such as `string`.\r\n */\r\ninterface IBaseAtomicOracle {\r\n    /**\r\n     * @dev Replacing the existing Status Storage with a new one.\r\n     *\r\n     * @param statusStorage_ New Status Storage to replace the existing one\r\n     */\r\n    function setStatusStorage(IStatusStorage statusStorage_) external;\r\n\r\n    /**\r\n     * @dev Getter for `_statusStorage`.\r\n     *\r\n     * @return statusStorage The current `_statusStorage`\r\n     */\r\n    function getStatusStorage() external view returns (IStatusStorage statusStorage);\r\n\r\n    /**\r\n     * @dev Emitted when a new Status Storage contract is set for this oracle.\r\n     *\r\n     * @param statusStorage Address of the new Status Storage Contract\r\n     */\r\n    event StatusStorageSet(IStatusStorage statusStorage);\r\n}\r\n\r\n// File: contracts/BaseAtomicOracle.sol\r\n\r\npragma solidity 0.7.4; // See \"Solidity version\" of README.md\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Base contract for Atomic Oracles\r\n * @notice copyrights Coinfirm Limited.\r\n * @author Ville Sundell <development@solarius.fi>\r\n * @dev This is a base contract for Atomic Oracles to inherit. This contract\r\n * handles communication to the {StatusStorage} contract.\r\n *\r\n * Access control is implemented by OpenZeppelin's {AccessControl} contract.\r\n * It allows us to specify different accounts for different administrative\r\n * actions (if desired). By default, `admin` is set for every role as a Role\r\n * Admin.\r\n *\r\n * For this particular contract, only one administrative action can be taken:\r\n *  - Replacing the current Status Storage Contract with another\r\n *    (`SET_STATUS_STORAGE_ROLE`).\r\n *\r\n * Status Storage can be replaced with another, because it's possible that in\r\n * the future there will be a highly optimized Status Storage. This way Client\r\n * Smart Contracts can use this same oracle in the future too.\r\n *\r\n * Target address is intentionally implemented as `string calldata`:\r\n *  - `target` is not meant to be manipulated, only relayed to the Storage\r\n *    Contract, and\r\n *  - `calldata` saves gas when handling arrays such as `string`.\r\n */\r\ncontract BaseAtomicOracle is AccessControl, IBaseAtomicOracle {\r\n    bytes32 public constant SET_STATUS_STORAGE_ROLE = keccak256(\"SET_STATUS_STORAGE_ROLE\");\r\n\r\n    IStatusStorage private _statusStorage;\r\n\r\n    /**\r\n     * @dev This is the constructor, for better user experience, it checks\r\n     * that `admin` nor `statusStorage_` is not 0x0.\r\n     *\r\n     * @param admin The address to be set as the Admin, and Role Admin for\r\n     * `SET_STATUS_STORAGE_ROLE`.\r\n     * @param statusStorage_ Initial Status Storage Contract. Can be changed\r\n     * later.\r\n     */\r\n    constructor(address admin, IStatusStorage statusStorage_) {\r\n        require(admin != address(0), \"BaseAtomicOracle: admin can't be 0x0\");\r\n\r\n        _setStatusStorage(statusStorage_);\r\n\r\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\r\n        _setupRole(SET_STATUS_STORAGE_ROLE, admin);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBaseAtomicOracle-setStatusStorage}.\r\n     */\r\n    function setStatusStorage(IStatusStorage statusStorage_) external override {\r\n        require(hasRole(SET_STATUS_STORAGE_ROLE, msg.sender), \"BaseAtomicOracle: the caller is not allowed to the Status Storage\");\r\n\r\n        _setStatusStorage(statusStorage_);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBaseAtomicOracle-getStatusStorage}.\r\n     */\r\n    function getStatusStorage() external view override returns (IStatusStorage statusStorage) {\r\n        return _getStatusStorage();\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function for setting the current Status Storage.\r\n     *\r\n     * @param statusStorage_ The new Status Storage Contract\r\n     */\r\n    function _setStatusStorage(IStatusStorage statusStorage_) internal {\r\n        require(address(statusStorage_) != address(0), \"BaseAtomicOracle: Status Storage can't be 0x0\");\r\n\r\n        _statusStorage = statusStorage_;\r\n\r\n        emit StatusStorageSet(statusStorage_);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function for getting the current Status Storage.\r\n     *\r\n     * @return statusStorage Current Status Storage\r\n     */\r\n    function _getStatusStorage() internal view returns (IStatusStorage statusStorage) {\r\n        return _statusStorage;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function for getting Status (256 bits/flags) for an\r\n     * account.\r\n     *\r\n     * @param target Target account, any account on any network\r\n     * @return status 256 bits (flags) status for an account\r\n     */\r\n    function _getStatus(string calldata target) internal view returns (bytes32 status) {\r\n        require(bytes(target).length > 0, \"BaseAtomicOracle: address invalid\");\r\n\r\n        try _statusStorage.getStatus(target) returns (bytes32 targetStatus) {\r\n            return targetStatus;\r\n        } catch {\r\n            revert(\"BaseAtomicOracle: call to Status Storage failed, are we allowed to call it?\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/IETHAtomicOracle.sol\r\n\r\npragma solidity ^0.7.4; // See \"Solidity version\" of README.md\r\n\r\n\r\n\r\n/**\r\n * @title An Atomic Oracle accepting Ether for fees\r\n * @notice copyrights Coinfirm Limited.\r\n * @author Ville Sundell <development@solarius.fi>\r\n * @dev A simple Atomic Oracle to serve statuses to Client Smart Contracts\r\n * for a fee in Ether.\r\n *\r\n * Client Smart Contract using this Oracle should always query the current\r\n * fee via {ETHAtomicOracle-getFee}, so the Client Smart Contract would be\r\n * ready for sudden price changes by the admin of this contract.\r\n *\r\n * Getting the default fee is not needed: {ETHAtomicOracle-getFee} should\r\n * be used instead.\r\n *\r\n * Access control is implemented by OpenZeppelin's {AccessControl} contract.\r\n * It allows us to specify different accounts for different administrative\r\n * actions (if desired). By default, `admin` is set for every role as a Role\r\n * Admin.\r\n *\r\n * There are three actions guarded by the Access Control logic:\r\n *  - setting a fee per Client Smart Contract (`SET_FEE_ROLE`),\r\n *  - withdrawing the fees from this contract (`WITHDRAW_ROLE`), and\r\n *  - setting the default fee (`SET_DEFAULT_FEE_ROLE`).\r\n *\r\n * Target address is intentionally implemented as `string calldata`:\r\n *  - `target` is not meant to be manipulated, only relayed from Oracle\r\n *    Contracts, and\r\n *  - `calldata` saves gas when handling arrays such as `string`.\r\n */\r\ninterface IETHAtomicOracle is IBaseAtomicOracle {\r\n    /**\r\n     * @dev Setting a fee for a specific Client Smart Contract.\r\n     *\r\n     * @param addr Address of the Client Smart Contract\r\n     * @param fee Fee for this specific smart contract, use 0 to use the\r\n     * default fee\r\n     */\r\n    function setFee(address addr, uint256 fee) external;\r\n\r\n    /**\r\n     * @dev Setting the default fee for queries.\r\n     *\r\n     * @param defaultFee_ New default fee for Client Smart Contracts without\r\n     * their own personal fee in wei\r\n     */\r\n    function setDefaultFee(uint256 defaultFee_) external;\r\n\r\n    /**\r\n     * @dev Withdraw fees from this contract to the calling account\r\n     *\r\n     * Withdraw all the paid fees.\r\n     */\r\n    function withdrawFees() external;\r\n\r\n    /**\r\n     * @dev Status getter, see {BaseAtomicOracle-_getStatus}. Accepts ether.\r\n     */\r\n    function getStatusForETH(string calldata target) external payable returns (bytes32 status);\r\n\r\n    /**\r\n     * @dev Get the current fee for a specific Client Smart Contract.\r\n     *\r\n     * Use this to determine what your contract would pay.\r\n     *\r\n     * @param addr The Client Smart Contract whose fee would like to have\r\n     * @return fee Current fee at the moment for `addr` in wei\r\n     */\r\n    function getFee(address addr) external view returns (uint256 fee);\r\n\r\n    /**\r\n     * @dev Emitted when a new fee for an address is set.\r\n     *\r\n     * @param addr Ethereum account address whose fee was set\r\n     * @param fee The current fee in wei\r\n     */\r\n    event FeeSet(address addr, uint256 fee);\r\n\r\n    /**\r\n     * @dev Emitted when an authorized user withdraws paid fees from this\r\n     * contract.\r\n     *\r\n     * @param destination Ethereum account address where the fees were\r\n     * withdrawn to\r\n     * @param amount Amount of fees withdrawn in wei\r\n     */\r\n    event FeesWithdrawn(address destination, uint256 amount);\r\n\r\n    /**\r\n     * @dev Emitted when default fee for account without a personal fee is set\r\n     *\r\n     * @param fee Current fee in wei for accounts without a personal fee\r\n     */\r\n    event DefaultFeeSet(uint256 fee);\r\n}\r\n\r\n// File: contracts/ETHAtomicOracle.sol\r\n\r\npragma solidity 0.7.4; // See \"Solidity version\" of README.md\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title An Atomic Oracle accepting Ether for fees\r\n * @notice copyrights Coinfirm Limited.\r\n * @author Ville Sundell <development@solarius.fi>\r\n * @dev A simple Atomic Oracle to serve statuses to Client Smart Contracts\r\n * for a fee in Ether.\r\n *\r\n * Client Smart Contract using this Oracle should always query the current\r\n * fee via {ETHAtomicOracle-getFee}, so the Client Smart Contract would be\r\n * ready for sudden price changes by the admin of this contract.\r\n *\r\n * Getting the default fee is not needed: {ETHAtomicOracle-getFee} should\r\n * be used instead.\r\n *\r\n * Access control is implemented by OpenZeppelin's {AccessControl} contract.\r\n * It allows us to specify different accounts for different administrative\r\n * actions (if desired). By default, `admin` is set for every role as a Role\r\n * Admin.\r\n *\r\n * There are three actions guarded by the Access Control logic:\r\n *  - setting a fee per Client Smart Contract (`SET_FEE_ROLE`),\r\n *  - withdrawing the fees from this contract (`WITHDRAW_ROLE`), and\r\n *  - setting the default fee (`SET_DEFAULT_FEE_ROLE`).\r\n *\r\n * Target address is intentionally implemented as `string calldata`:\r\n *  - `target` is not meant to be manipulated, only relayed from Oracle\r\n *    Contracts, and\r\n *  - `calldata` saves gas when handling arrays such as `string`.\r\n */\r\ncontract ETHAtomicOracle is AccessControl, BaseAtomicOracle, IETHAtomicOracle {\r\n    using Address for address payable;\r\n\r\n    bytes32 public constant SET_FEE_ROLE = keccak256(\"SET_FEE_ROLE\");\r\n    bytes32 public constant WITHDRAW_ROLE = keccak256(\"WITHDRAW_ROLE\");\r\n    bytes32 public constant SET_DEFAULT_FEE_ROLE = keccak256(\"SET_DEFAULT_FEE_ROLE\");\r\n\r\n    uint256 public _defaultFee;\r\n\r\n    mapping (address => uint256) private _fees;\r\n\r\n\r\n    /**\r\n     * @dev This is the constructor, for better user experience, it checks\r\n     * that `admin` nor `statusStorage_` is not 0x0. The check is done in\r\n     * {BaseAtomicOracle}.\r\n     *\r\n     * Default fee can be set here, 0 is acceptable, though.\r\n     *\r\n     * @param admin The address to be set as the Admin, and Role Admin for\r\n     * `WHITELIST_ROLE`.\r\n     * @param defaultFee_ Initial default fee, can be 0\r\n     * @param statusStorage Initial Status Storage Contract. Can be changed\r\n     * later.\r\n     */\r\n    constructor(address admin, uint256 defaultFee_, IStatusStorage statusStorage) BaseAtomicOracle(admin, statusStorage) {\r\n        _setDefaultFee(defaultFee_);\r\n\r\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\r\n        _setupRole(SET_FEE_ROLE, admin);\r\n        _setupRole(WITHDRAW_ROLE, admin);\r\n        _setupRole(SET_DEFAULT_FEE_ROLE, admin);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IETHAtomicOracle-setFee}.\r\n     */\r\n    function setFee(address addr, uint256 fee) external override {\r\n        require(hasRole(SET_FEE_ROLE, msg.sender), \"ETHAtomicOracle: the caller is not allowed to set fees\");\r\n\r\n        _fees[addr] = fee;\r\n\r\n        emit FeeSet(addr, fee);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IETHAtomicOracle-setDefaultFee}.\r\n     */\r\n    function setDefaultFee(uint256 defaultFee_) external override {\r\n        require(hasRole(SET_DEFAULT_FEE_ROLE, msg.sender), \"ETHAtomicOracle: the caller is not allowed to set the default fee\");\r\n\r\n        _setDefaultFee(defaultFee_);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IETHAtomicOracle-withdrawFees}.\r\n     */\r\n    function withdrawFees() external override {\r\n        uint256 amount = address(this).balance;\r\n        address payable caller = msg.sender;\r\n\r\n        require(hasRole(WITHDRAW_ROLE, caller), \"ETHAtomicOracle: the caller is not allowed to withdraw fees\");\r\n        caller.sendValue(amount);\r\n\r\n        emit FeesWithdrawn(caller, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IETHAtomicOracle-getStatusForETH}.\r\n     */\r\n    function getStatusForETH(string calldata target) external payable override returns (bytes32 status) {\r\n        require(msg.value == _getFee(msg.sender), \"ETHAtomicOracle: Supplied funds do not match the fee\");\r\n\r\n        return _getStatus(target);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IETHAtomicOracle-getFee}.\r\n     */\r\n    function getFee(address addr) external view override returns (uint256 fee) {\r\n        return _getFee(addr);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal setter for the default fee.\r\n     *\r\n     * @param defaultFee_ New default fee for Client Smart Contracts without\r\n     * their own personal fee\r\n     */\r\n    function _setDefaultFee(uint256 defaultFee_) internal {\r\n        _defaultFee = defaultFee_;\r\n\r\n        emit DefaultFeeSet(_defaultFee);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal getter for a fee for a specific Client Smart Contract.\r\n     *\r\n     * @param addr The Client Smart Contract whose fee would like to have\r\n     * @return fee Current fee at the moment for `addr`\r\n     */\r\n    function _getFee(address addr) internal view returns (uint256 fee) {\r\n        if (_fees[addr] > 0) {\r\n            return _fees[addr];\r\n        } else {\r\n            return _defaultFee;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"defaultFee_\",\"type\":\"uint256\"},{\"internalType\":\"contract IStatusStorage\",\"name\":\"statusStorage\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"DefaultFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"FeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IStatusStorage\",\"name\":\"statusStorage\",\"type\":\"address\"}],\"name\":\"StatusStorageSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SET_DEFAULT_FEE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SET_FEE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SET_STATUS_STORAGE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_defaultFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"target\",\"type\":\"string\"}],\"name\":\"getStatusForETH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"status\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatusStorage\",\"outputs\":[{\"internalType\":\"contract IStatusStorage\",\"name\":\"statusStorage\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"defaultFee_\",\"type\":\"uint256\"}],\"name\":\"setDefaultFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStatusStorage\",\"name\":\"statusStorage_\",\"type\":\"address\"}],\"name\":\"setStatusStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ETHAtomicOracle","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000db6bf55a0dcfd6d30108f049ad457ba82717fdb0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000ebdef280417760f279ea13dace2ae5c346547e05","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://deed0ba9736c9d0d85ebbbeaaae23b3f8420e603eb47fefdc9978cc701838055"}]}