{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.7;\r\n\r\nabstract contract DSValueLike {\r\n    function getResultWithValidity() virtual external view returns (uint256, bool);\r\n}\r\nabstract contract FSMWrapperLike {\r\n    function renumerateCaller(address) virtual external;\r\n}\r\n\r\ncontract OSM {\r\n    // --- Auth ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) virtual external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) virtual external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"OSM/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Stop ---\r\n    uint256 public stopped;\r\n    modifier stoppable { require(stopped == 0, \"OSM/is-stopped\"); _; }\r\n\r\n    // --- Variables ---\r\n    address public priceSource;\r\n    uint16  constant ONE_HOUR = uint16(3600);\r\n    uint16  public updateDelay = ONE_HOUR;\r\n    uint64  public lastUpdateTime;\r\n\r\n    // --- Structs ---\r\n    struct Feed {\r\n        uint128 value;\r\n        uint128 isValid;\r\n    }\r\n\r\n    Feed currentFeed;\r\n    Feed nextFeed;\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n    event ModifyParameters(bytes32 parameter, uint256 val);\r\n    event ModifyParameters(bytes32 parameter, address val);\r\n    event Start();\r\n    event Stop();\r\n    event ChangePriceSource(address priceSource);\r\n    event ChangeDelay(uint16 delay);\r\n    event RestartValue();\r\n    event UpdateResult(uint256 newMedian, uint256 lastUpdateTime);\r\n\r\n    constructor (address priceSource_) public {\r\n        authorizedAccounts[msg.sender] = 1;\r\n        priceSource = priceSource_;\r\n        if (priceSource != address(0)) {\r\n          (uint256 priceFeedValue, bool hasValidValue) = getPriceSourceUpdate();\r\n          if (hasValidValue) {\r\n            nextFeed = Feed(uint128(uint(priceFeedValue)), 1);\r\n            currentFeed = nextFeed;\r\n            lastUpdateTime = latestUpdateTime(currentTime());\r\n            emit UpdateResult(uint(currentFeed.value), lastUpdateTime);\r\n          }\r\n        }\r\n        emit AddAuthorization(msg.sender);\r\n        emit ChangePriceSource(priceSource);\r\n    }\r\n\r\n    // --- Math ---\r\n    function addition(uint64 x, uint64 y) internal pure returns (uint64 z) {\r\n        z = x + y;\r\n        require(z >= x);\r\n    }\r\n\r\n    // --- Core Logic ---\r\n    /*\r\n    * @notify Stop the OSM\r\n    */\r\n    function stop() external isAuthorized {\r\n        stopped = 1;\r\n        emit Stop();\r\n    }\r\n    /*\r\n    * @notify Start the OSM\r\n    */\r\n    function start() external isAuthorized {\r\n        stopped = 0;\r\n        emit Start();\r\n    }\r\n\r\n    /*\r\n    * @notify Change the oracle from which the OSM reads\r\n    * @param priceSource_ The address of the oracle from which the OSM reads\r\n    */\r\n    function changePriceSource(address priceSource_) external isAuthorized {\r\n        priceSource = priceSource_;\r\n        emit ChangePriceSource(priceSource);\r\n    }\r\n\r\n    /*\r\n    * @notify Helper that returns the current block timestamp\r\n    */\r\n    function currentTime() internal view returns (uint) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    /*\r\n    * @notify Return the latest update time\r\n    * @param timestamp Custom reference timestamp to determine the latest update time from\r\n    */\r\n    function latestUpdateTime(uint timestamp) internal view returns (uint64) {\r\n        require(updateDelay != 0, \"OSM/update-delay-is-zero\");\r\n        return uint64(timestamp - (timestamp % updateDelay));\r\n    }\r\n\r\n    /*\r\n    * @notify Change the delay between updates\r\n    * @param delay The new delay\r\n    */\r\n    function changeDelay(uint16 delay) external isAuthorized {\r\n        require(delay > 0, \"OSM/delay-is-zero\");\r\n        updateDelay = delay;\r\n        emit ChangeDelay(updateDelay);\r\n    }\r\n\r\n    /*\r\n    * @notify Restart/set to zero the feeds stored in the OSM\r\n    */\r\n    function restartValue() external isAuthorized {\r\n        currentFeed = nextFeed = Feed(0, 0);\r\n        stopped = 1;\r\n        emit RestartValue();\r\n    }\r\n\r\n    /*\r\n    * @notify View function that returns whether the delay between calls has been passed\r\n    */\r\n    function passedDelay() public view returns (bool ok) {\r\n        return currentTime() >= uint(addition(lastUpdateTime, uint64(updateDelay)));\r\n    }\r\n\r\n    /*\r\n    * @notify Update the price feeds inside the OSM\r\n    */\r\n    function updateResult() virtual external stoppable {\r\n        // Check if the delay passed\r\n        require(passedDelay(), \"OSM/not-passed\");\r\n        // Read the price from the median\r\n        (uint256 priceFeedValue, bool hasValidValue) = getPriceSourceUpdate();\r\n        // If the value is valid, update storage\r\n        if (hasValidValue) {\r\n            // Update state\r\n            currentFeed    = nextFeed;\r\n            nextFeed       = Feed(uint128(uint(priceFeedValue)), 1);\r\n            lastUpdateTime = latestUpdateTime(currentTime());\r\n            // Emit event\r\n            emit UpdateResult(uint(currentFeed.value), lastUpdateTime);\r\n        }\r\n    }\r\n\r\n    // --- Getters ---\r\n    /*\r\n    * @notify Internal helper that reads a price and its validity from the priceSource\r\n    */\r\n    function getPriceSourceUpdate() internal view returns (uint256, bool) {\r\n        try DSValueLike(priceSource).getResultWithValidity() returns (uint256 priceFeedValue, bool hasValidValue) {\r\n          return (priceFeedValue, hasValidValue);\r\n        }\r\n        catch(bytes memory) {\r\n          return (0, false);\r\n        }\r\n    }\r\n    /*\r\n    * @notify Return the current feed value and its validity\r\n    */\r\n    function getResultWithValidity() external view returns (uint256,bool) {\r\n        return (uint(currentFeed.value), currentFeed.isValid == 1);\r\n    }\r\n    /*\r\n    * @notify Return the next feed's value and its validity\r\n    */\r\n    function getNextResultWithValidity() external view returns (uint256,bool) {\r\n        return (nextFeed.value, nextFeed.isValid == 1);\r\n    }\r\n    /*\r\n    * @notify Return the current feed's value only if it's valid, otherwise revert\r\n    */\r\n    function read() external view returns (uint256) {\r\n        require(currentFeed.isValid == 1, \"OSM/no-current-value\");\r\n        return currentFeed.value;\r\n    }\r\n}\r\n\r\ncontract ExternallyFundedOSM is OSM {\r\n    // --- Variables ---\r\n    FSMWrapperLike public fsmWrapper;\r\n\r\n    // --- Evemts ---\r\n    event FailRenumerateCaller(address wrapper, address caller);\r\n\r\n    constructor (address priceSource_) public OSM(priceSource_) {}\r\n\r\n    // --- Administration ---\r\n    /*\r\n    * @notify Modify an address parameter\r\n    * @param parameter The parameter name\r\n    * @param val The new value for the parameter\r\n    */\r\n    function modifyParameters(bytes32 parameter, address val) external isAuthorized {\r\n        if (parameter == \"fsmWrapper\") {\r\n          require(val != address(0), \"ExternallyFundedOSM/invalid-fsm-wrapper\");\r\n          fsmWrapper = FSMWrapperLike(val);\r\n        }\r\n        else revert(\"ExternallyFundedOSM/modify-unrecognized-param\");\r\n        emit ModifyParameters(parameter, val);\r\n    }\r\n\r\n    /*\r\n    * @notify Update the price feeds inside the OSM\r\n    */\r\n    function updateResult() override external stoppable {\r\n        // Check if the delay passed\r\n        require(passedDelay(), \"ExternallyFundedOSM/not-passed\");\r\n        // Check that the wrapper is set\r\n        require(address(fsmWrapper) != address(0), \"ExternallyFundedOSM/null-wrapper\");\r\n        // Read the price from the median\r\n        (uint256 priceFeedValue, bool hasValidValue) = getPriceSourceUpdate();\r\n        // If the value is valid, update storage\r\n        if (hasValidValue) {\r\n            // Update state\r\n            currentFeed    = nextFeed;\r\n            nextFeed       = Feed(uint128(uint(priceFeedValue)), 1);\r\n            lastUpdateTime = latestUpdateTime(currentTime());\r\n            // Emit event\r\n            emit UpdateResult(uint(currentFeed.value), lastUpdateTime);\r\n            // Pay the caller\r\n            try fsmWrapper.renumerateCaller(msg.sender) {}\r\n            catch(bytes memory revertReason) {\r\n              emit FailRenumerateCaller(address(fsmWrapper), msg.sender);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract GebMath {\r\n    uint256 public constant RAY = 10 ** 27;\r\n    uint256 public constant WAD = 10 ** 18;\r\n\r\n    function ray(uint x) public pure returns (uint z) {\r\n        z = multiply(x, 10 ** 9);\r\n    }\r\n    function rad(uint x) public pure returns (uint z) {\r\n        z = multiply(x, 10 ** 27);\r\n    }\r\n    function minimum(uint x, uint y) public pure returns (uint z) {\r\n        z = (x <= y) ? x : y;\r\n    }\r\n    function addition(uint x, uint y) public pure returns (uint z) {\r\n        z = x + y;\r\n        require(z >= x, \"uint-uint-add-overflow\");\r\n    }\r\n    function subtract(uint x, uint y) public pure returns (uint z) {\r\n        z = x - y;\r\n        require(z <= x, \"uint-uint-sub-underflow\");\r\n    }\r\n    function multiply(uint x, uint y) public pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"uint-uint-mul-overflow\");\r\n    }\r\n    function rmultiply(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, y) / RAY;\r\n    }\r\n    function rdivide(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, RAY) / y;\r\n    }\r\n    function wdivide(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, WAD) / y;\r\n    }\r\n    function wmultiply(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, y) / WAD;\r\n    }\r\n    function rpower(uint x, uint n, uint base) public pure returns (uint z) {\r\n        assembly {\r\n            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\r\n            default {\r\n                switch mod(n, 2) case 0 { z := base } default { z := x }\r\n                let half := div(base, 2)  // for rounding.\r\n                for { n := div(n, 2) } n { n := div(n,2) } {\r\n                    let xx := mul(x, x)\r\n                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\r\n                    let xxRound := add(xx, half)\r\n                    if lt(xxRound, xx) { revert(0,0) }\r\n                    x := div(xxRound, base)\r\n                    if mod(n,2) {\r\n                        let zx := mul(z, x)\r\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\r\n                        let zxRound := add(zx, half)\r\n                        if lt(zxRound, zx) { revert(0,0) }\r\n                        z := div(zxRound, base)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nabstract contract StabilityFeeTreasuryLike {\r\n    function getAllowance(address) virtual external view returns (uint, uint);\r\n    function systemCoin() virtual external view returns (address);\r\n    function pullFunds(address, address, uint) virtual external;\r\n    function setTotalAllowance(address, uint256) external virtual;\r\n    function setPerBlockAllowance(address, uint256) external virtual;\r\n}\r\n\r\ncontract NoSetupIncreasingTreasuryReimbursement is GebMath {\r\n    // --- Auth ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) virtual external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) virtual external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"NoSetupIncreasingTreasuryReimbursement/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Variables ---\r\n    // Starting reward for the fee receiver/keeper\r\n    uint256 public baseUpdateCallerReward;          // [wad]\r\n    // Max possible reward for the fee receiver/keeper\r\n    uint256 public maxUpdateCallerReward;           // [wad]\r\n    // Max delay taken into consideration when calculating the adjusted reward\r\n    uint256 public maxRewardIncreaseDelay;          // [seconds]\r\n    // Rate applied to baseUpdateCallerReward every extra second passed beyond a certain point (e.g next time when a specific function needs to be called)\r\n    uint256 public perSecondCallerRewardIncrease;   // [ray]\r\n\r\n    // SF treasury\r\n    StabilityFeeTreasuryLike  public treasury;\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n    event ModifyParameters(\r\n      bytes32 parameter,\r\n      address addr\r\n    );\r\n    event ModifyParameters(\r\n      bytes32 parameter,\r\n      uint256 val\r\n    );\r\n    event FailRewardCaller(bytes revertReason, address feeReceiver, uint256 amount);\r\n\r\n    constructor() public {\r\n        authorizedAccounts[msg.sender] = 1;\r\n        maxRewardIncreaseDelay         = uint(-1);\r\n\r\n        emit AddAuthorization(msg.sender);\r\n    }\r\n\r\n    // --- Boolean Logic ---\r\n    function either(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := or(x, y)}\r\n    }\r\n    function both(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := and(x, y)}\r\n    }\r\n\r\n    // --- Treasury ---\r\n    /**\r\n    * @notice This returns the stability fee treasury allowance for this contract by taking the minimum between the per block and the total allowances\r\n    **/\r\n    function treasuryAllowance() public view returns (uint256) {\r\n        (uint total, uint perBlock) = treasury.getAllowance(address(this));\r\n        return minimum(total, perBlock);\r\n    }\r\n    /*\r\n    * @notice Get the SF reward that can be sent to a function caller right now\r\n    * @param timeOfLastUpdate The last time when the function that the treasury pays for has been updated\r\n    * @param defaultDelayBetweenCalls Enforced delay between calls to the function for which the treasury reimburses callers\r\n    */\r\n    function getCallerReward(uint256 timeOfLastUpdate, uint256 defaultDelayBetweenCalls) public view returns (uint256) {\r\n        // If the rewards are null or if the time of the last update is in the future or present, return 0\r\n        bool nullRewards = (baseUpdateCallerReward == 0 && maxUpdateCallerReward == 0);\r\n        if (either(timeOfLastUpdate >= now, nullRewards)) return 0;\r\n\r\n        // If the time elapsed is smaller than defaultDelayBetweenCalls or if the base reward is zero, return 0\r\n        uint256 timeElapsed = (timeOfLastUpdate == 0) ? defaultDelayBetweenCalls : subtract(now, timeOfLastUpdate);\r\n        if (either(timeElapsed < defaultDelayBetweenCalls, baseUpdateCallerReward == 0)) {\r\n            return 0;\r\n        }\r\n\r\n        // If too much time elapsed, return the max reward\r\n        uint256 adjustedTime      = subtract(timeElapsed, defaultDelayBetweenCalls);\r\n        uint256 maxPossibleReward = minimum(maxUpdateCallerReward, treasuryAllowance() / RAY);\r\n        if (adjustedTime > maxRewardIncreaseDelay) {\r\n            return maxPossibleReward;\r\n        }\r\n\r\n        // Calculate the reward\r\n        uint256 calculatedReward = baseUpdateCallerReward;\r\n        if (adjustedTime > 0) {\r\n            calculatedReward = rmultiply(rpower(perSecondCallerRewardIncrease, adjustedTime, RAY), calculatedReward);\r\n        }\r\n\r\n        // If the reward is higher than max, set it to max\r\n        if (calculatedReward > maxPossibleReward) {\r\n            calculatedReward = maxPossibleReward;\r\n        }\r\n        return calculatedReward;\r\n    }\r\n    /**\r\n    * @notice Send a stability fee reward to an address\r\n    * @param proposedFeeReceiver The SF receiver\r\n    * @param reward The system coin amount to send\r\n    **/\r\n    function rewardCaller(address proposedFeeReceiver, uint256 reward) internal {\r\n        // If the receiver is the treasury itself or if the treasury is null or if the reward is zero, return\r\n        if (address(treasury) == proposedFeeReceiver) return;\r\n        if (either(address(treasury) == address(0), reward == 0)) return;\r\n\r\n        // Determine the actual receiver and send funds\r\n        address finalFeeReceiver = (proposedFeeReceiver == address(0)) ? msg.sender : proposedFeeReceiver;\r\n        try treasury.pullFunds(finalFeeReceiver, treasury.systemCoin(), reward) {}\r\n        catch(bytes memory revertReason) {\r\n            emit FailRewardCaller(revertReason, finalFeeReceiver, reward);\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract FSMLike {\r\n    function stopped() virtual public view returns (uint256);\r\n    function priceSource() virtual public view returns (address);\r\n    function updateDelay() virtual public view returns (uint16);\r\n    function lastUpdateTime() virtual public view returns (uint64);\r\n    function newPriceDeviation() virtual public view returns (uint256);\r\n    function passedDelay() virtual public view returns (bool);\r\n    function getNextBoundedPrice() virtual public view returns (uint128);\r\n    function getNextPriceLowerBound() virtual public view returns (uint128);\r\n    function getNextPriceUpperBound() virtual public view returns (uint128);\r\n    function getResultWithValidity() virtual external view returns (uint256, bool);\r\n    function getNextResultWithValidity() virtual external view returns (uint256, bool);\r\n    function read() virtual external view returns (uint256);\r\n}\r\n\r\ncontract FSMWrapper is NoSetupIncreasingTreasuryReimbursement {\r\n    // --- Vars ---\r\n    // When the rate has last been relayed\r\n    uint256 public lastReimburseTime;       // [timestamp]\r\n    // Enforced gap between reimbursements\r\n    uint256 public reimburseDelay;          // [seconds]\r\n\r\n    FSMLike public fsm;\r\n\r\n    constructor(address fsm_, uint256 reimburseDelay_) public NoSetupIncreasingTreasuryReimbursement() {\r\n        require(fsm_ != address(0), \"FSMWrapper/null-fsm\");\r\n\r\n        fsm            = FSMLike(fsm_);\r\n        reimburseDelay = reimburseDelay_;\r\n\r\n        emit ModifyParameters(\"reimburseDelay\", reimburseDelay);\r\n    }\r\n\r\n    // --- Administration ---\r\n    /*\r\n    * @notice Change the addresses of contracts that this wrapper is connected to\r\n    * @param parameter The contract whose address is changed\r\n    * @param addr The new contract address\r\n    */\r\n    function modifyParameters(bytes32 parameter, address addr) external isAuthorized {\r\n        require(addr != address(0), \"FSMWrapper/null-addr\");\r\n        if (parameter == \"fsm\") {\r\n          fsm = FSMLike(addr);\r\n        }\r\n        else if (parameter == \"treasury\") {\r\n          require(StabilityFeeTreasuryLike(addr).systemCoin() != address(0), \"FSMWrapper/treasury-coin-not-set\");\r\n          treasury = StabilityFeeTreasuryLike(addr);\r\n        }\r\n        else revert(\"FSMWrapper/modify-unrecognized-param\");\r\n        emit ModifyParameters(\r\n          parameter,\r\n          addr\r\n        );\r\n    }\r\n    /*\r\n    * @notify Modify a uint256 parameter\r\n    * @param parameter The parameter name\r\n    * @param val The new parameter value\r\n    */\r\n    function modifyParameters(bytes32 parameter, uint256 val) external isAuthorized {\r\n        if (parameter == \"baseUpdateCallerReward\") {\r\n          require(val <= maxUpdateCallerReward, \"FSMWrapper/invalid-base-caller-reward\");\r\n          baseUpdateCallerReward = val;\r\n        }\r\n        else if (parameter == \"maxUpdateCallerReward\") {\r\n          require(val >= baseUpdateCallerReward, \"FSMWrapper/invalid-max-caller-reward\");\r\n          maxUpdateCallerReward = val;\r\n        }\r\n        else if (parameter == \"perSecondCallerRewardIncrease\") {\r\n          require(val >= RAY, \"FSMWrapper/invalid-caller-reward-increase\");\r\n          perSecondCallerRewardIncrease = val;\r\n        }\r\n        else if (parameter == \"maxRewardIncreaseDelay\") {\r\n          require(val > 0, \"FSMWrapper/invalid-max-increase-delay\");\r\n          maxRewardIncreaseDelay = val;\r\n        }\r\n        else if (parameter == \"reimburseDelay\") {\r\n          reimburseDelay = val;\r\n        }\r\n        else revert(\"FSMWrapper/modify-unrecognized-param\");\r\n        emit ModifyParameters(\r\n          parameter,\r\n          val\r\n        );\r\n    }\r\n\r\n    // --- Renumeration Logic ---\r\n    /*\r\n    * @notice Renumerate the caller that updates the connected FSM\r\n    * @param feeReceiver The address that will receive the reward for the update\r\n    */\r\n    function renumerateCaller(address feeReceiver) external {\r\n        // Perform checks\r\n        require(address(fsm) == msg.sender, \"FSMWrapper/invalid-caller\");\r\n        require(feeReceiver != address(0), \"FSMWrapper/null-fee-receiver\");\r\n        // Check delay between calls\r\n        require(either(subtract(now, lastReimburseTime) >= reimburseDelay, lastReimburseTime == 0), \"FSMWrapper/wait-more\");\r\n        // Get the caller's reward\r\n        uint256 callerReward = getCallerReward(lastReimburseTime, reimburseDelay);\r\n        // Store the timestamp of the update\r\n        lastReimburseTime = now;\r\n        // Pay the caller for updating the FSM\r\n        rewardCaller(feeReceiver, callerReward);\r\n    }\r\n\r\n    // --- Wrapped Functionality ---\r\n    /*\r\n    * @notify Return whether the FSM is stopped\r\n    */\r\n    function stopped() public view returns (uint256) {\r\n        return fsm.stopped();\r\n    }\r\n    /*\r\n    * @notify Return the FSM price source\r\n    */\r\n    function priceSource() public view returns (address) {\r\n        return fsm.priceSource();\r\n    }\r\n    /*\r\n    * @notify Return the FSM update delay\r\n    */\r\n    function updateDelay() public view returns (uint16) {\r\n        return fsm.updateDelay();\r\n    }\r\n    /*\r\n    * @notify Return the FSM last update time\r\n    */\r\n    function lastUpdateTime() public view returns (uint64) {\r\n        return fsm.lastUpdateTime();\r\n    }\r\n    /*\r\n    * @notify Return the FSM's next price deviation\r\n    */\r\n    function newPriceDeviation() public view returns (uint256) {\r\n        return fsm.newPriceDeviation();\r\n    }\r\n    /*\r\n    * @notify Return whether the update delay has been passed in the FSM\r\n    */\r\n    function passedDelay() public view returns (bool) {\r\n        return fsm.passedDelay();\r\n    }\r\n    /*\r\n    * @notify Return the next bounded price from the FSM\r\n    */\r\n    function getNextBoundedPrice() public view returns (uint128) {\r\n        return fsm.getNextBoundedPrice();\r\n    }\r\n    /*\r\n    * @notify Return the next lower bound price from the FSM\r\n    */\r\n    function getNextPriceLowerBound() public view returns (uint128) {\r\n        return fsm.getNextPriceLowerBound();\r\n    }\r\n    /*\r\n    * @notify Return the next upper bound price from the FSM\r\n    */\r\n    function getNextPriceUpperBound() public view returns (uint128) {\r\n        return fsm.getNextPriceUpperBound();\r\n    }\r\n    /*\r\n    * @notify Return the result with its validity from the FSM\r\n    */\r\n    function getResultWithValidity() external view returns (uint256, bool) {\r\n        (uint256 price, bool valid) = fsm.getResultWithValidity();\r\n        return (price, valid);\r\n    }\r\n    /*\r\n    * @notify Return the next result with its validity from the FSM\r\n    */\r\n    function getNextResultWithValidity() external view returns (uint256, bool) {\r\n        (uint256 price, bool valid) = fsm.getNextResultWithValidity();\r\n        return (price, valid);\r\n    }\r\n    /*\r\n    * @notify Return the result from the FSM if it's valid\r\n    */\r\n    function read() external view returns (uint256) {\r\n        return fsm.read();\r\n    }\r\n}\r\n\r\n\r\nabstract contract LiquidationEngineLike {\r\n    function addAuthorization(address) external virtual;\r\n}\r\n\r\nabstract contract FsmGovernanceInterfaceLike {\r\n    function setFsm(bytes32, address) external virtual;\r\n}\r\n\r\nabstract contract OracleRelayerLike {\r\n    function modifyParameters(bytes32, bytes32, address) external virtual;\r\n}\r\n\r\n// @notice Proposal to deploy and setup new OSM and wrapper\r\n// Missing steps:\r\n// - Change orcl for the targeted collateral in the OracleRelayer\r\n// - Change collateralFSM in the collateral's auction house\r\ncontract DeployOSMandWrapper {\r\n    // --- Variables ---\r\n    uint256 public constant RAY = 10**27;\r\n\r\n    function execute(address _treasury, address ethMedianizer, address fsmGovernanceInterface) public returns (address) {\r\n        // Define params (kovan 1.3)\r\n        StabilityFeeTreasuryLike treasury     = StabilityFeeTreasuryLike(_treasury);\r\n        bytes32 collateralType                = bytes32(\"ETH-A\");\r\n        uint256 reimburseDelay                = 3600;\r\n        uint256 maxRewardIncreaseDelay        = 10800;\r\n        uint256 baseUpdateCallerReward        = 0.0001 ether;\r\n        uint256 maxUpdateCallerReward         = 0.0001 ether;\r\n        uint256 perSecondCallerRewardIncrease = 1 * RAY;\r\n\r\n        // deploy new OSM\r\n        ExternallyFundedOSM osm = new ExternallyFundedOSM(ethMedianizer);\r\n\r\n        // deploy OSM Wrapper\r\n        FSMWrapper osmWrapper = new FSMWrapper(\r\n            address(osm),\r\n            reimburseDelay\r\n        );\r\n\r\n        // set the wrapper on the OSM\r\n        osm.modifyParameters(\"fsmWrapper\", address(osmWrapper));\r\n\r\n        FsmGovernanceInterfaceLike(fsmGovernanceInterface).setFsm(collateralType, address(osmWrapper));\r\n\r\n        // Setup treasury allowance\r\n        treasury.setTotalAllowance(address(osmWrapper), uint(-1));\r\n        treasury.setPerBlockAllowance(address(osmWrapper), 0.0001 ether * RAY);\r\n\r\n        // Set the remaining params\r\n        osmWrapper.modifyParameters(\"treasury\", address(treasury));\r\n        osmWrapper.modifyParameters(\"maxUpdateCallerReward\", maxUpdateCallerReward);\r\n        osmWrapper.modifyParameters(\"baseUpdateCallerReward\", baseUpdateCallerReward);\r\n        osmWrapper.modifyParameters(\"perSecondCallerRewardIncrease\", perSecondCallerRewardIncrease);\r\n        osmWrapper.modifyParameters(\"maxRewardIncreaseDelay\", maxRewardIncreaseDelay);\r\n\r\n        return address(osm);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethMedianizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fsmGovernanceInterface\",\"type\":\"address\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DeployOSMandWrapper","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b33c763104a4cc450f5877ceecde779b840f115a631b529ed823a2af6ee6a1bc"}]}