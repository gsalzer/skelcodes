{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.1.1 https://hardhat.org\r\npragma solidity ^0.7.0;\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.4.1\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/mainnet/common/math.sol\r\n\r\ncontract DSMath {\r\n  uint constant WAD = 10 ** 18;\r\n  uint constant RAY = 10 ** 27;\r\n\r\n  function add(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(x, y);\r\n  }\r\n\r\n  function sub(uint x, uint y) internal virtual pure returns (uint z) {\r\n    z = SafeMath.sub(x, y);\r\n  }\r\n\r\n  function mul(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.mul(x, y);\r\n  }\r\n\r\n  function div(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.div(x, y);\r\n  }\r\n\r\n  function wmul(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\r\n  }\r\n\r\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\r\n  }\r\n\r\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\r\n  }\r\n\r\n  function rmul(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\r\n  }\r\n\r\n  function toInt(uint x) internal pure returns (int y) {\r\n    y = int(x);\r\n    require(y >= 0, \"int-overflow\");\r\n  }\r\n\r\n  function toRad(uint wad) internal pure returns (uint rad) {\r\n    rad = mul(wad, 10 ** 27);\r\n  }\r\n\r\n}\r\n\r\n\r\n// File contracts/mainnet/common/interfaces.sol\r\n\r\ninterface TokenInterface {\r\n    function approve(address, uint256) external;\r\n    function transfer(address, uint) external;\r\n    function transferFrom(address, address, uint) external;\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n    function balanceOf(address) external view returns (uint);\r\n    function decimals() external view returns (uint);\r\n}\r\n\r\ninterface MemoryInterface {\r\n    function getUint(uint id) external returns (uint num);\r\n    function setUint(uint id, uint val) external;\r\n}\r\n\r\ninterface InstaMapping {\r\n    function cTokenMapping(address) external view returns (address);\r\n    function gemJoinMapping(bytes32) external view returns (address);\r\n}\r\n\r\ninterface AccountInterface {\r\n    function enable(address) external;\r\n    function disable(address) external;\r\n    function isAuth(address) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/mainnet/common/stores.sol\r\n\r\nabstract contract Stores {\r\n\r\n  /**\r\n   * @dev Return ethereum address\r\n   */\r\n  address constant internal ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n  /**\r\n   * @dev Return Wrapped ETH address\r\n   */\r\n  address constant internal wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n  /**\r\n   * @dev Return memory variable address\r\n   */\r\n  MemoryInterface constant internal instaMemory = MemoryInterface(0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F);\r\n\r\n  /**\r\n   * @dev Return InstaDApp Mapping Addresses\r\n   */\r\n  InstaMapping constant internal instaMapping = InstaMapping(0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88);\r\n\r\n  /**\r\n   * @dev Get Uint value from InstaMemory Contract.\r\n   */\r\n  function getUint(uint getId, uint val) internal returns (uint returnVal) {\r\n    returnVal = getId == 0 ? val : instaMemory.getUint(getId);\r\n  }\r\n\r\n  /**\r\n  * @dev Set Uint value in InstaMemory Contract.\r\n  */\r\n  function setUint(uint setId, uint val) virtual internal {\r\n    if (setId != 0) instaMemory.setUint(setId, val);\r\n  }\r\n\r\n}\r\n\r\n\r\n// File contracts/mainnet/common/basic.sol\r\n\r\nabstract contract Basic is DSMath, Stores {\r\n\r\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = (_amt / 10 ** (18 - _dec));\r\n    }\r\n\r\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = mul(_amt, 10 ** (18 - _dec));\r\n    }\r\n\r\n    function getTokenBal(TokenInterface token) internal view returns(uint _amt) {\r\n        _amt = address(token) == ethAddr ? address(this).balance : token.balanceOf(address(this));\r\n    }\r\n\r\n    function getTokensDec(TokenInterface buyAddr, TokenInterface sellAddr) internal view returns(uint buyDec, uint sellDec) {\r\n        buyDec = address(buyAddr) == ethAddr ?  18 : buyAddr.decimals();\r\n        sellDec = address(sellAddr) == ethAddr ?  18 : sellAddr.decimals();\r\n    }\r\n\r\n    function encodeEvent(string memory eventName, bytes memory eventParam) internal pure returns (bytes memory) {\r\n        return abi.encode(eventName, eventParam);\r\n    }\r\n\r\n    function changeEthAddress(address buy, address sell) internal pure returns(TokenInterface _buy, TokenInterface _sell){\r\n        _buy = buy == ethAddr ? TokenInterface(wethAddr) : TokenInterface(buy);\r\n        _sell = sell == ethAddr ? TokenInterface(wethAddr) : TokenInterface(sell);\r\n    }\r\n\r\n    function convertEthToWeth(bool isEth, TokenInterface token, uint amount) internal {\r\n        if(isEth) token.deposit{value: amount}();\r\n    }\r\n\r\n    function convertWethToEth(bool isEth, TokenInterface token, uint amount) internal {\r\n       if(isEth) {\r\n            token.approve(address(token), amount);\r\n            token.withdraw(amount);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/mainnet/connectors/aave/staked-aave/interface.sol\r\ninterface AaveInterface is TokenInterface {\r\n    function delegate(address delegatee) external;\r\n    function delegateByType(address delegatee, uint8 delegationType) external;\r\n    function getDelegateeByType(address delegator, uint8 delegationType) external view returns (address);\r\n}\r\n\r\ninterface StakedAaveInterface is AaveInterface {\r\n    function stake(address onBehalfOf, uint256 amount) external;\r\n    function redeem(address to, uint256 amount) external;\r\n    function cooldown() external;\r\n    function claimRewards(address to, uint256 amount) external;\r\n}\r\n\r\n\r\n// File contracts/mainnet/connectors/aave/staked-aave/helpers.sol\r\n\r\nabstract contract Helpers is DSMath, Basic {\r\n\r\n    enum DelegationType {VOTING_POWER, PROPOSITION_POWER, BOTH}\r\n\r\n    /**\r\n     * @dev Staked Aave Token\r\n    */\r\n    StakedAaveInterface internal constant stkAave = StakedAaveInterface(0x4da27a545c0c5B758a6BA100e3a049001de870f5);\r\n\r\n    /**\r\n     * @dev Aave Token\r\n    */\r\n    AaveInterface internal constant aave = AaveInterface(0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9);\r\n\r\n    function _delegateAave(address _delegatee, DelegationType _type) internal {\r\n        if (_type == DelegationType.BOTH) {\r\n            require(\r\n                aave.getDelegateeByType(address(this), 0) != _delegatee,\r\n                \"already-delegated\"\r\n            );\r\n            require(\r\n                aave.getDelegateeByType(address(this), 1) != _delegatee,\r\n                \"already-delegated\"\r\n            );\r\n\r\n            aave.delegate(_delegatee);\r\n        } else if (_type == DelegationType.VOTING_POWER) {\r\n            require(\r\n                aave.getDelegateeByType(address(this), 0) != _delegatee,\r\n                \"already-delegated\"\r\n            );\r\n\r\n            aave.delegateByType(_delegatee, 0);\r\n        } else {\r\n            require(\r\n                aave.getDelegateeByType(address(this), 1) != _delegatee,\r\n                \"already-delegated\"\r\n            );\r\n\r\n            aave.delegateByType(_delegatee, 1);\r\n        }\r\n    }\r\n\r\n    function _delegateStakedAave(address _delegatee, DelegationType _type) internal {\r\n        if (_type == DelegationType.BOTH) {\r\n            require(\r\n                stkAave.getDelegateeByType(address(this), 0) != _delegatee,\r\n                \"already-delegated\"\r\n            );\r\n            require(\r\n                stkAave.getDelegateeByType(address(this), 1) != _delegatee,\r\n                \"already-delegated\"\r\n            );\r\n\r\n            stkAave.delegate(_delegatee);\r\n        } else if (_type == DelegationType.VOTING_POWER) {\r\n            require(\r\n                stkAave.getDelegateeByType(address(this), 0) != _delegatee,\r\n                \"already-delegated\"\r\n            );\r\n\r\n            stkAave.delegateByType(_delegatee, 0);\r\n        } else {\r\n            require(\r\n                stkAave.getDelegateeByType(address(this), 1) != _delegatee,\r\n                \"already-delegated\"\r\n            );\r\n\r\n            stkAave.delegateByType(_delegatee, 1);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/mainnet/connectors/aave/staked-aave/events.sol\r\n\r\ncontract Events {\r\n    event LogClaim(uint amt, uint getId, uint setId);\r\n    event LogStake(uint amt, uint getId, uint setId);\r\n    event LogCooldown();\r\n    event LogRedeem(uint amt, uint getId, uint setId);\r\n    event LogDelegate(\r\n        address delegatee,\r\n        bool delegateAave,\r\n        bool delegateStkAave,\r\n        uint8 aaveDelegationType,\r\n        uint8 stkAaveDelegationType\r\n    );\r\n}\r\n\r\n\r\n// File contracts/mainnet/connectors/aave/staked-aave/main.sol\r\n\r\nabstract contract AaveResolver is Helpers, Events {\r\n\r\n    /**\r\n     * @dev Claim Accrued AAVE.\r\n     * @notice Claim Accrued AAVE Token rewards.\r\n     * @param amount The amount of rewards to claim. uint(-1) for max.\r\n     * @param getId ID to retrieve amount.\r\n     * @param setId ID stores the amount of tokens claimed.\r\n    */\r\n    function claim(\r\n        uint256 amount,\r\n        uint256 getId,\r\n        uint256 setId\r\n    ) external payable {\r\n        uint _amt = getUint(getId, amount);\r\n\r\n        uint intialBal = aave.balanceOf(address(this));\r\n        stkAave.claimRewards(address(this), _amt);\r\n        uint finalBal = aave.balanceOf(address(this));\r\n        _amt = sub(finalBal, intialBal);\r\n\r\n        setUint(setId, _amt);\r\n\r\n        emit LogClaim(_amt, getId, setId);\r\n    }\r\n\r\n    /**\r\n     * @dev Stake AAVE Token\r\n     * @notice Stake AAVE Token in Aave security module\r\n     * @param amount The amount of AAVE to stake. uint(-1) for max.\r\n     * @param getId ID to retrieve amount.\r\n     * @param setId ID stores the amount of tokens staked.\r\n    */\r\n    function stake(\r\n        uint256 amount,\r\n        uint256 getId,\r\n        uint256 setId\r\n    ) external payable {\r\n        uint _amt = getUint(getId, amount);\r\n\r\n        _amt = _amt == uint(-1) ? aave.balanceOf(address(this)) : _amt;\r\n        stkAave.stake(address(this), _amt);\r\n\r\n        setUint(setId, _amt);\r\n\r\n        emit LogStake(_amt, getId, setId);\r\n    }\r\n\r\n    /**\r\n     * @dev Initiate cooldown to unstake\r\n     * @notice Initiate cooldown to unstake from Aave security module\r\n    */\r\n    function cooldown() external payable {\r\n        require(stkAave.balanceOf(address(this)) > 0, \"no-staking\");\r\n\r\n        stkAave.cooldown();\r\n\r\n        emit LogCooldown();\r\n    }\r\n\r\n    /**\r\n     * @dev Redeem tokens from Staked AAVE\r\n     * @notice Redeem AAVE tokens from Staked AAVE after cooldown period is over\r\n     * @param amount The amount of AAVE to redeem. uint(-1) for max.\r\n     * @param getId ID to retrieve amount.\r\n     * @param setId ID stores the amount of tokens redeemed.\r\n    */\r\n    function redeem(\r\n        uint256 amount,\r\n        uint256 getId,\r\n        uint256 setId\r\n    ) external payable {\r\n        uint _amt = getUint(getId, amount);\r\n\r\n        uint intialBal = aave.balanceOf(address(this));\r\n        stkAave.redeem(address(this), _amt);\r\n        uint finalBal = aave.balanceOf(address(this));\r\n        _amt = sub(finalBal, intialBal);\r\n\r\n        setUint(setId, _amt);\r\n\r\n        emit LogRedeem(_amt, getId, setId);\r\n    }\r\n\r\n    /**\r\n     * @dev Delegate AAVE or stkAAVE\r\n     * @notice Delegate AAVE or stkAAVE\r\n     * @param delegatee The address of the delegatee\r\n     * @param delegateAave Whether to delegate Aave balance\r\n     * @param delegateStkAave Whether to delegate Staked Aave balance\r\n     * @param aaveDelegationType Aave delegation type. Voting power - 0, Proposition power - 1, Both - 2\r\n     * @param stkAaveDelegationType Staked Aave delegation type. Values similar to aaveDelegationType\r\n    */\r\n    function delegate(\r\n        address delegatee,\r\n        bool delegateAave,\r\n        bool delegateStkAave,\r\n        uint8 aaveDelegationType,\r\n        uint8 stkAaveDelegationType\r\n    ) external payable {\r\n        require(delegateAave || delegateStkAave, \"invalid-delegate\");\r\n        require(delegatee != address(0), \"invalid-delegatee\");\r\n\r\n        if (delegateAave) {\r\n            _delegateAave(delegatee, Helpers.DelegationType(aaveDelegationType));\r\n        }\r\n\r\n        if (delegateStkAave) {\r\n            _delegateStakedAave(delegatee, Helpers.DelegationType(stkAaveDelegationType));\r\n        }\r\n\r\n        emit LogDelegate(delegatee, delegateAave, delegateStkAave, aaveDelegationType, stkAaveDelegationType);\r\n    }\r\n}\r\n\r\n\r\ncontract ConnectAaveStake is AaveResolver {\r\n    /**\r\n    * @dev Connector ID and Type.\r\n    */\r\n    function connectorID() public pure returns(uint _type, uint _id) {\r\n        (_type, _id) = (1, 93);\r\n    }\r\n\r\n    string public constant name = \"Aave-Stake-v1\";\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogCooldown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"delegateAave\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"delegateStkAave\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"aaveDelegationType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"stkAaveDelegationType\",\"type\":\"uint8\"}],\"name\":\"LogDelegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogStake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldown\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"delegateAave\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"delegateStkAave\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"aaveDelegationType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"stkAaveDelegationType\",\"type\":\"uint8\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"ConnectAaveStake","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://18be41062f62ecde2dc32688fa0a192e8a93e03f5bc97808335dad314ef1b6ac"}]}