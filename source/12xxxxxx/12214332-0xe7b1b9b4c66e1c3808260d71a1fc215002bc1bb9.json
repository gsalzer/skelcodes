{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.7.0 <0.8.0;\r\n\r\ninterface I{\r\n\tfunction getPair(address t, address t1) external view returns(address);\r\n\tfunction createPair(address t, address t1) external returns(address);\r\n\tfunction init(uint Eth,address pair) external;\r\n\tfunction deposit() external payable;\r\n\tfunction transfer(address to, uint value) external returns(bool);\r\n\tfunction mint(address to) external returns(uint liquidity);\r\n}\r\n\r\n\r\npragma solidity >=0.7.0 <0.8.0;\r\n\r\n// Author: Sam Porter\r\n// With LGE it's now possible to create fairer distribution and fund promising projects without VC vultures at all.\r\n// Non-upgradeable, not owned, liquidity is being created automatically on first transaction after last block of LGE.\r\n// Founders' liquidity is not locked, instead an incentive to keep it is introduced.\r\n// The Event lasts for ~2 months to ensure fair distribution.\r\n// 0,5% of contributed Eth goes to developer for earliest development expenses including audits and bug bounties.\r\n// Blockchain needs no VCs, no authorities.\r\n\r\n//import \"./I.sol\";\r\n\r\ncontract FoundingEvent {\r\n\tmapping(address => uint) public contributions;\r\n\taddress payable private _deployer;\r\n\tbool private _lgeOngoing;\r\n\taddress private _staking;\r\n\tuint88 private _ETHDeposited;\r\n\tbool private _notInit;\r\n\r\n\tconstructor() {_deployer = msg.sender;_notInit = true;_lgeOngoing = true;}\r\n\tfunction init(address c) public {require(msg.sender == _deployer && _notInit == true);delete _notInit; _staking = c;}\r\n\r\n\tfunction depositEth() external payable {\r\n\t\trequire(_lgeOngoing == true);\r\n\t\tuint amount = msg.value;\r\n\t\tuint deployerShare = amount/200; amount -= deployerShare; _deployer.transfer(deployerShare);\r\n\t\tcontributions[msg.sender] += amount;\r\n\t\tif (block.number >= 12638999) {_createLiquidity();}\r\n\t}\r\n\r\n\tfunction _createLiquidity() internal {\r\n\t\taddress WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\t\taddress token = 0xdff92dCc99150Df99D54BC3291bD7e5522bB1Edd;// hardcoded token address after erc20 will be deployed\r\n\t\taddress staking = _staking;\r\n\t\taddress factory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n\t\taddress tknETHLP = I(factory).getPair(token,WETH);\r\n\t\tif (tknETHLP == address(0)) {tknETHLP=I(factory).createPair(token, WETH);}\r\n\t\tuint ETHDeposited = address(this).balance;\r\n\t\tI(WETH).deposit{value: ETHDeposited}();\r\n\t\tI(token).transfer(tknETHLP, 1e24);\r\n\t\tI(WETH).transfer(tknETHLP, ETHDeposited);\r\n\t\tI(tknETHLP).mint(staking);\r\n\t\tI(staking).init(ETHDeposited, tknETHLP);\r\n\t\tdelete _staking; delete _lgeOngoing; delete _deployer;\r\n\t}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"c\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FoundingEvent","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a65bcd05cdfb918091133829755d1b95fef16dd23f966a5eb9a509199e24cc66"}]}