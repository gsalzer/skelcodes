{"status":"1","message":"OK","result":[{"SourceCode":"{\"Context.sol\":{\"content\":\"pragma solidity ^0.7.3;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor() {}\\n\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\"},\"Migrations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\n\\ncontract Migrations {\\n  address public owner = msg.sender;\\n  uint public last_completed_migration;\\n\\n  modifier restricted() {\\n    require(\\n      msg.sender == owner,\\n      \\\"This function is restricted to the contract\\u0027s owner\\\"\\n    );\\n    _;\\n  }\\n\\n  function setCompleted(uint completed) public restricted {\\n    last_completed_migration = completed;\\n  }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.7.3;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"uniswapBought.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.3;\\n\\nimport \\\"./UniswapInterface.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\ncontract UniswapBought is Ownable {\\n    // list of authorized address\\n    mapping(address =\\u003e bool) authorized;\\n\\n    // using this to add address who can call the contract\\n    function addAuthorized(address _a) public onlyOwner {\\n        authorized[_a] = true;\\n    }\\n\\n    // using this to add address who can call the contract\\n    function deleteAuthorized(address _a) public onlyOwner {\\n        authorized[_a] = false;\\n    }\\n\\n    function isAuthorized(address _a) public view onlyOwner returns (bool) {\\n        if (owner() == _a) {\\n            return true;\\n        } else {\\n            return authorized[_a];\\n        }\\n    }\\n\\n    modifier onlyAuth() {\\n        require(isAuthorized(msg.sender));\\n        _;\\n    }\\n\\n    // =========================================================================================\\n    // Settings uniswap\\n    // =========================================================================================\\n\\n    address public constant UNIROUTER =\\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n    address public WETHAddress = UniswapExchangeInterface(UNIROUTER).WETH();\\n    UniswapExchangeInterface uniswap = UniswapExchangeInterface(UNIROUTER);\\n\\n    // =========================================================================================\\n    // Buy and Sell Functions\\n    // =========================================================================================\\n\\n    // using this to buy token , first arg is eth value (1 eth = 1*1E18), arg2 is token address\\n    function buyToken(\\n        uint256 _value,\\n        address _token,\\n        uint256 _mintoken,\\n        uint256 _blockDeadLine\\n    ) public onlyAuth returns (uint256) {\\n        uint256 deadline = block.timestamp + _blockDeadLine; // deadline during 15 blocks\\n        address[] memory path = new address[](2);\\n        path[0] = WETHAddress;\\n        path[1] = _token;\\n        uint256[] memory amount =\\n            uniswap.swapExactETHForTokens{value: _value}(\\n                _mintoken,\\n                path,\\n                address(this),\\n                deadline\\n            );\\n        return amount[1];\\n    }\\n\\n    // using this to allow uniswap to sell tokens of contract\\n    function allowUniswapForToken(address _token) public onlyOwner {\\n        uint256 _balance = IERC20(_token).balanceOf(address(this));\\n        IERC20(_token).approve(UNIROUTER, _balance);\\n    }\\n\\n    // using this to sell token , first arg is eth value (1 eth = 1*1E18), arg2 is token address\\n    function sellToken(\\n        uint256 _amountToSell,\\n        uint256 _amountOutMin,\\n        address _token,\\n        uint256 _blockDeadLine\\n    ) public onlyAuth returns (uint256) {\\n        uint256 deadline = block.timestamp + _blockDeadLine; // deadline during 15 blocks\\n        address[] memory path = new address[](2);\\n        path[0] = _token;\\n        path[1] = WETHAddress;\\n        uint256[] memory amount =\\n            uniswap.swapExactTokensForETH(\\n                _amountToSell,\\n                _amountOutMin,\\n                path,\\n                address(this),\\n                deadline\\n            );\\n        return amount[1];\\n    }\\n\\n    // =========================================================================================\\n    // Desposit and withdraw functions\\n    // =========================================================================================\\n\\n    // using this to send Eth to contract\\n    fallback() external payable {}\\n\\n    receive() external payable {}\\n\\n    // Using this to withdraw eth balance of contract =\\u003e send to msg.sender\\n    function withdrawEth() external onlyOwner {\\n        msg.sender.transfer(address(this).balance);\\n    }\\n\\n    // using this to withdraw all tokens in the contract =\\u003e send to msg.sender\\n    function withdrawToken(address _token) public onlyOwner() {\\n        uint256 _balance = IERC20(_token).balanceOf(address(this));\\n        IERC20(_token).transfer(msg.sender, _balance);\\n    }\\n}\\n\"},\"UniswapInterface.sol\":{\"content\":\"pragma solidity ^0.7.3;\\n\\n// Interface Uniswap\\n\\ninterface UniswapExchangeInterface {\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function WETH() external pure returns (address);\\n}\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"UNIROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"allowUniswapForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintoken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockDeadLine\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"deleteAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockDeadLine\",\"type\":\"uint256\"}],\"name\":\"sellToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"UniswapBought","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://54391921f11b00f271d990379ec32e4a42d5e52177869cf95ff06aac3f38895c"}]}