{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: LatticeStakingPool.sol\r\n\r\npragma solidity 0.8.6;\r\n\r\n\r\n\r\n\r\n\r\ncontract LatticeStakingPool is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct StakingPool {\r\n        uint256 maxStakingAmountPerUser;\r\n        uint256 totalAmountStaked;\r\n        address[] usersStaked;\r\n    }\r\n    \r\n    struct Project {\r\n        string name;\r\n        uint256 totalAmountStaked;\r\n        uint256 numberOfPools;\r\n        uint256 startBlock; \r\n        uint256 endBlock;\r\n    }\r\n    \r\n    struct UserInfo{\r\n        address userAddress;\r\n        uint256 poolId;\r\n        uint256 percentageOfTokensStakedInPool;\r\n        uint256 amountOfTokensStakedInPool;\r\n    }\r\n    \r\n    IERC20 public stakingToken;\r\n    \r\n    address private owner;\r\n    \r\n    Project[] public projects;\r\n    \r\n    /// @notice ProjectID => WhitelistedAddress\r\n    mapping(uint256 => mapping(address => bool)) public projectIdToWhitelistedAddress;\r\n    \r\n    /// @notice ProjectID => WhitelistedArray\r\n    mapping(uint256 => address[]) private projectIdToWhitelistedArray;\r\n    \r\n    /// @notice ProjectID => Pool ID => User Address => amountStaked\r\n    mapping(uint256 => mapping(uint256 => mapping(address => uint256))) public userStakedAmount;\r\n    \r\n    /// @notice ProjectID => Pool ID => User Address => didUserWithdrawFunds\r\n    mapping(uint256 => mapping(uint256 => mapping(address => bool))) public didUserWithdrawFunds;\r\n    \r\n    /// @notice ProjectID => Pool ID => StakingPool\r\n    mapping(uint256 => mapping(uint256 => StakingPool)) public stakingPoolInfo;\r\n    \r\n    /// @notice ProjectName => isProjectNameTaken\r\n    mapping(string=>bool) public isProjectNameTaken;\r\n    \r\n    /// @notice ProjectName => ProjectID\r\n    mapping(string=>uint256) public projectNameToProjectId;\r\n    \r\n    event Deposit(\r\n        address indexed _user, \r\n        uint256 indexed _projectId, \r\n        uint256 indexed _poolId, \r\n        uint256 _amount\r\n    );\r\n    event Withdraw(\r\n        address indexed _user, \r\n        uint256 indexed _projectId, \r\n        uint256 indexed _poolId, \r\n        uint256 _amount\r\n    );\r\n    event PoolAdded(uint256 indexed _projectId, uint256 indexed _poolId);\r\n    event ProjectDisabled(uint256 indexed _projectId);\r\n    event ProjectAdded(uint256 indexed _projectId, string _projectName);\r\n    \r\n    constructor(IERC20 _stakingToken) {\r\n        require(\r\n            address(_stakingToken) != address(0),\r\n            \"constructor: _stakingToken must not be zero address\"\r\n        );\r\n        \r\n        owner = msg.sender;\r\n        stakingToken = _stakingToken;\r\n    }\r\n    \r\n    function addProject(string memory _name, uint256 _startBlock, uint256 _endBlock) external {\r\n        require(msg.sender == owner, \"addNewProject: Caller is not the owner\");\r\n        require(bytes(_name).length > 0 , \"addNewProject: Project name cannot be empty string.\");\r\n        require(\r\n            _startBlock >= block.number, \r\n            \"addNewProject: startBlock is less than the current block number.\"\r\n        );\r\n        require(\r\n            _startBlock < _endBlock, \r\n            \"addNewProject: startBlock is greater than or equal to the endBlock.\"\r\n        );\r\n        require(!isProjectNameTaken[_name], \"addNewProject: project name already taken.\");\r\n        \r\n        Project memory project;\r\n        project.name = _name;  \r\n        project.startBlock = _startBlock;\r\n        project.endBlock = _endBlock;\r\n        project.numberOfPools = 0;        \r\n        project.totalAmountStaked = 0;    \r\n        \r\n        uint256 projectsLength = projects.length;\r\n        projects.push(project);\r\n        projectNameToProjectId[_name] = projectsLength;\r\n        isProjectNameTaken[_name] = true;\r\n        \r\n        emit ProjectAdded(projectsLength, _name);\r\n    }\r\n    \r\n    function addStakingPool(uint256 _projectId, uint256 _maxStakingAmountPerUser) external {\r\n        require(msg.sender == owner, \"addStakingPool: Caller is not the owner.\");\r\n        require(_projectId < projects.length, \"addStakingPool: Invalid project ID.\");\r\n    \r\n        StakingPool memory stakingPool;\r\n        stakingPool.maxStakingAmountPerUser = _maxStakingAmountPerUser;\r\n        stakingPool.totalAmountStaked=0;\r\n        \r\n        uint256 numberOfPoolsInProject = projects[_projectId].numberOfPools;\r\n        stakingPoolInfo[_projectId][numberOfPoolsInProject] = stakingPool;\r\n        projects[_projectId].numberOfPools = projects[_projectId].numberOfPools+1;\r\n        \r\n        emit PoolAdded(_projectId,projects[_projectId].numberOfPools);\r\n    }\r\n    \r\n    function disableProject(uint256 _projectId) external {\r\n        require(msg.sender == owner, \"disableProject: Caller is not the owner\");\r\n        require(_projectId < projects.length, \"disableProject: Invalid project ID.\");\r\n        \r\n        projects[_projectId].endBlock = block.number;\r\n        \r\n        emit ProjectDisabled(_projectId);\r\n    }\r\n    \r\n    function deposit (uint256 _projectId, uint256 _poolId, uint256 _amount) external nonReentrant {\r\n        require(\r\n            projectIdToWhitelistedAddress[_projectId][msg.sender], \r\n            \"deposit: Address is not whitelisted for this project.\"\r\n        );\r\n        require(_amount > 0, \"deposit: Amount not specified.\");\r\n        require(_projectId < projects.length, \"deposit: Invalid project ID.\");\r\n        require(_poolId < projects[_projectId].numberOfPools, \"deposit: Invalid pool ID.\");\r\n        require(\r\n            block.number <= projects[_projectId].endBlock, \r\n            \"deposit: Staking no longer permitted for this project.\"\r\n        );\r\n        require(\r\n            block.number >= projects[_projectId].startBlock, \r\n            \"deposit: Staking is not yet permitted for this project.\"\r\n        );\r\n        \r\n        uint256 _userStakedAmount = userStakedAmount[_projectId][_poolId][msg.sender];\r\n        if(stakingPoolInfo[_projectId][_poolId].maxStakingAmountPerUser > 0){\r\n            require(\r\n                _userStakedAmount.add(_amount) <= stakingPoolInfo[_projectId][_poolId].maxStakingAmountPerUser, \r\n                \"deposit: Cannot exceed max staking amount per user.\"\r\n            );\r\n        }\r\n        \r\n        if(userStakedAmount[_projectId][_poolId][msg.sender] == 0){\r\n            stakingPoolInfo[_projectId][_poolId].usersStaked.push(msg.sender);\r\n        }\r\n        \r\n        projects[_projectId].totalAmountStaked \r\n        = projects[_projectId].totalAmountStaked.add(_amount);\r\n        \r\n        stakingPoolInfo[_projectId][_poolId].totalAmountStaked \r\n        = stakingPoolInfo[_projectId][_poolId].totalAmountStaked.add(_amount);\r\n        \r\n        userStakedAmount[_projectId][_poolId][msg.sender] \r\n        = userStakedAmount[_projectId][_poolId][msg.sender].add(_amount);\r\n        \r\n        stakingToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n        \r\n        emit Deposit(msg.sender, _projectId, _poolId,  _amount);\r\n    }\r\n    \r\n    function withdraw (uint256  _projectId, uint256 _poolId) external nonReentrant {\r\n        require(\r\n            projectIdToWhitelistedAddress[_projectId][msg.sender], \r\n            \"withdraw: Address is not whitelisted for this project.\"\r\n        );\r\n        require(_projectId < projects.length, \"withdraw: Invalid project ID.\");\r\n        require(_poolId < projects[_projectId].numberOfPools, \"withdraw: Invalid pool ID.\");\r\n        require(block.number > projects[_projectId].endBlock, \"withdraw: Not yet permitted.\");\r\n        require(\r\n            !didUserWithdrawFunds[_projectId][_poolId][msg.sender], \r\n            \"withdraw: User has already withdrawn funds for this pool.\"\r\n        );\r\n        \r\n        uint256 _userStakedAmount = userStakedAmount[_projectId][_poolId][msg.sender];\r\n        require(_userStakedAmount > 0, \"withdraw: No stake to withdraw.\");\r\n        didUserWithdrawFunds[_projectId][_poolId][msg.sender] = true;\r\n        \r\n        stakingToken.safeTransfer(msg.sender, _userStakedAmount);\r\n        \r\n        emit Withdraw(msg.sender, _projectId, _poolId, _userStakedAmount);\r\n    }\r\n    \r\n    function whitelistAddresses( \r\n        uint256 _projectId, \r\n        address[] memory _newAddressesToWhitelist\r\n    ) external {\r\n        require(msg.sender == owner, \"whitelistAddresses: Caller is not the owner\");\r\n        require(_projectId < projects.length, \"whitelistAddresses: Invalid project ID.\");\r\n        require(\r\n            _newAddressesToWhitelist.length > 0, \r\n            \"whitelistAddresses: Addresses array is empty.\"\r\n        );\r\n        \r\n        for (uint i=0; i < _newAddressesToWhitelist.length; i++) {\r\n            if(!projectIdToWhitelistedAddress[_projectId][_newAddressesToWhitelist[i]]){\r\n                projectIdToWhitelistedAddress[_projectId][_newAddressesToWhitelist[i]] = true;\r\n                projectIdToWhitelistedArray[_projectId].push(_newAddressesToWhitelist[i]);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function getWhitelistedAddressesForProject(\r\n        uint256 _projectId\r\n    ) external view returns(address[] memory){\r\n        require(msg.sender == owner, \"getWhitelistedAddressesForProject: Caller is not the owner\");\r\n        \r\n        return projectIdToWhitelistedArray[_projectId];\r\n    }\r\n    \r\n    function isAddressWhitelisted(\r\n        uint256 _projectId,\r\n        address _address\r\n    ) external view returns(bool){\r\n        require(_projectId < projects.length, \"isAddressWhitelisted: Invalid project ID.\");\r\n        \r\n        return projectIdToWhitelistedAddress[_projectId][_address];\r\n    }\r\n        \r\n    function getTotalStakingInfoForProjectPerPool(\r\n        uint256 _projectId,\r\n        uint256 _poolId,\r\n        uint256 _pageNumber,\r\n        uint256 _pageSize\r\n    )external view returns (UserInfo[] memory){\r\n        require(msg.sender == owner, \"getTotalStakingInfoForProjectPerPool: Caller is not the owner.\");\r\n        require(\r\n            _projectId < projects.length, \r\n            \"getTotalStakingInfoForProjectPerPool: Invalid project ID.\"\r\n        );\r\n        require(\r\n            _poolId < projects[_projectId].numberOfPools, \r\n            \"getTotalStakingInfoForProjectPerPool: Invalid pool ID.\"\r\n        );\r\n        uint256 _usersStakedInPool = stakingPoolInfo[_projectId][_poolId].usersStaked.length;\r\n        require(\r\n            _usersStakedInPool > 0, \r\n            \"getTotalStakingInfoForProjectPerPool: Nobody staked in this pool.\"\r\n        );\r\n        require(\r\n            _pageSize > 0, \r\n            \"getTotalStakingInfoForProjectPerPool: Invalid page size.\"\r\n        );\r\n        require(\r\n            _pageNumber > 0, \r\n            \"getTotalStakingInfoForProjectPerPool: Invalid page number.\"\r\n        );\r\n        uint256 _startIndex = _pageNumber.sub(1).mul(_pageSize);\r\n\r\n        if(_pageNumber > 1){\r\n            require(\r\n                _startIndex < _usersStakedInPool,\r\n                \"getTotalStakingInfoForProjectPerPool: Specified parameters exceed number of users in the pool.\"\r\n            );\r\n        }\r\n\r\n        uint256 _endIndex = _pageNumber.mul(_pageSize);\r\n        if(_endIndex > _usersStakedInPool){\r\n            _endIndex = _usersStakedInPool;\r\n        }\r\n        \r\n        UserInfo[] memory _result = new UserInfo[](_endIndex.sub(_startIndex));\r\n        uint256 _resultIndex = 0;\r\n\r\n        for(uint256 i=_startIndex; i < _endIndex; i++){\r\n            UserInfo memory _userInfo;\r\n            _userInfo.userAddress = stakingPoolInfo[_projectId][_poolId].usersStaked[i];\r\n            _userInfo.poolId = _poolId;\r\n            _userInfo.percentageOfTokensStakedInPool \r\n            = getPercentageAmountStakedByUserInPool(_projectId,_poolId,_userInfo.userAddress);\r\n            \r\n            _userInfo.amountOfTokensStakedInPool \r\n            = getAmountStakedByUserInPool(_projectId,_poolId,_userInfo.userAddress);\r\n            \r\n            _result[_resultIndex]=_userInfo;\r\n            _resultIndex = _resultIndex + 1;\r\n        }\r\n        \r\n        return _result;\r\n    }\r\n    \r\n    function numberOfProjects() external view returns (uint256) {\r\n        return projects.length;\r\n    }\r\n    \r\n    function numberOfPools(uint256 _projectId) external view returns (uint256) {\r\n        require(_projectId < projects.length, \"numberOfPools: Invalid project ID.\");\r\n        return projects[_projectId].numberOfPools;\r\n    }\r\n    \r\n    function getTotalAmountStakedInProject(uint256 _projectId) external view returns (uint256) {\r\n        require(\r\n            _projectId < projects.length, \r\n            \"getTotalAmountStakedInProject: Invalid project ID.\"\r\n        );\r\n        \r\n        return projects[_projectId].totalAmountStaked;\r\n    }\r\n    \r\n    function getTotalAmountStakedInPool(\r\n        uint256 _projectId,\r\n        uint256 _poolId\r\n    ) external view returns (uint256) {\r\n        require(_projectId < projects.length, \"getTotalAmountStakedInPool: Invalid project ID.\");\r\n        require(\r\n            _poolId < projects[_projectId].numberOfPools, \r\n            \"getTotalAmountStakedInPool: Invalid pool ID.\"\r\n        );\r\n        \r\n        return stakingPoolInfo[_projectId][_poolId].totalAmountStaked;\r\n    }\r\n    \r\n    function getAmountStakedByUserInPool(\r\n        uint256 _projectId,\r\n        uint256 _poolId, \r\n        address _address\r\n    ) public view returns (uint256) {\r\n        require(_projectId < projects.length, \"getAmountStakedByUserInPool: Invalid project ID.\");\r\n        require(\r\n            _poolId < projects[_projectId].numberOfPools, \r\n            \"getAmountStakedByUserInPool: Invalid pool ID.\"\r\n        );  \r\n        \r\n        return userStakedAmount[_projectId][_poolId][_address];\r\n    }\r\n    \r\n    function getPercentageAmountStakedByUserInPool(\r\n        uint256 _projectId,\r\n        uint256 _poolId, \r\n        address _address\r\n    ) public view returns (uint256) {\r\n        require(\r\n            _projectId < projects.length, \r\n            \"getPercentageAmountStakedByUserInPool: Invalid project ID.\"\r\n        );\r\n        require(\r\n            _poolId < projects[_projectId].numberOfPools, \r\n            \"getPercentageAmountStakedByUserInPool: Invalid pool ID.\"\r\n        );  \r\n        \r\n        return userStakedAmount[_projectId][_poolId][_address]\r\n               .mul(1e8)\r\n               .div(stakingPoolInfo[_projectId][_poolId]\r\n               .totalAmountStaked);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"}],\"name\":\"ProjectAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"ProjectDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"addProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxStakingAmountPerUser\",\"type\":\"uint256\"}],\"name\":\"addStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"didUserWithdrawFunds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"disableProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAmountStakedByUserInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPercentageAmountStakedByUserInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getTotalAmountStakedInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"getTotalAmountStakedInProject\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pageNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pageSize\",\"type\":\"uint256\"}],\"name\":\"getTotalStakingInfoForProjectPerPool\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentageOfTokensStakedInPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfTokensStakedInPool\",\"type\":\"uint256\"}],\"internalType\":\"struct LatticeStakingPool.UserInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"getWhitelistedAddressesForProject\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAddressWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"isProjectNameTaken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"numberOfPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfProjects\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"projectIdToWhitelistedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"projectNameToProjectId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfPools\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingPoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxStakingAmountPerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_newAddressesToWhitelist\",\"type\":\"address[]\"}],\"name\":\"whitelistAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LatticeStakingPool","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a393473d64d2f9f026b60b6df7859a689715d092","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://20fe4d81f6943eff74ad7414f682e0655f4aa97f9ab111109acfb747c122e829"}]}