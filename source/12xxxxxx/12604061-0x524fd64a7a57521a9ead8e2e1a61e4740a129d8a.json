{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AddressRegistryV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\nimport \\\"./interfaces/IAddressRegistryV2.sol\\\";\\n\\n/**\\n * @title APY.Finance's address registry\\n * @author APY.Finance\\n * @notice The address registry has two important purposes, one which\\n *         is fairly concrete and another abstract.\\n *\\n *         1. The registry enables components of the APY.Finance system\\n *         and external systems to retrieve core addresses reliably\\n *         even when the functionality may move to a different\\n *         address.\\n *\\n *         2. The registry also makes explicit which contracts serve\\n *         as primary entrypoints for interacting with different\\n *         components.  Not every contract is registered here, only\\n *         the ones properly deserving of an identifier.  This helps\\n *         define explicit boundaries between groups of contracts,\\n *         each of which is logically cohesive.\\n */\\ncontract AddressRegistryV2 is\\n    Initializable,\\n    OwnableUpgradeSafe,\\n    IAddressRegistryV2\\n{\\n    /* ------------------------------- */\\n    /* impl-specific storage variables */\\n    /* ------------------------------- */\\n    /** @notice the same address as the proxy admin; used\\n     *  to protect init functions for upgrades */\\n    address public proxyAdmin;\\n    bytes32[] internal _idList;\\n    mapping(bytes32 => address) internal _idToAddress;\\n\\n    /* ------------------------------- */\\n\\n    event AdminChanged(address);\\n    event AddressRegistered(bytes32 id, address _address);\\n\\n    /**\\n     * @dev Since the proxy delegate calls to this \\\"logic\\\" contract, any\\n     * storage set by the logic contract's constructor during deploy is\\n     * disregarded and this function is needed to initialize the proxy\\n     * contract's storage according to this contract's layout.\\n     *\\n     * Since storage is not set yet, there is no simple way to protect\\n     * calling this function with owner modifiers.  Thus the OpenZeppelin\\n     * `initializer` modifier protects this function from being called\\n     * repeatedly.  It should be called during the deployment so that\\n     * it cannot be called by someone else later.\\n     *\\n     * NOTE: this function is copied from the V1 contract and has already\\n     * been called during V1 deployment.  It is included here for clarity.\\n     */\\n    function initialize(address adminAddress) external initializer {\\n        require(adminAddress != address(0), \\\"INVALID_ADMIN\\\");\\n\\n        // initialize ancestor storage\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n\\n        // initialize impl-specific storage\\n        setAdminAddress(adminAddress);\\n    }\\n\\n    /**\\n     * @dev Dummy function to show how one would implement an init function\\n     * for future upgrades.  Note the `initializer` modifier can only be used\\n     * once in the entire contract, so we can't use it here.  Instead,\\n     * we set the proxy admin address as a variable and protect this\\n     * function with `onlyAdmin`, which only allows the proxy admin\\n     * to call this function during upgrades.\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    function initializeUpgrade() external virtual onlyAdmin {}\\n\\n    function setAdminAddress(address adminAddress) public onlyOwner {\\n        require(adminAddress != address(0), \\\"INVALID_ADMIN\\\");\\n        proxyAdmin = adminAddress;\\n        emit AdminChanged(adminAddress);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the proxy admin.\\n     */\\n    modifier onlyAdmin() {\\n        require(msg.sender == proxyAdmin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    /// @notice Returns the list of all registered identifiers.\\n    function getIds() public view override returns (bytes32[] memory) {\\n        return _idList;\\n    }\\n\\n    /**\\n     * @notice Register address with identifier.\\n     * @dev Using an existing ID will replace the old address with new.\\n     *      Currently there is no way to remove an ID, as attempting to\\n     *      register the zero address will revert.\\n     */\\n    function registerAddress(bytes32 id, address _address) public onlyOwner {\\n        require(_address != address(0), \\\"Invalid address\\\");\\n        if (_idToAddress[id] == address(0)) {\\n            // id wasn't registered before, so add it to the list\\n            _idList.push(id);\\n        }\\n        _idToAddress[id] = _address;\\n        emit AddressRegistered(id, _address);\\n    }\\n\\n    /// @dev Convenient method to register multiple addresses at once.\\n    function registerMultipleAddresses(\\n        bytes32[] calldata ids,\\n        address[] calldata addresses\\n    ) external onlyOwner {\\n        require(ids.length == addresses.length, \\\"Inputs have differing length\\\");\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            bytes32 id = ids[i];\\n            address _address = addresses[i];\\n            registerAddress(id, _address);\\n        }\\n    }\\n\\n    /// @notice Retrieve the address corresponding to the identifier.\\n    function getAddress(bytes32 id) public view override returns (address) {\\n        address _address = _idToAddress[id];\\n        require(_address != address(0), \\\"Missing address\\\");\\n        return _address;\\n    }\\n\\n    /**\\n     * @dev Delete the address corresponding to the identifier.\\n     *      Time-complexity is O(n) where n is the length of `_idList`.\\n     */\\n    function deleteAddress(bytes32 id) public onlyOwner {\\n        for (uint256 i = 0; i < _idList.length; i++) {\\n            if (_idList[i] == id) {\\n                // copy last element to slot i and shorten array\\n                _idList[i] = _idList[_idList.length - 1];\\n                _idList.pop();\\n                delete _idToAddress[id];\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the address for the Pool Manager.\\n     * @dev Not just a helper function, this makes explicit a key ID\\n     *      for the system.\\n     */\\n    function poolManagerAddress() public view override returns (address) {\\n        return getAddress(\\\"poolManager\\\");\\n    }\\n\\n    /**\\n     * @notice Get the address for the TVL Manager.\\n     * @dev Not just a helper function, this makes explicit a key ID\\n     *      for the system.\\n     */\\n    function tvlManagerAddress() public view override returns (address) {\\n        return getAddress(\\\"tvlManager\\\");\\n    }\\n\\n    /**\\n     * @notice An alias for the TVL Manager.  This is used by\\n     *         Chainlink nodes to compute the deployed value of the\\n     *         APY.Finance system.\\n     * @dev Not just a helper function, this makes explicit a key ID\\n     *      for the system.\\n     */\\n    function chainlinkRegistryAddress() public view override returns (address) {\\n        return tvlManagerAddress();\\n    }\\n\\n    /**\\n     * @notice Get the address for APY.Finance's DAI stablecoin pool.\\n     * @dev Not just a helper function, this makes explicit a key ID\\n     *      for the system.\\n     */\\n    function daiPoolAddress() public view override returns (address) {\\n        return getAddress(\\\"daiPool\\\");\\n    }\\n\\n    /**\\n     * @notice Get the address for APY.Finance's USDC stablecoin pool.\\n     * @dev Not just a helper function, this makes explicit a key ID\\n     *      for the system.\\n     */\\n    function usdcPoolAddress() public view override returns (address) {\\n        return getAddress(\\\"usdcPool\\\");\\n    }\\n\\n    /**\\n     * @notice Get the address for APY.Finance's USDT stablecoin pool.\\n     * @dev Not just a helper function, this makes explicit a key ID\\n     *      for the system.\\n     */\\n    function usdtPoolAddress() public view override returns (address) {\\n        return getAddress(\\\"usdtPool\\\");\\n    }\\n\\n    function mAptAddress() public view override returns (address) {\\n        return getAddress(\\\"mApt\\\");\\n    }\\n\\n    /**\\n     * @notice Get the address for the APY.Finance LP Safe.\\n     */\\n    function lpSafeAddress() public view override returns (address) {\\n        return getAddress(\\\"lpSafe\\\");\\n    }\\n\\n    function oracleAdapterAddress() public view override returns (address) {\\n        return getAddress(\\\"oracleAdapter\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n\\n\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAddressRegistryV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\n\\n/**\\n * @title Interface to access APY.Finance's address registry\\n * @author APY.Finance\\n * @notice The address registry has two important purposes, one which\\n *         is fairly concrete and another abstract.\\n *\\n *         1. The registry enables components of the APY.Finance system\\n *         and external systems to retrieve core addresses reliably\\n *         even when the functionality may move to a different\\n *         address.\\n *\\n *         2. The registry also makes explicit which contracts serve\\n *         as primary entrypoints for interacting with different\\n *         components.  Not every contract is registered here, only\\n *         the ones properly deserving of an identifier.  This helps\\n *         define explicit boundaries between groups of contracts,\\n *         each of which is logically cohesive.\\n */\\ninterface IAddressRegistryV2 {\\n    /**\\n     * @notice Returns the list of identifiers for core components of\\n     *         the APY.Finance system.\\n     * @return List of identifiers\\n     */\\n    function getIds() external view returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Returns the current address represented by an identifier\\n     *         for a core component.\\n     * @param id Component identifier\\n     * @return The current address represented by an identifier\\n     */\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function poolManagerAddress() external view returns (address);\\n\\n    function tvlManagerAddress() external view returns (address);\\n\\n    function chainlinkRegistryAddress() external view returns (address);\\n\\n    function daiPoolAddress() external view returns (address);\\n\\n    function usdcPoolAddress() external view returns (address);\\n\\n    function usdtPoolAddress() external view returns (address);\\n\\n    function mAptAddress() external view returns (address);\\n\\n    function lpSafeAddress() external view returns (address);\\n\\n    function oracleAdapterAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AddressRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"chainlinkRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"deleteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIds\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpSafeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mAptAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAdapterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"registerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"ids\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"registerMultipleAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"setAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvlManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AddressRegistryV2","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}