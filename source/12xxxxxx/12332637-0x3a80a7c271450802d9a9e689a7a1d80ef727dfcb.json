{"status":"1","message":"OK","result":[{"SourceCode":"// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant alphabet = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = alphabet[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n    function grantRole(bytes32 role, address account) external;\r\n    function revokeRole(bytes32 role, address account) external;\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping (address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping (bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view {\r\n        if(!hasRole(role, account)) {\r\n            revert(string(abi.encodePacked(\r\n                \"AccessControl: account \",\r\n                Strings.toHexString(uint160(account), 20),\r\n                \" is missing role \",\r\n                Strings.toHexString(uint256(role), 32)\r\n            )));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/TokenInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface TokenInterface{\r\n    function burnFrom(address _from, uint _amount) external;\r\n    function mintTo(address _to, uint _amount) external;\r\n}\r\n// File: contracts/LiquidityMining.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\n\r\n// Author: Matt Hooft \r\n// https://github.com/Civitas-Fundamenta\r\n// mhooft@fundamenta.network)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract LiquidityMining is Ownable, AccessControl {\r\n    \r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    \r\n    TokenInterface private fundamenta;\r\n    \r\n    //-------RBAC---------------------------\r\n\r\n    bytes32 public constant _ADMIN = keccak256(\"_ADMIN\");\r\n    bytes32 public constant _REMOVAL = keccak256(\"_REMOVAL\");\r\n    bytes32 public constant _MOVE = keccak256(\"_MOVE\");\r\n    bytes32 public constant _RESCUE = keccak256(\"_RESCUE\");\r\n    \r\n    //------------Token Vars-------------------\r\n    \r\n    bool public paused;\r\n    bool public addDisabled;\r\n    bool public removePositionOnly;\r\n    \r\n    uint private lockPeriod0;\r\n    uint private lockPeriod1;\r\n    uint private lockPeriod2;\r\n    \r\n    uint private lockPeriodBPScale;\r\n    \r\n    uint private preYieldDivisor;\r\n    \r\n    address private defaultAdmin = 0x82Ab0c69b6548e6Fd61365FeCc3256BcF70dc448;\r\n    \r\n    /**\r\n     * `periodCalc` uses blocks instead of timestamps\r\n     * as a way to determine days. approx. 6500 blocks a day\r\n     *  are mined on the ethereum network. \r\n     * `periodCalc` can also be configured if this were ever \r\n     * needed to be changed.  It also helps to lower it during \r\n     * testing if you are looking at using any of this code.\r\n     */\r\n     \r\n    uint public periodCalc;\r\n    \r\n    //-------Structs/Mappings/Arrays-------------\r\n    \r\n    /**\r\n     * struct to keep track of Liquidity Providers who have \r\n     * chosen to stake UniswapV2 Liquidity Pool tokens towards \r\n     * earning FMTA. \r\n     */ \r\n    \r\n    struct LiquidityProviders {\r\n        address Provider;\r\n        uint UnlockHeight;\r\n        uint LockedAmount;\r\n        uint Days;\r\n        uint UserBP;\r\n        uint TotalRewardsPaid;\r\n    }\r\n    \r\n    /**\r\n     * struct to keep track of liquidity pools, total\r\n     * rewards paid and total value locked in said pools.\r\n     */\r\n    \r\n    struct PoolInfo {\r\n        IERC20 ContractAddress;\r\n        uint TotalRewardsPaidByPool;\r\n        uint TotalLPTokensLocked;\r\n        uint PoolBonus;\r\n        uint lockPeriod0BasisPoint;\r\n        uint lockPeriod1BasisPoint;\r\n        uint lockPeriod2BasisPoint;\r\n        uint compYield0;\r\n        uint compYield1;\r\n        uint compYield2;\r\n        uint maxPoolBP;\r\n    }\r\n    \r\n    /**\r\n     * PoolInfo is tracked as an array. The length/index \r\n     * of the array will be used as the variable `_pid` (Pool ID) \r\n     * throughout the contract.\r\n     */\r\n    \r\n    PoolInfo[] public poolInfo;\r\n    \r\n    /**\r\n     * mapping to keep track of the struct LiquidityProviders \r\n     * mapeed to user addresses but also maps it to `uint _pid`\r\n     * this makes tracking the same address across multiple pools \r\n     * with different positions possible as _pid will also be the \r\n     * index of PoolInfo[]\r\n     */\r\n    \r\n    mapping (uint => mapping (address => LiquidityProviders)) public provider;\r\n\r\n    //-------Events--------------\r\n\r\n    event PositionAdded (address _account, uint _amount, uint _blockHeight);\r\n    event PositionRemoved (address _account, uint _amount, uint _blockHeight);\r\n    event PositionForceRemoved (address _account, uint _amount, uint _blockHeight);\r\n    event PositionCompounded (address _account, uint _amountAdded, uint _blockHeight);\r\n    event ETHRescued (address _movedBy, address _movedTo, uint _amount, uint _blockHeight);\r\n    event ERC20Movement (address _movedBy, address _movedTo, uint _amount, uint _blockHeight);\r\n    \r\n    \r\n    /**\r\n     * constructor sets initial values for contract intiialization\r\n     */ \r\n    \r\n    constructor() {\r\n        periodCalc = 6500;\r\n        lockPeriodBPScale = 10000;\r\n        preYieldDivisor = 2;\r\n        lockPeriod0 = 5;\r\n        lockPeriod1 = 10;\r\n        lockPeriod2 = 15;\r\n        removePositionOnly = false;\r\n        _setupRole(DEFAULT_ADMIN_ROLE, defaultAdmin); //God Mode. DEFAULT_ADMIN_ROLE Must Require _ADMIN ROLE Still to execute _ADMIN functions.\r\n    }\r\n     \r\n     //------------State modifiers---------------------\r\n     \r\n      modifier unpaused() {\r\n        require(!paused, \"LiquidityMining: Contract is Paused\");\r\n        _;\r\n    }\r\n    \r\n     modifier addPositionNotDisabled() {\r\n        require(!addDisabled, \"LiquidityMining: Adding a Position is currently disabled\");\r\n        _;\r\n    }\r\n    \r\n    modifier remPosOnly() {\r\n        require(!removePositionOnly, \"LiquidityMining: Only Removing a position is allowed at the moment\");\r\n        _;\r\n    }\r\n    \r\n    //----------Modifier Functions----------------------\r\n\r\n    function setPaused(bool _paused) external {\r\n        require(hasRole(_ADMIN, msg.sender),\"LiquidityMining: Message Sender must be _ADMIN\");\r\n        paused = _paused;\r\n    }\r\n    \r\n    function setRemovePosOnly(bool _removeOnly) external {\r\n        require(hasRole(_ADMIN, msg.sender),\"LiquidityMining: Message Sender must be _ADMIN\");\r\n        removePositionOnly = _removeOnly;\r\n    }\r\n    \r\n      function disableAdd(bool _addDisabled) external {\r\n          require(hasRole(_ADMIN, msg.sender),\"LiquidityMining: Message Sender must be _ADMIN\");\r\n        addDisabled = _addDisabled;\r\n    }\r\n    \r\n    //------------Token Functions----------------------\r\n    \r\n    /**\r\n     * functions to add and remove liquidity Pool pairs to allow users to\r\n     * stake the pools LP Tokens towards earnign rewards. Can only\r\n     * be called by accounts with the `_ADMIN` role and should only \r\n     * be added once. The index at which the pool pair is stored \r\n     * will determine the pools `_pid`. Note if you remove a pool the \r\n     * index remians but is just left empty making the _pid return\r\n     * zero value if called.\r\n     */\r\n    \r\n    function addLiquidityPoolToken(\r\n        IERC20 _lpTokenAddress, \r\n        uint _bonus, \r\n        uint _lpbp0, \r\n        uint _lpbp1, \r\n        uint _lpbp2, \r\n        uint _cy0, \r\n        uint _cy1, \r\n        uint _cy2,\r\n        uint _mbp) public {\r\n        require(hasRole(_ADMIN, msg.sender),\"LiquidityMining: Message Sender must be _ADMIN\");\r\n        poolInfo.push(PoolInfo({\r\n            ContractAddress: _lpTokenAddress,\r\n            TotalRewardsPaidByPool: 0,\r\n            TotalLPTokensLocked: 0,\r\n            PoolBonus: _bonus,\r\n            lockPeriod0BasisPoint: _lpbp0,\r\n            lockPeriod1BasisPoint: _lpbp1,\r\n            lockPeriod2BasisPoint: _lpbp2,\r\n            compYield0: _cy0,\r\n            compYield1: _cy1,\r\n            compYield2: _cy2,\r\n            maxPoolBP: _mbp\r\n        }));\r\n  \r\n    }\r\n\r\n    \r\n    function removeLiquidityPoolToken(uint _pid) public {\r\n        require(hasRole(_ADMIN, msg.sender),\"LiquidityMining: Message Sender must be _ADMIN\");\r\n        delete poolInfo[_pid];\r\n        \r\n    }\r\n    \r\n    //------------Information Functions------------------\r\n    \r\n    /**\r\n     * return the length of the pool array\r\n     */\r\n    \r\n     function poolLength() external view returns (uint) {\r\n        return poolInfo.length;\r\n    }\r\n    \r\n    /**\r\n     * function to return the contracts balances of LP Tokens\r\n     * staked from different Uniswap pools.\r\n     */\r\n\r\n    function contractBalanceByPoolID(uint _pid) public view returns (uint _balance) {\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n        address ca = address(this);\r\n        return pool.ContractAddress.balanceOf(ca);\r\n    }\r\n    \r\n    /**\r\n     * funtion that returns a callers staked position in a pool \r\n     * using `_pid` as an argument.\r\n     */\r\n    \r\n    function accountPosition(address _account, uint _pid) public view returns (\r\n        address _accountAddress, \r\n        uint _unlockHeight, \r\n        uint _lockedAmount, \r\n        uint _lockPeriodInDays, \r\n        uint _userDPY, \r\n        IERC20 _lpTokenAddress,\r\n        uint _totalRewardsPaidFromPool\r\n    ) {\r\n        LiquidityProviders memory p = provider[_pid][_account];\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n        return (\r\n            p.Provider, \r\n            p.UnlockHeight, \r\n            p.LockedAmount, \r\n            p.Days, \r\n            p.UserBP, \r\n            pool.ContractAddress,\r\n            pool.TotalRewardsPaidByPool\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * funtion that returns a true or false regarding whether\r\n     * an account as a position in a pool.  Takes the account address\r\n     * and `_pid` as arguments\r\n     */\r\n    \r\n    function hasPosition(address _userAddress, uint _pid) public view returns (bool _hasPosition) {\r\n        LiquidityProviders memory p = provider[_pid][_userAddress];\r\n        if(p.LockedAmount == 0)\r\n        return false;\r\n        else \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * function to show current lock periods.\r\n     */\r\n    \r\n    function showCurrentLockPeriods() external view returns (\r\n        uint _lockPeriod0, \r\n        uint _lockPeriod1, \r\n        uint _lockPeriod2\r\n    ) {\r\n        return (\r\n            lockPeriod0, \r\n            lockPeriod1, \r\n            lockPeriod2\r\n        );\r\n    }\r\n    \r\n    //-----------Set Functions----------------------\r\n    \r\n    /**\r\n     * function to set the token that will be minting rewards \r\n     * for Liquidity Providers.\r\n     */\r\n    \r\n    function setTokenContract(TokenInterface _fmta) public {\r\n        require(hasRole(_ADMIN, msg.sender),\"LiquidityMining: Message Sender must be _ADMIN\");\r\n        fundamenta = _fmta;\r\n    }\r\n    \r\n    /**\r\n     * allows accounts with the _ADMIN role to set new lock periods.\r\n     */\r\n    \r\n    function setLockPeriods(uint _newPeriod0, uint _newPeriod1, uint _newPeriod2) public {\r\n        require(hasRole(_ADMIN, msg.sender),\"LiquidityMining: Message Sender must be _ADMIN\");\r\n        require(_newPeriod2 > _newPeriod1 && _newPeriod1 > _newPeriod0);\r\n        lockPeriod0 = _newPeriod0;\r\n        lockPeriod1 = _newPeriod1;\r\n        lockPeriod2 = _newPeriod2;\r\n    }\r\n    \r\n    /**\r\n     * allows contract owner to set a new `periodCalc`\r\n     */\r\n    \r\n    function setPeriodCalc(uint _newPeriodCalc) public {\r\n        require(hasRole(_ADMIN, msg.sender),\"LiquidityMining: Message Sender must be _ADMIN\");\r\n        periodCalc = _newPeriodCalc;\r\n    }\r\n\r\n    /**\r\n     * set of functions to set parameters regarding \r\n     * lock periods and basis points which are used to  \r\n     * calculate a users daily yield. Can only be called \r\n     * by contract _ADMIN.\r\n     */\r\n    \r\n    function setLockPeriodBasisPoints (\r\n        uint _newLockPeriod0BasisPoint, \r\n        uint _newLockPeriod1BasisPoint, \r\n        uint _newLockPeriod2BasisPoint,\r\n        uint _pid) public {\r\n        require(hasRole(_ADMIN, msg.sender),\"LiquidityMining: Message Sender must be _ADMIN\");\r\n        poolInfo[_pid].lockPeriod0BasisPoint = _newLockPeriod0BasisPoint;\r\n        poolInfo[_pid].lockPeriod1BasisPoint = _newLockPeriod1BasisPoint;\r\n        poolInfo[_pid].lockPeriod2BasisPoint = _newLockPeriod2BasisPoint;\r\n    }\r\n    \r\n    function setLockPeriodBPScale(uint _newLockPeriodScale) public {\r\n        require(hasRole(_ADMIN, msg.sender),\"LiquidityMining: Message Sender must be _ADMIN\");\r\n        lockPeriodBPScale = _newLockPeriodScale;\r\n    \r\n    }\r\n\r\n    function setMaxUserBP(uint _newMaxPoolBP, uint _pid) public {\r\n        require(hasRole(_ADMIN, msg.sender),\"LiquidityMining: Message Sender must be _ADMIN\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        pool.maxPoolBP = _newMaxPoolBP;\r\n    }\r\n    \r\n    function setCompoundYield (\r\n        uint _newCompoundYield0, \r\n        uint _newCompoundYield1, \r\n        uint _newCompoundYield2,\r\n        uint _pid) public {\r\n        require(hasRole(_ADMIN, msg.sender),\"LiquidityMining: Message Sender must be _ADMIN\");\r\n        poolInfo[_pid].compYield0 = _newCompoundYield0;\r\n        poolInfo[_pid].compYield1 = _newCompoundYield1;\r\n        poolInfo[_pid].compYield2 = _newCompoundYield2;\r\n        \r\n    }\r\n    \r\n    function setPoolBonus(uint _pid, uint _bonus) public {\r\n        require(hasRole(_ADMIN, msg.sender));\r\n        poolInfo[_pid].PoolBonus = _bonus;\r\n    }\r\n\r\n    function setPreYieldDivisor(uint _newDivisor) public {\r\n        require(hasRole(_ADMIN, msg.sender),\"LiquidityMining: Message Sender must be _ADMIN\");\r\n        preYieldDivisor = _newDivisor;\r\n    }\r\n    \r\n    //-----------Position/Rewards Functions------------------\r\n    \r\n    /**\r\n     * this function allows a user to add a liquidity Staking\r\n     * position.  The user will need to choose one of the three\r\n     * configured lock Periods. Users may add to the position \r\n     * only once per lock period.\r\n     */\r\n    \r\n    function addPosition(uint _lpTokenAmount, uint _lockPeriod, uint _pid) public addPositionNotDisabled unpaused{\r\n        LiquidityProviders storage p = provider[_pid][msg.sender];\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        address ca = address(this);\r\n        require(p.LockedAmount == 0, \"LiquidityMining: This account already has a position\");\r\n        if(_lockPeriod == lockPeriod0) {\r\n            pool.ContractAddress.safeTransferFrom(msg.sender, ca, _lpTokenAmount);\r\n            uint _preYield = _lpTokenAmount.mul(pool.lockPeriod0BasisPoint.add(pool.PoolBonus)).div(lockPeriodBPScale).mul(_lockPeriod);\r\n            provider[_pid][msg.sender] = LiquidityProviders (\r\n                msg.sender, \r\n                block.number.add(periodCalc.mul(lockPeriod0)), \r\n                _lpTokenAmount, \r\n                lockPeriod0, \r\n                pool.lockPeriod0BasisPoint,\r\n                p.TotalRewardsPaid.add(_preYield.div(preYieldDivisor))\r\n            );\r\n            fundamenta.mintTo(msg.sender, _preYield.div(preYieldDivisor));\r\n            pool.TotalLPTokensLocked = pool.TotalLPTokensLocked.add(_lpTokenAmount);\r\n            pool.TotalRewardsPaidByPool = pool.TotalRewardsPaidByPool.add(_preYield.div(preYieldDivisor));\r\n        } else if (_lockPeriod == lockPeriod1) {\r\n            pool.ContractAddress.safeTransferFrom(msg.sender, ca, _lpTokenAmount);\r\n            uint _preYield = _lpTokenAmount.mul(pool.lockPeriod1BasisPoint.add(pool.PoolBonus)).div(lockPeriodBPScale).mul(_lockPeriod);\r\n            provider[_pid][msg.sender] = LiquidityProviders (\r\n                msg.sender, \r\n                block.number.add(periodCalc.mul(lockPeriod1)), \r\n                _lpTokenAmount, \r\n                lockPeriod1, \r\n                pool.lockPeriod1BasisPoint,\r\n                p.TotalRewardsPaid.add(_preYield.div(preYieldDivisor))\r\n            );\r\n            fundamenta.mintTo(msg.sender, _preYield.div(preYieldDivisor));\r\n            pool.TotalLPTokensLocked = pool.TotalLPTokensLocked.add(_lpTokenAmount);\r\n            pool.TotalRewardsPaidByPool = pool.TotalRewardsPaidByPool.add(_preYield.div(preYieldDivisor));\r\n        } else if (_lockPeriod == lockPeriod2) {\r\n            pool.ContractAddress.safeTransferFrom(msg.sender, ca, _lpTokenAmount);\r\n            uint _preYield = _lpTokenAmount.mul(pool.lockPeriod2BasisPoint.add(pool.PoolBonus)).div(lockPeriodBPScale).mul(_lockPeriod);\r\n            provider[_pid][msg.sender] = LiquidityProviders (\r\n                msg.sender, \r\n                block.number.add(periodCalc.mul(lockPeriod2)), \r\n                _lpTokenAmount, \r\n                lockPeriod2, \r\n                pool.lockPeriod2BasisPoint,\r\n                p.TotalRewardsPaid.add(_preYield.div(preYieldDivisor))\r\n            );\r\n            fundamenta.mintTo(msg.sender, _preYield.div(preYieldDivisor));\r\n            pool.TotalLPTokensLocked = pool.TotalLPTokensLocked.add(_lpTokenAmount);\r\n            pool.TotalRewardsPaidByPool = pool.TotalRewardsPaidByPool.add(_preYield.div(preYieldDivisor));\r\n        }else revert(\"LiquidityMining: Incompatible Lock Period\");\r\n      emit PositionAdded (\r\n          msg.sender,\r\n          _lpTokenAmount,\r\n          block.number\r\n      );\r\n    }\r\n    \r\n    /**\r\n     * allows a user to remove a liquidity staking position\r\n     * and will withdraw any pending rewards. User must withdraw \r\n     * the entire position.\r\n     */\r\n    \r\n    function removePosition(uint _pid) external unpaused {\r\n        LiquidityProviders storage p = provider[_pid][msg.sender];\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        //require(_lpTokenAmount == p.LockedAmount, \"LiquidyMining: Either you do not have a position or you must remove the entire amount.\");\r\n        require(p.UnlockHeight < block.number, \"LiquidityMining: Not Long Enough\");\r\n            pool.ContractAddress.safeTransfer(msg.sender, p.LockedAmount);\r\n            uint yield = calculateUserDailyYield(_pid);\r\n            fundamenta.mintTo(msg.sender, yield);\r\n            provider[_pid][msg.sender] = LiquidityProviders (\r\n                msg.sender, \r\n                0, \r\n                p.LockedAmount.sub(p.LockedAmount),\r\n                0, \r\n                0,\r\n                p.TotalRewardsPaid.add(yield)\r\n            );\r\n        pool.TotalRewardsPaidByPool = pool.TotalRewardsPaidByPool.add(yield);\r\n        pool.TotalLPTokensLocked = pool.TotalLPTokensLocked.sub(p.LockedAmount);\r\n        emit PositionRemoved(\r\n        msg.sender,\r\n        p.LockedAmount,\r\n        block.number\r\n      );\r\n    }\r\n\r\n    /**\r\n     * function to forcibly remove a users position.  This \r\n     * is required due to the fact that the basis points used to \r\n     * calculate user DPY will be constantly changing.\r\n     * We will need to forceibly remove positions of lazy (or malicious)\r\n     * users who will try to take advantage of DPY being lowered instead \r\n     * of raised and maintining thier current return levels.\r\n     */\r\n    \r\n    function forcePositionRemoval(uint _pid, address _account) public {\r\n        require(hasRole(_REMOVAL, msg.sender));\r\n        LiquidityProviders storage p = provider[_pid][_account];\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        uint yield = p.LockedAmount.mul(p.UserBP.add(pool.PoolBonus)).div(lockPeriodBPScale).mul(p.Days);\r\n        fundamenta.mintTo(_account, yield);\r\n        uint _lpTokenAmount = p.LockedAmount;\r\n        pool.ContractAddress.safeTransfer(_account, _lpTokenAmount);\r\n        uint _newLpTokenAmount = p.LockedAmount.sub(_lpTokenAmount);\r\n        provider[_pid][_account] = LiquidityProviders (\r\n            _account, \r\n            0, \r\n            _newLpTokenAmount, \r\n            0, \r\n            0,\r\n            p.TotalRewardsPaid.add(yield)\r\n        );\r\n        pool.TotalRewardsPaidByPool = pool.TotalRewardsPaidByPool.add(yield);\r\n        pool.TotalLPTokensLocked = pool.TotalLPTokensLocked.sub(_lpTokenAmount);\r\n        emit PositionForceRemoved(\r\n        msg.sender,\r\n        _lpTokenAmount,\r\n        block.number\r\n      );\r\n    \r\n    }\r\n\r\n    /**\r\n     * calculates a users daily yield. DY is calculated\r\n     * using basis points and the lock period as a multiplier.\r\n     * Basis Points and the scale used are configurble by accounts\r\n     * or contracts that have the _ADMIN Role\r\n     */\r\n    \r\n    function calculateUserDailyYield(uint _pid) public view returns (uint _dailyYield) {\r\n        LiquidityProviders memory p = provider[_pid][msg.sender];\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n        uint dailyYield = p.LockedAmount.mul(p.UserBP.add(pool.PoolBonus)).div(lockPeriodBPScale).mul(p.Days);\r\n        return dailyYield;\r\n    }\r\n    \r\n    /**\r\n     * allow user to withdraw thier accrued yield. Reset \r\n     * the lock period to continue liquidity mining and apply\r\n     * CDPY to DPY. Allow user to add more stake if desired\r\n     * in the process. Once a user has reached the `maxUserBP`\r\n     * DPY will no longer increase.\r\n     */\r\n    \r\n    function withdrawAccruedYieldAndAdd(uint _pid, uint _lpTokenAmount) public remPosOnly unpaused{\r\n        LiquidityProviders storage p = provider[_pid][msg.sender];\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        uint yield = calculateUserDailyYield(_pid);\r\n        require(removePositionOnly == false);\r\n        require(p.UnlockHeight < block.number);\r\n        if (_lpTokenAmount != 0) {\r\n            if(p.Days == lockPeriod0) {\r\n                fundamenta.mintTo(msg.sender, yield);\r\n                pool.ContractAddress.safeTransferFrom(msg.sender, address(this), _lpTokenAmount);\r\n                provider[_pid][msg.sender] = LiquidityProviders (\r\n                msg.sender, \r\n                    block.number.add(periodCalc.mul(lockPeriod0)), \r\n                    _lpTokenAmount.add(p.LockedAmount), \r\n                    lockPeriod0, \r\n                    p.UserBP.add(p.UserBP >= pool.maxPoolBP ? 0 : pool.compYield0),\r\n                    p.TotalRewardsPaid.add(yield)\r\n                );\r\n                pool.TotalRewardsPaidByPool = pool.TotalRewardsPaidByPool.add(yield);\r\n                pool.TotalLPTokensLocked = pool.TotalLPTokensLocked.add(_lpTokenAmount);\r\n            } else if (p.Days == lockPeriod1) {\r\n                fundamenta.mintTo(msg.sender, yield);\r\n                pool.ContractAddress.safeTransferFrom(msg.sender, address(this), _lpTokenAmount);\r\n                provider[_pid][msg.sender] = LiquidityProviders (\r\n                    msg.sender, \r\n                    block.number.add(periodCalc.mul(lockPeriod1)),\r\n                    _lpTokenAmount.add(p.LockedAmount), \r\n                    lockPeriod1, \r\n                    p.UserBP.add(p.UserBP >= pool.maxPoolBP ? 0 : pool.compYield1),\r\n                    p.TotalRewardsPaid.add(yield)\r\n                );\r\n                pool.TotalRewardsPaidByPool = pool.TotalRewardsPaidByPool.add(yield);\r\n                pool.TotalLPTokensLocked = pool.TotalLPTokensLocked.add(_lpTokenAmount);\r\n            } else if (p.Days == lockPeriod2) {\r\n                fundamenta.mintTo(msg.sender, yield);\r\n                pool.ContractAddress.safeTransferFrom(msg.sender, address(this), _lpTokenAmount);\r\n                provider[_pid][msg.sender] = LiquidityProviders (\r\n                    msg.sender, \r\n                    block.number.add(periodCalc.mul(lockPeriod2)), \r\n                    _lpTokenAmount.add(p.LockedAmount), \r\n                    lockPeriod2, \r\n                    p.UserBP.add(p.UserBP >= pool.maxPoolBP ? 0 : pool.compYield2),\r\n                    p.TotalRewardsPaid.add(yield)\r\n                );\r\n                pool.TotalRewardsPaidByPool = pool.TotalRewardsPaidByPool.add(yield);\r\n                pool.TotalLPTokensLocked = pool.TotalLPTokensLocked.add(_lpTokenAmount);\r\n            } else revert(\"LiquidityMining: Incompatible Lock Period\");\r\n        } else if (_lpTokenAmount == 0) {\r\n            if(p.Days == lockPeriod0) {\r\n                fundamenta.mintTo(msg.sender, yield);\r\n                provider[_pid][msg.sender] = LiquidityProviders (\r\n                    msg.sender, \r\n                    block.number.add(periodCalc.mul(lockPeriod0)), \r\n                    p.LockedAmount, \r\n                    lockPeriod0, \r\n                    p.UserBP.add(p.UserBP >= pool.maxPoolBP ? 0 : pool.compYield0),\r\n                    p.TotalRewardsPaid.add(yield)\r\n                );\r\n                pool.TotalRewardsPaidByPool = pool.TotalRewardsPaidByPool.add(yield);\r\n            } else if (p.Days == lockPeriod1) {\r\n                fundamenta.mintTo(msg.sender, yield);\r\n                provider[_pid][msg.sender] = LiquidityProviders (\r\n                    msg.sender, \r\n                    block.number.add(periodCalc.mul(lockPeriod1)), \r\n                    p.LockedAmount, \r\n                    lockPeriod1, \r\n                    p.UserBP.add(p.UserBP >= pool.maxPoolBP ? 0 : pool.compYield1),\r\n                    p.TotalRewardsPaid.add(yield)\r\n                );\r\n                pool.TotalRewardsPaidByPool = pool.TotalRewardsPaidByPool.add(yield);\r\n            } else if (p.Days == lockPeriod2) {\r\n                fundamenta.mintTo(msg.sender, yield);\r\n                provider[_pid][msg.sender] = LiquidityProviders (\r\n                    msg.sender, \r\n                    block.number.add(periodCalc.mul(lockPeriod2)), \r\n                    p.LockedAmount, \r\n                    lockPeriod2, \r\n                    p.UserBP.add(p.UserBP >= pool.maxPoolBP ? 0 : pool.compYield2),\r\n                    p.TotalRewardsPaid.add(yield)\r\n                );\r\n                pool.TotalRewardsPaidByPool = pool.TotalRewardsPaidByPool.add(yield);\r\n            }else revert(\"LiquidityMining: Incompatible Lock Period\");\r\n        }else revert(\"LiquidityMining: ?\" );\r\n         emit PositionRemoved (\r\n             msg.sender,\r\n             _lpTokenAmount,\r\n             block.number\r\n         );\r\n    }\r\n    \r\n    //-------Movement Functions---------------------\r\n\r\n    \r\n    function moveERC20(address _ERC20, address _dest, uint _ERC20Amount) public {\r\n        require(hasRole(_MOVE, msg.sender));\r\n        IERC20(_ERC20).safeTransfer(_dest, _ERC20Amount);\r\n        emit ERC20Movement (\r\n            msg.sender,\r\n            _dest,\r\n            _ERC20Amount,\r\n            block.number\r\n        );\r\n\r\n    }\r\n\r\n    function ethRescue(address payable _dest, uint _etherAmount) public {\r\n        require(hasRole(_RESCUE, msg.sender));\r\n        _dest.transfer(_etherAmount);\r\n        emit ETHRescued (\r\n            msg.sender,\r\n            _dest,\r\n            _etherAmount,\r\n            block.number\r\n        );\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_movedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_movedTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_blockHeight\",\"type\":\"uint256\"}],\"name\":\"ERC20Movement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_movedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_movedTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_blockHeight\",\"type\":\"uint256\"}],\"name\":\"ETHRescued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_blockHeight\",\"type\":\"uint256\"}],\"name\":\"PositionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_blockHeight\",\"type\":\"uint256\"}],\"name\":\"PositionCompounded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_blockHeight\",\"type\":\"uint256\"}],\"name\":\"PositionForceRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_blockHeight\",\"type\":\"uint256\"}],\"name\":\"PositionRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MOVE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_REMOVAL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_RESCUE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"accountPosition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_accountAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_unlockHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userDPY\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalRewardsPaidFromPool\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpbp0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpbp1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpbp2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cy0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cy1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cy2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mbp\",\"type\":\"uint256\"}],\"name\":\"addLiquidityPoolToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"addPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"calculateUserDailyYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_dailyYield\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"contractBalanceByPoolID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_addDisabled\",\"type\":\"bool\"}],\"name\":\"disableAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_etherAmount\",\"type\":\"uint256\"}],\"name\":\"ethRescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"forcePositionRemoval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"hasPosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_hasPosition\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ERC20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ERC20Amount\",\"type\":\"uint256\"}],\"name\":\"moveERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodCalc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"ContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"TotalRewardsPaidByPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TotalLPTokensLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PoolBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod0BasisPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod1BasisPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod2BasisPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compYield0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compYield1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compYield2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPoolBP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"provider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"Provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"UnlockHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Days\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"UserBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TotalRewardsPaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityPoolToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"removePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removePositionOnly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCompoundYield0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newCompoundYield1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newCompoundYield2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"setCompoundYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLockPeriodScale\",\"type\":\"uint256\"}],\"name\":\"setLockPeriodBPScale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLockPeriod0BasisPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newLockPeriod1BasisPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newLockPeriod2BasisPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"setLockPeriodBasisPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newPeriod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newPeriod2\",\"type\":\"uint256\"}],\"name\":\"setLockPeriods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxPoolBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"setMaxUserBP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriodCalc\",\"type\":\"uint256\"}],\"name\":\"setPeriodCalc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"setPoolBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newDivisor\",\"type\":\"uint256\"}],\"name\":\"setPreYieldDivisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_removeOnly\",\"type\":\"bool\"}],\"name\":\"setRemovePosOnly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract TokenInterface\",\"name\":\"_fmta\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showCurrentLockPeriods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockPeriod0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriod2\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpTokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawAccruedYieldAndAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LiquidityMining","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://11c32859d398b7f27ebcf2e1d275d189e47d421082e628c072c37bc5ad688577"}]}