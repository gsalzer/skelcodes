{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0\r\n// The OmegaPoker\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\npragma solidity ^0.6.12;\r\n\r\ninterface IlkReg {\r\n    function list() external returns (bytes32[] memory);\r\n    function pip(bytes32) external returns (address);\r\n}\r\n\r\ninterface Chainlog {\r\n    function getAddress(bytes32) external returns (address);\r\n}\r\n\r\ninterface OSMLike {\r\n    function src() external returns (address);\r\n}\r\n\r\ncontract OmegaPoker {\r\n\r\n    bytes4   constant spotselector = 0x1504460f;  // \"poke(bytes32)\"\r\n    bytes4   constant osmselector  = 0x18178358;  // \"poke()\"\r\n    bytes4   constant srcselector  = 0x2e7dc6af;  // \"src()\"\r\n\r\n    Chainlog constant cl = Chainlog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\r\n\r\n    bytes32[] public ilks;\r\n    address[] public osms;\r\n\r\n    IlkReg    public immutable registry;\r\n    address   public immutable spot;\r\n\r\n    constructor() public {\r\n        registry = IlkReg(cl.getAddress(\"ILK_REGISTRY\"));\r\n        spot     = cl.getAddress(\"MCD_SPOT\");\r\n    }\r\n\r\n    function osmCount() external view returns (uint256) {\r\n        return osms.length;\r\n    }\r\n\r\n    function ilkCount() external view returns (uint256) {\r\n        return ilks.length;\r\n    }\r\n\r\n    function refresh() external {\r\n        delete osms;\r\n        delete ilks;\r\n        bytes32[] memory _ilks = registry.list();\r\n        for (uint256 i = 0; i < _ilks.length; i++) {\r\n\r\n            address _pip = registry.pip(_ilks[i]);\r\n\r\n            // OSM's and LP oracles have src() function\r\n            (bool ok,) = _pip.call(abi.encodeWithSelector(srcselector));\r\n\r\n            if (ok) {\r\n                ilks.push(_ilks[i]);\r\n\r\n                bool exists;\r\n                for (uint j = 0; j < osms.length; j++) {\r\n                    if (osms[j] == _pip) {\r\n                        exists = true;\r\n                    }\r\n                }\r\n\r\n                if (!exists) {\r\n                    osms.push(_pip);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function poke() external {\r\n        bytes32[] memory _ilks = ilks;\r\n        address[] memory _osms = osms;\r\n        bool _ok;\r\n        for (uint256 i = 0; i < _ilks.length; i++) {\r\n            (_ok,) = spot.call(abi.encodeWithSelector(spotselector, _ilks[i]));\r\n        }\r\n        for (uint256 i = 0; i < _osms.length; i++) {\r\n            (_ok,) = _osms[i].call(abi.encodeWithSelector(osmselector));\r\n        }\r\n\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ilkCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ilks\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"osmCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"osms\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refresh\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IlkReg\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OmegaPoker","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1e652cad2fc80d38e6a381c5fb1085c403bba7a3131564086fc352961fd1805c"}]}