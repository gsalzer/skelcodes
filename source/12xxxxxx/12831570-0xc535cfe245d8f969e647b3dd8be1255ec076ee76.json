{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPLv3\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/common/Constants.sol\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ncontract Constants {\r\n    uint8 public constant N_COINS = 3;\r\n    uint8 public constant DEFAULT_DECIMALS = 18; // GToken and Controller use this decimals\r\n    uint256 public constant DEFAULT_DECIMALS_FACTOR = uint256(10)**DEFAULT_DECIMALS;\r\n    uint8 public constant CHAINLINK_PRICE_DECIMALS = 8;\r\n    uint256 public constant CHAINLINK_PRICE_DECIMAL_FACTOR = uint256(10)**CHAINLINK_PRICE_DECIMALS;\r\n    uint8 public constant PERCENTAGE_DECIMALS = 4;\r\n    uint256 public constant PERCENTAGE_DECIMAL_FACTOR = uint256(10)**PERCENTAGE_DECIMALS;\r\n    uint256 public constant CURVE_RATIO_DECIMALS = 6;\r\n    uint256 public constant CURVE_RATIO_DECIMALS_FACTOR = uint256(10)**CURVE_RATIO_DECIMALS;\r\n}\r\n\r\n// File: contracts/interfaces/IToken.sol\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IToken {\r\n    function factor() external view returns (uint256);\r\n\r\n    function factor(uint256 totalAssets) external view returns (uint256);\r\n\r\n    function mint(\r\n        address account,\r\n        uint256 _factor,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function burn(\r\n        address account,\r\n        uint256 _factor,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function burnAll(address account) external;\r\n\r\n    function totalAssets() external view returns (uint256);\r\n\r\n    function getPricePerShare() external view returns (uint256);\r\n\r\n    function getShareAssets(uint256 shares) external view returns (uint256);\r\n\r\n    function getAssets(address account) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/IVault.sol\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IVault {\r\n    function withdraw(uint256 amount) external;\r\n\r\n    function withdraw(uint256 amount, address recipient) external;\r\n\r\n    function withdrawByStrategyOrder(\r\n        uint256 amount,\r\n        address recipient,\r\n        bool reversed\r\n    ) external;\r\n\r\n    function withdrawByStrategyIndex(\r\n        uint256 amount,\r\n        address recipient,\r\n        uint256 strategyIndex\r\n    ) external;\r\n\r\n    function deposit(uint256 amount) external;\r\n\r\n    function updateStrategyRatio(uint256[] calldata strategyRetios) external;\r\n\r\n    function totalAssets() external view returns (uint256);\r\n\r\n    function getStrategiesLength() external view returns (uint256);\r\n\r\n    function strategyHarvestTrigger(uint256 index, uint256 callCost) external view returns (bool);\r\n\r\n    function strategyHarvest(uint256 index) external returns (bool);\r\n\r\n    function getStrategyAssets(uint256 index) external view returns (uint256);\r\n\r\n    function token() external view returns (address);\r\n\r\n    function vault() external view returns (address);\r\n\r\n    function investTrigger() external view returns (bool);\r\n\r\n    function invest() external;\r\n}\r\n\r\n// File: contracts/common/FixedContracts.sol\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\n\r\n\r\n\r\ncontract FixedStablecoins is Constants {\r\n    address public immutable DAI; // = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    address public immutable USDC; // = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address public immutable USDT; // = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n\r\n    uint256 public immutable DAI_DECIMALS; // = 1E18;\r\n    uint256 public immutable USDC_DECIMALS; // = 1E6;\r\n    uint256 public immutable USDT_DECIMALS; // = 1E6;\r\n\r\n    constructor(address[N_COINS] memory _tokens, uint256[N_COINS] memory _decimals) public {\r\n        DAI = _tokens[0];\r\n        USDC = _tokens[1];\r\n        USDT = _tokens[2];\r\n        DAI_DECIMALS = _decimals[0];\r\n        USDC_DECIMALS = _decimals[1];\r\n        USDT_DECIMALS = _decimals[2];\r\n    }\r\n\r\n    function underlyingTokens() internal view returns (address[N_COINS] memory tokens) {\r\n        tokens[0] = DAI;\r\n        tokens[1] = USDC;\r\n        tokens[2] = USDT;\r\n    }\r\n\r\n    function getToken(uint256 index) internal view returns (address) {\r\n        if (index == 0) {\r\n            return DAI;\r\n        } else if (index == 1) {\r\n            return USDC;\r\n        } else {\r\n            return USDT;\r\n        }\r\n    }\r\n\r\n    function decimals() internal view returns (uint256[N_COINS] memory _decimals) {\r\n        _decimals[0] = DAI_DECIMALS;\r\n        _decimals[1] = USDC_DECIMALS;\r\n        _decimals[2] = USDT_DECIMALS;\r\n    }\r\n\r\n    function getDecimal(uint256 index) internal view returns (uint256) {\r\n        if (index == 0) {\r\n            return DAI_DECIMALS;\r\n        } else if (index == 1) {\r\n            return USDC_DECIMALS;\r\n        } else {\r\n            return USDT_DECIMALS;\r\n        }\r\n    }\r\n}\r\n\r\ncontract FixedGTokens {\r\n    IToken public immutable pwrd;\r\n    IToken public immutable gvt;\r\n\r\n    constructor(address _pwrd, address _gvt) public {\r\n        pwrd = IToken(_pwrd);\r\n        gvt = IToken(_gvt);\r\n    }\r\n\r\n    function gTokens(bool _pwrd) internal view returns (IToken) {\r\n        if (_pwrd) {\r\n            return pwrd;\r\n        } else {\r\n            return gvt;\r\n        }\r\n    }\r\n}\r\n\r\ncontract FixedVaults is Constants {\r\n    address public immutable DAI_VAULT;\r\n    address public immutable USDC_VAULT;\r\n    address public immutable USDT_VAULT;\r\n\r\n    constructor(address[N_COINS] memory _vaults) public {\r\n        DAI_VAULT = _vaults[0];\r\n        USDC_VAULT = _vaults[1];\r\n        USDT_VAULT = _vaults[2];\r\n    }\r\n\r\n    function getVault(uint256 index) internal view returns (address) {\r\n        if (index == 0) {\r\n            return DAI_VAULT;\r\n        } else if (index == 1) {\r\n            return USDC_VAULT;\r\n        } else {\r\n            return USDT_VAULT;\r\n        }\r\n    }\r\n\r\n    function vaults() internal view returns (address[N_COINS] memory _vaults) {\r\n        _vaults[0] = DAI_VAULT;\r\n        _vaults[1] = USDC_VAULT;\r\n        _vaults[2] = USDT_VAULT;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IController.sol\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IController {\r\n    function stablecoins() external view returns (address[3] memory);\r\n\r\n    function vaults() external view returns (address[3] memory);\r\n\r\n    function underlyingVaults(uint256 i) external view returns (address vault);\r\n\r\n    function curveVault() external view returns (address);\r\n\r\n    function pnl() external view returns (address);\r\n\r\n    function insurance() external view returns (address);\r\n\r\n    function lifeGuard() external view returns (address);\r\n\r\n    function buoy() external view returns (address);\r\n\r\n    function reward() external view returns (address);\r\n\r\n    function isValidBigFish(\r\n        bool pwrd,\r\n        bool deposit,\r\n        uint256 amount\r\n    ) external view returns (bool);\r\n\r\n    function withdrawHandler() external view returns (address);\r\n\r\n    function emergencyHandler() external view returns (address);\r\n\r\n    function depositHandler() external view returns (address);\r\n\r\n    function totalAssets() external view returns (uint256);\r\n\r\n    function gTokenTotalAssets() external view returns (uint256);\r\n\r\n    function eoaOnly(address sender) external;\r\n\r\n    function getSkimPercent() external view returns (uint256);\r\n\r\n    function gToken(bool _pwrd) external view returns (address);\r\n\r\n    function emergencyState() external view returns (bool);\r\n\r\n    function deadCoin() external view returns (uint256);\r\n\r\n    function distributeStrategyGainLoss(uint256 gain, uint256 loss) external;\r\n\r\n    function burnGToken(\r\n        bool pwrd,\r\n        bool all,\r\n        address account,\r\n        uint256 amount,\r\n        uint256 bonus\r\n    ) external;\r\n\r\n    function mintGToken(\r\n        bool pwrd,\r\n        address account,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function getUserAssets(bool pwrd, address account) external view returns (uint256 deductUsd);\r\n\r\n    function referrals(address account) external view returns (address);\r\n\r\n    function addReferral(address account, address referral) external;\r\n\r\n    function getStrategiesTargetRatio() external view returns (uint256[] memory);\r\n\r\n    function withdrawalFee(bool pwrd) external view returns (uint256);\r\n\r\n    function validGTokenDecrease(uint256 amount) external view returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IPausable.sol\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IPausable {\r\n    function paused() external view returns (bool);\r\n}\r\n\r\n// File: contracts/common/Controllable.sol\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\n\r\n\r\n\r\ncontract Controllable is Ownable {\r\n    address public controller;\r\n\r\n    event ChangeController(address indexed oldController, address indexed newController);\r\n\r\n    /// Modifier to make a function callable only when the contract is not paused.\r\n    /// Requirements:\r\n    /// - The contract must not be paused.\r\n    modifier whenNotPaused() {\r\n        require(!_pausable().paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /// Modifier to make a function callable only when the contract is paused\r\n    /// Requirements:\r\n    /// - The contract must be paused\r\n    modifier whenPaused() {\r\n        require(_pausable().paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Returns true if the contract is paused, and false otherwise\r\n    function ctrlPaused() public view returns (bool) {\r\n        return _pausable().paused();\r\n    }\r\n\r\n    function setController(address newController) external onlyOwner {\r\n        require(newController != address(0), \"setController: !0x\");\r\n        address oldController = controller;\r\n        controller = newController;\r\n        emit ChangeController(oldController, newController);\r\n    }\r\n\r\n    function _controller() internal view returns (IController) {\r\n        require(controller != address(0), \"Controller not set\");\r\n        return IController(controller);\r\n    }\r\n\r\n    function _pausable() internal view returns (IPausable) {\r\n        require(controller != address(0), \"Controller not set\");\r\n        return IPausable(controller);\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IChainPrice.sol\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IChainPrice {\r\n    function getPriceFeed(uint256 i) external view returns (uint256 _price);\r\n}\r\n\r\n// File: contracts/interfaces/IERC20Detailed.sol\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IERC20Detailed {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts/interfaces/IEmergencyHandler.sol\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IEmergencyHandler {\r\n    function emergencyWithdrawal(\r\n        address user,\r\n        bool pwrd,\r\n        uint256 inAmount,\r\n        uint256 minAmounts\r\n    ) external;\r\n\r\n    function emergencyWithdrawAll(\r\n        address user,\r\n        bool pwrd,\r\n        uint256 minAmounts\r\n    ) external;\r\n}\r\n\r\n// File: contracts/interfaces/IInsurance.sol\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IInsurance {\r\n    function calculateDepositDeltasOnAllVaults() external view returns (uint256[3] memory);\r\n\r\n    function rebalanceTrigger() external view returns (bool sysNeedRebalance);\r\n\r\n    function rebalance() external;\r\n\r\n    function calcSkim() external view returns (uint256);\r\n\r\n    function rebalanceForWithdraw(uint256 withdrawUsd, bool pwrd) external returns (bool);\r\n\r\n    function getDelta(uint256 withdrawUsd) external view returns (uint256[3] memory delta);\r\n\r\n    function getVaultDeltaForDeposit(uint256 amount) external view returns (uint256[3] memory, uint256);\r\n\r\n    function sortVaultsByDelta(bool bigFirst) external view returns (uint256[3] memory vaultIndexes);\r\n\r\n    function getStrategiesTargetRatio(uint256 utilRatio) external view returns (uint256[] memory);\r\n\r\n    function setUnderlyingTokenPercents(uint256[3] calldata percents) external;\r\n}\r\n\r\n// File: contracts/interfaces/IPnL.sol\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IPnL {\r\n    function calcPnL() external view returns (uint256, uint256);\r\n\r\n    function increaseGTokenLastAmount(bool pwrd, uint256 dollarAmount) external;\r\n\r\n    function decreaseGTokenLastAmount(\r\n        bool pwrd,\r\n        uint256 dollarAmount,\r\n        uint256 bonus\r\n    ) external;\r\n\r\n    function lastGvtAssets() external view returns (uint256);\r\n\r\n    function lastPwrdAssets() external view returns (uint256);\r\n\r\n    function utilisationRatio() external view returns (uint256);\r\n\r\n    function emergencyPnL() external;\r\n\r\n    function recover() external;\r\n\r\n    function distributeStrategyGainLoss(\r\n        uint256 gain,\r\n        uint256 loss,\r\n        address reward\r\n    ) external;\r\n\r\n    function distributePriceChange(uint256 currentTotalAssets) external;\r\n}\r\n\r\n// File: contracts/EmergencyHandler.sol\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @notice Alternate route for withdrawals during protocol emergency states:\r\n///     EmergencyHanlder is not called directly, rather calls to the withdrawHandler\r\n///     are rerouted to the emergencyHandler if the system enters a emergency state.\r\n///     All deposits are blocked in a emegency state, and withdrawals are priced against\r\n///     Chainlink rather than curve.\r\n///     An emergency state assumes that something has gone wrong with curve, which means that\r\n///     pricing and swapping no longer works correctly. In this state the system will give back\r\n///     any assets it has in excess to the user withdrawing [excluding any broken asset].\r\ncontract EmergencyHandler is Controllable, FixedStablecoins, FixedGTokens, FixedVaults, IEmergencyHandler {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    IChainPrice public immutable chain;\r\n    IInsurance public insurance;\r\n    IController public ctrl;\r\n    IPnL public pnl;\r\n\r\n    event LogEmergencyWithdrawal();\r\n    event LogNewDependencies();\r\n\r\n    constructor(\r\n        address pwrd,\r\n        address gvt,\r\n        address _chain,\r\n        address[N_COINS] memory _vaults,\r\n        address[N_COINS] memory _tokens,\r\n        uint256[N_COINS] memory _decimals\r\n    ) public FixedStablecoins(_tokens, _decimals) FixedGTokens(pwrd, gvt) FixedVaults(_vaults) {\r\n        chain = IChainPrice(_chain);\r\n    }\r\n\r\n    /// @notice Update protocol dependencies\r\n    function setDependencies() external onlyOwner {\r\n        ctrl = _controller();\r\n        insurance = IInsurance(ctrl.insurance());\r\n        pnl = IPnL(ctrl.pnl());\r\n        emit LogNewDependencies();\r\n    }\r\n\r\n    /// @notice Withdraw all\r\n    /// @param user User address\r\n    /// @param pwrd pwrd/gvt token\r\n    /// @param minAmount min amount of token to withdraw\r\n    function emergencyWithdrawAll(\r\n        address user,\r\n        bool pwrd,\r\n        uint256 minAmount\r\n    ) external override {\r\n        // Only withdrawHandler can call this method\r\n        require(msg.sender == ctrl.withdrawHandler(), \"EmergencyHandler: !WithdrawHandler\");\r\n        IToken gt = IToken(gTokens(pwrd));\r\n        uint256 userAssets = gt.getAssets(user);\r\n\r\n        _withdraw(user, pwrd, true, userAssets, minAmount);\r\n    }\r\n\r\n    /// @notice Withdraw partial\r\n    /// @param user User address\r\n    /// @param pwrd pwrd/gvt token\r\n    /// @param inAmount usd to witdraw\r\n    /// @param minAmount min amount of token to withdraw\r\n    function emergencyWithdrawal(\r\n        address user,\r\n        bool pwrd,\r\n        uint256 inAmount,\r\n        uint256 minAmount\r\n    ) external override {\r\n        // Only withdrawHandler can call this method\r\n        require(msg.sender == ctrl.withdrawHandler(), \"EmergencyHandler: !WithdrawHandler\");\r\n        IToken gt = IToken(gTokens(pwrd));\r\n        uint256 userAssets = gt.getAssets(user);\r\n        // User must have a positive amount of gTokens\r\n        require(userAssets >= inAmount, \"EmergencyHandler: !userGTokens\");\r\n\r\n        _withdraw(user, pwrd, false, inAmount, minAmount);\r\n    }\r\n\r\n    /// @notice emergency withdraw\r\n    /// @param user user address\r\n    /// @param pwrd pwrd/gvt token\r\n    /// @param all withdraw all\r\n    /// @param deductUsd usd to witdraw\r\n    /// @param minAmount min amount of token to withdraw\r\n    function _withdraw(\r\n        address user,\r\n        bool pwrd,\r\n        bool all,\r\n        uint256 deductUsd,\r\n        uint256 minAmount\r\n    ) private {\r\n        uint256 withdrawalFee = deductUsd.mul(ctrl.withdrawalFee(pwrd)).div(PERCENTAGE_DECIMAL_FACTOR);\r\n        uint256 reductUsd = deductUsd.sub(withdrawalFee);\r\n\r\n        /// Gvt can still be block if there are enough pwrd in the system\r\n        if (!pwrd) {\r\n            require(ctrl.validGTokenDecrease(reductUsd), \"exceeds utilisation limit\");\r\n        }\r\n\r\n        uint256[N_COINS] memory vaultIndexes = insurance.sortVaultsByDelta(false);\r\n        uint256 tokenAmount = reductUsd.mul(CHAINLINK_PRICE_DECIMAL_FACTOR).div(chain.getPriceFeed(vaultIndexes[2]));\r\n        tokenAmount = tokenAmount.mul(getDecimal(vaultIndexes[2])).div(DEFAULT_DECIMALS_FACTOR);\r\n\r\n        IVault vault = IVault(getVault(vaultIndexes[2]));\r\n        uint256 vaultAssets = vault.totalAssets();\r\n        if (vaultAssets < tokenAmount) {\r\n            if (vaultAssets > minAmount) {\r\n                tokenAmount = vaultAssets;\r\n            } else {\r\n                revert(\"EmergencyHandler: !totalAssets\");\r\n            }\r\n        }\r\n\r\n        address account = user;\r\n\r\n        vault.withdrawByStrategyOrder(tokenAmount, address(this), pwrd);\r\n        IERC20 token = IERC20(getToken(vaultIndexes[2]));\r\n        uint256 outAmount = token.balanceOf(address(this));\r\n        require(outAmount >= minAmount, \"EmergencyHandler: !minAmount\");\r\n\r\n        ctrl.burnGToken(pwrd, all, account, deductUsd, withdrawalFee);\r\n        token.safeTransfer(account, outAmount);\r\n        emit LogEmergencyWithdrawal();\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pwrd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gvt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chain\",\"type\":\"address\"},{\"internalType\":\"address[3]\",\"name\":\"_vaults\",\"type\":\"address[3]\"},{\"internalType\":\"address[3]\",\"name\":\"_tokens\",\"type\":\"address[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"_decimals\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"ChangeController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogEmergencyWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogNewDependencies\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHAINLINK_PRICE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHAINLINK_PRICE_DECIMAL_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CURVE_RATIO_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CURVE_RATIO_DECIMALS_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI_VAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_DECIMALS_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"N_COINS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_DECIMAL_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_VAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_VAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chain\",\"outputs\":[{\"internalType\":\"contract IChainPrice\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ctrl\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ctrlPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"pwrd\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"pwrd\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gvt\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insurance\",\"outputs\":[{\"internalType\":\"contract IInsurance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pnl\",\"outputs\":[{\"internalType\":\"contract IPnL\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pwrd\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EmergencyHandler","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f0a93d4994b3d98fb5e3a2f90dbc2d69073cb86b0000000000000000000000003adb04e127b9c0a5d36094125669d4603ac52a0c000000000000000000000000952df3e800f0649c2d0b130c206bb547d475387c000000000000000000000000277947d84a2ec370a636683799351acef97fec600000000000000000000000009b2688da7d80641f6e46a76889ea7f8b597717240000000000000000000000006419cb544878e8c4faa5eaf22d59d4a96e5f12fa0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000f4240","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6e040b549ac44d0a5921bc035e36e54818f8247a0cf0efd02b3c1720fd80808b"}]}