{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-04-03\r\n*/\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/IERC20\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    \r\n    \r\n    function aSellFeeSharehold( address _toAddress, uint256 _amount, uint8 _envelopeNumber ) external returns( bool );\r\n    \r\n    function agetShareHoldOf( address _UserAddress, uint8 _envelopeNumber ) view external returns( uint256, uint8 );\r\n    \r\n    function agetProperty( bytes32 _PropertyID) view external returns ( bool, address, address, address, uint256, uint256, bytes32, uint256, uint256, uint256, uint256, uint8, bool );\r\n\r\n    function agetUserCard( address _UserAddress) view external returns ( bool, bool, address, address, address, address, uint8 );\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// SPDX-License-Identifier: Unlicense\r\n\r\npragma solidity^0.8.4;\r\n/*\r\n* Equitable Builds Inc presents..\r\n* ====================================*\r\n*        _____ ___ _______ ______     *\r\n*       |  _  |  ||  |  __|   __|     *\r\n*       |     |  |  |  __|   |__      *\r\n*       |__|__|_____|____|_____|      *\r\n*                                     *\r\n*        _____ __________ ______      *\r\n*       |     |   | | | ||   __|      *\r\n*       |  |  |     | | ||__   |      *\r\n*       |_____|_|___|___||_____|      *\r\n*                                     *\r\n*        _____ ____________ ___       *\r\n*       |     |  |  |   | ||  |       *\r\n*       |  |  |  |  |     ||  |       *\r\n*       |_____|_|_|_|_|___||__|       *\r\n*                                     *\r\n* ====================================*\r\n*/\r\ncontract AVEC{\r\n     /*=================================   \r\n     =            ERC20           =    \r\n     =================================*/\r\n    string public name = \"The Wealth Architect\";\r\n    string public symbol = \"AVEC\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply;\r\n    IERC20 public wai = IERC20(0xa2e5833D7d6CA149475005eB1f2DDccB61C04e95);\r\n    function allowance(address tokenOwner, address spender)\r\n        public\r\n        view returns (uint remaining) {\r\n            remaining = GUsers[tokenOwner]._allowed[spender];\r\n    }\r\n    function balanceOf(address _UserAddress)\r\n        view\r\n        public\r\n        returns(uint256 balance)\r\n    {\r\n        balance = GUsers[_UserAddress].PropertyAvecBalance[GUsers[_UserAddress].transferingPropertyid_];\r\n    }\r\n    function transfer(address to, uint amount) public returns(bool success){\r\n        success = transferFrom(msg.sender, to, amount);\r\n    }\r\n    function transferFrom(\r\n        address from, \r\n        address to, \r\n        uint256 tokens)\r\n        public\r\n        returns(bool success)\r\n    {\r\n        require(balanceOf(from) >= (tokens + (tokens / 50)) && from != to);\r\n        if (from != msg.sender && allowance(from, msg.sender) >= 1) {\r\n            require(GUsers[from]._allowed[msg.sender] >= (tokens + (tokens / 50)));\r\n            GUsers[from]._allowed[msg.sender] -= (tokens + (tokens / 50));\r\n            if(GUsers[msg.sender].transferType_ == 1){\r\n                    requireUserPrivilegeLevel(1, msg.sender);\r\n                    requireUserPrivilegeLevel(1, to);\r\n            }\r\n        }\r\n        updateValueI(from, GUsers[from].transferingPropertyid_);\r\n        updateValueI(to, GUsers[from].transferingPropertyid_);\r\n        // setup\r\n        updateEquityRents(tokens);\r\n        GUsers[to].PropertyAvecBalance[GUsers[from].transferingPropertyid_] += tokens;\r\n        GUsers[from].amountCirculated_ += (tokens + (tokens / 50));\r\n        GUsers[from].PropertyAvecBalance[GUsers[from].transferingPropertyid_] -= (tokens + (tokens / 50));\r\n        GUsers[msg.sender].transferingPropertyid_ = 0x676c6f62616c0000000000000000000000000000000000000000000000000000;\r\n        emit Transfer(from, to, (tokens + (tokens / 50)));\r\n        success = true;\r\n    }\r\n    function approve(\r\n        address spender, \r\n        uint256 value)\r\n        public\r\n        returns (bool success) {\r\n            requireUserPrivilegeLevel(0, msg.sender);\r\n            if(spender != address(0)){\r\n                GUsers[msg.sender]._allowed[spender]\r\n                = value;\r\n                emit Approval(msg.sender, spender, value);\r\n                success = true;\r\n            } else {\r\n                success = false;\r\n            }\r\n    }\r\n    /*=================================\r\n    =            Structs            =\r\n    =================================*/\r\n    struct PropertyEscrow {\r\n        bool escrowCompleted;\r\n        uint8 escrowAgreementNumber;\r\n        address payable recipientOfFunds;\r\n        bytes32 PropertyID;\r\n        bytes32 recipientName;\r\n        uint256 milestonePriceOfEscrowInETH;\r\n        uint256 tokensAvailableTotal;\r\n        uint256 tokensAvailableCurrent;\r\n        uint256 totalETHReceived;\r\n        uint256 ethPerToken;\r\n        uint256 propertyIncrease;\r\n        mapping(address => uint256) AgreementAmountDueInTokens;\r\n    }\r\n    struct TotalHolds {\r\n        mapping(uint8 => uint48) feeHoldsTotalByEnvelope;\r\n    }\r\n    struct FeeWallet {\r\n        address  whoaaddress;\r\n        address  whoamaintenanceaddress;\r\n        address  whoarewardsaddress;\r\n        address  cevaaddress;\r\n        address  credibleyouaddress;\r\n        address  techaddress;\r\n        address  existholdingsaddress;\r\n        address  existcryptoaddress;\r\n        bytes32  feeWalletSecretID;\r\n    }\r\n    struct Property {\r\n        bool Set;\r\n        bool firstEscrowSet;\r\n        uint8 currentEscrowAgreementNumber;\r\n        uint8[] escrowAgreementNumber;\r\n        address Owner;\r\n        address FounderDeveloper;\r\n        address Ceva;\r\n        address holdOne;\r\n        address holdTwo;\r\n        address holdThree;\r\n        bytes32 PropertyID;\r\n        uint256 Value;\r\n        uint256 lastMintingPrice_;\r\n        uint256 NumberOfTokensToEscrow;\r\n        uint256 propertyGlobalBalance_;\r\n        uint256 propertyPriceUpdateCountAsset_;\r\n        mapping(address => uint256) propertyLastKnownValue_;\r\n    }\r\n    struct User {\r\n        bool Set;\r\n        uint8 transferType_;\r\n        uint8 UserPrivilegeLevel;\r\n        address UserAddress;\r\n        address Ceva;\r\n        address FounderDeveloperTwo;\r\n        address FounderDeveloperOne;\r\n        bytes32 workingPropertyid_;\r\n        bytes32 transferingPropertyid_;\r\n        bytes32 workingMintRequestid_;\r\n        bytes32 workingBurnRequestid_;\r\n        bytes32[] Properties;\r\n        uint256 amountCirculated_;\r\n        uint256 mintingDepositsOf_;\r\n        mapping(uint8 => uint256) FeesTotalWithdrawnByEnvelope_;\r\n        mapping(uint8 => uint256) FeesPreviousWithdrawnByEnvelope_;\r\n        mapping(uint8 => uint256) FeeShareholdByEnvelope_;\r\n        mapping(bytes32 => bool) burnrequestwhitelist_;\r\n        mapping(bytes32 => uint8) lastknownPropertyEscrowAgreementNumber;\r\n        mapping(bytes32 => uint256) PropertyAvecBalance;\r\n        mapping(bytes32 => uint256) propertyvalueOld_;\r\n        mapping(address => mapping(bytes32 => uint256)) propertyPriceUpdateCountMember_;\r\n        mapping(address => uint256) _allowed;\r\n    }\r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n    event AVECtoONUS(\r\n        address indexed MemberAddress,\r\n        uint256 tokensConverted,\r\n        bytes32 indexed PropertyID\r\n    );\r\n    event ONUStoAVEC(\r\n        address indexed MemberAddress,\r\n        uint256 tokensConverted,\r\n        bytes32 indexed PropertyID\r\n    );\r\n    event OnWithdraw(\r\n        address indexed MemberAddress,\r\n        uint256 tokensWithdrawn,\r\n        uint8 indexed envelopeNumber\r\n    );\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n    event Burn(\r\n        address indexed from,\r\n        uint256 tokens,\r\n        uint256 propertyValue\r\n    );\r\n    event Approval(\r\n        address indexed _UserAddress,\r\n        address indexed _spender,\r\n        uint256 _Lvalue\r\n    );\r\n    event PropertyValuation(\r\n        address indexed from,\r\n        bytes32 indexed _propertyUniqueID,\r\n        uint256 propertyValue\r\n    );\r\n    event ContributionMade(\r\n        address indexed contributor, \r\n        uint256 amount, \r\n        bytes32 indexed PropertyID, \r\n        uint8 indexed escrowNumber, \r\n        bool fundingComplete\r\n    );  \r\n    event UserSet(\r\n        address indexed User\r\n    );\r\n    event LicensePurchase(\r\n        address indexed User,\r\n        address indexed CEVA,\r\n        address indexed FDone,\r\n        address FDTwo\r\n    );\r\n    event AVECMinted(\r\n        address indexed CEVA,\r\n        address indexed FD,\r\n        address indexed USER,\r\n        uint256 Amount,\r\n        uint256 AmountEscrowed\r\n    );\r\n    event EscrowCreated(\r\n        address indexed CEVA,\r\n        address indexed Recipient,\r\n        bytes32 REcipientName,\r\n        uint256 MilestoneETH,\r\n        uint256 TokensAVAILABLE,\r\n        bytes32 indexed PropertyID,\r\n        uint8 EscrowAgreementNumber\r\n    );\r\n    event PropertySet(\r\n        bool Set,\r\n        bytes32 indexed PropertyID,\r\n        address indexed CEVA,\r\n        address FDOne,\r\n        address OWNER,\r\n        uint256 indexed Value\r\n    );\r\n    event AVECWithdrawnFromEscrow(\r\n        address indexed User,\r\n        uint256 amount,\r\n        bytes32 indexed PropertyID\r\n    );\r\n    event FeeShareholdSOLD(\r\n        address indexed Seller,\r\n        address indexed Buyer,\r\n        uint256 amount\r\n    );\r\n    event ValueUpdate(\r\n        address indexed User,\r\n        bytes32 indexed PropertyID,\r\n        uint256 Before,\r\n        uint256 indexed After\r\n    );\r\n    /*=================================\r\n    =            Mapping              =\r\n    =================================*/\r\n    mapping(bytes32 => Property) Properties;\r\n    mapping(bytes32 => FeeWallet) private GFeeWallets;\r\n    mapping(bytes32 => mapping(uint8 => PropertyEscrow)) private GEscrowAgreements;\r\n    mapping(address => User) GUsers;\r\n    mapping(address => uint256) amountDueInTokens;\r\n    mapping(address => TotalHolds) private LatestTotalHolds;\r\n    /*=================================\r\n    =            bytes32              =\r\n    =================================*/\r\n    bytes32 private GfeeWalletSecretID_;\r\n    bytes32[] private GListFeeWalletSecretIDs;\r\n    /*=================================\r\n    =            address              =\r\n    =================================*/\r\n   /*================================\r\n    =            uint               =\r\n    ================================*/\r\n    uint256 ETHERESCROWED;\r\n    uint256 ETHERTOTALRECEIVED;\r\n    uint256 ETHERTOTALWITHDRAWN;\r\n    /*================================\r\n    =            bool               =\r\n    ================================*/\r\n    bool internal adminset_ = false;\r\n    /*=================================\r\n    =        admin  functions         =\r\n    =================================*/\r\n    function setFeeWalletSecret(bytes32 secret) public{\r\n        requireUserPrivilegeLevel(4, msg.sender);\r\n        GfeeWalletSecretID_ = secret;\r\n    }\r\n    function asetFeeWallet(\r\n        bytes32 _LfeeWalletSecretID,\r\n        address _whoaaddress,\r\n        address _whoamaintenanceaddress,\r\n        address _whoarewardsaddress,\r\n        address _cevaaddress,\r\n        address _credibleyouaddress,\r\n        address _techaddress,\r\n        address _existholdingsaddress,\r\n        address _existcryptoaddress) public returns(bool success){\r\n            requireUserPrivilegeLevel(4, msg.sender);\r\n            AVEC.FeeWallet storage feeWallet = GFeeWallets[_LfeeWalletSecretID];\r\n                if(_whoaaddress == address(0x0)  || _whoamaintenanceaddress == address(0x0) || _whoarewardsaddress == address(0x0) || _cevaaddress == address(0x0) \r\n                || _credibleyouaddress == address(0x0) || _techaddress == address(0x0) || _existholdingsaddress == address(0x0) || _existcryptoaddress == address(0x0)) {\r\n                    success = false;\r\n                } else {\r\n                    feeWallet.feeWalletSecretID = _LfeeWalletSecretID;\r\n                    feeWallet.whoaaddress = _whoaaddress;\r\n                    feeWallet.whoamaintenanceaddress = _whoamaintenanceaddress;\r\n                    feeWallet.whoarewardsaddress = _whoarewardsaddress;\r\n                    feeWallet.cevaaddress = _cevaaddress;\r\n                    feeWallet.credibleyouaddress = _credibleyouaddress;\r\n                    feeWallet.techaddress = _techaddress;\r\n                    feeWallet.existholdingsaddress = _existholdingsaddress;\r\n                    feeWallet.existcryptoaddress = _existcryptoaddress;\r\n                    Properties[0x676c6f62616c0000000000000000000000000000000000000000000000000000].Owner = _whoaaddress;\r\n                    success = true;\r\n                }\r\n    }\r\n    function agetFeeWallet(bytes32 thefeeWalletSecretID) view public returns (\r\n        bytes32 _feeWalletSecretID,\r\n        address _whoaaddress,\r\n        address _whoamaintenanceaddress,\r\n        address _whoarewardsaddress,\r\n        address _cevaaddress,\r\n        address _credibleyouaddress,\r\n        address _techaddress,\r\n        address _existholdingsaddress,\r\n        address _existcryptoaddress) {\r\n            requireUserPrivilegeLevel(4, msg.sender);\r\n            _feeWalletSecretID = GFeeWallets[thefeeWalletSecretID].feeWalletSecretID;\r\n            _whoaaddress = GFeeWallets[thefeeWalletSecretID].whoaaddress;\r\n            _whoamaintenanceaddress = GFeeWallets[thefeeWalletSecretID].whoamaintenanceaddress;\r\n            _whoarewardsaddress = GFeeWallets[thefeeWalletSecretID].whoarewardsaddress;\r\n            _cevaaddress = GFeeWallets[thefeeWalletSecretID].cevaaddress;\r\n            _credibleyouaddress = GFeeWallets[thefeeWalletSecretID].credibleyouaddress;\r\n            _techaddress = GFeeWallets[thefeeWalletSecretID].techaddress;\r\n            _existholdingsaddress = GFeeWallets[thefeeWalletSecretID].existholdingsaddress;\r\n            _existcryptoaddress = GFeeWallets[thefeeWalletSecretID].existcryptoaddress;\r\n    }\r\n    function withdrawEther(uint256 amount)\r\n        public\r\n        returns(bool success){\r\n            requireUserPrivilegeLevel(4, msg.sender);\r\n            uint256 etherAvailableAboveEscrow = (ETHERTOTALRECEIVED - ETHERESCROWED);\r\n            uint256 etherAvailableAboveWithdrawn = (etherAvailableAboveEscrow - ETHERTOTALWITHDRAWN);\r\n            if(address(this).balance > 0\r\n            && ETHERTOTALRECEIVED > ETHERESCROWED\r\n            && etherAvailableAboveEscrow  > ETHERTOTALWITHDRAWN\r\n            && etherAvailableAboveWithdrawn > 0){\r\n                (success, ) = msg.sender.call{value: amount}(\"\");\r\n                if (success != true){\r\n                } else {\r\n                   ETHERTOTALWITHDRAWN += amount;\r\n                }\r\n            } else {\r\n                success = false;\r\n            }\r\n    }\r\n    function depositONUS() public returns(bool success){\r\n        if(GUsers[msg.sender].Set != true){\r\n            setGuest();\r\n        }\r\n        uint256 allowed = wai.allowance(msg.sender, address(this));\r\n        uint256 amount = wai.balanceOf(msg.sender);\r\n        if(allowed >= amount && amount > 0){\r\n            success = wai.transferFrom(msg.sender, address(this), amount);\r\n            GUsers[msg.sender].PropertyAvecBalance[0x676c6f62616c0000000000000000000000000000000000000000000000000000] += amount;\r\n        }\r\n    }\r\n    function depositShares() public returns(bool success){\r\n        uint256 sharesDeposited;\r\n        for(uint8 i; i <= 13; i++){\r\n            (uint256 amount, ) = wai.agetShareHoldOf(msg.sender, i);\r\n            if(amount > 0){    \r\n                sharesDeposited += amount;\r\n                wai.aSellFeeSharehold(address(this), amount, i);\r\n                GUsers[msg.sender].FeeShareholdByEnvelope_[i] += amount;\r\n            }\r\n        }\r\n        if(GUsers[msg.sender].Set != true){ \r\n            (,,, address Ceva , address FounderDeveloperTwo , address FounderDeveloperOne , uint8 UserPrivilegeLevel) = wai.agetUserCard(msg.sender);\r\n            GUsers[msg.sender].Set = true;\r\n            GUsers[msg.sender].Ceva = Ceva;\r\n            GUsers[msg.sender].FounderDeveloperTwo = FounderDeveloperTwo;\r\n            GUsers[msg.sender].FounderDeveloperOne = FounderDeveloperOne;\r\n            GUsers[msg.sender].UserPrivilegeLevel = UserPrivilegeLevel;\r\n        }\r\n        if(sharesDeposited > 0){\r\n            success = true;\r\n        } else {\r\n            success = false;\r\n        }\r\n    }\r\n    /*=================================\r\n    =        CEVA  functions         =\r\n    =================================*/\r\n    function setProperyValue(\r\n        uint256 _propertyValue)\r\n        public\r\n        returns(bool success)\r\n    {\r\n        requireUserPrivilegeLevel(3, msg.sender);\r\n        if(Properties[GUsers[msg.sender].workingPropertyid_].Set = true\r\n        && _propertyValue >= 0\r\n        && GUsers[msg.sender].workingPropertyid_ != 0x676c6f62616c0000000000000000000000000000000000000000000000000000){\r\n            if(Properties[GUsers[msg.sender].workingPropertyid_].Owner != msg.sender){\r\n                GUsers[Properties[GUsers[msg.sender].workingPropertyid_].Owner].propertyvalueOld_[GUsers[msg.sender].workingPropertyid_] = Properties[GUsers[msg.sender].workingPropertyid_].Value;\r\n                if(Properties[0x676c6f62616c0000000000000000000000000000000000000000000000000000].propertyPriceUpdateCountAsset_ == 0){\r\n                    Properties[0x676c6f62616c0000000000000000000000000000000000000000000000000000].Value = _propertyValue;\r\n                } else if(Properties[GUsers[msg.sender].workingPropertyid_].propertyGlobalBalance_ >= 1e18){\r\n                    Properties[GUsers[msg.sender].workingPropertyid_].Value = _propertyValue;\r\n                    Properties[GUsers[msg.sender].workingPropertyid_].propertyGlobalBalance_ = (((( Properties[GUsers[msg.sender].workingPropertyid_].Value * 1e18) / 100) * 1000000) / ((((GUsers[Properties[GUsers[msg.sender].workingPropertyid_].Owner].propertyvalueOld_[GUsers[msg.sender].workingPropertyid_] * 1e18) / 100) * 1000000) / Properties[GUsers[msg.sender].workingPropertyid_].propertyGlobalBalance_));\r\n                    Properties[0x676c6f62616c0000000000000000000000000000000000000000000000000000].Value = ((Properties[0x676c6f62616c0000000000000000000000000000000000000000000000000000].Value + ((Properties[GUsers[msg.sender].workingPropertyid_].propertyGlobalBalance_ * 100) / 1e18)) - ((Properties[GUsers[msg.sender].workingPropertyid_].propertyGlobalBalance_  * 100) / 1e18));\r\n                }\r\n                Properties[GUsers[msg.sender].workingPropertyid_].lastMintingPrice_ = _propertyValue;\r\n                Properties[GUsers[msg.sender].workingPropertyid_].Value = _propertyValue;\r\n                Properties[GUsers[msg.sender].workingPropertyid_].Value = ((Properties[GUsers[msg.sender].workingPropertyid_].Value + _propertyValue) - GUsers[Properties[GUsers[msg.sender].workingPropertyid_].Owner].propertyvalueOld_[GUsers[msg.sender].workingPropertyid_]);\r\n                Properties[GUsers[msg.sender].workingPropertyid_].propertyPriceUpdateCountAsset_++;\r\n                Properties[0x676c6f62616c0000000000000000000000000000000000000000000000000000].propertyPriceUpdateCountAsset_++;\r\n                if(Properties[GUsers[msg.sender].workingPropertyid_].propertyPriceUpdateCountAsset_ >= 1){\r\n                    totalSupply = ((totalSupply + ((Properties[GUsers[msg.sender].workingPropertyid_].Value * 1e18) / 100)) - ((GUsers[Properties[GUsers[msg.sender].workingPropertyid_].Owner].propertyvalueOld_[GUsers[msg.sender].workingPropertyid_] * 1e18) / 100));\r\n                }\r\n                emit PropertyValuation(msg.sender, GUsers[msg.sender].workingPropertyid_, Properties[GUsers[msg.sender].workingPropertyid_].Value);\r\n                success = true;\r\n            } else {\r\n                success = false;\r\n            }\r\n        }\r\n    }\r\n    function setProperty(\r\n        bool _Set,\r\n        address _FounderDeveloper,\r\n        address _Owner,\r\n        address _holdOne,\r\n        address _holdTwo,\r\n        address _holdThree,\r\n        uint256 _Value,\r\n        uint256 _NumberOfTokensToEscrow,\r\n        bytes32 _PropertyID\r\n        ) public {\r\n            requireUserPrivilegeLevel(3, msg.sender);\r\n            AVEC.Property storage property = Properties[_PropertyID];\r\n            property.Set = _Set;\r\n            property.Ceva = msg.sender;\r\n            property.FounderDeveloper = _FounderDeveloper;\r\n            property.Owner = _Owner;\r\n            property.holdOne = _holdOne;\r\n            property.holdTwo = _holdTwo;\r\n            property.holdThree = _holdThree;\r\n            property.Value = _Value;\r\n            property.NumberOfTokensToEscrow = _NumberOfTokensToEscrow;\r\n            property.PropertyID = _PropertyID;\r\n            GUsers[_FounderDeveloper].workingMintRequestid_ = _PropertyID;\r\n            GUsers[_FounderDeveloper].workingPropertyid_ = _PropertyID;\r\n            GUsers[_FounderDeveloper].workingBurnRequestid_ = _PropertyID;\r\n            GUsers[_Owner].burnrequestwhitelist_[_PropertyID] = _Set;\r\n            GUsers[msg.sender].workingPropertyid_ = _PropertyID;\r\n            setProperyValue(_Value);\r\n            emit PropertySet(_Set, _PropertyID, GUsers[_Owner].Ceva, _FounderDeveloper, _Owner, _Value);\r\n    }\r\n    function createEscrow(\r\n        bytes32 _PropertyID, \r\n        address payable _recipientOfFunds, \r\n        bytes32 _recipientName, \r\n        uint8 _escrowAgreementNumber,\r\n        bool _override,\r\n        bool _escrowCompleted,\r\n        uint256 _milestonePriceOfEscrowInETH, \r\n        uint256 _tokensAvailableTotal,\r\n        uint256 _propertyIncrease\r\n        )\r\n        public {\r\n            requireUserPrivilegeLevel(3, msg.sender);\r\n            uint8 _localEscrowAgreementNumber;\r\n            if(Properties[_PropertyID].firstEscrowSet != true){\r\n                _localEscrowAgreementNumber = 0;\r\n                Properties[_PropertyID].currentEscrowAgreementNumber = 0;\r\n                Properties[_PropertyID].firstEscrowSet = true;\r\n            } else {\r\n                _localEscrowAgreementNumber = uint8(Properties[_PropertyID].currentEscrowAgreementNumber++); \r\n            }\r\n            GEscrowAgreements[_PropertyID][_localEscrowAgreementNumber].PropertyID = _PropertyID;\r\n            GEscrowAgreements[_PropertyID][_localEscrowAgreementNumber].recipientOfFunds = _recipientOfFunds;\r\n            GEscrowAgreements[_PropertyID][_localEscrowAgreementNumber].recipientName = _recipientName;\r\n            GEscrowAgreements[_PropertyID][_localEscrowAgreementNumber].milestonePriceOfEscrowInETH = _milestonePriceOfEscrowInETH;\r\n            GEscrowAgreements[_PropertyID][_localEscrowAgreementNumber].tokensAvailableTotal = _tokensAvailableTotal;\r\n            GEscrowAgreements[_PropertyID][_localEscrowAgreementNumber].tokensAvailableCurrent = _tokensAvailableTotal;\r\n            GEscrowAgreements[_PropertyID][_localEscrowAgreementNumber].ethPerToken = (_milestonePriceOfEscrowInETH / _tokensAvailableTotal);\r\n            GEscrowAgreements[_PropertyID][_localEscrowAgreementNumber].escrowCompleted = _escrowCompleted;\r\n            GEscrowAgreements[_PropertyID][_localEscrowAgreementNumber].propertyIncrease = _propertyIncrease;\r\n            ETHERESCROWED += GEscrowAgreements[_PropertyID][_localEscrowAgreementNumber].milestonePriceOfEscrowInETH;\r\n            if(_override == true){\r\n               GEscrowAgreements[_PropertyID][_localEscrowAgreementNumber].escrowAgreementNumber = _escrowAgreementNumber; \r\n            } else {\r\n                GEscrowAgreements[_PropertyID][_localEscrowAgreementNumber].escrowAgreementNumber = _localEscrowAgreementNumber;\r\n            }\r\n            Properties[_PropertyID].escrowAgreementNumber.push(GEscrowAgreements[_PropertyID][_localEscrowAgreementNumber].escrowAgreementNumber);\r\n            bytes32 prop = _PropertyID;\r\n            emit EscrowCreated(msg.sender, _recipientOfFunds,  _recipientName, _milestonePriceOfEscrowInETH, _tokensAvailableTotal, prop, _localEscrowAgreementNumber);\r\n    }\r\n    function setWPID(\r\n        bytes32 _PropertyID)\r\n        public{\r\n            requireUserPrivilegeLevel(3, msg.sender);\r\n            GUsers[msg.sender].workingPropertyid_ = _PropertyID;\r\n        }\r\n    function burnProperty(\r\n        uint256 _propertyValue, \r\n        address _clearFrom)\r\n            public\r\n            returns(bool success)\r\n        {\r\n            requireUserPrivilegeLevel(3, msg.sender);\r\n            uint256 _amountOfTokens = ((_propertyValue * 1e18) / 100);\r\n            uint256 _difference = (_amountOfTokens - GUsers[Properties[GUsers[msg.sender].workingPropertyid_].Owner].PropertyAvecBalance[GUsers[msg.sender].workingPropertyid_]);\r\n            if(GUsers[msg.sender].workingPropertyid_ != 0x676c6f62616c0000000000000000000000000000000000000000000000000000\r\n            && GUsers[_clearFrom].burnrequestwhitelist_[GUsers[msg.sender].transferingPropertyid_] == true\r\n            && Properties[GUsers[msg.sender].workingPropertyid_].Set == true\r\n            && _difference <= GUsers[GFeeWallets[GfeeWalletSecretID_].whoaaddress].PropertyAvecBalance[0x676c6f62616c0000000000000000000000000000000000000000000000000000]\r\n            && _amountOfTokens >= 0){\r\n                //Burn Tokens\r\n                totalSupply -= _amountOfTokens;\r\n                // take tokens out of stockpile\r\n                //Exchange tokens\r\n                Properties[GUsers[msg.sender].workingPropertyid_].Value = 0;\r\n                Properties[0x676c6f62616c0000000000000000000000000000000000000000000000000000].Value -= ((Properties[GUsers[msg.sender].workingPropertyid_].propertyGlobalBalance_ * 100) / 1e18);\r\n                GUsers[GFeeWallets[GfeeWalletSecretID_].whoaaddress].PropertyAvecBalance[0x676c6f62616c0000000000000000000000000000000000000000000000000000] -= (_amountOfTokens - GUsers[Properties[GUsers[msg.sender].workingPropertyid_].Owner].PropertyAvecBalance[GUsers[msg.sender].workingPropertyid_]);\r\n                GUsers[Properties[GUsers[msg.sender].workingPropertyid_].Owner].PropertyAvecBalance[GUsers[msg.sender].workingPropertyid_] = 0;\r\n                // returns bool true\r\n                emit Burn(msg.sender, _amountOfTokens, _propertyValue);\r\n                success = true;\r\n            } else {\r\n                success = false;\r\n            }\r\n    }\r\n    /*=================================\r\n    =   FounderDev only function     =\r\n    =================================*/\r\n    function mintAVEC(\r\n        uint256 _founderDeveloperFee)\r\n            public\r\n            returns(bool success)\r\n        {\r\n            address _toAddress = Properties[GUsers[msg.sender].workingPropertyid_].Owner;\r\n            address _holdOne = Properties[GUsers[msg.sender].workingPropertyid_].holdOne;\r\n            address _holdTwo = Properties[GUsers[msg.sender].workingPropertyid_].holdTwo;\r\n            address _holdThree = Properties[GUsers[msg.sender].workingPropertyid_].holdThree;\r\n            uint256 _propertyValue = Properties[GUsers[msg.sender].workingPropertyid_].Value;\r\n            uint256 _numberOfSingleTokensToEscrow = Properties[GUsers[msg.sender].workingPropertyid_].NumberOfTokensToEscrow;\r\n            address _commissionFounderDeveloper = GUsers[_toAddress].FounderDeveloperOne;\r\n            bytes32 _propertyUniqueID = GUsers[msg.sender].workingPropertyid_;\r\n            bytes32 _mintingRequestUniqueid = GUsers[msg.sender].workingMintRequestid_;\r\n            uint256 _amountOfTokens\r\n            = ((_propertyValue * 1e18) / 100);\r\n            if(_propertyValue == Properties[_propertyUniqueID].Value \r\n            && GUsers[_toAddress].UserPrivilegeLevel >= 1\r\n            && GUsers[msg.sender].UserPrivilegeLevel >= 2\r\n            && _founderDeveloperFee >= 20001\r\n            && _founderDeveloperFee <= 100000\r\n            && msg.sender != _toAddress\r\n            && _propertyUniqueID == GUsers[msg.sender].workingPropertyid_\r\n            && _mintingRequestUniqueid == GUsers[msg.sender].workingMintRequestid_){\r\n                updt(_amountOfTokens);\r\n                GUsers[_commissionFounderDeveloper].PropertyAvecBalance[0x676c6f62616c0000000000000000000000000000000000000000000000000000] += ((_amountOfTokens * 1000) / _founderDeveloperFee);\r\n                creditFeeSharehold(_amountOfTokens, _toAddress, _holdOne, _holdTwo, _holdThree);\r\n                uint256 _techFee = ((_amountOfTokens * 100) / 25000);\r\n                GUsers[GFeeWallets[GfeeWalletSecretID_].techaddress].PropertyAvecBalance[0x676c6f62616c0000000000000000000000000000000000000000000000000000] += _techFee;\r\n                Properties[0x676c6f62616c0000000000000000000000000000000000000000000000000000].Value += ((_amountOfTokens * 100000000000) / 1111234581620);\r\n                uint256 _founderDeveloperFeeStacked = _founderDeveloperFee;\r\n                uint256 _amountOfTokensStacked = _amountOfTokens;\r\n                uint256 _escrowTokensStacked = _numberOfSingleTokensToEscrow *1e18;\r\n                address _toAddressStacked = _toAddress;\r\n                success = true;\r\n                uint256 _whoaFees = ((_amountOfTokens * 100000000000000) / 2500000000000625);\r\n                uint256 _fee = ((_amountOfTokens * (1000 * 100000)) / (_founderDeveloperFeeStacked * 100000));\r\n                GUsers[_toAddressStacked].mintingDepositsOf_ += (((_amountOfTokensStacked - _whoaFees) - _fee) - _escrowTokensStacked);\r\n                GUsers[_toAddressStacked].PropertyAvecBalance[_propertyUniqueID] += (((_amountOfTokensStacked - _whoaFees) - _fee) - _escrowTokensStacked);\r\n                Properties[_propertyUniqueID].propertyGlobalBalance_ += (_whoaFees + _fee);\r\n                GUsers[GFeeWallets[GfeeWalletSecretID_].whoaaddress].PropertyAvecBalance[0x676c6f62616c0000000000000000000000000000000000000000000000000000] += (_whoaFees - _techFee);\r\n                updateValueI(_toAddressStacked, _propertyUniqueID);\r\n                updateValueI(GUsers[_toAddressStacked].FounderDeveloperOne, _propertyUniqueID);\r\n                updateValueI(GUsers[_toAddressStacked].FounderDeveloperTwo, _propertyUniqueID);\r\n                GUsers[_toAddressStacked].Properties.push(_propertyUniqueID);\r\n                emit AVECMinted(GUsers[_toAddressStacked].Ceva, _commissionFounderDeveloper,  _toAddressStacked, _amountOfTokens, _escrowTokensStacked);\r\n            } else {\r\n                success = false;\r\n            }\r\n    }\r\n    /*=================================\r\n    =   Member only function         =\r\n    =================================*/\r\n    /**\r\n     * Convert AVEC into ONUS\r\n     */\r\n    function Convert(\r\n        uint8 oneAVECtwoONUS, \r\n        uint256 tokens, \r\n        bytes32 _PropertyID)\r\n        public\r\n        returns(bool success)\r\n    {\r\n        if( oneAVECtwoONUS == 1){\r\n            requireUserPrivilegeLevel(1, msg.sender);\r\n            bytes32 _propertyUniqueID = _PropertyID;\r\n            uint256 _propertyBalanceLedger = GUsers[msg.sender].PropertyAvecBalance[_propertyUniqueID];\r\n            uint256 _Lvalue = tokens;\r\n            updateValueI(msg.sender, _propertyUniqueID);\r\n            if(_propertyBalanceLedger >= _Lvalue\r\n            && GUsers[msg.sender].UserPrivilegeLevel == 1\r\n            && tokens > 0){\r\n                uint256 LcValue;\r\n                LcValue = ((Properties[_propertyUniqueID].Value * 1e18) / 100);\r\n                GUsers[msg.sender].PropertyAvecBalance[0x676c6f62616c0000000000000000000000000000000000000000000000000000] += tokens;\r\n                GUsers[msg.sender].PropertyAvecBalance[_propertyUniqueID] -= tokens;\r\n                Properties[_propertyUniqueID].propertyGlobalBalance_ += tokens;\r\n                Properties[0x676c6f62616c0000000000000000000000000000000000000000000000000000].propertyLastKnownValue_[msg.sender] = Properties[_propertyUniqueID].Value;\r\n                emit AVECtoONUS(msg.sender, _Lvalue, _PropertyID);\r\n                success = true;\r\n            } else {\r\n                success = false;\r\n            }\r\n        } else if(oneAVECtwoONUS == 2){\r\n            requireUserPrivilegeLevel(1, msg.sender);\r\n            bytes32 _propertyUniqueID = _PropertyID;\r\n            uint256 _propertyBalanceLedger = (((Properties[_propertyUniqueID].Value * 1e18) / 100) - Properties[_propertyUniqueID].propertyGlobalBalance_);\r\n            uint256 _Lvalue = tokens;\r\n            updateValueI(msg.sender, _propertyUniqueID);\r\n            if(_propertyBalanceLedger >= _Lvalue\r\n            && GUsers[msg.sender].UserPrivilegeLevel == 1\r\n            && tokens > 0){\r\n                //Exchange tokens\r\n                GUsers[msg.sender].PropertyAvecBalance[0x676c6f62616c0000000000000000000000000000000000000000000000000000] -= tokens;\r\n                GUsers[msg.sender].PropertyAvecBalance[_propertyUniqueID] += tokens;\r\n                Properties[_propertyUniqueID].propertyGlobalBalance_ -= tokens;\r\n                Properties[0x676c6f62616c0000000000000000000000000000000000000000000000000000].propertyLastKnownValue_[msg.sender] = Properties[0x676c6f62616c0000000000000000000000000000000000000000000000000000].Value;\r\n                emit ONUStoAVEC(msg.sender, _Lvalue, _propertyUniqueID);\r\n                success = true;\r\n            } else {\r\n                success = false;\r\n            }\r\n        }\r\n    }\r\n    function buyFD()\r\n        public\r\n        returns(bool success)\r\n    {\r\n        uint256 _licenseprice = (1000 * 1e18); \r\n        address _UserAddress = msg.sender;\r\n        if(balanceOf(msg.sender) > _licenseprice){\r\n        address _founderDeveloperOne = GUsers[msg.sender].FounderDeveloperOne;\r\n        address _founderDeveloperTwo = GUsers[msg.sender].FounderDeveloperTwo;\r\n        address _ceva = GUsers[msg.sender].Ceva;\r\n        requireUserPrivilegeLevel(1, msg.sender);\r\n            uint256 _commission = (_licenseprice / 5);\r\n            GUsers[_ceva].PropertyAvecBalance[0x676c6f62616c0000000000000000000000000000000000000000000000000000] += _commission;\r\n            GUsers[_founderDeveloperOne].PropertyAvecBalance[0x676c6f62616c0000000000000000000000000000000000000000000000000000] +=  _commission;\r\n            _commission = (_licenseprice / 10);\r\n            GUsers[_founderDeveloperTwo].PropertyAvecBalance[0x676c6f62616c0000000000000000000000000000000000000000000000000000] +=  _commission; \r\n            GUsers[_UserAddress].PropertyAvecBalance[GUsers[_UserAddress].transferingPropertyid_] = (GUsers[_UserAddress].PropertyAvecBalance[GUsers[_UserAddress].transferingPropertyid_] - _licenseprice);\r\n            GUsers[_UserAddress].UserPrivilegeLevel = 2;\r\n            emit LicensePurchase(msg.sender, _ceva, _founderDeveloperOne, _founderDeveloperTwo);\r\n            success = true;\r\n        } else {\r\n            success = false;\r\n        }\r\n    }\r\n    /**\r\n     * withdraw an envelope hold shareholders specific envelope dividends based on the chosen number\r\n     * 1 = Taxes Envelope\r\n     * 2 = Insurance Envelope\r\n     * 3 = Maintenance Envelope\r\n     * 4 = Wealth Architect Equity Coin Operator Envelope\r\n     * 5 = Hold One Envelope\r\n     * 6 = Hold Two Envelope\r\n     * 7 = Hold Three Envelope\r\n     * 8 = Rewards Envelope(OMNI)\r\n     * 9 = Tech Envelope\r\n     * 10 = Exist Holdings Envelope\r\n     * 11 = Exist Crypto Envelope\r\n     * 12 = WHOA Envelope\r\n     * 13 = Credible You Envelope\r\n     */\r\n    function withdrawDividends(\r\n        uint8 _envelopeNumber)\r\n            public\r\n        {\r\n            requireUserPrivilegeLevel(1, msg.sender);\r\n            // setup data\r\n            address _UserAddress = msg.sender;\r\n            uint256 _dividends;\r\n            if(_envelopeNumber > 0 \r\n            && _envelopeNumber <= 13\r\n            && _envelopeNumber != 8){\r\n                _dividends = getUserDividends(msg.sender, _envelopeNumber);\r\n                GUsers[_UserAddress].FeesTotalWithdrawnByEnvelope_[_envelopeNumber] +=  _dividends;\r\n            } else if(_envelopeNumber == 8){\r\n                _dividends = getUserDividends(msg.sender, _envelopeNumber);\r\n                GUsers[_UserAddress].FeesTotalWithdrawnByEnvelope_[_envelopeNumber] +=  _dividends;\r\n                GUsers[_UserAddress].PropertyAvecBalance[0x4f4d4e4900000000000000000000000000000000000000000000000000000000] +=  _dividends;\r\n            }\r\n            // update dividend tracker\r\n            if(_envelopeNumber != 8){\r\n                GUsers[_UserAddress].PropertyAvecBalance[0x676c6f62616c0000000000000000000000000000000000000000000000000000] +=  _dividends;\r\n            }\r\n            // fire event\r\n            emit OnWithdraw(_UserAddress, _dividends, _envelopeNumber);\r\n    }\r\n    /*=================================\r\n    = UserPrivilegeLevel/set function =\r\n    =================================*/\r\n    function setGuest() public returns(bool success){\r\n        if(GUsers[msg.sender].UserPrivilegeLevel > 1 && GUsers[msg.sender].UserPrivilegeLevel < 4) {\r\n            success = false;\r\n        } else {\r\n            AVEC.User storage LTwouser = GUsers[msg.sender];\r\n            LTwouser.Set = true;\r\n            LTwouser.UserAddress = msg.sender;\r\n            LTwouser.transferingPropertyid_ = 0x676c6f62616c0000000000000000000000000000000000000000000000000000;\r\n            emit UserSet(msg.sender);\r\n            success = true;\r\n        }\r\n    }\r\n    function setUser(\r\n        address _modifyUser,\r\n        address _FounderDeveloperOne,\r\n        uint8 _UserPrivilegeLevel) public returns(bool success){\r\n            AVEC.User storage Luser = GUsers[_modifyUser];\r\n                if(_UserPrivilegeLevel <= GUsers[msg.sender].UserPrivilegeLevel\r\n                    && GUsers[msg.sender].UserPrivilegeLevel == 4\r\n                    && _FounderDeveloperOne != address(0x0)\r\n                    && _modifyUser != address(0x0)\r\n                    && _modifyUser != msg.sender){\r\n                        success = true;\r\n                        if(GUsers[_modifyUser].Set == true){\r\n                            GUsers[_modifyUser].FounderDeveloperOne = _FounderDeveloperOne;\r\n                            GUsers[_modifyUser].FounderDeveloperTwo = GUsers[_FounderDeveloperOne].FounderDeveloperOne;\r\n                            GUsers[_modifyUser].Ceva = GUsers[GUsers[_modifyUser].FounderDeveloperTwo].FounderDeveloperOne;\r\n                            GUsers[_modifyUser].UserPrivilegeLevel = _UserPrivilegeLevel;\r\n                            GUsers[_modifyUser].transferingPropertyid_ = 0x676c6f62616c0000000000000000000000000000000000000000000000000000;\r\n                        } else {\r\n                        Luser.UserAddress = _modifyUser;\r\n                        Luser.Set = true;\r\n                        Luser.FounderDeveloperOne = _FounderDeveloperOne;\r\n                        Luser.FounderDeveloperTwo = GUsers[_FounderDeveloperOne].FounderDeveloperOne;\r\n                        Luser.Ceva = GUsers[Luser.FounderDeveloperTwo].FounderDeveloperOne;\r\n                        Luser.UserPrivilegeLevel = _UserPrivilegeLevel;\r\n                        Luser.transferingPropertyid_ = 0x676c6f62616c0000000000000000000000000000000000000000000000000000;\r\n                        }\r\n                } else if(_UserPrivilegeLevel < GUsers[msg.sender].UserPrivilegeLevel\r\n                    && GUsers[msg.sender].UserPrivilegeLevel <= 3\r\n                    && GUsers[msg.sender].UserPrivilegeLevel >= 2\r\n                    && _FounderDeveloperOne != address(0x0)\r\n                    && _modifyUser != address(0x0)\r\n                    && _modifyUser != msg.sender){\r\n                        success = true;\r\n                        if(GUsers[_modifyUser].Set == true){\r\n                            GUsers[_modifyUser].FounderDeveloperOne = _FounderDeveloperOne;\r\n                            GUsers[_modifyUser].FounderDeveloperTwo = GUsers[_FounderDeveloperOne].FounderDeveloperOne;\r\n                            GUsers[_modifyUser].Ceva = GUsers[GUsers[_modifyUser].FounderDeveloperTwo].FounderDeveloperOne;\r\n                            GUsers[_modifyUser].UserPrivilegeLevel = _UserPrivilegeLevel;\r\n                            GUsers[_modifyUser].transferingPropertyid_ = 0x676c6f62616c0000000000000000000000000000000000000000000000000000;\r\n                        } else {\r\n                        Luser.UserAddress = _modifyUser;\r\n                        Luser.Set = true;\r\n                        Luser.FounderDeveloperOne = _FounderDeveloperOne;\r\n                        Luser.FounderDeveloperTwo = GUsers[_FounderDeveloperOne].FounderDeveloperOne;\r\n                        Luser.Ceva = GUsers[Luser.FounderDeveloperTwo].FounderDeveloperOne;\r\n                        Luser.UserPrivilegeLevel = _UserPrivilegeLevel;\r\n                        Luser.transferingPropertyid_ = 0x676c6f62616c0000000000000000000000000000000000000000000000000000;\r\n                        }\r\n                } else {\r\n                    success = false;\r\n                }\r\n            emit UserSet(_modifyUser);\r\n    }\r\n    function requireUserPrivilegeLevel(uint8 _UserPrivilegeLevel, address _UserAddress)\r\n        view\r\n        internal\r\n        returns(bool success)\r\n    {\r\n        if(_UserPrivilegeLevel <= GUsers[_UserAddress].UserPrivilegeLevel){\r\n            success = false;\r\n        } else {\r\n            success = false;\r\n        }\r\n    }\r\n    /*=================================\r\n    =       public view function      =\r\n    =================================*/\r\n    function getProp(\r\n        bytes32 _PropertyID) \r\n        view\r\n        public\r\n        returns (\r\n        address _Owner,\r\n        uint256 _Value,\r\n        uint256 _NumberOfTokensToEscrow,\r\n        uint256 _propertyPriceUpdateCountAsset_,\r\n        uint256 _propertyGlobalBalance_,\r\n        uint256 _escrowAgreementNumber,\r\n        uint8 _currentEscrowAgreementNumber,\r\n        bool _firstEscrowSet) {\r\n            _Owner = Properties[_PropertyID].Owner;\r\n            _Value = Properties[_PropertyID].Value;\r\n            _NumberOfTokensToEscrow = Properties[_PropertyID].NumberOfTokensToEscrow;\r\n            _propertyPriceUpdateCountAsset_ = Properties[_PropertyID].propertyPriceUpdateCountAsset_;\r\n            _propertyGlobalBalance_ = Properties[_PropertyID].propertyGlobalBalance_;\r\n            _escrowAgreementNumber = uint256(Properties[_PropertyID].escrowAgreementNumber.length);\r\n            _currentEscrowAgreementNumber = Properties[_PropertyID].currentEscrowAgreementNumber;\r\n            _firstEscrowSet = Properties[_PropertyID].firstEscrowSet;\r\n    }\r\n    function getUser(\r\n        address _UserAddress) \r\n        view \r\n        public \r\n        returns (\r\n            bool success,\r\n            bool set,\r\n            address userAddress, \r\n            address fdOne, \r\n            address fdTwo, \r\n            address ceva, \r\n            uint8 privilegeLevel) {\r\n                address _UserAddressStacked = _UserAddress;\r\n                if(GUsers[_UserAddressStacked].Set == true){\r\n                    success = true;\r\n                    set = GUsers[_UserAddressStacked].Set;\r\n                    userAddress = GUsers[_UserAddressStacked].UserAddress;\r\n                    fdOne = GUsers[_UserAddressStacked].Ceva;\r\n                    fdTwo = GUsers[_UserAddressStacked].FounderDeveloperTwo;\r\n                    ceva = GUsers[_UserAddressStacked].FounderDeveloperOne;\r\n                    privilegeLevel = GUsers[_UserAddressStacked].UserPrivilegeLevel;\r\n                } else {\r\n                    success = false;\r\n                }\r\n    }\r\n    function getUserProperty(\r\n        address _UserAddress) \r\n        view \r\n        public \r\n        returns (\r\n            bool success,\r\n            bytes32 _workingPropertyid, \r\n            bytes32 _transferingPropertyid, \r\n            uint256 _PropertyAvecBalanc, \r\n            uint256 _mintingDepositsOf,\r\n            uint256 _amountCirculated, \r\n            bool _burnrequestwhitelist, \r\n            uint256 _propertyvalueOld, \r\n            uint8 _transferType) {\r\n                address _UserAddressStacked = _UserAddress;\r\n                if(GUsers[_UserAddressStacked].Set == true){\r\n                    success = true;\r\n                    _workingPropertyid = GUsers[_UserAddressStacked].workingPropertyid_;\r\n                    _transferingPropertyid = GUsers[_UserAddressStacked].transferingPropertyid_;\r\n                    _PropertyAvecBalanc = GUsers[_UserAddressStacked].PropertyAvecBalance[GUsers[_UserAddressStacked].transferingPropertyid_];\r\n                    _mintingDepositsOf = GUsers[_UserAddressStacked].mintingDepositsOf_;\r\n                    _amountCirculated = GUsers[_UserAddressStacked].amountCirculated_;\r\n                    _burnrequestwhitelist = GUsers[_UserAddressStacked].burnrequestwhitelist_[GUsers[_UserAddressStacked].transferingPropertyid_];\r\n                    _propertyvalueOld = GUsers[_UserAddressStacked].propertyvalueOld_[GUsers[_UserAddressStacked].transferingPropertyid_];\r\n                    _transferType = GUsers[_UserAddressStacked].transferType_;\r\n                } else {\r\n                    success = false;\r\n                }\r\n    }\r\n    function getUserAvecBalance(\r\n        address UserAddress, \r\n        bytes32 _PropertyID) \r\n        view\r\n        public\r\n        returns (\r\n            bool success,\r\n            address _UserAddress,\r\n            uint256 _PropertyAvecBalance) {\r\n          success = true;\r\n          _UserAddress = GUsers[UserAddress].UserAddress;\r\n          _PropertyAvecBalance = GUsers[UserAddress].PropertyAvecBalance[_PropertyID];\r\n    }\r\n    function getUserDividends(\r\n        address _UserAddress, \r\n        uint8 _envelopeNumber)\r\n        view\r\n        public\r\n        returns(uint256 dividends)\r\n    {\r\n      if(GUsers[_UserAddress].amountCirculated_ >= 1 && GUsers[_UserAddress].FeeShareholdByEnvelope_[_envelopeNumber] >= 1){ \r\n          dividends = ((((((LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[14] / 2) / 8) / LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[1]) * GUsers[_UserAddress].FeeShareholdByEnvelope_[_envelopeNumber]) - (GUsers[_UserAddress].FeesTotalWithdrawnByEnvelope_[_envelopeNumber] + GUsers[_UserAddress].FeesPreviousWithdrawnByEnvelope_[_envelopeNumber])) / ((GUsers[_UserAddress].mintingDepositsOf_ + 1) / (GUsers[_UserAddress].amountCirculated_ + 1)));\r\n      } else {\r\n          dividends = 0;\r\n      }\r\n    }\r\n    function getUserShareHold(\r\n        address _UserAddress, \r\n        uint8 _envelopeNumber)\r\n        view\r\n        public\r\n        returns(uint256 sharehold, bool success)\r\n    {\r\n        if(_envelopeNumber >= 1\r\n        && _envelopeNumber <= 13){\r\n            sharehold = GUsers[_UserAddress].FeeShareholdByEnvelope_[_envelopeNumber]; \r\n            success = true;\r\n        } else {\r\n            sharehold = 0; \r\n            success = false;\r\n        }\r\n    }\r\n    function getEscrow(\r\n        bytes32 _PropertyId) \r\n        view\r\n        public\r\n        returns (\r\n            address _recipientOfFunds,\r\n            bytes32 _recipientName,\r\n            uint8 _escrowAgreementNumber,\r\n            uint256 _milestonePriceOfEscrowInETH,\r\n            uint256 _tokensAvailableTotal,\r\n            uint256 _tokensAvailableCurrent,\r\n            uint256 _ethPerToken,\r\n            uint256 _propertyIncrease,\r\n            uint256 _AgreementAmountDueInTokens) {\r\n                _recipientOfFunds = GEscrowAgreements[_PropertyId][Properties[_PropertyId].currentEscrowAgreementNumber].recipientOfFunds;\r\n                _recipientName = GEscrowAgreements[_PropertyId][Properties[_PropertyId].currentEscrowAgreementNumber].recipientName;\r\n                _escrowAgreementNumber = GEscrowAgreements[_PropertyId][Properties[_PropertyId].currentEscrowAgreementNumber].escrowAgreementNumber;\r\n                _milestonePriceOfEscrowInETH = GEscrowAgreements[_PropertyId][Properties[_PropertyId].currentEscrowAgreementNumber].milestonePriceOfEscrowInETH;\r\n                _tokensAvailableTotal = GEscrowAgreements[_PropertyId][Properties[_PropertyId].currentEscrowAgreementNumber].tokensAvailableTotal;\r\n                _tokensAvailableCurrent = GEscrowAgreements[_PropertyId][Properties[_PropertyId].currentEscrowAgreementNumber].tokensAvailableCurrent;\r\n                _ethPerToken = GEscrowAgreements[_PropertyId][Properties[_PropertyId].currentEscrowAgreementNumber].ethPerToken;\r\n                _propertyIncrease = GEscrowAgreements[_PropertyId][Properties[_PropertyId].currentEscrowAgreementNumber].propertyIncrease;\r\n                _AgreementAmountDueInTokens = GEscrowAgreements[_PropertyId][Properties[_PropertyId].currentEscrowAgreementNumber].AgreementAmountDueInTokens[msg.sender];\r\n    }\r\n    function getBalance() \r\n        public \r\n        view \r\n        returns (uint balance) {\r\n            balance = address(this).balance;\r\n        }\r\n    /*==============================\r\n    =        public function       =\r\n    ==============================*/\r\n    constructor()\r\n    {\r\n    }\r\n    function setAdmin()\r\n        public\r\n        returns(bool success)\r\n    {\r\n        if(adminset_ == false){\r\n            GUsers[msg.sender].Set = true;\r\n            GUsers[msg.sender].UserAddress = msg.sender;\r\n            GUsers[msg.sender].UserPrivilegeLevel = 4;\r\n            GUsers[msg.sender].FounderDeveloperOne = msg.sender;\r\n            GUsers[msg.sender].FounderDeveloperTwo = msg.sender;\r\n            GUsers[msg.sender].Ceva = msg.sender;\r\n            adminset_ = true; \r\n            success = true;\r\n        } else { success = false; }\r\n    }\r\n    function sellSharehold(\r\n        address _toAddress, \r\n        uint256 _amount, \r\n        uint8 _envelopeNumber)\r\n        public\r\n        returns(bool success)\r\n    {\r\n        requireUserPrivilegeLevel(0, msg.sender);\r\n        requireUserPrivilegeLevel(0, _toAddress);\r\n        if(_amount > 0\r\n        && _envelopeNumber == 1){\r\n        // setup\r\n            address _UserAddress = msg.sender;\r\n            if(_amount <= GUsers[_UserAddress].FeeShareholdByEnvelope_[_envelopeNumber]\r\n            && _amount >= 0\r\n            && _toAddress != _UserAddress){\r\n                GUsers[_toAddress].FeesPreviousWithdrawnByEnvelope_[_envelopeNumber] += ((GUsers[_UserAddress].FeesTotalWithdrawnByEnvelope_[_envelopeNumber] / GUsers[_UserAddress].FeeShareholdByEnvelope_[_envelopeNumber]) * _amount);\r\n                GUsers[_toAddress].FeeShareholdByEnvelope_[_envelopeNumber] += _amount;\r\n                GUsers[_UserAddress].FeeShareholdByEnvelope_[_envelopeNumber] -= _amount;\r\n            }\r\n        } else {\r\n            success = false;\r\n        }\r\n          GUsers[_toAddress].mintingDepositsOf_ += (_amount * 1e18);\r\n          GUsers[_toAddress].amountCirculated_ += (_amount * 1e18);\r\n          \r\n          emit FeeShareholdSOLD(msg.sender, _toAddress, _amount);\r\n          success = true;\r\n    }\r\n    function updateValue(\r\n        address _holderAddress, \r\n        bytes32 _propertyUniqueId)\r\n        public\r\n        returns(bool success)\r\n    {\r\n        requireUserPrivilegeLevel(0, msg.sender);\r\n        if(Properties[_propertyUniqueId].propertyPriceUpdateCountAsset_ != GUsers[_holderAddress].propertyPriceUpdateCountMember_[_holderAddress][_propertyUniqueId]\r\n        && GUsers[_holderAddress].PropertyAvecBalance[_propertyUniqueId] > 0\r\n        && Properties[_propertyUniqueId].Set == true\r\n        && Properties[_propertyUniqueId].Value > 0){\r\n            updateValueI(_holderAddress,_propertyUniqueId);\r\n            success = true;\r\n        } else {\r\n            success = false;\r\n        }\r\n    }\r\n    /**\r\n     * Select a specific property unique id to swap its AVEC when calling the transfer function.\r\n     * 0x676c6f62616c0000000000000000000000000000000000000000000000000000\r\n     * ONUS ^\r\n     * 0x4f4d4e4900000000000000000000000000000000000000000000000000000000\r\n     * OMNI ^\r\n     */\r\n    function setToken(\r\n        bytes32 _propertyUniqueID, \r\n        uint8 _tokenType)\r\n            public\r\n            returns(bytes32 _tranferingPropertyID, uint8 tokenType)\r\n        {\r\n            if(_tokenType <= 3 \r\n            && _tokenType >= 1\r\n            && GUsers[msg.sender].UserPrivilegeLevel >= 1){\r\n                updateValueI(msg.sender, _propertyUniqueID);\r\n              if(_tokenType == 1){\r\n                  GUsers[msg.sender].transferingPropertyid_ = _propertyUniqueID;\r\n                  GUsers[msg.sender].transferType_ = 1;\r\n              } else if(_tokenType == 2){\r\n                  GUsers[msg.sender].transferingPropertyid_ = 0x676c6f62616c0000000000000000000000000000000000000000000000000000;\r\n                  GUsers[msg.sender].transferType_ = 2;\r\n              } else if(_tokenType == 3){\r\n                  GUsers[msg.sender].transferingPropertyid_ = 0x4f4d4e4900000000000000000000000000000000000000000000000000000000;\r\n                  GUsers[msg.sender].transferType_ = 3;\r\n              }\r\n              _tranferingPropertyID = GUsers[msg.sender].transferingPropertyid_;\r\n              tokenType = _tokenType;\r\n            }\r\n    }\r\n    function withdrawEscrow(\r\n        bytes32 _PropertyID) \r\n        public{\r\n            uint256 tokens = GEscrowAgreements[_PropertyID][GUsers[msg.sender].lastknownPropertyEscrowAgreementNumber[_PropertyID]].AgreementAmountDueInTokens[msg.sender];\r\n            address _userAddress = msg.sender;\r\n            if(GEscrowAgreements[_PropertyID][GUsers[_userAddress].lastknownPropertyEscrowAgreementNumber[_PropertyID]].AgreementAmountDueInTokens[_userAddress] >= 1e18 \r\n            && GEscrowAgreements[_PropertyID][GUsers[_userAddress].lastknownPropertyEscrowAgreementNumber[_PropertyID]].escrowCompleted == true\r\n            && GUsers[msg.sender].UserPrivilegeLevel >= 0){\r\n                if(GUsers[_userAddress].UserPrivilegeLevel == 0){\r\n                    GUsers[_userAddress].PropertyAvecBalance[0x676c6f62616c0000000000000000000000000000000000000000000000000000] += GEscrowAgreements[_PropertyID][GUsers[_userAddress].lastknownPropertyEscrowAgreementNumber[_PropertyID]].AgreementAmountDueInTokens[_userAddress];\r\n                    Properties[_PropertyID].propertyGlobalBalance_ += GEscrowAgreements[_PropertyID][GUsers[_userAddress].lastknownPropertyEscrowAgreementNumber[_PropertyID]].AgreementAmountDueInTokens[_userAddress];\r\n                    GEscrowAgreements[_PropertyID][GUsers[_userAddress].lastknownPropertyEscrowAgreementNumber[_PropertyID]].AgreementAmountDueInTokens[_userAddress] -= GEscrowAgreements[_PropertyID][GUsers[_userAddress].lastknownPropertyEscrowAgreementNumber[_PropertyID]].AgreementAmountDueInTokens[_userAddress];\r\n                    emit AVECWithdrawnFromEscrow(msg.sender, tokens, _PropertyID);\r\n                } else if(GUsers[_userAddress].UserPrivilegeLevel >= 1)\r\n                    GUsers[_userAddress].PropertyAvecBalance[_PropertyID] += GEscrowAgreements[_PropertyID][GUsers[_userAddress].lastknownPropertyEscrowAgreementNumber[_PropertyID]].AgreementAmountDueInTokens[_userAddress];\r\n                    GEscrowAgreements[_PropertyID][GUsers[_userAddress].lastknownPropertyEscrowAgreementNumber[_PropertyID]].AgreementAmountDueInTokens[_userAddress] -= GEscrowAgreements[_PropertyID][GUsers[_userAddress].lastknownPropertyEscrowAgreementNumber[_PropertyID]].AgreementAmountDueInTokens[_userAddress];\r\n                    emit AVECWithdrawnFromEscrow(msg.sender, tokens, _PropertyID);\r\n            } else {\r\n            }\r\n            updateValueI(msg.sender, _PropertyID);\r\n    }\r\n    /*==============================\r\n    =        payable function     =\r\n    ==============================*/\r\n    function contributeEscrow(\r\n        bytes32 _PropertyID)\r\n        public\r\n        payable\r\n        returns(bytes memory tf){\r\n            if(GEscrowAgreements[_PropertyID][Properties[_PropertyID].currentEscrowAgreementNumber].escrowCompleted == true){\r\n                revert();\r\n            } else {\r\n            address _userAddress = msg.sender;\r\n            uint256 _value;\r\n            uint256 _amountOfAVEC = (msg.value / GEscrowAgreements[_PropertyID][Properties[_PropertyID].currentEscrowAgreementNumber].ethPerToken);\r\n            bytes32 stacked = _PropertyID;      \r\n            if(GEscrowAgreements[_PropertyID][Properties[_PropertyID].currentEscrowAgreementNumber].escrowCompleted == false\r\n                && GUsers[msg.sender].UserPrivilegeLevel >= 0\r\n                && GEscrowAgreements[_PropertyID][Properties[_PropertyID].currentEscrowAgreementNumber].totalETHReceived \r\n                >= GEscrowAgreements[_PropertyID][Properties[_PropertyID].currentEscrowAgreementNumber].milestonePriceOfEscrowInETH){\r\n                    GEscrowAgreements[_PropertyID][Properties[_PropertyID].currentEscrowAgreementNumber].tokensAvailableCurrent = 0;\r\n                    (, tf) = GEscrowAgreements[_PropertyID][Properties[_PropertyID].currentEscrowAgreementNumber].recipientOfFunds.call\r\n                    {value: GEscrowAgreements[_PropertyID][Properties[_PropertyID].currentEscrowAgreementNumber].milestonePriceOfEscrowInETH}(\"\");\r\n                    GEscrowAgreements[_PropertyID][Properties[_PropertyID].currentEscrowAgreementNumber].escrowCompleted = true;\r\n            if(GEscrowAgreements[_PropertyID][Properties[_PropertyID].currentEscrowAgreementNumber].propertyIncrease > 0 \r\n                && GUsers[msg.sender].UserPrivilegeLevel >= 3 \r\n                && GEscrowAgreements[_PropertyID][Properties[_PropertyID].currentEscrowAgreementNumber].escrowCompleted == true\r\n                ){\r\n                    bytes32 wpIDTemp = GUsers[msg.sender].workingPropertyid_;\r\n                    GUsers[msg.sender].workingPropertyid_ = _PropertyID;\r\n                    setProperyValue((Properties[stacked].Value + GEscrowAgreements[stacked][Properties[stacked].currentEscrowAgreementNumber].propertyIncrease));\r\n                    GUsers[msg.sender].workingPropertyid_ = wpIDTemp;\r\n                    GEscrowAgreements[_PropertyID][Properties[_PropertyID].currentEscrowAgreementNumber].propertyIncrease = 0;\r\n            }\r\n                emit ContributionMade(_userAddress, msg.value, stacked, Properties[stacked].currentEscrowAgreementNumber, GEscrowAgreements[stacked][Properties[stacked].currentEscrowAgreementNumber].escrowCompleted);\r\n            } else {\r\n            if(GEscrowAgreements[_PropertyID][Properties[_PropertyID].currentEscrowAgreementNumber].tokensAvailableCurrent <= _amountOfAVEC){\r\n                _value = (GEscrowAgreements[_PropertyID][Properties[_PropertyID].currentEscrowAgreementNumber].milestonePriceOfEscrowInETH - \r\n                GEscrowAgreements[_PropertyID][Properties[_PropertyID].currentEscrowAgreementNumber].totalETHReceived);\r\n                _amountOfAVEC = GEscrowAgreements[_PropertyID][Properties[_PropertyID].currentEscrowAgreementNumber].tokensAvailableCurrent;\r\n                if(msg.value > (_value + GEscrowAgreements[_PropertyID][Properties[_PropertyID].currentEscrowAgreementNumber].ethPerToken) || \r\n                msg.value < GEscrowAgreements[_PropertyID][Properties[_PropertyID].currentEscrowAgreementNumber].ethPerToken){\r\n                    revert();\r\n                }   \r\n            }\r\n            GEscrowAgreements[_PropertyID][Properties[_PropertyID].currentEscrowAgreementNumber].tokensAvailableCurrent -= _amountOfAVEC;\r\n            _value = (GEscrowAgreements[_PropertyID][Properties[_PropertyID].currentEscrowAgreementNumber].ethPerToken * _amountOfAVEC);\r\n            withdrawEscrow(_PropertyID);\r\n            GUsers[_userAddress].lastknownPropertyEscrowAgreementNumber[_PropertyID] = Properties[_PropertyID].currentEscrowAgreementNumber;\r\n            address(this).call{value: _value};\r\n            updateValueI(msg.sender, _PropertyID);\r\n            GEscrowAgreements[_PropertyID][Properties[_PropertyID].currentEscrowAgreementNumber].totalETHReceived += _value;\r\n            ETHERTOTALRECEIVED += _value;\r\n            amountDueInTokens[_userAddress] += (_amountOfAVEC * 1e18);\r\n            GEscrowAgreements[_PropertyID][Properties[_PropertyID].currentEscrowAgreementNumber].AgreementAmountDueInTokens[_userAddress] = (_amountOfAVEC * 1e18);\r\n            emit ContributionMade(_userAddress, _value, stacked, Properties[stacked].currentEscrowAgreementNumber, GEscrowAgreements[stacked][Properties[stacked].currentEscrowAgreementNumber].escrowCompleted);\r\n            }\r\n            }\r\n        }\r\n    /*==============================\r\n    =        internal function     =\r\n    ==============================*/\r\n    function updateValueI(\r\n        address _holderAddress, \r\n        bytes32 _propertyUniqueId)\r\n        internal\r\n    {\r\n        uint256 _propertyBalanceLedger = GUsers[_holderAddress].PropertyAvecBalance[_propertyUniqueId];\r\n        //if holding burned value\r\n        if(_propertyBalanceLedger >= 1 \r\n        && Properties[_propertyUniqueId].Value == 0 \r\n        && _propertyUniqueId != 0x676c6f62616c0000000000000000000000000000000000000000000000000000){\r\n           GUsers[_holderAddress].PropertyAvecBalance[0x676c6f62616c0000000000000000000000000000000000000000000000000000] = GUsers[_holderAddress].PropertyAvecBalance[_propertyUniqueId]; \r\n           GUsers[_holderAddress].PropertyAvecBalance[_propertyUniqueId] -= GUsers[_holderAddress].PropertyAvecBalance[_propertyUniqueId];\r\n           emit ValueUpdate(_holderAddress, _propertyUniqueId, _propertyBalanceLedger, GUsers[_holderAddress].PropertyAvecBalance[_propertyUniqueId]);\r\n        } else {\r\n        if(Properties[_propertyUniqueId].propertyPriceUpdateCountAsset_ > GUsers[_holderAddress].propertyPriceUpdateCountMember_[_holderAddress][_propertyUniqueId]\r\n        && GUsers[_holderAddress].propertyPriceUpdateCountMember_[_holderAddress][_propertyUniqueId] == 0) {\r\n            Properties[_propertyUniqueId].propertyLastKnownValue_[_holderAddress] = Properties[_propertyUniqueId].Value;\r\n            GUsers[_holderAddress].propertyPriceUpdateCountMember_[_holderAddress][_propertyUniqueId] = Properties[_propertyUniqueId].propertyPriceUpdateCountAsset_;\r\n            emit ValueUpdate(_holderAddress, _propertyUniqueId, _propertyBalanceLedger, GUsers[_holderAddress].PropertyAvecBalance[_propertyUniqueId]);\r\n        } else if(Properties[_propertyUniqueId].propertyPriceUpdateCountAsset_ > GUsers[_holderAddress].propertyPriceUpdateCountMember_[_holderAddress][_propertyUniqueId]){\r\n            uint256 _divideby = ((((Properties[_propertyUniqueId].propertyLastKnownValue_[_holderAddress] * 1e18) / 100) * 1000000) / _propertyBalanceLedger);\r\n            uint256 _propertyValue = (((Properties[_propertyUniqueId].Value * 1e18) / 100) * 1000000);\r\n            uint256 _LCalculate = (_propertyValue / _divideby);\r\n            GUsers[_holderAddress].PropertyAvecBalance[_propertyUniqueId] = _LCalculate;\r\n            GUsers[_holderAddress].propertyPriceUpdateCountMember_[_holderAddress][_propertyUniqueId] = Properties[_propertyUniqueId].propertyPriceUpdateCountAsset_;\r\n            Properties[_propertyUniqueId].propertyLastKnownValue_[_holderAddress] = Properties[_propertyUniqueId].Value;\r\n            emit ValueUpdate(_holderAddress, _propertyUniqueId, _propertyBalanceLedger, GUsers[_holderAddress].PropertyAvecBalance[_propertyUniqueId]);\r\n        }}\r\n    }\r\n    function updt(uint256 _amountOfTokens)\r\n            internal\r\n            returns(bool success)\r\n        {\r\n            uint48 _tokenCount = uint48((_amountOfTokens / 1e18));\r\n            totalSupply += _amountOfTokens;\r\n            LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[1] = uint48(_tokenCount + LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[1]);\r\n            LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[2] = uint48(_tokenCount + LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[2]);\r\n            LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[3] = uint48(_tokenCount + LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[3]);\r\n            LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[4] = uint48(_tokenCount + LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[4]);\r\n            LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[5] = uint48(_tokenCount + LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[5]);\r\n            LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[6] = uint48(_tokenCount + LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[6]);\r\n            LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[7] = uint48(_tokenCount + LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[7]);\r\n            LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[8] = uint48(_tokenCount + LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[8]);\r\n            LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[9] = uint48(_tokenCount + LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[9]);\r\n            LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[10] = uint48(_tokenCount + LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[10]);\r\n            LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[11] = uint48(_tokenCount + LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[11]);\r\n            LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[12] = uint48(_tokenCount + LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[12]);\r\n            LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[13] = uint48(_tokenCount + LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[13]);\r\n            LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[15] = uint48((_tokenCount * 13) + LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[15]);\r\n            success = true;\r\n    }\r\n    function updateEquityRents(uint256 _amountOfTokens)\r\n            internal\r\n            returns(bool success)\r\n        {\r\n            if(_amountOfTokens > 0){\r\n                LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[14] = uint48(LatestTotalHolds[address(this)].feeHoldsTotalByEnvelope[14] + _amountOfTokens / 50);\r\n                success = true;\r\n            } else {\r\n                success = false;\r\n            }\r\n    }\r\n    function creditFeeSharehold(uint256 _amountOfTokens, address _UserAddress, address _toAddress, address _toAddresstwo, address _toAddressthree)\r\n            internal\r\n            returns(bool success)\r\n        {\r\n            _amountOfTokens /= 1e18;\r\n            GUsers[_UserAddress].FeeShareholdByEnvelope_[1] += _amountOfTokens;\r\n            GUsers[_UserAddress].FeeShareholdByEnvelope_[2] += _amountOfTokens;\r\n            GUsers[GFeeWallets[GfeeWalletSecretID_].whoamaintenanceaddress].FeeShareholdByEnvelope_[3] += _amountOfTokens;\r\n            GUsers[_UserAddress].FeeShareholdByEnvelope_[4] += _amountOfTokens;\r\n            GUsers[_toAddress].FeeShareholdByEnvelope_[5] += _amountOfTokens;\r\n            GUsers[_toAddresstwo].FeeShareholdByEnvelope_[6] += _amountOfTokens;\r\n            GUsers[_toAddressthree].FeeShareholdByEnvelope_[7] += _amountOfTokens;\r\n            GUsers[GFeeWallets[GfeeWalletSecretID_].whoarewardsaddress].FeeShareholdByEnvelope_[8] += _amountOfTokens;\r\n            GUsers[GFeeWallets[GfeeWalletSecretID_].techaddress].FeeShareholdByEnvelope_[9] += _amountOfTokens;\r\n            GUsers[GFeeWallets[GfeeWalletSecretID_].existholdingsaddress].FeeShareholdByEnvelope_[10] += _amountOfTokens;\r\n            GUsers[GFeeWallets[GfeeWalletSecretID_].existcryptoaddress].FeeShareholdByEnvelope_[11] += _amountOfTokens;\r\n            GUsers[GFeeWallets[GfeeWalletSecretID_].whoaaddress].FeeShareholdByEnvelope_[12] += _amountOfTokens;\r\n            GUsers[GFeeWallets[GfeeWalletSecretID_].credibleyouaddress].FeeShareholdByEnvelope_[13] += _amountOfTokens;\r\n            success = true;\r\n        }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"CEVA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"FD\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"USER\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"AmountEscrowed\",\"type\":\"uint256\"}],\"name\":\"AVECMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"User\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"PropertyID\",\"type\":\"bytes32\"}],\"name\":\"AVECWithdrawnFromEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"MemberAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensConverted\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"PropertyID\",\"type\":\"bytes32\"}],\"name\":\"AVECtoONUS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_UserAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_Lvalue\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"propertyValue\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"PropertyID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"escrowNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fundingComplete\",\"type\":\"bool\"}],\"name\":\"ContributionMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"CEVA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"REcipientName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"MilestoneETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TokensAVAILABLE\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"PropertyID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"EscrowAgreementNumber\",\"type\":\"uint8\"}],\"name\":\"EscrowCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeShareholdSOLD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"User\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"CEVA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"FDone\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"FDTwo\",\"type\":\"address\"}],\"name\":\"LicensePurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"MemberAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensConverted\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"PropertyID\",\"type\":\"bytes32\"}],\"name\":\"ONUStoAVEC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"MemberAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensWithdrawn\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"envelopeNumber\",\"type\":\"uint8\"}],\"name\":\"OnWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Set\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"PropertyID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"CEVA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"FDOne\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OWNER\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"Value\",\"type\":\"uint256\"}],\"name\":\"PropertySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_propertyUniqueID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"propertyValue\",\"type\":\"uint256\"}],\"name\":\"PropertyValuation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"User\",\"type\":\"address\"}],\"name\":\"UserSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"User\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"PropertyID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Before\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"After\",\"type\":\"uint256\"}],\"name\":\"ValueUpdate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"oneAVECtwoONUS\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_PropertyID\",\"type\":\"bytes32\"}],\"name\":\"Convert\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"thefeeWalletSecretID\",\"type\":\"bytes32\"}],\"name\":\"agetFeeWallet\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_feeWalletSecretID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_whoaaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whoamaintenanceaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whoarewardsaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cevaaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_credibleyouaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_techaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_existholdingsaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_existcryptoaddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_LfeeWalletSecretID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_whoaaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whoamaintenanceaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whoarewardsaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cevaaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_credibleyouaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_techaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_existholdingsaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_existcryptoaddress\",\"type\":\"address\"}],\"name\":\"asetFeeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_UserAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_propertyValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_clearFrom\",\"type\":\"address\"}],\"name\":\"burnProperty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFD\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_PropertyID\",\"type\":\"bytes32\"}],\"name\":\"contributeEscrow\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"tf\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_PropertyID\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_recipientOfFunds\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_recipientName\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_escrowAgreementNumber\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_override\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_escrowCompleted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_milestonePriceOfEscrowInETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensAvailableTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_propertyIncrease\",\"type\":\"uint256\"}],\"name\":\"createEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositONUS\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositShares\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_PropertyId\",\"type\":\"bytes32\"}],\"name\":\"getEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_recipientOfFunds\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_recipientName\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_escrowAgreementNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_milestonePriceOfEscrowInETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensAvailableTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensAvailableCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethPerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_propertyIncrease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_AgreementAmountDueInTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_PropertyID\",\"type\":\"bytes32\"}],\"name\":\"getProp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_Owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_Value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_NumberOfTokensToEscrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_propertyPriceUpdateCountAsset_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_propertyGlobalBalance_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_escrowAgreementNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_currentEscrowAgreementNumber\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_firstEscrowSet\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_UserAddress\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"set\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fdOne\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fdTwo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ceva\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"privilegeLevel\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"UserAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_PropertyID\",\"type\":\"bytes32\"}],\"name\":\"getUserAvecBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_UserAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_PropertyAvecBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_UserAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_envelopeNumber\",\"type\":\"uint8\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dividends\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_UserAddress\",\"type\":\"address\"}],\"name\":\"getUserProperty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"_workingPropertyid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_transferingPropertyid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_PropertyAvecBalanc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintingDepositsOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountCirculated\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_burnrequestwhitelist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_propertyvalueOld\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_transferType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_UserAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_envelopeNumber\",\"type\":\"uint8\"}],\"name\":\"getUserShareHold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sharehold\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_founderDeveloperFee\",\"type\":\"uint256\"}],\"name\":\"mintAVEC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_envelopeNumber\",\"type\":\"uint8\"}],\"name\":\"sellSharehold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"setFeeWalletSecret\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setGuest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_Set\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_FounderDeveloper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_holdOne\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_holdTwo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_holdThree\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_Value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_NumberOfTokensToEscrow\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_PropertyID\",\"type\":\"bytes32\"}],\"name\":\"setProperty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_propertyValue\",\"type\":\"uint256\"}],\"name\":\"setProperyValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_propertyUniqueID\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_tokenType\",\"type\":\"uint8\"}],\"name\":\"setToken\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_tranferingPropertyID\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"tokenType\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_modifyUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_FounderDeveloperOne\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_UserPrivilegeLevel\",\"type\":\"uint8\"}],\"name\":\"setUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_PropertyID\",\"type\":\"bytes32\"}],\"name\":\"setWPID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holderAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_propertyUniqueId\",\"type\":\"bytes32\"}],\"name\":\"updateValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wai\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_envelopeNumber\",\"type\":\"uint8\"}],\"name\":\"withdrawDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_PropertyID\",\"type\":\"bytes32\"}],\"name\":\"withdrawEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AVEC","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d70e627ffc012378353a8c84f51a0852528135751e65bedda3e730669392b820"}]}