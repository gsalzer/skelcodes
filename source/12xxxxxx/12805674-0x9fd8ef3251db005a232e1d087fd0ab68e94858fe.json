{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/cfolio/interfaces/ICFolioItemHandler.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See LICENSE.txt for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\nimport '../../token/interfaces/ICFolioItemCallback.sol';\\n\\n/**\\n * @dev Interface to C-folio item contracts\\n */\\ninterface ICFolioItemHandler is ICFolioItemCallback {\\n  /**\\n   * @dev Called when a SFT tokens grade needs re-evaluation\\n   *\\n   * @param tokenId The ERC-1155 token ID. Rate is in 1E6 convention: 1E6 = 100%\\n   * @param newRate The new value rate\\n   */\\n  function sftUpgrade(uint256 tokenId, uint32 newRate) external;\\n\\n  /**\\n   * @dev Called from SFTMinter after an Investment SFT is minted\\n   *\\n   * @param payer The approved address to get investment from\\n   * @param sftTokenId The sftTokenId whose c-folio is the owner of investment\\n   * @param amounts The amounts of invested assets\\n   */\\n  function setupCFolio(\\n    address payer,\\n    uint256 sftTokenId,\\n    uint256[] calldata amounts\\n  ) external;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Asset access\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Adds investments into a cFolioItem SFT\\n   *\\n   * Transfers amounts of assets from users wallet to the contract. In general,\\n   * an Approval call is required before the function is called.\\n   *\\n   * @param baseTokenId cFolio tokenId, must be unlocked, or -1\\n   * @param tokenId cFolioItem tokenId, must be unlocked if not in unlocked cFolio\\n   * @param amounts Investment amounts, implementation specific\\n   */\\n  function deposit(\\n    uint256 baseTokenId,\\n    uint256 tokenId,\\n    uint256[] calldata amounts\\n  ) external;\\n\\n  /**\\n   * @dev Removes investments from a cFolioItem SFT\\n   *\\n   * Withdrawn token are transfered back to msg.sender.\\n   *\\n   * @param baseTokenId cFolio tokenId, must be unlocked, or -1\\n   * @param tokenId cFolioItem tokenId, must be unlocked if not in unlocked cFolio\\n   * @param amounts Investment amounts, implementation specific\\n   */\\n  function withdraw(\\n    uint256 baseTokenId,\\n    uint256 tokenId,\\n    uint256[] calldata amounts\\n  ) external;\\n\\n  /**\\n   * @dev Get the rewards collected by an SFT base card\\n   *\\n   * @param recipient Recipient of the rewards (- fees)\\n   * @param tokenId SFT base card tokenId, must be unlocked\\n   */\\n  function getRewards(address recipient, uint256 tokenId) external;\\n\\n  /**\\n   * @dev Get amounts (handler specific) for a cfolioItem\\n   *\\n   * @param cfolioItem address of CFolioItem contract\\n   */\\n  function getAmounts(address cfolioItem)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  /**\\n   * @dev Get information obout the rewardFarm\\n   *\\n   * @param tokenIds List of basecard tokenIds\\n   * @return bytes of uint256[]: total, rewardDur, rewardRateForDur, [share, earned]\\n   */\\n  function getRewardInfo(uint256[] calldata tokenIds)\\n    external\\n    view\\n    returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/src/cfolio/interfaces/ISFTEvaluator.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See LICENSE.txt for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\n// BOIS feature bitmask\\nuint256 constant LEVEL2BOIS = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000F;\\nuint256 constant LEVEL2WOLF = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000F0;\\n\\ninterface ISFTEvaluator {\\n  /**\\n   * @dev Returns the reward in 1e6 factor notation (1e6 = 100%)\\n   */\\n  function rewardRate(uint256 sftTokenId) external view returns (uint32);\\n\\n  /**\\n   * @dev Returns the cFolioItemType of a given cFolioItem tokenId\\n   */\\n  function getCFolioItemType(uint256 tokenId) external view returns (uint256);\\n\\n  /**\\n   * @dev Calculate the current reward rate, and notify TFC in case of change\\n   *\\n   * Optional revert on unchange to save gas on external calls.\\n   */\\n  function setRewardRate(uint256 tokenId, bool revertUnchanged) external;\\n\\n  /**\\n   * @dev Sets the cfolioItemType of a cfolioItem tokenId, not yet used\\n   * sftHolder tokenId expected (without hash)\\n   */\\n  function setCFolioItemType(uint256 tokenId, uint256 cfolioItemType_) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/crowdsale/WOWSSftMinter.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2020-2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\n\\nimport '../cfolio/interfaces/ICFolioItemHandler.sol';\\nimport '../cfolio/interfaces/ISFTEvaluator.sol';\\nimport '../investment/interfaces/IRewardHandler.sol';\\nimport '../token/interfaces/IERC1155BurnMintable.sol';\\nimport '../token/interfaces/ITradeFloor.sol';\\nimport '../token/interfaces/IWOWSCryptofolio.sol';\\nimport '../token/interfaces/IWOWSERC1155.sol';\\nimport '../utils/TokenIds.sol';\\n\\ncontract WOWSSftMinter is Context, Ownable {\\n  using TokenIds for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // State\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  // PricePerlevel, customLevel start at 0xFF\\n  mapping(uint16 => uint256) public _pricePerLevel;\\n\\n  struct CFolioItemSft {\\n    ICFolioItemHandler handler;\\n    uint256 price;\\n    uint128 numMinted;\\n    uint128 maxMintable;\\n  }\\n  mapping(uint256 => CFolioItemSft) public cfolioItemSfts; // C-folio type to c-folio data\\n  ICFolioItemHandler[] private cfolioItemHandlers;\\n\\n  uint256 public nextCFolioItemNft = (1 << 64);\\n\\n  // The ERC1155 contract we are minting from\\n  IWOWSERC1155 private immutable _sftContract;\\n\\n  // WOWS token contract\\n  IERC20 private immutable _wowsToken;\\n\\n  // Reward handler which distributes WOWS\\n  IRewardHandler public rewardHandler;\\n\\n  // TradeFloor Proxy contract\\n  address public tradeFloor;\\n\\n  // SFTEvaluator to store the cfolioItemType\\n  ISFTEvaluator public sftEvaluator;\\n\\n  // Set while minting CFolioToken\\n  bool private _setupCFolio;\\n\\n  // 1.0 of the rewards go to distribution\\n  uint32 private constant ALL = 1 * 1e6;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Events\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  // Emitted if a new SFT is minted\\n  event Mint(\\n    address indexed recipient,\\n    uint256 tokenId,\\n    uint256 price,\\n    uint256 cfolioType\\n  );\\n\\n  // Emitted if cFolio mint specifications (e.g. limits / price) have changed\\n  event CFolioSpecChanged(uint256[] ids, WOWSSftMinter upgradeFrom);\\n\\n  // Emitted if the contract gets destroyed\\n  event Destruct();\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Constructor\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Contruct WOWSSftMinter\\n   *\\n   * @param owner Owner of this contract\\n   * @param wowsToken The WOWS ERC-20 token contract\\n   * @param rewardHandler_ Handler which distributes\\n   * @param sftContract Cryptofolio SFT source\\n   */\\n  constructor(\\n    address owner,\\n    IERC20 wowsToken,\\n    IRewardHandler rewardHandler_,\\n    IWOWSERC1155 sftContract\\n  ) {\\n    // Validate parameters\\n    require(owner != address(0), 'O: 0 address');\\n    require(address(wowsToken) != address(0), 'WT: 0 address');\\n    require(address(rewardHandler_) != address(0), 'RH: 0 address');\\n    require(address(sftContract) != address(0), 'SFT: 0 address');\\n\\n    // Initialize {Ownable}\\n    transferOwnership(owner);\\n\\n    // Initialize state\\n    _sftContract = sftContract;\\n    _wowsToken = wowsToken;\\n    rewardHandler = rewardHandler_;\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // State modifiers\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Set prices for the given levels\\n   */\\n  function setPrices(uint16[] memory levels, uint256[] memory prices)\\n    external\\n    onlyOwner\\n  {\\n    // Validate parameters\\n    require(levels.length == prices.length, 'Length mismatch');\\n\\n    // Update state\\n    for (uint256 i = 0; i < levels.length; ++i)\\n      _pricePerLevel[levels[i]] = prices[i];\\n  }\\n\\n  /**\\n   * @dev Set new reward handler\\n   *\\n   * RewardHandler is by concept upgradeable / see investment::Controller.sol.\\n   */\\n  function setRewardHandler(IRewardHandler newRewardHandler)\\n    external\\n    onlyOwner\\n  {\\n    // Update state\\n    rewardHandler = newRewardHandler;\\n  }\\n\\n  /**\\n   * @dev Set Trade Floor\\n   */\\n  function setTradeFloor(address tradeFloor_) external onlyOwner {\\n    // Validate parameters\\n    require(tradeFloor_ != address(0), 'Invalid TF');\\n\\n    // Update state\\n    tradeFloor = tradeFloor_;\\n  }\\n\\n  /**\\n   * @dev Set SFT evaluator\\n   */\\n  function setSFTEvaluator(ISFTEvaluator sftEvaluator_) external onlyOwner {\\n    // Validate parameters\\n    require(address(sftEvaluator_) != address(0), 'Invalid TF');\\n\\n    // Update state\\n    sftEvaluator = sftEvaluator_;\\n  }\\n\\n  /**\\n   * @dev Set the limitations, the price and the handlers for CFolioItem SFT's\\n   */\\n  function setCFolioSpec(\\n    uint256[] calldata cFolioTypes,\\n    address[] calldata handlers,\\n    uint128[] calldata maxMint,\\n    uint256[] calldata prices,\\n    WOWSSftMinter oldMinter\\n  ) external onlyOwner {\\n    // Validate parameters\\n    require(\\n      cFolioTypes.length == handlers.length &&\\n        handlers.length == maxMint.length &&\\n        maxMint.length == prices.length,\\n      'Length mismatch'\\n    );\\n\\n    // Update state\\n    for (uint256 i = 0; i < cFolioTypes.length; ++i) {\\n      CFolioItemSft storage cfi = cfolioItemSfts[cFolioTypes[i]];\\n      cfi.handler = ICFolioItemHandler(handlers[i]);\\n      cfi.maxMintable = maxMint[i];\\n      cfi.price = prices[i];\\n\\n      uint256 j = 0;\\n      for (; j < cfolioItemHandlers.length; ++j) {\\n        if (address(cfolioItemHandlers[j]) == handlers[i]) break;\\n      }\\n      if (j == cfolioItemHandlers.length) {\\n        cfolioItemHandlers.push(ICFolioItemHandler(handlers[i]));\\n      }\\n    }\\n    if (address(oldMinter) != address(0)) {\\n      for (uint256 i = 0; i < cFolioTypes.length; ++i) {\\n        (, , uint128 numMinted, ) = oldMinter.cfolioItemSfts(cFolioTypes[i]);\\n        cfolioItemSfts[cFolioTypes[i]].numMinted = numMinted;\\n      }\\n      nextCFolioItemNft = oldMinter.nextCFolioItemNft();\\n    }\\n    emit CFolioSpecChanged(cFolioTypes, oldMinter);\\n  }\\n\\n  /**\\n   * @dev upgrades state from an existing WOWSSFTMinter\\n   */\\n  function destructContract() external onlyOwner {\\n    emit Destruct();\\n    selfdestruct(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Mint one of our stock card SFTs\\n   *\\n   * Approval of WOWS token required before the call.\\n   */\\n  function mintWowsSFT(\\n    address recipient,\\n    uint8 level,\\n    uint8 cardId\\n  ) external {\\n    // Validate parameters\\n    require(recipient != address(0), 'Invalid recipient');\\n\\n    // Load state\\n    uint256 price = _pricePerLevel[level];\\n\\n    // Validate state\\n    require(price > 0, 'No price available');\\n\\n    // Get the next free mintable token for level / cardId\\n    (bool success, uint256 tokenId) =\\n      _sftContract.getNextMintableTokenId(level, cardId);\\n    require(success, 'Unsufficient cards');\\n\\n    // Update state\\n    _mint(recipient, tokenId, price, 0);\\n  }\\n\\n  /**\\n   * @dev Mint a custom token\\n   *\\n   * Approval of WOWS token required before the call.\\n   */\\n  function mintCustomSFT(\\n    address recipient,\\n    uint8 level,\\n    string memory uri\\n  ) external {\\n    // Validate parameters\\n    require(recipient != address(0), 'Invalid recipient');\\n\\n    // Load state\\n    uint256 price = _pricePerLevel[0x100 + level];\\n\\n    // Validate state\\n    require(price > 0, 'No price available');\\n\\n    // Get the next free mintable token for level / cardId\\n    uint256 tokenId = _sftContract.getNextMintableCustomToken();\\n\\n    // Custom baseToken only allowed < 64Bit\\n    require(tokenId.isBaseCard(), 'Max tokenId reached');\\n\\n    // Set card level and uri\\n    _sftContract.setCustomCardLevel(tokenId, level);\\n    _sftContract.setCustomURI(tokenId, uri);\\n\\n    // Update state\\n    _mint(recipient, tokenId, price, 0);\\n  }\\n\\n  /**\\n   * @dev Mint a CFolioItem token\\n   *\\n   * Approval of WOWS token required before the call.\\n   *\\n   * Post-condition: `_setupCFolio` must be false.\\n   *\\n   * @param recipient Recipient of the SFT, unused if sftTokenId is != -1\\n   * @param cfolioItemType The item type of the SFT\\n   * @param sftTokenId If <> -1 recipient is the SFT c-folio / handler must be called\\n   * @param investAmounts Arguments needed for the handler (in general investments).\\n   * Investments may be zero if the user is just buying an SFT.\\n   */\\n  function mintCFolioItemSFT(\\n    address recipient,\\n    uint256 cfolioItemType,\\n    uint256 sftTokenId,\\n    uint256[] calldata investAmounts\\n  ) external {\\n    // Validate state\\n    require(!_setupCFolio, 'Already setting up');\\n    require(tradeFloor != address(0), 'TF not set');\\n    require(address(sftEvaluator) != address(0), 'SFTE not set');\\n\\n    // Validate parameters\\n    require(recipient != address(0), 'Invalid recipient');\\n\\n    // Load state\\n    CFolioItemSft storage sftData = cfolioItemSfts[cfolioItemType];\\n\\n    // Validate state\\n    require(address(sftData.handler) != address(0), 'CFI Minter: Invalid type');\\n    require(sftData.numMinted < sftData.maxMintable, 'CFI Minter: sold out');\\n\\n    address sftCFolio = address(0);\\n    if (sftTokenId != uint256(-1)) {\\n      require(sftTokenId.isBaseCard(), 'Invalid sftTokenId');\\n\\n      // Get the CFolio contract address, it will be the final recipient\\n      sftCFolio = _sftContract.tokenIdToAddress(sftTokenId);\\n      require(sftCFolio != address(0), 'Bad sftTokenId');\\n\\n      // Intermediate owner of the minted SFT\\n      recipient = address(this);\\n\\n      // Allow this contract to be an ERC1155 holder\\n      _setupCFolio = true;\\n    }\\n\\n    uint256 tokenId = nextCFolioItemNft++;\\n    require(tokenId.isCFolioCard(), 'Invalid cfolioItem tokenId');\\n\\n    sftEvaluator.setCFolioItemType(tokenId, cfolioItemType);\\n\\n    // Update state, mint SFT token\\n    sftData.numMinted += 1;\\n    _mint(recipient, tokenId, sftData.price, cfolioItemType);\\n\\n    // Let CFolioHandler setup the new minted token\\n    sftData.handler.setupCFolio(_msgSender(), tokenId, investAmounts);\\n\\n    // Check-effects-interaction not needed, as `_setupCFolio` can't be mutated\\n    // outside this function.\\n\\n    // If the SFT's c-folio is final recipient of c-folio item, we call the\\n    // handler and lock the c-folio item in the TradeFloor contract before we transfer\\n    // it to the SFT\\n    if (sftCFolio != address(0)) {\\n      // Lock the SFT into the TradeFloor contract\\n      IERC1155BurnMintable(address(_sftContract)).safeTransferFrom(\\n        address(this),\\n        tradeFloor,\\n        tokenId,\\n        1,\\n        abi.encodePacked(sftCFolio)\\n      );\\n\\n      // Reset the temporary state which allows holding ERC1155 token\\n      _setupCFolio = false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Claim rewards from all c-folio farms\\n   *\\n   * @param sftTokenId valid SFT tokenId, must not be locked in TF\\n   */\\n  function claimSFTRewards(uint256 sftTokenId) external {\\n    for (uint256 i = 0; i < cfolioItemHandlers.length; ++i) {\\n      cfolioItemHandlers[i].getRewards(msg.sender, sftTokenId);\\n    }\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // ERC1155Holder\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev We are a temorary token holder during CFolioToken mint step\\n   *\\n   * Only accept ERC1155 tokens during this setup.\\n   */\\n  function onERC1155Received(\\n    address,\\n    address,\\n    uint256,\\n    uint256,\\n    bytes memory\\n  ) external view returns (bytes4) {\\n    // Validate state\\n    require(_setupCFolio, 'Only during setup');\\n\\n    // Call ancestor\\n    return this.onERC1155Received.selector;\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Getters\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Query prices for given levels\\n   */\\n  function getPrices(uint16[] memory levels)\\n    external\\n    view\\n    returns (uint256[] memory)\\n  {\\n    uint256[] memory result = new uint256[](levels.length);\\n    for (uint256 i = 0; i < levels.length; ++i)\\n      result[i] = _pricePerLevel[levels[i]];\\n    return result;\\n  }\\n\\n  /**\\n   * @dev retrieve mint information about cfolioItem\\n   */\\n  function getCFolioSpec(uint256[] calldata cFolioTypes)\\n    external\\n    view\\n    returns (\\n      uint256[] memory prices,\\n      uint128[] memory numMinted,\\n      uint128[] memory maxMintable\\n    )\\n  {\\n    uint256 length = cFolioTypes.length;\\n    prices = new uint256[](length);\\n    numMinted = new uint128[](length);\\n    maxMintable = new uint128[](length);\\n\\n    for (uint256 i; i < length; ++i) {\\n      CFolioItemSft storage cfi = cfolioItemSfts[cFolioTypes[i]];\\n      prices[i] = cfi.price;\\n      numMinted[i] = cfi.numMinted;\\n      maxMintable[i] = cfi.maxMintable;\\n    }\\n  }\\n\\n  /**\\n   * @dev See {IWOWSSftMinter-tradeFloorTokenId}.\\n   */\\n  function tradeFloorTokenId(uint256 sftTokenId)\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    bytes memory hashData;\\n    uint256[] memory tokenIds;\\n    uint256 tokenIdsLength;\\n    if (sftTokenId.isBaseCard()) {\\n      // It's a base card, calculate hash using all cfolioItems\\n      address cfolio = _sftContract.tokenIdToAddress(sftTokenId);\\n      require(cfolio != address(0), 'WSM: src token invalid');\\n      (tokenIds, tokenIdsLength) = IWOWSCryptofolio(cfolio).getCryptofolio(\\n        address(this)\\n      );\\n      hashData = abi.encodePacked(address(this), sftTokenId);\\n    } else {\\n      // It's a cfolioItem itself, only calculate underlying value\\n      tokenIds = new uint256[](1);\\n      tokenIds[0] = sftTokenId;\\n      tokenIdsLength = 1;\\n    }\\n\\n    // Run through all cfolioItems and add let their single CFolioItemHandler\\n    // append hashable data\\n    for (uint256 i = 0; i < tokenIdsLength; ++i) {\\n      address cfolio =\\n        _sftContract.tokenIdToAddress(tokenIds[i].toSftTokenId());\\n      require(cfolio != address(0), 'WSM: item token invalid');\\n\\n      address handler = IWOWSCryptofolio(cfolio)._tradefloors(0);\\n      require(handler != address(0), 'WSM: item handler invalid');\\n\\n      hashData = ICFolioItemCallback(handler).appendHash(cfolio, hashData);\\n    }\\n\\n    uint256 hashNum = uint256(keccak256(hashData));\\n    return (hashNum ^ (hashNum << 128)).maskHash() | sftTokenId;\\n  }\\n\\n  /**\\n   * @dev Get all tokenIds from SFT and TF contract owned by account.\\n   */\\n  function getTokenIds(address account)\\n    external\\n    view\\n    returns (uint256[] memory sftTokenIds, uint256[] memory tfTokenIds)\\n  {\\n    require(account != address(0), 'Null address');\\n    sftTokenIds = _sftContract.getTokenIds(account);\\n    tfTokenIds = ITradeFloor(tradeFloor).getTokenIds(account);\\n  }\\n\\n  /**\\n   * @dev Get underlying information (cFolioItems / value) for given tokenIds.\\n   *\\n   * @param tokenIds the tokenIds information should be queried\\n   * @return result [%,MintTime,NumItems,[tokenId,type,numAssetValues,[assetValue]]]...\\n   */\\n  function getTokenInformation(uint256[] calldata tokenIds)\\n    external\\n    view\\n    returns (bytes memory result)\\n  {\\n    uint256[] memory cFolioItems;\\n    uint256[] memory oneCFolioItem = new uint256[](1);\\n    uint256 cfolioLength;\\n    uint256 rewardRate;\\n    uint256 timestamp;\\n\\n    for (uint256 i = 0; i < tokenIds.length; ++i) {\\n      if (tokenIds[i].isBaseCard()) {\\n        // Only main TradeFloor supported\\n        uint256 sftTokenId = tokenIds[i].toSftTokenId();\\n        address cfolio = _sftContract.tokenIdToAddress(sftTokenId);\\n        if (address(cfolio) != address(0)) {\\n          (cFolioItems, cfolioLength) = IWOWSCryptofolio(cfolio).getCryptofolio(\\n            tradeFloor\\n          );\\n        } else {\\n          cFolioItems = oneCFolioItem;\\n          cfolioLength = 0;\\n        }\\n\\n        rewardRate = sftEvaluator.rewardRate(tokenIds[i]);\\n        (timestamp, ) = _sftContract.getTokenData(sftTokenId);\\n      } else {\\n        oneCFolioItem[0] = tokenIds[i];\\n        cfolioLength = 1;\\n        cFolioItems = oneCFolioItem; // Reference, no copy\\n        rewardRate = 0;\\n        timestamp = 0;\\n      }\\n\\n      result = abi.encodePacked(result, rewardRate, timestamp, cfolioLength);\\n\\n      for (uint256 j = 0; j < cfolioLength; ++j) {\\n        uint256 sftTokenId = cFolioItems[j].toSftTokenId();\\n        uint256 cfolioType = sftEvaluator.getCFolioItemType(sftTokenId);\\n        uint256[] memory amounts;\\n\\n        address cfolio = _sftContract.tokenIdToAddress(sftTokenId);\\n        if (address(cfolio) != address(0)) {\\n          address handler = IWOWSCryptofolio(cfolio)._tradefloors(0);\\n          if (handler != address(0))\\n            amounts = ICFolioItemHandler(handler).getAmounts(cfolio);\\n        }\\n\\n        result = abi.encodePacked(\\n          result,\\n          cFolioItems[j],\\n          cfolioType,\\n          amounts.length,\\n          amounts\\n        );\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Get balances of given ERC20 addresses.\\n   */\\n  function getErc20Balances(address account, address[] calldata erc20)\\n    external\\n    view\\n    returns (uint256[] memory amounts)\\n  {\\n    amounts = new uint256[](erc20.length);\\n    for (uint256 i = 0; i < erc20.length; ++i)\\n      amounts[i] = erc20[i] == address(0)\\n        ? 0\\n        : IERC20(erc20[i]).balanceOf(account);\\n  }\\n\\n  /**\\n   * @dev Get allowances of given ERC20 addresses.\\n   */\\n  function getErc20Allowances(\\n    address account,\\n    address[] calldata spender,\\n    address[] calldata erc20\\n  ) external view returns (uint256[] memory amounts) {\\n    // Validate parameters\\n    require(spender.length == erc20.length, 'Length mismatch');\\n\\n    amounts = new uint256[](spender.length);\\n    for (uint256 i = 0; i < spender.length; ++i)\\n      amounts[i] = erc20[i] == address(0)\\n        ? 0\\n        : IERC20(erc20[i]).allowance(account, spender[i]);\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Internal functionality\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  function _mint(\\n    address recipient,\\n    uint256 tokenId,\\n    uint256 price,\\n    uint256 cfolioType\\n  ) internal {\\n    // Transfer WOWS from user to reward handler\\n    if (price > 0)\\n      _wowsToken.safeTransferFrom(_msgSender(), address(rewardHandler), price);\\n\\n    // Mint the token\\n    IERC1155BurnMintable(address(_sftContract)).mint(recipient, tokenId, 1, '');\\n\\n    // Distribute the rewards\\n    if (price > 0) rewardHandler.distribute2(recipient, price, ALL);\\n\\n    // Log event\\n    emit Mint(recipient, tokenId, price, cfolioType);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/src/investment/interfaces/IRewardHandler.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2020-2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\ninterface IRewardHandler {\\n  /**\\n   * @dev Transfer reward and distribute the fee\\n   *\\n   * This is the new implementation of distribute() which uses internal fees\\n   * defined in the {RewardHandler} contract.\\n   *\\n   * @param recipient The recipient of the reward\\n   * @param amount The amount of WOWS to transfer to the recipient\\n   * @param fee The reward fee in 1e6 factor notation\\n   */\\n\\n  function distribute2(\\n    address recipient,\\n    uint256 amount,\\n    uint32 fee\\n  ) external;\\n\\n  /**\\n   * @dev Transfer reward and distribute the fee\\n   *\\n   * This is the current implementation, needed for backward compatibility.\\n   *\\n   * Current ERC1155Minter and Controller call this function, later\\n   * reward handler clients should call the the new one with internal\\n   * fees specified in this contract.\\n   *\\n   * uint32 values are in 1e6 factor notation.\\n   */\\n  function distribute(\\n    address recipient,\\n    uint256 amount,\\n    uint32 fee,\\n    uint32 toTeam,\\n    uint32 toMarketing,\\n    uint32 toBooster,\\n    uint32 toRewardPool\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/token/interfaces/ICFolioItemCallback.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See LICENSE.txt for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\n/**\\n * @dev Interface to receive callbacks when minted tokens are burnt\\n */\\ninterface ICFolioItemCallback {\\n  /**\\n   * @dev Called when a TradeFloor CFolioItem is transfered\\n   *\\n   * In case of mint `from` is address(0).\\n   * In case of burn `to` is address(0).\\n   *\\n   * cfolioHandlers are passed to let each cfolioHandler filter for its own\\n   * token. This eliminates the need for creating separate lists.\\n   *\\n   * @param from The account sending the token\\n   * @param to The account receiving the token\\n   * @param tokenIds The ERC-1155 token IDs\\n   * @param cfolioHandlers cFolioItem handlers\\n   */\\n  function onCFolioItemsTransferedFrom(\\n    address from,\\n    address to,\\n    uint256[] calldata tokenIds,\\n    address[] calldata cfolioHandlers\\n  ) external;\\n\\n  /**\\n   * @dev Append data we use later for hashing\\n   *\\n   * @param cfolioItem The token ID of the c-folio item\\n   * @param current The current data being hashes\\n   *\\n   * @return The current data, with internal data appended\\n   */\\n  function appendHash(address cfolioItem, bytes calldata current)\\n    external\\n    view\\n    returns (bytes memory);\\n\\n  /**\\n   * @dev get custom uri for tokenId\\n   */\\n  function uri(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/src/token/interfaces/IERC1155BurnMintable.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\n\\ninterface IERC1155BurnMintable is IERC1155 {\\n  /**\\n   * @dev Mint amount new tokens at ID `tokenId` (MINTER_ROLE required)\\n   */\\n  function mint(\\n    address to,\\n    uint256 tokenId,\\n    uint256 amount,\\n    bytes memory data\\n  ) external;\\n\\n  /**\\n   * @dev Mint new token amounts at IDs `tokenIds` (MINTER_ROLE required)\\n   */\\n  function mintBatch(\\n    address to,\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata amounts,\\n    bytes memory data\\n  ) external;\\n\\n  /**\\n   * @dev Burn value amount of tokens with ID `tokenId`.\\n   *\\n   * Caller must be approvedForAll.\\n   */\\n  function burn(\\n    address account,\\n    uint256 tokenId,\\n    uint256 value\\n  ) external;\\n\\n  /**\\n   * @dev Burn `values` amounts of tokens with IDs `tokenIds`.\\n   *\\n   * Caller must be approvedForAll.\\n   */\\n  function burnBatch(\\n    address account,\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata values\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/token/interfaces/ITradeFloor.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\n/**\\n * @notice Cryptofolio and tokenId interface\\n */\\ninterface ITradeFloor {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Getters\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Return all tokenIds owned by account\\n   */\\n  function getTokenIds(address account)\\n    external\\n    view\\n    returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/src/token/interfaces/IWOWSCryptofolio.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\n/**\\n * @notice Cryptofolio interface\\n */\\ninterface IWOWSCryptofolio {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Initialization\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Initialize the deployed contract after creation\\n   *\\n   * This is a one time call which sets _deployer to msg.sender.\\n   * Subsequent calls reverts.\\n   */\\n  function initialize() external;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Getters\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Return tradefloor at given index\\n   *\\n   * @param index The 0-based index in the tradefloor array\\n   *\\n   * @return The address of the tradefloor and position index\\n   */\\n  function _tradefloors(uint256 index) external view returns (address);\\n\\n  /**\\n   * @dev Return array of cryptofolio item token IDs\\n   *\\n   * The token IDs belong to the contract TradeFloor.\\n   *\\n   * @param tradefloor The TradeFloor that items belong to\\n   *\\n   * @return tokenIds The token IDs in scope of operator\\n   * @return idsLength The number of valid token IDs\\n   */\\n  function getCryptofolio(address tradefloor)\\n    external\\n    view\\n    returns (uint256[] memory tokenIds, uint256 idsLength);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // State modifiers\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Set the owner of the underlying NFT\\n   *\\n   * This function is called if ownership of the parent NFT has changed.\\n   *\\n   * The new owner gets allowance to transfer cryptofolio items. The new owner\\n   * is allowed to transfer / burn cryptofolio items. Make sure that allowance\\n   * is removed from previous owner.\\n   *\\n   * @param owner The new owner of the underlying NFT, or address(0) if the\\n   * underlying NFT is being burned\\n   */\\n  function setOwner(address owner) external;\\n\\n  /**\\n   * @dev Allow owner (of parent NFT) to approve external operators to transfer\\n   * our cryptofolio items\\n   *\\n   * The NFT owner is allowed to approve operator to handle cryptofolios.\\n   *\\n   * @param operator The operator\\n   * @param allow True to approve for all NFTs, false to revoke approval\\n   */\\n  function setApprovalForAll(address operator, bool allow) external;\\n\\n  /**\\n   * @dev Burn all cryptofolio items\\n   *\\n   * In case an underlying NFT is burned, we also burn the cryptofolio.\\n   */\\n  function burn() external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/token/interfaces/IWOWSERC1155.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\n/**\\n * @notice Cryptofolio interface\\n */\\ninterface IWOWSERC1155 {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Getters\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Check if the specified address is a known tradefloor\\n   *\\n   * @param account The address to check\\n   *\\n   * @return True if the address is a known tradefloor, false otherwise\\n   */\\n  function isTradeFloor(address account) external view returns (bool);\\n\\n  /**\\n   * @dev Get the token ID of a given address\\n   *\\n   * A cross check is required because token ID 0 is valid.\\n   *\\n   * @param tokenAddress The address to convert to a token ID\\n   *\\n   * @return The token ID on success, or uint256(-1) if `tokenAddress` does not\\n   * belong to a token ID\\n   */\\n  function addressToTokenId(address tokenAddress)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Get the address for a given token ID\\n   *\\n   * @param tokenId The token ID to convert\\n   *\\n   * @return The address, or address(0) in case the token ID does not belong\\n   * to an NFT\\n   */\\n  function tokenIdToAddress(uint256 tokenId) external view returns (address);\\n\\n  /**\\n   * @dev Get the next mintable token ID for the specified card\\n   *\\n   * @param level The level of the card\\n   * @param cardId The ID of the card\\n   *\\n   * @return bool True if a free token ID was found, false otherwise\\n   * @return uint256 The first free token ID if one was found, or invalid otherwise\\n   */\\n  function getNextMintableTokenId(uint8 level, uint8 cardId)\\n    external\\n    view\\n    returns (bool, uint256);\\n\\n  /**\\n   * @dev Return the next mintable custom token ID\\n   */\\n  function getNextMintableCustomToken() external view returns (uint256);\\n\\n  /**\\n   * @dev Return the level and the mint timestamp of tokenId\\n   *\\n   * @param tokenId The tokenId to query\\n   *\\n   * @return mintTimestamp The timestamp token was minted\\n   * @return level The level token belongs to\\n   */\\n  function getTokenData(uint256 tokenId)\\n    external\\n    view\\n    returns (uint64 mintTimestamp, uint8 level);\\n\\n  /**\\n   * @dev Return all tokenIds owned by account\\n   */\\n  function getTokenIds(address account)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // State modifiers\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Set the base URI for either predefined cards or custom cards\\n   * which don't have it's own URI.\\n   *\\n   * The resulting uri is baseUri+[hex(tokenId)] + '.json'. where\\n   * tokenId will be reduces to upper 16 bit (>> 16) before building the hex string.\\n   *\\n   */\\n  function setBaseMetadataURI(string memory baseContractMetadata) external;\\n\\n  /**\\n   * @dev Set the contracts metadata URI\\n   *\\n   * @param contractMetadataURI The URI which point to the contract metadata file.\\n   */\\n  function setContractMetadataURI(string memory contractMetadataURI) external;\\n\\n  /**\\n   * @dev Set the URI for a custom card\\n   *\\n   * @param tokenId The token ID whose URI is being set.\\n   * @param customURI The URI which point to an unique metadata file.\\n   */\\n  function setCustomURI(uint256 tokenId, string memory customURI) external;\\n\\n  /**\\n   * @dev Each custom card has its own level. Level will be used when\\n   * calculating rewards and raiding power.\\n   *\\n   * @param tokenId The ID of the token whose level is being set\\n   * @param cardLevel The new level of the specified token\\n   */\\n  function setCustomCardLevel(uint256 tokenId, uint8 cardLevel) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/utils/TokenIds.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See LICENSE.txt for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\nlibrary TokenIds {\\n  // 128 bit underlying hash\\n  uint256 public constant HASH_MASK = (1 << 128) - 1;\\n\\n  function isBaseCard(uint256 tokenId) internal pure returns (bool) {\\n    return (tokenId & HASH_MASK) < (1 << 64);\\n  }\\n\\n  function isStockCard(uint256 tokenId) internal pure returns (bool) {\\n    return (tokenId & HASH_MASK) < (1 << 32);\\n  }\\n\\n  function isCFolioCard(uint256 tokenId) internal pure returns (bool) {\\n    return\\n      (tokenId & HASH_MASK) >= (1 << 64) && (tokenId & HASH_MASK) < (1 << 128);\\n  }\\n\\n  function toSftTokenId(uint256 tokenId) internal pure returns (uint256) {\\n    return tokenId & HASH_MASK;\\n  }\\n\\n  function maskHash(uint256 tokenId) internal pure returns (uint256) {\\n    return tokenId & ~HASH_MASK;\\n  }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"wowsToken\",\"type\":\"address\"},{\"internalType\":\"contract IRewardHandler\",\"name\":\"rewardHandler_\",\"type\":\"address\"},{\"internalType\":\"contract IWOWSERC1155\",\"name\":\"sftContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"contract WOWSSftMinter\",\"name\":\"upgradeFrom\",\"type\":\"address\"}],\"name\":\"CFolioSpecChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Destruct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cfolioType\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"_pricePerLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cfolioItemSfts\",\"outputs\":[{\"internalType\":\"contract ICFolioItemHandler\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"numMinted\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxMintable\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sftTokenId\",\"type\":\"uint256\"}],\"name\":\"claimSFTRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destructContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"cFolioTypes\",\"type\":\"uint256[]\"}],\"name\":\"getCFolioSpec\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint128[]\",\"name\":\"numMinted\",\"type\":\"uint128[]\"},{\"internalType\":\"uint128[]\",\"name\":\"maxMintable\",\"type\":\"uint128[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"spender\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"erc20\",\"type\":\"address[]\"}],\"name\":\"getErc20Allowances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"erc20\",\"type\":\"address[]\"}],\"name\":\"getErc20Balances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"levels\",\"type\":\"uint16[]\"}],\"name\":\"getPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"sftTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tfTokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getTokenInformation\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cfolioItemType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"investAmounts\",\"type\":\"uint256[]\"}],\"name\":\"mintCFolioItemSFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"mintCustomSFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"cardId\",\"type\":\"uint8\"}],\"name\":\"mintWowsSFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextCFolioItemNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardHandler\",\"outputs\":[{\"internalType\":\"contract IRewardHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"cFolioTypes\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"handlers\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"maxMint\",\"type\":\"uint128[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"contract WOWSSftMinter\",\"name\":\"oldMinter\",\"type\":\"address\"}],\"name\":\"setCFolioSpec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"levels\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewardHandler\",\"name\":\"newRewardHandler\",\"type\":\"address\"}],\"name\":\"setRewardHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISFTEvaluator\",\"name\":\"sftEvaluator_\",\"type\":\"address\"}],\"name\":\"setSFTEvaluator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradeFloor_\",\"type\":\"address\"}],\"name\":\"setTradeFloor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sftEvaluator\",\"outputs\":[{\"internalType\":\"contract ISFTEvaluator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeFloor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sftTokenId\",\"type\":\"uint256\"}],\"name\":\"tradeFloorTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WOWSSftMinter","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000bb5a7c17ade983f03afd8b09922b1c117b9eabc0000000000000000000000000672ef7e4fe230b5ca1466c5fdd40588d30fdf90a0000000000000000000000000a771ee99e9b106b2ec035788911f22b56a541df00000000000000000000000064b3342db643f3fb4da5781b6d09b44ab4668de4","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":""}]}