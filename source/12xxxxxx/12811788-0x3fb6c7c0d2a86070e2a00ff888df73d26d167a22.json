{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/sameep/projects/solo/contracts/external/oracles/WethPriceOracle.sol\": {\r\n      \"content\": \"/*\\n\\n    Copyright 2019 dYdX Trading Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n\\npragma solidity 0.5.7;\\npragma experimental ABIEncoderV2;\\n\\nimport { IPriceOracle } from \\\"../../protocol//interfaces/IPriceOracle.sol\\\";\\nimport { Monetary } from \\\"../../protocol/lib/Monetary.sol\\\";\\nimport { AggregatorV3Interface } from \\\"@chainlink/contracts/src/v0.5/interfaces/AggregatorV3Interface.sol\\\";\\n\\n\\n/**\\n * @title WethPriceOracle\\n *\\n * PriceOracle that returns the price of Wei in USD\\n */\\ncontract WethPriceOracle is\\n    IPriceOracle\\n{\\n    // ============ Storage ============\\n    AggregatorV3Interface public priceFeed;\\n    \\n    uint256 constant MULTIPIER_DECIMALS = 10;\\n\\n    // ============ Constructor =============\\n\\n    constructor(\\n        address _priceFeed\\n    )\\n        public\\n    {\\n        priceFeed =  AggregatorV3Interface(_priceFeed);\\n    }\\n\\n    // ============ IPriceOracle Functions =============\\n\\n    function getPrice(\\n        address /* token */\\n    )\\n        public\\n        view\\n        returns (Monetary.Price memory)\\n    {\\n        (\\n            ,\\n            int price,\\n            ,\\n            ,\\n        ) = priceFeed.latestRoundData();\\n\\n        uint256 finalPrice = uint256(price) * (10 ** MULTIPIER_DECIMALS);\\n\\n        return Monetary.Price({ value: uint256(finalPrice) });\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/sameep/projects/solo/contracts/protocol/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"/*\\n\\n    Copyright 2019 dYdX Trading Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n\\npragma solidity 0.5.7;\\npragma experimental ABIEncoderV2;\\n\\nimport { Monetary } from \\\"../lib/Monetary.sol\\\";\\n\\n\\n/**\\n * @title IPriceOracle\\n * @author dYdX\\n *\\n * Interface that Price Oracles for Solo must implement in order to report prices.\\n */\\ncontract IPriceOracle {\\n\\n    // ============ Constants ============\\n\\n    uint256 public constant ONE_DOLLAR = 10 ** 36;\\n\\n    // ============ Public Functions ============\\n\\n    /**\\n     * Get the price of a token\\n     *\\n     * @param  token  The ERC20 token address of the market\\n     * @return        The USD price of a base unit of the token, then multiplied by 10^36.\\n     *                So a USD-stable coin with 18 decimal places would return 10^18.\\n     *                This is the price of the base unit rather than the price of a \\\"human-readable\\\"\\n     *                token amount. Every ERC20 may have a different number of decimals.\\n     */\\n    function getPrice(\\n        address token\\n    )\\n        public\\n        view\\n        returns (Monetary.Price memory);\\n}\\n\"\r\n    },\r\n    \"/home/sameep/projects/solo/contracts/protocol/lib/Monetary.sol\": {\r\n      \"content\": \"/*\\n\\n    Copyright 2019 dYdX Trading Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n*/\\n\\npragma solidity 0.5.7;\\npragma experimental ABIEncoderV2;\\n\\n\\n/**\\n * @title Monetary\\n * @author dYdX\\n *\\n * Library for types involving money\\n */\\nlibrary Monetary {\\n\\n    /*\\n     * The price of a base-unit of an asset.\\n     */\\n    struct Price {\\n        uint256 value;\\n    }\\n\\n    /*\\n     * Total value of an some amount of an asset. Equal to (price * amount).\\n     */\\n    struct Value {\\n        uint256 value;\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.5/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"components\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONE_DOLLAR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_priceFeed\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"WethPriceOracle","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419","EVMVersion":"byzantium","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}