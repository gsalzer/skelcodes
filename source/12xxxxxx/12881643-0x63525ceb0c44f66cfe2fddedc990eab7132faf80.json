{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/Projects/Chainenable/iTrust/iTrust Insure dApp/contracts/External/IDistributor.sol\": {\r\n      \"content\": \"/* Copyright (C) 2021 NexusMutual.io\\r\\n  This program is free software: you can redistribute it and/or modify\\r\\n    it under the terms of the GNU General Public License as published by\\r\\n    the Free Software Foundation, either version 3 of the License, or\\r\\n    (at your option) any later version.\\r\\n  This program is distributed in the hope that it will be useful,\\r\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n    GNU General Public License for more details.\\r\\n  You should have received a copy of the GNU General Public License\\r\\n    along with this program.  If not, see http://www.gnu.org/licenses/ */\\r\\n\\r\\npragma solidity ^0.7.5;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\ninterface IDistributor is IERC721{\\r\\n  enum ClaimStatus { IN_PROGRESS, ACCEPTED, REJECTED }\\r\\n\\r\\n  event ClaimPayoutRedeemed (\\r\\n    uint indexed coverId,\\r\\n    uint indexed claimId,\\r\\n    address indexed receiver,\\r\\n    uint amountPaid,\\r\\n    address coverAsset\\r\\n  );\\r\\n\\r\\n  event ClaimSubmitted (\\r\\n    uint indexed coverId,\\r\\n    uint indexed claimId,\\r\\n    address indexed submitter\\r\\n  );\\r\\n\\r\\n  event CoverBought (\\r\\n    uint indexed coverId,\\r\\n    address indexed buyer,\\r\\n    address indexed contractAddress,\\r\\n    uint feePercentage,\\r\\n    uint coverPrice\\r\\n  );\\r\\n\\r\\n\\r\\n  function buyCover (\\r\\n    address contractAddress,\\r\\n    address coverAsset,\\r\\n    uint sumAssured,\\r\\n    uint16 coverPeriod,\\r\\n    uint8 coverType,\\r\\n    uint maxPriceWithFee,\\r\\n    bytes calldata data\\r\\n  )\\r\\n    external\\r\\n    payable\\r\\n    returns (uint);\\r\\n\\r\\n\\r\\n  function submitClaim(\\r\\n    uint tokenId,\\r\\n    bytes calldata data\\r\\n  )\\r\\n    external\\r\\n    \\r\\n    returns (uint);\\r\\n  \\r\\n  function redeemClaim(\\r\\n    uint256 tokenId,\\r\\n    uint claimId\\r\\n  )\\r\\n    external;\\r\\n\\r\\n \\r\\n  function executeCoverAction(uint tokenId, uint assetAmount, address asset, uint8 action, bytes calldata data)\\r\\n    external\\r\\n    payable\\r\\n  returns (bytes memory response, uint withheldAmount);\\r\\n\\r\\n  function getCover(uint tokenId)\\r\\n  external\\r\\n  view\\r\\n  returns (\\r\\n    uint8 status,\\r\\n    uint sumAssured,\\r\\n    uint16 coverPeriod,\\r\\n    uint validUntil,\\r\\n    address contractAddress,\\r\\n    address coverAsset,\\r\\n    uint premiumInNXM,\\r\\n    address memberAddress\\r\\n  );\\r\\n\\r\\n  function getPayoutOutcome(uint claimId)\\r\\n  external\\r\\n  view\\r\\n  returns (ClaimStatus status, uint amountPaid, address coverAsset);\\r\\n  \\r\\n  function approveNXM(address spender, uint256 amount) external; \\r\\n\\r\\n  function withdrawNXM(address recipient, uint256 amount) external; \\r\\n \\r\\n  function switchMembership(address newAddress) external ;\\r\\n\\r\\n  function sellNXM(uint nxmIn, uint minEthOut) external;\\r\\n \\r\\n  function setBuysAllowed(bool _buysAllowed) external;\\r\\n  \\r\\n  function setTreasury(address payable _treasury) external;\\r\\n\\r\\n  function setFeePercentage(uint _feePercentage) external;\\r\\n\\r\\n  // function ownerOf(uint256 tokenId) external override view returns (address);\\r\\n  // function isApprovedForAll(address owner, address operator) external override view returns (bool);\\r\\n  function owner() external view returns (address);\\r\\n  function transferOwnership(address newOwner) external;\\r\\n\\r\\n}\"\r\n    },\r\n    \"/C/Projects/Chainenable/iTrust/iTrust Insure dApp/contracts/External/INXMaster.sol\": {\r\n      \"content\": \"  \\r\\n/* Copyright (C) 2021 NexusMutual.io\\r\\n  This program is free software: you can redistribute it and/or modify\\r\\n    it under the terms of the GNU General Public License as published by\\r\\n    the Free Software Foundation, either version 3 of the License, or\\r\\n    (at your option) any later version.\\r\\n  This program is distributed in the hope that it will be useful,\\r\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n    GNU General Public License for more details.\\r\\n  You should have received a copy of the GNU General Public License\\r\\n    along with this program.  If not, see http://www.gnu.org/licenses/ */\\r\\n\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface INXMaster {\\r\\n\\r\\n    function masterInitialized() external view returns(bool);\\r\\n\\r\\n    function isPause() external view returns(bool check);\\r\\n\\r\\n    function isMember(address _add) external view returns(bool);\\r\\n\\r\\n    function getLatestAddress(bytes2 _contractName) external view returns(address payable contractAddress);\\r\\n\\r\\n    function tokenAddress() external view returns (address);\\r\\n\\r\\n    function closeClaim(uint _claimId) external;\\r\\n}\"\r\n    },\r\n    \"/C/Projects/Chainenable/iTrust/iTrust Insure dApp/contracts/contracts/iTrustInsureV2_1.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\nimport \\\"./../External/INXMaster.sol\\\";\\r\\nimport \\\"./../External/IDistributor.sol\\\";\\r\\n\\r\\n\\r\\n/// @author iTrust Dev Team\\r\\n/// @title Insurance contract for exchanges to purchase Nexus Mutual cover\\r\\ncontract ITrustInsureV2_1\\r\\n{\\r\\n    using SafeMathUpgradeable for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    enum CoverClaimStatus { \\r\\n        NoActiveClaim, \\r\\n        Processing, \\r\\n        PaymentReady, \\r\\n        Complete, \\r\\n        Rejected \\r\\n    }\\r\\n\\r\\n    struct Exchange {\\r\\n        bool active;\\r\\n        uint256 feePercentage;\\r\\n        address payable treasuryAddress;\\r\\n        string name;\\r\\n        uint256[] coverIds;\\r\\n    }\\r\\n\\r\\n    struct User {\\r\\n        address walletAddress;\\r\\n        uint256[] coverIds;\\r\\n    }\\r\\n\\r\\n    struct CoverData {\\r\\n        uint256 coverId;\\r\\n        uint8 status;\\r\\n        uint256 sumAssured;\\r\\n        uint16 coverPeriod;\\r\\n        uint256 validUntil;\\r\\n        address contractAddress;\\r\\n        address coverAsset;\\r\\n        uint256 premiumInNXM;\\r\\n        address memberAddress;\\r\\n        uint256 claimId;        \\r\\n        uint256 claimStatus;\\r\\n        uint256 claimAmountPaid;\\r\\n        address claimAsset;    \\r\\n        bool claimsAllowed;\\r\\n        bool claimed;\\r\\n        bool iTrustOwned;\\r\\n    }\\r\\n\\r\\n    uint8 internal constant FALSE = 0;\\r\\n    uint8 internal constant TRUE = 1;\\r\\n    bool internal _paused;\\r\\n    uint256 internal _iTrustFeePercentage;\\r\\n    uint256 public addressRequestFee;\\r\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n    address payable public iTrustTreasury;\\r\\n    address internal _nxmTokenAddress;\\r\\n    address internal _distributorAddress;\\r\\n    address[] internal _exchangeList;\\r\\n    \\r\\n    string[] internal _userIds;\\r\\n    uint8 internal LOCKED;\\r\\n    mapping (address => uint8) internal _adminList;\\r\\n    mapping(address => Exchange) internal _exchanges;\\r\\n    mapping(uint256 => address) internal _exchangeLocations;\\r\\n    mapping(address => string) internal _addressRequests;\\r\\n    mapping(string => User) internal _userPolicies;\\r\\n    mapping(uint256 => uint256) internal _claimIds; //key is coverid\\r\\n    mapping(uint256 => uint256) internal _claimedAmounts; //key is coverid\\r\\n    mapping(uint256 => uint8) internal _claimCount;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract has been initialized.\\r\\n     */\\r\\n    bool private _initialized;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract is in the process of being initialized.\\r\\n     */\\r\\n    bool private _initializing;\\r\\n   \\r\\n    uint constant DIV_PRECISION = 10000;\\r\\n\\r\\n    event ITrustClaimPayoutRedeemed (\\r\\n        uint indexed coverId,\\r\\n        uint indexed claimId,\\r\\n        address indexed receiver,\\r\\n        uint amountPaid,\\r\\n        address coverAsset\\r\\n    );\\r\\n    event ITrustCoverBought(\\r\\n        uint256 indexed coverId,\\r\\n        address buyer,\\r\\n        address indexed exchange,\\r\\n        address contractAddress,\\r\\n        uint256 coverPrice,\\r\\n        bytes coverData,\\r\\n        uint256 indexed timeStamp\\r\\n    );\\r\\n\\r\\n    function nonReentrant() internal {\\r\\n        require(LOCKED == FALSE, \\\"reentrant call\\\");        \\r\\n    }\\r\\n\\r\\n    function onlyAdmin() internal view {\\r\\n        require(\\r\\n            _adminList[msg.sender] ==TRUE,\\r\\n            \\\"not an admin\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function ifNotPaused() internal view{\\r\\n        require(!_paused, \\\"Contract Frozen\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice upgradeable contract initialise\\r\\n    /// @param distributorAddress - address of distributor contract\\r\\n    /// @param treasury - itrust treasury address\\r\\n    /// @param iTrustFeePercentage - percentage of cover price    \\r\\n    function initialize(\\r\\n        address payable distributorAddress,\\r\\n        address payable treasury,\\r\\n        uint256 iTrustFeePercentage,\\r\\n        address apiAddress,\\r\\n        address nxMasterAddress\\r\\n    ) initializer external {\\r\\n        \\r\\n        _adminList[msg.sender] =TRUE;\\r\\n        _adminList[apiAddress] =TRUE;\\r\\n        _adminList[treasury] =TRUE;\\r\\n        \\r\\n        iTrustTreasury = treasury;\\r\\n        _iTrustFeePercentage = iTrustFeePercentage;\\r\\n        _distributorAddress = distributorAddress;\\r\\n        \\r\\n        _nxmTokenAddress = INXMaster(nxMasterAddress).tokenAddress();\\r\\n        LOCKED = FALSE;\\r\\n    }\\r\\n    \\r\\n    /// @dev - reinitialises distributor in contract\\r\\n    /// @param distributorAddress - address of distributor\\r\\n    function setDistributor(address distributorAddress) \\r\\n        external \\r\\n    {\\r\\n        onlyAdmin();\\r\\n        _distributorAddress = distributorAddress;\\r\\n    }\\r\\n    \\r\\n    /// @dev list of users    \\r\\n    function getGuids() external view returns (string[] memory) {\\r\\n        return _userIds;\\r\\n    }\\r\\n    \\r\\n    /// @dev extracts price from cover data\\r\\n    function _getCoverPrice(bytes calldata data) internal pure returns (uint256) {\\r\\n        uint256 price;\\r\\n        uint256 priceInNXM;\\r\\n        uint256 expiresAt;\\r\\n        uint256 generatedAt;\\r\\n        uint8 v;\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n        (price, priceInNXM, expiresAt, generatedAt, v, r, s) = abi.decode(\\r\\n            data,\\r\\n            (uint256, uint256, uint256, uint256, uint8, bytes32, bytes32)\\r\\n        );\\r\\n        return price;\\r\\n    }\\r\\n\\r\\n    /// @dev buy cover on distributor contract\\r\\n    /// @param exchangeAddress - address of exchange purchasing cover\\r\\n    /// @param contractAddress - address of contract for cover\\r\\n    /// @param coverAsset - address of asset\\r\\n    /// @param sumAssured - amount of cover,\\r\\n    /// @param coverPeriod - length of cover\\r\\n    /// @param coverType - type of cover\\r\\n    /// @param userGUID - user identifier returned by quote api\\r\\n    /// @param coverData - signature of quote returned by quote api\\r\\n    /// @return cover id for purchased cover\\r\\n    function buyCover(\\r\\n        address exchangeAddress,\\r\\n        address contractAddress,\\r\\n        address coverAsset,\\r\\n        uint256 sumAssured,\\r\\n        uint16 coverPeriod,\\r\\n        uint8 coverType,\\r\\n        string memory userGUID,\\r\\n        bytes calldata coverData\\r\\n    ) \\r\\n        external \\r\\n        payable        \\r\\n    returns (uint256) {\\r\\n        nonReentrant();\\r\\n        ifNotPaused();\\r\\n        LOCKED = TRUE;\\r\\n        \\r\\n        require(msg.value == _iTrustFeePercentage.mul(_getCoverPrice(coverData)).div(DIV_PRECISION).add(_getCoverPrice(coverData))\\r\\n                , \\\"Eth Sent and Price Mismatch\\\" );\\r\\n         \\r\\n        Exchange memory purchaseExchange = _exchanges[address(exchangeAddress)];\\r\\n        require(\\r\\n            purchaseExchange.treasuryAddress != address(0) && purchaseExchange.active,\\r\\n            \\\"iTrust: Inactive exchange\\\"\\r\\n        );\\r\\n        \\r\\n        \\r\\n        uint256 coverId = getDistributorContract().buyCover{ value: msg.value }(\\r\\n                contractAddress,\\r\\n                coverAsset,\\r\\n                sumAssured,\\r\\n                coverPeriod,\\r\\n                coverType,\\r\\n                msg.value, //max cover price with fee\\r\\n                coverData\\r\\n            );\\r\\n    \\r\\n        \\r\\n        _saveCoverDetails(userGUID, coverId, purchaseExchange.treasuryAddress);\\r\\n\\r\\n        //send funds to exchange\\r\\n        require(\\r\\n            address(this).balance >= msg.value.sub(_getCoverPrice(coverData)),\\r\\n             \\\"iTrust: Insufficient ETH left for commission\\\"\\r\\n        );\\r\\n        uint256 exchangeCommission;\\r\\n        if (purchaseExchange.feePercentage > 0) {\\r\\n             exchangeCommission = _getCoverPrice(coverData)\\r\\n                 .mul(purchaseExchange.feePercentage)\\r\\n                 .div(DIV_PRECISION);\\r\\n        }        \\r\\n        \\r\\n        iTrustTreasury.transfer(msg.value.sub(_getCoverPrice(coverData)).sub(exchangeCommission));\\r\\n\\r\\n        if (exchangeCommission > 0) {                                        \\r\\n            purchaseExchange.treasuryAddress.transfer(exchangeCommission);\\r\\n        }\\r\\n        //transfer NFT to itrust Treasury\\r\\n        getDistributorContract().safeTransferFrom(\\r\\n            address(this),\\r\\n            iTrustTreasury,\\r\\n            coverId\\r\\n        );   \\r\\n        LOCKED = FALSE;    \\r\\n        return coverId;\\r\\n    }\\r\\n\\r\\n    function _saveCoverDetails(\\r\\n        string memory userGUID,\\r\\n        uint256 coverId,\\r\\n        address exchangeAddress\\r\\n    ) internal {\\r\\n        _userPolicies[userGUID].coverIds.push(coverId);\\r\\n        _exchanges[exchangeAddress].coverIds.push(coverId);\\r\\n        _userIds.push(userGUID);\\r\\n    }\\r\\n\\r\\n    /// @dev See {IERC721Receiver-onERC721Received}.\\r\\n    /// Always returns `IERC721Receiver.onERC721Received.selector`.\\r\\n    function onERC721Received(\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes memory\\r\\n    ) \\r\\n        public \\r\\n        returns (bytes4) \\r\\n    {\\r\\n        return bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"));\\r\\n    }\\r\\n\\r\\n    /// @notice adds or updates exchange\\r\\n    /// @param exchangeAddress - treasury of exchange\\r\\n    /// @param feePercentage - percentage of commission\\r\\n    /// @param active - flag\\r\\n    /// @param name - name of exchange\\r\\n    function addOrUpdateExchange(\\r\\n        address payable exchangeAddress,\\r\\n        uint256 feePercentage,\\r\\n        bool active,\\r\\n        string memory name\\r\\n    ) \\r\\n        external \\r\\n    {\\r\\n        onlyAdmin();\\r\\n        if (_exchanges[exchangeAddress].treasuryAddress == address(0)) {\\r\\n            _exchangeList.push(exchangeAddress);\\r\\n        }\\r\\n        _exchanges[exchangeAddress] = Exchange({\\r\\n            feePercentage: feePercentage,\\r\\n            treasuryAddress: exchangeAddress,\\r\\n            active: active,\\r\\n            name: name,\\r\\n            coverIds: new uint256[](0)\\r\\n        });\\r\\n    }\\r\\n\\r\\n    /// @notice sets commission for exchange\\r\\n    /// @param exchangeAddress - address for exchange\\r\\n    /// @param feePercentage - commision percentage\\r\\n    function setExchangeFeePercentage(\\r\\n        address exchangeAddress,\\r\\n        uint256 feePercentage\\r\\n    ) \\r\\n        external \\r\\n    {\\r\\n        onlyAdmin();\\r\\n        _exchanges[exchangeAddress].feePercentage = feePercentage;\\r\\n    }\\r\\n\\r\\n    /// @notice sets exchangeto active\\r\\n    /// @param exchangeAddress - address for exchange\\r\\n    function activateExchange(address exchangeAddress) \\r\\n        external \\r\\n    {\\r\\n        onlyAdmin();\\r\\n        ifNotPaused();\\r\\n        _exchanges[exchangeAddress].active = true;\\r\\n    }\\r\\n\\r\\n    /// @notice sets exchangeto inactive\\r\\n    /// @param exchangeAddress - address for exchange\\r\\n    function deactivateExchange(address exchangeAddress) \\r\\n        external \\r\\n    {\\r\\n        onlyAdmin();\\r\\n        _exchanges[exchangeAddress].active = false;\\r\\n    }\\r\\n\\r\\n    /// @notice get details of exchange\\r\\n    /// @param exchangeAddress - address for exchange\\r\\n    /// @return details of exchange\\r\\n    function getExchangeDetails(address exchangeAddress)\\r\\n        external\\r\\n        view   \\r\\n        returns (Exchange memory)\\r\\n    {\\r\\n        onlyAdmin();        \\r\\n        return _exchanges[exchangeAddress];\\r\\n    }\\r\\n\\r\\n    /// @notice get details of all exchanges\\r\\n    /// @return details of all exchanges\\r\\n    function getAllExchanges()\\r\\n        external\\r\\n        view      \\r\\n        returns (Exchange[] memory)\\r\\n    {\\r\\n        onlyAdmin();\\r\\n        \\r\\n        Exchange[] memory ret = new Exchange[](_exchangeList.length);\\r\\n        for (uint256 i = 0; i < _exchangeList.length; i++) {\\r\\n            ret[i] = _exchanges[_exchangeList[i]];\\r\\n        }\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the commission percentage held in the distributor\\r\\n    /// @return percentage of commission\\r\\n    function getFeePercentage() external view returns (uint256) {\\r\\n        return _iTrustFeePercentage;\\r\\n    }\\r\\n\\r\\n    /// @notice sets itrust treasury address\\r\\n    /// @param iTrustTreasuryAddress - new address\\r\\n    function setItrustTreasury(address payable iTrustTreasuryAddress)\\r\\n        external\\r\\n    {\\r\\n        onlyAdmin();\\r\\n        ifNotPaused();\\r\\n        iTrustTreasury = iTrustTreasuryAddress;\\r\\n    }\\r\\n\\r\\n    /// @notice submits new claim to nexus\\r\\n    /// @param userGUID - identifier of user\\r\\n    /// @param coverId - id for clover to submit claim against\\r\\n    /// @param coverClaimData - extra claim data abi encoded\\r\\n    /// @return\\r\\n    function submitClaim(\\r\\n        string memory userGUID,\\r\\n        uint256 coverId,\\r\\n        bytes calldata coverClaimData\\r\\n    ) \\r\\n        external \\r\\n        returns (uint256) \\r\\n    {        \\r\\n        ifNotPaused();\\r\\n        CoverData memory cover = _getCoverData(coverId);        \\r\\n        require(cover.iTrustOwned, \\\"submit NFT\\\");\\r\\n        require(cover.claimsAllowed \\r\\n            && _userOwnsCover(userGUID, coverId) == TRUE \\r\\n            && msg.sender == _userPolicies[userGUID].walletAddress);//check cover\\r\\n         \\r\\n        uint256 claimId =\\r\\n            getDistributorContract().submitClaim(coverId, coverClaimData);\\r\\n        _claimIds[coverId] = claimId;\\r\\n        _claimCount[coverId] = _claimCount[coverId] + TRUE;\\r\\n        return claimId;\\r\\n    }\\r\\n\\r\\n    function _userOwnsCover(string memory userGUID, uint coverId) internal view returns (uint8) {\\r\\n        uint16 i = 0;\\r\\n        while (i < _userPolicies[userGUID].coverIds.length) {\\r\\n            if (_userPolicies[userGUID].coverIds[i] == coverId) {\\r\\n                return TRUE;\\r\\n            }\\r\\n            i++;\\r\\n        }\\r\\n        return FALSE;\\r\\n    }\\r\\n\\r\\n    function _getCoverData(uint coverId) internal view returns (CoverData memory){\\r\\n        CoverData memory cover = CoverData(\\r\\n            coverId,\\r\\n            /*status:*/ 0, \\r\\n            /*sumAssured:*/ 0, \\r\\n            /*coverPeriod:*/ 0, \\r\\n            /*validUntil:*/ 0, \\r\\n            /*contactAddress:*/ address(0), \\r\\n            /*coverAsset:*/ address(0), \\r\\n            /*premiumInNXM:*/ 0, \\r\\n            /*memberAddress:*/ address(0), \\r\\n            /*claimId:*/ 0, \\r\\n            /*claimStatus:*/ uint256(CoverClaimStatus.NoActiveClaim),\\r\\n            /*claimAmountPaid:*/ 0,\\r\\n            /*claimAsset:*/ address(0),\\r\\n            /*claimsAllowed:*/ false,\\r\\n            /*claimed:*/ false,\\r\\n            /*iTrustOwned:*/ false    \\r\\n        );       \\r\\n        \\r\\n        (\\r\\n            cover.status,\\r\\n            cover.sumAssured,\\r\\n            cover.coverPeriod,\\r\\n            cover.validUntil,\\r\\n            cover.contractAddress,\\r\\n            cover.coverAsset,\\r\\n            cover.premiumInNXM,\\r\\n            cover.memberAddress\\r\\n        ) = getDistributorContract().getCover(coverId);\\r\\n\\r\\n        \\r\\n        if (_claimIds[cover.coverId] != uint256(0)) {            \\r\\n            IDistributor.ClaimStatus status;\\r\\n            cover.claimStatus = uint256(CoverClaimStatus.Processing);\\r\\n            cover.claimId = _claimIds[coverId];\\r\\n            (\\r\\n                status,\\r\\n                cover.claimAmountPaid,\\r\\n                cover.claimAsset\\r\\n            ) = getDistributorContract().getPayoutOutcome(_claimIds[coverId]);\\r\\n\\r\\n            if ( _claimedAmounts[coverId] != uint256(0) &&\\r\\n                status == IDistributor.ClaimStatus.ACCEPTED) {\\r\\n\\r\\n                cover.claimStatus = uint256(CoverClaimStatus.Complete);\\r\\n                cover.claimed = true;\\r\\n\\r\\n            } else if (\\r\\n                status == IDistributor.ClaimStatus.ACCEPTED &&                \\r\\n                _claimedAmounts[coverId] == uint256(0)\\r\\n            ) {\\r\\n\\r\\n                cover.claimStatus = uint256(CoverClaimStatus.PaymentReady);\\r\\n\\r\\n            } else if ( status == IDistributor.ClaimStatus.REJECTED ) {\\r\\n\\r\\n                cover.claimStatus = uint256(CoverClaimStatus.Rejected);\\r\\n\\r\\n            }\\r\\n        }\\r\\n        cover.claimsAllowed = (_canMakeClaim(cover) == TRUE); \\r\\n\\r\\n        if(!cover.claimed){\\r\\n            cover.iTrustOwned = _isItrustOwner(coverId);\\r\\n        }               \\r\\n        \\r\\n        return cover;\\r\\n    }\\r\\n    \\r\\n\\r\\n    /// @notice returns cover held for a user\\r\\n    /// @param userGUID - user identifier\\r\\n    /// @return covers - array of covers held by user\\r\\n    function getCoverData(string memory userGUID)\\r\\n        external\\r\\n        view        \\r\\n        returns (CoverData[] memory covers)\\r\\n    {\\r\\n        onlyAdmin();\\r\\n        \\r\\n        uint256 i;\\r\\n        \\r\\n        CoverData[] memory userCover = new CoverData[](_userPolicies[userGUID].coverIds.length);      \\r\\n                 \\r\\n        while (i < _userPolicies[userGUID].coverIds.length) {                            \\r\\n            userCover[i] = _getCoverData(_userPolicies[userGUID].coverIds[i]);            \\r\\n            i++;\\r\\n        }\\r\\n        return userCover;\\r\\n    }\\r\\n\\r\\n    /// @notice creates a wallet registration request\\r\\n    /// @dev pays eth fee to itrust treasury\\r\\n    /// @param uid - user identifier\\r\\n    function addAddressRequest(string memory uid) \\r\\n        external \\r\\n        payable \\r\\n    {        \\r\\n        ifNotPaused();\\r\\n        require(\\r\\n            msg.value >= addressRequestFee,\\r\\n            \\\"Insufficient ETH\\\"\\r\\n        );\\r\\n       \\r\\n        _addressRequests[msg.sender] = uid;\\r\\n\\r\\n        iTrustTreasury.transfer(msg.value);\\r\\n        \\r\\n    }\\r\\n\\r\\n    /// @dev  Checks if the current sender has a request matching the _uid\\r\\n    /// @param uid user identifer\\r\\n    /// @return boolean\\r\\n    function hasAddressRequest(string memory uid) external view returns (bool) {\\r\\n        return\\r\\n            keccak256(abi.encodePacked(_addressRequests[msg.sender])) ==\\r\\n            keccak256(abi.encodePacked(uid));\\r\\n    }\\r\\n\\r\\n    /// @dev Checks if an _address / _uid combo matches\\r\\n    /// @param uid - user identifer\\r\\n    /// @param newAddress - address to check validity\\r\\n    /// @return boolean\\r\\n    function isValidAddressRequest(string memory uid, address newAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        onlyAdmin();\\r\\n        \\r\\n        return\\r\\n            keccak256(abi.encodePacked(_addressRequests[newAddress])) ==\\r\\n            keccak256(abi.encodePacked(uid));\\r\\n    }\\r\\n\\r\\n    /// @notice validates new address request\\r\\n    /// @dev Checks if an _address / _uid combo matches\\r\\n    /// @param uid - user identifer\\r\\n    /// @param newAddress - address to check validity\\r\\n     function validateAddressRequest(string memory uid, address newAddress)\\r\\n        external\\r\\n    {\\r\\n        onlyAdmin();\\r\\n        ifNotPaused();\\r\\n        require(\\r\\n            (keccak256(abi.encodePacked(_addressRequests[newAddress])) ==\\r\\n                keccak256(abi.encodePacked(uid))),\\r\\n            \\\"address missmatch\\\"\\r\\n        );\\r\\n\\r\\n        delete _addressRequests[newAddress];\\r\\n\\r\\n        _userPolicies[uid].walletAddress = newAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pauses the vault\\r\\n     */\\r\\n    function pause() external  {\\r\\n        onlyAdmin();\\r\\n        _paused = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Unpauses the vault\\r\\n     */\\r\\n    function unpause() external {\\r\\n        onlyAdmin();\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev add new admin\\r\\n     */\\r\\n    function addAdminAddress(address newAddress) external  {\\r\\n        onlyAdmin();\\r\\n        require(_adminList[newAddress] ==FALSE);\\r\\n        _adminList[newAddress] =TRUE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev revoke admin\\r\\n     */\\r\\n    function revokeAdminAddress(address newAddress) external {\\r\\n        onlyAdmin();\\r\\n        require(msg.sender != newAddress);\\r\\n        _adminList[newAddress] =FALSE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modify the address request fee\\r\\n     */\\r\\n    function setaddressRequestFee(uint256 fee) \\r\\n        external \\r\\n    {\\r\\n        onlyAdmin();\\r\\n        \\r\\n        addressRequestFee = fee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev required to be allow for receiving ETH claim payouts\\r\\n     */\\r\\n    receive() external payable {}\\r\\n\\r\\n\\r\\n    /// @notice withdraws NXM deposit\\r\\n    /// @dev only Admin\\r\\n    /// @param amount - amount to withdraw    \\r\\n    function withdrawNXM(uint256 amount) \\r\\n        external \\r\\n    {\\r\\n        onlyAdmin();\\r\\n        ifNotPaused();\\r\\n        \\r\\n        getDistributorContract().withdrawNXM(iTrustTreasury, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice redeems claim amount\\r\\n    /// @dev Checks if an _address / _uid combo matches\\r\\n    /// @param userId - user identifer\\r\\n    /// @param coverId - cover claiming against\\r\\n    function redeemClaim(string memory userId, uint256 coverId) \\r\\n        external\\r\\n    {\\r\\n        nonReentrant();        \\r\\n        LOCKED = TRUE;\\r\\n        require( msg.sender == _userPolicies[userId].walletAddress);\\r\\n        \\r\\n        (   \\r\\n            IDistributor.ClaimStatus claimStatus, \\r\\n            uint amountPaid, \\r\\n            address coverAsset\\r\\n        ) = getDistributorContract().getPayoutOutcome(_claimIds[coverId]);\\r\\n        require(claimStatus == IDistributor.ClaimStatus.ACCEPTED &&\\r\\n                amountPaid > uint(0) &&\\r\\n                _claimedAmounts[coverId] == uint(0));\\r\\n\\r\\n        _claimedAmounts[coverId] = amountPaid;\\r\\n        getDistributorContract().redeemClaim(coverId, _claimIds[coverId]);\\r\\n        if (coverAsset == ETH) {\\r\\n            payable(msg.sender).transfer(amountPaid);            \\r\\n        } else {\\r\\n            IERC20 erc20 = IERC20(coverAsset);\\r\\n            erc20.safeTransfer(msg.sender, amountPaid);\\r\\n        }\\r\\n        \\r\\n        emit ITrustClaimPayoutRedeemed(coverId, _claimIds[coverId], msg.sender, amountPaid, coverAsset);\\r\\n        LOCKED = FALSE;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Can user make claim on cover\\r\\n    /// @dev internal\\r\\n    /// @param cover - cover to check\\r\\n    /// @return boolean true or false\\r\\n    function _canMakeClaim(CoverData memory cover) internal view returns (uint8){\\r\\n        if(_claimCount[cover.coverId] >= 2){\\r\\n            return FALSE;\\r\\n        }\\r\\n        if(cover.claimId != 0 && \\r\\n            cover.claimStatus == uint256(CoverClaimStatus.Processing)) {\\r\\n             \\r\\n            return FALSE;\\r\\n        }    \\r\\n        if(cover.claimId != 0 && \\r\\n            cover.claimStatus == uint256(CoverClaimStatus.PaymentReady)) {\\r\\n            return FALSE;\\r\\n        }      \\r\\n        if(cover.claimed) {\\r\\n            return FALSE;\\r\\n        }\\r\\n\\r\\n        return TRUE;\\r\\n    }\\r\\n\\r\\n    /// @notice gets NXM balance of distributor\\r\\n    /// @return uint balance in wei\\r\\n    function NXMBalance() \\r\\n        external \\r\\n        view \\r\\n        returns (uint) \\r\\n    {\\r\\n        onlyAdmin();\\r\\n        \\r\\n        return IERC20(_nxmTokenAddress).balanceOf(_distributorAddress);    \\r\\n    }      \\r\\n\\r\\n    /// @notice does itrust have approval to spend nft\\r\\n    /// @return boolean\\r\\n    function isTreasuryApproved() \\r\\n        external \\r\\n        view \\r\\n        returns (bool) \\r\\n    {\\r\\n        onlyAdmin();\\r\\n        \\r\\n        \\r\\n        return getDistributorContract().isApprovedForAll(address(iTrustTreasury), address(this)); \\r\\n    }\\r\\n\\r\\n    /// @notice does itrust have custody of the token\\r\\n    /// @return boolean\\r\\n    function _isItrustOwner(uint coverId) internal view returns (bool) {\\r\\n        \\r\\n        return (getDistributorContract().ownerOf(coverId) == iTrustTreasury); \\r\\n    }  \\r\\n\\r\\n    /// @notice withdraws NFt from itrust treasury\\r\\n    function withdrawNFT(string memory userGUID, uint coverId) external {\\r\\n        nonReentrant();\\r\\n        LOCKED = TRUE;\\r\\n        require(\\r\\n            _userOwnsCover(userGUID, coverId) == TRUE &&\\r\\n            msg.sender == _userPolicies[userGUID].walletAddress);\\r\\n\\r\\n        IERC721 nftToken = IERC721(_distributorAddress);\\r\\n        nftToken.safeTransferFrom(iTrustTreasury, payable(_userPolicies[userGUID].walletAddress), coverId);\\r\\n        LOCKED = FALSE;\\r\\n    }\\r\\n\\r\\n    /// @notice transfers ownership of the distributor contract\\r\\n    function setNewDistributorOwner(address newOwner) external {\\r\\n        onlyAdmin();\\r\\n        \\r\\n        getDistributorContract().transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function getDistributorContract() internal view returns (IDistributor) {\\r\\n        return IDistributor(_distributorAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\r\\n     */\\r\\n    modifier initializer() {\\r\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\r\\n\\r\\n        bool isTopLevelCall = !_initializing;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = true;\\r\\n            _initialized = true;\\r\\n        }\\r\\n\\r\\n        _;\\r\\n\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setInit() external {\\r\\n        onlyAdmin();\\r\\n        _initialized = true;\\r\\n        _initializing = false;\\r\\n    }\\r\\n\\r\\n    /// @dev Returns true if and only if the function is running in the constructor\\r\\n    function _isConstructor() private view returns (bool) {\\r\\n        return !AddressUpgradeable.isContract(address(this));\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"coverId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"coverAsset\",\"type\":\"address\"}],\"name\":\"ITrustClaimPayoutRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"coverId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coverPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"coverData\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"ITrustCoverBought\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NXMBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchangeAddress\",\"type\":\"address\"}],\"name\":\"activateExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uid\",\"type\":\"string\"}],\"name\":\"addAddressRequest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"addAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"exchangeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feePercentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"addOrUpdateExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressRequestFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchangeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coverAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sumAssured\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"coverPeriod\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"coverType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"userGUID\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"coverData\",\"type\":\"bytes\"}],\"name\":\"buyCover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchangeAddress\",\"type\":\"address\"}],\"name\":\"deactivateExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllExchanges\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"feePercentage\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"coverIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ITrustInsureV2_1.Exchange[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"userGUID\",\"type\":\"string\"}],\"name\":\"getCoverData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"coverId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sumAssured\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"coverPeriod\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coverAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"premiumInNXM\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"memberAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimStatus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimAmountPaid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimAsset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimsAllowed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"iTrustOwned\",\"type\":\"bool\"}],\"internalType\":\"struct ITrustInsureV2_1.CoverData[]\",\"name\":\"covers\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchangeAddress\",\"type\":\"address\"}],\"name\":\"getExchangeDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"feePercentage\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"coverIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ITrustInsureV2_1.Exchange\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGuids\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uid\",\"type\":\"string\"}],\"name\":\"hasAddressRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iTrustTreasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"distributorAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"iTrustFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"apiAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nxMasterAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTreasuryApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"isValidAddressRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"userId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"coverId\",\"type\":\"uint256\"}],\"name\":\"redeemClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"revokeAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"distributorAddress\",\"type\":\"address\"}],\"name\":\"setDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchangeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feePercentage\",\"type\":\"uint256\"}],\"name\":\"setExchangeFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"iTrustTreasuryAddress\",\"type\":\"address\"}],\"name\":\"setItrustTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setNewDistributorOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setaddressRequestFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"userGUID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"coverId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"coverClaimData\",\"type\":\"bytes\"}],\"name\":\"submitClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"validateAddressRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"userGUID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"coverId\",\"type\":\"uint256\"}],\"name\":\"withdrawNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNXM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ITrustInsureV2_1","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}