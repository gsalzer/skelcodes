{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SmartInvoiceFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./interfaces/ISmartInvoiceFactory.sol\\\";\\nimport \\\"./interfaces/ISmartInvoice.sol\\\";\\n\\ncontract SmartInvoiceFactory is ISmartInvoiceFactory {\\n    uint256 public invoiceCount = 0;\\n    mapping(uint256 => address) internal _invoices;\\n    mapping(address => uint256) public resolutionRates;\\n\\n    event LogNewInvoice(\\n        uint256 indexed index,\\n        address invoice,\\n        uint256[] amounts\\n    );\\n    event UpdateResolutionRate(\\n        address indexed resolver,\\n        uint256 indexed resolutionRate,\\n        bytes32 details\\n    );\\n\\n    address public immutable implementation;\\n    address public immutable wrappedNativeToken;\\n\\n    constructor(address _implementation, address _wrappedNativeToken) {\\n        require(_implementation != address(0), \\\"invalid implementation\\\");\\n        require(\\n            _wrappedNativeToken != address(0),\\n            \\\"invalid wrappedNativeToken\\\"\\n        );\\n        implementation = _implementation;\\n        wrappedNativeToken = _wrappedNativeToken;\\n    }\\n\\n    function _init(\\n        address _invoiceAddress,\\n        address _client,\\n        address _provider,\\n        uint8 _resolverType,\\n        address _resolver,\\n        address _token,\\n        uint256[] calldata _amounts,\\n        uint256 _terminationTime,\\n        bytes32 _details\\n    ) internal {\\n        uint256 resolutionRate = resolutionRates[_resolver];\\n        if (resolutionRate == 0) {\\n            resolutionRate = 20;\\n        }\\n\\n        ISmartInvoice(_invoiceAddress).init(\\n            _client,\\n            _provider,\\n            _resolverType,\\n            _resolver,\\n            _token,\\n            _amounts,\\n            _terminationTime,\\n            resolutionRate,\\n            _details,\\n            wrappedNativeToken\\n        );\\n\\n        uint256 invoiceId = invoiceCount;\\n        _invoices[invoiceId] = _invoiceAddress;\\n        invoiceCount = invoiceCount + 1;\\n\\n        emit LogNewInvoice(invoiceId, _invoiceAddress, _amounts);\\n    }\\n\\n    function create(\\n        address _client,\\n        address _provider,\\n        uint8 _resolverType,\\n        address _resolver,\\n        address _token,\\n        uint256[] calldata _amounts,\\n        uint256 _terminationTime,\\n        bytes32 _details\\n    ) external override returns (address) {\\n        address invoiceAddress = Clones.clone(implementation);\\n\\n        _init(\\n            invoiceAddress,\\n            _client,\\n            _provider,\\n            _resolverType,\\n            _resolver,\\n            _token,\\n            _amounts,\\n            _terminationTime,\\n            _details\\n        );\\n\\n        return invoiceAddress;\\n    }\\n\\n    function predictDeterministicAddress(bytes32 _salt)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return Clones.predictDeterministicAddress(implementation, _salt);\\n    }\\n\\n    function createDeterministic(\\n        address _client,\\n        address _provider,\\n        uint8 _resolverType,\\n        address _resolver,\\n        address _token,\\n        uint256[] calldata _amounts,\\n        uint256 _terminationTime,\\n        bytes32 _details,\\n        bytes32 _salt\\n    ) external override returns (address) {\\n        address invoiceAddress =\\n            Clones.cloneDeterministic(implementation, _salt);\\n\\n        _init(\\n            invoiceAddress,\\n            _client,\\n            _provider,\\n            _resolverType,\\n            _resolver,\\n            _token,\\n            _amounts,\\n            _terminationTime,\\n            _details\\n        );\\n\\n        return invoiceAddress;\\n    }\\n\\n    function getInvoiceAddress(uint256 _index) public view returns (address) {\\n        return _invoices[_index];\\n    }\\n\\n    function updateResolutionRate(uint256 _resolutionRate, bytes32 _details)\\n        external\\n    {\\n        resolutionRates[msg.sender] = _resolutionRate;\\n        emit UpdateResolutionRate(msg.sender, _resolutionRate, _details);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt, address deployer) internal pure returns (address predicted) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISmartInvoiceFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISmartInvoiceFactory {\\n    function create(\\n        address _client,\\n        address _provider,\\n        uint8 _resolverType,\\n        address _resolver,\\n        address _token,\\n        uint256[] calldata _amounts,\\n        uint256 _terminationTime,\\n        bytes32 _details\\n    ) external returns (address);\\n\\n    function createDeterministic(\\n        address _client,\\n        address _provider,\\n        uint8 _resolverType,\\n        address _resolver,\\n        address _token,\\n        uint256[] calldata _amounts,\\n        uint256 _terminationTime,\\n        bytes32 _details,\\n        bytes32 _salt\\n    ) external returns (address);\\n\\n    function predictDeterministicAddress(bytes32 _salt)\\n        external\\n        returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISmartInvoice.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISmartInvoice {\\n    function init(\\n        address _client,\\n        address _provider,\\n        uint8 _resolverType,\\n        address _resolver,\\n        address _token,\\n        uint256[] calldata _amounts,\\n        uint256 _terminationTime, // exact termination date in seconds since epoch\\n        uint256 _resolutionRate,\\n        bytes32 _details,\\n        address _wrappedNativeToken\\n    ) external;\\n\\n    function release() external;\\n\\n    function release(uint256 _milestone) external;\\n\\n    function releaseTokens(address _token) external;\\n\\n    function withdraw() external;\\n\\n    function withdrawTokens(address _token) external;\\n\\n    function lock(bytes32 _details) external payable;\\n\\n    function resolve(\\n        uint256 _clientAward,\\n        uint256 _providerAward,\\n        bytes32 _details\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedNativeToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"invoice\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"LogNewInvoice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"resolutionRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"details\",\"type\":\"bytes32\"}],\"name\":\"UpdateResolutionRate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_client\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_resolverType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_terminationTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_details\",\"type\":\"bytes32\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_client\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_resolverType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_terminationTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_details\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"createDeterministic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getInvoiceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invoiceCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"predictDeterministicAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"resolutionRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_resolutionRate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_details\",\"type\":\"bytes32\"}],\"name\":\"updateResolutionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SmartInvoiceFactory","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e81597289a249ae725c2d80e7848dbfa9708c22d000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}