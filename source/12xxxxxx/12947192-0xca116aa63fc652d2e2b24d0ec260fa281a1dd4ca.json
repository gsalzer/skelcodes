{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/BatchRebalancer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./interfaces/INirnVault.sol\\\";\\nimport \\\"./interfaces/IAdapterRegistry.sol\\\";\\n\\n\\ncontract BatchRebalancer {\\n  bytes4 internal constant rebalance = INirnVault.rebalance.selector;\\n  bytes4 internal constant rebalanceWithNewWeights = INirnVault.rebalanceWithNewWeights.selector;\\n  bytes4 internal constant rebalanceWithNewAdapters = INirnVault.rebalanceWithNewAdapters.selector;\\n\\n  IAdapterRegistry public immutable registry;\\n\\n  constructor(address _registry) {\\n    registry = IAdapterRegistry(_registry);\\n  }\\n\\n  function revertWithReturnData(bytes memory _returnData) internal pure {\\n    // Taken from BoringCrypto\\n    // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n    if (_returnData.length < 68) revert(\\\"silent revert\\\");\\n\\n    assembly {\\n      // Slice the sighash.\\n      _returnData := add(_returnData, 0x04)\\n    }\\n    revert(abi.decode(_returnData, (string))); // All that remains is the revert string\\n  }\\n\\n  function batchExecuteRebalance(address[] calldata vaults, bytes[] calldata calldatas) external {\\n    require(msg.sender == tx.origin, \\\"!EOA\\\");\\n    uint256 len = vaults.length;\\n    require(calldatas.length == len, \\\"bad lengths\\\");\\n    for (uint256 i; i < len; i++) {\\n      INirnVault vault = INirnVault(vaults[i]);\\n      require(\\n        registry.vaultsByUnderlying(vault.underlying()) == address(vault),\\n        \\\"bad vault\\\"\\n      );\\n      bytes memory data = calldatas[i];\\n      bytes4 sig;\\n      assembly { sig := mload(add(data, 32)) }\\n      require(\\n        sig == rebalance ||\\n        sig == rebalanceWithNewWeights ||\\n        sig == rebalanceWithNewAdapters,\\n        \\\"fn not allowed\\\"\\n      );\\n      (bool success, bytes memory returnData) = address(vault).call(data);\\n      if (!success) revertWithReturnData(returnData);\\n    }\\n  }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IAdapterRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n\\ninterface IAdapterRegistry {\\n/* ========== Events ========== */\\n\\n  event ProtocolAdapterAdded(uint256 protocolId, address protocolAdapter);\\n\\n  event ProtocolAdapterRemoved(uint256 protocolId);\\n\\n  event TokenAdapterAdded(address adapter, uint256 protocolId, address underlying, address wrapper);\\n\\n  event TokenAdapterRemoved(address adapter, uint256 protocolId, address underlying, address wrapper);\\n\\n  event TokenSupportAdded(address underlying);\\n\\n  event TokenSupportRemoved(address underlying);\\n\\n  event VaultFactoryAdded(address factory);\\n\\n  event VaultFactoryRemoved(address factory);\\n\\n  event VaultAdded(address underlying, address vault);\\n\\n  event VaultRemoved(address underlying, address vault);\\n\\n/* ========== Structs ========== */\\n\\n  struct TokenAdapter {\\n    address adapter;\\n    uint96 protocolId;\\n  }\\n\\n/* ========== Storage ========== */\\n\\n  function protocolsCount() external view returns (uint256);\\n\\n  function protocolAdapters(uint256 id) external view returns (address protocolAdapter);\\n\\n  function protocolAdapterIds(address protocolAdapter) external view returns (uint256 id);\\n\\n  function vaultsByUnderlying(address underlying) external view returns (address vault);\\n\\n  function approvedVaultFactories(address factory) external view returns (bool approved);\\n\\n/* ========== Vault Factory Management ========== */\\n\\n  function addVaultFactory(address _factory) external;\\n\\n  function removeVaultFactory(address _factory) external;\\n\\n/* ========== Vault Management ========== */\\n\\n  function addVault(address vault) external;\\n\\n  function removeVault(address vault) external;\\n\\n/* ========== Protocol Adapter Management ========== */\\n\\n  function addProtocolAdapter(address protocolAdapter) external returns (uint256 id);\\n\\n  function removeProtocolAdapter(address protocolAdapter) external;\\n\\n/* ========== Token Adapter Management ========== */\\n\\n  function addTokenAdapter(address adapter) external;\\n\\n  function addTokenAdapters(address[] calldata adapters) external;\\n\\n  function removeTokenAdapter(address adapter) external;\\n\\n/* ========== Vault Queries ========== */\\n\\n  function getVaultsList() external view returns (address[] memory);\\n\\n  function haveVaultFor(address underlying) external view returns (bool);\\n\\n/* ========== Protocol Queries ========== */\\n\\n  function getProtocolAdaptersAndIds() external view returns (address[] memory adapters, uint256[] memory ids);\\n\\n  function getProtocolMetadata(uint256 id) external view returns (address protocolAdapter, string memory name);\\n\\n  function getProtocolForTokenAdapter(address adapter) external view returns (address protocolAdapter);\\n\\n/* ========== Supported Token Queries ========== */\\n\\n  function isSupported(address underlying) external view returns (bool);\\n\\n  function getSupportedTokens() external view returns (address[] memory list);\\n\\n/* ========== Token Adapter Queries ========== */\\n\\n  function isApprovedAdapter(address adapter) external view returns (bool);\\n\\n  function getAdaptersList(address underlying) external view returns (address[] memory list);\\n\\n  function getAdapterForWrapperToken(address wrapperToken) external view returns (address);\\n\\n  function getAdaptersCount(address underlying) external view returns (uint256);\\n\\n  function getAdaptersSortedByAPR(address underlying)\\n    external\\n    view\\n    returns (address[] memory adapters, uint256[] memory aprs);\\n\\n  function getAdaptersSortedByAPRWithDeposit(\\n    address underlying,\\n    uint256 deposit,\\n    address excludingAdapter\\n  )\\n    external\\n    view\\n    returns (address[] memory adapters, uint256[] memory aprs);\\n\\n  function getAdapterWithHighestAPR(address underlying) external view returns (address adapter, uint256 apr);\\n\\n  function getAdapterWithHighestAPRForDeposit(\\n    address underlying,\\n    uint256 deposit,\\n    address excludingAdapter\\n  ) external view returns (address adapter, uint256 apr);\\n}\\n\\n\"\r\n    },\r\n    \"contracts/interfaces/INirnVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./IAdapterRegistry.sol\\\";\\nimport \\\"./ITokenAdapter.sol\\\";\\nimport \\\"./IRewardsSeller.sol\\\";\\n\\n\\ninterface INirnVault {\\n/* ========== Events ========== */\\n\\n  /** @dev Emitted when an adapter is removed and its balance fully withdrawn. */\\n  event AdapterRemoved(IErc20Adapter adapter);\\n\\n  /** @dev Emitted when weights or adapters are updated. */\\n  event AllocationsUpdated(IErc20Adapter[] adapters, uint256[] weights);\\n\\n  /** @dev Emitted when performance fees are claimed. */\\n  event FeesClaimed(uint256 underlyingAmount, uint256 sharesMinted);\\n\\n  /** @dev Emitted when a rebalance happens without allocation changes. */\\n  event Rebalanced();\\n\\n  /** @dev Emitted when max underlying is updated. */\\n  event SetMaximumUnderlying(uint256 maxBalance);\\n\\n  /** @dev Emitted when fee recipient address is set. */\\n  event SetFeeRecipient(address feeRecipient);\\n\\n  /** @dev Emitted when performance fee is set. */\\n  event SetPerformanceFee(uint256 performanceFee);\\n\\n  /** @dev Emitted when reserve ratio is set. */\\n  event SetReserveRatio(uint256 reserveRatio);\\n\\n  /** @dev Emitted when rewards seller contract is set. */\\n  event SetRewardsSeller(address rewardsSeller);\\n\\n  /** @dev Emitted when a deposit is made. */\\n  event Deposit(uint256 shares, uint256 underlying);\\n\\n  /** @dev Emitted when a deposit is made. */\\n  event Withdrawal(uint256 shares, uint256 underlying);\\n\\n/* ========== Structs ========== */\\n\\n  struct DistributionParameters {\\n    IErc20Adapter[] adapters;\\n    uint256[] weights;\\n    uint256[] balances;\\n    int256[] liquidityDeltas;\\n    uint256 netAPR;\\n  }\\n\\n/* ========== Initializer ========== */\\n\\n  function initialize(\\n    address _underlying,\\n    address _rewardsSeller,\\n    address _feeRecipient,\\n    address _owner\\n  ) external;\\n\\n/* ========== Config Queries ========== */\\n\\n  function minimumAPRImprovement() external view returns (uint256);\\n\\n  function registry() external view returns (IAdapterRegistry);\\n\\n  function eoaSafeCaller() external view returns (address);\\n\\n  function underlying() external view returns (address);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);  \\n\\n  function feeRecipient() external view returns (address);\\n\\n  function rewardsSeller() external view returns (IRewardsSeller);\\n\\n  function lockedTokens(address) external view returns (bool);\\n\\n  function maximumUnderlying() external view returns (uint256);\\n\\n  function performanceFee() external view returns (uint64);\\n\\n  function reserveRatio() external view returns (uint64);\\n\\n  function priceAtLastFee() external view returns (uint128);\\n\\n  function minimumCompositionChangeDelay() external view returns (uint256);\\n\\n  function canChangeCompositionAfter() external view returns (uint96);\\n\\n/* ========== Admin Actions ========== */\\n\\n  function setMaximumUnderlying(uint256 _maximumUnderlying) external;\\n\\n  function setPerformanceFee(uint64 _performanceFee) external;\\n\\n  function setFeeRecipient(address _feeRecipient) external;\\n\\n  function setRewardsSeller(IRewardsSeller _rewardsSeller) external;\\n\\n  function setReserveRatio(uint64 _reserveRatio) external;\\n\\n/* ========== Balance Queries ========== */\\n\\n  function balance() external view returns (uint256 sum);\\n\\n  function reserveBalance() external view returns (uint256);\\n\\n/* ========== Fee Queries ========== */\\n\\n  function getPendingFees() external view returns (uint256);\\n\\n/* ========== Price Queries ========== */\\n\\n  function getPricePerFullShare() external view returns (uint256);\\n\\n  function getPricePerFullShareWithFee() external view returns (uint256);\\n\\n/* ========== Reward Token Sales ========== */\\n\\n  function sellRewards(address rewardsToken, bytes calldata params) external;\\n\\n/* ========== Adapter Queries ========== */\\n\\n  function getBalances() external view returns (uint256[] memory balances);\\n\\n  function getAdaptersAndWeights() external view returns (\\n    IErc20Adapter[] memory adapters,\\n    uint256[] memory weights\\n  );\\n\\n/* ========== Status Queries ========== */\\n\\n  function getCurrentLiquidityDeltas() external view returns (int256[] memory liquidityDeltas);\\n\\n  function getAPR() external view returns (uint256);\\n\\n  function currentDistribution() external view returns (\\n    DistributionParameters memory params,\\n    uint256 totalProductiveBalance,\\n    uint256 _reserveBalance\\n  );\\n\\n/* ========== Deposit/Withdraw ========== */\\n\\n  function deposit(uint256 amount) external returns (uint256 shares);\\n\\n  function depositTo(uint256 amount, address to) external returns (uint256 shares);\\n\\n  function withdraw(uint256 shares) external returns (uint256 owed);\\n\\n  function withdrawUnderlying(uint256 amount) external returns (uint256 shares);\\n\\n/* ========== Rebalance Actions ========== */\\n\\n  function rebalance() external;\\n\\n  function rebalanceWithNewWeights(uint256[] calldata proposedWeights) external;\\n\\n  function rebalanceWithNewAdapters(\\n    IErc20Adapter[] calldata proposedAdapters,\\n    uint256[] calldata proposedWeights\\n  ) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRewardsSeller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n\\ninterface IRewardsSeller {\\n  /**\\n   * @dev Sell `rewardsToken` for `underlyingToken`.\\n   * Should only be called after `rewardsToken` is transferred.\\n   * @param sender - Address of account that initially triggered the call. Can be used to restrict who can trigger a sale.\\n   * @param rewardsToken - Address of the token to sell.\\n   * @param underlyingToken - Address of the token to buy.\\n   * @param params - Any additional data that the caller provided.\\n   */\\n  function sellRewards(\\n    address sender,\\n    address rewardsToken,\\n    address underlyingToken,\\n    bytes calldata params\\n  ) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITokenAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n\\ninterface IErc20Adapter {\\n/* ========== Metadata ========== */\\n\\n  function underlying() external view returns (address);\\n\\n  function token() external view returns (address);\\n\\n  function name() external view returns (string memory);\\n\\n  function availableLiquidity() external view returns (uint256);\\n\\n/* ========== Conversion ========== */\\n\\n  function toUnderlyingAmount(uint256 tokenAmount) external view returns (uint256);\\n\\n  function toWrappedAmount(uint256 underlyingAmount) external view returns (uint256);\\n\\n/* ========== Performance Queries ========== */\\n\\n  function getAPR() external view returns (uint256);\\n\\n  function getHypotheticalAPR(int256 liquidityDelta) external view returns (uint256);\\n\\n  function getRevenueBreakdown()\\n    external\\n    view\\n    returns (\\n      address[] memory assets,\\n      uint256[] memory aprs\\n    );\\n\\n/* ========== Caller Balance Queries ========== */\\n\\n  function balanceWrapped() external view returns (uint256);\\n\\n  function balanceUnderlying() external view returns (uint256);\\n\\n/* ========== Interactions ========== */\\n\\n  function deposit(uint256 amountUnderlying) external returns (uint256 amountMinted);\\n\\n  function withdraw(uint256 amountToken) external returns (uint256 amountReceived);\\n\\n  function withdrawAll() external returns (uint256 amountReceived);\\n\\n  function withdrawUnderlying(uint256 amountUnderlying) external returns (uint256 amountBurned);\\n\\n  function withdrawUnderlyingUpTo(uint256 amountUnderlying) external returns (uint256 amountReceived);\\n}\\n\\ninterface IEtherAdapter is IErc20Adapter {\\n  function depositETH() external payable returns (uint256 amountMinted);\\n\\n  function withdrawAsETH(uint256 amountToken) external returns (uint256 amountReceived);\\n\\n  function withdrawAllAsETH() external returns (uint256 amountReceived);\\n\\n  function withdrawUnderlyingAsETH(uint256 amountUnderlying) external returns (uint256 amountBurned); \\n}\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"vaults\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"}],\"name\":\"batchExecuteRebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IAdapterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BatchRebalancer","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"0000000000000000000000005f2945604013ee9f80ae2eddb384462b681859c4","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}