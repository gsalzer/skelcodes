{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/sol6/katana/KatanaFeeHandler.sol\": {\r\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport \\\"../utils/Utils5.sol\\\";\\nimport \\\"../utils/zeppelin/ReentrancyGuard.sol\\\";\\nimport \\\"../utils/zeppelin/SafeMath.sol\\\";\\nimport \\\"../IKyberFeeHandler.sol\\\";\\nimport \\\"../IKyberNetworkProxy.sol\\\";\\nimport \\\"../ISimpleKyberProxy.sol\\\";\\n\\nimport \\\"../mock/reserves/ISanityRate.sol\\\";\\nimport \\\"../mock/dao/IBurnableToken.sol\\\";\\nimport \\\"../mock/dao/DaoOperator.sol\\\";\\n\\n/**\\n * @title IKyberProxy\\n *  This interface combines two interfaces.\\n *  It is needed since we use one function from each of the interfaces.\\n *\\n */\\ninterface IKyberProxy is IKyberNetworkProxy, ISimpleKyberProxy {\\n    // empty block\\n}\\n\\n/**\\n * @title kyberFeeHandler\\n *\\n * @dev kyberFeeHandler works tightly with contracts kyberNetwork and kyberDao.\\n *   Some events are moved to interface, for easier usage\\n * @dev Terminology:\\n *   Epoch - Voting campaign time frame in kyberDao.\\n *     kyberDao voting campaigns are in the scope of epochs.\\n *   BRR - Burn / Reward / Rebate. kyberNetwork fee is used for 3 purposes:\\n *     Burning KNC\\n *     Reward an address that staked knc in kyberStaking contract. AKA - stakers\\n *     Rebate reserves for supporting trades.\\n * @dev Code flow:\\n *    Per trade on kyberNetwork, it calls handleFees() function which\\n *    internally accounts for network & platform fees from the trade. \\n *    Fee distribution:\\n *      rewards: send to fee pool\\n *      rebates: accumulated per rebate wallet, can be claimed any time.\\n *      burn: accumulated in the contract. Burned value and interval limited with safe check using\\n *        sanity rate.\\n *      Platfrom fee: accumulated per platform wallet, can be claimed any time.\\n */\\ncontract KatanaFeeHandler is Utils5, DaoOperator, ReentrancyGuard, IKyberFeeHandler {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant SANITY_RATE_DIFF_BPS = 1000; // 10%\\n\\n    struct BRRData {\\n        uint16 rewardBps;\\n        uint16 rebateBps;\\n    }\\n\\n    struct BRRWei {\\n        uint256 rewardWei;\\n        uint256 fullRebateWei;\\n        uint256 paidRebateWei;\\n        uint256 burnWei;\\n    }\\n\\n    IKyberProxy public kyberProxy;\\n    address public feePool;\\n    IERC20 public immutable knc;\\n\\n    uint256 public immutable burnBlockInterval;\\n    uint256 public lastBurnBlock;\\n\\n    BRRData public brrData;\\n\\n    /// @dev amount of eth to burn for each burn knc call\\n    uint256 public weiToBurn = 2 ether;\\n\\n    mapping(address => uint256) public feePerPlatformWallet;\\n    mapping(address => uint256) public rebatePerWallet;\\n    // total balance in the contract that is for rebate, reward, platform fee\\n    uint256 public totalPayoutBalance;\\n    /// @dev use to get rate of KNC/ETH to check if rate to burn knc is normal\\n    /// @dev index 0 is currently used contract address, indexes > 0 are older versions\\n    ISanityRate[] internal sanityRateContract;\\n\\n    event FeeDistributed(\\n        IERC20 indexed token,\\n        address indexed sender,\\n        address indexed platformWallet,\\n        uint256 platformFeeWei,\\n        uint256 rewardWei,\\n        uint256 rebateWei,\\n        address[] rebateWallets,\\n        uint256[] rebatePercentBpsPerWallet,\\n        uint256 burnAmtWei\\n    );\\n\\n    event BRRUpdated(uint256 rewardBps, uint256 rebateBps, uint256 burnBps);\\n\\n    event FeePoolUpdated(address feePool);\\n\\n    event RebatePaid(address indexed rebateWallet, IERC20 indexed token, uint256 amount);\\n\\n    event PlatformFeePaid(address indexed platformWallet, IERC20 indexed token, uint256 amount);\\n\\n    event KncBurned(uint256 kncTWei, IERC20 indexed token, uint256 amount);\\n\\n    event EthReceived(uint256 amount);\\n\\n    event BurnConfigSet(ISanityRate sanityRate, uint256 weiToBurn);\\n\\n    event DaoOperatorUpdated(address daoOperator);\\n\\n    event KyberProxyUpdated(IKyberProxy kyberProxy);\\n\\n    constructor(\\n        IKyberProxy _kyberProxy,\\n        IERC20 _knc,\\n        uint256 _burnBlockInterval,\\n        address _daoOperator,\\n        address _feePool,\\n        uint256 _rewardBps,\\n        uint256 _rebateBps\\n    ) public DaoOperator(_daoOperator) {\\n        require(_kyberProxy != IKyberProxy(0), \\\"kyberNetworkProxy 0\\\");\\n        require(_knc != IERC20(0), \\\"knc 0\\\");\\n        require(_burnBlockInterval != 0, \\\"_burnBlockInterval 0\\\");\\n        require(_feePool != address(0), \\\"feePool 0\\\");\\n\\n        kyberProxy = _kyberProxy;\\n        knc = _knc;\\n        burnBlockInterval = _burnBlockInterval;\\n        feePool = _feePool;\\n\\n        // set default brrData\\n        require(_rewardBps.add(_rebateBps) <= BPS, \\\"Bad BRR values\\\");\\n        brrData.rewardBps = uint16(_rewardBps);\\n        brrData.rebateBps = uint16(_rebateBps);\\n    }\\n\\n    modifier onlyNonContract {\\n        require(tx.origin == msg.sender, \\\"only non-contract\\\");\\n        _;\\n    }\\n\\n    receive() external payable {\\n        emit EthReceived(msg.value);\\n    }\\n\\n    function setDaoOperator(address _daoOperator) external onlyDaoOperator {\\n        require(_daoOperator != address(0), \\\"daoOperator 0\\\");\\n        daoOperator = _daoOperator;\\n\\n        emit DaoOperatorUpdated(_daoOperator);\\n    }\\n\\n    /// @dev only call by daoOperator\\n    function setBRRData(\\n        uint256 _burnBps,\\n        uint256 _rewardBps,\\n        uint256 _rebateBps\\n    ) external onlyDaoOperator {\\n        require(_burnBps.add(_rewardBps).add(_rebateBps) == BPS, \\\"Bad BRR values\\\");\\n        brrData.rewardBps = uint16(_rewardBps);\\n        brrData.rebateBps = uint16(_rebateBps);\\n\\n        emit BRRUpdated(_rewardBps, _rebateBps, _burnBps);\\n    }\\n\\n    function setFeePool(address _feePool) external onlyDaoOperator {\\n        require(_feePool != address(0), \\\"feePool 0\\\");\\n        feePool = _feePool;\\n\\n        emit FeePoolUpdated(_feePool);\\n    }\\n\\n    /// @dev handleFees function is called per trade on kyberNetwork\\n    /// @dev unless the trade is not involving any fees.\\n    /// @param token Token currency of fees\\n    /// @param rebateWallets a list of rebate wallets that will get rebate for this trade.\\n    /// @param rebateBpsPerWallet percentage of rebate for each wallet, out of total rebate.\\n    /// @param platformWallet Wallet address that will receive the platfrom fee.\\n    /// @param platformFee Fee amount (in wei) the platfrom wallet is entitled to.\\n    /// @param networkFee Fee amount (in wei) to be allocated for BRR\\n    function handleFees(\\n        IERC20 token,\\n        address[] calldata rebateWallets,\\n        uint256[] calldata rebateBpsPerWallet,\\n        address platformWallet,\\n        uint256 platformFee,\\n        uint256 networkFee\\n    ) external payable override nonReentrant {\\n        require(token == ETH_TOKEN_ADDRESS, \\\"token not eth\\\");\\n        require(msg.value == platformFee.add(networkFee), \\\"msg.value != total fees\\\");\\n\\n        // handle platform fee\\n        feePerPlatformWallet[platformWallet] = feePerPlatformWallet[platformWallet].add(\\n            platformFee\\n        );\\n\\n        if (networkFee == 0) {\\n            // only platform fee paid\\n            totalPayoutBalance = totalPayoutBalance.add(platformFee);\\n            emit FeeDistributed(\\n                ETH_TOKEN_ADDRESS,\\n                msg.sender,\\n                platformWallet,\\n                platformFee,\\n                0,\\n                0,\\n                rebateWallets,\\n                rebateBpsPerWallet,\\n                0\\n            );\\n            return;\\n        }\\n\\n        BRRWei memory brrAmounts;\\n\\n        // Decoding BRR data\\n        (brrAmounts.rewardWei, brrAmounts.fullRebateWei) = getRRWeiValues(networkFee);\\n        brrAmounts.paidRebateWei = updateRebateValues(\\n            brrAmounts.fullRebateWei,\\n            rebateWallets,\\n            rebateBpsPerWallet\\n        );\\n        brrAmounts.burnWei = networkFee.sub(brrAmounts.rewardWei).sub(brrAmounts.paidRebateWei);\\n        // update total balance of rebates & platform fee\\n        totalPayoutBalance = totalPayoutBalance.add(platformFee).add(brrAmounts.paidRebateWei);\\n\\n        //TODO: transfer reward to fee pool\\n        (bool success, ) = feePool.call{value: brrAmounts.rewardWei}(\\\"\\\");\\n        require(success, \\\"send fee failed\\\");\\n\\n        emit FeeDistributed(\\n            ETH_TOKEN_ADDRESS,\\n            msg.sender,\\n            platformWallet,\\n            platformFee,\\n            brrAmounts.rewardWei,\\n            brrAmounts.paidRebateWei,\\n            rebateWallets,\\n            rebateBpsPerWallet,\\n            brrAmounts.burnWei\\n        );\\n    }\\n\\n    /// @dev claim rebate per reserve wallet. called by any address\\n    /// @param rebateWallet the wallet to claim rebates for. \\n    /// @dev Total accumulated rebate sent to this wallet.\\n    /// @return amountWei amount of rebate claimed\\n    function claimReserveRebate(address rebateWallet)\\n        external\\n        override\\n        nonReentrant\\n        returns (uint256 amountWei)\\n    {\\n        require(rebatePerWallet[rebateWallet] > 1, \\\"no rebate to claim\\\");\\n        // Get total amount of rebate accumulated\\n        amountWei = rebatePerWallet[rebateWallet].sub(1);\\n\\n        // redundant check, can't happen\\n        assert(totalPayoutBalance >= amountWei);\\n        totalPayoutBalance = totalPayoutBalance.sub(amountWei);\\n\\n        rebatePerWallet[rebateWallet] = 1; // avoid zero to non zero storage cost\\n\\n        // send rebate to rebate wallet\\n        (bool success, ) = rebateWallet.call{value: amountWei}(\\\"\\\");\\n        require(success, \\\"rebate transfer failed\\\");\\n\\n        emit RebatePaid(rebateWallet, ETH_TOKEN_ADDRESS, amountWei);\\n\\n        return amountWei;\\n    }\\n\\n    /// @dev implement so this contract is not marked as abstract\\n    function claimStakerReward(\\n        address, /*staker*/\\n        uint256 /*epoch*/\\n    ) external override returns (uint256) {\\n        revert();\\n    }\\n\\n    /// @dev claim accumulated fee per platform wallet. Called by any address\\n    /// @param platformWallet the wallet to claim fee for.\\n    /// @dev Total accumulated fee sent to this wallet.\\n    /// @return amountWei amount of fee claimed\\n    function claimPlatformFee(address platformWallet)\\n        external\\n        override\\n        nonReentrant\\n        returns (uint256 amountWei)\\n    {\\n        require(feePerPlatformWallet[platformWallet] > 1, \\\"no fee to claim\\\");\\n        // Get total amount of fees accumulated\\n        amountWei = feePerPlatformWallet[platformWallet].sub(1);\\n\\n        // redundant check, can't happen\\n        assert(totalPayoutBalance >= amountWei);\\n        totalPayoutBalance = totalPayoutBalance.sub(amountWei);\\n\\n        feePerPlatformWallet[platformWallet] = 1; // avoid zero to non zero storage cost\\n\\n        (bool success, ) = platformWallet.call{value: amountWei}(\\\"\\\");\\n        require(success, \\\"platform fee transfer failed\\\");\\n\\n        emit PlatformFeePaid(platformWallet, ETH_TOKEN_ADDRESS, amountWei);\\n        return amountWei;\\n    }\\n\\n    /// @dev Allow to set kyberNetworkProxy address by daoOperator\\n    /// @param _newProxy new kyberNetworkProxy contract\\n    function setKyberProxy(IKyberProxy _newProxy) external onlyDaoOperator {\\n        require(_newProxy != IKyberProxy(0), \\\"kyberNetworkProxy 0\\\");\\n        if (_newProxy != kyberProxy) {\\n            kyberProxy = _newProxy;\\n            emit KyberProxyUpdated(_newProxy);\\n        }\\n    }\\n\\n    /// @dev set knc sanity rate contract and amount wei to burn\\n    /// @param _sanityRate new sanity rate contract\\n    /// @param _weiToBurn new amount of wei to burn\\n    function setBurnConfigParams(ISanityRate _sanityRate, uint256 _weiToBurn)\\n        external\\n        onlyDaoOperator\\n    {\\n        require(_weiToBurn > 0, \\\"_weiToBurn is 0\\\");\\n\\n        if (sanityRateContract.length == 0 || (_sanityRate != sanityRateContract[0])) {\\n            // it is a new sanity rate contract\\n            if (sanityRateContract.length == 0) {\\n                sanityRateContract.push(_sanityRate);\\n            } else {\\n                sanityRateContract.push(sanityRateContract[0]);\\n                sanityRateContract[0] = _sanityRate;\\n            }\\n        }\\n\\n        weiToBurn = _weiToBurn;\\n\\n        emit BurnConfigSet(_sanityRate, _weiToBurn);\\n    }\\n\\n    /// @dev Burn knc. The burn amount is limited. Forces block delay between burn calls.\\n    /// @dev only none ontract can call this function\\n    /// @return kncBurnAmount amount of knc burned\\n    function burnKnc() external onlyNonContract returns (uint256 kncBurnAmount) {\\n        // check if current block > last burn block number + num block interval\\n        require(block.number > lastBurnBlock + burnBlockInterval, \\\"wait more blocks to burn\\\");\\n\\n        // update last burn block number\\n        lastBurnBlock = block.number;\\n\\n        // Get amount to burn, if greater than weiToBurn, burn only weiToBurn per function call.\\n        uint256 balance = address(this).balance;\\n\\n        // redundant check, can't happen\\n        assert(balance >= totalPayoutBalance);\\n        uint256 srcAmount = balance.sub(totalPayoutBalance);\\n        srcAmount = srcAmount > weiToBurn ? weiToBurn : srcAmount;\\n\\n        // Get rate\\n        uint256 kyberEthKncRate =\\n            kyberProxy.getExpectedRateAfterFee(ETH_TOKEN_ADDRESS, knc, srcAmount, 0, \\\"\\\");\\n        validateEthToKncRateToBurn(kyberEthKncRate);\\n\\n        // Buy some knc and burn\\n        kncBurnAmount = kyberProxy.swapEtherToToken{value: srcAmount}(knc, kyberEthKncRate);\\n\\n        require(IBurnableToken(address(knc)).burn(kncBurnAmount), \\\"knc burn failed\\\");\\n\\n        emit KncBurned(kncBurnAmount, ETH_TOKEN_ADDRESS, srcAmount);\\n        return kncBurnAmount;\\n    }\\n\\n    /// @notice should be called off chain\\n    /// @dev returns list of sanity rate contracts\\n    /// @dev index 0 is currently used contract address, indexes > 0 are older versions\\n    function getSanityRateContracts() external view returns (ISanityRate[] memory sanityRates) {\\n        sanityRates = sanityRateContract;\\n    }\\n\\n    /// @dev return latest knc/eth rate from sanity rate contract\\n    function getLatestSanityRate() external view returns (uint256 kncToEthSanityRate) {\\n        if (sanityRateContract.length > 0 && sanityRateContract[0] != ISanityRate(0)) {\\n            kncToEthSanityRate = sanityRateContract[0].latestAnswer();\\n        } else {\\n            kncToEthSanityRate = 0;\\n        }\\n    }\\n\\n    function readBRRData() external view returns (uint256 rewardBps, uint256 rebateBps) {\\n        rewardBps = uint256(brrData.rewardBps);\\n        rebateBps = uint256(brrData.rebateBps);\\n    }\\n\\n    function updateRebateValues(\\n        uint256 rebateWei,\\n        address[] memory rebateWallets,\\n        uint256[] memory rebateBpsPerWallet\\n    ) internal returns (uint256 totalRebatePaidWei) {\\n        uint256 totalRebateBps;\\n        uint256 walletRebateWei;\\n\\n        for (uint256 i = 0; i < rebateWallets.length; i++) {\\n            require(rebateWallets[i] != address(0), \\\"rebate wallet address 0\\\");\\n\\n            walletRebateWei = rebateWei.mul(rebateBpsPerWallet[i]).div(BPS);\\n            rebatePerWallet[rebateWallets[i]] = rebatePerWallet[rebateWallets[i]].add(\\n                walletRebateWei\\n            );\\n\\n            // a few wei could be left out due to rounding down. so count only paid wei\\n            totalRebatePaidWei = totalRebatePaidWei.add(walletRebateWei);\\n            totalRebateBps = totalRebateBps.add(rebateBpsPerWallet[i]);\\n        }\\n        require(totalRebateBps <= BPS, \\\"totalRebateBps > 100%\\\");\\n    }\\n\\n    function getRRWeiValues(uint256 rrAmountWei)\\n        internal\\n        view\\n        returns (uint256 rewardWei, uint256 rebateWei)\\n    {\\n        // Decoding BRR data\\n        uint256 rewardInBps = uint256(brrData.rewardBps);\\n        uint256 rebateInBps = uint256(brrData.rebateBps);\\n\\n        rebateWei = rrAmountWei.mul(rebateInBps).div(BPS);\\n        rewardWei = rrAmountWei.mul(rewardInBps).div(BPS);\\n    }\\n\\n    function validateEthToKncRateToBurn(uint256 rateEthToKnc) internal view {\\n        require(rateEthToKnc <= MAX_RATE, \\\"ethToKnc rate out of bounds\\\");\\n        require(rateEthToKnc > 0, \\\"ethToKnc rate is 0\\\");\\n        require(sanityRateContract.length > 0, \\\"no sanity rate contract\\\");\\n        require(sanityRateContract[0] != ISanityRate(0), \\\"sanity rate is 0x0, burning is blocked\\\");\\n\\n        // get latest knc/eth rate from sanity contract\\n        uint256 kncToEthRate = sanityRateContract[0].latestAnswer();\\n        require(kncToEthRate > 0, \\\"sanity rate is 0\\\");\\n        require(kncToEthRate <= MAX_RATE, \\\"sanity rate out of bounds\\\");\\n\\n        uint256 sanityEthToKncRate = PRECISION.mul(PRECISION).div(kncToEthRate);\\n\\n        // rate shouldn't be SANITY_RATE_DIFF_BPS lower than sanity rate\\n        require(\\n            rateEthToKnc.mul(BPS) >= sanityEthToKncRate.mul(BPS.sub(SANITY_RATE_DIFF_BPS)),\\n            \\\"kyberNetwork eth to knc rate too low\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/sol6/utils/Utils5.sol\": {\r\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n\\n/**\\n * @title Kyber utility file\\n * mostly shared constants and rate calculation helpers\\n * inherited by most of kyber contracts.\\n * previous utils implementations are for previous solidity versions.\\n */\\ncontract Utils5 {\\n    IERC20 internal constant ETH_TOKEN_ADDRESS = IERC20(\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\\n    );\\n    uint256 internal constant PRECISION = (10**18);\\n    uint256 internal constant MAX_QTY = (10**28); // 10B tokens\\n    uint256 internal constant MAX_RATE = (PRECISION * 10**7); // up to 10M tokens per eth\\n    uint256 internal constant MAX_DECIMALS = 18;\\n    uint256 internal constant ETH_DECIMALS = 18;\\n    uint256 constant BPS = 10000; // Basic Price Steps. 1 step = 0.01%\\n    uint256 internal constant MAX_ALLOWANCE = uint256(-1); // token.approve inifinite\\n\\n    mapping(IERC20 => uint256) internal decimals;\\n\\n    function getUpdateDecimals(IERC20 token) internal returns (uint256) {\\n        if (token == ETH_TOKEN_ADDRESS) return ETH_DECIMALS; // save storage access\\n        uint256 tokenDecimals = decimals[token];\\n        // moreover, very possible that old tokens have decimals 0\\n        // these tokens will just have higher gas fees.\\n        if (tokenDecimals == 0) {\\n            tokenDecimals = token.decimals();\\n            decimals[token] = tokenDecimals;\\n        }\\n\\n        return tokenDecimals;\\n    }\\n\\n    function setDecimals(IERC20 token) internal {\\n        if (decimals[token] != 0) return; //already set\\n\\n        if (token == ETH_TOKEN_ADDRESS) {\\n            decimals[token] = ETH_DECIMALS;\\n        } else {\\n            decimals[token] = token.decimals();\\n        }\\n    }\\n\\n    /// @dev get the balance of a user.\\n    /// @param token The token type\\n    /// @return The balance\\n    function getBalance(IERC20 token, address user) internal view returns (uint256) {\\n        if (token == ETH_TOKEN_ADDRESS) {\\n            return user.balance;\\n        } else {\\n            return token.balanceOf(user);\\n        }\\n    }\\n\\n    function getDecimals(IERC20 token) internal view returns (uint256) {\\n        if (token == ETH_TOKEN_ADDRESS) return ETH_DECIMALS; // save storage access\\n        uint256 tokenDecimals = decimals[token];\\n        // moreover, very possible that old tokens have decimals 0\\n        // these tokens will just have higher gas fees.\\n        if (tokenDecimals == 0) return token.decimals();\\n\\n        return tokenDecimals;\\n    }\\n\\n    function calcDestAmount(\\n        IERC20 src,\\n        IERC20 dest,\\n        uint256 srcAmount,\\n        uint256 rate\\n    ) internal view returns (uint256) {\\n        return calcDstQty(srcAmount, getDecimals(src), getDecimals(dest), rate);\\n    }\\n\\n    function calcSrcAmount(\\n        IERC20 src,\\n        IERC20 dest,\\n        uint256 destAmount,\\n        uint256 rate\\n    ) internal view returns (uint256) {\\n        return calcSrcQty(destAmount, getDecimals(src), getDecimals(dest), rate);\\n    }\\n\\n    function calcDstQty(\\n        uint256 srcQty,\\n        uint256 srcDecimals,\\n        uint256 dstDecimals,\\n        uint256 rate\\n    ) internal pure returns (uint256) {\\n        require(srcQty <= MAX_QTY, \\\"srcQty > MAX_QTY\\\");\\n        require(rate <= MAX_RATE, \\\"rate > MAX_RATE\\\");\\n\\n        if (dstDecimals >= srcDecimals) {\\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS, \\\"dst - src > MAX_DECIMALS\\\");\\n            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\\n        } else {\\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS, \\\"src - dst > MAX_DECIMALS\\\");\\n            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\\n        }\\n    }\\n\\n    function calcSrcQty(\\n        uint256 dstQty,\\n        uint256 srcDecimals,\\n        uint256 dstDecimals,\\n        uint256 rate\\n    ) internal pure returns (uint256) {\\n        require(dstQty <= MAX_QTY, \\\"dstQty > MAX_QTY\\\");\\n        require(rate <= MAX_RATE, \\\"rate > MAX_RATE\\\");\\n\\n        //source quantity is rounded up. to avoid dest quantity being too low.\\n        uint256 numerator;\\n        uint256 denominator;\\n        if (srcDecimals >= dstDecimals) {\\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS, \\\"src - dst > MAX_DECIMALS\\\");\\n            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\\n            denominator = rate;\\n        } else {\\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS, \\\"dst - src > MAX_DECIMALS\\\");\\n            numerator = (PRECISION * dstQty);\\n            denominator = (rate * (10**(dstDecimals - srcDecimals)));\\n        }\\n        return (numerator + denominator - 1) / denominator; //avoid rounding down errors\\n    }\\n\\n    function calcRateFromQty(\\n        uint256 srcAmount,\\n        uint256 destAmount,\\n        uint256 srcDecimals,\\n        uint256 dstDecimals\\n    ) internal pure returns (uint256) {\\n        require(srcAmount <= MAX_QTY, \\\"srcAmount > MAX_QTY\\\");\\n        require(destAmount <= MAX_QTY, \\\"destAmount > MAX_QTY\\\");\\n\\n        if (dstDecimals >= srcDecimals) {\\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS, \\\"dst - src > MAX_DECIMALS\\\");\\n            return ((destAmount * PRECISION) / ((10**(dstDecimals - srcDecimals)) * srcAmount));\\n        } else {\\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS, \\\"src - dst > MAX_DECIMALS\\\");\\n            return ((destAmount * PRECISION * (10**(srcDecimals - dstDecimals))) / srcAmount);\\n        }\\n    }\\n\\n    function minOf(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x > y ? y : x;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/sol6/utils/zeppelin/ReentrancyGuard.sol\": {\r\n      \"content\": \"pragma solidity 0.6.6;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    bool private _notEntered;\\n\\n    constructor () internal {\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/sol6/utils/zeppelin/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity 0.6.6;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/sol6/IKyberFeeHandler.sol\": {\r\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n\\ninterface IKyberFeeHandler {\\n    event RewardPaid(address indexed staker, uint256 indexed epoch, IERC20 indexed token, uint256 amount);\\n    event RebatePaid(address indexed rebateWallet, IERC20 indexed token, uint256 amount);\\n    event PlatformFeePaid(address indexed platformWallet, IERC20 indexed token, uint256 amount);\\n    event KncBurned(uint256 kncTWei, IERC20 indexed token, uint256 amount);\\n\\n    function handleFees(\\n        IERC20 token,\\n        address[] calldata eligibleWallets,\\n        uint256[] calldata rebatePercentages,\\n        address platformWallet,\\n        uint256 platformFee,\\n        uint256 networkFee\\n    ) external payable;\\n\\n    function claimReserveRebate(address rebateWallet) external returns (uint256);\\n\\n    function claimPlatformFee(address platformWallet) external returns (uint256);\\n\\n    function claimStakerReward(\\n        address staker,\\n        uint256 epoch\\n    ) external returns(uint amount);\\n}\\n\"\r\n    },\r\n    \"contracts/sol6/IKyberNetworkProxy.sol\": {\r\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n\\ninterface IKyberNetworkProxy {\\n\\n    event ExecuteTrade(\\n        address indexed trader,\\n        IERC20 src,\\n        IERC20 dest,\\n        address destAddress,\\n        uint256 actualSrcAmount,\\n        uint256 actualDestAmount,\\n        address platformWallet,\\n        uint256 platformFeeBps\\n    );\\n\\n    /// @notice backward compatible\\n    function tradeWithHint(\\n        ERC20 src,\\n        uint256 srcAmount,\\n        ERC20 dest,\\n        address payable destAddress,\\n        uint256 maxDestAmount,\\n        uint256 minConversionRate,\\n        address payable walletId,\\n        bytes calldata hint\\n    ) external payable returns (uint256);\\n\\n    function tradeWithHintAndFee(\\n        IERC20 src,\\n        uint256 srcAmount,\\n        IERC20 dest,\\n        address payable destAddress,\\n        uint256 maxDestAmount,\\n        uint256 minConversionRate,\\n        address payable platformWallet,\\n        uint256 platformFeeBps,\\n        bytes calldata hint\\n    ) external payable returns (uint256 destAmount);\\n\\n    function trade(\\n        IERC20 src,\\n        uint256 srcAmount,\\n        IERC20 dest,\\n        address payable destAddress,\\n        uint256 maxDestAmount,\\n        uint256 minConversionRate,\\n        address payable platformWallet\\n    ) external payable returns (uint256);\\n\\n    /// @notice backward compatible\\n    /// @notice Rate units (10 ** 18) => destQty (twei) / srcQty (twei) * 10 ** 18\\n    function getExpectedRate(\\n        ERC20 src,\\n        ERC20 dest,\\n        uint256 srcQty\\n    ) external view returns (uint256 expectedRate, uint256 worstRate);\\n\\n    function getExpectedRateAfterFee(\\n        IERC20 src,\\n        IERC20 dest,\\n        uint256 srcQty,\\n        uint256 platformFeeBps,\\n        bytes calldata hint\\n    ) external view returns (uint256 expectedRate);\\n}\\n\"\r\n    },\r\n    \"contracts/sol6/ISimpleKyberProxy.sol\": {\r\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n\\n/*\\n * @title simple Kyber Network proxy interface\\n * add convenient functions to help with kyber proxy API\\n */\\ninterface ISimpleKyberProxy {\\n    function swapTokenToEther(\\n        IERC20 token,\\n        uint256 srcAmount,\\n        uint256 minConversionRate\\n    ) external returns (uint256 destAmount);\\n\\n    function swapEtherToToken(IERC20 token, uint256 minConversionRate)\\n        external\\n        payable\\n        returns (uint256 destAmount);\\n\\n    function swapTokenToToken(\\n        IERC20 src,\\n        uint256 srcAmount,\\n        IERC20 dest,\\n        uint256 minConversionRate\\n    ) external returns (uint256 destAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/sol6/mock/reserves/ISanityRate.sol\": {\r\n      \"content\": \"pragma solidity 0.6.6;\\n\\n\\n/// @title Sanity Rate check to prevent burning knc with too expensive or cheap price\\n/// @dev Using ChainLink as the provider for current knc/eth price\\ninterface ISanityRate {\\n    // return latest rate of knc/eth\\n    function latestAnswer() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/sol6/mock/dao/IBurnableToken.sol\": {\r\n      \"content\": \"pragma solidity 0.6.6;\\n\\n\\ninterface IBurnableToken {\\n    function burn(uint256 _value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/sol6/mock/dao/DaoOperator.sol\": {\r\n      \"content\": \"pragma solidity 0.6.6;\\n\\n\\ncontract DaoOperator {\\n    address public daoOperator;\\n\\n    constructor(address _daoOperator) public {\\n        require(_daoOperator != address(0), \\\"daoOperator is 0\\\");\\n        daoOperator = _daoOperator;\\n    }\\n\\n    modifier onlyDaoOperator() {\\n        require(msg.sender == daoOperator, \\\"only daoOperator\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/sol6/IERC20.sol\": {\r\n      \"content\": \"pragma solidity 0.6.6;\\n\\n\\ninterface IERC20 {\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool success);\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    function decimals() external view returns (uint8 digits);\\n\\n    function totalSupply() external view returns (uint256 supply);\\n}\\n\\n\\n// to support backward compatible contract name -- so function signature remains same\\nabstract contract ERC20 is IERC20 {\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IKyberProxy\",\"name\":\"_kyberProxy\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_knc\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_burnBlockInterval\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_daoOperator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rebateBps\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardBps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rebateBps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnBps\",\"type\":\"uint256\"}],\"name\":\"BRRUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISanityRate\",\"name\":\"sanityRate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiToBurn\",\"type\":\"uint256\"}],\"name\":\"BurnConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"daoOperator\",\"type\":\"address\"}],\"name\":\"DaoOperatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"platformWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformFeeWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rebateWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"rebateWallets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rebatePercentBpsPerWallet\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmtWei\",\"type\":\"uint256\"}],\"name\":\"FeeDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feePool\",\"type\":\"address\"}],\"name\":\"FeePoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kncTWei\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"KncBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IKyberProxy\",\"name\":\"kyberProxy\",\"type\":\"address\"}],\"name\":\"KyberProxyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"platformWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PlatformFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rebateWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RebatePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"brrData\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"rewardBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"rebateBps\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnBlockInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnKnc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"kncBurnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"platformWallet\",\"type\":\"address\"}],\"name\":\"claimPlatformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountWei\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rebateWallet\",\"type\":\"address\"}],\"name\":\"claimReserveRebate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountWei\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimStakerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feePerPlatformWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestSanityRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"kncToEthSanityRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSanityRateContracts\",\"outputs\":[{\"internalType\":\"contract ISanityRate[]\",\"name\":\"sanityRates\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rebateWallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rebateBpsPerWallet\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"platformWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"platformFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"networkFee\",\"type\":\"uint256\"}],\"name\":\"handleFees\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"knc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kyberProxy\",\"outputs\":[{\"internalType\":\"contract IKyberProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBurnBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readBRRData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebateBps\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rebatePerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rebateBps\",\"type\":\"uint256\"}],\"name\":\"setBRRData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISanityRate\",\"name\":\"_sanityRate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weiToBurn\",\"type\":\"uint256\"}],\"name\":\"setBurnConfigParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daoOperator\",\"type\":\"address\"}],\"name\":\"setDaoOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feePool\",\"type\":\"address\"}],\"name\":\"setFeePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKyberProxy\",\"name\":\"_newProxy\",\"type\":\"address\"}],\"name\":\"setKyberProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPayoutBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weiToBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"KatanaFeeHandler","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"0000000000000000000000009aab3f75489902f3a48495025729a0af77d4b11e000000000000000000000000defa4e8a7bcba345f687a2f1456f5edd9ce97202000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000e6a7338cba0a1070adfb22c071152996054547130000000000000000000000000e590bb5f02a0c38888bffb45dee050b8fb60bda0000000000000000000000000000000000000000000000000000000000001c6b0000000000000000000000000000000000000000000000000000000000000900","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}