{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/connectors/compound/main.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport { TokenInterface } from \\\"../../common/interfaces.sol\\\";\\nimport { Stores } from \\\"../../common/stores.sol\\\";\\nimport { Helpers } from \\\"./helpers.sol\\\";\\nimport { Events } from \\\"./events.sol\\\";\\nimport { CETHInterface, CTokenInterface } from \\\"./interface.sol\\\";\\n\\nabstract contract CompoundResolver is Events, Helpers {\\n    /**\\n     * @dev Deposit ETH/ERC20_Token.\\n     * @notice Deposit a token to Compound for lending / collaterization.\\n     * @param token The address of the token to deposit. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n     * @param cToken The address of the corresponding cToken.\\n     * @param amt The amount of the token to deposit. (For max: `uint256(-1)`)\\n     * @param getId ID to retrieve amt.\\n     * @param setId ID stores the amount of tokens deposited.\\n    */\\n    function depositRaw(\\n        address token,\\n        address cToken,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) public payable returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _amt = getUint(getId, amt);\\n\\n        require(token != address(0) && cToken != address(0), \\\"invalid token/ctoken address\\\");\\n\\n        enterMarket(cToken);\\n        if (token == ethAddr) {\\n            _amt = _amt == uint(-1) ? address(this).balance : _amt;\\n            CETHInterface(cToken).mint{value: _amt}();\\n        } else {\\n            TokenInterface tokenContract = TokenInterface(token);\\n            _amt = _amt == uint(-1) ? tokenContract.balanceOf(address(this)) : _amt;\\n            tokenContract.approve(cToken, _amt);\\n            require(CTokenInterface(cToken).mint(_amt) == 0, \\\"deposit-failed\\\");\\n        }\\n        setUint(setId, _amt);\\n\\n        _eventName = \\\"LogDeposit(address,address,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(token, cToken, _amt, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Deposit ETH/ERC20_Token using the Mapping.\\n     * @notice Deposit a token to Compound for lending / collaterization.\\n     * @param tokenId The token id of the token to deposit.(For eg: ETH-A)\\n     * @param amt The amount of the token to deposit. (For max: `uint256(-1)`)\\n     * @param getId ID to retrieve amt.\\n     * @param setId ID stores the amount of tokens deposited.\\n    */\\n    function deposit(\\n        string calldata tokenId,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        (address token, address cToken) = compMapping.getMapping(tokenId);\\n        (_eventName, _eventParam) = depositRaw(token, cToken, amt, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Withdraw ETH/ERC20_Token.\\n     * @notice Withdraw deposited token from Compound\\n     * @param token The address of the token to withdraw. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n     * @param cToken The address of the corresponding cToken.\\n     * @param amt The amount of the token to withdraw. (For max: `uint256(-1)`)\\n     * @param getId ID to retrieve amt.\\n     * @param setId ID stores the amount of tokens withdrawn.\\n    */\\n    function withdrawRaw(\\n        address token,\\n        address cToken,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) public payable returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _amt = getUint(getId, amt);\\n        \\n        require(token != address(0) && cToken != address(0), \\\"invalid token/ctoken address\\\");\\n\\n        CTokenInterface cTokenContract = CTokenInterface(cToken);\\n        if (_amt == uint(-1)) {\\n            TokenInterface tokenContract = TokenInterface(token);\\n            uint initialBal = token == ethAddr ? address(this).balance : tokenContract.balanceOf(address(this));\\n            require(cTokenContract.redeem(cTokenContract.balanceOf(address(this))) == 0, \\\"full-withdraw-failed\\\");\\n            uint finalBal = token == ethAddr ? address(this).balance : tokenContract.balanceOf(address(this));\\n            _amt = finalBal - initialBal;\\n        } else {\\n            require(cTokenContract.redeemUnderlying(_amt) == 0, \\\"withdraw-failed\\\");\\n        }\\n        setUint(setId, _amt);\\n\\n        _eventName = \\\"LogWithdraw(address,address,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(token, cToken, _amt, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Withdraw ETH/ERC20_Token using the Mapping.\\n     * @notice Withdraw deposited token from Compound\\n     * @param tokenId The token id of the token to withdraw.(For eg: ETH-A)\\n     * @param amt The amount of the token to withdraw. (For max: `uint256(-1)`)\\n     * @param getId ID to retrieve amt.\\n     * @param setId ID stores the amount of tokens withdrawn.\\n    */\\n    function withdraw(\\n        string calldata tokenId,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        (address token, address cToken) = compMapping.getMapping(tokenId);\\n        (_eventName, _eventParam) = withdrawRaw(token, cToken, amt, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Borrow ETH/ERC20_Token.\\n     * @notice Borrow a token using Compound\\n     * @param token The address of the token to borrow. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n     * @param cToken The address of the corresponding cToken.\\n     * @param amt The amount of the token to borrow.\\n     * @param getId ID to retrieve amt.\\n     * @param setId ID stores the amount of tokens borrowed.\\n    */\\n    function borrowRaw(\\n        address token,\\n        address cToken,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) public payable returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _amt = getUint(getId, amt);\\n\\n        require(token != address(0) && cToken != address(0), \\\"invalid token/ctoken address\\\");\\n\\n        enterMarket(cToken);\\n        require(CTokenInterface(cToken).borrow(_amt) == 0, \\\"borrow-failed\\\");\\n        setUint(setId, _amt);\\n\\n        _eventName = \\\"LogBorrow(address,address,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(token, cToken, _amt, getId, setId);\\n    }\\n\\n     /**\\n     * @dev Borrow ETH/ERC20_Token using the Mapping.\\n     * @notice Borrow a token using Compound\\n     * @param tokenId The token id of the token to borrow.(For eg: DAI-A)\\n     * @param amt The amount of the token to borrow.\\n     * @param getId ID to retrieve amt.\\n     * @param setId ID stores the amount of tokens borrowed.\\n    */\\n    function borrow(\\n        string calldata tokenId,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        (address token, address cToken) = compMapping.getMapping(tokenId);\\n        (_eventName, _eventParam) = borrowRaw(token, cToken, amt, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Payback borrowed ETH/ERC20_Token.\\n     * @notice Payback debt owed.\\n     * @param token The address of the token to payback. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n     * @param cToken The address of the corresponding cToken.\\n     * @param amt The amount of the token to payback. (For max: `uint256(-1)`)\\n     * @param getId ID to retrieve amt.\\n     * @param setId ID stores the amount of tokens paid back.\\n    */\\n    function paybackRaw(\\n        address token,\\n        address cToken,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) public payable returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _amt = getUint(getId, amt);\\n\\n        require(token != address(0) && cToken != address(0), \\\"invalid token/ctoken address\\\");\\n\\n        CTokenInterface cTokenContract = CTokenInterface(cToken);\\n        _amt = _amt == uint(-1) ? cTokenContract.borrowBalanceCurrent(address(this)) : _amt;\\n\\n        if (token == ethAddr) {\\n            require(address(this).balance >= _amt, \\\"not-enough-eth\\\");\\n            CETHInterface(cToken).repayBorrow{value: _amt}();\\n        } else {\\n            TokenInterface tokenContract = TokenInterface(token);\\n            require(tokenContract.balanceOf(address(this)) >= _amt, \\\"not-enough-token\\\");\\n            tokenContract.approve(cToken, _amt);\\n            require(cTokenContract.repayBorrow(_amt) == 0, \\\"repay-failed.\\\");\\n        }\\n        setUint(setId, _amt);\\n\\n        _eventName = \\\"LogPayback(address,address,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(token, cToken, _amt, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Payback borrowed ETH/ERC20_Token using the Mapping.\\n     * @notice Payback debt owed.\\n     * @param tokenId The token id of the token to payback.(For eg: COMP-A)\\n     * @param amt The amount of the token to payback. (For max: `uint256(-1)`)\\n     * @param getId ID to retrieve amt.\\n     * @param setId ID stores the amount of tokens paid back.\\n    */\\n    function payback(\\n        string calldata tokenId,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        (address token, address cToken) = compMapping.getMapping(tokenId);\\n        (_eventName, _eventParam) = paybackRaw(token, cToken, amt, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Deposit ETH/ERC20_Token.\\n     * @notice Same as depositRaw. The only difference is this method stores cToken amount in set ID.\\n     * @param token The address of the token to deposit. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n     * @param cToken The address of the corresponding cToken.\\n     * @param amt The amount of the token to deposit. (For max: `uint256(-1)`)\\n     * @param getId ID to retrieve amt.\\n     * @param setId ID stores the amount of cTokens received.\\n    */\\n    function depositCTokenRaw(\\n        address token,\\n        address cToken,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) public payable returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _amt = getUint(getId, amt);\\n\\n        require(token != address(0) && cToken != address(0), \\\"invalid token/ctoken address\\\");\\n\\n        enterMarket(cToken);\\n\\n        CTokenInterface ctokenContract = CTokenInterface(cToken);\\n        uint initialBal = ctokenContract.balanceOf(address(this));\\n\\n        if (token == ethAddr) {\\n            _amt = _amt == uint(-1) ? address(this).balance : _amt;\\n            CETHInterface(cToken).mint{value: _amt}();\\n        } else {\\n            TokenInterface tokenContract = TokenInterface(token);\\n            _amt = _amt == uint(-1) ? tokenContract.balanceOf(address(this)) : _amt;\\n            tokenContract.approve(cToken, _amt);\\n            require(ctokenContract.mint(_amt) == 0, \\\"deposit-ctoken-failed.\\\");\\n        }\\n\\n        uint _cAmt;\\n\\n        {\\n            uint finalBal = ctokenContract.balanceOf(address(this));\\n            finalBal - initialBal;\\n            setUint(setId, _cAmt);\\n        }\\n\\n        _eventName = \\\"LogDepositCToken(address,address,uint256,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(token, cToken, _amt, _cAmt, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Deposit ETH/ERC20_Token using the Mapping.\\n     * @notice Same as deposit. The only difference is this method stores cToken amount in set ID.\\n     * @param tokenId The token id of the token to depositCToken.(For eg: DAI-A)\\n     * @param amt The amount of the token to deposit. (For max: `uint256(-1)`)\\n     * @param getId ID to retrieve amt.\\n     * @param setId ID stores the amount of cTokens received.\\n    */\\n    function depositCToken(\\n        string calldata tokenId,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        (address token, address cToken) = compMapping.getMapping(tokenId);\\n        (_eventName, _eventParam) = depositCTokenRaw(token, cToken, amt, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Withdraw CETH/CERC20_Token using cToken Amt.\\n     * @notice Same as withdrawRaw. The only difference is this method fetch cToken amount in get ID.\\n     * @param token The address of the token to withdraw. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n     * @param cToken The address of the corresponding cToken.\\n     * @param cTokenAmt The amount of cTokens to withdraw\\n     * @param getId ID to retrieve cTokenAmt \\n     * @param setId ID stores the amount of tokens withdrawn.\\n    */\\n    function withdrawCTokenRaw(\\n        address token,\\n        address cToken,\\n        uint cTokenAmt,\\n        uint getId,\\n        uint setId\\n    ) public payable returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _cAmt = getUint(getId, cTokenAmt);\\n        require(token != address(0) && cToken != address(0), \\\"invalid token/ctoken address\\\");\\n\\n        CTokenInterface cTokenContract = CTokenInterface(cToken);\\n        TokenInterface tokenContract = TokenInterface(token);\\n        _cAmt = _cAmt == uint(-1) ? cTokenContract.balanceOf(address(this)) : _cAmt;\\n\\n        uint withdrawAmt;\\n        {\\n            uint initialBal = token != ethAddr ? tokenContract.balanceOf(address(this)) : address(this).balance;\\n            require(cTokenContract.redeem(_cAmt) == 0, \\\"redeem-failed\\\");\\n            uint finalBal = token != ethAddr ? tokenContract.balanceOf(address(this)) : address(this).balance;\\n\\n            withdrawAmt = sub(finalBal, initialBal);\\n        }\\n\\n        setUint(setId, withdrawAmt);\\n\\n        _eventName = \\\"LogWithdrawCToken(address,address,uint256,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(token, cToken, withdrawAmt, _cAmt, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Withdraw CETH/CERC20_Token using cToken Amt & the Mapping.\\n     * @notice Same as withdraw. The only difference is this method fetch cToken amount in get ID.\\n     * @param tokenId The token id of the token to withdraw CToken.(For eg: ETH-A)\\n     * @param cTokenAmt The amount of cTokens to withdraw\\n     * @param getId ID to retrieve cTokenAmt \\n     * @param setId ID stores the amount of tokens withdrawn.\\n    */\\n    function withdrawCToken(\\n        string calldata tokenId,\\n        uint cTokenAmt,\\n        uint getId,\\n        uint setId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        (address token, address cToken) = compMapping.getMapping(tokenId);\\n        (_eventName, _eventParam) = withdrawCTokenRaw(token, cToken, cTokenAmt, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Liquidate a position.\\n     * @notice Liquidate a position.\\n     * @param borrower Borrower's Address.\\n     * @param tokenToPay The address of the token to pay for liquidation.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n     * @param cTokenPay Corresponding cToken address.\\n     * @param tokenInReturn The address of the token to return for liquidation.\\n     * @param cTokenColl Corresponding cToken address.\\n     * @param amt The token amount to pay for liquidation.\\n     * @param getId ID to retrieve amt.\\n     * @param setId ID stores the amount of paid for liquidation.\\n    */\\n    function liquidateRaw(\\n        address borrower,\\n        address tokenToPay,\\n        address cTokenPay,\\n        address tokenInReturn,\\n        address cTokenColl,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) public payable returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _amt = getUint(getId, amt);\\n        require(tokenToPay != address(0) && cTokenPay != address(0), \\\"invalid token/ctoken address\\\");\\n        require(tokenInReturn != address(0) && cTokenColl != address(0), \\\"invalid token/ctoken address\\\");\\n\\n        CTokenInterface cTokenContract = CTokenInterface(cTokenPay);\\n\\n        {\\n            (,, uint shortfal) = troller.getAccountLiquidity(borrower);\\n            require(shortfal != 0, \\\"account-cannot-be-liquidated\\\");\\n            _amt = _amt == uint(-1) ? cTokenContract.borrowBalanceCurrent(borrower) : _amt;\\n        }\\n\\n        if (tokenToPay == ethAddr) {\\n            require(address(this).balance >= _amt, \\\"not-enought-eth\\\");\\n            CETHInterface(cTokenPay).liquidateBorrow{value: _amt}(borrower, cTokenColl);\\n        } else {\\n            TokenInterface tokenContract = TokenInterface(tokenToPay);\\n            require(tokenContract.balanceOf(address(this)) >= _amt, \\\"not-enough-token\\\");\\n            tokenContract.approve(cTokenPay, _amt);\\n            require(cTokenContract.liquidateBorrow(borrower, _amt, cTokenColl) == 0, \\\"liquidate-failed\\\");\\n        }\\n        \\n        setUint(setId, _amt);\\n\\n        _eventName = \\\"LogLiquidate(address,address,address,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(\\n            address(this),\\n            tokenToPay,\\n            tokenInReturn, \\n            _amt,\\n            getId,\\n            setId\\n        );\\n    }\\n\\n    /**\\n     * @dev Liquidate a position using the mapping.\\n     * @notice Liquidate a position using the mapping.\\n     * @param borrower Borrower's Address.\\n     * @param tokenIdToPay token id of the token to pay for liquidation.(For eg: ETH-A)\\n     * @param tokenIdInReturn token id of the token to return for liquidation.(For eg: USDC-A)\\n     * @param amt token amount to pay for liquidation.\\n     * @param getId ID to retrieve amt.\\n     * @param setId ID stores the amount of paid for liquidation.\\n    */\\n    function liquidate(\\n        address borrower,\\n        string calldata tokenIdToPay,\\n        string calldata tokenIdInReturn,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        (address tokenToPay, address cTokenToPay) = compMapping.getMapping(tokenIdToPay);\\n        (address tokenInReturn, address cTokenColl) = compMapping.getMapping(tokenIdInReturn);\\n\\n        (_eventName, _eventParam) = liquidateRaw(\\n            borrower,\\n            tokenToPay,\\n            cTokenToPay,\\n            tokenInReturn,\\n            cTokenColl,\\n            amt,\\n            getId,\\n            setId\\n        );\\n    }\\n}\\n\\ncontract ConnectV2Compound is CompoundResolver {\\n    string public name = \\\"Compound-v1\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/common/interfaces.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\ninterface TokenInterface {\\n    function approve(address, uint256) external;\\n    function transfer(address, uint) external;\\n    function transferFrom(address, address, uint) external;\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n    function balanceOf(address) external view returns (uint);\\n    function decimals() external view returns (uint);\\n}\\n\\ninterface MemoryInterface {\\n    function getUint(uint id) external returns (uint num);\\n    function setUint(uint id, uint val) external;\\n}\\n\\ninterface InstaMapping {\\n    function cTokenMapping(address) external view returns (address);\\n    function gemJoinMapping(bytes32) external view returns (address);\\n}\\n\\ninterface AccountInterface {\\n    function enable(address) external;\\n    function disable(address) external;\\n    function isAuth(address) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/common/stores.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { MemoryInterface, InstaMapping } from \\\"./interfaces.sol\\\";\\n\\n\\nabstract contract Stores {\\n\\n  /**\\n   * @dev Return ethereum address\\n   */\\n  address constant internal ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  /**\\n   * @dev Return Wrapped ETH address\\n   */\\n  address constant internal wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n  /**\\n   * @dev Return memory variable address\\n   */\\n  MemoryInterface constant internal instaMemory = MemoryInterface(0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F);\\n\\n  /**\\n   * @dev Return InstaDApp Mapping Addresses\\n   */\\n  InstaMapping constant internal instaMapping = InstaMapping(0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88);\\n\\n  /**\\n   * @dev Get Uint value from InstaMemory Contract.\\n   */\\n  function getUint(uint getId, uint val) internal returns (uint returnVal) {\\n    returnVal = getId == 0 ? val : instaMemory.getUint(getId);\\n  }\\n\\n  /**\\n  * @dev Set Uint value in InstaMemory Contract.\\n  */\\n  function setUint(uint setId, uint val) virtual internal {\\n    if (setId != 0) instaMemory.setUint(setId, val);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/connectors/compound/helpers.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { DSMath } from \\\"../../common/math.sol\\\";\\nimport { Basic } from \\\"../../common/basic.sol\\\";\\nimport { ComptrollerInterface, CompoundMappingInterface } from \\\"./interface.sol\\\";\\n\\nabstract contract Helpers is DSMath, Basic {\\n    /**\\n     * @dev Compound Comptroller\\n     */\\n    ComptrollerInterface internal constant troller = ComptrollerInterface(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\\n\\n    /**\\n     * @dev Compound Mapping\\n     */\\n    CompoundMappingInterface internal constant compMapping = CompoundMappingInterface(0xA8F9D4aA7319C54C04404765117ddBf9448E2082);\\n\\n    /**\\n     * @dev enter compound market\\n     */\\n    function enterMarket(address cToken) internal {\\n        address[] memory markets = troller.getAssetsIn(address(this));\\n        bool isEntered = false;\\n        for (uint i = 0; i < markets.length; i++) {\\n            if (markets[i] == cToken) {\\n                isEntered = true;\\n            }\\n        }\\n        if (!isEntered) {\\n            address[] memory toEnter = new address[](1);\\n            toEnter[0] = cToken;\\n            troller.enterMarkets(toEnter);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/connectors/compound/events.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\ncontract Events {\\n    event LogDeposit(\\n        address indexed token,\\n        address cToken,\\n        uint256 tokenAmt,\\n        uint256 getId,\\n        uint256 setId\\n    );\\n\\n    event LogWithdraw(\\n        address indexed token,\\n        address cToken,\\n        uint256 tokenAmt,\\n        uint256 getId,\\n        uint256 setId\\n    );\\n\\n    event LogBorrow(\\n        address indexed token,\\n        address cToken,\\n        uint256 tokenAmt,\\n        uint256 getId,\\n        uint256 setId\\n    );\\n\\n    event LogPayback(\\n        address indexed token,\\n        address cToken,\\n        uint256 tokenAmt,\\n        uint256 getId,\\n        uint256 setId\\n    );\\n\\n    event LogDepositCToken(\\n        address indexed token,\\n        address cToken,\\n        uint256 tokenAmt,\\n        uint256 cTokenAmt,\\n        uint256 getId, \\n        uint256 setId\\n    );\\n\\n    event LogWithdrawCToken(\\n        address indexed token,\\n        address cToken,\\n        uint256 tokenAmt,\\n        uint256 cTokenAmt,\\n        uint256 getId,\\n        uint256 setId\\n    );\\n    \\n    event LogLiquidate(\\n        address indexed borrower,\\n        address indexed tokenToPay,\\n        address indexed tokenInReturn,\\n        uint256 tokenAmt,\\n        uint256 getId,\\n        uint256 setId\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/connectors/compound/interface.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\ninterface CTokenInterface {\\n    function mint(uint mintAmount) external returns (uint);\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint); // For ERC20\\n    function liquidateBorrow(address borrower, uint repayAmount, address cTokenCollateral) external returns (uint);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function exchangeRateCurrent() external returns (uint);\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n}\\n\\ninterface CETHInterface {\\n    function mint() external payable;\\n    function repayBorrow() external payable;\\n    function repayBorrowBehalf(address borrower) external payable;\\n    function liquidateBorrow(address borrower, address cTokenCollateral) external payable;\\n}\\n\\ninterface ComptrollerInterface {\\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\\n    function exitMarket(address cTokenAddress) external returns (uint);\\n    function getAssetsIn(address account) external view returns (address[] memory);\\n    function getAccountLiquidity(address account) external view returns (uint, uint, uint);\\n    function claimComp(address) external;\\n}\\n\\ninterface CompoundMappingInterface {\\n    function cTokenMapping(string calldata tokenId) external view returns (address);\\n    function getMapping(string calldata tokenId) external view returns (address, address);\\n}\"\r\n    },\r\n    \"contracts/common/math.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract DSMath {\\n  uint constant WAD = 10 ** 18;\\n  uint constant RAY = 10 ** 27;\\n\\n  function add(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(x, y);\\n  }\\n\\n  function sub(uint x, uint y) internal virtual pure returns (uint z) {\\n    z = SafeMath.sub(x, y);\\n  }\\n\\n  function mul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.mul(x, y);\\n  }\\n\\n  function div(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.div(x, y);\\n  }\\n\\n  function wmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\\n  }\\n\\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\\n  }\\n\\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\\n  }\\n\\n  function rmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\\n  }\\n\\n  function toInt(uint x) internal pure returns (int y) {\\n    y = int(x);\\n    require(y >= 0, \\\"int-overflow\\\");\\n  }\\n\\n  function toRad(uint wad) internal pure returns (uint rad) {\\n    rad = mul(wad, 10 ** 27);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/common/basic.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { TokenInterface } from \\\"./interfaces.sol\\\";\\nimport { Stores } from \\\"./stores.sol\\\";\\nimport { DSMath } from \\\"./math.sol\\\";\\n\\nabstract contract Basic is DSMath, Stores {\\n\\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\\n        amt = (_amt / 10 ** (18 - _dec));\\n    }\\n\\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\\n        amt = mul(_amt, 10 ** (18 - _dec));\\n    }\\n\\n    function getTokenBal(TokenInterface token) internal view returns(uint _amt) {\\n        _amt = address(token) == ethAddr ? address(this).balance : token.balanceOf(address(this));\\n    }\\n\\n    function getTokensDec(TokenInterface buyAddr, TokenInterface sellAddr) internal view returns(uint buyDec, uint sellDec) {\\n        buyDec = address(buyAddr) == ethAddr ?  18 : buyAddr.decimals();\\n        sellDec = address(sellAddr) == ethAddr ?  18 : sellAddr.decimals();\\n    }\\n\\n    function encodeEvent(string memory eventName, bytes memory eventParam) internal pure returns (bytes memory) {\\n        return abi.encode(eventName, eventParam);\\n    }\\n\\n    function changeEthAddress(address buy, address sell) internal pure returns(TokenInterface _buy, TokenInterface _sell){\\n        _buy = buy == ethAddr ? TokenInterface(wethAddr) : TokenInterface(buy);\\n        _sell = sell == ethAddr ? TokenInterface(wethAddr) : TokenInterface(sell);\\n    }\\n\\n    function convertEthToWeth(bool isEth, TokenInterface token, uint amount) internal {\\n        if(isEth) token.deposit{value: amount}();\\n    }\\n\\n    function convertWethToEth(bool isEth, TokenInterface token, uint amount) internal {\\n       if(isEth) {\\n            token.approve(address(token), amount);\\n            token.withdraw(amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cTokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogDepositCToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenToPay\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenInReturn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogLiquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogPayback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cTokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawCToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"borrowRaw\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"depositCToken\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"depositCTokenRaw\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"depositRaw\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenIdToPay\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenIdInReturn\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenToPay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenPay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenInReturn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenColl\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"liquidateRaw\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"payback\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"paybackRaw\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"cTokenAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"withdrawCToken\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cTokenAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"withdrawCTokenRaw\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"withdrawRaw\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"ConnectV2Compound","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}