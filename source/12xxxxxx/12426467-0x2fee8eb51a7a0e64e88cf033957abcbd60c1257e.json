{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.7.3;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() \r\n        internal\r\n        view \r\n        virtual\r\n        returns (address payable) \r\n    {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() \r\n        internal\r\n        view \r\n        virtual \r\n        returns (bytes memory) \r\n    {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(\r\n        uint256 a, \r\n        uint256 b\r\n    ) \r\n        internal \r\n        pure \r\n        returns (uint256) \r\n    {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a, \r\n        uint256 b\r\n    ) \r\n        internal \r\n        pure \r\n        returns (uint256) \r\n    {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a, \r\n        uint256 b, \r\n        string memory errorMessage\r\n    ) \r\n        internal \r\n        pure \r\n        returns (uint256) \r\n    {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(\r\n        uint256 a, \r\n        uint256 b\r\n    ) \r\n        internal \r\n        pure \r\n        returns (uint256) \r\n    {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(\r\n        uint256 a, \r\n        uint256 b\r\n    ) \r\n        internal \r\n        pure \r\n        returns (uint256) \r\n    {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a, \r\n        uint256 b, \r\n        string memory errorMessage\r\n    ) \r\n        internal \r\n        pure \r\n        returns (uint256) \r\n    {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(\r\n        uint256 a, \r\n        uint256 b\r\n    ) \r\n        internal \r\n        pure \r\n        returns (uint256) \r\n    {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a, \r\n        uint256 b, \r\n        string memory errorMessage\r\n    ) \r\n        internal \r\n        pure \r\n        returns (uint256) \r\n    {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\nlibrary Address {\r\n    function isContract(\r\n        address account\r\n    ) \r\n        internal \r\n        view \r\n        returns (bool) \r\n    {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(\r\n        address payable recipient, \r\n        uint256 amount\r\n    ) \r\n        internal \r\n    {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target, \r\n        bytes memory data\r\n    ) \r\n        internal \r\n        returns (bytes memory) \r\n    {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n   function functionCall(\r\n       address target, \r\n       bytes memory data, \r\n       string memory errorMessage\r\n    ) \r\n        internal \r\n        returns (bytes memory) \r\n    {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target, \r\n        bytes memory data, \r\n        uint256 value\r\n    ) \r\n        internal \r\n        returns (bytes memory) \r\n    {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target, \r\n        bytes memory data, \r\n        uint256 value, \r\n        string memory errorMessage\r\n    ) \r\n        internal \r\n        returns (bytes memory) \r\n    {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target, \r\n        bytes memory data, \r\n        uint256 weiValue, \r\n        string memory errorMessage\r\n    ) \r\n        private \r\n        returns (bytes memory) \r\n    {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address public owner;\r\n    address public pendingOwner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner, \r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(\r\n        address newOwner\r\n    ) \r\n        onlyOwner \r\n        external \r\n    {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        pendingOwner = newOwner;\r\n     }\r\n    \r\n     function claimOwnership() \r\n        external \r\n    {\r\n        require(_msgSender() == pendingOwner);\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n     }\r\n}\r\n\r\nlibrary VerifySignature {\r\n\r\n    function getEthSignedMessageHash(bytes32 _messageHash) internal pure returns (bytes32) {\r\n        /*\r\n        Signature is produced by signing a keccak256 hash with the following format:\r\n        \"\\x19Ethereum Signed Message\\n\" + len(msg) + msg\r\n        */\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _messageHash));\r\n    }\r\n\r\n    /* 4. Verify signature\r\n    signer = 0xB273216C05A8c0D4F0a4Dd0d7Bae1D2EfFE636dd\r\n    to = 0x14723A09ACff6D2A60DcdF7aA4AFf308FDDC160C\r\n    amount = 123\r\n    message = \"coffee and donuts\"\r\n    nonce = 1\r\n    signature =\r\n        0x993dab3dd91f5c6dc28e17439be475478f5635c92a56e17e82349d3fb2f166196f466c0b4e0c146f285204f0dcb13e5ae67bc33f4b888ec32dfe0a063e8f3f781b\r\n    */\r\n    function verify(\r\n        bytes32 _message, bytes memory _signature, address _signer\r\n    )\r\n        internal pure returns (bool)\r\n    {\r\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(_message);\r\n\r\n        return recoverSigner(ethSignedMessageHash, _signature) == _signer;\r\n    }\r\n\r\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature)\r\n        internal pure returns (address)\r\n    {\r\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\r\n\r\n        return ecrecover(_ethSignedMessageHash, v, r, s);\r\n    }\r\n\r\n    function splitSignature(bytes memory sig)\r\n        internal pure returns (bytes32 r, bytes32 s, uint8 v)\r\n    {\r\n        require(sig.length == 65, \"invalid signature length\");\r\n\r\n        assembly {\r\n            /*\r\n            First 32 bytes stores the length of the signature\r\n\r\n            add(sig, 32) = pointer of sig + 32\r\n            effectively, skips first 32 bytes of signature\r\n\r\n            mload(p) loads next 32 bytes starting at the memory address p into memory\r\n            */\r\n\r\n            // first 32 bytes, after the length prefix\r\n            r := mload(add(sig, 32))\r\n            // second 32 bytes\r\n            s := mload(add(sig, 64))\r\n            // final byte (first byte of the next 32 bytes)\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n\r\n        // implicitly return (r, s, v)\r\n    }\r\n}\r\n\r\ncontract ETHPortal is Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (bytes32 => bool) public txNonces;\r\n    address public signAddress;\r\n    address public tokenAddress;\r\n\r\n    string public chainName = \"ETH_BLOCKCHAIN\";\r\n\r\n    event TokensLocked(\r\n        address user,\r\n        uint256 amount\r\n    );\r\n\r\n    event TokensUnlocked(\r\n        address user,\r\n        uint256 amount,\r\n        bytes32 txNonce\r\n    );\r\n\r\n    constructor(address _signAddress, address _tokenAddress) public {\r\n        signAddress = _signAddress;\r\n        tokenAddress = _tokenAddress;\r\n    }\r\n\r\n    function changeSignAddress(address _signAddress) public onlyOwner {\r\n        signAddress = _signAddress;\r\n    }\r\n\r\n    function changeTokenAddress(address _tokenAddress) public onlyOwner {\r\n        tokenAddress = _tokenAddress;\r\n    }\r\n\r\n    function lockedTokens() public view returns(uint256) {\r\n        return IERC20(tokenAddress).balanceOf(address(this));\r\n    }\r\n\r\n    function sendToBSC(uint256 _amount) public {\r\n        require(_amount > 0, \"AMOUNT_CANT_BE_ZERO\");\r\n        IERC20(tokenAddress).transferFrom(_msgSender(), address(this), _amount);\r\n        emit TokensLocked(_msgSender(), _amount);\r\n    }\r\n\r\n    function withdrawFromBSC(bytes calldata _signature, uint256 _amount, bytes32 _txNonce) public {\r\n        require(txNonces[_txNonce] == false, \"INVALID_TRANSACTION\");\r\n        txNonces[_txNonce] = true;\r\n        require(_amount > 0, \"AMOUNT_CANT_BE_ZERO\");\r\n\r\n        bytes32 message = keccak256(abi.encodePacked(_amount, _msgSender(), _txNonce, chainName));\r\n        require(VerifySignature.verify(message, _signature, signAddress) == true, \"INVALID_SIGNATURE\");\r\n\r\n        IERC20(tokenAddress).transfer(_msgSender(), _amount);\r\n        emit TokensUnlocked(_msgSender(), _amount, _txNonce);\r\n\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txNonce\",\"type\":\"bytes32\"}],\"name\":\"TokensUnlocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"chainName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signAddress\",\"type\":\"address\"}],\"name\":\"changeSignAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"changeTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendToBSC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"txNonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_txNonce\",\"type\":\"bytes32\"}],\"name\":\"withdrawFromBSC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ETHPortal","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000bd5e6a5c2353438b6f0da7491c478a2010a25411000000000000000000000000f9fbe825bfb2bf3e387af0dc18cac8d87f29dea8","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7dbc3cfa584e04e9e266a207ffd81de9769927d0b91885402bd2263074efa7a5"}]}