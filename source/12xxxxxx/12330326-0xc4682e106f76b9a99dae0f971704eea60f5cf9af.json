{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/hoangquan/Desktop/Self/Deflect/deflector-new/contracts/Deflector.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/*\\r\\n    ▓█████▄ ▓█████   █████▒██▓    ▓█████  ▄████▄  ▄▄▄█████▓ ▒█████   ██▀███\\r\\n    ▒██▀ ██▌▓█   ▀ ▓██   ▒▓██▒    ▓█   ▀ ▒██▀ ▀█  ▓  ██▒ ▓▒▒██▒  ██▒▓██ ▒ ██▒\\r\\n    ░██   █▌▒███   ▒████ ░▒██░    ▒███   ▒▓█    ▄ ▒ ▓██░ ▒░▒██░  ██▒▓██ ░▄█ ▒\\r\\n    ░▓█▄   ▌▒▓█  ▄ ░▓█▒  ░▒██░    ▒▓█  ▄ ▒▓▓▄ ▄██▒░ ▓██▓ ░ ▒██   ██░▒██▀▀█▄\\r\\n    ░▒████▓ ░▒████▒░▒█░   ░██████▒░▒████▒▒ ▓███▀ ░  ▒██▒ ░ ░ ████▓▒░░██▓ ▒██▒\\r\\n     ▒▒▓  ▒ ░░ ▒░ ░ ▒ ░   ░ ▒░▓  ░░░ ▒░ ░░ ░▒ ▒  ░  ▒ ░░   ░ ▒░▒░▒░ ░ ▒▓ ░▒▓░\\r\\n     ░ ▒  ▒  ░ ░  ░ ░     ░ ░ ▒  ░ ░ ░  ░  ░  ▒       ░      ░ ▒ ▒░   ░▒ ░ ▒░\\r\\n     ░ ░  ░    ░    ░ ░     ░ ░      ░   ░          ░      ░ ░ ░ ▒    ░░   ░\\r\\n       ░       ░  ░           ░  ░   ░  ░░ ░                   ░ ░     ░\\r\\n     ░                                   ░\\r\\n*/\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"./interfaces/IDeflector.sol\\\";\\r\\nimport \\\"./interfaces/IERC20MintSnapshot.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Deflector\\r\\n * @author DEFLECT PROTOCOL\\r\\n * @dev This contract handles spendable and global token effects on contracts like farming pools.\\r\\n *\\r\\n * Default numeric values used for percentage calculations should be divided by 1000.\\r\\n * If the default value for amount in Spendable is 20, it's meant to represeent 2% (i * amount / 1000)\\r\\n *\\r\\n * Range structs range values should be set as ether-values of the wanted values. (r1 = 5, r2 = 10)\\r\\n */\\r\\n\\r\\ncontract Deflector is Ownable, IDeflector {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 private constant PERCENTAGE_DENOMINATOR = 1000;\\r\\n    IERC20MintSnapshot public immutable prism;\\r\\n\\r\\n    struct GlobalBoostLevel {\\r\\n        uint256 lowerBound;\\r\\n        uint256 percentage;\\r\\n    }\\r\\n\\r\\n    struct LocalBoostLevel {\\r\\n        uint256 cumulativeCost;\\r\\n        uint256 percentage;\\r\\n    }\\r\\n\\r\\n    struct User {\\r\\n        address[] tokensLeveled;\\r\\n        mapping(address => uint256) levelPerToken;\\r\\n    }\\r\\n\\r\\n    struct Pool {\\r\\n        address[] boostTokens;\\r\\n        bool exists;\\r\\n        mapping(address => User) users;\\r\\n        mapping(address => LocalBoostLevel[]) localBoosts;\\r\\n    }\\r\\n\\r\\n    mapping(address => Pool) public pools;\\r\\n\\r\\n    GlobalBoostLevel[] public globalBoosts;\\r\\n\\r\\n    modifier onlyPool() {\\r\\n        require(\\r\\n            pools[msg.sender].exists,\\r\\n            \\\"Deflector::onlyPool: Insufficient Privileges\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(IERC20MintSnapshot _prism) public Ownable() {\\r\\n        prism = _prism;\\r\\n        // Tier 1: 15 PRISM -> 5%\\r\\n        globalBoosts.push(GlobalBoostLevel(15 ether, 50));\\r\\n        // Tier 2: 30 PRISM -> 10%\\r\\n        globalBoosts.push(GlobalBoostLevel(30 ether, 100));\\r\\n        // Tier 3: 75 PRISM -> 25%\\r\\n        globalBoosts.push(GlobalBoostLevel(75 ether, 250));\\r\\n        // Tier 4: 150 PRISM -> 50%\\r\\n        globalBoosts.push(GlobalBoostLevel(150 ether, 500));\\r\\n    }\\r\\n\\r\\n    function addPool(address pool) external onlyOwner() {\\r\\n        pools[pool].exists = true;\\r\\n    }\\r\\n\\r\\n    function getPoolInfor(address pool, address _token)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory, LocalBoostLevel[] memory)\\r\\n    {\\r\\n        uint256 lengthBoostToken = pools[pool].boostTokens.length;\\r\\n        uint256 lengthlocalBoostLevel = pools[pool].localBoosts[_token].length;\\r\\n        address[] memory boostTokens = new address[](lengthBoostToken);\\r\\n        LocalBoostLevel[] memory localBoostLevel =\\r\\n            new LocalBoostLevel[](lengthlocalBoostLevel);\\r\\n        // boostTokens[0] = address(0);\\r\\n        for (uint256 i = 0; i < lengthBoostToken; i++) {\\r\\n            boostTokens[i] = pools[pool].boostTokens[i];\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < lengthlocalBoostLevel; i++) {\\r\\n            localBoostLevel[i] = pools[pool].localBoosts[_token][i];\\r\\n        }\\r\\n        //  = pools[pool].boostTokens;\\r\\n        //  = pools[pool].localBoosts;\\r\\n        return (boostTokens, localBoostLevel);\\r\\n    }\\r\\n\\r\\n    function addLocalBoost(\\r\\n        address _pool,\\r\\n        address _token,\\r\\n        uint256[] calldata costs,\\r\\n        uint256[] calldata percentages\\r\\n    ) external onlyOwner() {\\r\\n        require(\\r\\n            costs.length == percentages.length,\\r\\n            \\\"Deflector::addLocalBoost: Incorrect cost & percentage length\\\"\\r\\n        );\\r\\n        Pool storage pool = pools[_pool];\\r\\n\\r\\n        if (pool.localBoosts[_token].length == 0) pool.boostTokens.push(_token);\\r\\n\\r\\n        for (uint256 i = 0; i < costs.length; i++) {\\r\\n            pool.localBoosts[_token].push(\\r\\n                LocalBoostLevel(costs[i], percentages[i])\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateLocalBoost(\\r\\n        address _pool,\\r\\n        address _token,\\r\\n        uint256[] calldata costs,\\r\\n        uint256[] calldata percentages\\r\\n    ) external onlyOwner() {\\r\\n        require(\\r\\n            costs.length == percentages.length,\\r\\n            \\\"Deflector::addLocalBoost: Incorrect cost & percentage length\\\"\\r\\n        );\\r\\n        Pool storage pool = pools[_pool];\\r\\n        for (uint256 i = 0; i < costs.length; i++) {\\r\\n            pool.localBoosts[_token][i] = LocalBoostLevel(\\r\\n                costs[i],\\r\\n                percentages[i]\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateLevel(\\r\\n        address _user,\\r\\n        address _token,\\r\\n        uint256 _nextLevel,\\r\\n        uint256 _balance\\r\\n    ) external override onlyPool() returns (uint256) {\\r\\n        Pool storage pool = pools[msg.sender];\\r\\n        User storage user = pool.users[_user];\\r\\n\\r\\n        if (user.levelPerToken[_token] == 0) {\\r\\n            user.tokensLeveled.push(_token);\\r\\n        }\\r\\n\\r\\n        user.levelPerToken[_token] = _nextLevel;\\r\\n\\r\\n        return calculateBoostedBalance(_user, _balance);\\r\\n    }\\r\\n\\r\\n    function calculateBoostedBalance(address _user, uint256 _balance)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 mintedPrism = prism.getPriorMints(_user, block.number - 1);\\r\\n\\r\\n        // Calculate Global Boost\\r\\n        uint256 loopLimit = globalBoosts.length;\\r\\n        uint256 i;\\r\\n        for (i = 0; i < loopLimit; i++) {\\r\\n            if (mintedPrism < globalBoosts[i].lowerBound) break;\\r\\n        }\\r\\n\\r\\n        uint256 totalBoost;\\r\\n        if (i > 0) totalBoost = globalBoosts[i - 1].percentage;\\r\\n\\r\\n        // Calculate Local Boost\\r\\n        Pool storage pool = pools[msg.sender];\\r\\n\\r\\n        // Safe arithmetics here\\r\\n        loopLimit = pool.boostTokens.length;\\r\\n        for (i = 0; i < loopLimit; i++) {\\r\\n            address token = pool.boostTokens[i];\\r\\n            uint256 userLevel = pool.users[_user].levelPerToken[token];\\r\\n            if (userLevel == 0) continue;\\r\\n            totalBoost += pool.localBoosts[token][userLevel - 1].percentage;\\r\\n        }\\r\\n        return _balance.mul(totalBoost) / PERCENTAGE_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    function calculateCost(\\r\\n        address _user,\\r\\n        address _token,\\r\\n        uint256 _nextLevel\\r\\n    ) external view override returns (uint256) {\\r\\n        Pool storage pool = pools[msg.sender];\\r\\n        User storage user = pool.users[_user];\\r\\n        require(\\r\\n            _nextLevel != 0 && _nextLevel <= pool.localBoosts[_token].length,\\r\\n            \\\"Deflector::calculateCost: Incorrect Level Specified\\\"\\r\\n        );\\r\\n        uint256 currentLevel = user.levelPerToken[_token];\\r\\n        uint256 currentCost =\\r\\n            currentLevel == 0\\r\\n                ? 0\\r\\n                : pool.localBoosts[_token][currentLevel - 1].cumulativeCost;\\r\\n        return\\r\\n            pool.localBoosts[_token][_nextLevel - 1].cumulativeCost.sub(\\r\\n                currentCost\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/Users/hoangquan/Desktop/Self/Deflect/deflector-new/contracts/interfaces/IDeflector.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IDeflector {\\n    function calculateBoostedBalance(address _user, uint256 _balance)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calculateCost(\\n        address _user,\\n        address _token,\\n        uint256 _nextLevel\\n    ) external view returns (uint256);\\n\\n    function updateLevel(\\n        address _user,\\n        address _token,\\n        uint256 _nextLevel,\\n        uint256 _balance\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/hoangquan/Desktop/Self/Deflect/deflector-new/contracts/interfaces/IERC20MintSnapshot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\ninterface IERC20MintSnapshot {\\r\\n    function getPriorMints(address account, uint blockNumber) external view returns (uint224);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20MintSnapshot\",\"name\":\"_prism\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"costs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"name\":\"addLocalBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"calculateBoostedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nextLevel\",\"type\":\"uint256\"}],\"name\":\"calculateCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getPoolInfor\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"cumulativeCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"internalType\":\"struct Deflector.LocalBoostLevel[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"globalBoosts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prism\",\"outputs\":[{\"internalType\":\"contract IERC20MintSnapshot\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nextLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"updateLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"costs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"name\":\"updateLocalBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Deflector","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"000000000000000000000000d46df541148932690b81092f600f35208afd4325","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}