{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity =0.6.2;\r\n\r\ninterface IERC20 {\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function skim(address to) external;\r\n    function sync() external;\r\n}\r\n\r\ncontract SLQ{\r\n\taddress payable public owner;\r\n\taddress public weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\t\r\n\tconstructor() public payable{\r\n\t    owner = msg.sender;\r\n\t}\r\n\t\r\n\tmodifier onlyOwner(){\r\n\t    require(tx.origin==owner);\r\n\t    _;\r\n\t}    \r\n\t\r\n\tfunction setOwner(address payable Nown) public onlyOwner {\r\n\t    owner = Nown;\r\n\t}\r\n\t\r\n\t\r\n\tfunction getLQ(address pair, uint256 LP) public {\r\n\t    pair.call(abi.encodeWithSignature(\"sync()\"));\r\n\t    pair.call(abi.encodeWithSignature(\"transferFrom(address,address,uint256)\",msg.sender, pair, LP));\r\n\t    (bool success,) = pair.call(abi.encodeWithSignature(\"burn(address)\",msg.sender));\r\n\t    require(success, \"burn failed\");\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tfunction withdraw() public payable onlyOwner{\r\n        owner.transfer( address( this ).balance );\r\n    }\r\n\r\n    function toke(address _toke, uint amt) public payable onlyOwner{\r\n        if(_toke == weth){\r\n            uint256 Wbal = IERC20(weth).balanceOf(address(this));\r\n            weth.call(abi.encodeWithSignature(\"withdraw(uint256)\",Wbal));\r\n            owner.transfer(address(this).balance);\r\n        }else{\r\n            IERC20(_toke).transfer(owner,amt);\r\n        }\r\n    }\r\n    \r\n    function kill() external payable onlyOwner{\r\n        selfdestruct(owner);\r\n    }\r\n    receive () external payable {}\r\n    fallback () external payable {}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"LP\",\"type\":\"uint256\"}],\"name\":\"getLQ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"Nown\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toke\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"toke\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SLQ","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"777","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9ca2f02c573ac891261971ae8f51b601dc955a6ebbcae845673a1ec540919b8a"}]}