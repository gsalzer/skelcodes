{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Active7DaysFundingCycleBallot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./interfaces/ITerminalV1.sol\\\";\\nimport \\\"./interfaces/IFundingCycleBallot.sol\\\";\\n\\n/** \\n   @notice Manages votes towards approving funding cycle reconfigurations.\\n */\\ncontract Active7DaysFundingCycleBallot is IFundingCycleBallot {\\n    // --- public stored properties --- //\\n\\n    /// @notice The number of seconds that must pass for a funding cycle reconfiguration to become active.\\n    uint256 public constant reconfigurationDelay = 604800; // 7 days\\n\\n    // --- external views --- //\\n\\n    /** \\n      @notice The time that this ballot is active for.\\n      @dev A ballot should not be considered final until the duration has passed.\\n      @return The durection in seconds.\\n    */\\n    function duration() external pure override returns (uint256) {\\n        return reconfigurationDelay;\\n    }\\n\\n    /**\\n      @notice The approval state of a particular funding cycle.\\n      @param _configured The configuration of the funding cycle to check the state of.\\n      @return The state of the provided ballot.\\n   */\\n    function state(uint256, uint256 _configured)\\n        external\\n        view\\n        override\\n        returns (BallotState)\\n    {\\n        return\\n            block.timestamp > _configured + reconfigurationDelay\\n                ? BallotState.Approved\\n                : BallotState.Active;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITerminalV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./ITicketBooth.sol\\\";\\nimport \\\"./IFundingCycles.sol\\\";\\nimport \\\"./IYielder.sol\\\";\\nimport \\\"./IProjects.sol\\\";\\nimport \\\"./IModStore.sol\\\";\\nimport \\\"./ITerminal.sol\\\";\\nimport \\\"./IOperatorStore.sol\\\";\\n\\nstruct FundingCycleMetadata {\\n    uint256 reservedRate;\\n    uint256 bondingCurveRate;\\n    uint256 reconfigurationBondingCurveRate;\\n}\\n\\ninterface ITerminalV1 {\\n    event Configure(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        address caller\\n    );\\n\\n    event Tap(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        address indexed beneficiary,\\n        uint256 amount,\\n        uint256 currency,\\n        uint256 netTransferAmount,\\n        uint256 beneficiaryTransferAmount,\\n        uint256 govFeeAmount,\\n        address caller\\n    );\\n    event Redeem(\\n        address indexed holder,\\n        address indexed beneficiary,\\n        uint256 indexed _projectId,\\n        uint256 amount,\\n        uint256 returnAmount,\\n        address caller\\n    );\\n\\n    event PrintReserveTickets(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        address indexed beneficiary,\\n        uint256 count,\\n        uint256 beneficiaryTicketAmount,\\n        address caller\\n    );\\n\\n    event DistributeToPayoutMod(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        PayoutMod mod,\\n        uint256 modCut,\\n        address caller\\n    );\\n    event DistributeToTicketMod(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        TicketMod mod,\\n        uint256 modCut,\\n        address caller\\n    );\\n    event AppointGovernance(address governance);\\n\\n    event AcceptGovernance(address governance);\\n\\n    event PrintPreminedTickets(\\n        uint256 indexed projectId,\\n        address indexed beneficiary,\\n        uint256 amount,\\n        uint256 currency,\\n        string memo,\\n        address caller\\n    );\\n\\n    event Deposit(uint256 amount);\\n\\n    event EnsureTargetLocalWei(uint256 target);\\n\\n    event SetYielder(IYielder newYielder);\\n\\n    event SetFee(uint256 _amount);\\n\\n    event SetTargetLocalWei(uint256 amount);\\n\\n    function governance() external view returns (address payable);\\n\\n    function pendingGovernance() external view returns (address payable);\\n\\n    function projects() external view returns (IProjects);\\n\\n    function fundingCycles() external view returns (IFundingCycles);\\n\\n    function ticketBooth() external view returns (ITicketBooth);\\n\\n    function prices() external view returns (IPrices);\\n\\n    function modStore() external view returns (IModStore);\\n\\n    function reservedTicketBalanceOf(uint256 _projectId, uint256 _reservedRate)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function canPrintPreminedTickets(uint256 _projectId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function balanceOf(uint256 _projectId) external view returns (uint256);\\n\\n    function currentOverflowOf(uint256 _projectId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function claimableOverflowOf(\\n        address _account,\\n        uint256 _amount,\\n        uint256 _projectId\\n    ) external view returns (uint256);\\n\\n    function fee() external view returns (uint256);\\n\\n    function deploy(\\n        address _owner,\\n        bytes32 _handle,\\n        string calldata _uri,\\n        FundingCycleProperties calldata _properties,\\n        FundingCycleMetadata calldata _metadata,\\n        PayoutMod[] memory _payoutMods,\\n        TicketMod[] memory _ticketMods\\n    ) external;\\n\\n    function configure(\\n        uint256 _projectId,\\n        FundingCycleProperties calldata _properties,\\n        FundingCycleMetadata calldata _metadata,\\n        PayoutMod[] memory _payoutMods,\\n        TicketMod[] memory _ticketMods\\n    ) external returns (uint256);\\n\\n    function printPreminedTickets(\\n        uint256 _projectId,\\n        uint256 _amount,\\n        uint256 _currency,\\n        address _beneficiary,\\n        string memory _memo,\\n        bool _preferUnstakedTickets\\n    ) external;\\n\\n    function tap(\\n        uint256 _projectId,\\n        uint256 _amount,\\n        uint256 _currency,\\n        uint256 _minReturnedWei\\n    ) external returns (uint256);\\n\\n    function redeem(\\n        address _account,\\n        uint256 _projectId,\\n        uint256 _amount,\\n        uint256 _minReturnedWei,\\n        address payable _beneficiary,\\n        bool _preferUnstaked\\n    ) external returns (uint256 returnAmount);\\n\\n    function printReservedTickets(uint256 _projectId)\\n        external\\n        returns (uint256 reservedTicketsToPrint);\\n\\n    function setFee(uint256 _fee) external;\\n\\n    function appointGovernance(address payable _pendingGovernance) external;\\n\\n    function acceptGovernance() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFundingCycleBallot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./ITerminalV1.sol\\\";\\n\\nenum BallotState {\\n    Approved,\\n    Active,\\n    Failed,\\n    Standby\\n}\\n\\ninterface IFundingCycleBallot {\\n    function duration() external view returns (uint256);\\n\\n    function state(uint256 _fundingCycleId, uint256 _configured)\\n        external\\n        view\\n        returns (BallotState);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITicketBooth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./IProjects.sol\\\";\\nimport \\\"./IOperatorStore.sol\\\";\\nimport \\\"./ITickets.sol\\\";\\n\\ninterface ITicketBooth {\\n    event Issue(\\n        uint256 indexed projectId,\\n        string name,\\n        string symbol,\\n        address caller\\n    );\\n    event Print(\\n        address indexed holder,\\n        uint256 indexed projectId,\\n        uint256 amount,\\n        bool convertedTickets,\\n        bool preferUnstakedTickets,\\n        address controller\\n    );\\n\\n    event Redeem(\\n        address indexed holder,\\n        uint256 indexed projectId,\\n        uint256 amount,\\n        uint256 stakedTickets,\\n        bool preferUnstaked,\\n        address controller\\n    );\\n\\n    event Stake(\\n        address indexed holder,\\n        uint256 indexed projectId,\\n        uint256 amount,\\n        address caller\\n    );\\n\\n    event Unstake(\\n        address indexed holder,\\n        uint256 indexed projectId,\\n        uint256 amount,\\n        address caller\\n    );\\n\\n    event Lock(\\n        address indexed holder,\\n        uint256 indexed projectId,\\n        uint256 amount,\\n        address caller\\n    );\\n\\n    event Unlock(\\n        address indexed holder,\\n        uint256 indexed projectId,\\n        uint256 amount,\\n        address caller\\n    );\\n\\n    event Transfer(\\n        address indexed holder,\\n        uint256 indexed projectId,\\n        address indexed recipient,\\n        uint256 amount,\\n        address caller\\n    );\\n\\n    function ticketsOf(uint256 _projectId) external view returns (ITickets);\\n\\n    function projects() external view returns (IProjects);\\n\\n    function lockedBalanceOf(address _holder, uint256 _projectId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function lockedBalanceBy(\\n        address _operator,\\n        address _holder,\\n        uint256 _projectId\\n    ) external view returns (uint256);\\n\\n    function stakedBalanceOf(address _holder, uint256 _projectId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function stakedTotalSupplyOf(uint256 _projectId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n    function balanceOf(address _holder, uint256 _projectId)\\n        external\\n        view\\n        returns (uint256 _result);\\n\\n    function issue(\\n        uint256 _projectId,\\n        string calldata _name,\\n        string calldata _symbol\\n    ) external;\\n\\n    function print(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount,\\n        bool _preferUnstakedTickets\\n    ) external;\\n\\n    function redeem(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount,\\n        bool _preferUnstaked\\n    ) external;\\n\\n    function stake(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount\\n    ) external;\\n\\n    function unstake(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount\\n    ) external;\\n\\n    function lock(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount\\n    ) external;\\n\\n    function unlock(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount\\n    ) external;\\n\\n    function transfer(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount,\\n        address _recipient\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFundingCycles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./IPrices.sol\\\";\\nimport \\\"./IProjects.sol\\\";\\nimport \\\"./IFundingCycleBallot.sol\\\";\\n\\n/// @notice The funding cycle structure represents a project stewarded by an address, and accounts for which addresses have helped sustain the project.\\nstruct FundingCycle {\\n    // A unique number that's incremented for each new funding cycle, starting with 1.\\n    uint256 id;\\n    // The ID of the project contract that this funding cycle belongs to.\\n    uint256 projectId;\\n    // The number of this funding cycle for the project.\\n    uint256 number;\\n    // The ID of a previous funding cycle that this one is based on.\\n    uint256 basedOn;\\n    // The time when this funding cycle was last configured.\\n    uint256 configured;\\n    // The number of cycles that this configuration should last for before going back to the last permanent.\\n    uint256 cycleLimit;\\n    // A number determining the amount of redistribution shares this funding cycle will issue to each sustainer.\\n    uint256 weight;\\n    // The ballot contract to use to determine a subsequent funding cycle's reconfiguration status.\\n    IFundingCycleBallot ballot;\\n    // The time when this funding cycle will become active.\\n    uint256 start;\\n    // The number of seconds until this funding cycle's surplus is redistributed.\\n    uint256 duration;\\n    // The amount that this funding cycle is targeting in terms of the currency.\\n    uint256 target;\\n    // The currency that the target is measured in.\\n    uint256 currency;\\n    // The percentage of each payment to send as a fee to the Juicebox admin.\\n    uint256 fee;\\n    // A percentage indicating how much more weight to give a funding cycle compared to its predecessor.\\n    uint256 discountRate;\\n    // The amount of available funds that have been tapped by the project in terms of the currency.\\n    uint256 tapped;\\n    // A packed list of extra data. The first 8 bytes are reserved for versioning.\\n    uint256 metadata;\\n}\\n\\nstruct FundingCycleProperties {\\n    uint256 target;\\n    uint256 currency;\\n    uint256 duration;\\n    uint256 cycleLimit;\\n    uint256 discountRate;\\n    IFundingCycleBallot ballot;\\n}\\n\\ninterface IFundingCycles {\\n    event Configure(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        uint256 reconfigured,\\n        FundingCycleProperties _properties,\\n        uint256 metadata,\\n        address caller\\n    );\\n\\n    event Tap(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        uint256 amount,\\n        uint256 newTappedAmount,\\n        address caller\\n    );\\n\\n    event Init(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        uint256 number,\\n        uint256 previous,\\n        uint256 weight,\\n        uint256 start\\n    );\\n\\n    function latestIdOf(uint256 _projectId) external view returns (uint256);\\n\\n    function count() external view returns (uint256);\\n\\n    function BASE_WEIGHT() external view returns (uint256);\\n\\n    function MAX_CYCLE_LIMIT() external view returns (uint256);\\n\\n    function get(uint256 _fundingCycleId)\\n        external\\n        view\\n        returns (FundingCycle memory);\\n\\n    function queuedOf(uint256 _projectId)\\n        external\\n        view\\n        returns (FundingCycle memory);\\n\\n    function currentOf(uint256 _projectId)\\n        external\\n        view\\n        returns (FundingCycle memory);\\n\\n    function currentBallotStateOf(uint256 _projectId)\\n        external\\n        view\\n        returns (BallotState);\\n\\n    function configure(\\n        uint256 _projectId,\\n        FundingCycleProperties calldata _properties,\\n        uint256 _metadata,\\n        uint256 _fee,\\n        bool _configureActiveFundingCycle\\n    ) external returns (FundingCycle memory fundingCycle);\\n\\n    function tap(uint256 _projectId, uint256 _amount)\\n        external\\n        returns (FundingCycle memory fundingCycle);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IYielder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./ITerminalV1.sol\\\";\\n\\n// In constructure, give unlimited access for TerminalV1 to take money from this.\\ninterface IYielder {\\n    function deposited() external view returns (uint256);\\n\\n    function getCurrentBalance() external view returns (uint256);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 _amount, address payable _beneficiary) external;\\n\\n    function withdrawAll(address payable _beneficiary)\\n        external\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IProjects.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./ITerminal.sol\\\";\\nimport \\\"./IOperatorStore.sol\\\";\\n\\ninterface IProjects is IERC721 {\\n    event Create(\\n        uint256 indexed projectId,\\n        address indexed owner,\\n        bytes32 indexed handle,\\n        string uri,\\n        ITerminal terminal,\\n        address caller\\n    );\\n\\n    event SetHandle(\\n        uint256 indexed projectId,\\n        bytes32 indexed handle,\\n        address caller\\n    );\\n\\n    event SetUri(uint256 indexed projectId, string uri, address caller);\\n\\n    event TransferHandle(\\n        uint256 indexed projectId,\\n        address indexed to,\\n        bytes32 indexed handle,\\n        bytes32 newHandle,\\n        address caller\\n    );\\n\\n    event ClaimHandle(\\n        address indexed account,\\n        uint256 indexed projectId,\\n        bytes32 indexed handle,\\n        address caller\\n    );\\n\\n    event ChallengeHandle(\\n        bytes32 indexed handle,\\n        uint256 challengeExpiry,\\n        address caller\\n    );\\n\\n    event RenewHandle(\\n        bytes32 indexed handle,\\n        uint256 indexed projectId,\\n        address caller\\n    );\\n\\n    function count() external view returns (uint256);\\n\\n    function uriOf(uint256 _projectId) external view returns (string memory);\\n\\n    function handleOf(uint256 _projectId) external returns (bytes32 handle);\\n\\n    function projectFor(bytes32 _handle) external returns (uint256 projectId);\\n\\n    function transferAddressFor(bytes32 _handle)\\n        external\\n        returns (address receiver);\\n\\n    function challengeExpiryOf(bytes32 _handle) external returns (uint256);\\n\\n    function exists(uint256 _projectId) external view returns (bool);\\n\\n    function create(\\n        address _owner,\\n        bytes32 _handle,\\n        string calldata _uri,\\n        ITerminal _terminal\\n    ) external returns (uint256 id);\\n\\n    function setHandle(uint256 _projectId, bytes32 _handle) external;\\n\\n    function setUri(uint256 _projectId, string calldata _uri) external;\\n\\n    function transferHandle(\\n        uint256 _projectId,\\n        address _to,\\n        bytes32 _newHandle\\n    ) external returns (bytes32 _handle);\\n\\n    function claimHandle(\\n        bytes32 _handle,\\n        address _for,\\n        uint256 _projectId\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IModStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./IOperatorStore.sol\\\";\\nimport \\\"./IProjects.sol\\\";\\nimport \\\"./IModAllocator.sol\\\";\\n\\nstruct PayoutMod {\\n    bool preferUnstaked;\\n    uint16 percent;\\n    uint48 lockedUntil;\\n    address payable beneficiary;\\n    IModAllocator allocator;\\n    uint56 projectId;\\n}\\n\\nstruct TicketMod {\\n    bool preferUnstaked;\\n    uint16 percent;\\n    uint48 lockedUntil;\\n    address payable beneficiary;\\n}\\n\\ninterface IModStore {\\n    event SetPayoutMod(\\n        uint256 indexed projectId,\\n        uint256 indexed configuration,\\n        PayoutMod mods,\\n        address caller\\n    );\\n\\n    event SetTicketMod(\\n        uint256 indexed projectId,\\n        uint256 indexed configuration,\\n        TicketMod mods,\\n        address caller\\n    );\\n\\n    function projects() external view returns (IProjects);\\n\\n    function payoutModsOf(uint256 _projectId, uint256 _configuration)\\n        external\\n        view\\n        returns (PayoutMod[] memory);\\n\\n    function ticketModsOf(uint256 _projectId, uint256 _configuration)\\n        external\\n        view\\n        returns (TicketMod[] memory);\\n\\n    function setPayoutMods(\\n        uint256 _projectId,\\n        uint256 _configuration,\\n        PayoutMod[] memory _mods\\n    ) external;\\n\\n    function setTicketMods(\\n        uint256 _projectId,\\n        uint256 _configuration,\\n        TicketMod[] memory _mods\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITerminal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./ITerminalDirectory.sol\\\";\\n\\ninterface ITerminal {\\n    event Pay(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        address indexed beneficiary,\\n        uint256 amount,\\n        string note,\\n        address caller\\n    );\\n\\n    event AddToBalance(\\n        uint256 indexed projectId,\\n        uint256 value,\\n        address caller\\n    );\\n\\n    event AllowMigration(ITerminal allowed);\\n\\n    event Migrate(\\n        uint256 indexed projectId,\\n        ITerminal indexed to,\\n        uint256 _amount,\\n        address caller\\n    );\\n\\n    function terminalDirectory() external view returns (ITerminalDirectory);\\n\\n    function migrationIsAllowed(ITerminal _terminal)\\n        external\\n        view\\n        returns (bool);\\n\\n    function pay(\\n        uint256 _projectId,\\n        address _beneficiary,\\n        string calldata _memo,\\n        bool _preferUnstakedTickets\\n    ) external payable returns (uint256 fundingCycleId);\\n\\n    function addToBalance(uint256 _projectId) external payable;\\n\\n    function allowMigration(ITerminal _contract) external;\\n\\n    function migrate(uint256 _projectId, ITerminal _to) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOperatorStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IOperatorStore {\\n    event SetOperator(\\n        address indexed operator,\\n        address indexed account,\\n        uint256 indexed domain,\\n        uint256[] permissionIndexes,\\n        uint256 packed\\n    );\\n\\n    function permissionsOf(\\n        address _operator,\\n        address _account,\\n        uint256 _domain\\n    ) external view returns (uint256);\\n\\n    function hasPermission(\\n        address _operator,\\n        address _account,\\n        uint256 _domain,\\n        uint256 _permissionIndex\\n    ) external view returns (bool);\\n\\n    function hasPermissions(\\n        address _operator,\\n        address _account,\\n        uint256 _domain,\\n        uint256[] calldata _permissionIndexes\\n    ) external view returns (bool);\\n\\n    function setOperator(\\n        address _operator,\\n        uint256 _domain,\\n        uint256[] calldata _permissionIndexes\\n    ) external;\\n\\n    function setOperators(\\n        address[] calldata _operators,\\n        uint256[] calldata _domains,\\n        uint256[][] calldata _permissionIndexes\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITickets.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITickets is IERC20 {\\n    function print(address _account, uint256 _amount) external;\\n\\n    function redeem(address _account, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITerminalDirectory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./IDirectPaymentAddress.sol\\\";\\nimport \\\"./ITerminal.sol\\\";\\nimport \\\"./IProjects.sol\\\";\\nimport \\\"./IProjects.sol\\\";\\n\\ninterface ITerminalDirectory {\\n    event DeployAddress(\\n        uint256 indexed projectId,\\n        string memo,\\n        address indexed caller\\n    );\\n\\n    event SetTerminal(\\n        uint256 indexed projectId,\\n        ITerminal indexed terminal,\\n        address caller\\n    );\\n\\n    event SetPayerPreferences(\\n        address indexed account,\\n        address beneficiary,\\n        bool preferUnstakedTickets\\n    );\\n\\n    function projects() external view returns (IProjects);\\n\\n    function terminalOf(uint256 _projectId) external view returns (ITerminal);\\n\\n    function beneficiaryOf(address _account) external returns (address);\\n\\n    function unstakedTicketsPreferenceOf(address _account)\\n        external\\n        returns (bool);\\n\\n    function addressesOf(uint256 _projectId)\\n        external\\n        view\\n        returns (IDirectPaymentAddress[] memory);\\n\\n    function deployAddress(uint256 _projectId, string calldata _memo) external;\\n\\n    function setTerminal(uint256 _projectId, ITerminal _terminal) external;\\n\\n    function setPayerPreferences(\\n        address _beneficiary,\\n        bool _preferUnstakedTickets\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDirectPaymentAddress.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./ITerminalDirectory.sol\\\";\\nimport \\\"./ITerminal.sol\\\";\\n\\ninterface IDirectPaymentAddress {\\n    event Forward(\\n        address indexed payer,\\n        uint256 indexed projectId,\\n        address beneficiary,\\n        uint256 value,\\n        string memo,\\n        bool preferUnstakedTickets\\n    );\\n\\n    function terminalDirectory() external returns (ITerminalDirectory);\\n\\n    function projectId() external returns (uint256);\\n\\n    function memo() external returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPrices.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\n\\ninterface IPrices {\\n    event AddFeed(uint256 indexed currency, AggregatorV3Interface indexed feed);\\n\\n    function feedDecimalAdjuster(uint256 _currency) external returns (uint256);\\n\\n    function targetDecimals() external returns (uint256);\\n\\n    function feedFor(uint256 _currency)\\n        external\\n        returns (AggregatorV3Interface);\\n\\n    function getETHPriceFor(uint256 _currency) external view returns (uint256);\\n\\n    function addFeed(AggregatorV3Interface _priceFeed, uint256 _currency)\\n        external;\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IModAllocator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IModAllocator {\\n    event Allocate(\\n        uint256 indexed projectId,\\n        uint256 indexed forProjectId,\\n        address indexed beneficiary,\\n        uint256 amount,\\n        address caller\\n    );\\n\\n    function allocate(\\n        uint256 _projectId,\\n        uint256 _forProjectId,\\n        address _beneficiary\\n    ) external payable;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reconfigurationDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_configured\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum BallotState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Active7DaysFundingCycleBallot","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}