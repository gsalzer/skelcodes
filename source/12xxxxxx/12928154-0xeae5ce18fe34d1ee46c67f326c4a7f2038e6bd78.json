{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.5.0 https://hardhat.org\r\n\r\n// File contracts/abstract/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT;\r\n\r\npragma solidity ^0.7.6;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/security/Pausable.sol\r\n\r\n\r\npragma solidity ^0.7.6;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n// File contracts/abstract/Ownable.sol\r\n\r\n\r\npragma solidity ^0.7.6;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\n\r\nabstract contract Ownable is Pausable {\r\n    address public _owner;\r\n    address public _admin;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor(address ownerAddress) {\r\n        _owner = msg.sender;\r\n        _admin = ownerAddress;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(_admin == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyAdmin {\r\n        emit OwnershipTransferred(_owner, _admin);\r\n        _owner = _admin;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/SafeMath.sol\r\n\r\n\r\npragma solidity ^0.7.6;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/legacy/U3Legacy.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\nabstract contract OwnableV3 {\r\n    function transferOwnership(address newOwner) external virtual;\r\n\r\n    function owner() external virtual returns (address);\r\n}\r\n\r\nabstract contract Admin is OwnableV3 {\r\n    struct tokenInfo {\r\n        bool isExist;\r\n        uint8 decimal;\r\n        uint256 userMinStake;\r\n        uint256 userMaxStake;\r\n        uint256 totalMaxStake;\r\n        uint256 lockableDays;\r\n        bool optionableStatus;\r\n    }\r\n\r\n    uint256 public stakeDuration;\r\n    uint256 public refPercentage;\r\n    uint256 public optionableBenefit;\r\n    mapping(address => address[]) public tokensSequenceList;\r\n    mapping(address => tokenInfo) public tokenDetails;\r\n    mapping(address => mapping(address => uint256))\r\n        public tokenDailyDistribution;\r\n    mapping(address => mapping(address => bool)) public tokenBlockedStatus;\r\n\r\n    function safeWithdraw(address tokenAddress, uint256 amount)\r\n        external\r\n        virtual;\r\n}\r\n\r\nabstract contract U3Legacy is Admin {\r\n    uint256 public poolStartTime;\r\n    mapping(address => uint256) public totalStaking;\r\n\r\n    function viewStakingDetails(address _user)\r\n        external\r\n        view\r\n        virtual\r\n        returns (\r\n            address[] memory,\r\n            address[] memory,\r\n            bool[] memory,\r\n            uint8[] memory,\r\n            uint256[] memory,\r\n            uint256[] memory,\r\n            uint256[] memory\r\n        );\r\n}\r\n\r\n\r\n// File contracts/proxy/U3Proxy.sol\r\n\r\n\r\npragma solidity ^0.7.6;\r\n\r\nabstract contract AdminV3Proxy {\r\n    address public oldPaidAddress;\r\n    address public newPaidAddress;\r\n\r\n    mapping(address => uint256) public totalUnStakingB;\r\n    mapping(address => mapping(uint256 => bool)) public unstakeStatus;\r\n\r\n    function safeWithdraw(address tokenAddress, uint256 amount)\r\n        external\r\n        virtual;\r\n\r\n    function transferOwnership(address newOwner) external virtual;\r\n\r\n    function owner() external virtual returns (address);\r\n}\r\n\r\nabstract contract U3Proxy is AdminV3Proxy {}\r\n\r\n\r\n// File contracts/abstract/IERC20.sol\r\n\r\n\r\npragma solidity ^0.7.6;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\n// File contracts/U3ProxyUpgradablity.sol\r\n\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\n\r\n\r\n\r\ncontract U3ProxyUpgradablity is Ownable {\r\n    /// @notice LockableToken struct for storing token lockable details\r\n    struct LockableTokens {\r\n        uint256 lockableDays;\r\n        bool optionableStatus;\r\n    }\r\n    /// @notice U3 Instance\r\n    U3Legacy public uniV3;\r\n\r\n    /// @notice U3Proxy Instance\r\n    U3Proxy public uniV3Proxy;\r\n\r\n    /// @notice SafeMath using for Arthmetic Operations.\r\n    using SafeMath for uint256;\r\n\r\n    /// @notice intervalDays for reward calculation x days.\r\n    uint256[] public intervalDays = [1, 8, 15, 22, 29, 36];\r\n\r\n    /// @notice Days (86400 seconds)\r\n    uint256 public constant DAYS = 1 days;\r\n\r\n    /// @notice Hours (3600 seconds)\r\n    uint256 public constant HOURS = 1 hours;\r\n\r\n    /// @notice old Paid Address\r\n    address public oldPaidAddress;\r\n\r\n    /// @notice new Paid Address\r\n    address public newPaidAddress;\r\n\r\n    /// @notice poolStartTime\r\n    uint256 public poolStartTime;\r\n\r\n    /// @notice store total unstaking of u3Upgrade\r\n    mapping(address => uint256) public u3UpgradeTotalUnStaking;\r\n\r\n    /// @notice lockable token mapping\r\n    mapping(address => LockableTokens) public u3UpgradeLockableDetails;\r\n\r\n    /// @notice mapping for storing the unStaking status of a user.\r\n    mapping(address => mapping(uint256 => bool)) public u3UnstakeStatus;\r\n\r\n    event IntervalDaysDetails(uint256[] updatedIntervals, uint256 time);\r\n\r\n    event Claim(\r\n        address indexed userAddress,\r\n        address indexed stakedTokenAddress,\r\n        address indexed tokenAddress,\r\n        uint256 claimRewards,\r\n        uint256 time\r\n    );\r\n\r\n    event UnStake(\r\n        address indexed userAddress,\r\n        address indexed unStakedtokenAddress,\r\n        uint256 unStakedAmount,\r\n        uint256 time,\r\n        uint256 stakeID\r\n    );\r\n\r\n    event ReferralEarn(\r\n        address indexed userAddress,\r\n        address indexed callerAddress,\r\n        address indexed rewardTokenAddress,\r\n        uint256 rewardAmount,\r\n        uint256 time\r\n    );\r\n\r\n    event LockableTokenDetails(\r\n        address indexed tokenAddress,\r\n        uint256 lockableDys,\r\n        bool optionalbleStatus,\r\n        uint256 updatedTime\r\n    );\r\n\r\n    event WithdrawDetails(\r\n        address indexed tokenAddress,\r\n        uint256 withdrawalAmount,\r\n        uint256 time\r\n    );\r\n\r\n    constructor(address u3Address, address u3ProxyAddress) Ownable(msg.sender) {\r\n        uniV3 = U3Legacy(u3Address);\r\n        uniV3Proxy = U3Proxy(u3ProxyAddress);\r\n        // update the state variable\r\n        poolStartTime = uniV3.poolStartTime();\r\n        oldPaidAddress = uniV3Proxy.oldPaidAddress();\r\n        newPaidAddress = uniV3Proxy.newPaidAddress();\r\n    }\r\n\r\n    function updatePoolStartTime(uint256 _newPoolStartTime)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        poolStartTime = _newPoolStartTime;\r\n        return true;\r\n    }\r\n\r\n    function init(address[] memory tokenAddress)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        for (uint256 i = 0; i < tokenAddress.length; i++) {\r\n            transferFromContractV3(tokenAddress[i]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFromContractV3(address tokenAddress) internal {\r\n        uint256 bal = IERC20(tokenAddress).balanceOf(address(uniV3Proxy));\r\n        if (bal > 0) uniV3Proxy.safeWithdraw(tokenAddress, bal);\r\n    }\r\n\r\n    /**\r\n     * @notice Get rewards for one day\r\n     * @param stakedAmount Stake amount of the user\r\n     * @param stakedToken Staked token address of the user\r\n     * @param rewardToken Reward token address\r\n     * @return reward One dayh reward for the user\r\n     */\r\n    function getOneDayReward(\r\n        uint256 stakedAmount,\r\n        address stakedToken,\r\n        address rewardToken,\r\n        uint256 totalStake\r\n    ) public view returns (uint256 reward) {\r\n        uint256 lockBenefit;\r\n\r\n        if (u3UpgradeLockableDetails[stakedToken].optionableStatus) {\r\n            stakedAmount = stakedAmount.mul(uniV3.optionableBenefit());\r\n            lockBenefit = stakedAmount.mul(uniV3.optionableBenefit().sub(1));\r\n            reward = (\r\n                stakedAmount.mul(\r\n                    uniV3.tokenDailyDistribution(stakedToken, rewardToken)\r\n                )\r\n            ).div(totalStake.add(lockBenefit));\r\n        } else\r\n            reward = (\r\n                stakedAmount.mul(\r\n                    uniV3.tokenDailyDistribution(stakedToken, rewardToken)\r\n                )\r\n            ).div(totalStake);\r\n    }\r\n\r\n    /**\r\n     * @notice send rewards\r\n     * @param stakedToken Stake amount of the user\r\n     * @param tokenAddress Reward token address\r\n     * @param amount Amount to be transferred as reward\r\n     */\r\n    function sendToken(\r\n        address user,\r\n        address stakedToken,\r\n        address tokenAddress,\r\n        uint256 amount\r\n    ) internal {\r\n        // Checks\r\n        if (tokenAddress != address(0)) {\r\n            require(\r\n                IERC20(tokenAddress).balanceOf(address(this)) >= amount,\r\n                \"SEND: Insufficient Balance in Contract\"\r\n            );\r\n\r\n            IERC20(tokenAddress).transfer(user, amount);\r\n\r\n            emit Claim(\r\n                user,\r\n                stakedToken,\r\n                tokenAddress,\r\n                amount,\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function getTotalStaking(address tokenAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        (, uint256 totalStaking) = swapPaidToken(tokenAddress);\r\n        return totalStaking;\r\n    }\r\n\r\n    /**\r\n     * @notice Unstake and claim rewards\r\n     * @param stakeId Stake ID of the user\r\n     */\r\n    function unStake(address user, uint256 stakeId) external whenNotPaused {\r\n        require(\r\n            msg.sender == user || msg.sender == _owner,\r\n            \"UNSTAKE: Invalid User Entry\"\r\n        );\r\n\r\n        (\r\n            ,\r\n            address[] memory tokenAddress,\r\n            bool[] memory activeStatus,\r\n            ,\r\n            ,\r\n            uint256[] memory stakedAmount,\r\n            uint256[] memory startTime\r\n        ) = (uniV3.viewStakingDetails(user));\r\n\r\n        bool isAlreadyUnstaked = uniV3Proxy.unstakeStatus(user, stakeId);\r\n        // lockableDays check\r\n        require(\r\n            u3UpgradeLockableDetails[tokenAddress[stakeId]].lockableDays <=\r\n                block.timestamp,\r\n            \"Token Locked\"\r\n        );\r\n\r\n        // optional lock check\r\n        if (\r\n            u3UpgradeLockableDetails[tokenAddress[stakeId]].optionableStatus ==\r\n            true\r\n        ) {\r\n            require(\r\n                poolStartTime.add(uniV3.stakeDuration()) <= block.timestamp,\r\n                \"Locked in optional lock\"\r\n            );\r\n        }\r\n\r\n        // Checks\r\n        if (\r\n            u3UnstakeStatus[user][stakeId] == false &&\r\n            isAlreadyUnstaked == false &&\r\n            activeStatus[stakeId] == true\r\n        ) u3UnstakeStatus[user][stakeId] = true;\r\n        else revert(\"UNSTAKE : Unstaked Already\");\r\n\r\n        (address stakedToken, uint256 totalStaking) = swapPaidToken(\r\n            tokenAddress[stakeId]\r\n        );\r\n        // State updation\r\n        u3UpgradeTotalUnStaking[stakedToken] = u3UpgradeTotalUnStaking[\r\n            stakedToken\r\n        ].add(stakedAmount[stakeId]);\r\n\r\n        // Balance check\r\n        require(\r\n            IERC20(stakedToken).balanceOf(address(this)) >=\r\n                stakedAmount[stakeId],\r\n            \"UNSTAKE : Insufficient Balance\"\r\n        );\r\n\r\n        IERC20(stakedToken).transfer(user, stakedAmount[stakeId]);\r\n\r\n        if (startTime[stakeId] < poolStartTime.add(uniV3.stakeDuration())) {\r\n            claimRewards(user, stakeId, totalStaking);\r\n        }\r\n\r\n        // Emit state changes\r\n        emit UnStake(\r\n            user,\r\n            stakedToken,\r\n            stakedAmount[stakeId],\r\n            block.timestamp,\r\n            stakeId\r\n        );\r\n    }\r\n\r\n    function claimRewards(\r\n        address user,\r\n        uint256 stakeId,\r\n        uint256 totalStaking\r\n    ) internal {\r\n        (\r\n            address[] memory referrerAddress,\r\n            address[] memory tokenAddress,\r\n            ,\r\n            ,\r\n            ,\r\n            uint256[] memory stakedAmount,\r\n            uint256[] memory startTime\r\n        ) = (uniV3.viewStakingDetails(user));\r\n\r\n        // Local variables\r\n        uint256 interval;\r\n        uint256 endOfProfit;\r\n\r\n        interval = poolStartTime.add(uniV3.stakeDuration());\r\n\r\n        if (interval > block.timestamp) endOfProfit = block.timestamp;\r\n        else endOfProfit = poolStartTime.add(uniV3.stakeDuration());\r\n\r\n        interval = endOfProfit.sub(startTime[stakeId]);\r\n\r\n        // Reward calculation\r\n        if (interval >= HOURS)\r\n            _rewardCalculation(\r\n                user,\r\n                referrerAddress[stakeId],\r\n                tokenAddress[stakeId],\r\n                stakedAmount[stakeId],\r\n                interval,\r\n                totalStaking\r\n            );\r\n    }\r\n\r\n    function _rewardCalculation(\r\n        address user,\r\n        address referrerAddress,\r\n        address stakedToken,\r\n        uint256 stakedAmount,\r\n        uint256 interval,\r\n        uint256 totalStake\r\n    ) internal {\r\n        uint256 rewardsEarned;\r\n        uint256 noOfDays;\r\n        uint256 noOfHours;\r\n\r\n        noOfHours = interval.div(HOURS);\r\n        noOfDays = interval.div(DAYS);\r\n\r\n        rewardsEarned = noOfHours.mul(\r\n            getOneDayReward(stakedAmount, stakedToken, stakedToken, totalStake)\r\n        );\r\n\r\n        (address stakedToken1, ) = swapPaidToken(stakedToken);\r\n\r\n        // Referrer Earning\r\n        if (referrerAddress != address(0)) {\r\n            uint256 refEarned = (rewardsEarned.mul(uniV3.refPercentage())).div(\r\n                100 ether\r\n            );\r\n            rewardsEarned = rewardsEarned.sub(refEarned);\r\n            require(\r\n                IERC20(stakedToken1).transfer(referrerAddress, refEarned),\r\n                \"Transfer Failed\"\r\n            );\r\n\r\n            emit ReferralEarn(\r\n                referrerAddress,\r\n                user,\r\n                stakedToken1,\r\n                refEarned,\r\n                block.timestamp\r\n            );\r\n        }\r\n\r\n        //  Rewards Send\r\n        sendToken(user, stakedToken1, stakedToken1, rewardsEarned);\r\n\r\n        uint8 i = 1;\r\n        while (i < intervalDays.length) {\r\n            if (noOfDays >= intervalDays[i]) {\r\n                uint256 balHours = noOfHours.sub(\r\n                    (intervalDays[i].sub(1)).mul(24)\r\n                );\r\n\r\n                address rewardToken = uniV3.tokensSequenceList(stakedToken, i);\r\n\r\n                if (\r\n                    rewardToken != stakedToken &&\r\n                    uniV3.tokenBlockedStatus(stakedToken, rewardToken) == false\r\n                ) {\r\n                    rewardsEarned = balHours.mul(\r\n                        getOneDayReward(\r\n                            stakedAmount,\r\n                            stakedToken,\r\n                            rewardToken,\r\n                            totalStake\r\n                        )\r\n                    );\r\n\r\n                    (address rewardToken1, ) = swapPaidToken(rewardToken);\r\n\r\n                    // Referrer Earning\r\n\r\n                    if (referrerAddress != address(0)) {\r\n                        uint256 refEarned = (\r\n                            rewardsEarned.mul(uniV3.refPercentage())\r\n                        ).div(100 ether);\r\n                        rewardsEarned = rewardsEarned.sub(refEarned);\r\n\r\n                        require(\r\n                            IERC20(rewardToken1).transfer(\r\n                                referrerAddress,\r\n                                refEarned\r\n                            ),\r\n                            \"Transfer Failed\"\r\n                        );\r\n\r\n                        emit ReferralEarn(\r\n                            referrerAddress,\r\n                            user,\r\n                            rewardToken1,\r\n                            refEarned,\r\n                            block.timestamp\r\n                        );\r\n                    }\r\n\r\n                    //  Rewards Send\r\n                    sendToken(user, stakedToken, rewardToken1, rewardsEarned);\r\n                }\r\n                i = i + 1;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function swapPaidToken(address tokenAddress)\r\n        internal\r\n        view\r\n        returns (address, uint256)\r\n    {\r\n        if (tokenAddress == oldPaidAddress) {\r\n            uint256 uniV3totalStaking = uniV3.totalStaking(tokenAddress);\r\n            uint256 uniV3ProxyTotalUnstaking = u3UpgradeTotalUnStaking[\r\n                newPaidAddress\r\n            ].add(uniV3Proxy.totalUnStakingB(newPaidAddress));\r\n            uint256 totalStaking = uniV3totalStaking.sub(\r\n                uniV3ProxyTotalUnstaking\r\n            );\r\n            return (newPaidAddress, totalStaking);\r\n        } else {\r\n            uint256 uniV3totalStaking = uniV3.totalStaking(tokenAddress);\r\n            uint256 uniV3ProxyTotalUnstaking = u3UpgradeTotalUnStaking[\r\n                tokenAddress\r\n            ].add(uniV3Proxy.totalUnStakingB(tokenAddress));\r\n            uint256 totalStaking = uniV3totalStaking.sub(\r\n                uniV3ProxyTotalUnstaking\r\n            );\r\n            return (tokenAddress, totalStaking);\r\n        }\r\n    }\r\n\r\n    function updateIntervalDays(uint256[] memory _interval) public onlyOwner {\r\n        intervalDays = new uint256[](0);\r\n\r\n        for (uint8 i = 0; i < _interval.length; i++) {\r\n            uint256 noD = uniV3.stakeDuration().div(DAYS);\r\n            require(noD > _interval[i], \"Invalid Interval Day\");\r\n            intervalDays.push(_interval[i]);\r\n        }\r\n\r\n        emit IntervalDaysDetails(intervalDays, block.timestamp);\r\n    }\r\n\r\n    function lockableToken(\r\n        address tokenAddress,\r\n        uint8 lockableStatus,\r\n        uint256 lockedDays,\r\n        bool optionableStatus\r\n    ) external onlyOwner {\r\n        require(\r\n            lockableStatus == 1 || lockableStatus == 2 || lockableStatus == 3,\r\n            \"Invalid Lockable Status\"\r\n        );\r\n\r\n        (bool tokenExist, , , , , , ) = uniV3.tokenDetails(tokenAddress);\r\n\r\n        require(tokenExist == true, \"Token Not Exist\");\r\n\r\n        if (lockableStatus == 1) {\r\n            u3UpgradeLockableDetails[tokenAddress].lockableDays = block\r\n                .timestamp\r\n                .add(lockedDays);\r\n        } else if (lockableStatus == 2)\r\n            u3UpgradeLockableDetails[tokenAddress].lockableDays = 0;\r\n        else if (lockableStatus == 3)\r\n            u3UpgradeLockableDetails[tokenAddress]\r\n                .optionableStatus = optionableStatus;\r\n\r\n        emit LockableTokenDetails(\r\n            tokenAddress,\r\n            u3UpgradeLockableDetails[tokenAddress].lockableDays,\r\n            u3UpgradeLockableDetails[tokenAddress].optionableStatus,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function transferV3ProxyOwnership(address newOwner) external onlyOwner {\r\n        uniV3Proxy.transferOwnership(newOwner);\r\n    }\r\n\r\n    function safeWithdraw(address tokenAddress, uint256 amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            IERC20(tokenAddress).balanceOf(address(this)) >= amount,\r\n            \"SAFEWITHDRAW: Insufficient Balance\"\r\n        );\r\n\r\n        require(\r\n            IERC20(tokenAddress).transfer(_owner, amount) == true,\r\n            \"SAFEWITHDRAW: Transfer failed\"\r\n        );\r\n\r\n        emit WithdrawDetails(tokenAddress, amount, block.timestamp);\r\n    }\r\n\r\n    function updateLegacyU3Addresses(address v3Address, address v3ProxyAddress)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        uniV3 = U3Legacy(v3Address);\r\n        uniV3Proxy = U3Proxy(v3ProxyAddress);\r\n        return true;\r\n    }\r\n\r\n    function updateOldPaidAddress(address oldPaid)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        oldPaidAddress = oldPaid;\r\n        return true;\r\n    }\r\n\r\n    function updateNewPaidAddress(address newPaid)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        newPaidAddress = newPaid;\r\n        return true;\r\n    }\r\n\r\n    function emergencyUnstake(\r\n        uint256 stakeId,\r\n        address userAddress,\r\n        address[] memory rewardtokens,\r\n        uint256[] memory amount\r\n    ) external onlyOwner {\r\n        (\r\n            address[] memory referrerAddress,\r\n            address[] memory tokenAddress,\r\n            bool[] memory activeStatus,\r\n            ,\r\n            ,\r\n            uint256[] memory stakedAmount,\r\n\r\n        ) = (uniV3.viewStakingDetails(userAddress));\r\n\r\n        bool isAlreadyUnstaked = uniV3Proxy.unstakeStatus(userAddress, stakeId);\r\n        // Checks\r\n        if (\r\n            u3UnstakeStatus[userAddress][stakeId] == false &&\r\n            isAlreadyUnstaked == false &&\r\n            activeStatus[stakeId] == true\r\n        ) u3UnstakeStatus[userAddress][stakeId] = true;\r\n        else revert(\"EMERGENCY: Unstaked Already\");\r\n\r\n        (address stakedToken, ) = swapPaidToken(tokenAddress[stakeId]);\r\n\r\n        // Balance check\r\n        require(\r\n            IERC20(stakedToken).balanceOf(address(this)) >=\r\n                stakedAmount[stakeId],\r\n            \"EMERGENCY : Insufficient Balance\"\r\n        );\r\n\r\n        u3UpgradeTotalUnStaking[stakedToken] = u3UpgradeTotalUnStaking[\r\n            stakedToken\r\n        ].add(stakedAmount[stakeId]);\r\n\r\n        IERC20(stakedToken).transfer(userAddress, stakedAmount[stakeId]);\r\n\r\n        for (uint256 i = 0; i < rewardtokens.length; i++) {\r\n            require(\r\n                IERC20(rewardtokens[i]).balanceOf(address(this)) >= amount[i],\r\n                \"EMERGENCY : Insufficient Reward Balance\"\r\n            );\r\n            uint256 rewardsEarned = amount[i];\r\n\r\n            if (referrerAddress[stakeId] != address(0)) {\r\n                uint256 refEarned = (rewardsEarned.mul(uniV3.refPercentage()))\r\n                    .div(100 ether);\r\n                rewardsEarned = rewardsEarned.sub(refEarned);\r\n\r\n                require(\r\n                    IERC20(rewardtokens[i]).transfer(\r\n                        referrerAddress[stakeId],\r\n                        refEarned\r\n                    ),\r\n                    \"EMERGENCY : Transfer Failed\"\r\n                );\r\n\r\n                emit ReferralEarn(\r\n                    referrerAddress[stakeId],\r\n                    userAddress,\r\n                    rewardtokens[i],\r\n                    refEarned,\r\n                    block.timestamp\r\n                );\r\n            }\r\n            sendToken(userAddress, stakedToken, rewardtokens[i], rewardsEarned);\r\n        }\r\n\r\n        // Emit state changes\r\n        emit UnStake(\r\n            userAddress,\r\n            stakedToken,\r\n            stakedAmount[stakeId],\r\n            block.timestamp,\r\n            stakeId\r\n        );\r\n    }\r\n\r\n    function lockContract(bool pauseStatus) external onlyOwner {\r\n        if (pauseStatus == true) _pause();\r\n        else if (pauseStatus == false) _unpause();\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u3Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"u3ProxyAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakedTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"updatedIntervals\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"IntervalDaysDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockableDys\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"optionalbleStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedTime\",\"type\":\"uint256\"}],\"name\":\"LockableTokenDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"callerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ReferralEarn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"unStakedtokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unStakedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeID\",\"type\":\"uint256\"}],\"name\":\"UnStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"WithdrawDetails\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HOURS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rewardtokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"emergencyUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"}],\"name\":\"getOneDayReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTotalStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddress\",\"type\":\"address[]\"}],\"name\":\"init\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"intervalDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pauseStatus\",\"type\":\"bool\"}],\"name\":\"lockContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"lockableStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lockedDays\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"optionableStatus\",\"type\":\"bool\"}],\"name\":\"lockableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newPaidAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldPaidAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferV3ProxyOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"u3UnstakeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"u3UpgradeLockableDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockableDays\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"optionableStatus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"u3UpgradeTotalUnStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniV3\",\"outputs\":[{\"internalType\":\"contract U3Legacy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniV3Proxy\",\"outputs\":[{\"internalType\":\"contract U3Proxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_interval\",\"type\":\"uint256[]\"}],\"name\":\"updateIntervalDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"v3Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"v3ProxyAddress\",\"type\":\"address\"}],\"name\":\"updateLegacyU3Addresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPaid\",\"type\":\"address\"}],\"name\":\"updateNewPaidAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldPaid\",\"type\":\"address\"}],\"name\":\"updateOldPaidAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPoolStartTime\",\"type\":\"uint256\"}],\"name\":\"updatePoolStartTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"U3ProxyUpgradablity","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000349d55f12fb166a926214ca0195a07a16fa4ccb1000000000000000000000000559cd5b11ca882cedda823ac06275558a92b7064","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b7ab6c78771f1793afd955a1c7a0ae9afd8af39f440b4e10c1d32d51a96a2c71"}]}