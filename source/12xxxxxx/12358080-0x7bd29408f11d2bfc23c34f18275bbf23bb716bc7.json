{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.7.6;\r\n\r\n/**\r\n *  __  __           _     _ _\r\n * |  \\/  |         | |   (_) |\r\n * | \\  / | ___  ___| |__  _| |_ ___\r\n * | |\\/| |/ _ \\/ _ \\ '_ \\| | __/ __|\r\n * | |  | |  __/  __/ |_) | | |_\\__ \\\r\n * |_|  |_|\\___|\\___|_.__/|_|\\__|___/\r\n *\r\n * An NFT project from Larva Labs.\r\n *\r\n */\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function approve(address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n/**\r\n * Minimal interface to Cryptopunks for verifying ownership during Community Grant.\r\n */\r\ninterface Cryptopunks {\r\n    function punkIndexToAddress(uint index) external view returns(address);\r\n}\r\n\r\ninterface ERC721TokenReceiver\r\n{\r\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns(bytes4);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Meebits is IERC721 {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * Event emitted when minting a new NFT. \"createdVia\" is the index of the Cryptopunk/Autoglyph that was used to mint, or 0 if not applicable.\r\n     */\r\n    event Mint(uint indexed index, address indexed minter, uint createdVia);\r\n\r\n    /**\r\n     * Event emitted when a trade is executed.\r\n     */\r\n    event Trade(bytes32 indexed hash, address indexed maker, address taker, uint makerWei, uint[] makerIds, uint takerWei, uint[] takerIds);\r\n\r\n    /**\r\n     * Event emitted when ETH is deposited into the contract.\r\n     */\r\n    event Deposit(address indexed account, uint amount);\r\n\r\n    /**\r\n     * Event emitted when ETH is withdrawn from the contract.\r\n     */\r\n    event Withdraw(address indexed account, uint amount);\r\n\r\n    /**\r\n     * Event emitted when a trade offer is cancelled.\r\n     */\r\n    event OfferCancelled(bytes32 hash);\r\n\r\n    /**\r\n     * Event emitted when the public sale begins.\r\n     */\r\n    event SaleBegins();\r\n\r\n    /**\r\n     * Event emitted when the community grant period ends.\r\n     */\r\n    event CommunityGrantEnds();\r\n\r\n    bytes4 internal constant MAGIC_ON_ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    // IPFS Hash to the NFT content\r\n    string public contentHash = \"QmfXYgfX1qNfzQ6NRyFnupniZusasFPMeiWn5aaDnx7YXo\";\r\n\r\n    uint public constant TOKEN_LIMIT = 20000;\r\n    uint public constant SALE_LIMIT = 9000;\r\n\r\n    mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n    mapping (uint256 => address) internal idToOwner;\r\n\r\n    mapping (uint256 => uint256) public creatorNftMints;\r\n\r\n    mapping (uint256 => address) internal idToApproval;\r\n\r\n    mapping (address => mapping (address => bool)) internal ownerToOperators;\r\n\r\n    mapping(address => uint256[]) internal ownerToIds;\r\n\r\n    mapping(uint256 => uint256) internal idToOwnerIndex;\r\n\r\n    string internal nftName = \"Meebits\";\r\n    string internal nftSymbol = unicode\"âš‡\";\r\n\r\n    uint internal numTokens = 0;\r\n    uint internal numSales = 0;\r\n\r\n    // Cryptopunks contract\r\n    address internal punks;\r\n\r\n    // Autoglyphs contract\r\n    address internal glyphs;\r\n\r\n    address payable internal deployer;\r\n    address payable internal beneficiary;\r\n    bool public communityGrant = true;\r\n    bool public publicSale = false;\r\n    uint private price;\r\n    uint public saleStartTime;\r\n    uint public saleDuration;\r\n\r\n    //// Random index assignment\r\n    uint internal nonce = 0;\r\n    uint[TOKEN_LIMIT] internal indices;\r\n\r\n    //// Market\r\n    bool public marketPaused;\r\n    bool public contractSealed;\r\n    mapping (address => uint256) public ethBalance;\r\n    mapping (bytes32 => bool) public cancelledOffers;\r\n\r\n    modifier onlyDeployer() {\r\n        require(msg.sender == deployer, \"Only deployer.\");\r\n        _;\r\n    }\r\n\r\n    bool private reentrancyLock = false;\r\n\r\n    /* Prevent a contract function from being reentrant-called. */\r\n    modifier reentrancyGuard {\r\n        if (reentrancyLock) {\r\n            revert();\r\n        }\r\n        reentrancyLock = true;\r\n        _;\r\n        reentrancyLock = false;\r\n    }\r\n\r\n    modifier canOperate(uint256 _tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == msg.sender || ownerToOperators[tokenOwner][msg.sender], \"Cannot operate.\");\r\n        _;\r\n    }\r\n\r\n    modifier canTransfer(uint256 _tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(\r\n            tokenOwner == msg.sender\r\n            || idToApproval[_tokenId] == msg.sender\r\n            || ownerToOperators[tokenOwner][msg.sender], \"Cannot transfer.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier validNFToken(uint256 _tokenId) {\r\n        require(idToOwner[_tokenId] != address(0), \"Invalid token.\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _punks, address _glyphs, address payable _beneficiary) {\r\n        supportedInterfaces[0x01ffc9a7] = true; // ERC165\r\n        supportedInterfaces[0x80ac58cd] = true; // ERC721\r\n        supportedInterfaces[0x780e9d63] = true; // ERC721 Enumerable\r\n        supportedInterfaces[0x5b5e139f] = true; // ERC721 Metadata\r\n        deployer = msg.sender;\r\n        punks = _punks;\r\n        glyphs = _glyphs;\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function startSale(uint _price, uint _saleDuration) external onlyDeployer {\r\n        require(!publicSale);\r\n        price = _price;\r\n        saleDuration = _saleDuration;\r\n        saleStartTime = block.timestamp;\r\n        publicSale = true;\r\n        emit SaleBegins();\r\n    }\r\n\r\n    function endCommunityGrant() external onlyDeployer {\r\n        require(communityGrant);\r\n        communityGrant = false;\r\n        emit CommunityGrantEnds();\r\n    }\r\n\r\n    function pauseMarket(bool _paused) external onlyDeployer {\r\n        require(!contractSealed, \"Contract sealed.\");\r\n        marketPaused = _paused;\r\n    }\r\n\r\n    function sealContract() external onlyDeployer {\r\n        contractSealed = true;\r\n    }\r\n\r\n    //////////////////////////\r\n    //// ERC 721 and 165  ////\r\n    //////////////////////////\r\n\r\n    function isContract(address _addr) internal view returns (bool addressCheck) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(_addr) } // solhint-disable-line\r\n        addressCheck = size > 0;\r\n    }\r\n\r\n    function supportsInterface(bytes4 _interfaceID) external view override returns (bool) {\r\n        return supportedInterfaces[_interfaceID];\r\n    }\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external override {\r\n        _safeTransferFrom(_from, _to, _tokenId, _data);\r\n    }\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external override {\r\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external override canTransfer(_tokenId) validNFToken(_tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == _from, \"Wrong from address.\");\r\n        require(_to != address(0), \"Cannot send to 0x0.\");\r\n        _transfer(_to, _tokenId);\r\n    }\r\n\r\n    function approve(address _approved, uint256 _tokenId) external override canOperate(_tokenId) validNFToken(_tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(_approved != tokenOwner);\r\n        idToApproval[_tokenId] = _approved;\r\n        emit Approval(tokenOwner, _approved, _tokenId);\r\n    }\r\n\r\n    function setApprovalForAll(address _operator, bool _approved) external override {\r\n        ownerToOperators[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    function balanceOf(address _owner) external view override returns (uint256) {\r\n        require(_owner != address(0));\r\n        return _getOwnerNFTCount(_owner);\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) external view override returns (address _owner) {\r\n        require(idToOwner[_tokenId] != address(0));\r\n        _owner = idToOwner[_tokenId];\r\n    }\r\n\r\n    function getApproved(uint256 _tokenId) external view override validNFToken(_tokenId) returns (address) {\r\n        return idToApproval[_tokenId];\r\n    }\r\n\r\n    function isApprovedForAll(address _owner, address _operator) external override view returns (bool) {\r\n        return ownerToOperators[_owner][_operator];\r\n    }\r\n\r\n    function _transfer(address _to, uint256 _tokenId) internal {\r\n        address from = idToOwner[_tokenId];\r\n        _clearApproval(_tokenId);\r\n\r\n        _removeNFToken(from, _tokenId);\r\n        _addNFToken(_to, _tokenId);\r\n\r\n        emit Transfer(from, _to, _tokenId);\r\n    }\r\n\r\n    function randomIndex() internal returns (uint) {\r\n        uint totalSize = TOKEN_LIMIT - numTokens;\r\n        uint index = uint(keccak256(abi.encodePacked(nonce, msg.sender, block.difficulty, block.timestamp))) % totalSize;\r\n        uint value = 0;\r\n        if (indices[index] != 0) {\r\n            value = indices[index];\r\n        } else {\r\n            value = index;\r\n        }\r\n\r\n        // Move last value to selected position\r\n        if (indices[totalSize - 1] == 0) {\r\n            // Array position not initialized, so use position\r\n            indices[index] = totalSize - 1;\r\n        } else {\r\n            // Array position holds a value so use that\r\n            indices[index] = indices[totalSize - 1];\r\n        }\r\n        nonce++;\r\n        // Don't allow a zero index, start counting at 1\r\n        return value.add(1);\r\n    }\r\n\r\n    // Calculate the mint price\r\n    function getPrice() public view returns (uint) {\r\n        require(publicSale, \"Sale not started.\");\r\n        uint elapsed = block.timestamp.sub(saleStartTime);\r\n        if (elapsed >= saleDuration) {\r\n            return 0;\r\n        } else {\r\n            return saleDuration.sub(elapsed).mul(price).div(saleDuration);\r\n        }\r\n    }\r\n\r\n    // The deployer can mint in bulk without paying\r\n    function devMint(uint quantity, address recipient) external onlyDeployer {\r\n        for (uint i = 0; i < quantity; i++) {\r\n            _mint(recipient, 0);\r\n        }\r\n    }\r\n\r\n    function mintsRemaining() external view returns (uint) {\r\n        return SALE_LIMIT.sub(numSales);\r\n    }\r\n\r\n    /**\r\n     * Community grant minting.\r\n     */\r\n    function mintWithPunkOrGlyph(uint _createVia) external reentrancyGuard returns (uint) {\r\n        require(communityGrant);\r\n        require(!marketPaused);\r\n        require(_createVia > 0 && _createVia <= 10512, \"Invalid punk/glyph index.\");\r\n        require(creatorNftMints[_createVia] == 0, \"Already minted with this punk/glyph\");\r\n        if (_createVia > 10000) {\r\n            // It's a glyph\r\n            // Compute the glyph ID\r\n            uint glyphId = _createVia.sub(10000);\r\n            // Make sure the sender owns the glyph\r\n            require(IERC721(glyphs).ownerOf(glyphId) == msg.sender, \"Not the owner of this glyph.\");\r\n        } else {\r\n            // It's a punk\r\n            // Compute the punk ID\r\n            uint punkId = _createVia.sub(1);\r\n            // Make sure the sender owns the punk\r\n            require(Cryptopunks(punks).punkIndexToAddress(punkId) == msg.sender, \"Not the owner of this punk.\");\r\n        }\r\n        creatorNftMints[_createVia]++;\r\n        return _mint(msg.sender, _createVia);\r\n    }\r\n\r\n    /**\r\n     * Public sale minting.\r\n     */\r\n    function mint() external payable reentrancyGuard returns (uint) {\r\n        require(publicSale, \"Sale not started.\");\r\n        require(!marketPaused);\r\n        require(numSales < SALE_LIMIT, \"Sale limit reached.\");\r\n        uint salePrice = getPrice();\r\n        require(msg.value >= salePrice, \"Insufficient funds to purchase.\");\r\n        if (msg.value > salePrice) {\r\n            msg.sender.transfer(msg.value.sub(salePrice));\r\n        }\r\n        beneficiary.transfer(salePrice);\r\n        numSales++;\r\n        return _mint(msg.sender, 0);\r\n    }\r\n\r\n    function _mint(address _to, uint createdVia) internal returns (uint) {\r\n        require(_to != address(0), \"Cannot mint to 0x0.\");\r\n        require(numTokens < TOKEN_LIMIT, \"Token limit reached.\");\r\n        uint id = randomIndex();\r\n\r\n        numTokens = numTokens + 1;\r\n        _addNFToken(_to, id);\r\n\r\n        emit Mint(id, _to, createdVia);\r\n        emit Transfer(address(0), _to, id);\r\n        return id;\r\n    }\r\n\r\n    function _addNFToken(address _to, uint256 _tokenId) internal {\r\n        require(idToOwner[_tokenId] == address(0), \"Cannot add, already owned.\");\r\n        idToOwner[_tokenId] = _to;\r\n\r\n        ownerToIds[_to].push(_tokenId);\r\n        idToOwnerIndex[_tokenId] = ownerToIds[_to].length.sub(1);\r\n    }\r\n\r\n    function _removeNFToken(address _from, uint256 _tokenId) internal {\r\n        require(idToOwner[_tokenId] == _from, \"Incorrect owner.\");\r\n        delete idToOwner[_tokenId];\r\n\r\n        uint256 tokenToRemoveIndex = idToOwnerIndex[_tokenId];\r\n        uint256 lastTokenIndex = ownerToIds[_from].length.sub(1);\r\n\r\n        if (lastTokenIndex != tokenToRemoveIndex) {\r\n            uint256 lastToken = ownerToIds[_from][lastTokenIndex];\r\n            ownerToIds[_from][tokenToRemoveIndex] = lastToken;\r\n            idToOwnerIndex[lastToken] = tokenToRemoveIndex;\r\n        }\r\n\r\n        ownerToIds[_from].pop();\r\n    }\r\n\r\n    function _getOwnerNFTCount(address _owner) internal view returns (uint256) {\r\n        return ownerToIds[_owner].length;\r\n    }\r\n\r\n    function _safeTransferFrom(address _from,  address _to,  uint256 _tokenId,  bytes memory _data) private canTransfer(_tokenId) validNFToken(_tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == _from, \"Incorrect owner.\");\r\n        require(_to != address(0));\r\n\r\n        _transfer(_to, _tokenId);\r\n\r\n        if (isContract(_to)) {\r\n            bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\r\n            require(retval == MAGIC_ON_ERC721_RECEIVED);\r\n        }\r\n    }\r\n\r\n    function _clearApproval(uint256 _tokenId) private {\r\n        if (idToApproval[_tokenId] != address(0)) {\r\n            delete idToApproval[_tokenId];\r\n        }\r\n    }\r\n\r\n    //// Enumerable\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return numTokens;\r\n    }\r\n\r\n    function tokenByIndex(uint256 index) public pure returns (uint256) {\r\n        require(index >= 0 && index < TOKEN_LIMIT);\r\n        return index + 1;\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\r\n        require(_index < ownerToIds[_owner].length);\r\n        return ownerToIds[_owner][_index];\r\n    }\r\n\r\n    //// Metadata\r\n\r\n    /**\r\n      * @dev Converts a `uint256` to its ASCII `string` representation.\r\n      */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        uint256 index = digits - 1;\r\n        temp = value;\r\n        while (temp != 0) {\r\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\r\n            temp /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n      * @dev Returns a descriptive name for a collection of NFTokens.\r\n      * @return _name Representing name.\r\n      */\r\n    function name() external view returns (string memory _name) {\r\n        _name = nftName;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an abbreviated name for NFTokens.\r\n     * @return _symbol Representing symbol.\r\n     */\r\n    function symbol() external view returns (string memory _symbol) {\r\n        _symbol = nftSymbol;\r\n    }\r\n\r\n    /**\r\n     * @dev A distinct URI (RFC 3986) for a given NFT.\r\n     * @param _tokenId Id for which we want uri.\r\n     * @return _tokenId URI of _tokenId.\r\n     */\r\n    function tokenURI(uint256 _tokenId) external view validNFToken(_tokenId) returns (string memory) {\r\n        return string(abi.encodePacked(\"https://meebits.larvalabs.com/meebit/\", toString(_tokenId)));\r\n    }\r\n\r\n    //// MARKET\r\n\r\n    struct Offer {\r\n        address maker;\r\n        address taker;\r\n        uint256 makerWei;\r\n        uint256[] makerIds;\r\n        uint256 takerWei;\r\n        uint256[] takerIds;\r\n        uint256 expiry;\r\n        uint256 salt;\r\n    }\r\n\r\n    function hashOffer(Offer memory offer) private pure returns (bytes32){\r\n        return keccak256(abi.encode(\r\n                    offer.maker,\r\n                    offer.taker,\r\n                    offer.makerWei,\r\n                    keccak256(abi.encodePacked(offer.makerIds)),\r\n                    offer.takerWei,\r\n                    keccak256(abi.encodePacked(offer.takerIds)),\r\n                    offer.expiry,\r\n                    offer.salt\r\n                ));\r\n    }\r\n\r\n    function hashToSign(address maker, address taker, uint256 makerWei, uint256[] memory makerIds, uint256 takerWei, uint256[] memory takerIds, uint256 expiry, uint256 salt) public pure returns (bytes32) {\r\n        Offer memory offer = Offer(maker, taker, makerWei, makerIds, takerWei, takerIds, expiry, salt);\r\n        return hashOffer(offer);\r\n    }\r\n\r\n    function hashToVerify(Offer memory offer) private pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hashOffer(offer)));\r\n    }\r\n\r\n    function verify(address signer, bytes32 hash, bytes memory signature) internal pure returns (bool) {\r\n        require(signer != address(0));\r\n        require(signature.length == 65);\r\n\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        assembly {\r\n            r := mload(add(signature, 32))\r\n            s := mload(add(signature, 64))\r\n            v := byte(0, mload(add(signature, 96)))\r\n        }\r\n\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        require(v == 27 || v == 28);\r\n\r\n        return signer == ecrecover(hash, v, r, s);\r\n    }\r\n\r\n    function tradeValid(address maker, address taker, uint256 makerWei, uint256[] memory makerIds, uint256 takerWei, uint256[] memory takerIds, uint256 expiry, uint256 salt, bytes memory signature) view public returns (bool) {\r\n        Offer memory offer = Offer(maker, taker, makerWei, makerIds, takerWei, takerIds, expiry, salt);\r\n        // Check for cancellation\r\n        bytes32 hash = hashOffer(offer);\r\n        require(cancelledOffers[hash] == false, \"Trade offer was cancelled.\");\r\n        // Verify signature\r\n        bytes32 verifyHash = hashToVerify(offer);\r\n        require(verify(offer.maker, verifyHash, signature), \"Signature not valid.\");\r\n        // Check for expiry\r\n        require(block.timestamp < offer.expiry, \"Trade offer expired.\");\r\n        // Only one side should ever have to pay, not both\r\n        require(makerWei == 0 || takerWei == 0, \"Only one side of trade must pay.\");\r\n        // At least one side should offer tokens\r\n        require(makerIds.length > 0 || takerIds.length > 0, \"One side must offer tokens.\");\r\n        // Make sure the maker has funded the trade\r\n        require(ethBalance[offer.maker] >= offer.makerWei, \"Maker does not have sufficient balance.\");\r\n        // Ensure the maker owns the maker tokens\r\n        for (uint i = 0; i < offer.makerIds.length; i++) {\r\n            require(idToOwner[offer.makerIds[i]] == offer.maker, \"At least one maker token doesn't belong to maker.\");\r\n        }\r\n        // If the taker can be anybody, then there can be no taker tokens\r\n        if (offer.taker == address(0)) {\r\n            // If taker not specified, then can't specify IDs\r\n            require(offer.takerIds.length == 0, \"If trade is offered to anybody, cannot specify tokens from taker.\");\r\n        } else {\r\n            // Ensure the taker owns the taker tokens\r\n            for (uint i = 0; i < offer.takerIds.length; i++) {\r\n                require(idToOwner[offer.takerIds[i]] == offer.taker, \"At least one taker token doesn't belong to taker.\");\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function cancelOffer(address maker, address taker, uint256 makerWei, uint256[] memory makerIds, uint256 takerWei, uint256[] memory takerIds, uint256 expiry, uint256 salt) external {\r\n        require(maker == msg.sender, \"Only the maker can cancel this offer.\");\r\n        Offer memory offer = Offer(maker, taker, makerWei, makerIds, takerWei, takerIds, expiry, salt);\r\n        bytes32 hash = hashOffer(offer);\r\n        cancelledOffers[hash] = true;\r\n        emit OfferCancelled(hash);\r\n    }\r\n\r\n    function acceptTrade(address maker, address taker, uint256 makerWei, uint256[] memory makerIds, uint256 takerWei, uint256[] memory takerIds, uint256 expiry, uint256 salt, bytes memory signature) external payable reentrancyGuard {\r\n        require(!marketPaused, \"Market is paused.\");\r\n        require(msg.sender != maker, \"Can't accept ones own trade.\");\r\n        Offer memory offer = Offer(maker, taker, makerWei, makerIds, takerWei, takerIds, expiry, salt);\r\n        if (msg.value > 0) {\r\n            ethBalance[msg.sender] = ethBalance[msg.sender].add(msg.value);\r\n            emit Deposit(msg.sender, msg.value);\r\n        }\r\n        require(offer.taker == address(0) || offer.taker == msg.sender, \"Not the recipient of this offer.\");\r\n        require(tradeValid(maker, taker, makerWei, makerIds, takerWei, takerIds, expiry, salt, signature), \"Trade not valid.\");\r\n        require(ethBalance[msg.sender] >= offer.takerWei, \"Insufficient funds to execute trade.\");\r\n        // Transfer ETH\r\n        ethBalance[offer.maker] = ethBalance[offer.maker].sub(offer.makerWei);\r\n        ethBalance[msg.sender] = ethBalance[msg.sender].add(offer.makerWei);\r\n        ethBalance[msg.sender] = ethBalance[msg.sender].sub(offer.takerWei);\r\n        ethBalance[offer.maker] = ethBalance[offer.maker].add(offer.takerWei);\r\n        // Transfer maker ids to taker (msg.sender)\r\n        for (uint i = 0; i < makerIds.length; i++) {\r\n            _transfer(msg.sender, makerIds[i]);\r\n        }\r\n        // Transfer taker ids to maker\r\n        for (uint i = 0; i < takerIds.length; i++) {\r\n            _transfer(maker, takerIds[i]);\r\n        }\r\n        // Prevent a replay attack on this offer\r\n        bytes32 hash = hashOffer(offer);\r\n        cancelledOffers[hash] = true;\r\n        emit Trade(hash, offer.maker, msg.sender, offer.makerWei, offer.makerIds, offer.takerWei, offer.takerIds);\r\n    }\r\n\r\n    function withdraw(uint amount) external reentrancyGuard {\r\n        require(amount <= ethBalance[msg.sender]);\r\n        ethBalance[msg.sender] = ethBalance[msg.sender].sub(amount);\r\n        (bool success, ) = msg.sender.call{value:amount}(\"\");\r\n        require(success);\r\n        emit Withdraw(msg.sender, amount);\r\n    }\r\n\r\n    function deposit() external payable {\r\n        ethBalance[msg.sender] = ethBalance[msg.sender].add(msg.value);\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_punks\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_glyphs\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CommunityGrantEnds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"createdVia\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"OfferCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleBegins\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"makerWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"makerIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"takerWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"takerIds\",\"type\":\"uint256[]\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SALE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makerWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"makerIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"takerWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"takerIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"acceptTrade\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makerWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"makerIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"takerWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"takerIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cancelledOffers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityGrant\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contentHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractSealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creatorNftMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"devMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endCommunityGrant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makerWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"makerIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"takerWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"takerIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"hashToSign\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_createVia\",\"type\":\"uint256\"}],\"name\":\"mintWithPunkOrGlyph\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintsRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"pauseMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sealContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_saleDuration\",\"type\":\"uint256\"}],\"name\":\"startSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makerWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"makerIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"takerWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"takerIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"tradeValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Meebits","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b47e3cd837ddf8e4c57f05d70ab865de6e193bbb000000000000000000000000d4e4078ca3495de5b1d4db434bebc5a986197782000000000000000000000000c352b534e8b987e036a93539fd6897f53488e56a","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8c6207b4011c283c186af7c3ff1174c8465f56c8edadff785faab511352d0c04"}]}