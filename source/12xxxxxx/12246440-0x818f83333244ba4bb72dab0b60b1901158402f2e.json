{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/distribution/Distribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.8.0;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport {Math} from '@openzeppelin/contracts/math/Math.sol';\\nimport {SafeMath} from '@openzeppelin/contracts/math/SafeMath.sol';\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\n\\nimport {Operator} from '../access/Operator.sol';\\nimport {IPool, IPoolGov} from './IPool.sol';\\nimport {IPoolStore, PoolStoreWrapper} from './PoolStoreWrapper.sol';\\n\\ncontract Distribution is IPool, IPoolGov, PoolStoreWrapper, Operator {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /* ================= DATA STRUCTURE ================= */\\n\\n    struct User {\\n        uint256 amount;\\n        uint256 reward;\\n        uint256 rewardPerTokenPaid;\\n    }\\n    struct Pool {\\n        bool initialized;\\n        uint256 rewardRate;\\n        uint256 lastUpdateTime;\\n        uint256 rewardPerTokenStored;\\n    }\\n\\n    /* ================= STATE VARIABLES ================= */\\n\\n    // share\\n    address public share;\\n    mapping(address => bool) public approvals;\\n    // poolId => Pool\\n    mapping(uint256 => Pool) public pools;\\n    // poolId => sender => User\\n    mapping(uint256 => mapping(address => User)) public users;\\n\\n    bool public stopped = false;\\n    uint256 public rewardRate = 0;\\n    uint256 public rewardRateExtra = 0;\\n\\n    // halving\\n    uint256 public rewardRateBeforeHalve = 0;\\n\\n    // control\\n    uint256 public period = 0;\\n    uint256 public periodFinish = 0;\\n    uint256 public startTime = 0;\\n\\n    /* ================= CONSTRUCTOR ================= */\\n\\n    constructor(address _share, address _poolStore) Ownable() {\\n        share = _share;\\n        store = IPoolStore(_poolStore);\\n    }\\n\\n    /* ================= GOV - OWNER ONLY ================= */\\n\\n    /**\\n     * @param _startTime starting time to distribute\\n     * @param _period distribution period\\n     */\\n    function setPeriod(uint256 _startTime, uint256 _period)\\n        public\\n        override\\n        onlyOperator\\n    {\\n        // re-calc\\n        if (startTime <= block.timestamp && block.timestamp < periodFinish) {\\n            uint256 remaining = periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rewardRate);\\n            rewardRate = leftover.div(_period);\\n        }\\n\\n        period = _period;\\n        startTime = _startTime;\\n        periodFinish = _startTime.add(_period);\\n    }\\n\\n    /**\\n     * @param _amount token amount to distribute\\n     */\\n    function setReward(uint256 _amount) public override onlyOperator {\\n        require(block.timestamp < periodFinish, 'BACPool: already finished');\\n\\n        if (startTime <= block.timestamp) {\\n            uint256 remaining = periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rewardRate);\\n            rewardRate = _amount.add(leftover).div(\\n                periodFinish.sub(block.timestamp)\\n            );\\n        } else {\\n            rewardRate = rewardRate.add(\\n                _amount.div(periodFinish.sub(startTime))\\n            );\\n        }\\n    }\\n\\n    function setExtraRewardRate(uint256 _extra) public override onlyOwner {\\n        rewardRateExtra = _extra;\\n    }\\n\\n    /**\\n     * @dev STOP DISTRIBUTION\\n     */\\n    function stop() public override onlyOwner {\\n        periodFinish = block.timestamp;\\n        stopped = true;\\n    }\\n\\n    /**\\n     * @dev MUST UPDATE ALL POOL REWARD BEFORE MIGRATION!!!!!\\n     * @param _newPool new pool address to migrate\\n     */\\n    function migrate(address _newPool, uint256 _amount)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        require(stopped, 'BACPool: not stopped');\\n        IERC20(share).safeTransfer(_newPool, _amount);\\n\\n        uint256 remaining = startTime.add(period).sub(periodFinish);\\n        uint256 leftover = remaining.mul(rewardRate);\\n        IPoolGov(_newPool).setPeriod(block.timestamp.add(1), remaining);\\n        IPoolGov(_newPool).setReward(leftover);\\n    }\\n\\n    /* ================= MODIFIER ================= */\\n\\n    /**\\n     * @param _pid pool id\\n     * @param _target update target. if is empty, skip individual update.\\n     */\\n    modifier updateReward(uint256 _pid, address _target) {\\n        if (!approvals[store.tokenOf(_pid)]) {\\n            IERC20(store.tokenOf(_pid)).safeApprove(\\n                address(store),\\n                type(uint256).max\\n            );\\n            approvals[store.tokenOf(_pid)] = true;\\n        }\\n\\n        if (block.timestamp >= startTime) {\\n            if (!pools[_pid].initialized) {\\n                pools[_pid] = Pool({\\n                    initialized: true,\\n                    rewardRate: rewardRate,\\n                    lastUpdateTime: startTime,\\n                    rewardPerTokenStored: 0\\n                });\\n            }\\n\\n            // halve\\n            if (!stopped && block.timestamp >= periodFinish) {\\n                // decrease reward rate\\n                rewardRateBeforeHalve = rewardRate;\\n                rewardRate = rewardRate.mul(75).div(100);\\n\\n                // set period\\n                startTime = block.timestamp;\\n                periodFinish = block.timestamp.add(period);\\n            }\\n\\n            Pool memory pool = pools[_pid];\\n            pool.rewardPerTokenStored = rewardPerToken(_pid);\\n            if (pool.rewardRate == rewardRateBeforeHalve) {\\n                pool.rewardRate = rewardRate;\\n            }\\n            pool.lastUpdateTime = applicableRewardTime();\\n            pools[_pid] = pool;\\n\\n            if (_target != address(0x0)) {\\n                User memory user = users[_pid][_target];\\n                user.reward = rewardEarned(_pid, _target);\\n                user.rewardPerTokenPaid = pool.rewardPerTokenStored;\\n                users[_pid][_target] = user;\\n            }\\n        }\\n\\n        _;\\n    }\\n\\n    /* ================= CALLS - ANYONE ================= */\\n\\n    /**\\n     * @param _pid pool id\\n     * @return pool token address\\n     */\\n    function tokenOf(uint256 _pid) external view override returns (address) {\\n        return store.tokenOf(_pid);\\n    }\\n\\n    /**\\n     * @param _token pool token address\\n     * @return pool id\\n     */\\n    function poolIdsOf(address _token)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        return store.poolIdsOf(_token);\\n    }\\n\\n    /**\\n     * @param _pid pool id\\n     * @return pool's total staked amount\\n     */\\n    function totalSupply(uint256 _pid)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return store.totalSupply(_pid);\\n    }\\n\\n    /**\\n     * @param _owner staker address\\n     * @return staker balance\\n     */\\n    function balanceOf(uint256 _pid, address _owner)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return store.balanceOf(_pid, _owner);\\n    }\\n\\n    /**\\n     * @return applicable reward time\\n     */\\n    function applicableRewardTime() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    /**\\n     * @param _pid pool id\\n     * @param _crit reward rate\\n     */\\n    function _rewardRatePerPool(uint256 _pid, uint256 _crit)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _crit.mul(store.weightOf(_pid)).div(store.totalWeight());\\n    }\\n\\n    /**\\n     * @param _pid pool id\\n     * @return calculated reward rate per pool\\n     */\\n    function rewardRatePerPool(uint256 _pid)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _rewardRatePerPool(_pid, rewardRate.add(rewardRateExtra));\\n    }\\n\\n    /**\\n     * @param _pid pool id\\n     * @return RPT per pool\\n     */\\n    function rewardPerToken(uint256 _pid)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        Pool memory pool = pools[_pid];\\n        if (store.totalSupply(_pid) == 0 || block.timestamp < startTime) {\\n            return pool.rewardPerTokenStored;\\n        }\\n\\n        if (pool.rewardRate != 0 && pool.rewardRate == rewardRateBeforeHalve) {\\n            uint256 beforeHalve =\\n                startTime\\n                    .sub(pool.lastUpdateTime)\\n                    .mul(_rewardRatePerPool(_pid, rewardRateBeforeHalve))\\n                    .mul(1e18)\\n                    .div(store.totalSupply(_pid));\\n            uint256 afterHalve =\\n                applicableRewardTime()\\n                    .sub(startTime)\\n                    .mul(rewardRatePerPool(_pid))\\n                    .mul(1e18)\\n                    .div(store.totalSupply(_pid));\\n            return pool.rewardPerTokenStored.add(beforeHalve).add(afterHalve);\\n        } else {\\n            return\\n                pool.rewardPerTokenStored.add(\\n                    applicableRewardTime()\\n                        .sub(pool.lastUpdateTime)\\n                        .mul(rewardRatePerPool(_pid))\\n                        .mul(1e18)\\n                        .div(store.totalSupply(_pid))\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @param _pid pool id\\n     * @param _target target address\\n     * @return reward amount per pool\\n     */\\n    function rewardEarned(uint256 _pid, address _target)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        User memory user = users[_pid][_target];\\n        return\\n            store\\n                .balanceOf(_pid, _target)\\n                .mul(rewardPerToken(_pid).sub(user.rewardPerTokenPaid))\\n                .div(1e18)\\n                .add(user.reward);\\n    }\\n\\n    /* ================= TXNS - ANYONE ================= */\\n\\n    /**\\n     * @param _pids array of pool ids\\n     */\\n    function massUpdate(uint256[] memory _pids) public override {\\n        for (uint256 i = 0; i < _pids.length; i++) {\\n            update(_pids[i]);\\n        }\\n    }\\n\\n    /**\\n     * @param _pid pool id\\n     */\\n    function update(uint256 _pid)\\n        public\\n        override\\n        updateReward(_pid, address(0x0))\\n    {}\\n\\n    /**\\n     * @param _pid pool id\\n     * @param _amount deposit amount\\n     */\\n    function deposit(uint256 _pid, uint256 _amount)\\n        public\\n        override(IPool, PoolStoreWrapper)\\n        updateReward(_pid, _msgSender())\\n    {\\n        require(!stopped, 'BASPool: stopped');\\n        super.deposit(_pid, _amount);\\n        emit DepositToken(_msgSender(), _pid, _amount);\\n    }\\n\\n    /**\\n     * @param _pid pool id\\n     * @param _amount withdraw amount\\n     */\\n    function withdraw(uint256 _pid, uint256 _amount)\\n        public\\n        override(IPool, PoolStoreWrapper)\\n        updateReward(_pid, _msgSender())\\n    {\\n        require(!stopped, 'BASPool: stopped');\\n        super.withdraw(_pid, _amount);\\n        emit WithdrawToken(_msgSender(), _pid, _amount);\\n    }\\n\\n    /**\\n     * @param _pid pool id\\n     */\\n    function claimReward(uint256 _pid)\\n        public\\n        override\\n        updateReward(_pid, _msgSender())\\n    {\\n        uint256 reward = users[_pid][_msgSender()].reward;\\n        if (reward > 0) {\\n            users[_pid][_msgSender()].reward = 0;\\n            IERC20(share).safeTransfer(_msgSender(), reward);\\n            emit RewardClaimed(_msgSender(), _pid, reward);\\n        }\\n    }\\n\\n    /**\\n     * @dev withdraw + claim\\n     * @param _pid pool id\\n     */\\n    function exit(uint256 _pid) external override {\\n        withdraw(_pid, store.balanceOf(_pid, _msgSender()));\\n        claimReward(_pid);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access/Operator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.8.0;\\n\\nimport {Context, Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\n\\nabstract contract Operator is Context, Ownable {\\n    address private _operator;\\n\\n    event OperatorTransferred(\\n        address indexed previousOperator,\\n        address indexed newOperator\\n    );\\n\\n    constructor() {\\n        _operator = _msgSender();\\n        emit OperatorTransferred(address(0), _operator);\\n    }\\n\\n    function operator() public view returns (address) {\\n        return _operator;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(\\n            _operator == _msgSender(),\\n            'operator: caller is not the operator'\\n        );\\n        _;\\n    }\\n\\n    function isOperator() public view returns (bool) {\\n        return _msgSender() == _operator;\\n    }\\n\\n    function transferOperator(address newOperator_) public onlyOwner {\\n        _transferOperator(newOperator_);\\n    }\\n\\n    function _transferOperator(address newOperator_) internal {\\n        require(\\n            newOperator_ != address(0),\\n            'operator: zero address given for new operator'\\n        );\\n        emit OperatorTransferred(address(0), newOperator_);\\n        _operator = newOperator_;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/distribution/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.8.0;\\n\\ninterface IPool {\\n    /* ================= EVENTS ================= */\\n\\n    event DepositToken(\\n        address indexed owner,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    event WithdrawToken(\\n        address indexed owner,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    event RewardClaimed(\\n        address indexed owner,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n\\n    /* ================= CALLS ================= */\\n\\n    function tokenOf(uint256 _pid) external view returns (address);\\n\\n    function poolIdsOf(address _token) external view returns (uint256[] memory);\\n\\n    function totalSupply(uint256 _pid) external view returns (uint256);\\n\\n    function balanceOf(uint256 _pid, address _owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function rewardRatePerPool(uint256 _pid) external view returns (uint256);\\n\\n    function rewardPerToken(uint256 _pid) external view returns (uint256);\\n\\n    function rewardEarned(uint256 _pid, address _target)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /* ================= TXNS ================= */\\n\\n    function massUpdate(uint256[] memory _pids) external;\\n\\n    function update(uint256 _pid) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    function claimReward(uint256 _pid) external;\\n\\n    function exit(uint256 _pid) external;\\n}\\n\\ninterface IPoolGov {\\n    /* ================= EVENTS ================= */\\n\\n    event RewardNotified(\\n        address indexed operator,\\n        uint256 amount,\\n        uint256 period\\n    );\\n\\n    /* ================= TXNS ================= */\\n\\n    function setPeriod(uint256 _startTime, uint256 _period) external;\\n\\n    function setReward(uint256 _amount) external;\\n\\n    function setExtraRewardRate(uint256 _extra) external;\\n\\n    function stop() external;\\n\\n    function migrate(address _newPool, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/distribution/PoolStoreWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.8.0;\\n\\nimport {Context} from '@openzeppelin/contracts/utils/Context.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\n\\nimport {IPoolStore} from './PoolStore.sol';\\n\\nabstract contract PoolStoreWrapper is Context {\\n    using SafeERC20 for IERC20;\\n\\n    IPoolStore public store;\\n\\n    function deposit(uint256 _pid, uint256 _amount) public virtual {\\n        IERC20(store.tokenOf(_pid)).safeTransferFrom(\\n            _msgSender(),\\n            address(this),\\n            _amount\\n        );\\n        store.deposit(_pid, _msgSender(), _amount);\\n    }\\n\\n    function withdraw(uint256 _pid, uint256 _amount) public virtual {\\n        store.withdraw(_pid, _msgSender(), _amount);\\n        IERC20(store.tokenOf(_pid)).safeTransfer(_msgSender(), _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/distribution/PoolStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.8.0;\\n\\nimport {SafeMath} from '@openzeppelin/contracts/math/SafeMath.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\n\\nimport {Operator} from '../access/Operator.sol';\\n\\ninterface IPoolStore {\\n    /* ================= EVENTS ================= */\\n    event Deposit(\\n        address indexed operator,\\n        address indexed owner,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    event Withdraw(\\n        address indexed operator,\\n        address indexed owner,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n\\n    /* ================= CALLS ================= */\\n\\n    // common\\n    function totalWeight() external view returns (uint256);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    // index\\n    function poolIdsOf(address _token) external view returns (uint256[] memory);\\n\\n    // pool info\\n    function nameOf(uint256 _pid) external view returns (string memory);\\n\\n    function tokenOf(uint256 _pid) external view returns (address);\\n\\n    function weightOf(uint256 _pid) external view returns (uint256);\\n\\n    function totalSupply(uint256 _pid) external view returns (uint256);\\n\\n    function balanceOf(uint256 _pid, address _owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /* ================= TXNS ================= */\\n\\n    function deposit(\\n        uint256 _pid,\\n        address _owner,\\n        uint256 _amount\\n    ) external;\\n\\n    function withdraw(\\n        uint256 _pid,\\n        address _owner,\\n        uint256 _amount\\n    ) external;\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n}\\n\\ninterface IPoolStoreGov {\\n    /* ================= EVENTS ================= */\\n\\n    event EmergencyReported(address indexed reporter);\\n    event EmergencyResolved(address indexed resolver);\\n\\n    event WeightFeederChanged(\\n        address indexed operator,\\n        address indexed oldFeeder,\\n        address indexed newFeeder\\n    );\\n\\n    event PoolAdded(\\n        address indexed operator,\\n        uint256 indexed pid,\\n        string name,\\n        address token,\\n        uint256 weight\\n    );\\n    event PoolWeightChanged(\\n        address indexed operator,\\n        uint256 indexed pid,\\n        uint256 from,\\n        uint256 to\\n    );\\n    event PoolNameChanged(\\n        address indexed operator,\\n        uint256 indexed pid,\\n        string from,\\n        string to\\n    );\\n\\n    /* ================= TXNS ================= */\\n\\n    // emergency\\n    function reportEmergency() external;\\n\\n    function resolveEmergency() external;\\n\\n    // feeder\\n    function setWeightFeeder(address _newFeeder) external;\\n\\n    // pool setting\\n    function addPool(\\n        string memory _name,\\n        IERC20 _token,\\n        uint256 _weight\\n    ) external;\\n\\n    function setPool(uint256 _pid, uint256 _weight) external;\\n\\n    function setPool(uint256 _pid, string memory _name) external;\\n}\\n\\ncontract PoolStore is IPoolStore, IPoolStoreGov, Operator {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /* ================= DATA STRUCTURE ================= */\\n\\n    struct Pool {\\n        string name;\\n        IERC20 token;\\n        uint256 weight;\\n        uint256 totalSupply;\\n    }\\n\\n    /* ================= STATES ================= */\\n\\n    uint256 public override totalWeight = 0;\\n\\n    Pool[] public pools;\\n    mapping(uint256 => mapping(address => uint256)) balances;\\n    mapping(address => uint256[]) public indexByToken;\\n\\n    bool public emergency = false;\\n    address public weightFeeder;\\n\\n    constructor() Operator() {\\n        weightFeeder = _msgSender();\\n    }\\n\\n    /* ================= GOV - OWNER ONLY ================= */\\n\\n    /**\\n     * @dev CAUTION: DO NOT USE IN NORMAL SITUATION\\n     * @notice Enable emergency withdraw\\n     */\\n    function reportEmergency() public override onlyOwner {\\n        emergency = true;\\n        emit EmergencyReported(_msgSender());\\n    }\\n\\n    /**\\n     * @dev CAUTION: DO NOT USE IN NORMAL SITUATION\\n     * @notice Disable emergency withdraw\\n     */\\n    function resolveEmergency() public override onlyOwner {\\n        emergency = false;\\n        emit EmergencyResolved(_msgSender());\\n    }\\n\\n    /*\\n     * @param _newFeeder weight feeder address to change\\n     */\\n    function setWeightFeeder(address _newFeeder) public override onlyOwner {\\n        address oldFeeder = weightFeeder;\\n        weightFeeder = _newFeeder;\\n        emit WeightFeederChanged(_msgSender(), oldFeeder, _newFeeder);\\n    }\\n\\n    /**\\n     * @param _token pool token\\n     * @param _weight pool weight\\n     */\\n    function addPool(\\n        string memory _name,\\n        IERC20 _token,\\n        uint256 _weight\\n    ) public override onlyOwner {\\n        totalWeight = totalWeight.add(_weight);\\n\\n        uint256 index = pools.length;\\n        indexByToken[address(_token)].push(index);\\n\\n        pools.push(\\n            Pool({name: _name, token: _token, weight: _weight, totalSupply: 0})\\n        );\\n        emit PoolAdded(_msgSender(), index, _name, address(_token), _weight);\\n    }\\n\\n    /**\\n     * @param _pid pool id\\n     * @param _weight target pool weight\\n     */\\n    function setPool(uint256 _pid, uint256 _weight)\\n        public\\n        override\\n        onlyWeightFeeder\\n        checkPoolId(_pid)\\n    {\\n        Pool memory pool = pools[_pid];\\n\\n        uint256 oldWeight = pool.weight;\\n        totalWeight = totalWeight.add(_weight).sub(pool.weight);\\n        pool.weight = _weight;\\n\\n        pools[_pid] = pool;\\n\\n        emit PoolWeightChanged(_msgSender(), _pid, oldWeight, _weight);\\n    }\\n\\n    /**\\n     * @param _pid pool id\\n     * @param _name name of pool\\n     */\\n    function setPool(uint256 _pid, string memory _name)\\n        public\\n        override\\n        checkPoolId(_pid)\\n        onlyOwner\\n    {\\n        string memory oldName = pools[_pid].name;\\n        pools[_pid].name = _name;\\n\\n        emit PoolNameChanged(_msgSender(), _pid, oldName, _name);\\n    }\\n\\n    /* ================= MODIFIER ================= */\\n\\n    modifier onlyWeightFeeder {\\n        require(_msgSender() == weightFeeder, 'PoolStore: unauthorized');\\n\\n        _;\\n    }\\n\\n    modifier checkPoolId(uint256 _pid) {\\n        require(_pid <= pools.length, 'PoolStore: invalid pid');\\n\\n        _;\\n    }\\n\\n    /* ================= CALLS - ANYONE ================= */\\n    /**\\n     * @return total pool length\\n     */\\n    function poolLength() public view override returns (uint256) {\\n        return pools.length;\\n    }\\n\\n    /**\\n     * @param _token pool token address\\n     * @return pool id\\n     */\\n    function poolIdsOf(address _token)\\n        public\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        return indexByToken[_token];\\n    }\\n\\n    /**\\n     * @param _pid pool id\\n     * @return name of pool\\n     */\\n    function nameOf(uint256 _pid)\\n        public\\n        view\\n        override\\n        checkPoolId(_pid)\\n        returns (string memory)\\n    {\\n        return pools[_pid].name;\\n    }\\n\\n    /**\\n     * @param _pid pool id\\n     * @return pool token\\n     */\\n    function tokenOf(uint256 _pid)\\n        public\\n        view\\n        override\\n        checkPoolId(_pid)\\n        returns (address)\\n    {\\n        return address(pools[_pid].token);\\n    }\\n\\n    /**\\n     * @param _pid pool id\\n     * @return pool weight\\n     */\\n    function weightOf(uint256 _pid)\\n        public\\n        view\\n        override\\n        checkPoolId(_pid)\\n        returns (uint256)\\n    {\\n        return pools[_pid].weight;\\n    }\\n\\n    /**\\n     * @param _pid pool id\\n     * @return total staked token amount\\n     */\\n    function totalSupply(uint256 _pid)\\n        public\\n        view\\n        override\\n        checkPoolId(_pid)\\n        returns (uint256)\\n    {\\n        return pools[_pid].totalSupply;\\n    }\\n\\n    /**\\n     * @param _pid pool id\\n     * @param _sender staker address\\n     * @return staked amount of user\\n     */\\n    function balanceOf(uint256 _pid, address _sender)\\n        public\\n        view\\n        override\\n        checkPoolId(_pid)\\n        returns (uint256)\\n    {\\n        return balances[_pid][_sender];\\n    }\\n\\n    /* ================= TXNS - OPERATOR ONLY ================= */\\n\\n    /**\\n     * @param _pid pool id\\n     * @param _owner stake address\\n     * @param _amount stake amount\\n     */\\n    function deposit(\\n        uint256 _pid,\\n        address _owner,\\n        uint256 _amount\\n    ) public override checkPoolId(_pid) onlyOperator {\\n        pools[_pid].totalSupply = pools[_pid].totalSupply.add(_amount);\\n        balances[_pid][_owner] = balances[_pid][_owner].add(_amount);\\n        IERC20(tokenOf(_pid)).safeTransferFrom(\\n            _msgSender(),\\n            address(this),\\n            _amount\\n        );\\n\\n        emit Deposit(_msgSender(), _owner, _pid, _amount);\\n    }\\n\\n    function _withdraw(\\n        uint256 _pid,\\n        address _owner,\\n        uint256 _amount\\n    ) internal {\\n        pools[_pid].totalSupply = pools[_pid].totalSupply.sub(_amount);\\n        balances[_pid][_owner] = balances[_pid][_owner].sub(_amount);\\n        IERC20(tokenOf(_pid)).safeTransfer(_msgSender(), _amount);\\n\\n        emit Withdraw(_msgSender(), _owner, _pid, _amount);\\n    }\\n\\n    /**\\n     * @param _pid pool id\\n     * @param _owner stake address\\n     * @param _amount stake amount\\n     */\\n    function withdraw(\\n        uint256 _pid,\\n        address _owner,\\n        uint256 _amount\\n    ) public override checkPoolId(_pid) onlyOperator {\\n        _withdraw(_pid, _owner, _amount);\\n    }\\n\\n    /**\\n     * @notice Anyone can withdraw its balance even if is not the operator\\n     * @param _pid pool id\\n     */\\n    function emergencyWithdraw(uint256 _pid) public override checkPoolId(_pid) {\\n        require(emergency, 'PoolStore: not in emergency');\\n        _withdraw(_pid, msg.sender, balanceOf(_pid, _msgSender()));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_share\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolStore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"RewardNotified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"applicableRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"massUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"poolIdsOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"rewardEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRateBeforeHalve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRateExtra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"rewardRatePerPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_extra\",\"type\":\"uint256\"}],\"name\":\"setExtraRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"share\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"store\",\"outputs\":[{\"internalType\":\"contract IPoolStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"tokenOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator_\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenPaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Distribution","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000106538cc16f938776c7c180186975bca238752870000000000000000000000004bd3a0f66758f2f4ebe575f9dfd7874e80689f10","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}