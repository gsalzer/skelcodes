{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/treasury/priceOracle/KyberDmmChainLinkPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport {ILiquidationPriceOracleBase} from '../../interfaces/liquidation/ILiquidationPriceOracleBase.sol';\\nimport {IChainLinkAggregatorProxy} from '../../interfaces/liquidation/thirdParty/IChainLinkAggregatorProxy.sol';\\nimport {IDMMPool} from '../../interfaces/liquidation/thirdParty/IDMMPool.sol';\\nimport {PermissionAdmin, PermissionOperators} from '@kyber.network/utils-sc/contracts/PermissionOperators.sol';\\nimport {Utils} from '@kyber.network/utils-sc/contracts/Utils.sol';\\nimport {IERC20Ext} from '@kyber.network/utils-sc/contracts/IERC20Ext.sol';\\nimport {SafeMath} from '@openzeppelin/contracts/math/SafeMath.sol';\\nimport {EnumerableSet} from '@openzeppelin/contracts/utils/EnumerableSet.sol';\\n\\n\\n/**\\n* @dev Contract to calculate expected return amounts for a liquidation call\\n*   Also work with Kyber Dmm LP tokens\\n*   Can use hint to:\\n*     2. Calculate price of a LP token to a dest token\\n*     3. Calculate price of a normal token to a dest token\\n*   It may not work for LPs of token with fees\\n*/\\ncontract KyberDmmChainLinkPriceOracle is ILiquidationPriceOracleBase, PermissionOperators, Utils {\\n  using SafeMath for uint256;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  // LIQUIDATE_LP: liquidate list of LP tokens to a single token\\n  // LIQUIDATE_TOKEN: liquidate list of tokens to a single token\\n  enum LiquidationType { LIQUIDATE_LP, LIQUIDATE_TOKEN }\\n\\n  uint64 constant public MAX_PREMIUM_BPS = 2000; // 20%\\n  // min duration to consider the chainlink rate as a valid data\\n  uint64 constant public MIN_DURATION_VALID_CHAINLINK_RATE = 30 minutes;\\n\\n  address public immutable weth;\\n\\n  struct AggregatorProxyData {\\n    address quoteEthProxy;\\n    uint8 quoteEthProxyDecimals;\\n    address quoteUsdProxy;\\n    uint8 quoteUsdProxyDecimals;\\n  }\\n  mapping (address => AggregatorProxyData) internal _tokenData;\\n\\n  struct Config {\\n    uint64 liquidateLpBps;            // default liquidate lp bps\\n    uint64 liquidateTokenBps;         // default liquidate token bps\\n    uint64 minValidDurationInSeconds; // min valid duration in seconds for chainlink\\n    uint64 lpDiffThreshold;           // different threshold for price of 2 tokens in the LP \\n  }\\n  Config internal _config;\\n\\n  struct PremiumData {\\n    uint64 liquidateLpBps;\\n    uint64 liquidateTokenBps;\\n  }\\n  mapping (address => PremiumData) internal _groupPremiumData;\\n\\n  // list of tokens that can be liquidate to\\n  EnumerableSet.AddressSet private _whitelistedTokens;\\n\\n  event DefaultPremiumDataSet(\\n    uint64 liquidateLpBps,\\n    uint64 liquidateTokenBps\\n  );\\n  event UpdateGroupPremiumData(\\n    address indexed liquidator,\\n    uint64 liquidateLpBps,\\n    uint64 liquidateTokenBps\\n  );\\n  event UpdateAggregatorProxyData(\\n    address indexed token,\\n    address indexed quoteEthProxy,\\n    address indexed quoteUsdProxy\\n  );\\n  event WhitelistedTokenUpdated(address indexed token, bool indexed isAdd);\\n  event UpdatedMinValidDurationInSeconds(uint64 duration);\\n  event UpdatedLpDiffThreshold(uint64 threshold);\\n\\n  constructor(\\n    address admin,\\n    address wethAddress,\\n    address[] memory whitelistedTokens,\\n    uint64 chainlinkValidDuration,\\n    uint64 lpDiffThreshold\\n  ) PermissionAdmin(admin) {\\n    weth = wethAddress;\\n    _updateWhitelistedToken(whitelistedTokens, true);\\n    _setMinValidDuration(chainlinkValidDuration);\\n    _setLpDiffThreshold(lpDiffThreshold);\\n  }\\n\\n  /**\\n  * @dev Update list of aggregator proxies for tokens\\n  *   Need to check the data carefully, Aggregator contract doesn't have function to\\n  *     get the supported token or base, so can not do any safe check here\\n  *   For flexibility, it should be done by trusted operators\\n  */\\n  function updateAggregatorProxyData(\\n    address[] calldata tokens,\\n    address[] calldata quoteEthProxies,\\n    address[] calldata quoteUsdProxies\\n  ) external onlyOperator {\\n\\n    require(\\n      tokens.length == quoteEthProxies.length &&\\n      tokens.length == quoteUsdProxies.length,\\n      'invalid length'\\n    );\\n\\n    uint8 quoteEthProxyDecimals;\\n    uint8 quoteUsdProxyDecimals;\\n\\n    for(uint256 i = 0; i < tokens.length; i++) {\\n      quoteEthProxyDecimals = quoteEthProxies[i] == address(0) ? 0 :\\n        IChainLinkAggregatorProxy(quoteEthProxies[i]).decimals();\\n      quoteUsdProxyDecimals = quoteUsdProxies[i] == address(0) ? 0 :\\n        IChainLinkAggregatorProxy(quoteUsdProxies[i]).decimals();\\n\\n      _tokenData[tokens[i]] = AggregatorProxyData({\\n        quoteEthProxy: quoteEthProxies[i],\\n        quoteUsdProxy: quoteUsdProxies[i],\\n        quoteEthProxyDecimals: quoteEthProxyDecimals,\\n        quoteUsdProxyDecimals: quoteUsdProxyDecimals\\n      });\\n      emit UpdateAggregatorProxyData(tokens[i], quoteEthProxies[i], quoteUsdProxies[i]);\\n    }\\n  }\\n\\n  function updateMinValidDuration(uint64 newDuration)\\n    external onlyOperator\\n  {\\n    _setMinValidDuration(newDuration);\\n  }\\n\\n  function updateLpDiffThreshold(uint64 threshold)\\n    external onlyOperator\\n  {\\n    _setLpDiffThreshold(threshold);\\n  }\\n\\n  function updateGroupPremiumData(\\n    address[] calldata _liquidators,\\n    uint64[] calldata _liquidateLpBps,\\n    uint64[] calldata _liquidateTokenBps\\n  )\\n    external onlyAdmin\\n  {\\n    require(\\n      _liquidators.length == _liquidateLpBps.length &&\\n      _liquidators.length == _liquidateTokenBps.length,\\n      'invalid length'\\n    );\\n    for(uint256 i = 0; i < _liquidators.length; i++) {\\n      _setGroupPremiumData(\\n        _liquidators[i],\\n        _liquidateLpBps[i],\\n        _liquidateTokenBps[i]\\n      );\\n    }\\n  }\\n\\n  function updateDefaultPremiumData(\\n    uint64 _liquidateLpBps,\\n    uint64 _liquidateTokenBps\\n  ) external onlyAdmin {\\n    _setDefaultPremiumData(_liquidateLpBps, _liquidateTokenBps);\\n  }\\n\\n  function updateWhitelistedTokens(address[] calldata tokens, bool isAdd)\\n    external onlyAdmin\\n  {\\n    _updateWhitelistedToken(tokens, isAdd);\\n  }\\n\\n  /**\\n   * @dev Return list of min amounts that expected to get in return\\n   *  when liquidating corresponding list of src tokens\\n   *  2 LiquidationType for hint: LIQUIDATE_TOKEN, LIQUIDATE_LP\\n   *  - LIQUIDATE_TOKEN: Liquidate a normal token to the tokenOut (the token should have chainlink data)\\n   *  - LIQUIDATE_LP: Liquidate a LP token to the tokenOut (underlying tokens should have chainlink data)\\n   *  Apply premium discount, can be a different value for each liquidator.\\n   * @param liquidator address of the liquidator\\n   * @param tokenIns list of src tokens\\n   * @param amountIns list of src amounts\\n   * @param tokenOut dest token\\n   * @param hint hint for getting conversion rates, list of LiquidationType,\\n   *     corresponding to the list source token\\n   * @return minAmountOut min expected amount for the token out\\n   */\\n  function getExpectedReturn(\\n    address liquidator,\\n    IERC20Ext[] calldata tokenIns,\\n    uint256[] calldata amountIns,\\n    IERC20Ext tokenOut,\\n    bytes calldata hint\\n  )\\n    external override view\\n    returns (uint256 minAmountOut)\\n  {\\n    require(tokenIns.length == amountIns.length, 'invalid lengths');\\n\\n    (LiquidationType[] memory hintTypes) = abi.decode(hint, (LiquidationType[]));\\n    require(hintTypes.length == tokenIns.length, 'invalid lengths');\\n\\n    require(isWhitelistedToken(address(tokenOut)), 'token out must be whitelisted');\\n\\n    // get rate data of token out in advance to reduce gas cost\\n    uint256 tokenOutRateEth = getRateOverEth(address(tokenOut));\\n    uint256 tokenOutRateUsd = getRateOverUsd(address(tokenOut));\\n\\n    // total amount out from LP tokens\\n    uint256 amountOutLpTokens;\\n    // total amount out from normal tokens\\n    uint256 amountOutNormalTokens;\\n\\n    for(uint256 i = 0; i < tokenIns.length; i++) {\\n      if (hintTypes[i] == LiquidationType.LIQUIDATE_TOKEN) {\\n        if (tokenIns[i] == tokenOut) {\\n          // allow to forward a whitelist token from treasury -> reward without premium\\n          minAmountOut = minAmountOut.add(amountIns[i]);\\n          continue;\\n        } else {\\n          // not allow to liquidate from a whitelisted token to another whitelisted token\\n          require(\\n            !isWhitelistedToken(address(tokenIns[i])),\\n            'token in can not be a whitelisted token'\\n          );\\n        }\\n      }\\n      uint256 expectedReturn = _getExpectedReturnFromToken(\\n        tokenIns[i],\\n        amountIns[i],\\n        tokenOut,\\n        tokenOutRateEth,\\n        tokenOutRateUsd,\\n        hintTypes[i] == LiquidationType.LIQUIDATE_LP\\n      );\\n      if (hintTypes[i] == LiquidationType.LIQUIDATE_LP) {\\n        amountOutLpTokens = amountOutLpTokens.add(expectedReturn);\\n      } else {\\n        amountOutNormalTokens = amountOutNormalTokens.add(expectedReturn);\\n      }\\n    }\\n\\n    (amountOutLpTokens, amountOutNormalTokens) =\\n      _applyPremiumFor(liquidator, amountOutLpTokens, amountOutNormalTokens);\\n\\n    minAmountOut = minAmountOut.add(amountOutLpTokens).add(amountOutNormalTokens);\\n  }\\n\\n  // Whitelisted tokens\\n  function getWhitelistedTokensLength() external view returns (uint256) {\\n    return _whitelistedTokens.length();\\n  }\\n\\n  function getWhitelistedTokenAt(uint256 index) external view returns (address) {\\n    return _whitelistedTokens.at(index);\\n  }\\n\\n  function getAllWhitelistedTokens()\\n    external view returns (address[] memory tokens)\\n  {\\n    uint256 length = _whitelistedTokens.length();\\n    tokens = new address[](length);\\n    for(uint256 i = 0; i < length; i++) {\\n      tokens[i] = _whitelistedTokens.at(i);\\n    }\\n  }\\n\\n  /**\\n   * @dev Return expect amounts given pool and number of lp tokens\\n   * @return tokens [token0, token1]\\n   * @return amounts [expectedAmount0, expectedAmount1s, virtualBalance0, virtualBalance1]\\n   */\\n  function getExpectedTokensFromLp(\\n    address pool,\\n    uint256 lpAmount\\n  )\\n    public view\\n    returns (\\n      IERC20Ext[2] memory tokens,\\n      uint256[4] memory amounts\\n    )\\n  {\\n    uint256 totalSupply = IERC20Ext(pool).totalSupply();\\n    (tokens[0], tokens[1]) = (IDMMPool(pool).token0(), IDMMPool(pool).token1());\\n    uint256 amount0;\\n    uint256 amount1;\\n    (\\n      amount0,\\n      amount1,\\n      amounts[2], // virtual balance 0\\n      amounts[3], // virtual balance 1\\n      // fee in precision\\n    ) = IDMMPool(pool).getTradeInfo();\\n\\n    (amounts[0], amounts[1]) = (\\n      amount0.mul(lpAmount) / totalSupply,\\n      amount1.mul(lpAmount) / totalSupply\\n    );\\n  }\\n\\n  function getTokenAggregatorProxyData(address token)\\n    external view returns (\\n      address quoteEthProxy,\\n      address quoteUsdProxy,\\n      uint8 quoteEthDecimals,\\n      uint8 quoteUsdDecimals\\n    )\\n  {\\n    (quoteEthProxy, quoteUsdProxy) = (_tokenData[token].quoteEthProxy, _tokenData[token].quoteUsdProxy);\\n    (quoteEthDecimals, quoteUsdDecimals) = (\\n      _tokenData[token].quoteEthProxyDecimals,\\n      _tokenData[token].quoteUsdProxyDecimals\\n    );\\n  }\\n\\n  function getConfig()\\n    external view\\n    returns (\\n      uint64 liquidateLpBps,\\n      uint64 liquidateTokenBps,\\n      uint64 minValidDurationInSeconds,\\n      uint64 lpDiffThreshold\\n    )\\n  {\\n    (\\n      liquidateLpBps,\\n      liquidateTokenBps,\\n      minValidDurationInSeconds,\\n      lpDiffThreshold\\n    ) = (\\n        _config.liquidateLpBps,\\n        _config.liquidateTokenBps,\\n        _config.minValidDurationInSeconds,\\n        _config.lpDiffThreshold\\n      );\\n  }\\n\\n  /**\\n  *   @dev Get token rate over eth with units of PRECISION\\n  */\\n  function getRateOverEth(address token) public view returns (uint256 rate) {\\n    if (token == address(ETH_TOKEN_ADDRESS) || token == weth) return PRECISION;\\n    int256 answer;\\n    uint256 updatedAt;\\n    IChainLinkAggregatorProxy proxy = IChainLinkAggregatorProxy(_tokenData[token].quoteEthProxy);\\n    if (proxy != IChainLinkAggregatorProxy(0)) {\\n      (, answer, , updatedAt,) = proxy.latestRoundData();\\n    }\\n    if (answer <= 0) return 0; // safe check in case ChainLink returns invalid data\\n    if (updatedAt.add(_config.minValidDurationInSeconds) < block.timestamp) return 0;\\n    rate = uint256(answer);\\n    uint256 decimals = uint256(_tokenData[token].quoteEthProxyDecimals);\\n    rate = (decimals < MAX_DECIMALS) ? rate.mul(10 ** (MAX_DECIMALS - decimals)) :\\n      rate / (10 ** (decimals - MAX_DECIMALS));\\n  }\\n\\n  /**\\n  *   @dev Get token rate over usd with units of PRECISION\\n  */\\n  function getRateOverUsd(address token) public view returns (uint256 rate) {\\n    int256 answer;\\n    uint256 updatedAt;\\n    IChainLinkAggregatorProxy proxy = IChainLinkAggregatorProxy(_tokenData[token].quoteUsdProxy);\\n    if (proxy != IChainLinkAggregatorProxy(0)) {\\n      (, answer, , updatedAt,) = proxy.latestRoundData();\\n    }\\n    if (answer <= 0) return 0; // safe check in case ChainLink returns invalid data\\n    if (updatedAt.add(_config.minValidDurationInSeconds) < block.timestamp) return 0;\\n    rate = uint256(answer);\\n    uint256 decimals = uint256(_tokenData[token].quoteUsdProxyDecimals);\\n    rate = (decimals < MAX_DECIMALS) ? rate.mul(10 ** (MAX_DECIMALS - decimals)) :\\n      rate / (10 ** (decimals - MAX_DECIMALS));\\n  }\\n\\n  function isWhitelistedToken(address token)\\n    public view returns (bool)\\n  {\\n    return _whitelistedTokens.contains(token);\\n  }\\n\\n  function getPremiumData(address liquidator)\\n    public view\\n    returns (\\n      uint64 liquidateLpBps,\\n      uint64 liquidateTokenBps\\n    )\\n  {\\n    PremiumData memory data = _groupPremiumData[liquidator];\\n    if (data.liquidateLpBps == 0 && data.liquidateTokenBps == 0) {\\n      liquidateLpBps = _config.liquidateLpBps;\\n      liquidateTokenBps = _config.liquidateTokenBps;\\n    } else {\\n      liquidateLpBps = data.liquidateLpBps;\\n      liquidateTokenBps = data.liquidateTokenBps;\\n    }\\n  }\\n\\n  function _updateWhitelistedToken(address[] memory _tokens, bool _isAdd) internal {\\n    for(uint256 i = 0; i < _tokens.length; i++) {\\n      if (_isAdd) {\\n        _whitelistedTokens.add(_tokens[i]);\\n      } else {\\n        _whitelistedTokens.remove(_tokens[i]);\\n      }\\n      emit WhitelistedTokenUpdated(_tokens[i], _isAdd);\\n    }\\n  }\\n\\n  function _setDefaultPremiumData(\\n    uint64 _liquidateLpBps,\\n    uint64 _liquidateTokenBps\\n  ) internal {\\n    require(_liquidateLpBps <= MAX_PREMIUM_BPS, 'invalid liquidate lp bps');\\n    require(_liquidateTokenBps <= MAX_PREMIUM_BPS, 'invalid liquidate token bps');\\n    _config.liquidateLpBps = _liquidateLpBps;\\n    _config.liquidateTokenBps = _liquidateTokenBps;\\n    emit DefaultPremiumDataSet(_liquidateLpBps, _liquidateTokenBps);\\n  }\\n\\n  function _setGroupPremiumData(\\n    address _liquidator,\\n    uint64 _liquidateLpBps,\\n    uint64 _liquidateTokenBps\\n  ) internal {\\n    require(_liquidateLpBps <= MAX_PREMIUM_BPS, 'invalid liquidate lp bps');\\n    require(_liquidateTokenBps <= MAX_PREMIUM_BPS, 'invalid liquidate token bps');\\n    _groupPremiumData[_liquidator].liquidateLpBps = _liquidateLpBps;\\n    _groupPremiumData[_liquidator].liquidateTokenBps = _liquidateTokenBps;\\n    emit UpdateGroupPremiumData(_liquidator, _liquidateLpBps, _liquidateTokenBps);\\n  }\\n\\n  function _setMinValidDuration(uint64 _duration) internal {\\n    require(_duration >= MIN_DURATION_VALID_CHAINLINK_RATE, 'duration is too low');\\n    _config.minValidDurationInSeconds = _duration;\\n    emit UpdatedMinValidDurationInSeconds(_duration);\\n  }\\n\\n  function _setLpDiffThreshold(uint64 _threshold) internal {\\n    require(_threshold <= MAX_PREMIUM_BPS, 'threshold is too high');\\n    _config.lpDiffThreshold = _threshold;\\n    emit UpdatedLpDiffThreshold(_threshold);\\n  }\\n\\n  function _applyPremiumFor(address liquidator, uint256 amountFromLPs, uint256 amountFromTokens)\\n    internal view\\n    returns (uint256 amountFromLPsAfter, uint256 amountFromTokensAfter)\\n  {\\n    (uint64 premiumLpBps, uint64 premiumTokenBps) = getPremiumData(liquidator);\\n    if (amountFromLPs > 0) {\\n      amountFromLPsAfter = amountFromLPs.sub(\\n        amountFromLPs.mul(premiumLpBps) / BPS\\n      );\\n    }\\n    if (amountFromTokens > 0) {\\n      amountFromTokensAfter = amountFromTokens.sub(\\n        amountFromTokens.mul(premiumTokenBps) / BPS\\n      );\\n    }\\n  }\\n\\n  /**\\n  *   @dev Get expected return amount from src token given dest token data\\n  *   Save gas when liquidating multiple tokens or LP tokens\\n  */\\n  function _getExpectedReturnFromToken(\\n    IERC20Ext tokenIn,\\n    uint256 amountIn,\\n    IERC20Ext dest,\\n    uint256 destRateEth,\\n    uint256 destRateUsd,\\n    bool isFromLpToken\\n  )\\n    internal view\\n    returns (uint256 totalReturn)\\n  {\\n    bool isDestEth = dest == ETH_TOKEN_ADDRESS || dest == IERC20Ext(weth);\\n    uint256 rate;\\n\\n    if (!isFromLpToken) {\\n      rate = isDestEth ? getRateOverEth(address(tokenIn)) :\\n        _getRateWithDestTokenData(address(tokenIn), destRateEth, destRateUsd);\\n      require(rate > 0, '0 aggregator rate');\\n      return _calculateReturnAmount(amountIn, getDecimals(tokenIn), getDecimals(dest), rate);\\n    }\\n\\n    (IERC20Ext[2] memory tokens, uint256[4] memory amounts) = getExpectedTokensFromLp(\\n      address(tokenIn), amountIn\\n    );\\n\\n    uint256 destTokenDecimals = getDecimals(dest);\\n    uint256 totalDestInToken0;\\n    uint256 totalDestInToken1;\\n\\n    // calc equivalent (tokens[0], amounts[0]) -> tokenOut\\n    if (tokens[0] == dest) {\\n      totalReturn = totalReturn.add(amounts[0]);\\n      totalDestInToken0 = amounts[2];\\n    } else {\\n      rate = isDestEth ? getRateOverEth(address(tokens[0])) :\\n        _getRateWithDestTokenData(address(tokens[0]), destRateEth, destRateUsd);\\n      require(rate > 0, '0 aggregator rate');\\n      uint256 _decimals = getDecimals(tokens[0]);\\n      totalReturn = totalReturn.add(\\n        _calculateReturnAmount(amounts[0], _decimals, destTokenDecimals, rate)\\n      );\\n      totalDestInToken0 = _calculateReturnAmount(amounts[2], _decimals, destTokenDecimals, rate);\\n    }\\n\\n    // calc equivalent (tokens[1], amounts[1]) -> tokenOut\\n    if (tokens[1] == dest) {\\n      totalReturn = totalReturn.add(amounts[1]);\\n      totalDestInToken1 = amounts[3];\\n    } else {\\n      rate = isDestEth ? getRateOverEth(address(tokens[1])) :\\n        _getRateWithDestTokenData(address(tokens[1]), destRateEth, destRateUsd);\\n        require(rate > 0, '0 aggregator rate');\\n        uint256 _decimals = getDecimals(tokens[1]);\\n      totalReturn = totalReturn.add(\\n        _calculateReturnAmount(amounts[1], _decimals, destTokenDecimals, rate)\\n      );\\n      totalDestInToken1 = _calculateReturnAmount(amounts[3], _decimals, destTokenDecimals, rate);\\n    }\\n    // verify if equivalent dest tokens from virtual balances is within the threshold\\n    // note: if the pool is out of support price range, most likely this check will fail\\n    if (totalDestInToken0 < totalDestInToken1) {\\n      require(\\n        totalDestInToken0.mul(BPS + _config.lpDiffThreshold) >= totalDestInToken1.mul(BPS),\\n        'lpDiffThreshold: out of range'\\n      );\\n    } else {\\n      require(\\n        totalDestInToken1.mul(BPS + _config.lpDiffThreshold) >= totalDestInToken0.mul(BPS),\\n        'lpDiffThreshold: out of range'\\n      );\\n    }\\n  }\\n\\n  /**\\n  *   @dev Get rate from src token given dest token rates over eth and usd\\n  *   It is used to save gas when liquidating multiple tokens or LP tokens\\n  */\\n  function _getRateWithDestTokenData(\\n    address src,\\n    uint256 destTokenRateEth,\\n    uint256 destTokenRateUsd\\n  ) internal view returns (uint256) {\\n    if (src == address(ETH_TOKEN_ADDRESS) || src == weth) {\\n      if (destTokenRateEth == 0) return 0;\\n      return PRECISION.mul(PRECISION) / destTokenRateEth;\\n    }\\n\\n    uint256 rateQuoteEth;\\n    uint256 rateQuoteUsd;\\n\\n    if (destTokenRateEth > 0) {\\n      uint256 srcTokenRateEth = getRateOverEth(src);\\n      rateQuoteEth = PRECISION.mul(srcTokenRateEth) / destTokenRateEth;\\n    }\\n\\n    if (destTokenRateUsd > 0) {\\n      uint256 srcTokenRateUsd = getRateOverUsd(src);\\n      rateQuoteUsd = PRECISION.mul(srcTokenRateUsd) / destTokenRateUsd;\\n    }\\n\\n    if (rateQuoteEth == 0) return rateQuoteUsd;\\n    if (rateQuoteUsd == 0) return rateQuoteEth;\\n    return rateQuoteEth.add(rateQuoteUsd) / 2;\\n  }\\n\\n  function _calculateReturnAmount(\\n    uint256 srcQty,\\n    uint256 srcDecimals,\\n    uint256 dstDecimals,\\n    uint256 rate\\n  ) internal pure returns (uint256) {\\n    if (dstDecimals >= srcDecimals) {\\n      require(dstDecimals - srcDecimals <= MAX_DECIMALS, 'dst - src > MAX_DECIMALS');\\n      return srcQty.mul(rate).mul(10**(dstDecimals - srcDecimals)) / PRECISION;\\n    }\\n    require(srcDecimals - dstDecimals <= MAX_DECIMALS, 'src - dst > MAX_DECIMALS');\\n    return srcQty.mul(rate) / (PRECISION.mul(10**(srcDecimals - dstDecimals)));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/liquidation/ILiquidationPriceOracleBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n\\nimport {IERC20Ext} from '@kyber.network/utils-sc/contracts/IERC20Ext.sol';\\n\\n/**\\n* Use different logics to compute price oracle\\n* If token is not supported, it should return 0 as conversion rate\\n*/\\ninterface ILiquidationPriceOracleBase {\\n\\n  /**\\n   * @dev Return list of min amounts that expected to get in return\\n   *  when liquidating corresponding list of src tokens\\n   * @param liquidator address of the liquidator\\n   * @param tokenIns list of src tokens\\n   * @param amountIns list of src amounts\\n   * @param tokenOut dest token\\n   * @param hint hint for getting conversion rates\\n   * @return minAmountOut min expected amount for the token out\\n   */\\n  function getExpectedReturn(\\n    address liquidator,\\n    IERC20Ext[] calldata tokenIns,\\n    uint256[] calldata amountIns,\\n    IERC20Ext tokenOut,\\n    bytes calldata hint\\n  ) external view returns (uint256 minAmountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/liquidation/thirdParty/IChainLinkAggregatorProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n\\n// solhint-disable-next-line max-line-length\\n// Refer to https://github.com/smartcontractkit/chainlink/blob/develop/evm-contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\ninterface IChainLinkAggregatorProxy {\\n  function decimals() external view returns (uint8);\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer, // rate in decimals of the token\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/liquidation/thirdParty/IDMMPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport {IERC20Ext} from '@kyber.network/utils-sc/contracts/IERC20Ext.sol';\\n\\n\\ninterface IDMMPool {\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1);\\n  function getTradeInfo()\\n    external view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint112 _vReserve0,\\n      uint112 _vReserve1,\\n      uint256 feeInPrecision\\n  );\\n\\n  function token0() external view returns (IERC20Ext);\\n\\n  function token1() external view returns (IERC20Ext);\\n}\\n\"\r\n    },\r\n    \"@kyber.network/utils-sc/contracts/PermissionOperators.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./PermissionAdmin.sol\\\";\\n\\n\\nabstract contract PermissionOperators is PermissionAdmin {\\n    uint256 private constant MAX_GROUP_SIZE = 50;\\n\\n    mapping(address => bool) internal operators;\\n    address[] internal operatorsGroup;\\n\\n    event OperatorAdded(address newOperator, bool isAdd);\\n\\n    modifier onlyOperator() {\\n        require(operators[msg.sender], \\\"only operator\\\");\\n        _;\\n    }\\n\\n    function getOperators() external view returns (address[] memory) {\\n        return operatorsGroup;\\n    }\\n\\n    function addOperator(address newOperator) public onlyAdmin {\\n        require(!operators[newOperator], \\\"operator exists\\\"); // prevent duplicates.\\n        require(operatorsGroup.length < MAX_GROUP_SIZE, \\\"max operators\\\");\\n\\n        emit OperatorAdded(newOperator, true);\\n        operators[newOperator] = true;\\n        operatorsGroup.push(newOperator);\\n    }\\n\\n    function removeOperator(address operator) public onlyAdmin {\\n        require(operators[operator], \\\"not operator\\\");\\n        operators[operator] = false;\\n\\n        for (uint256 i = 0; i < operatorsGroup.length; ++i) {\\n            if (operatorsGroup[i] == operator) {\\n                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\\n                operatorsGroup.pop();\\n                emit OperatorAdded(operator, false);\\n                break;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@kyber.network/utils-sc/contracts/Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./IERC20Ext.sol\\\";\\n\\n\\n/**\\n * @title Kyber utility file\\n * mostly shared constants and rate calculation helpers\\n * inherited by most of kyber contracts.\\n * previous utils implementations are for previous solidity versions.\\n */\\nabstract contract Utils {\\n    // Declared constants below to be used in tandem with\\n    // getDecimalsConstant(), for gas optimization purposes\\n    // which return decimals from a constant list of popular\\n    // tokens.\\n    IERC20Ext internal constant ETH_TOKEN_ADDRESS = IERC20Ext(\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\\n    );\\n    IERC20Ext internal constant USDT_TOKEN_ADDRESS = IERC20Ext(\\n        0xdAC17F958D2ee523a2206206994597C13D831ec7\\n    );\\n    IERC20Ext internal constant DAI_TOKEN_ADDRESS = IERC20Ext(\\n        0x6B175474E89094C44Da98b954EedeAC495271d0F\\n    );\\n    IERC20Ext internal constant USDC_TOKEN_ADDRESS = IERC20Ext(\\n        0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\\n    );\\n    IERC20Ext internal constant WBTC_TOKEN_ADDRESS = IERC20Ext(\\n        0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\\n    );\\n    IERC20Ext internal constant KNC_TOKEN_ADDRESS = IERC20Ext(\\n        0xdd974D5C2e2928deA5F71b9825b8b646686BD200\\n    );\\n    uint256 public constant BPS = 10000; // Basic Price Steps. 1 step = 0.01%\\n    uint256 internal constant PRECISION = (10**18);\\n    uint256 internal constant MAX_QTY = (10**28); // 10B tokens\\n    uint256 internal constant MAX_RATE = (PRECISION * 10**7); // up to 10M tokens per eth\\n    uint256 internal constant MAX_DECIMALS = 18;\\n    uint256 internal constant ETH_DECIMALS = 18;\\n    uint256 internal constant MAX_ALLOWANCE = uint256(-1); // token.approve inifinite\\n\\n    mapping(IERC20Ext => uint256) internal decimals;\\n\\n    /// @dev Sets the decimals of a token to storage if not already set, and returns\\n    ///      the decimals value of the token. Prefer using this function over\\n    ///      getDecimals(), to avoid forgetting to set decimals in local storage.\\n    /// @param token The token type\\n    /// @return tokenDecimals The decimals of the token\\n    function getSetDecimals(IERC20Ext token) internal returns (uint256 tokenDecimals) {\\n        tokenDecimals = getDecimalsConstant(token);\\n        if (tokenDecimals > 0) return tokenDecimals;\\n\\n        tokenDecimals = decimals[token];\\n        if (tokenDecimals == 0) {\\n            tokenDecimals = token.decimals();\\n            decimals[token] = tokenDecimals;\\n        }\\n    }\\n\\n    /// @dev Get the balance of a user\\n    /// @param token The token type\\n    /// @param user The user's address\\n    /// @return The balance\\n    function getBalance(IERC20Ext token, address user) internal view returns (uint256) {\\n        if (token == ETH_TOKEN_ADDRESS) {\\n            return user.balance;\\n        } else {\\n            return token.balanceOf(user);\\n        }\\n    }\\n\\n    /// @dev Get the decimals of a token, read from the constant list, storage,\\n    ///      or from token.decimals(). Prefer using getSetDecimals when possible.\\n    /// @param token The token type\\n    /// @return tokenDecimals The decimals of the token\\n    function getDecimals(IERC20Ext token) internal view returns (uint256 tokenDecimals) {\\n        // return token decimals if has constant value\\n        tokenDecimals = getDecimalsConstant(token);\\n        if (tokenDecimals > 0) return tokenDecimals;\\n\\n        // handle case where token decimals is not a declared decimal constant\\n        tokenDecimals = decimals[token];\\n        // moreover, very possible that old tokens have decimals 0\\n        // these tokens will just have higher gas fees.\\n        return (tokenDecimals > 0) ? tokenDecimals : token.decimals();\\n    }\\n\\n    function calcDestAmount(\\n        IERC20Ext src,\\n        IERC20Ext dest,\\n        uint256 srcAmount,\\n        uint256 rate\\n    ) internal view returns (uint256) {\\n        return calcDstQty(srcAmount, getDecimals(src), getDecimals(dest), rate);\\n    }\\n\\n    function calcSrcAmount(\\n        IERC20Ext src,\\n        IERC20Ext dest,\\n        uint256 destAmount,\\n        uint256 rate\\n    ) internal view returns (uint256) {\\n        return calcSrcQty(destAmount, getDecimals(src), getDecimals(dest), rate);\\n    }\\n\\n    function calcDstQty(\\n        uint256 srcQty,\\n        uint256 srcDecimals,\\n        uint256 dstDecimals,\\n        uint256 rate\\n    ) internal pure returns (uint256) {\\n        require(srcQty <= MAX_QTY, \\\"srcQty > MAX_QTY\\\");\\n        require(rate <= MAX_RATE, \\\"rate > MAX_RATE\\\");\\n\\n        if (dstDecimals >= srcDecimals) {\\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS, \\\"dst - src > MAX_DECIMALS\\\");\\n            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\\n        } else {\\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS, \\\"src - dst > MAX_DECIMALS\\\");\\n            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\\n        }\\n    }\\n\\n    function calcSrcQty(\\n        uint256 dstQty,\\n        uint256 srcDecimals,\\n        uint256 dstDecimals,\\n        uint256 rate\\n    ) internal pure returns (uint256) {\\n        require(dstQty <= MAX_QTY, \\\"dstQty > MAX_QTY\\\");\\n        require(rate <= MAX_RATE, \\\"rate > MAX_RATE\\\");\\n\\n        //source quantity is rounded up. to avoid dest quantity being too low.\\n        uint256 numerator;\\n        uint256 denominator;\\n        if (srcDecimals >= dstDecimals) {\\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS, \\\"src - dst > MAX_DECIMALS\\\");\\n            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\\n            denominator = rate;\\n        } else {\\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS, \\\"dst - src > MAX_DECIMALS\\\");\\n            numerator = (PRECISION * dstQty);\\n            denominator = (rate * (10**(dstDecimals - srcDecimals)));\\n        }\\n        return (numerator + denominator - 1) / denominator; //avoid rounding down errors\\n    }\\n\\n    function calcRateFromQty(\\n        uint256 srcAmount,\\n        uint256 destAmount,\\n        uint256 srcDecimals,\\n        uint256 dstDecimals\\n    ) internal pure returns (uint256) {\\n        require(srcAmount <= MAX_QTY, \\\"srcAmount > MAX_QTY\\\");\\n        require(destAmount <= MAX_QTY, \\\"destAmount > MAX_QTY\\\");\\n\\n        if (dstDecimals >= srcDecimals) {\\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS, \\\"dst - src > MAX_DECIMALS\\\");\\n            return ((destAmount * PRECISION) / ((10**(dstDecimals - srcDecimals)) * srcAmount));\\n        } else {\\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS, \\\"src - dst > MAX_DECIMALS\\\");\\n            return ((destAmount * PRECISION * (10**(srcDecimals - dstDecimals))) / srcAmount);\\n        }\\n    }\\n\\n    /// @dev save storage access by declaring token decimal constants\\n    /// @param token The token type\\n    /// @return token decimals\\n    function getDecimalsConstant(IERC20Ext token) internal pure returns (uint256) {\\n        if (token == ETH_TOKEN_ADDRESS) {\\n            return ETH_DECIMALS;\\n        } else if (token == USDT_TOKEN_ADDRESS) {\\n            return 6;\\n        } else if (token == DAI_TOKEN_ADDRESS) {\\n            return 18;\\n        } else if (token == USDC_TOKEN_ADDRESS) {\\n            return 6;\\n        } else if (token == WBTC_TOKEN_ADDRESS) {\\n            return 8;\\n        } else if (token == KNC_TOKEN_ADDRESS) {\\n            return 18;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function minOf(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x > y ? y : x;\\n    }\\n}\\n\"\r\n    },\r\n    \"@kyber.network/utils-sc/contracts/IERC20Ext.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n/**\\n * @dev Interface extending ERC20 standard to include decimals() as\\n *      it is optional in the OpenZeppelin IERC20 interface.\\n */\\ninterface IERC20Ext is IERC20 {\\n    /**\\n     * @dev This function is required as Kyber requires to interact\\n     *      with token.decimals() with many of its operations.\\n     */\\n    function decimals() external view returns (uint8 digits);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@kyber.network/utils-sc/contracts/PermissionAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n\\nabstract contract PermissionAdmin {\\n    address public admin;\\n    address public pendingAdmin;\\n\\n    event AdminClaimed(address newAdmin, address previousAdmin);\\n\\n    event TransferAdminPending(address pendingAdmin);\\n\\n    constructor(address _admin) {\\n        require(_admin != address(0), \\\"admin 0\\\");\\n        admin = _admin;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"only admin\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the current admin to set the pendingAdmin address.\\n     * @param newAdmin The address to transfer ownership to.\\n     */\\n    function transferAdmin(address newAdmin) public onlyAdmin {\\n        require(newAdmin != address(0), \\\"new admin 0\\\");\\n        emit TransferAdminPending(newAdmin);\\n        pendingAdmin = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\\n     * @param newAdmin The address to transfer ownership to.\\n     */\\n    function transferAdminQuickly(address newAdmin) public onlyAdmin {\\n        require(newAdmin != address(0), \\\"admin 0\\\");\\n        emit TransferAdminPending(newAdmin);\\n        emit AdminClaimed(newAdmin, admin);\\n        admin = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Allows the pendingAdmin address to finalize the change admin process.\\n     */\\n    function claimAdmin() public {\\n        require(pendingAdmin == msg.sender, \\\"not pending\\\");\\n        emit AdminClaimed(pendingAdmin, admin);\\n        admin = pendingAdmin;\\n        pendingAdmin = address(0);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wethAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"whitelistedTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint64\",\"name\":\"chainlinkValidDuration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lpDiffThreshold\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"}],\"name\":\"AdminClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"liquidateLpBps\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"liquidateTokenBps\",\"type\":\"uint64\"}],\"name\":\"DefaultPremiumDataSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdminPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"quoteEthProxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"quoteUsdProxy\",\"type\":\"address\"}],\"name\":\"UpdateAggregatorProxyData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"liquidateLpBps\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"liquidateTokenBps\",\"type\":\"uint64\"}],\"name\":\"UpdateGroupPremiumData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"threshold\",\"type\":\"uint64\"}],\"name\":\"UpdatedLpDiffThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"name\":\"UpdatedMinValidDurationInSeconds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"WhitelistedTokenUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PREMIUM_BPS\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_DURATION_VALID_CHAINLINK_RATE\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllWhitelistedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"liquidateLpBps\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"liquidateTokenBps\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minValidDurationInSeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lpDiffThreshold\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Ext[]\",\"name\":\"tokenIns\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountIns\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IERC20Ext\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"hint\",\"type\":\"bytes\"}],\"name\":\"getExpectedReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"getExpectedTokensFromLp\",\"outputs\":[{\"internalType\":\"contract IERC20Ext[2]\",\"name\":\"tokens\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"amounts\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"getPremiumData\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"liquidateLpBps\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"liquidateTokenBps\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getRateOverEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getRateOverUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenAggregatorProxyData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"quoteEthProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteUsdProxy\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"quoteEthDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"quoteUsdDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getWhitelistedTokenAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistedTokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isWhitelistedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminQuickly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"quoteEthProxies\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"quoteUsdProxies\",\"type\":\"address[]\"}],\"name\":\"updateAggregatorProxyData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_liquidateLpBps\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_liquidateTokenBps\",\"type\":\"uint64\"}],\"name\":\"updateDefaultPremiumData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_liquidators\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_liquidateLpBps\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_liquidateTokenBps\",\"type\":\"uint64[]\"}],\"name\":\"updateGroupPremiumData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"threshold\",\"type\":\"uint64\"}],\"name\":\"updateLpDiffThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newDuration\",\"type\":\"uint64\"}],\"name\":\"updateMinValidDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"updateWhitelistedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"KyberDmmChainLinkPriceOracle","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"0000000000000000000000004bd6037e5cf0cadb0cce85691a5723bc94ae2fae000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000001518000000000000000000000000000000000000000000000000000000000000000c80000000000000000000000000000000000000000000000000000000000000001000000000000000000000000defa4e8a7bcba345f687a2f1456f5edd9ce97202","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}