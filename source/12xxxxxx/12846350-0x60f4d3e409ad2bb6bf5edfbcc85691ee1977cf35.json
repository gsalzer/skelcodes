{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\npragma solidity 0.8.0;\r\n\r\ninterface TokenInterface is IERC20 {\r\n    function mintSupply(address _investorAddress, uint256 _amount) external;\r\n\tfunction burn(uint256 amount) external;\r\n}\r\n\r\ninterface Minter {\r\n    function mint(address to, uint256 amount) external;\r\n}\r\n\r\ninterface SwappYieldFarm {\r\n    function clearDurationBonus(address staker) external;\r\n    function reduceDurationBonus(address staker, uint256 reduceMultiplier) external;\r\n    function getUserLastEpochHarvested(address staker) external returns (uint);\r\n}\r\n\r\ninterface Staking {\r\n    function referrals(address staker) external returns (address);\r\n}\r\n\r\ncontract SwappStaking is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint128;\r\n\r\n    uint128 constant private BASE_MULTIPLIER = uint128(1 * 10 ** 18);\r\n    uint256 constant private CALC_MULTIPLIER = 1000000;\r\n\r\n    // timestamp for the epoch 1\r\n    // everything before that is considered epoch 0 which won't have a reward but allows for the initial stake\r\n    uint256 public epoch1Start;\r\n\r\n    // duration of each epoch\r\n    uint256 public epochDuration;\r\n\r\n    // holds the current balance of the user for each token\r\n    mapping(address => mapping(address => uint256)) private balances;\r\n    \r\n    address constant private swapp = 0x8CB924583681cbFE487A62140a994A49F833c244;\r\n\taddress constant private minter = 0xBC1f9993ea5eE2C77909bf43d7a960bB8dA8C9B9;\r\n    address constant private staking = 0x245a551ee0F55005e510B239c917fA34b41B3461;\r\n\taddress public farm;\r\n    \r\n    struct Pool {\r\n        uint256 size;\r\n        bool set;\r\n    }\r\n\r\n    // for each token, we store the total pool size\r\n    mapping(address => mapping(uint256 => Pool)) private poolSize;\r\n\r\n    // a checkpoint of the valid balance of a user for an epoch\r\n    struct Checkpoint {\r\n        uint128 epochId;\r\n        uint128 multiplier;\r\n        uint256 startBalance;\r\n        uint256 newDeposits;\r\n    }\r\n\r\n    // balanceCheckpoints[user][token][]\r\n    mapping(address => mapping(address => Checkpoint[])) private balanceCheckpoints;\r\n\r\n    mapping(address => uint128) private lastWithdrawEpochId;\r\n\r\n\r\n    //referrals\r\n    uint256 public firstReferrerRewardPercentage;\r\n    uint256 public secondReferrerRewardPercentage;\r\n\r\n    struct Referrer {\r\n        // uint256 totalReward;\r\n        uint256 referralsCount;\r\n        mapping(uint256 => address) referrals;\r\n    }\r\n\r\n    // staker to referrer\r\n    mapping(address => address) public referrals;\r\n    // referrer data\r\n    mapping(address => Referrer) public referrers;\r\n\r\n\tuint256 constant public NR_OF_EPOCHS = 60;\r\n\t\r\n\tstruct Topup {\r\n\t    uint256 totalTopups;\r\n        mapping(uint256 => uint128) epochs;\r\n        mapping(uint256 => uint256) amounts;\r\n    }\r\n\t\r\n\tstruct Stake {\r\n\t\tuint128 startEpoch;\r\n\t\tuint256 startTimestamp;\r\n\t\tuint128 endEpoch;\r\n\t\tuint128 duration;\r\n\t\tbool active;\r\n\t}\r\n\t\r\n\tmapping(address => Stake) public stakes;\r\n    mapping(address => Topup) public topups;\r\n\tuint256 public stakedSwapp;\r\n\t\r\n\tmodifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Only owner can perfrom this action\");\r\n        _;\r\n    }\r\n    \r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Staking: contract is paused\");\r\n        _;\r\n    }\r\n\r\n    event Deposit(address indexed user, address indexed tokenAddress, uint256 amount, uint256 endEpoch);\r\n    event Withdraw(address indexed user, address indexed tokenAddress, uint256 amount, uint256 penalty);\r\n    event ManualEpochInit(address indexed caller, uint128 indexed epochId, address[] tokens);\r\n    event EmergencyWithdraw(address indexed user, address indexed tokenAddress, uint256 amount);\r\n    event RegisteredReferer(address indexed referral, address indexed referrer, uint256 amount);\r\n    event Penalty(address indexed staker, uint128 indexed epochId, uint256 amount);\r\n    event PrepareMigration(address indexed staker, uint256 balance);\r\n\r\n    address public _owner;\r\n    address private _migration;\r\n    bool private _paused = false;\r\n    bool emergencyWithdrawAllowed = false;\r\n\r\n    constructor () {\r\n        epoch1Start = 1626652800;\r\n        epochDuration = 2419200; // 28 days\r\n\r\n        _owner = msg.sender;\r\n\r\n        firstReferrerRewardPercentage = 1000;\r\n        secondReferrerRewardPercentage = 500;\r\n    }\r\n\r\n    /*\r\n     * Stores `amount` of `tokenAddress` tokens for the `user` into the vault\r\n     */\r\n    function deposit(address tokenAddress, uint256 amount, address referrer, uint128 endEpoch) public nonReentrant whenNotPaused {\r\n        require(amount > 0, \"Staking: Amount must be > 0\");\r\n\t\trequire(tokenAddress == swapp, \"This pool accepts only Swapp token\");\r\n        require(IERC20(tokenAddress).allowance(msg.sender, address(this)) >= amount, \"Staking: Token allowance too small\");\r\n\t\t\r\n\t\tuint128 currentEpoch = getCurrentEpoch();\r\n        require(endEpoch > currentEpoch && endEpoch <= NR_OF_EPOCHS.add(1), \"Staking: not acceptable end of stake\");\r\n        \r\n        IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount);\r\n        TokenInterface(tokenAddress).burn(amount);\r\n        stakedSwapp = stakedSwapp.add(amount);\r\n\r\n        if (referrer != address(0)) {\r\n            processReferrals(referrer, amount);\r\n        }\r\n\r\n        balances[msg.sender][tokenAddress] = balances[msg.sender][tokenAddress].add(amount);\r\n        \r\n        handleStakeDuration(endEpoch, amount);\r\n\r\n        // epoch logic\r\n        uint128 currentMultiplier = currentEpochMultiplier();\r\n\r\n        if (!epochIsInitialized(tokenAddress, currentEpoch)) {\r\n            address[] memory tokens = new address[](1);\r\n            tokens[0] = tokenAddress;\r\n            manualEpochInit(tokens, currentEpoch);\r\n        }\r\n\r\n        // update the next epoch pool size\r\n        Pool storage pNextEpoch = poolSize[tokenAddress][currentEpoch + 1];\r\n        \r\n        pNextEpoch.size = stakedSwapp;\r\n        pNextEpoch.set = true;\r\n\r\n        Checkpoint[] storage checkpoints = balanceCheckpoints[msg.sender][tokenAddress];\r\n\r\n        uint256 balanceBefore = getEpochUserBalance(msg.sender, tokenAddress, currentEpoch);\r\n\r\n        // if there's no checkpoint yet, it means the user didn't have any activity\r\n        // we want to store checkpoints both for the current epoch and next epoch because\r\n        // if a user does a withdraw, the current epoch can also be modified and\r\n        // we don't want to insert another checkpoint in the middle of the array as that could be expensive\r\n        if (checkpoints.length == 0) {\r\n            checkpoints.push(Checkpoint(currentEpoch, currentMultiplier, 0, amount));\r\n\r\n            // next epoch => multiplier is 1, epoch deposits is 0\r\n            checkpoints.push(Checkpoint(currentEpoch + 1, BASE_MULTIPLIER, amount, 0));\r\n        } else {\r\n            uint256 last = checkpoints.length - 1;\r\n\r\n            // the last action happened in an older epoch (e.g. a deposit in epoch 3, current epoch is >=5)\r\n            if (checkpoints[last].epochId < currentEpoch) {\r\n                uint128 multiplier = computeNewMultiplier(\r\n                    getCheckpointBalance(checkpoints[last]),\r\n                    BASE_MULTIPLIER,\r\n                    amount,\r\n                    currentMultiplier\r\n                );\r\n                checkpoints.push(Checkpoint(currentEpoch, multiplier, getCheckpointBalance(checkpoints[last]), amount));\r\n                checkpoints.push(Checkpoint(currentEpoch + 1, BASE_MULTIPLIER, balances[msg.sender][tokenAddress], 0));\r\n            }\r\n            // the last action happened in the previous epoch\r\n            else if (checkpoints[last].epochId == currentEpoch) {\r\n                checkpoints[last].multiplier = computeNewMultiplier(\r\n                    getCheckpointBalance(checkpoints[last]),\r\n                    checkpoints[last].multiplier,\r\n                    amount,\r\n                    currentMultiplier\r\n                );\r\n                checkpoints[last].newDeposits = checkpoints[last].newDeposits.add(amount);\r\n\r\n                checkpoints.push(Checkpoint(currentEpoch + 1, BASE_MULTIPLIER, balances[msg.sender][tokenAddress], 0));\r\n            }\r\n            // the last action happened in the current epoch\r\n            else {\r\n                if (last >= 1 && checkpoints[last - 1].epochId == currentEpoch) {\r\n                    checkpoints[last - 1].multiplier = computeNewMultiplier(\r\n                        getCheckpointBalance(checkpoints[last - 1]),\r\n                        checkpoints[last - 1].multiplier,\r\n                        amount,\r\n                        currentMultiplier\r\n                    );\r\n                    checkpoints[last - 1].newDeposits = checkpoints[last - 1].newDeposits.add(amount);\r\n                }\r\n\r\n                checkpoints[last].startBalance = balances[msg.sender][tokenAddress];\r\n            }\r\n        }\r\n\r\n        uint256 balanceAfter = getEpochUserBalance(msg.sender, tokenAddress, currentEpoch);\r\n\r\n        poolSize[tokenAddress][currentEpoch].size = poolSize[tokenAddress][currentEpoch].size.add(balanceAfter.sub(balanceBefore));\r\n\r\n        emit Deposit(msg.sender, tokenAddress, amount, endEpoch);\r\n    }\r\n    \r\n    function handleStakeDuration(uint128 endEpoch, uint256 amount) internal {\r\n        Stake storage stake = stakes[msg.sender];\r\n        uint128 currentEpoch = getCurrentEpoch();\r\n        \r\n\t\tif (!stake.active) {\r\n\t\t\tstake.startEpoch = currentEpoch;\r\n\t\t\tstake.startTimestamp = block.timestamp;\r\n\t\t\tstake.endEpoch = endEpoch;\r\n\t\t\tstake.duration = endEpoch - currentEpoch;\r\n\t\t\tstake.active = true;\r\n\t\t}\r\n\r\n        Topup storage topupData = topups[msg.sender];\r\n\r\n        uint256 currentTopup = topupData.totalTopups + 1;\r\n        topupData.totalTopups = currentTopup;\r\n        topupData.epochs[currentTopup] = currentEpoch;\r\n        topupData.amounts[currentTopup] = amount;\r\n    }\r\n    \r\n    function getTopupById(address staker, uint256 id) public view returns (uint128 epochId, uint256 amount) {\r\n        return (topups[staker].epochs[id], topups[staker].amounts[id]);\r\n    }\r\n    \r\n    function calcDurationBonusMultiplier(uint128 epochId, address staker) external view returns (uint256) {\r\n        Topup storage topupData = topups[staker];\r\n        // only if there were topups\r\n        if (topupData.totalTopups > 0) {\r\n            uint256 dividend = 0;\r\n            uint256 divider = 0;\r\n            for (uint256 i = 1; i <= topupData.totalTopups; i++) {\r\n                // Topup storage topup = topups[staker];\r\n                uint128 startEpoch = topupData.epochs[i];\r\n                uint256 amount = topupData.amounts[i];\r\n                // correct multiplier only for epoch from topup starts\r\n                if (epochId < startEpoch) {\r\n                    continue;\r\n                }\r\n                // correct multiplier only for epoch from current stake starts\r\n                if (epochId < stakes[msg.sender].startEpoch) {\r\n                    continue;\r\n                }\r\n                \r\n                dividend += epochId.sub(startEpoch).mul(CALC_MULTIPLIER).div(epochId) * amount;\r\n                divider += amount;\r\n            }\r\n\r\n            if (divider > 0) {\r\n                return dividend.div(divider);\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    function stakeData(address staker) external view returns (uint256 startEpoch, uint256 endEpoch, bool active) {\r\n        Stake memory stake = stakes[staker];\r\n        return (stake.startEpoch, stake.endEpoch, stake.active);\r\n    }\r\n    \r\n    function setFarm(address _farm) external onlyOwner {\r\n        farm = _farm;\r\n    }\r\n\r\n    // must be in bases point ( 1,5% = 150 bp)\r\n    function updateReferrersPercentage(uint256 first, uint256 second) external onlyOwner {\r\n        firstReferrerRewardPercentage = first;\r\n        secondReferrerRewardPercentage = second;\r\n    }\r\n    \r\n    function allowEmergencyWithdraw() external onlyOwner{\r\n        emergencyWithdrawAllowed = true;\r\n    }\r\n    \r\n    function disallowEmergencyWithdraw() external onlyOwner{\r\n        emergencyWithdrawAllowed = false;\r\n    }\r\n\r\n    function processReferrals(address referrer, uint256 amount) internal {\r\n        //get referrer from first staking pool\r\n        address firstReferrer = Staking(staking).referrals(msg.sender);\r\n        if(firstReferrer != address(0)) {\r\n            referrer = firstReferrer;\r\n        }\r\n        \r\n        //Return if sender has referrer alredy or referrer is contract or self ref\r\n        if (hasReferrer(msg.sender) || !notContract(referrer) || referrer == msg.sender) {\r\n            return;\r\n        }\r\n\r\n        //check cross refs \r\n        if (referrals[referrer] == msg.sender || referrals[referrals[referrer]] == msg.sender) {\r\n            return;\r\n        }\r\n        \r\n        //check if already has stake, do not add referrer if has\r\n        if (balanceOf(msg.sender, swapp) > 0) {\r\n            return;\r\n        }\r\n\r\n        referrals[msg.sender] = referrer;\r\n\r\n        Referrer storage refData = referrers[referrer];\r\n\r\n        refData.referralsCount = refData.referralsCount.add(1);\r\n        refData.referrals[refData.referralsCount] = msg.sender;\r\n        emit RegisteredReferer(msg.sender, referrer, amount);\r\n    }\r\n\r\n    function hasReferrer(address addr) public view returns(bool) {\r\n        return referrals[addr] != address(0);\r\n    }\r\n\r\n    function getReferralById(address referrer, uint256 id) public view returns (address) {\r\n        return referrers[referrer].referrals[id];\r\n    }\r\n    \r\n    /*\r\n     * Removes the deposit of the user and sends the amount of `tokenAddress` back to the `user`\r\n     */\r\n    function withdraw(address tokenAddress, uint256 amount) public nonReentrant whenNotPaused {\r\n        require(balances[msg.sender][tokenAddress] >= amount, \"Staking: balance too small\");\r\n        uint128 currentEpoch = getCurrentEpoch();\r\n        Stake storage stake = stakes[msg.sender];\r\n        require(currentEpoch > stake.startEpoch, \"Staking: withdraw is not allowed on stake start epoch\");\r\n        \r\n        if (currentEpoch < stake.endEpoch) {\r\n            uint256 userLastEpochHarvested = SwappYieldFarm(farm).getUserLastEpochHarvested(msg.sender);\r\n            require(userLastEpochHarvested == currentEpoch.sub(1), \"Staking: withdraw allowed only after all epoch before current epoch are harvested\");\r\n        }\r\n        \r\n        balances[msg.sender][tokenAddress] = balances[msg.sender][tokenAddress].sub(amount);\r\n        \r\n        if (balances[msg.sender][tokenAddress] == 0) {\r\n    \t\tif (stake.active) {\r\n    \t\t\tstake.active = false;\r\n    \t\t}\r\n    \t\t\r\n    \t\tif (currentEpoch < stake.endEpoch) {\r\n    \t\t    SwappYieldFarm(farm).clearDurationBonus(msg.sender);\r\n    \t\t}\r\n        } else {\r\n            if (currentEpoch < stake.endEpoch) {\r\n                uint256 balanceBefore = balances[msg.sender][tokenAddress].add(amount);\r\n                uint256 reduceMultiplier = balances[msg.sender][tokenAddress].mul(CALC_MULTIPLIER).div(balanceBefore);\r\n    \t\t    SwappYieldFarm(farm).reduceDurationBonus(msg.sender, reduceMultiplier);\r\n    \t\t}\r\n        }\r\n        \r\n        uint256 penalty = calcPenalty(amount);\r\n        uint256 amountToMint = amount.sub(penalty);\r\n        stakedSwapp = stakedSwapp.sub(amount);\r\n        \r\n        if (penalty > 0) {\r\n            emit Penalty(msg.sender, currentEpoch, penalty);\r\n        }\r\n        \r\n        if (amountToMint > 0) {\r\n\t\t    Minter(minter).mint(msg.sender, amountToMint);\r\n        }\r\n        \r\n        // epoch logic\r\n        \r\n        lastWithdrawEpochId[tokenAddress] = currentEpoch;\r\n\r\n        if (!epochIsInitialized(tokenAddress, currentEpoch)) {\r\n            address[] memory tokens = new address[](1);\r\n            tokens[0] = tokenAddress;\r\n            manualEpochInit(tokens, currentEpoch);\r\n        }\r\n\r\n        // update the pool size of the next epoch to its current balance\r\n        Pool storage pNextEpoch = poolSize[tokenAddress][currentEpoch + 1];\r\n        \r\n        pNextEpoch.size = stakedSwapp;\r\n        pNextEpoch.set = true;\r\n\r\n        Checkpoint[] storage checkpoints = balanceCheckpoints[msg.sender][tokenAddress];\r\n        uint256 last = checkpoints.length - 1;\r\n\r\n        // note: it's impossible to have a withdraw and no checkpoints because the balance would be 0 and revert\r\n\r\n        // there was a deposit in an older epoch (more than 1 behind [eg: previous 0, now 5]) but no other action since then\r\n        if (checkpoints[last].epochId < currentEpoch) {\r\n            checkpoints.push(Checkpoint(currentEpoch, BASE_MULTIPLIER, balances[msg.sender][tokenAddress], 0));\r\n\r\n            poolSize[tokenAddress][currentEpoch].size = poolSize[tokenAddress][currentEpoch].size.sub(amount);\r\n        }\r\n        // there was a deposit in the `epochId - 1` epoch => we have a checkpoint for the current epoch\r\n        else if (checkpoints[last].epochId == currentEpoch) {\r\n            checkpoints[last].startBalance = balances[msg.sender][tokenAddress];\r\n            checkpoints[last].newDeposits = 0;\r\n            checkpoints[last].multiplier = BASE_MULTIPLIER;\r\n\r\n            poolSize[tokenAddress][currentEpoch].size = poolSize[tokenAddress][currentEpoch].size.sub(amount);\r\n        }\r\n        // there was a deposit in the current epoch\r\n        else {\r\n            Checkpoint storage currentEpochCheckpoint = checkpoints[last - 1];\r\n\r\n            uint256 balanceBefore = getCheckpointEffectiveBalance(currentEpochCheckpoint);\r\n\r\n            // in case of withdraw, we have 2 branches:\r\n            // 1. the user withdraws less than he added in the current epoch\r\n            // 2. the user withdraws more than he added in the current epoch (including 0)\r\n            if (amount < currentEpochCheckpoint.newDeposits) {\r\n                uint128 avgDepositMultiplier = uint128(\r\n                    balanceBefore.sub(currentEpochCheckpoint.startBalance).mul(BASE_MULTIPLIER).div(currentEpochCheckpoint.newDeposits)\r\n                );\r\n\r\n                currentEpochCheckpoint.newDeposits = currentEpochCheckpoint.newDeposits.sub(amount);\r\n\r\n                currentEpochCheckpoint.multiplier = computeNewMultiplier(\r\n                    currentEpochCheckpoint.startBalance,\r\n                    BASE_MULTIPLIER,\r\n                    currentEpochCheckpoint.newDeposits,\r\n                    avgDepositMultiplier\r\n                );\r\n            } else {\r\n                currentEpochCheckpoint.startBalance = currentEpochCheckpoint.startBalance.sub(\r\n                    amount.sub(currentEpochCheckpoint.newDeposits)\r\n                );\r\n                currentEpochCheckpoint.newDeposits = 0;\r\n                currentEpochCheckpoint.multiplier = BASE_MULTIPLIER;\r\n            }\r\n\r\n            uint256 balanceAfter = getCheckpointEffectiveBalance(currentEpochCheckpoint);\r\n\r\n            poolSize[tokenAddress][currentEpoch].size = poolSize[tokenAddress][currentEpoch].size.sub(balanceBefore.sub(balanceAfter));\r\n\r\n            checkpoints[last].startBalance = balances[msg.sender][tokenAddress];\r\n        }\r\n\r\n        emit Withdraw(msg.sender, tokenAddress, amount, penalty);\r\n    }\r\n    \r\n    function calcPenalty(uint256 amount) public view returns (uint256) {\r\n        Stake memory stake = stakes[msg.sender];\r\n        uint256 currentEpoch = getCurrentEpoch();\r\n        if (currentEpoch >= stake.endEpoch) {\r\n            return 0;\r\n        } else {\r\n            uint256 staked = currentEpoch - stake.startEpoch;\r\n            uint256 promised = stake.duration;\r\n            uint256 k = 10000 - staked * 10000 / promised; \r\n            return amount * k / 10000;\r\n        }\r\n    }\r\n    \r\n    function isStakeFinished(address staker) public view returns (bool) {\r\n        Stake memory stake = stakes[staker];\r\n        uint256 currentEpoch = getCurrentEpoch();\r\n        \r\n        return currentEpoch >= stake.endEpoch;\r\n    }\r\n    \r\n    function stakeEndEpoch(address staker) external view returns (uint128) {\r\n        return stakes[staker].endEpoch;\r\n    }\r\n\r\n    /*\r\n     * manualEpochInit can be used by anyone to initialize an epoch based on the previous one\r\n     * This is only applicable if there was no action (deposit/withdraw) in the current epoch.\r\n     * Any deposit and withdraw will automatically initialize the current and next epoch.\r\n     */\r\n    function manualEpochInit(address[] memory tokens, uint128 epochId) public {\r\n        require(epochId <= getCurrentEpoch(), \"can't init a future epoch\");\r\n\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            Pool storage p = poolSize[tokens[i]][epochId];\r\n\r\n            if (epochId == 0) {\r\n                p.size = uint256(0);\r\n                p.set = true;\r\n            } else {\r\n                require(!epochIsInitialized(tokens[i], epochId), \"Staking: epoch already initialized\");\r\n                require(epochIsInitialized(tokens[i], epochId - 1), \"Staking: previous epoch not initialized\");\r\n\r\n                p.size = poolSize[tokens[i]][epochId - 1].size;\r\n                p.set = true;\r\n            }\r\n        }\r\n\r\n        emit ManualEpochInit(msg.sender, epochId, tokens);\r\n    }\r\n\r\n    function emergencyWithdraw(address tokenAddress) public {\r\n        require(emergencyWithdrawAllowed == true, \"Emergency withdrawal not allowed\");\r\n        require((getCurrentEpoch() - lastWithdrawEpochId[tokenAddress]) >= 10, \"At least 10 epochs must pass without success\");\r\n\r\n        uint256 totalUserBalance = balances[msg.sender][tokenAddress];\r\n        require(totalUserBalance > 0, \"Amount must be > 0\");\r\n\r\n        balances[msg.sender][tokenAddress] = 0;\r\n        stakedSwapp = stakedSwapp - totalUserBalance;\r\n        \r\n\t\tMinter(minter).mint(msg.sender, totalUserBalance);\r\n\r\n        emit EmergencyWithdraw(msg.sender, tokenAddress, totalUserBalance);\r\n    }\r\n\r\n    /*\r\n     * Returns the valid balance of a user that was taken into consideration in the total pool size for the epoch\r\n     * A deposit will only change the next epoch balance.\r\n     * A withdraw will decrease the current epoch (and subsequent) balance.\r\n     */\r\n    function getEpochUserBalance(address user, address token, uint128 epochId) public view returns (uint256) {\r\n        Checkpoint[] storage checkpoints = balanceCheckpoints[user][token];\r\n\r\n        // if there are no checkpoints, it means the user never deposited any tokens, so the balance is 0\r\n        if (checkpoints.length == 0 || epochId < checkpoints[0].epochId) {\r\n            return 0;\r\n        }\r\n\r\n        uint min = 0;\r\n        uint max = checkpoints.length - 1;\r\n\r\n        // shortcut for blocks newer than the latest checkpoint == current balance\r\n        if (epochId >= checkpoints[max].epochId) {\r\n            return getCheckpointEffectiveBalance(checkpoints[max]);\r\n        }\r\n\r\n        // binary search of the value in the array\r\n        while (max > min) {\r\n            uint mid = (max + min + 1) / 2;\r\n            if (checkpoints[mid].epochId <= epochId) {\r\n                min = mid;\r\n            } else {\r\n                max = mid - 1;\r\n            }\r\n        }\r\n\r\n        return getCheckpointEffectiveBalance(checkpoints[min]);\r\n    }\r\n\r\n    /*\r\n     * Returns the amount of `token` that the `user` has currently staked\r\n     */\r\n    function balanceOf(address user, address token) public view returns (uint256) {\r\n        return balances[user][token];\r\n    }\r\n\r\n    /*\r\n     * Returns the id of the current epoch derived from block.timestamp\r\n     */\r\n    function getCurrentEpoch() public view returns (uint128) {\r\n        if (block.timestamp < epoch1Start) {\r\n            return 0;\r\n        }\r\n\r\n        return uint128((block.timestamp - epoch1Start) / epochDuration + 1);\r\n    }\r\n\r\n    /*\r\n     * Returns the total amount of `tokenAddress` that was locked from beginning to end of epoch identified by `epochId`\r\n     */\r\n    function getEpochPoolSize(address tokenAddress, uint128 epochId) public view returns (uint256) {\r\n        // Premises:\r\n        // 1. it's impossible to have gaps of uninitialized epochs\r\n        // - any deposit or withdraw initialize the current epoch which requires the previous one to be initialized\r\n        if (epochIsInitialized(tokenAddress, epochId)) {\r\n            return poolSize[tokenAddress][epochId].size;\r\n        }\r\n\r\n        // epochId not initialized and epoch 0 not initialized => there was never any action on this pool\r\n        if (!epochIsInitialized(tokenAddress, 0)) {\r\n            return 0;\r\n        }\r\n\r\n        // epoch 0 is initialized => there was an action at some point but none that initialized the epochId\r\n        // which means the current pool size is equal to the current balance of token held by the staking contract\r\n        return stakedSwapp;\r\n    }\r\n\r\n    /*\r\n     * Returns the percentage of time left in the current epoch\r\n     */\r\n    function currentEpochMultiplier() public view returns (uint128) {\r\n        uint128 currentEpoch = getCurrentEpoch();\r\n        uint256 currentEpochEnd = epoch1Start + currentEpoch * epochDuration;\r\n        uint256 timeLeft = currentEpochEnd - block.timestamp;\r\n        uint128 multiplier = uint128(timeLeft * BASE_MULTIPLIER / epochDuration);\r\n\r\n        return multiplier;\r\n    }\r\n\r\n    function computeNewMultiplier(uint256 prevBalance, uint128 prevMultiplier, uint256 amount, uint128 currentMultiplier) public pure returns (uint128) {\r\n        uint256 prevAmount = prevBalance.mul(prevMultiplier).div(BASE_MULTIPLIER);\r\n        uint256 addAmount = amount.mul(currentMultiplier).div(BASE_MULTIPLIER);\r\n        uint128 newMultiplier = uint128(prevAmount.add(addAmount).mul(BASE_MULTIPLIER).div(prevBalance.add(amount)));\r\n\r\n        return newMultiplier;\r\n    }\r\n\r\n    /*\r\n     * Checks if an epoch is initialized, meaning we have a pool size set for it\r\n     */\r\n    function epochIsInitialized(address token, uint128 epochId) public view returns (bool) {\r\n        return poolSize[token][epochId].set;\r\n    }\r\n\r\n    function getCheckpointBalance(Checkpoint memory c) internal pure returns (uint256) {\r\n        return c.startBalance.add(c.newDeposits);\r\n    }\r\n\r\n    function getCheckpointEffectiveBalance(Checkpoint memory c) internal pure returns (uint256) {\r\n        return getCheckpointBalance(c).mul(c.multiplier).div(BASE_MULTIPLIER);\r\n    }\r\n\r\n    function notContract(address _addr) internal view returns (bool) {\r\n        uint32 size;\r\n        assembly { size := extcodesize(_addr) }\r\n        return (size == 0);\r\n    }\r\n    \r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n    \r\n    function pause() external onlyOwner {\r\n        _paused = true;\r\n    }\r\n    \r\n    function unpause() external onlyOwner {\r\n        _paused = false;\r\n    }\r\n    \r\n    function setMigration(address migration) external onlyOwner{\r\n        _migration = migration;\r\n    }\r\n    \r\n    function prepareMigration(address staker) public returns (uint256 balance) {\r\n        require(_migration != address(0), \"Migration is not initialised\");\r\n        require(msg.sender == _migration, \"Only migration contract can perform this action\");\r\n        require(balances[staker][swapp] > 0, \"Balance too small\");\r\n        \r\n        uint256 _balance = balances[staker][swapp];\r\n        balances[staker][swapp] = 0;\r\n        stakedSwapp = stakedSwapp.sub(_balance);\r\n        \r\n        Stake storage stake = stakes[staker];\r\n        stake.active = false;\r\n        stake.endEpoch = getCurrentEpoch();\r\n        \r\n        emit PrepareMigration(staker, _balance);\r\n        \r\n        return _balance;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endEpoch\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"ManualEpochInit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Penalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RegisteredReferer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NR_OF_EPOCHS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowEmergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"calcDurationBonusMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prevBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"prevMultiplier\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"currentMultiplier\",\"type\":\"uint128\"}],\"name\":\"computeNewMultiplier\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpochMultiplier\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"endEpoch\",\"type\":\"uint128\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disallowEmergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch1Start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"epochIsInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstReferrerRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"getEpochPoolSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"getEpochUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getReferralById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTopupById\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"hasReferrer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStakeFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"manualEpochInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"prepareMigration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"referralsCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondReferrerRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farm\",\"type\":\"address\"}],\"name\":\"setFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"migration\",\"type\":\"address\"}],\"name\":\"setMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"stakeData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endEpoch\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"stakeEndEpoch\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedSwapp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"startEpoch\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"endEpoch\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"duration\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"topups\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTopups\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"first\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"second\",\"type\":\"uint256\"}],\"name\":\"updateReferrersPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SwappStaking","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3f623d78b09d93372330b5424d0ca39e234cc5a92115ea3706b9cb4162554879"}]}