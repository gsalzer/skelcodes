{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"gist-62587a7f0885c4cbdbd587ca0dc74a12/Keeper.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"synthetix/contracts/interfaces/IAddressResolver.sol\\\";\\n\\ninterface IFeePool {\\n    // Views\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function FEE_ADDRESS() external view returns (address);\\n\\n    function feesAvailable(address account) external view returns (uint, uint);\\n\\n    function feePeriodDuration() external view returns (uint);\\n\\n    function isFeesClaimable(address account) external view returns (bool);\\n\\n    function targetThreshold() external view returns (uint);\\n\\n    function totalFeesAvailable() external view returns (uint);\\n\\n    function totalRewardsAvailable() external view returns (uint);\\n\\n    // Mutative Functions\\n    function claimFees() external returns (bool);\\n\\n    function claimOnBehalf(address claimingForAddress) external returns (bool);\\n\\n    function closeCurrentFeePeriod() external;\\n\\n    // Restricted: used internally to Synthetix\\n    function appendAccountIssuanceRecord(\\n        address account,\\n        uint lockedAmount,\\n        uint debtEntryIndex\\n    ) external;\\n\\n    function recordFeePaid(uint sUSDAmount) external;\\n\\n    function setRewardsToDistribute(uint amount) external;\\n    \\n    function recentFeePeriods(uint index)\\n        external\\n        view\\n        returns (\\n            uint64 feePeriodId,\\n            uint64 startingDebtIndex,\\n            uint64 startTime,\\n            uint feesToDistribute,\\n            uint feesClaimed,\\n            uint rewardsToDistribute,\\n            uint rewardsClaimed\\n        );\\n}\\n\\ninterface KeeperCompatibleInterface {\\n    function checkUpkeep(bytes calldata checkData) view external returns (bool upkeepNeeded, bytes memory performData);\\n    function performUpkeep(bytes calldata performData) external;\\n}\\n\\ncontract Keeper is KeeperCompatibleInterface {\\n    \\n    IAddressResolver public synthetixResolver;\\n\\n    constructor(IAddressResolver _snxResolver) public {\\n      synthetixResolver = _snxResolver;\\n    }\\n\\n\\n    function checkUpkeep(bytes calldata checkData) view external override returns (bool upkeepNeeded, bytes memory performData) {\\n        IFeePool feePool = IFeePool(synthetixResolver.requireAndGetAddress(\\\"FeePool\\\", \\\"FeePool is missing from resolver\\\"));\\n\\n        // Read the last Fee Period timestamp\\n        (, , uint64 startTime, , , ,) = feePool.recentFeePeriods(0);\\n        \\n        upkeepNeeded = startTime <= block.timestamp - feePool.feePeriodDuration();\\n\\n        // We don't use the checkData in this example\\n        // checkData was defined when the Upkeep was registered\\n        performData = checkData;\\n    }\\n\\n    function performUpkeep(bytes calldata performData) external override {\\n        IFeePool feePool = IFeePool(synthetixResolver.requireAndGetAddress(\\\"FeePool\\\", \\\"FeePool is missing from resolver\\\"));\\n        feePool.closeCurrentFeePeriod();\\n        \\n        // We don't use the performData in this example\\n        // performData is generated by the Keeper's call to your `checkUpkeep` function\\n        performData;\\n        \\n    }\\n    \\n}\"\r\n    },\r\n    \"synthetix/contracts/interfaces/IAddressResolver.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/iaddressresolver\\ninterface IAddressResolver {\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getSynth(bytes32 key) external view returns (address);\\n\\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"_snxResolver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"synthetixResolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Keeper","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004e3b31eb0e5cb73641ee1e65e7dcefe520ba3ef2","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}