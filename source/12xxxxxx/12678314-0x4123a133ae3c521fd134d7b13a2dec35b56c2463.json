{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/venimir/Venimir/qredo-token/contracts/QredoToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"./utils/Authorizable.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../libraries/SafeMath.sol\\\";\\n\\n// QredoToken => QT\\ncontract QredoToken is Authorizable, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n    uint256 private _circulatingSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private immutable _decimals;\\n\\n    constructor(string memory name_, string memory symbol_, uint8 decimals_, uint256 totalSupply_, uint256 initialSupply_) public {\\n        require(bytes(name_).length > 0, \\\"QT:constructor::name_ is undefined\\\");\\n        require(bytes(symbol_).length > 0, \\\"QT:constructor::symbol_ is undefined\\\");\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n        _totalSupply = totalSupply_;\\n        \\n        if(initialSupply_ > 0){\\n            _mint(_msgSender(), initialSupply_);\\n        }\\n    }\\n\\n    //*************************************************** PUBLIC ***************************************************//\\n    \\n    /**\\n        * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n        *\\n        * Returns a boolean value indicating whether the operation succeeded.\\n        *\\n        * Emits a {Transfer} event.\\n        *\\n        * Requirements:\\n        * - `recipient` cannot be the zero address.\\n        * - the caller must have a balance of at least `amount`.\\n    */\\n    \\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n        * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n        *\\n        * This internal function is equivalent to `approve`, and can be used to\\n        * e.g. set automatic allowances for certain subsystems, etc.\\n        *\\n        * Returns a boolean value indicating whether the operation succeeded.\\n        *\\n        * Emits an {Approval} event.\\n        *\\n        * Requirements:\\n        * - `owner` cannot be the zero address.\\n        * - `spender` cannot be the zero address.\\n        *\\n        * Emits an {Approval} event.\\n    */\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n        * @dev Atomically increases the allowance granted to `spender` by the caller.\\n        *\\n        * This is an alternative to {approve} that can be used as a mitigation for\\n        * problems described in https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729.\\n        *\\n        *\\n        * Returns a boolean value indicating whether the operation succeeded.\\n        *\\n        * Emits an {Approval} event indicating the updated allowance.\\n        *\\n        * Requirements:\\n        * - `spender` cannot be the zero address.\\n    */\\n    function increaseAllowance(address spender, uint256 addedValue) external override returns (bool) {\\n        require(spender != address(0),\\\"QT::increaseAllowance:spender must be different than 0\\\");\\n        \\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n        * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n        *\\n        * This is an alternative to {approve} that can be used as a mitigation for\\n        * problems described in https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729.\\n        *\\n        *\\n        * Returns a boolean value indicating whether the operation succeeded.\\n        *\\n        * Emits an {Approval} event indicating the updated allowance.\\n        *\\n        * Requirements:\\n        * - `spender` cannot be the zero address.\\n        * - `spender` must have allowance for the caller of at least\\n        * `subtractedValue`.\\n    */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external override returns (bool) {\\n        require(spender != address(0),\\\"QT::decreaseAllowance:spender must be different than 0\\\");\\n\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"QT::decreaseAllowance: decreased allowance below zero\\\");\\n        \\n        _approve(_msgSender(), spender, currentAllowance.sub(subtractedValue));\\n        return true;\\n    }\\n\\n    /**\\n        * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n        * allowance mechanism. `amount` is then deducted from the caller's\\n        * allowance.\\n        *\\n        * Returns a boolean value indicating whether the operation succeeded.\\n        *\\n        * Emits a {Transfer} and {Approve} events\\n        *\\n        * Requirements:\\n        * - `sender` and `recipient` cannot be the zero address.\\n        * - `sender` must have a balance of at least `amount`.\\n        * - the caller must have allowance for ``sender``'s tokens of at least\\n        * `amount`..\\n    */\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"QT::transferFrom: transfer amount exceeds allowance\\\");\\n\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), currentAllowance.sub(amount));\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Function to mint tokens.\\n     * @param to The address that will receive the minted tokens\\n     * @param value The amount of tokens to mint\\n     */\\n    function mint(address to, uint256 value) external override onlyAuthorized() returns (bool) {\\n        _mint(to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) external override returns (bool) {\\n        _burn(_msgSender(), amount);\\n        return true;\\n    }\\n\\n    //*************************************************** VIEWS ***************************************************//\\n    \\n    /**\\n        * @dev Returns the name of the token.\\n    */\\n    function name() external view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n        * @dev Returns the symbol of the token, usually a shorter version of the\\n        * name.\\n    */\\n    function symbol() external view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n        * @dev Returns the number of decimals used to get its user representation.\\n        * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n        * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n        *\\n        * Tokens usually opt for a value of 18, imitating the relationship between\\n        * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n        * overridden;\\n        *\\n        * NOTE: This information is only used for _display_ purposes: it in\\n        * no way affects any of the arithmetic of the contract, including\\n        * {ERC20Proxy-balanceOf}, {ERC20Storage-balanceOf}  and {ERC20Logic-transfer}.\\n    */\\n    function decimals() external view override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n        * @dev Returns the amount of tokens in existence.\\n    */\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n        * @dev Returns the amount of tokens in existence.\\n    */\\n    function circulatingSupply() external view override returns (uint256) {\\n        return _circulatingSupply;\\n    }\\n    \\n    /**\\n        * @dev Returns the amount of tokens owned by `account`.\\n    */\\n    function balanceOf(address account) external view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n        * @dev Returns the remaining number of tokens that `spender` will be\\n        * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n        * zero by default.\\n        *\\n        * This value changes when {approve}, {increaseAllowance}, {decreaseAllowance} or {transferFrom} are called.\\n    */\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    //*************************************************** INTERNAL ***************************************************//\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"QT::_transfer: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"QT::_transfer: transfer to the zero address\\\");\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"QT::_transfer: transfer amount exceeds balance\\\");\\n\\n        _balances[sender] = senderBalance.sub(amount);\\n        _balances[recipient] = _balances[recipient].add(amount);\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"QT::_approve: approve from the zero address\\\");\\n        require(spender != address(0), \\\"QT::_approve: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n    \\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"QT::_mint:mint to the zero address\\\");\\n        require(_circulatingSupply.add(amount) <= _totalSupply, \\\"QT::_mint:mint exceeds totalSupply\\\");\\n        require(amount > 0, \\\"QT::_mint:amount must be greater than zero\\\");\\n\\n        _circulatingSupply = _circulatingSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"QT::_burn:burn from the zero address\\\");\\n        require(amount > 0, \\\"QT::_burn:amount must be greater than zero\\\");\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"QT::_burn:burn amount exceeds balance\\\");\\n\\n        _balances[account] = accountBalance.sub(amount);\\n        _circulatingSupply = _circulatingSupply.sub(amount);\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n}\"\r\n    },\r\n    \"/home/venimir/Venimir/qredo-token/contracts/ownable/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n        * @dev Initializes the contract setting the deployer as the initial owner.\\n    */\\n    constructor () public {\\n        address msgSender = _msgSender();\\n        require(msgSender != address(0), \\\"Ownable:constructor:msgSender zero address\\\");\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n        * @dev Returns the address of the current owner.\\n    */\\n    function getOwner() external view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n        * @dev Throws if called by any account other than the owner.\\n    */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable::onlyOwner:caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n        * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n        * Can only be called by the current owner.\\n    */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable::transferOwnership:new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"\r\n    },\r\n    \"/home/venimir/Venimir/qredo-token/contracts/utils/Authorizable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"../ownable/Ownable.sol\\\";\\nimport \\\"../../interfaces/IAuthorizable.sol\\\";\\n\\nabstract contract Authorizable is IAuthorizable, Ownable {\\n\\n    mapping(address => bool) private _authorized;\\n\\n    /* -------------------------------------------------------- MODIFIERS -------------------------------------------------------- */\\n\\n    /**\\n        * @dev Throws if called by any account other than _authorized.\\n    */\\n    modifier onlyAuthorized() {\\n        require(_authorized[_msgSender()], \\\"Authorizable::onlyAuthorized:Only authorized address can call\\\");\\n        _;\\n    }\\n\\n    /* -------------------------------------------------------- SETTERS -------------------------------------------------------- */\\n    \\n    /**\\n        * @dev Add _authorized account {add} if it's not _authorized.\\n        * Can only be called by the current owner.\\n        *\\n        * Emits a {_Authorized} event.\\n        * Requirements:\\n        * - `add` cannot be the zero address.\\n        * - `add` cannot be _authorized already.\\n    */\\n    function addAuthorized(address add) onlyOwner external override returns(bool){\\n        require(add != address(0), \\\"Authorizable::addAuthorized:toAdd address must be different than 0\\\");\\n        require(!_authorized[add], \\\"Authorizable::addAuthorized:toAdd is already authorized\\\");\\n        _authorized[add] = true;\\n        emit Authorized(add, true);\\n        return true;\\n    }\\n\\n    /**\\n        * @dev Remove _authorized account {remove} if it's _authorized.\\n        * Can only be called by the current owner.\\n        *\\n        * Emits a {Authorized} event.\\n        * Requirements:\\n        * - `remove` cannot be the zero address.\\n        * - `remove` must be _authorized already.\\n    */\\n    function removeAuthorized(address remove) onlyOwner external override returns(bool) {\\n        require(remove != address(0), \\\"Authorizable::removeAuthorized:remove address must be different than 0\\\");\\n        require(_authorized[remove], \\\"Authorizable::removeAuthorized:remove is not authorized\\\");\\n        _authorized[remove] = false;\\n        emit Authorized(remove, false);\\n        return true;\\n    }\\n\\n    /* -------------------------------------------------------- VIEWS -------------------------------------------------------- */\\n\\n    /**\\n        * @dev Returns the bool if the {auth} address is _authorized.\\n    */\\n    function isAuthorized(address auth) external override view returns(bool){\\n        return _authorized[auth];\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/venimir/Venimir/qredo-token/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"/home/venimir/Venimir/qredo-token/interfaces/IAuthorizable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\ninterface IAuthorizable {\\n    function addAuthorized(address _toAdd) external returns (bool);\\n    function removeAuthorized(address _toRemove) external returns (bool);\\n    function isAuthorized(address _auth) external view returns (bool);\\n\\n    event Authorized(address indexed auth, bool isAuthorized);\\n}\"\r\n    },\r\n    \"/home/venimir/Venimir/qredo-token/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\ninterface IERC20 {\\n    //*************************************************** PUBLIC ***************************************************//\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function increaseAllowance(address spender,uint256 addedValue) external returns (bool);\\n    function decreaseAllowance(address spender,uint256 subtractedValue) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function mint(address to, uint256 value) external returns (bool);\\n    function burn(uint256 amount) external returns (bool);\\n    \\n    //*************************************************** VIEWS ***************************************************//\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function circulatingSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    //*************************************************** EVENTS ***************************************************//\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"/home/venimir/Venimir/qredo-token/libraries/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"auth\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAuthorized\",\"type\":\"bool\"}],\"name\":\"Authorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"auth\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"remove\",\"type\":\"address\"}],\"name\":\"removeAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"QredoToken","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000002c68af0bb140000000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000000000000000000b517265646f20546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045152444f00000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}