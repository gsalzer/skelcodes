{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n *\r\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\r\n * metering changes introduced in the Istanbul hardfork.\r\n */\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: multi-token-standard/contracts/interfaces/IERC165.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface IERC165 {\r\n\r\n    /**\r\n     * @notice Query if a contract implements an interface\r\n     * @dev Interface identification is specified in ERC-165. This function\r\n     * uses less than 30,000 gas\r\n     * @param _interfaceId The interface identifier, as specified in ERC-165\r\n     */\r\n    function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n// File: multi-token-standard/contracts/utils/SafeMath.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n   * @dev Multiplies two unsigned integers, reverts on overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath#mul: OVERFLOW\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, \"SafeMath#div: DIVISION_BY_ZERO\");\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"SafeMath#sub: UNDERFLOW\");\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds two unsigned integers, reverts on overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath#add: OVERFLOW\");\r\n\r\n    return c; \r\n  }\r\n\r\n  /**\r\n   * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n   * reverts when dividing by zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \"SafeMath#mod: DIVISION_BY_ZERO\");\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: multi-token-standard/contracts/interfaces/IERC1155TokenReceiver.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n/**\r\n * @dev ERC-1155 interface for accepting safe transfers.\r\n */\r\ninterface IERC1155TokenReceiver {\r\n\r\n  /**\r\n   * @notice Handle the receipt of a single ERC1155 token type\r\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\r\n   * This function MAY throw to revert and reject the transfer\r\n   * Return of other amount than the magic value MUST result in the transaction being reverted\r\n   * Note: The token contract address is always the message sender\r\n   * @param _operator  The address which called the `safeTransferFrom` function\r\n   * @param _from      The address which previously owned the token\r\n   * @param _id        The id of the token being transferred\r\n   * @param _amount    The amount of tokens being transferred\r\n   * @param _data      Additional data with no specified format\r\n   * @return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n   */\r\n  function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data) external returns(bytes4);\r\n\r\n  /**\r\n   * @notice Handle the receipt of multiple ERC1155 token types\r\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\r\n   * This function MAY throw to revert and reject the transfer\r\n   * Return of other amount than the magic value WILL result in the transaction being reverted\r\n   * Note: The token contract address is always the message sender\r\n   * @param _operator  The address which called the `safeBatchTransferFrom` function\r\n   * @param _from      The address which previously owned the token\r\n   * @param _ids       An array containing ids of each token being transferred\r\n   * @param _amounts   An array containing amounts of each token being transferred\r\n   * @param _data      Additional data with no specified format\r\n   * @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n   */\r\n  function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4);\r\n\r\n  /**\r\n   * @notice Indicates whether a contract implements the `ERC1155TokenReceiver` functions and so can accept ERC1155 token types.\r\n   * @param  interfaceID The ERC-165 interface ID that is queried for support.s\r\n   * @dev This function MUST return true if it implements the ERC1155TokenReceiver interface and ERC-165 interface.\r\n   *      This function MUST NOT consume more than 5,000 gas.\r\n   * @return Whether ERC-165 or ERC1155TokenReceiver interfaces are supported.\r\n   */\r\n  function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\n// File: multi-token-standard/contracts/interfaces/IERC1155.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\ninterface IERC1155 {\r\n\r\n  /****************************************|\r\n  |                 Events                 |\r\n  |_______________________________________*/\r\n\r\n  /**\r\n   * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\r\n   *   Operator MUST be msg.sender\r\n   *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\r\n   *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\r\n   *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \"circulating supply\" for a given token ID\r\n   *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\r\n   */\r\n  event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _amount);\r\n\r\n  /**\r\n   * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\r\n   *   Operator MUST be msg.sender\r\n   *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\r\n   *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\r\n   *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \"circulating supply\" for a given token ID\r\n   *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\r\n   */\r\n  event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _amounts);\r\n\r\n  /**\r\n   * @dev MUST emit when an approval is updated\r\n   */\r\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n  /**\r\n   * @dev MUST emit when the URI is updated for a token ID\r\n   *   URIs are defined in RFC 3986\r\n   *   The URI MUST point a JSON file that conforms to the \"ERC-1155 Metadata JSON Schema\"\r\n   */\r\n  event URI(string _amount, uint256 indexed _id);\r\n\r\n\r\n  /****************************************|\r\n  |                Functions               |\r\n  |_______________________________________*/\r\n\r\n  /**\r\n    * @notice Transfers amount of an _id from the _from address to the _to address specified\r\n    * @dev MUST emit TransferSingle event on success\r\n    * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\r\n    * MUST throw if `_to` is the zero address\r\n    * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\r\n    * MUST throw on any other error\r\n    * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n    * @param _from    Source address\r\n    * @param _to      Target address\r\n    * @param _id      ID of the token type\r\n    * @param _amount  Transfered amount\r\n    * @param _data    Additional data with no specified format, sent in call to `_to`\r\n    */\r\n  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;\r\n\r\n  /**\r\n    * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\r\n    * @dev MUST emit TransferBatch event on success\r\n    * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\r\n    * MUST throw if `_to` is the zero address\r\n    * MUST throw if length of `_ids` is not the same as length of `_amounts`\r\n    * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\r\n    * MUST throw on any other error\r\n    * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n    * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\r\n    * @param _from     Source addresses\r\n    * @param _to       Target addresses\r\n    * @param _ids      IDs of each token type\r\n    * @param _amounts  Transfer amounts per token type\r\n    * @param _data     Additional data with no specified format, sent in call to `_to`\r\n  */\r\n  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;\r\n\r\n  /**\r\n   * @notice Get the balance of an account's Tokens\r\n   * @param _owner  The address of the token holder\r\n   * @param _id     ID of the Token\r\n   * @return        The _owner's balance of the Token type requested\r\n   */\r\n  function balanceOf(address _owner, uint256 _id) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Get the balance of multiple account/token pairs\r\n   * @param _owners The addresses of the token holders\r\n   * @param _ids    ID of the Tokens\r\n   * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\r\n   */\r\n  function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\r\n\r\n  /**\r\n   * @notice Enable or disable approval for a third party (\"operator\") to manage all of caller's tokens\r\n   * @dev MUST emit the ApprovalForAll event on success\r\n   * @param _operator  Address to add to the set of authorized operators\r\n   * @param _approved  True if the operator is approved, false to revoke approval\r\n   */\r\n  function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n  /**\r\n   * @notice Queries the approval status of an operator for a given owner\r\n   * @param _owner     The owner of the Tokens\r\n   * @param _operator  Address of authorized operator\r\n   * @return           True if the operator is approved, false if not\r\n   */\r\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);\r\n}\r\n\r\n// File: multi-token-standard/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n\r\n  // Default hash for EOA accounts returned by extcodehash\r\n  bytes32 constant internal ACCOUNT_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract.\r\n   * @param _address address of the account to check\r\n   * @return Whether the target address is a contract\r\n   */\r\n  function isContract(address _address) internal view returns (bool) {\r\n    bytes32 codehash;\r\n\r\n    // Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address or if it has a non-zero code hash or account hash\r\n    assembly { codehash := extcodehash(_address) }\r\n    return (codehash != 0x0 && codehash != ACCOUNT_HASH);\r\n  }\r\n}\r\n\r\n// File: multi-token-standard/contracts/tokens/ERC1155/ERC1155.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of Multi-Token Standard contract\r\n */\r\ncontract ERC1155 is IERC165, IERC1155 {\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n  /***********************************|\r\n  |        Variables and Events       |\r\n  |__________________________________*/\r\n\r\n  // onReceive function signatures\r\n  bytes4 constant internal ERC1155_RECEIVED_VALUE = 0xf23a6e61;\r\n  bytes4 constant internal ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\r\n\r\n  // Objects balances\r\n  mapping (address => mapping(uint256 => uint256)) internal balances;\r\n\r\n  // Operator Functions\r\n  mapping (address => mapping(address => bool)) internal operators;\r\n\r\n\r\n  /***********************************|\r\n  |     Public Transfer Functions     |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\r\n   * @param _from    Source address\r\n   * @param _to      Target address\r\n   * @param _id      ID of the token type\r\n   * @param _amount  Transfered amount\r\n   * @param _data    Additional data with no specified format, sent in call to `_to`\r\n   */\r\n  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data)\r\n    public\r\n  {\r\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \"ERC1155#safeTransferFrom: INVALID_OPERATOR\");\r\n    require(_to != address(0),\"ERC1155#safeTransferFrom: INVALID_RECIPIENT\");\r\n    // require(_amount <= balances[_from][_id]) is not necessary since checked with safemath operations\r\n\r\n    _safeTransferFrom(_from, _to, _id, _amount);\r\n    _callonERC1155Received(_from, _to, _id, _amount, gasleft(), _data);\r\n  }\r\n\r\n  /**\r\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\r\n   * @param _from     Source addresses\r\n   * @param _to       Target addresses\r\n   * @param _ids      IDs of each token type\r\n   * @param _amounts  Transfer amounts per token type\r\n   * @param _data     Additional data with no specified format, sent in call to `_to`\r\n   */\r\n  function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\r\n    public\r\n  {\r\n    // Requirements\r\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \"ERC1155#safeBatchTransferFrom: INVALID_OPERATOR\");\r\n    require(_to != address(0), \"ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT\");\r\n\r\n    _safeBatchTransferFrom(_from, _to, _ids, _amounts);\r\n    _callonERC1155BatchReceived(_from, _to, _ids, _amounts, gasleft(), _data);\r\n  }\r\n\r\n\r\n  /***********************************|\r\n  |    Internal Transfer Functions    |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\r\n   * @param _from    Source address\r\n   * @param _to      Target address\r\n   * @param _id      ID of the token type\r\n   * @param _amount  Transfered amount\r\n   */\r\n  function _safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount)\r\n    internal\r\n  {\r\n    // Update balances\r\n    balances[_from][_id] = balances[_from][_id].sub(_amount); // Subtract amount\r\n    balances[_to][_id] = balances[_to][_id].add(_amount);     // Add amount\r\n\r\n    // Emit event\r\n    emit TransferSingle(msg.sender, _from, _to, _id, _amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155Received(...)\r\n   */\r\n  function _callonERC1155Received(address _from, address _to, uint256 _id, uint256 _amount, uint256 _gasLimit, bytes memory _data)\r\n    internal\r\n  {\r\n    // Check if recipient is contract\r\n    if (_to.isContract()) {\r\n      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155Received.gas(_gasLimit)(msg.sender, _from, _id, _amount, _data);\r\n      require(retval == ERC1155_RECEIVED_VALUE, \"ERC1155#_callonERC1155Received: INVALID_ON_RECEIVE_MESSAGE\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\r\n   * @param _from     Source addresses\r\n   * @param _to       Target addresses\r\n   * @param _ids      IDs of each token type\r\n   * @param _amounts  Transfer amounts per token type\r\n   */\r\n  function _safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts)\r\n    internal\r\n  {\r\n    require(_ids.length == _amounts.length, \"ERC1155#_safeBatchTransferFrom: INVALID_ARRAYS_LENGTH\");\r\n\r\n    // Number of transfer to execute\r\n    uint256 nTransfer = _ids.length;\r\n\r\n    // Executing all transfers\r\n    for (uint256 i = 0; i < nTransfer; i++) {\r\n      // Update storage balance of previous bin\r\n      balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);\r\n      balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\r\n    }\r\n\r\n    // Emit event\r\n    emit TransferBatch(msg.sender, _from, _to, _ids, _amounts);\r\n  }\r\n\r\n  /**\r\n   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155BatchReceived(...)\r\n   */\r\n  function _callonERC1155BatchReceived(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, uint256 _gasLimit, bytes memory _data)\r\n    internal\r\n  {\r\n    // Pass data if recipient is contract\r\n    if (_to.isContract()) {\r\n      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155BatchReceived.gas(_gasLimit)(msg.sender, _from, _ids, _amounts, _data);\r\n      require(retval == ERC1155_BATCH_RECEIVED_VALUE, \"ERC1155#_callonERC1155BatchReceived: INVALID_ON_RECEIVE_MESSAGE\");\r\n    }\r\n  }\r\n\r\n\r\n  /***********************************|\r\n  |         Operator Functions        |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Enable or disable approval for a third party (\"operator\") to manage all of caller's tokens\r\n   * @param _operator  Address to add to the set of authorized operators\r\n   * @param _approved  True if the operator is approved, false to revoke approval\r\n   */\r\n  function setApprovalForAll(address _operator, bool _approved)\r\n    external\r\n  {\r\n    // Update operator status\r\n    operators[msg.sender][_operator] = _approved;\r\n    emit ApprovalForAll(msg.sender, _operator, _approved);\r\n  }\r\n\r\n  /**\r\n   * @notice Queries the approval status of an operator for a given owner\r\n   * @param _owner     The owner of the Tokens\r\n   * @param _operator  Address of authorized operator\r\n   * @return True if the operator is approved, false if not\r\n   */\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool isOperator)\r\n  {\r\n    return operators[_owner][_operator];\r\n  }\r\n\r\n\r\n  /***********************************|\r\n  |         Balance Functions         |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Get the balance of an account's Tokens\r\n   * @param _owner  The address of the token holder\r\n   * @param _id     ID of the Token\r\n   * @return The _owner's balance of the Token type requested\r\n   */\r\n  function balanceOf(address _owner, uint256 _id)\r\n    public view returns (uint256)\r\n  {\r\n    return balances[_owner][_id];\r\n  }\r\n\r\n  /**\r\n   * @notice Get the balance of multiple account/token pairs\r\n   * @param _owners The addresses of the token holders\r\n   * @param _ids    ID of the Tokens\r\n   * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\r\n   */\r\n  function balanceOfBatch(address[] memory _owners, uint256[] memory _ids)\r\n    public view returns (uint256[] memory)\r\n  {\r\n    require(_owners.length == _ids.length, \"ERC1155#balanceOfBatch: INVALID_ARRAY_LENGTH\");\r\n\r\n    // Variables\r\n    uint256[] memory batchBalances = new uint256[](_owners.length);\r\n\r\n    // Iterate over each owner and token ID\r\n    for (uint256 i = 0; i < _owners.length; i++) {\r\n      batchBalances[i] = balances[_owners[i]][_ids[i]];\r\n    }\r\n\r\n    return batchBalances;\r\n  }\r\n\r\n\r\n  /***********************************|\r\n  |          ERC165 Functions         |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * INTERFACE_SIGNATURE_ERC165 = bytes4(keccak256(\"supportsInterface(bytes4)\"));\r\n   */\r\n  bytes4 constant private INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\r\n\r\n  /**\r\n   * INTERFACE_SIGNATURE_ERC1155 =\r\n   * bytes4(keccak256(\"safeTransferFrom(address,address,uint256,uint256,bytes)\")) ^\r\n   * bytes4(keccak256(\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\")) ^\r\n   * bytes4(keccak256(\"balanceOf(address,uint256)\")) ^\r\n   * bytes4(keccak256(\"balanceOfBatch(address[],uint256[])\")) ^\r\n   * bytes4(keccak256(\"setApprovalForAll(address,bool)\")) ^\r\n   * bytes4(keccak256(\"isApprovedForAll(address,address)\"));\r\n   */\r\n  bytes4 constant private INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceID  The interface identifier, as specified in ERC-165\r\n   * @return `true` if the contract implements `_interfaceID` and\r\n   */\r\n  function supportsInterface(bytes4 _interfaceID) external view returns (bool) {\r\n    if (_interfaceID == INTERFACE_SIGNATURE_ERC165 ||\r\n        _interfaceID == INTERFACE_SIGNATURE_ERC1155) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n// File: multi-token-standard/contracts/tokens/ERC1155/ERC1155MintBurn.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\n/**\r\n * @dev Multi-Fungible Tokens with minting and burning methods. These methods assume\r\n *      a parent contract to be executed as they are `internal` functions\r\n */\r\ncontract ERC1155MintBurn is ERC1155 {\r\n\r\n  /****************************************|\r\n  |            Minting Functions           |\r\n  |_______________________________________*/\r\n\r\n  /**\r\n   * @notice Mint _amount of tokens of a given id\r\n   * @param _to      The address to mint tokens to\r\n   * @param _id      Token id to mint\r\n   * @param _amount  The amount to be minted\r\n   * @param _data    Data to pass if receiver is contract\r\n   */\r\n  function _mint(address _to, uint256 _id, uint256 _amount, bytes memory _data)\r\n    internal\r\n  {\r\n    // Add _amount\r\n    balances[_to][_id] = balances[_to][_id].add(_amount);\r\n\r\n    // Emit event\r\n    emit TransferSingle(msg.sender, address(0x0), _to, _id, _amount);\r\n\r\n    // Calling onReceive method if recipient is contract\r\n    _callonERC1155Received(address(0x0), _to, _id, _amount, gasleft(), _data);\r\n  }\r\n\r\n  /**\r\n   * @notice Mint tokens for each ids in _ids\r\n   * @param _to       The address to mint tokens to\r\n   * @param _ids      Array of ids to mint\r\n   * @param _amounts  Array of amount of tokens to mint per id\r\n   * @param _data    Data to pass if receiver is contract\r\n   */\r\n  function _batchMint(address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\r\n    internal\r\n  {\r\n    require(_ids.length == _amounts.length, \"ERC1155MintBurn#batchMint: INVALID_ARRAYS_LENGTH\");\r\n\r\n    // Number of mints to execute\r\n    uint256 nMint = _ids.length;\r\n\r\n     // Executing all minting\r\n    for (uint256 i = 0; i < nMint; i++) {\r\n      // Update storage balance\r\n      balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\r\n    }\r\n\r\n    // Emit batch mint event\r\n    emit TransferBatch(msg.sender, address(0x0), _to, _ids, _amounts);\r\n\r\n    // Calling onReceive method if recipient is contract\r\n    _callonERC1155BatchReceived(address(0x0), _to, _ids, _amounts, gasleft(), _data);\r\n  }\r\n\r\n\r\n  /****************************************|\r\n  |            Burning Functions           |\r\n  |_______________________________________*/\r\n\r\n  /**\r\n   * @notice Burn _amount of tokens of a given token id\r\n   * @param _from    The address to burn tokens from\r\n   * @param _id      Token id to burn\r\n   * @param _amount  The amount to be burned\r\n   */\r\n  function _burn(address _from, uint256 _id, uint256 _amount)\r\n    internal\r\n  {\r\n    //Substract _amount\r\n    balances[_from][_id] = balances[_from][_id].sub(_amount);\r\n\r\n    // Emit event\r\n    emit TransferSingle(msg.sender, _from, address(0x0), _id, _amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\r\n   * @param _from     The address to burn tokens from\r\n   * @param _ids      Array of token ids to burn\r\n   * @param _amounts  Array of the amount to be burned\r\n   */\r\n  function _batchBurn(address _from, uint256[] memory _ids, uint256[] memory _amounts)\r\n    internal\r\n  {\r\n    // Number of mints to execute\r\n    uint256 nBurn = _ids.length;\r\n    require(nBurn == _amounts.length, \"ERC1155MintBurn#batchBurn: INVALID_ARRAYS_LENGTH\");\r\n\r\n    // Executing all minting\r\n    for (uint256 i = 0; i < nBurn; i++) {\r\n      // Update storage balance\r\n      balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);\r\n    }\r\n\r\n    // Emit batch mint event\r\n    emit TransferBatch(msg.sender, _from, address(0x0), _ids, _amounts);\r\n  }\r\n}\r\n\r\n// File: contracts/ERC1155Tradable.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\ncontract OwnableDelegateProxy {}\r\n\r\ncontract ProxyRegistry {\r\n    mapping(address => OwnableDelegateProxy) public proxies;\r\n}\r\n\r\n/**\r\n * @title ERC1155Tradable\r\n * ERC1155Tradable - ERC1155 contract that whitelists an operator address, has create and mint functionality, and supports useful standards from OpenZeppelin,\r\n  like exists(), name(), symbol(), and totalSupply()\r\n */\r\ncontract ERC1155Tradable is ERC1155MintBurn, Ownable {\r\n    // Proxy registry address\r\n    address public proxyRegistryAddress;\r\n    // Contract name\r\n    string public name;\r\n    // Contract symbol\r\n    string public symbol;\r\n\r\n    mapping(uint256 => uint256) private _supply;\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address _proxyRegistryAddress\r\n    ) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        proxyRegistryAddress = _proxyRegistryAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner or their proxy\r\n     */\r\n    modifier onlyOwner() {\r\n        require(\r\n            _isOwner(_msgSender()),\r\n            \"ERC1155Tradable#onlyOwner: CALLER_IS_NOT_OWNER\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total quantity for a token ID\r\n     * @param _id uint256 ID of the token to query\r\n     * @return amount of token in existence\r\n     */\r\n    function totalSupply(uint256 _id) public view returns (uint256) {\r\n        return _supply[_id];\r\n    }\r\n\r\n    /**\r\n     * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-free listings.\r\n     */\r\n    function isApprovedForAll(address _owner, address _operator)\r\n        public\r\n        view\r\n        returns (bool isOperator)\r\n    {\r\n        // Whitelist OpenSea proxy contracts for easy trading.\r\n        if (_isProxyForUser(_owner, _operator)) {\r\n            return true;\r\n        }\r\n\r\n        return super.isApprovedForAll(_owner, _operator);\r\n    }\r\n\r\n    /**\r\n     * @dev Mints some amount of tokens to an address\r\n     * @param _to          Address of the future owner of the token\r\n     * @param _id          Token ID to mint\r\n     * @param _quantity    Amount of tokens to mint\r\n     * @param _data        Data to pass if receiver is contract\r\n     */\r\n    function mint(\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _quantity,\r\n        bytes memory _data\r\n    ) public onlyOwner {\r\n        _mint(_to, _id, _quantity, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Mint tokens for each id in _ids\r\n     * @param _to          The address to mint tokens to\r\n     * @param _ids         Array of ids to mint\r\n     * @param _quantities  Array of amounts of tokens to mint per id\r\n     * @param _data        Data to pass if receiver is contract\r\n     */\r\n    function batchMint(\r\n        address _to,\r\n        uint256[] memory _ids,\r\n        uint256[] memory _quantities,\r\n        bytes memory _data\r\n    ) public onlyOwner {\r\n        _batchMint(_to, _ids, _quantities, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns amount of a given token id\r\n     * @param _from          The address to burn tokens from\r\n     * @param _id          Token ID to burn\r\n     * @param _quantity    Amount to burn\r\n     */\r\n    function burn(\r\n        address _from,\r\n        uint256 _id,\r\n        uint256 _quantity\r\n    ) public {\r\n        _supply[_id] = _supply[_id].sub(_quantity);\r\n        _burn(_from, _id, _quantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns tokens for each id in _ids\r\n     * @param _from          The address to burn tokens from\r\n     * @param _ids         Array of token ids to burn\r\n     * @param _quantities  Array of the amount to be burned\r\n     */\r\n    function batchBurn(\r\n        address _from,\r\n        uint256[] memory _ids,\r\n        uint256[] memory _quantities\r\n    ) public {\r\n        for (uint256 i = 0; i < _ids.length; i++) {\r\n            uint256 id = _ids[i];\r\n            _supply[id] = _supply[id].sub(_quantities[i]);\r\n        }\r\n        _batchBurn(_from, _ids, _quantities);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the specified token is minted\r\n     * @param _id uint256 ID of the token to query the existence of\r\n     * @return bool whether the token exists\r\n     */\r\n    function exists(uint256 _id) public view returns (bool) {\r\n        return _supply[_id] > 0;\r\n    }\r\n\r\n    function _isOwner(address _address) internal view returns (bool) {\r\n        return owner() == _address || _isProxyForUser(owner(), _address);\r\n    }\r\n\r\n    // Overrides ERC1155MintBurn to allow changing birth events to creator transfers,\r\n    // and to set _supply\r\n    function _mint(\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _amount,\r\n        bytes memory _data\r\n    ) internal {\r\n        // Add _amount\r\n        balances[_to][_id] = balances[_to][_id].add(_amount);\r\n        _supply[_id] = _supply[_id].add(_amount);\r\n\r\n        // Origin of token will be the _from parameter\r\n        address origin = _origin(_id);\r\n\r\n        // Emit event\r\n        emit TransferSingle(msg.sender, origin, _to, _id, _amount);\r\n\r\n        // Calling onReceive method if recipient is contract\r\n        _callonERC1155Received(origin, _to, _id, _amount, gasleft(), _data);\r\n    }\r\n\r\n    // Overrides ERC1155MintBurn to change the batch birth events to creator transfers, and to set _supply\r\n    function _batchMint(\r\n        address _to,\r\n        uint256[] memory _ids,\r\n        uint256[] memory _amounts,\r\n        bytes memory _data\r\n    ) internal {\r\n        require(\r\n            _ids.length == _amounts.length,\r\n            \"ERC1155Tradable#batchMint: INVALID_ARRAYS_LENGTH\"\r\n        );\r\n\r\n        // Number of mints to execute\r\n        uint256 nMint = _ids.length;\r\n\r\n        // Origin of tokens will be the _from parameter\r\n        address origin = _origin(_ids[0]);\r\n\r\n        // Executing all minting\r\n        for (uint256 i = 0; i < nMint; i++) {\r\n            // Update storage balance\r\n            uint256 id = _ids[i];\r\n            require(\r\n                _origin(id) == origin,\r\n                \"ERC1155Tradable#batchMint: MULTIPLE_ORIGINS_NOT_ALLOWED\"\r\n            );\r\n            balances[_to][id] = balances[_to][id].add(_amounts[i]);\r\n            _supply[id] = _supply[id].add(_amounts[i]);\r\n        }\r\n\r\n        // Emit batch mint event\r\n        emit TransferBatch(msg.sender, origin, _to, _ids, _amounts);\r\n\r\n        // Calling onReceive method if recipient is contract\r\n        _callonERC1155BatchReceived(\r\n            origin,\r\n            _to,\r\n            _ids,\r\n            _amounts,\r\n            gasleft(),\r\n            _data\r\n        );\r\n    }\r\n\r\n    // Override this to change birth events' _from address\r\n    function _origin(\r\n        uint256 /* _id */\r\n    ) internal view returns (address) {\r\n        return address(0);\r\n    }\r\n\r\n    // PROXY HELPER METHODS\r\n\r\n    function _isProxyForUser(address _user, address _address)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _proxy(_user) == _address;\r\n    }\r\n\r\n    function _proxy(address _address) internal view returns (address) {\r\n        ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\r\n        return address(proxyRegistry.proxies(_address));\r\n    }\r\n}\r\n\r\n// File: contracts/AssetContract.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n/**\r\n * @title AssetContract\r\n * AssetContract - A contract for easily creating non-fungible assets.\r\n */\r\ncontract AssetContract is ERC1155Tradable {\r\n    event URI(string _value, uint256 indexed _id);\r\n    event PermanentURI(string _value, uint256 indexed _id);\r\n\r\n    uint256 constant TOKEN_SUPPLY_CAP = 1;\r\n\r\n    string public templateURI;\r\n\r\n    // Optional mapping for token URIs\r\n    mapping(uint256 => string) private _tokenURI;\r\n\r\n    // Mapping for whether a token URI is set permanently\r\n    mapping(uint256 => bool) private _isPermanentURI;\r\n\r\n    modifier onlyTokenAmountOwned(address _from, uint256 _id, uint256 _quantity) {\r\n        require(\r\n            _ownsTokenAmount(_from, _id, _quantity),\r\n            \"AssetContract#onlyTokenAmountOwned: ONLY_TOKEN_AMOUNT_OWNED_ALLOWED\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Require the URI to be impermanent\r\n     */\r\n    modifier onlyImpermanentURI(uint256 id) {\r\n        require(!_isPermanentURI[id], \"AssetContract#onlyImpermanentURI: URI_CANNOT_BE_CHANGED\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address _proxyRegistryAddress,\r\n        string memory _templateURI\r\n    ) public ERC1155Tradable(_name, _symbol, _proxyRegistryAddress) {\r\n        if (bytes(_templateURI).length > 0) {\r\n            setTemplateURI(_templateURI);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Require _from to own a specified quantity of the token\r\n     */\r\n    function _ownsTokenAmount(address _from, uint256 _id, uint256 _quantity) internal view returns (bool) {\r\n        return balanceOf(_from, _id) >= _quantity;\r\n    }\r\n\r\n    /**\r\n     * Compat for factory interfaces on OpenSea\r\n     * Indicates that this contract can return balances for\r\n     * tokens that haven't been minted yet\r\n     */\r\n    function supportsFactoryInterface() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function setTemplateURI(string memory uri) public onlyOwner {\r\n        templateURI = uri;\r\n    }\r\n\r\n    function setURI(uint256 _id, string memory _uri) public onlyOwner onlyImpermanentURI(_id) {\r\n        _setURI(_id, _uri);\r\n    }\r\n\r\n    function setPermanentURI(uint256 _id, string memory _uri) public onlyOwner onlyImpermanentURI(_id) {\r\n        _setPermanentURI(_id, _uri);\r\n    }\r\n\r\n    function uri(uint256 _id) public view returns (string memory) {\r\n        string memory tokenUri = _tokenURI[_id];\r\n        if (bytes(tokenUri).length != 0) {\r\n            return tokenUri;\r\n        }\r\n        return templateURI;\r\n    }\r\n\r\n    function balanceOf(address _owner, uint256 _id)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 balance = super.balanceOf(_owner, _id);\r\n        return\r\n            _isCreatorOrProxy(_id, _owner)\r\n                ? balance.add(_remainingSupply(_id))\r\n                : balance;\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _amount,\r\n        bytes memory _data\r\n    ) public {\r\n        uint256 mintedBalance = super.balanceOf(_from, _id);\r\n        if (mintedBalance < _amount) {\r\n            // Only mint what _from doesn't already have\r\n            mint(_to, _id, _amount.sub(mintedBalance), _data);\r\n            if (mintedBalance > 0) {\r\n                super.safeTransferFrom(_from, _to, _id, mintedBalance, _data);\r\n            }\r\n        } else {\r\n            super.safeTransferFrom(_from, _to, _id, _amount, _data);\r\n        }\r\n    }\r\n\r\n    function safeBatchTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256[] memory _ids,\r\n        uint256[] memory _amounts,\r\n        bytes memory _data\r\n    ) public {\r\n        require(\r\n            _ids.length == _amounts.length,\r\n            \"AssetContractShared#safeBatchTransferFrom: INVALID_ARRAYS_LENGTH\"\r\n        );\r\n        for (uint256 i = 0; i < _ids.length; i++) {\r\n            safeTransferFrom(_from, _to, _ids[i], _amounts[i], _data);\r\n        }\r\n    }\r\n\r\n    function mint(\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _quantity,\r\n        bytes memory _data\r\n    ) public onlyOwner {\r\n        require(\r\n            _quantity <= _remainingSupply(_id),\r\n            \"AssetContract#mint: QUANTITY_EXCEEDS_TOKEN_SUPPLY_CAP\"\r\n        );\r\n        _mint(_to, _id, _quantity, _data);\r\n    }\r\n\r\n    function batchMint(\r\n        address _to,\r\n        uint256[] memory _ids,\r\n        uint256[] memory _quantities,\r\n        bytes memory _data\r\n    ) public onlyOwner {\r\n        for (uint256 i = 0; i < _ids.length; i++) {\r\n            require(\r\n                _quantities[i] <= _remainingSupply(_ids[i]),\r\n                \"AssetContract#batchMint: QUANTITY_EXCEEDS_TOKEN_SUPPLY_CAP\"\r\n            );\r\n        }\r\n        _batchMint(_to, _ids, _quantities, _data);\r\n    }\r\n\r\n\r\n    // Overrides ERC1155Tradable burn to check for quantity owned\r\n    function burn(\r\n        address _from,\r\n        uint256 _id,\r\n        uint256 _quantity\r\n    ) public onlyTokenAmountOwned(_from, _id, _quantity) {\r\n        super.burn(_from, _id, _quantity);\r\n    }\r\n\r\n    // Overrides ERC1155Tradable batchBurn to check for quantity owned\r\n    function batchBurn(\r\n        address _from,\r\n        uint256[] memory _ids,\r\n        uint256[] memory _quantities\r\n    ) public {\r\n        for (uint256 i = 0; i < _ids.length; i++) {\r\n            require(\r\n                _ownsTokenAmount(_from, _ids[i], _quantities[i]),\r\n                \"AssetContract#batchBurn: ONLY_TOKEN_AMOUNT_OWNED_ALLOWED\"\r\n            );\r\n        }\r\n        super.batchBurn(_from, _ids, _quantities);\r\n    }\r\n\r\n    function _mint(\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _quantity,\r\n        bytes memory _data\r\n    ) internal {\r\n        super._mint(_to, _id, _quantity, _data);\r\n        if (_data.length > 1) {\r\n            _setURI(_id, string(_data));\r\n        }\r\n    }\r\n\r\n    function _isCreatorOrProxy(uint256, address _address)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _isOwner(_address);\r\n    }\r\n\r\n    function _remainingSupply(uint256 _id) internal view returns (uint256) {\r\n        return TOKEN_SUPPLY_CAP.sub(totalSupply(_id));\r\n    }\r\n\r\n    // Override ERC1155Tradable for birth events\r\n    function _origin(\r\n        uint256 /* _id */\r\n    ) internal view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    function _batchMint(\r\n        address _to,\r\n        uint256[] memory _ids,\r\n        uint256[] memory _quantities,\r\n        bytes memory _data\r\n    ) internal {\r\n        super._batchMint(_to, _ids, _quantities, _data);\r\n        if (_data.length > 1) {\r\n            for (uint256 i = 0; i < _ids.length; i++) {\r\n                _setURI(_ids[i], string(_data));\r\n            }\r\n        }\r\n    }\r\n\r\n    function _setURI(uint256 _id, string memory _uri) internal {\r\n        _tokenURI[_id] = _uri;\r\n        emit URI(_uri, _id);\r\n    }\r\n\r\n    function _setPermanentURI(uint256 _id, string memory _uri) internal {\r\n        _isPermanentURI[_id] = true;\r\n        _setURI(_id, _uri);\r\n        emit PermanentURI(_uri, _id);\r\n    }\r\n}\r\n\r\n// File: contracts/TokenIdentifiers.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n/*\r\n  DESIGN NOTES:\r\n  Token ids are a concatenation of:\r\n * creator: hex address of the creator of the token. 160 bits\r\n * index: Index for this token (the regular ID), up to 2^56 - 1. 56 bits\r\n * supply: Supply cap for this token, up to 2^40 - 1 (1 trillion).  40 bits\r\n\r\n*/\r\n/**\r\n * @title TokenIdentifiers\r\n * support for authentication and metadata for token ids\r\n */\r\nlibrary TokenIdentifiers {\r\n    using SafeMath for uint256;\r\n\r\n    uint8 constant ADDRESS_BITS = 160;\r\n    uint8 constant INDEX_BITS = 56;\r\n    uint8 constant SUPPLY_BITS = 40;\r\n\r\n    uint256 constant SUPPLY_MASK = (uint256(1) << SUPPLY_BITS) - 1;\r\n    uint256 constant INDEX_MASK = ((uint256(1) << INDEX_BITS) - 1) ^\r\n        SUPPLY_MASK;\r\n\r\n    function tokenMaxSupply(uint256 _id) internal pure returns (uint256) {\r\n        return _id & SUPPLY_MASK;\r\n    }\r\n\r\n    function tokenIndex(uint256 _id) internal pure returns (uint256) {\r\n        return _id & INDEX_MASK;\r\n    }\r\n\r\n    function tokenCreator(uint256 _id) internal pure returns (address) {\r\n        return address(_id >> (INDEX_BITS + SUPPLY_BITS));\r\n    }\r\n}\r\n\r\n// File: contracts/AssetContractShared.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title NiftyPlanet\r\n * NiftyPlanet shared asset contract\r\n */\r\ncontract NiftyPlanet is AssetContract, ReentrancyGuard {\r\n    mapping(address => bool) public sharedProxyAddresses;\r\n    using SafeMath for uint256;\r\n    using TokenIdentifiers for uint256;\r\n\r\n    event CreatorChanged(uint256 indexed _id, address indexed _creator);\r\n\r\n    mapping(uint256 => address) internal _creatorOverride;\r\n\r\n    /**\r\n     * @dev Require msg.sender to be the creator of the token id\r\n     */\r\n    modifier creatorOnly(uint256 _id) {\r\n        require(\r\n            _isCreatorOrProxy(_id, _msgSender()),\r\n            \"AssetContractShared#creatorOnly: ONLY_CREATOR_ALLOWED\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Require the caller to own the full supply of the token\r\n     */\r\n    modifier onlyFullTokenOwner(uint256 _id) {\r\n        require(\r\n            _ownsTokenAmount(_msgSender(), _id, _id.tokenMaxSupply()),\r\n            \"AssetContractShared#onlyFullTokenOwner: ONLY_FULL_TOKEN_OWNER_ALLOWED\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address _proxyRegistryAddress,\r\n        string memory _templateURI\r\n    )\r\n        public\r\n        AssetContract(_name, _symbol, _proxyRegistryAddress, _templateURI)\r\n    {}\r\n\r\n    /**\r\n     * @dev Allows owner to change the proxy registry\r\n     */\r\n    function setProxyRegistryAddress(address _address) public onlyOwner {\r\n        proxyRegistryAddress = _address;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows owner to add a shared proxy address\r\n     */\r\n    function addSharedProxyAddress(address _address) public onlyOwner {\r\n        sharedProxyAddresses[_address] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows owner to remove a shared proxy address\r\n     */\r\n    function removeSharedProxyAddress(address _address) public onlyOwner {\r\n        delete sharedProxyAddresses[_address];\r\n    }\r\n\r\n    function mint(\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _quantity,\r\n        bytes memory _data\r\n    ) public nonReentrant() {\r\n        _requireMintable(_msgSender(), _id, _quantity);\r\n        _mint(_to, _id, _quantity, _data);\r\n    }\r\n\r\n    function batchMint(\r\n        address _to,\r\n        uint256[] memory _ids,\r\n        uint256[] memory _quantities,\r\n        bytes memory _data\r\n    ) public nonReentrant() {\r\n        for (uint256 i = 0; i < _ids.length; i++) {\r\n            _requireMintable(_msgSender(), _ids[i], _quantities[i]);\r\n        }\r\n        _batchMint(_to, _ids, _quantities, _data);\r\n    }\r\n\r\n    /////////////////////////////////\r\n    // CONVENIENCE CREATOR METHODS //\r\n    /////////////////////////////////\r\n\r\n    /**\r\n     * @dev Will update the URI for the token\r\n     * @param _id The token ID to update. msg.sender must be its creator, the uri must be impermanent,\r\n     *            and the creator must own all of the token supply\r\n     * @param _uri New URI for the token.\r\n     */\r\n    function setURI(uint256 _id, string memory _uri) public creatorOnly(_id) onlyImpermanentURI(_id) onlyFullTokenOwner(_id) {\r\n        _setURI(_id, _uri);\r\n    }\r\n\r\n    /**\r\n     * @dev setURI, but permanent\r\n     */\r\n    function setPermanentURI(uint256 _id, string memory _uri)\r\n        public\r\n        creatorOnly(_id)\r\n        onlyImpermanentURI(_id)\r\n        onlyFullTokenOwner(_id) {\r\n        _setPermanentURI(_id, _uri);\r\n    }\r\n\r\n    /**\r\n     * @dev Change the creator address for given token\r\n     * @param _to   Address of the new creator\r\n     * @param _id  Token IDs to change creator of\r\n     */\r\n    function setCreator(uint256 _id, address _to) public creatorOnly(_id) {\r\n        require(\r\n            _to != address(0),\r\n            \"AssetContractShared#setCreator: INVALID_ADDRESS.\"\r\n        );\r\n        _creatorOverride[_id] = _to;\r\n        emit CreatorChanged(_id, _to);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the creator for a token\r\n     * @param _id   The token id to look up\r\n     */\r\n    function creator(uint256 _id) public view returns (address) {\r\n        if (_creatorOverride[_id] != address(0)) {\r\n            return _creatorOverride[_id];\r\n        } else {\r\n            return _id.tokenCreator();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get the maximum supply for a token\r\n     * @param _id   The token id to look up\r\n     */\r\n    function maxSupply(uint256 _id) public pure returns (uint256) {\r\n        return _id.tokenMaxSupply();\r\n    }\r\n\r\n    // Override ERC1155Tradable for birth events\r\n    function _origin(uint256 _id) internal view returns (address) {\r\n        return _id.tokenCreator();\r\n    }\r\n\r\n    function _requireMintable(\r\n        address _address,\r\n        uint256 _id,\r\n        uint256 _amount\r\n    ) internal view {\r\n        require(\r\n            _isCreatorOrProxy(_id, _address),\r\n            \"AssetContractShared#_requireMintable: ONLY_CREATOR_ALLOWED\"\r\n        );\r\n        require(\r\n            _remainingSupply(_id) >= _amount,\r\n            \"AssetContractShared#_requireMintable: SUPPLY_EXCEEDED\"\r\n        );\r\n    }\r\n\r\n    function _remainingSupply(uint256 _id) internal view returns (uint256) {\r\n        return maxSupply(_id).sub(totalSupply(_id));\r\n    }\r\n\r\n    function _isCreatorOrProxy(uint256 _id, address _address)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        address creator_ = creator(_id);\r\n        return creator_ == _address || _isProxyForUser(creator_, _address);\r\n    }\r\n\r\n    // Overrides ERC1155Tradable to allow a shared proxy address\r\n    function _isProxyForUser(address _user, address _address)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (sharedProxyAddresses[_address]) {\r\n            return true;\r\n        }\r\n        return super._isProxyForUser(_user, _address);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_templateURI\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"CreatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"PermanentURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addSharedProxyAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_quantities\",\"type\":\"uint256[]\"}],\"name\":\"batchBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_quantities\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"batchMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxyRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeSharedProxyAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"setCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setPermanentURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setProxyRegistryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setTemplateURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sharedProxyAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supportsFactoryInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"templateURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"NiftyPlanet","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5409ec958c83c3f309868babaca7c86dcb077c10000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000b4e69667479506c616e657400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044e46504c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005b68747470733a2f2f746573746e6574732d6170692e6f70656e7365612e696f2f6170692f76312f6d657461646174612f3078383842343846363534633330653939626332653441313535396234446366316144393346413635362f0000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://0b85134151e99d502a64bf3423534127cc9403e6fefc0eb02d3b3ab33a31ba3f"}]}