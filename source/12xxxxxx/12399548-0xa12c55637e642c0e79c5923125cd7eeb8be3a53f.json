{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"},\"DevSplitter.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\ncontract DevSplitter\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Address for address;\\r\\n\\r\\n    mapping (IERC20 =\\u003e uint256) public totalPaid;\\r\\n    mapping (IERC20 =\\u003e mapping(address =\\u003e uint256)) public totalPaidToPayee;\\r\\n    \\r\\n    mapping (address =\\u003e uint256) public share;\\r\\n    uint256 immutable public totalShares;\\r\\n\\r\\n    constructor(address[] memory payees, uint256[] memory shares)\\r\\n    {\\r\\n        require (payees.length == shares.length \\u0026\\u0026 payees.length \\u003e 0);\\r\\n\\r\\n        uint256 total = 0;\\r\\n        for (uint256 x=0; x\\u003cpayees.length; ++x) {\\r\\n            address payee = payees[x];\\r\\n            uint256 sh = shares[x];\\r\\n            require (payee != address(0) \\u0026\\u0026 sh \\u003e 0 \\u0026\\u0026 share[payee] == 0);\\r\\n            require (!payee.isContract(), \\\"Cannot pay a contract\\\");\\r\\n            total = total.add(sh);\\r\\n            share[payee] = sh;\\r\\n        }\\r\\n        totalShares = total;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function owed(IERC20 token, address payee) public view returns (uint256) {        \\r\\n        uint256 balance = address(token) == address(0) ? address(this).balance : token.balanceOf(address(this));\\r\\n        uint256 payeeShare = balance.add(totalPaid[token]).mul(share[payee]) / totalShares;\\r\\n        uint256 paid = totalPaidToPayee[token][payee];\\r\\n        return payeeShare \\u003e paid ? payeeShare - paid : 0;\\r\\n    }\\r\\n\\r\\n    function pay(IERC20 token, address payable payee) public {\\r\\n        uint256 toPay = owed(token, payee);\\r\\n        require (toPay \\u003e 0, \\\"Nothing to pay\\\");\\r\\n\\r\\n        totalPaid[token] = totalPaid[token].add(toPay);\\r\\n        totalPaidToPayee[token][payee] = totalPaidToPayee[token][payee].add(toPay);\\r\\n                \\r\\n        if (address(token) == address(0)) {\\r\\n            (bool success,) = payee.call{ value: toPay }(\\\"\\\");\\r\\n            require (success, \\\"Transfer failed\\\");\\r\\n        }\\r\\n        else {\\r\\n            token.safeTransfer(payee, toPay);\\r\\n        }\\r\\n    }\\r\\n}\"},\"EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n */\\r\\nlibrary EnumerableSet {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Set type with\\r\\n    // bytes32 values.\\r\\n    // The Set implementation uses private functions, and user-facing\\r\\n    // implementations (such as AddressSet) are just wrappers around the\\r\\n    // underlying Set.\\r\\n    // This means that we can only create new EnumerableSets for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping (bytes32 =\\u003e uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value\\u0027s index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as \\u0027swap and pop\\u0027).\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\r\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \\u0027if\\u0027 statement.\\r\\n\\r\\n            bytes32 lastvalue = set._values[lastIndex];\\r\\n\\r\\n            // Move the last value to the index where the value to delete is\\r\\n            set._values[toDeleteIndex] = lastvalue;\\r\\n            // Update the index for the moved value\\r\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n        require(set._values.length \\u003e index, \\\"EnumerableSet: index out of bounds\\\");\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    // Bytes32Set\\r\\n\\r\\n    struct Bytes32Set {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _add(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _remove(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\r\\n        return _at(set._inner, index);\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(uint256(value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(uint256(value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(uint256(value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return address(uint256(_at(set._inner, index)));\\r\\n    }\\r\\n\\r\\n\\r\\n    // UintSet\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n}\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nSimplified thanks to higher solidity version\\r\\nBut same functionality\\r\\n*/\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of ERC20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\nabstract contract ERC20 is IERC20 \\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping (address =\\u003e uint256) internal _balanceOf;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) public override allowance;\\r\\n\\r\\n    uint256 public override totalSupply;\\r\\n\\r\\n    string public override name;\\r\\n    string public override symbol;\\r\\n    uint8 public override decimals = 18;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\r\\n     * a default value of 18.\\r\\n     *\\r\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\r\\n     *\\r\\n     * All three of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor (string memory _name, string memory _symbol) \\r\\n    {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address a) public virtual override view returns (uint256) { return _balanceOf[a]; }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        uint256 oldAllowance = allowance[sender][msg.sender];\\r\\n        if (oldAllowance != uint256(-1)) {\\r\\n            _approve(sender, msg.sender, oldAllowance.sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(msg.sender, spender, allowance[msg.sender][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(msg.sender, spender, allowance[msg.sender][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        _balanceOf[sender] = _balanceOf[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balanceOf[recipient] = _balanceOf[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        totalSupply = totalSupply.add(amount);\\r\\n        _balanceOf[account] = _balanceOf[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        _balanceOf[account] = _balanceOf[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        totalSupply = totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        allowance[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\r\\n     *\\r\\n     * WARNING: This function should only be called from the constructor. Most\\r\\n     * applications that interact with token contracts will not expect\\r\\n     * {decimals} to ever change, and may work incorrectly if it does.\\r\\n     */\\r\\n    function _setupDecimals(uint8 _decimals) internal {\\r\\n        decimals = _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * will be to transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\r\\n}\"},\"ERC31337.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nA wrapped token, where the underlying token can be swept\\r\\nand used for other purposes\\r\\nGoverned by an installable floor calculator contract\\r\\nSweepable by designated sweeper addresses\\r\\n*/\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./IFloorCalculator.sol\\\";\\r\\nimport \\\"./WrappedERC20.sol\\\";\\r\\nimport \\\"./IERC31337.sol\\\";\\r\\n\\r\\ncontract ERC31337 is WrappedERC20, IERC31337\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    IFloorCalculator public override floorCalculator;\\r\\n    \\r\\n    mapping (address =\\u003e bool) public override sweepers;\\r\\n\\r\\n    constructor(IERC20 _wrappedToken, string memory _name, string memory _symbol)\\r\\n        WrappedERC20(_wrappedToken, _name, _symbol)\\r\\n    {\\r\\n    }\\r\\n\\r\\n    function setFloorCalculator(IFloorCalculator _floorCalculator) public override ownerOnly()\\r\\n    {\\r\\n        floorCalculator = _floorCalculator;\\r\\n    }\\r\\n\\r\\n    function setSweeper(address sweeper, bool allow) public override ownerOnly()\\r\\n    {\\r\\n        sweepers[sweeper] = allow;\\r\\n    }\\r\\n\\r\\n    function sweepFloor(address to) public override returns (uint256 amountSwept)\\r\\n    {\\r\\n        require (to != address(0));\\r\\n        require (sweepers[msg.sender], \\\"Sweepers only\\\");\\r\\n        amountSwept = floorCalculator.calculateSubFloor(wrappedToken, this);\\r\\n        if (amountSwept \\u003e 0) {\\r\\n            wrappedToken.safeTransfer(to, amountSwept);\\r\\n        }\\r\\n    }\\r\\n}\"},\"GatedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/* ROOTKIT:\\r\\nA standard ERC20 with an extra hook: An installable transfer\\r\\ngate allowing for token tax and burn on transfer\\r\\n*/\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./ITransferGate.sol\\\";\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./IGatedERC20.sol\\\";\\r\\n\\r\\nabstract contract GatedERC20 is ERC20, TokensRecoverable, IGatedERC20\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    ITransferGate public override transferGate;\\r\\n\\r\\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol)\\r\\n    {\\r\\n    }\\r\\n\\r\\n    function setTransferGate(ITransferGate _transferGate) public override ownerOnly()\\r\\n    {\\r\\n        transferGate = _transferGate;\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override \\r\\n    {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        ITransferGate _transferGate = transferGate;\\r\\n        uint256 remaining = amount;\\r\\n        if (address(_transferGate) != address(0)) {\\r\\n            (uint256 burn, TransferGateTarget[] memory targets) = _transferGate.handleTransfer(msg.sender, sender, recipient, amount);            \\r\\n            if (burn \\u003e 0) {\\r\\n                amount = remaining = remaining.sub(burn, \\\"Burn too much\\\");\\r\\n                _burn(sender, burn);\\r\\n            }\\r\\n            for (uint256 x = 0; x \\u003c targets.length; ++x) {\\r\\n                (address dest, uint256 amt) = (targets[x].destination, targets[x].amount);\\r\\n                remaining = remaining.sub(amt, \\\"Transfer too much\\\");\\r\\n                _balanceOf[dest] = _balanceOf[dest].add(amt);\\r\\n            }\\r\\n        }\\r\\n        _balanceOf[sender] = _balanceOf[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balanceOf[recipient] = _balanceOf[recipient].add(remaining);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IERC20 \\r\\n{\\r\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\r\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address _account) external view returns (uint256);\\r\\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\\r\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\r\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\r\\n    function transferFrom(address _sender, address _recipient, uint256 _amount) external returns (bool);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n}\"},\"IERC31337.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IWrappedERC20.sol\\\";\\r\\nimport \\\"./IFloorCalculator.sol\\\";\\r\\n\\r\\ninterface IERC31337 is IWrappedERC20\\r\\n{\\r\\n    function floorCalculator() external view returns (IFloorCalculator);\\r\\n    function sweepers(address _sweeper) external view returns (bool);\\r\\n    \\r\\n    function setFloorCalculator(IFloorCalculator _floorCalculator) external;\\r\\n    function setSweeper(address _sweeper, bool _allow) external;\\r\\n    function sweepFloor(address _to) external returns (uint256 amountSwept);\\r\\n}\"},\"IFloorCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IFloorCalculator\\r\\n{\\r\\n    function calculateSubFloor(IERC20 wrappedToken, IERC20 backingToken) external view returns (uint256);\\r\\n}\"},\"IGatedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./ITransferGate.sol\\\";\\r\\n\\r\\ninterface IGatedERC20 is IERC20\\r\\n{\\r\\n    function transferGate() external view returns (ITransferGate);\\r\\n\\r\\n    function setTransferGate(ITransferGate _transferGate) external;\\r\\n}\"},\"ILiquidityController.sol\":{\"content\":\"// SPDX-License-Identifier: P-P-P-PONZO!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface ILiquidityController\\r\\n{\\r\\n    function balancePriceBase(uint256 amount) external;\\r\\n    function balancePriceElite(uint256 amount) external;\\r\\n    function removeBuyAndTax(uint256 amount, address token, uint16 tax, uint256 time) external;\\r\\n    function buyAndTax(address token, uint256 amountToSpend, uint16 tax, uint256 time) external;\\r\\n    function sweepFloor() external;\\r\\n    function zapEliteToBase(uint256 liquidity) external;\\r\\n    function zapBaseToElite(uint256 liquidity) external;\\r\\n    function wrapToElite(uint256 baseAmount) external;\\r\\n    function unwrapElite(uint256 eliteAmount) external;\\r\\n    function addLiquidity(address eliteOrBase, uint256 baseAmount) external;\\r\\n    function removeLiquidity(address eliteOrBase, uint256 tokens) external;    \\r\\n    function buyRooted(address token, uint256 amountToSpend) external;\\r\\n    function sellRooted(address token, uint256 amountToSpend) external;\\r\\n}\"},\"IOwned.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IOwned\\r\\n{\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    function owner() external view returns (address);\\r\\n\\r\\n    function transferOwnership(address newOwner) external;\\r\\n    function claimOwnership() external;\\r\\n}\"},\"IRootKitDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IRootKitDistribution\\r\\n{\\r\\n    function distributionComplete() external view returns (bool);\\r\\n    \\r\\n    function distribute() external payable;\\r\\n    function claim(address _to, uint256 _contribution) external;\\r\\n}\"},\"IStoneface.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IOwned.sol\\\";\\r\\nimport \\\"./IRootKitDistribution.sol\\\";\\r\\n\\r\\ninterface IStoneface\\r\\n{\\r\\n    event PendingOwnershipTransfer(IOwned target, address newOwner, uint256 when);\\r\\n\\r\\n    struct TransferOwnership\\r\\n    {\\r\\n        uint256 when;\\r\\n        IOwned target;\\r\\n        address newOwner;\\r\\n    }\\r\\n\\r\\n    function delay() external view returns (uint256);\\r\\n    function pendingTransferOwnership(uint256 index) external view returns (TransferOwnership memory);\\r\\n    function pendingTransferOwnershipCount() external view returns (uint256);\\r\\n    function callTransferOwnership(IOwned target, address newOwner) external;\\r\\n    function callTransferOwnershipNow(uint256 index) external;\\r\\n    function callClaimOwnership(IOwned target) external;\\r\\n    function rootKitDistribution() external view returns (IRootKitDistribution);\\r\\n    function watchDistribution(IRootKitDistribution _rootKitDistribution) external;\\r\\n}\"},\"ITokensRecoverable.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface ITokensRecoverable\\r\\n{\\r\\n    function recoverTokens(IERC20 token) external;\\r\\n}\"},\"ITransferGate.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nstruct TransferGateTarget\\r\\n{\\r\\n    address destination;\\r\\n    uint256 amount;\\r\\n}\\r\\n\\r\\ninterface ITransferGate\\r\\n{\\r\\n    function handleTransfer(address msgSender, address from, address to, uint256 amount) external\\r\\n        returns (uint256 burn, TransferGateTarget[] memory targets);\\r\\n}\"},\"IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\"},\"IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\"},\"IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\"},\"IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\u0027./IUniswapV2Router01.sol\\u0027;\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\"},\"IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IWrappedERC20Events.sol\\\";\\r\\n\\r\\ninterface IWETH is IERC20, IWrappedERC20Events\\r\\n{    \\r\\n    function deposit() external payable;\\r\\n    function withdraw(uint256 _amount) external;\\r\\n}\\r\\n\"},\"IWrappedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IWrappedERC20Events.sol\\\";\\r\\n\\r\\ninterface IWrappedERC20 is IERC20, IWrappedERC20Events\\r\\n{\\r\\n    function wrappedToken() external view returns (IERC20);\\r\\n    function depositTokens(uint256 _amount) external;\\r\\n    function withdrawTokens(uint256 _amount) external;\\r\\n}\"},\"IWrappedERC20Events.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IWrappedERC20Events\\r\\n{\\r\\n    event Deposit(address indexed from, uint256 amount);\\r\\n    event Withdrawal(address indexed to, uint256 amount);\\r\\n}\\r\\n\"},\"KETH.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nTechnically a wrapped WETH\\r\\nSo a wrapped wrapped ethereum\\r\\nBut also accepts raw ETH\\r\\nAlso functions exactly like WETH (deposit/withdraw/direct send)\\r\\n*/\\r\\n\\r\\nimport \\\"./ERC31337.sol\\\";\\r\\nimport \\\"./IWETH.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\ncontract KETH is ERC31337, IWETH\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    constructor (IWETH _weth)\\r\\n        ERC31337(_weth, \\\"RootKit [Wrapped ETH]\\\", \\\"RK:ETH\\\")\\r\\n    {\\r\\n    }\\r\\n\\r\\n    receive() external payable\\r\\n    {\\r\\n        if (msg.sender != address(wrappedToken)) {\\r\\n            deposit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function deposit() public payable override\\r\\n    {\\r\\n        uint256 amount = msg.value;\\r\\n        IWETH(address(wrappedToken)).deposit{ value: amount }();\\r\\n        _mint(msg.sender, amount);\\r\\n        emit Deposit(msg.sender, amount); \\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 _amount) public override\\r\\n    {\\r\\n        _burn(msg.sender, _amount);\\r\\n        IWETH(address(wrappedToken)).withdraw(_amount);\\r\\n        emit Withdrawal(msg.sender, _amount);\\r\\n        (bool success,) = msg.sender.call{ value: _amount }(\\\"\\\");\\r\\n        require (success, \\\"Transfer failed\\\");\\r\\n    }\\r\\n}\"},\"KethToWethLiquidityZapper.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./RootKit.sol\\\";\\r\\nimport \\\"./IERC31337.sol\\\";\\r\\nimport \\\"./IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./IWETH.sol\\\";\\r\\nimport \\\"./IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./RootKitTransferGate.sol\\\";\\r\\nimport \\\"./UniswapV2Library.sol\\\";\\r\\nimport \\\"./KETH.sol\\\";\\r\\n\\r\\ncontract KethToWethLiquidityZapper is TokensRecoverable\\r\\n{\\r\\n    IUniswapV2Router02 immutable uniswapV2Router;\\r\\n    IERC31337 immutable wrappedKethRootKit;\\r\\n    IUniswapV2Pair kethRootKit;\\r\\n    IUniswapV2Pair wethRootKit;\\r\\n    RootKit immutable rootKit;\\r\\n    IWETH immutable weth;\\r\\n    KETH immutable keth;\\r\\n    \\r\\n    constructor(IUniswapV2Router02 _uniswapV2Router, IERC31337 _wrappedKethRootKit, RootKit _rootKit)\\r\\n    {\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n        wrappedKethRootKit = _wrappedKethRootKit;\\r\\n        rootKit = _rootKit;\\r\\n\\r\\n        IUniswapV2Pair _kethRootKit = IUniswapV2Pair(address(_wrappedKethRootKit.wrappedToken()));\\r\\n        kethRootKit = _kethRootKit;\\r\\n\\r\\n        IWETH _weth = IWETH(_uniswapV2Router.WETH());\\r\\n        weth = _weth;        \\r\\n        \\r\\n        KETH  _keth = KETH(payable(_kethRootKit.token0() == address(_rootKit) ? _kethRootKit.token1() :_kethRootKit.token0()));\\r\\n        keth = _keth;\\r\\n\\r\\n        wethRootKit = IUniswapV2Pair(IUniswapV2Factory(_uniswapV2Router.factory()).getPair(address(_weth), address(_rootKit)));\\r\\n\\r\\n        _kethRootKit.approve(address(_uniswapV2Router), uint256(-1));\\r\\n        _keth.approve(address(_uniswapV2Router), uint256(-1));\\r\\n        _weth.approve(address(_uniswapV2Router), uint256(-1));\\r\\n        _rootKit.approve(address(_uniswapV2Router), uint256(-1));\\r\\n        \\r\\n        require (_kethRootKit.token0() == address(_rootKit) || _kethRootKit.token1() == address(_rootKit), \\\"Sanity\\\");\\r\\n        require (_kethRootKit.token0() != address(_weth) \\u0026\\u0026 _kethRootKit.token1() != address(_weth), \\\"Sanity\\\");\\r\\n    }\\r\\n\\r\\n    function go() public ownerOnly()\\r\\n    {\\r\\n        wrappedKethRootKit.sweepFloor(address(this));\\r\\n        uint256 liquidity = kethRootKit.balanceOf(address(this));\\r\\n        require (liquidity \\u003e 0, \\\"Nothing unwrapped\\\");       \\r\\n        RootKitTransferGate gate = RootKitTransferGate(address(rootKit.transferGate()));\\r\\n        gate.setUnrestricted(true);        \\r\\n        (uint256 amountRootKit, uint256 amountKeth) = uniswapV2Router.removeLiquidity(address(rootKit), address(keth), liquidity, 0, 0, address(this), block.timestamp);\\r\\n        keth.withdrawTokens(amountKeth);\\r\\n        (,,liquidity) = uniswapV2Router.addLiquidity(address(rootKit), address(weth), amountRootKit, amountKeth, 0, 0, address(this), block.timestamp);\\r\\n        require (liquidity \\u003e 0, \\\"Nothing wrapped\\\");\\r\\n        wethRootKit.transfer(msg.sender, liquidity);\\r\\n        uint256 balance = weth.balanceOf(address(this));\\r\\n        if (balance \\u003e 0) { weth.transfer(msg.sender, balance ); }\\r\\n        balance = keth.balanceOf(address(this));\\r\\n        if (balance \\u003e 0) { keth.transfer(msg.sender, balance ); }\\r\\n        balance = rootKit.balanceOf(address(this));\\r\\n        if (balance \\u003e 0) { rootKit.transfer(msg.sender, balance ); }\\r\\n        gate.setUnrestricted(false);\\r\\n    }\\r\\n}\"},\"LiquidityController.sol\":{\"content\":\"// SPDX-License-Identifier: P-P-P-PONZO!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./IERC31337.sol\\\";\\r\\nimport \\\"./IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./RootKitTransferGate.sol\\\";\\r\\nimport \\\"./UniswapV2Library.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./ILiquidityController.sol\\\";\\r\\nimport \\\"./IFloorCalculator.sol\\\";\\r\\n\\r\\n\\r\\ncontract LiquidityController is TokensRecoverable, ILiquidityController\\r\\n\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    IUniswapV2Router02 immutable uniswapV2Router;\\r\\n    IUniswapV2Factory immutable uniswapV2Factory;\\r\\n    IERC20 immutable rooted;\\r\\n    IERC20 immutable base;\\r\\n    IERC31337 immutable elite;\\r\\n    IERC20 immutable rootedEliteLP;\\r\\n    IERC20 immutable rootedBaseLP;\\r\\n    IFloorCalculator calculator;\\r\\n    RootKitTransferGate gate;\\r\\n    mapping (address =\\u003e bool) public liquidityControllers;\\r\\n\\r\\n    constructor(IUniswapV2Router02 _uniswapV2Router, IERC20 _base, IERC20 _rootedToken, IERC31337 _elite, IFloorCalculator _calculator, RootKitTransferGate _gate)\\r\\n    {\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n        IUniswapV2Factory _uniswapV2Factory = IUniswapV2Factory(_uniswapV2Router.factory());\\r\\n        uniswapV2Factory = _uniswapV2Factory;\\r\\n        \\r\\n        base = _base;       \\r\\n        gate = _gate;\\r\\n        elite = _elite;\\r\\n        rooted = _rootedToken;\\r\\n        calculator = _calculator;\\r\\n\\r\\n        IERC20 _rootedBaseLP = IERC20(_uniswapV2Factory.getPair(address(_base), address(_rootedToken)));\\r\\n        IERC20 _rootedEliteLP = IERC20(_uniswapV2Factory.getPair(address(_elite), address(_rootedToken)));\\r\\n\\r\\n        _base.approve(address(_uniswapV2Router), uint256(-1));\\r\\n        _base.approve(address(_elite), uint256(-1));\\r\\n        _elite.approve(address(_uniswapV2Router), uint256(-1));       \\r\\n        _rootedToken.approve(address(_uniswapV2Router), uint256(-1));       \\r\\n        _rootedBaseLP.approve(address(_uniswapV2Router), uint256(-1));       \\r\\n        _rootedEliteLP.approve(address(_uniswapV2Router), uint256(-1));\\r\\n\\r\\n        rootedBaseLP = _rootedBaseLP;\\r\\n        rootedEliteLP = _rootedEliteLP;\\r\\n    }\\r\\n    \\r\\n    function setCalculatorAndGate(IFloorCalculator _calculator, RootKitTransferGate _gate) public ownerOnly(){\\r\\n        calculator = _calculator;\\r\\n        gate = _gate;\\r\\n    }\\r\\n    \\r\\n    function setLiquidityController(address controlAddress, bool controller) public ownerOnly(){\\r\\n        liquidityControllers[controlAddress] = controller;\\r\\n    }\\r\\n\\r\\n    modifier liquidityControllerOnly(){\\r\\n        require(liquidityControllers[msg.sender], \\\"Not a Liquidity Controller\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function balancePriceBase(uint256 amount) public override liquidityControllerOnly() {\\r\\n        amount = buyRootedToken(address(base), amount);\\r\\n        amount = sellRootedToken(address(elite), amount);\\r\\n        elite.withdrawTokens(amount);\\r\\n    }\\r\\n\\r\\n    function balancePriceElite(uint256 amount) public override liquidityControllerOnly() {\\r\\n        elite.depositTokens(amount);\\r\\n        amount = buyRootedToken(address(elite), amount);\\r\\n        amount = sellRootedToken(address(base), amount);\\r\\n    }\\r\\n\\r\\n    function removeBuyAndTax(uint256 amount, address token, uint16 tax, uint256 time) public override liquidityControllerOnly() {\\r\\n        gate.setUnrestricted(true);\\r\\n        amount = removeLiq(token, amount);\\r\\n        buyRootedToken(token, amount);\\r\\n        gate.setDumpTax(tax, time);\\r\\n        gate.setUnrestricted(false);\\r\\n    }\\r\\n\\r\\n    function buyAndTax(address token, uint256 amountToSpend, uint16 tax, uint256 time) public override liquidityControllerOnly() { \\r\\n        buyRootedToken(token, amountToSpend);\\r\\n        gate.setDumpTax(tax, time);\\r\\n    }\\r\\n\\r\\n    function sweepFloor() public override liquidityControllerOnly() {\\r\\n        elite.sweepFloor(address(this));\\r\\n    }\\r\\n\\r\\n    function zapEliteToBase(uint256 liquidity) public override liquidityControllerOnly() {\\r\\n        gate.setUnrestricted(true);\\r\\n        liquidity = removeLiq(address(elite), liquidity);\\r\\n        elite.withdrawTokens(liquidity);\\r\\n        addLiq(address(base), liquidity);\\r\\n        gate.setUnrestricted(false);\\r\\n    }\\r\\n\\r\\n    function zapBaseToElite(uint256 liquidity) public override liquidityControllerOnly() {\\r\\n        gate.setUnrestricted(true);\\r\\n        liquidity = removeLiq(address(base), liquidity);\\r\\n        elite.depositTokens(liquidity);\\r\\n        addLiq(address(elite), liquidity);\\r\\n        gate.setUnrestricted(false);\\r\\n    }\\r\\n\\r\\n    function wrapToElite(uint256 baseAmount) public override liquidityControllerOnly() {\\r\\n        elite.depositTokens(baseAmount);\\r\\n    }\\r\\n    \\r\\n    function unwrapElite(uint256 eliteAmount) public override liquidityControllerOnly() {\\r\\n       elite.withdrawTokens(eliteAmount);\\r\\n    }\\r\\n\\r\\n    function addLiquidity(address eliteOrBase, uint256 baseAmount) public override liquidityControllerOnly() {\\r\\n        gate.setUnrestricted(true);\\r\\n        addLiq(eliteOrBase, baseAmount);\\r\\n        gate.setUnrestricted(false);\\r\\n    }\\r\\n\\r\\n    function removeLiquidity (address eliteOrBase, uint256 tokens) public override liquidityControllerOnly() {\\r\\n        gate.setUnrestricted(true);\\r\\n        removeLiq(eliteOrBase, tokens);\\r\\n        gate.setUnrestricted(false);\\r\\n    }\\r\\n\\r\\n    function buyRooted(address token, uint256 amountToSpend) public override liquidityControllerOnly() {\\r\\n        buyRootedToken(token, amountToSpend);\\r\\n    }\\r\\n    \\r\\n    function sellRooted(address token, uint256 amountToSpend) public override liquidityControllerOnly() {\\r\\n        sellRootedToken(token, amountToSpend);\\r\\n    }\\r\\n\\r\\n    function addLiq(address eliteOrBase, uint256 baseAmount) internal {\\r\\n        uniswapV2Router.addLiquidity(address(eliteOrBase), address(rooted), baseAmount, rooted.balanceOf(address(this)), 0, 0, address(this), block.timestamp);\\r\\n    }\\r\\n    function removeLiq(address eliteOrBase, uint256 tokens) internal returns (uint256) {\\r\\n        (tokens,) = uniswapV2Router.removeLiquidity(address(eliteOrBase), address(rooted), tokens, 0, 0, address(this), block.timestamp);\\r\\n        return tokens;\\r\\n    }\\r\\n    function buyRootedToken(address token, uint256 amountToSpend) internal returns (uint256) {\\r\\n        uint256[] memory amounts = uniswapV2Router.swapExactTokensForTokens(amountToSpend, 0, buyPath(token), address(this), block.timestamp);\\r\\n        amountToSpend = amounts[1]; \\r\\n        return amountToSpend;\\r\\n    }\\r\\n    function sellRootedToken(address token, uint256 amountToSpend) internal returns (uint256) {\\r\\n        uint256[] memory amounts = uniswapV2Router.swapExactTokensForTokens(amountToSpend, 0, sellPath(token), address(this), block.timestamp);\\r\\n        amountToSpend = amounts[1]; \\r\\n        return amountToSpend;\\r\\n    }\\r\\n    function buyPath(address token) internal view returns(address[] memory) {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(token);\\r\\n        path[1] = address(rooted);\\r\\n        return path;\\r\\n    }\\r\\n    function sellPath(address token) internal view returns(address[] memory) {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(rooted);\\r\\n        path[1] = address(token);\\r\\n        return path;\\r\\n    }\\r\\n}\"},\"LiquidityLockedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./GatedERC20.sol\\\";\\r\\n\\r\\nabstract contract LiquidityLockedERC20 is GatedERC20\\r\\n{\\r\\n    mapping (IUniswapV2Pair =\\u003e bool) public liquidityPairLocked;\\r\\n    mapping (address =\\u003e bool) public liquidityController;\\r\\n\\r\\n    struct CallRecord\\r\\n    {\\r\\n        address origin;\\r\\n        uint32 blockNumber;\\r\\n        bool transferFrom;\\r\\n    }\\r\\n\\r\\n    CallRecord balanceAllowed;\\r\\n\\r\\n    constructor(string memory _name, string memory _symbol)\\r\\n        GatedERC20(_name, _symbol)\\r\\n    {\\r\\n    }\\r\\n\\r\\n    function setLiquidityLock(IUniswapV2Pair _liquidityPair, bool _locked) public\\r\\n    {\\r\\n        require (liquidityController[msg.sender], \\\"Liquidity controller only\\\");\\r\\n        require (_liquidityPair.token0() == address(this) || _liquidityPair.token1() == address(this), \\\"Unrelated pair\\\");\\r\\n        liquidityPairLocked[_liquidityPair] = _locked;\\r\\n    }\\r\\n\\r\\n    function setLiquidityController(address _liquidityController, bool _canControl) public ownerOnly()\\r\\n    {\\r\\n        liquidityController[_liquidityController] = _canControl;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public override view returns (uint256) \\r\\n    {\\r\\n        IUniswapV2Pair pair = IUniswapV2Pair(address(msg.sender));\\r\\n        if (liquidityPairLocked[pair]) {\\r\\n            CallRecord memory last = balanceAllowed;\\r\\n            require (last.origin == tx.origin \\u0026\\u0026 last.blockNumber == block.number, \\\"Liquidity is locked\\\");\\r\\n            if (last.transferFrom) {\\r\\n                (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\\r\\n                IERC20 tok = IERC20(pair.token0());\\r\\n                if (address(tok) == address(this)) {\\r\\n                    require (IERC20(pair.token1()).balanceOf(address(pair)) \\u003c reserve1, \\\"Liquidity is locked\\\");\\r\\n                }\\r\\n                else {\\r\\n                    require (tok.balanceOf(address(pair)) \\u003c reserve0, \\\"Liquidity is locked\\\");\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return super.balanceOf(account);\\r\\n    }\\r\\n\\r\\n    function allowBalance(bool _transferFrom) private\\r\\n    {\\r\\n        CallRecord memory last = balanceAllowed;\\r\\n        CallRecord memory allow = CallRecord({ \\r\\n            origin: tx.origin,\\r\\n            blockNumber: uint32(block.number),\\r\\n            transferFrom: _transferFrom\\r\\n        });\\r\\n        require (last.origin != allow.origin || last.blockNumber != allow.blockNumber || last.transferFrom != allow.transferFrom, \\\"Liquidity is locked (Please try again next block)\\\");\\r\\n        balanceAllowed = allow;\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) \\r\\n    {        \\r\\n        if (liquidityPairLocked[IUniswapV2Pair(address(msg.sender))]) {\\r\\n            allowBalance(false);\\r\\n        }\\r\\n        else {\\r\\n            balanceAllowed = CallRecord({ origin: address(0), blockNumber: 0, transferFrom: false });\\r\\n        }\\r\\n        return super.transfer(recipient, amount);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) \\r\\n    {\\r\\n        if (liquidityPairLocked[IUniswapV2Pair(recipient)]) {\\r\\n            allowBalance(true);\\r\\n        }\\r\\n        else {\\r\\n            balanceAllowed = CallRecord({ origin: address(0), blockNumber: 0, transferFrom: false });\\r\\n        }\\r\\n        return super.transferFrom(sender, recipient, amount);\\r\\n    }\\r\\n}\"},\"Owned.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nProvides ownerOnly() modifier\\r\\nAllows for ownership transfer but requires the new\\r\\nowner to claim (accept) ownership\\r\\nSafer because no accidental transfers or renouncing\\r\\n*/\\r\\n\\r\\nimport \\\"./IOwned.sol\\\";\\r\\n\\r\\nabstract contract Owned is IOwned\\r\\n{\\r\\n    address public override owner = msg.sender;\\r\\n    address internal pendingOwner;\\r\\n\\r\\n    modifier ownerOnly()\\r\\n    {\\r\\n        require (msg.sender == owner, \\\"Owner only\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public override ownerOnly()\\r\\n    {\\r\\n        pendingOwner = newOwner;\\r\\n    }\\r\\n\\r\\n    function claimOwnership() public override\\r\\n    {\\r\\n        require (pendingOwner == msg.sender);\\r\\n        pendingOwner = address(0);\\r\\n        emit OwnershipTransferred(owner, msg.sender);\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n}\"},\"RootKit.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nRootKit\\r\\nBecause my suggestions of WootKit and GrootKit were overruled\\r\\n*/\\r\\n\\r\\nimport \\\"./GatedERC20.sol\\\";\\r\\n\\r\\ncontract RootKit is GatedERC20(\\\"RootKit\\\", \\\"ROOT\\\")\\r\\n{\\r\\n    constructor()\\r\\n    {\\r\\n        _mint(msg.sender, 10000 ether);\\r\\n    }\\r\\n}\"},\"RootKitDirect.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./KETH.sol\\\";\\r\\nimport \\\"./RootKitTransferGate.sol\\\";\\r\\nimport \\\"./UniswapV2Library.sol\\\";\\r\\nimport \\\"./IUniswapV2Factory.sol\\\";\\r\\n\\r\\ncontract RootKitDirect is TokensRecoverable\\r\\n{\\r\\n    KETH immutable keth;\\r\\n    RootKit immutable rootKit;\\r\\n    IUniswapV2Router02 immutable uniswapV2Router;\\r\\n    IUniswapV2Factory immutable uniswapV2Factory;\\r\\n\\r\\n    constructor(KETH _keth, RootKit _rootKit, IUniswapV2Router02 _uniswapV2Router)\\r\\n    {\\r\\n        keth = _keth;\\r\\n        rootKit = _rootKit;\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n\\r\\n        uniswapV2Factory = IUniswapV2Factory(_uniswapV2Router.factory());\\r\\n\\r\\n        _keth.approve(address(_uniswapV2Router), uint256(-1));\\r\\n        _rootKit.approve(address(_uniswapV2Router), uint256(-1));\\r\\n    }\\r\\n\\r\\n    receive() external payable\\r\\n    {\\r\\n        require (msg.sender == address(keth));\\r\\n    }\\r\\n\\r\\n    function estimateBuy(uint256 ethAmountIn) public view returns (uint256 rootKitAmount)\\r\\n    {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(keth);\\r\\n        path[1] = address(rootKit);\\r\\n        (uint256[] memory amounts) = UniswapV2Library.getAmountsOut(address(uniswapV2Factory), ethAmountIn, path);\\r\\n        return amounts[1];\\r\\n    }\\r\\n\\r\\n    function estimateSell(uint256 rootKitAmountIn) public view returns (uint256 ethAmount)\\r\\n    {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(rootKit);\\r\\n        path[1] = address(keth);\\r\\n        (uint256[] memory amounts) = UniswapV2Library.getAmountsOut(address(uniswapV2Factory), rootKitAmountIn, path);\\r\\n        return amounts[1];\\r\\n    }\\r\\n\\r\\n    function easyBuy() public payable returns (uint256 rootKitAmount)\\r\\n    {\\r\\n        return buy(estimateBuy(msg.value) * 98 / 100);\\r\\n    }\\r\\n\\r\\n    function easySell(uint256 rootKitAmountIn) public returns (uint256 ethAmount)\\r\\n    {\\r\\n        return sell(rootKitAmountIn, estimateSell(rootKitAmountIn) * 98 / 100);\\r\\n    }\\r\\n\\r\\n    function buy(uint256 amountOutMin) public payable returns (uint256 rootKitAmount)\\r\\n    {\\r\\n        uint256 amount = msg.value;\\r\\n        require (amount \\u003e 0, \\\"Send ETH to buy\\\");\\r\\n        keth.deposit{ value: amount }();\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(keth);\\r\\n        path[1] = address(rootKit);\\r\\n        (uint256[] memory amounts) = uniswapV2Router.swapExactTokensForTokens(amount, amountOutMin, path, msg.sender, block.timestamp);\\r\\n        return amounts[1];\\r\\n    }\\r\\n\\r\\n    function sell(uint256 rootKitAmountIn, uint256 amountOutMin) public returns (uint256 ethAmount)\\r\\n    {\\r\\n        require (rootKitAmountIn \\u003e 0, \\\"Nothing to sell\\\");\\r\\n        RootKitTransferGate gate = RootKitTransferGate(address(rootKit.transferGate()));\\r\\n\\r\\n        // to avoid double taxation\\r\\n        gate.setUnrestricted(true);\\r\\n        rootKit.transferFrom(msg.sender, address(this), rootKitAmountIn);\\r\\n        gate.setUnrestricted(false);\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(rootKit);\\r\\n        path[1] = address(keth);\\r\\n        (uint256[] memory amounts) = uniswapV2Router.swapExactTokensForTokens(rootKitAmountIn, amountOutMin, path, address(this), block.timestamp);\\r\\n        keth.withdraw(amounts[1]);\\r\\n        (bool success,) = msg.sender.call{ value: amounts[1] }(\\\"\\\");\\r\\n        require (success, \\\"Transfer failed\\\");\\r\\n        return amounts[1];\\r\\n    }\\r\\n}\"},\"RootKitDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IRootKitDistribution.sol\\\";\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./RootKit.sol\\\";\\r\\nimport \\\"./RootKitTransferGate.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./KETH.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./IWrappedERC20.sol\\\";\\r\\n\\r\\n/*\\r\\nPhases:\\r\\n    Initializing\\r\\n        Call setupKethRootKit() and setupWbtcRootKit()\\r\\n        Call completeSetup()\\r\\n        \\r\\n    Call distribute() to:\\r\\n        Transfer all RootKit to this contract\\r\\n        Take all ETH + RootKit and create a market\\r\\n        Play jenga\\r\\n        Buy RootKit\\r\\n        Buy wBTC\\r\\n        Create RootKit/wBTC market\\r\\n        Buy RootKit for the group\\r\\n        Distribute funds\\r\\n\\r\\n    Complete\\r\\n        Everyone can call claim() to receive their tokens (via the liquidity generation contract)\\r\\n*/\\r\\n\\r\\ncontract RootKitDistribution is TokensRecoverable, IRootKitDistribution\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    bool public override distributionComplete;\\r\\n\\r\\n    IUniswapV2Router02 immutable uniswapV2Router;\\r\\n    IUniswapV2Factory immutable uniswapV2Factory;\\r\\n    RootKit immutable rootKit;\\r\\n    KETH immutable keth;\\r\\n    IERC20 immutable weth;\\r\\n    IERC20 immutable wbtc;\\r\\n    address immutable vault;\\r\\n\\r\\n    IUniswapV2Pair kethRootKit;\\r\\n    IUniswapV2Pair wbtcRootKit;\\r\\n    IWrappedERC20 wrappedKethRootKit;\\r\\n    IWrappedERC20 wrappedWbtcRootKit;\\r\\n\\r\\n    uint256 public totalEthCollected;\\r\\n    uint256 public totalRootKitBought;\\r\\n    uint256 public totalWbtcRootKit;\\r\\n    uint256 public totalKethRootKit;\\r\\n    address rootKitLiquidityGeneration;\\r\\n    uint256 recoveryDate = block.timestamp + 2592000; // 1 Month\\r\\n\\r\\n    uint8 public jengaCount;\\r\\n    \\r\\n    // 10000 = 100%\\r\\n    uint16 constant public vaultPercent = 2500; // Proportionate amount used to seed the vault\\r\\n    uint16 constant public buyPercent = 2500; // Proportionate amount used to group buy RootKit for distribution to participants\\r\\n    uint16 constant public wbtcPercent = 2500; // Proportionate amount used to create wBTC/RootKit pool\\r\\n\\r\\n    constructor(RootKit _rootKit, IUniswapV2Router02 _uniswapV2Router, KETH _keth, IERC20 _wbtc, address _vault)\\r\\n    {\\r\\n        require (address(_rootKit) != address(0));\\r\\n        require (address(_wbtc) != address(0));\\r\\n        require (address(_vault) != address(0));\\r\\n\\r\\n        rootKit = _rootKit;\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n        keth = _keth;\\r\\n        wbtc = _wbtc;\\r\\n        vault = _vault;\\r\\n\\r\\n        uniswapV2Factory = IUniswapV2Factory(_uniswapV2Router.factory());\\r\\n        weth = _keth.wrappedToken();\\r\\n    }\\r\\n\\r\\n    function setupKethRootKit() public\\r\\n    {\\r\\n        kethRootKit = IUniswapV2Pair(uniswapV2Factory.getPair(address(keth), address(rootKit)));\\r\\n        if (address(kethRootKit) == address(0)) {\\r\\n            kethRootKit = IUniswapV2Pair(uniswapV2Factory.createPair(address(keth), address(rootKit)));\\r\\n            require (address(kethRootKit) != address(0));\\r\\n        }\\r\\n    }\\r\\n    function setupWbtcRootKit() public\\r\\n    {\\r\\n        wbtcRootKit = IUniswapV2Pair(uniswapV2Factory.getPair(address(wbtc), address(rootKit)));\\r\\n        if (address(wbtcRootKit) == address(0)) {\\r\\n            wbtcRootKit = IUniswapV2Pair(uniswapV2Factory.createPair(address(wbtc), address(rootKit)));\\r\\n            require (address(wbtcRootKit) != address(0));\\r\\n        }\\r\\n    }\\r\\n    function completeSetup(IWrappedERC20 _wrappedKethRootKit, IWrappedERC20 _wrappedWbtcRootKit) public ownerOnly()\\r\\n    {        \\r\\n        require (address(_wrappedKethRootKit.wrappedToken()) == address(kethRootKit), \\\"Wrong LP Wrapper\\\");\\r\\n        require (address(_wrappedWbtcRootKit.wrappedToken()) == address(wbtcRootKit), \\\"Wrong LP Wrapper\\\");\\r\\n        wrappedKethRootKit = _wrappedKethRootKit;\\r\\n        wrappedWbtcRootKit = _wrappedWbtcRootKit;\\r\\n        keth.approve(address(uniswapV2Router), uint256(-1));\\r\\n        rootKit.approve(address(uniswapV2Router), uint256(-1));\\r\\n        weth.approve(address(keth), uint256(-1));\\r\\n        weth.approve(address(uniswapV2Router), uint256(-1));\\r\\n        wbtc.approve(address(uniswapV2Router), uint256(-1));\\r\\n        kethRootKit.approve(address(wrappedKethRootKit), uint256(-1));\\r\\n        wbtcRootKit.approve(address(wrappedWbtcRootKit), uint256(-1));\\r\\n    }\\r\\n\\r\\n    function setJengaCount(uint8 _jengaCount) public ownerOnly()\\r\\n    {\\r\\n        jengaCount = _jengaCount;\\r\\n    }\\r\\n\\r\\n    function distribute() public override payable\\r\\n    {\\r\\n        require (!distributionComplete, \\\"Distribution complete\\\");\\r\\n        uint256 totalEth = msg.value;\\r\\n        require (totalEth \\u003e 0, \\\"Nothing to distribute\\\");\\r\\n        distributionComplete = true;\\r\\n        totalEthCollected = totalEth;\\r\\n        rootKitLiquidityGeneration = msg.sender;\\r\\n\\r\\n        rootKit.transferFrom(msg.sender, address(this), rootKit.totalSupply());\\r\\n        \\r\\n        RootKitTransferGate gate = RootKitTransferGate(address(rootKit.transferGate()));\\r\\n        gate.setUnrestricted(true);\\r\\n\\r\\n        createKethRootKitLiquidity(totalEth);\\r\\n\\r\\n        jenga(jengaCount);\\r\\n\\r\\n        sweepFloorToWeth();\\r\\n        uint256 wethBalance = weth.balanceOf(address(this));\\r\\n\\r\\n        createWbtcRootKitLiquidity(wethBalance * wbtcPercent / 10000);\\r\\n        preBuyForGroup(wethBalance * buyPercent / 10000);\\r\\n\\r\\n        sweepFloorToWeth();\\r\\n        weth.transfer(vault, wethBalance * vaultPercent / 10000);\\r\\n        weth.transfer(owner, weth.balanceOf(address(this)));\\r\\n        kethRootKit.transfer(owner, kethRootKit.balanceOf(address(this)));\\r\\n\\r\\n        gate.setUnrestricted(false);\\r\\n    }\\r\\n\\r\\n    function sweepFloorToWeth() private\\r\\n    {\\r\\n        keth.sweepFloor(address(this));\\r\\n        keth.withdrawTokens(keth.balanceOf(address(this)));\\r\\n    }\\r\\n    function createKethRootKitLiquidity(uint256 totalEth) private\\r\\n    {\\r\\n        // Create KETH/ROOT LP \\r\\n        keth.deposit{ value: totalEth }();\\r\\n        (,,totalKethRootKit) = uniswapV2Router.addLiquidity(address(keth), address(rootKit), keth.balanceOf(address(this)), rootKit.totalSupply(), 0, 0, address(this), block.timestamp);\\r\\n        \\r\\n        // Wrap the KETH/ROOT LP for distribution\\r\\n        wrappedKethRootKit.depositTokens(totalKethRootKit);  \\r\\n    }\\r\\n    function createWbtcRootKitLiquidity(uint256 wethAmount) private\\r\\n    {\\r\\n        // Buy ROOT with 1/2 of the funds\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(keth);\\r\\n        path[1] = address(rootKit);\\r\\n        keth.depositTokens(wethAmount / 2);\\r\\n        uint256[] memory amountsRootKit = uniswapV2Router.swapExactTokensForTokens(wethAmount / 2, 0, path, address(this), block.timestamp);\\r\\n\\r\\n        // Buy WBTC with the other 1/2 of the funds\\r\\n        path[0] = address(weth);\\r\\n        path[1] = address(wbtc);\\r\\n        uint256[] memory amountsWbtc = uniswapV2Router.swapExactTokensForTokens(wethAmount / 2, 0, path, address(this), block.timestamp);\\r\\n        (,,totalWbtcRootKit) = uniswapV2Router.addLiquidity(address(wbtc), address(rootKit), amountsWbtc[1], amountsRootKit[1], 0, 0, address(this), block.timestamp);\\r\\n\\r\\n        // Wrap the WBTC/ROOT LP for distribution        \\r\\n        wrappedWbtcRootKit.depositTokens(totalWbtcRootKit);\\r\\n    }\\r\\n    function preBuyForGroup(uint256 wethAmount) private\\r\\n    {      \\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(keth);\\r\\n        path[1] = address(rootKit);\\r\\n        keth.depositTokens(wethAmount);\\r\\n        uint256[] memory amountsRootKit = uniswapV2Router.swapExactTokensForTokens(wethAmount, 0, path, address(this), block.timestamp);\\r\\n        totalRootKitBought = amountsRootKit[1];\\r\\n    }\\r\\n    \\r\\n    function jenga(uint8 count) private\\r\\n    {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(keth);\\r\\n        path[1] = address(rootKit);\\r\\n        for (uint x=0; x\\u003ccount; ++x) {\\r\\n            keth.depositTokens(keth.sweepFloor(address(this)));\\r\\n            uint256[] memory amounts = uniswapV2Router.swapExactTokensForTokens(keth.balanceOf(address(this)) * 2 / 5, 0, path, address(this), block.timestamp);\\r\\n            keth.depositTokens(keth.sweepFloor(address(this)));\\r\\n            uniswapV2Router.addLiquidity(address(keth), address(rootKit), keth.balanceOf(address(this)), amounts[1], 0, 0, address(this), block.timestamp);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claim(address _to, uint256 _contribution) public override\\r\\n    {\\r\\n        require (msg.sender == rootKitLiquidityGeneration, \\\"Unauthorized\\\");\\r\\n        uint256 totalEth = totalEthCollected;\\r\\n\\r\\n        // Send KETH/ROOT liquidity tokens\\r\\n        uint256 share = _contribution.mul(totalKethRootKit) / totalEth;        \\r\\n        if (share \\u003e wrappedKethRootKit.balanceOf(address(this))) {\\r\\n            share = wrappedKethRootKit.balanceOf(address(this)); // Should never happen, but just being safe.\\r\\n        }\\r\\n        wrappedKethRootKit.transfer(_to, share);\\r\\n\\r\\n        // Send WBTC/ROOT liquidity tokens\\r\\n        share = _contribution.mul(totalWbtcRootKit) / totalEth;        \\r\\n        if (share \\u003e wrappedWbtcRootKit.balanceOf(address(this))) {\\r\\n            share = wrappedWbtcRootKit.balanceOf(address(this)); // Should never happen, but just being safe.\\r\\n        }\\r\\n        wrappedWbtcRootKit.transfer(_to, share);\\r\\n\\r\\n        // Send RootKit\\r\\n        RootKitTransferGate gate = RootKitTransferGate(address(rootKit.transferGate()));\\r\\n        gate.setUnrestricted(true);\\r\\n\\r\\n        share = _contribution.mul(totalRootKitBought) / totalEth;\\r\\n        if (share \\u003e rootKit.balanceOf(address(this))) {\\r\\n            share = rootKit.balanceOf(address(this)); // Should never happen, but just being safe.\\r\\n        }\\r\\n        rootKit.transfer(_to, share);\\r\\n\\r\\n        gate.setUnrestricted(false);\\r\\n    }\\r\\n\\r\\n    function canRecoverTokens(IERC20 token) internal override view returns (bool) { \\r\\n        return \\r\\n            block.timestamp \\u003e recoveryDate ||\\r\\n            (\\r\\n                token != rootKit \\u0026\\u0026 \\r\\n                address(token) != address(wrappedKethRootKit) \\u0026\\u0026 \\r\\n                address(token) != address(wrappedWbtcRootKit)\\r\\n            );\\r\\n    }\\r\\n}\"},\"RootKitEasyMoneyButton.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./UniswapV2Library.sol\\\";\\r\\nimport \\\"./IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./IWETH.sol\\\";\\r\\nimport \\\"./KETH.sol\\\";\\r\\nimport \\\"./RootKit.sol\\\";\\r\\nimport \\\"./IUniswapV2Factory.sol\\\";\\r\\n\\r\\ncontract RootKitEasyMoneyButton is TokensRecoverable\\r\\n{\\r\\n    IWETH immutable weth;\\r\\n    KETH immutable keth;\\r\\n    IERC20 immutable wbtc;\\r\\n    RootKit immutable rootKit;\\r\\n    \\r\\n    IUniswapV2Router02 immutable uniswapV2Router;\\r\\n    IUniswapV2Pair immutable wethRootKit;\\r\\n    IUniswapV2Pair immutable kethRootKit;\\r\\n    IUniswapV2Pair immutable wbtcRootKit;\\r\\n    IUniswapV2Pair immutable wethWbtc;\\r\\n\\r\\n    uint256 constant smallestTrade = 0.5 ether;\\r\\n    uint256 constant minProfit = 0.03 ether;\\r\\n\\r\\n    constructor(RootKit _rootKit, IWETH _weth, KETH _keth, IERC20 _wbtc, IUniswapV2Router02 _uniswapV2Router)\\r\\n    {\\r\\n        rootKit = _rootKit;\\r\\n        weth = _weth;\\r\\n        keth = _keth;\\r\\n        wbtc = _wbtc;\\r\\n\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n\\r\\n        IUniswapV2Factory factory = IUniswapV2Factory(_uniswapV2Router.factory());\\r\\n\\r\\n        wethRootKit = IUniswapV2Pair(UniswapV2Library.pairFor(address(factory), address(_weth), address(_rootKit)));\\r\\n        kethRootKit = IUniswapV2Pair(UniswapV2Library.pairFor(address(factory), address(_keth), address(_rootKit)));\\r\\n        wbtcRootKit = IUniswapV2Pair(UniswapV2Library.pairFor(address(factory), address(_wbtc), address(_rootKit)));\\r\\n        wethWbtc = IUniswapV2Pair(UniswapV2Library.pairFor(address(factory), address(_weth), address(_wbtc)));\\r\\n\\r\\n        _rootKit.approve(address(_uniswapV2Router), uint256(-1));\\r\\n        _wbtc.approve(address(_uniswapV2Router), uint256(-1));\\r\\n        _weth.approve(address(_uniswapV2Router), uint256(-1));\\r\\n        _keth.approve(address(_uniswapV2Router), uint256(-1));\\r\\n        _weth.approve(address(_keth), uint256(-1));\\r\\n    }\\r\\n\\r\\n    struct Balances\\r\\n    {\\r\\n        uint256 startingBalance;\\r\\n        uint256 wethRootKit_Weth;\\r\\n        uint256 wethRootKit_RootKit;\\r\\n        uint256 kethRootKit_Keth;\\r\\n        uint256 kethRootKit_RootKit;\\r\\n        uint256 wbtcRootKit_Wbtc;\\r\\n        uint256 wbtcRootKit_RootKit;\\r\\n        uint256 wethWbtc_Weth;\\r\\n        uint256 wethWbtc_Wbtc;\\r\\n    }\\r\\n\\r\\n    function getWeth(uint256 amount) private\\r\\n    {\\r\\n        uint256 balance = weth.balanceOf(address(this));\\r\\n        if (balance \\u003c amount) { \\r\\n            keth.withdrawTokens(amount - balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getKeth(uint256 amount) private\\r\\n    {\\r\\n        uint256 balance = keth.balanceOf(address(this));\\r\\n        if (balance \\u003c amount) { \\r\\n            keth.depositTokens(amount - balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function wethRootKitKeth(Balances memory balances, uint256 amountIn) private pure returns (uint256 profit)\\r\\n    {\\r\\n        profit = amountIn * 997;\\r\\n        profit = (profit * balances.wethRootKit_RootKit) / (balances.wethRootKit_Weth * 1000 + profit);\\r\\n        profit *= 997;\\r\\n        profit = (profit * balances.kethRootKit_Keth) / (balances.kethRootKit_RootKit * 1000 + profit);\\r\\n        return profit \\u003c= amountIn ? 0 : profit - amountIn;\\r\\n    }\\r\\n\\r\\n    function kethRootKitWeth(Balances memory balances, uint256 amountIn) private pure returns (uint256 profit)\\r\\n    {\\r\\n        profit = amountIn * 997;\\r\\n        profit = (profit * balances.kethRootKit_RootKit) / (balances.kethRootKit_Keth * 1000 + profit);\\r\\n        profit *= 997;\\r\\n        profit = (profit * balances.wethRootKit_Weth) / (balances.wethRootKit_RootKit * 1000 + profit);\\r\\n        return profit \\u003c= amountIn ? 0 : profit - amountIn;\\r\\n    }\\r\\n\\r\\n    function wethWbtcRootKitKeth(Balances memory balances, uint256 amountIn) private pure returns (uint256 profit)\\r\\n    {\\r\\n        profit = amountIn * 997;\\r\\n        profit = (profit * balances.wethWbtc_Wbtc) / (balances.wethWbtc_Weth * 1000 + profit);\\r\\n        profit *= 997;\\r\\n        profit = (profit * balances.wbtcRootKit_RootKit) / (balances.wbtcRootKit_Wbtc * 1000 + profit);\\r\\n        profit *= 997;\\r\\n        profit = (profit * balances.kethRootKit_Keth) / (balances.kethRootKit_RootKit * 1000 + profit);\\r\\n        return profit \\u003c= amountIn ? 0 : profit - amountIn;\\r\\n    }\\r\\n\\r\\n    function kethRootKitWbtcWeth(Balances memory balances, uint256 amountIn) private pure returns (uint256 profit)\\r\\n    {\\r\\n        profit = amountIn * 997;\\r\\n        profit = (profit * balances.kethRootKit_RootKit) / (balances.kethRootKit_Keth * 1000 + profit);\\r\\n        profit *= 997;\\r\\n        profit = (profit * balances.wbtcRootKit_Wbtc) / (balances.wbtcRootKit_RootKit * 1000 + profit);\\r\\n        profit *= 997;\\r\\n        profit = (profit * balances.wethRootKit_Weth) / (balances.wethRootKit_RootKit * 1000 + profit);\\r\\n        return profit \\u003c= amountIn ? 0 : profit - amountIn;\\r\\n    }\\r\\n\\r\\n    function wethWbtcRootKitWeth(Balances memory balances, uint256 amountIn) private pure returns (uint256 profit)\\r\\n    {\\r\\n        profit = amountIn * 997;\\r\\n        profit = (profit * balances.wethWbtc_Wbtc) / (balances.wethWbtc_Weth * 1000 + profit);\\r\\n        profit *= 997;\\r\\n        profit = (profit * balances.wbtcRootKit_RootKit) / (balances.wbtcRootKit_Wbtc * 1000 + profit);\\r\\n        profit *= 997;\\r\\n        profit = (profit * balances.wethRootKit_Weth) / (balances.wethRootKit_RootKit * 1000 + profit);\\r\\n        return profit \\u003c= amountIn ? 0 : profit - amountIn;\\r\\n    }\\r\\n\\r\\n    function wethRootKitWbtcWeth(Balances memory balances, uint256 amountIn) private pure returns (uint256 profit)\\r\\n    {\\r\\n        profit = amountIn * 997;\\r\\n        profit = (profit * balances.wethRootKit_RootKit) / (balances.wethRootKit_Weth * 1000 + profit);\\r\\n        profit *= 997;\\r\\n        profit = (profit * balances.wbtcRootKit_Wbtc) / (balances.wbtcRootKit_RootKit * 1000 + profit);\\r\\n        profit *= 997;\\r\\n        profit = (profit * balances.wethWbtc_Weth) / (balances.wethWbtc_Wbtc * 1000 + profit);\\r\\n        return profit \\u003c= amountIn ? 0 : profit - amountIn;\\r\\n    }\\r\\n\\r\\n    function getBalances() private view returns (Balances memory balances)\\r\\n    {\\r\\n        uint256 r0;\\r\\n        uint256 r1;\\r\\n        balances.startingBalance = weth.balanceOf(address(this)) + keth.balanceOf(address(this));\\r\\n        (r0, r1,) = wethRootKit.getReserves();\\r\\n        (balances.wethRootKit_Weth, balances.wethRootKit_RootKit) = address(weth) \\u003c address(rootKit) ? (r0, r1) : (r1, r0);\\r\\n        (r0, r1,) = kethRootKit.getReserves();\\r\\n        (balances.kethRootKit_Keth, balances.kethRootKit_RootKit) = address(keth) \\u003c address(rootKit) ? (r0, r1) : (r1, r0);\\r\\n        (r0, r1,) = wbtcRootKit.getReserves();\\r\\n        (balances.wbtcRootKit_Wbtc, balances.wbtcRootKit_RootKit) = address(wbtc) \\u003c address(rootKit) ? (r0, r1) : (r1, r0);\\r\\n        (r0, r1,) = wethWbtc.getReserves();\\r\\n        (balances.wethWbtc_Weth, balances.wethWbtc_Wbtc) = address(weth) \\u003c address(wbtc) ? (r0, r1) : (r1, r0);\\r\\n        return balances;\\r\\n    }\\r\\n\\r\\n    function getKethRootKitWethProfit(Balances memory balances) private pure returns (uint256 amountIn, uint256 profit)\\r\\n    {\\r\\n        uint256 maxProfit = 0;\\r\\n        uint256 maxProfitAmountIn = 0;\\r\\n        for (amountIn = smallestTrade; amountIn \\u003c= balances.startingBalance; amountIn *= 2) {            \\r\\n            profit = kethRootKitWeth(balances, amountIn);\\r\\n            if (profit \\u003c= maxProfit) { \\r\\n                break;\\r\\n            }\\r\\n            maxProfit = profit;\\r\\n            maxProfitAmountIn = amountIn;\\r\\n        }\\r\\n        return maxProfit \\u003c minProfit ? (0, 0) : (maxProfitAmountIn, maxProfit);\\r\\n    }\\r\\n\\r\\n    function getWethRootKitKethProfit(Balances memory balances) private pure returns (uint256 amountIn, uint256 profit)\\r\\n    {\\r\\n        uint256 maxProfit = 0;\\r\\n        uint256 maxProfitAmountIn = 0;\\r\\n        for (amountIn = smallestTrade; amountIn \\u003c= balances.startingBalance; amountIn *= 2) {\\r\\n            profit = wethRootKitKeth(balances, amountIn);\\r\\n            if (profit \\u003c= maxProfit) { \\r\\n                break;\\r\\n            }\\r\\n            maxProfit = profit;\\r\\n            maxProfitAmountIn = amountIn;\\r\\n        }\\r\\n        return maxProfit \\u003c minProfit ? (0, 0) : (maxProfitAmountIn, maxProfit);\\r\\n    }\\r\\n\\r\\n    function getWethWbtcRootKitKethProfit(Balances memory balances) private pure returns (uint256 amountIn, uint256 profit)\\r\\n    {\\r\\n        uint256 maxProfit = 0;\\r\\n        uint256 maxProfitAmountIn = 0;\\r\\n        for (amountIn = smallestTrade; amountIn \\u003c= balances.startingBalance; amountIn *= 2) {\\r\\n            profit = wethWbtcRootKitKeth(balances, amountIn);\\r\\n            if (profit \\u003c= maxProfit) { \\r\\n                break;\\r\\n            }\\r\\n            maxProfit = profit;\\r\\n            maxProfitAmountIn = amountIn;\\r\\n        }\\r\\n        return maxProfit \\u003c minProfit ? (0, 0) : (maxProfitAmountIn, maxProfit);\\r\\n    }\\r\\n\\r\\n    function getKethRootKitWbtcWethProfit(Balances memory balances) private pure returns (uint256 amountIn, uint256 profit)\\r\\n    {\\r\\n        uint256 maxProfit = 0;\\r\\n        uint256 maxProfitAmountIn = 0;\\r\\n        for (amountIn = smallestTrade; amountIn \\u003c= balances.startingBalance; amountIn *= 2) {\\r\\n            profit = kethRootKitWbtcWeth(balances, amountIn);\\r\\n            if (profit \\u003c= maxProfit) { \\r\\n                break;\\r\\n            }\\r\\n            maxProfit = profit;\\r\\n            maxProfitAmountIn = amountIn;\\r\\n        }\\r\\n        return maxProfit \\u003c minProfit ? (0, 0) : (maxProfitAmountIn, maxProfit);\\r\\n    }\\r\\n\\r\\n    function getWethWbtcRootKitWethProfit(Balances memory balances) private pure returns (uint256 amountIn, uint256 profit)\\r\\n    {\\r\\n        uint256 maxProfit = 0;\\r\\n        uint256 maxProfitAmountIn = 0;\\r\\n        for (amountIn = smallestTrade; amountIn \\u003c= balances.startingBalance; amountIn *= 2) {\\r\\n            profit = wethWbtcRootKitWeth(balances, amountIn);\\r\\n            if (profit \\u003c= maxProfit) { \\r\\n                break;\\r\\n            }\\r\\n            maxProfit = profit;\\r\\n            maxProfitAmountIn = amountIn;\\r\\n        }\\r\\n        return maxProfit \\u003c minProfit ? (0, 0) : (maxProfitAmountIn, maxProfit);\\r\\n    }\\r\\n\\r\\n    function getWethRootKitWbtcWethProfit(Balances memory balances) private pure returns (uint256 amountIn, uint256 profit)\\r\\n    {\\r\\n        uint256 maxProfit = 0;\\r\\n        uint256 maxProfitAmountIn = 0;\\r\\n        for (amountIn = smallestTrade; amountIn \\u003c= balances.startingBalance; amountIn *= 2) {\\r\\n            profit = wethRootKitWbtcWeth(balances, amountIn);\\r\\n            if (profit \\u003c= maxProfit) { \\r\\n                break;\\r\\n            }\\r\\n            maxProfit = profit;\\r\\n            maxProfitAmountIn = amountIn;\\r\\n        }\\r\\n        return maxProfit \\u003c minProfit ? (0, 0) : (maxProfitAmountIn, maxProfit);\\r\\n    }\\r\\n\\r\\n    function estimateProfit() public view returns (uint256 profit)\\r\\n    {\\r\\n        Balances memory balances = getBalances();\\r\\n\\r\\n        (,profit) = getKethRootKitWethProfit(balances);\\r\\n        if (profit \\u003e 0) { return profit; }\\r\\n        (,profit) = getWethRootKitKethProfit(balances);\\r\\n        if (profit \\u003e 0) { return profit; }\\r\\n        (,profit) = getKethRootKitWbtcWethProfit(balances);\\r\\n        if (profit \\u003e 0) { return profit; }\\r\\n        (,profit) = getWethWbtcRootKitKethProfit(balances);\\r\\n        if (profit \\u003e 0) { return profit; }\\r\\n        (,profit) = getWethWbtcRootKitWethProfit(balances);\\r\\n        if (profit \\u003e 0) { return profit; }\\r\\n        (,profit) = getWethRootKitWbtcWethProfit(balances);\\r\\n        return profit;\\r\\n    }\\r\\n\\r\\n    function gimmeMoney() public\\r\\n    {\\r\\n        Balances memory balances = getBalances(); \\r\\n        uint256 amountIn;\\r\\n\\r\\n        (amountIn,) = getKethRootKitWethProfit(balances);\\r\\n        if (amountIn \\u003e 0) {\\r\\n            getKeth(amountIn);\\r\\n            address[] memory path = new address[](3);\\r\\n            path[0] = address(keth);\\r\\n            path[1] = address(rootKit);\\r\\n            path[2] = address(weth);\\r\\n            uniswapV2Router.swapExactTokensForTokens(amountIn, 0, path, address(this), block.timestamp);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        (amountIn,) = getWethRootKitKethProfit(balances);\\r\\n        if (amountIn \\u003e 0) {\\r\\n            getWeth(amountIn);\\r\\n            address[] memory path = new address[](3);\\r\\n            path[0] = address(weth);\\r\\n            path[1] = address(rootKit);\\r\\n            path[2] = address(keth);\\r\\n            uniswapV2Router.swapExactTokensForTokens(amountIn, 0, path, address(this), block.timestamp);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        (amountIn,) = getKethRootKitWbtcWethProfit(balances);\\r\\n        if (amountIn \\u003e 0) {\\r\\n            getKeth(amountIn);\\r\\n            address[] memory path = new address[](4);\\r\\n            path[0] = address(keth);\\r\\n            path[1] = address(rootKit);\\r\\n            path[2] = address(wbtc);\\r\\n            path[3] = address(weth);\\r\\n            uniswapV2Router.swapExactTokensForTokens(amountIn, 0, path, address(this), block.timestamp);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        (amountIn,) = getWethWbtcRootKitKethProfit(balances);\\r\\n        if (amountIn \\u003e 0) {\\r\\n            getKeth(amountIn);\\r\\n            address[] memory path = new address[](4);\\r\\n            path[0] = address(weth);\\r\\n            path[1] = address(wbtc);\\r\\n            path[2] = address(rootKit);\\r\\n            path[3] = address(keth);\\r\\n            uniswapV2Router.swapExactTokensForTokens(amountIn, 0, path, address(this), block.timestamp);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        (amountIn,) = getWethWbtcRootKitWethProfit(balances);\\r\\n        if (amountIn \\u003e 0) {\\r\\n            getKeth(amountIn);\\r\\n            address[] memory path = new address[](4);\\r\\n            path[0] = address(weth);\\r\\n            path[1] = address(wbtc);\\r\\n            path[2] = address(rootKit);\\r\\n            path[3] = address(weth);\\r\\n            uniswapV2Router.swapExactTokensForTokens(amountIn, 0, path, address(this), block.timestamp);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        (amountIn,) = getWethRootKitWbtcWethProfit(balances);\\r\\n        if (amountIn \\u003e 0) {\\r\\n            getKeth(amountIn);\\r\\n            address[] memory path = new address[](4);\\r\\n            path[0] = address(weth);\\r\\n            path[1] = address(rootKit);\\r\\n            path[2] = address(wbtc);\\r\\n            path[3] = address(weth);\\r\\n            uniswapV2Router.swapExactTokensForTokens(amountIn, 0, path, address(this), block.timestamp);\\r\\n            return;\\r\\n        }\\r\\n        \\r\\n        revert(\\\"No profit\\\");\\r\\n    }\\r\\n}\"},\"RootKitFloorCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nA floor calculator (to use with ERC31337) for RootKit uniswap pairs\\r\\nEnsures 100% of accessible funds are backed at all times\\r\\n*/\\r\\n\\r\\nimport \\\"./IFloorCalculator.sol\\\";\\r\\nimport \\\"./RootKit.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./UniswapV2Library.sol\\\";\\r\\nimport \\\"./IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\n\\r\\ncontract RootKitFloorCalculator is IFloorCalculator, TokensRecoverable\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    RootKit immutable rootKit;\\r\\n    IUniswapV2Factory immutable uniswapV2Factory;\\r\\n\\r\\n    constructor(RootKit _rootKit, IUniswapV2Factory _uniswapV2Factory)\\r\\n    {\\r\\n        rootKit = _rootKit;\\r\\n        uniswapV2Factory = _uniswapV2Factory;\\r\\n    }\\r\\n\\r\\n    function calculateSubFloor(IERC20 wrappedToken, IERC20 backingToken) public override view returns (uint256)\\r\\n    {\\r\\n        address pair = UniswapV2Library.pairFor(address(uniswapV2Factory), address(rootKit), address(backingToken));\\r\\n        uint256 freeRootKit = rootKit.totalSupply().sub(rootKit.balanceOf(pair));\\r\\n        uint256 sellAllProceeds = 0;\\r\\n        if (freeRootKit \\u003e 0) {\\r\\n            address[] memory path = new address[](2);\\r\\n            path[0] = address(rootKit);\\r\\n            path[1] = address(backingToken);\\r\\n            uint256[] memory amountsOut = UniswapV2Library.getAmountsOut(address(uniswapV2Factory), freeRootKit, path);\\r\\n            sellAllProceeds = amountsOut[1];\\r\\n        }\\r\\n        uint256 backingInPool = backingToken.balanceOf(pair);\\r\\n        if (backingInPool \\u003c= sellAllProceeds) { return 0; }\\r\\n        uint256 excessInPool = backingInPool - sellAllProceeds;\\r\\n\\r\\n        uint256 requiredBacking = backingToken.totalSupply().sub(excessInPool);\\r\\n        uint256 currentBacking = wrappedToken.balanceOf(address(backingToken));\\r\\n        if (requiredBacking \\u003e= currentBacking) { return 0; }\\r\\n        return currentBacking - requiredBacking;\\r\\n    }\\r\\n}\"},\"RootKitLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nA wrapper for liquidity tokens so they can be distributed\\r\\nbut not allowing for removal of liquidity\\r\\n*/\\r\\n\\r\\nimport \\\"./ERC31337.sol\\\";\\r\\nimport \\\"./IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ncontract RootKitLiquidity is ERC31337\\r\\n{\\r\\n    constructor(IUniswapV2Pair _pair, string memory _name, string memory _symbol)\\r\\n        ERC31337(IERC20(address(_pair)), _name, _symbol)\\r\\n    {\\r\\n    }\\r\\n\\r\\n    function _beforeWithdrawTokens(uint256) internal override pure\\r\\n    { \\r\\n        revert(\\\"RootKit liquidity is locked\\\");\\r\\n    }\\r\\n}\"},\"RootKitLiquidityGeneration.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./RootKit.sol\\\";\\r\\nimport \\\"./IRootKitDistribution.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\n\\r\\ncontract RootKitLiquidityGeneration is TokensRecoverable\\r\\n{\\r\\n    mapping (address =\\u003e uint256) public contribution;\\r\\n    address[] public contributors;\\r\\n\\r\\n    bool public isActive;\\r\\n\\r\\n    RootKit immutable rootKit;\\r\\n    IRootKitDistribution public rootKitDistribution;\\r\\n    uint256 refundsAllowedUntil;\\r\\n\\r\\n    constructor (RootKit _rootKit)\\r\\n    {\\r\\n        rootKit = _rootKit;\\r\\n    }\\r\\n\\r\\n    modifier active()\\r\\n    {\\r\\n        require (isActive, \\\"Distribution not active\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function contributorsCount() public view returns (uint256) { return contributors.length; }\\r\\n\\r\\n    function activate(IRootKitDistribution _rootKitDistribution) public ownerOnly()\\r\\n    {\\r\\n        require (!isActive \\u0026\\u0026 contributors.length == 0 \\u0026\\u0026 block.timestamp \\u003e= refundsAllowedUntil, \\\"Already activated\\\");        \\r\\n        require (rootKit.balanceOf(address(this)) == rootKit.totalSupply(), \\\"Missing supply\\\");\\r\\n        require (address(_rootKitDistribution) != address(0));\\r\\n        rootKitDistribution = _rootKitDistribution;\\r\\n        isActive = true;\\r\\n    }\\r\\n\\r\\n    function setRootKitDistribution(IRootKitDistribution _rootKitDistribution) public ownerOnly() active()\\r\\n    {\\r\\n        require (address(_rootKitDistribution) != address(0));\\r\\n        if (_rootKitDistribution == rootKitDistribution) { return; }\\r\\n        rootKitDistribution = _rootKitDistribution;\\r\\n\\r\\n        // Give everyone 1 day to claim refunds if they don\\u0027t approve of the new distributor\\r\\n        refundsAllowedUntil = block.timestamp + 86400;\\r\\n    }\\r\\n\\r\\n    function complete() public ownerOnly() active()\\r\\n    {\\r\\n        require (block.timestamp \\u003e= refundsAllowedUntil, \\\"Refund period is still active\\\");\\r\\n        isActive = false;\\r\\n        if (address(this).balance == 0) { return; }\\r\\n        rootKit.approve(address(rootKitDistribution), uint256(-1));\\r\\n        rootKitDistribution.distribute{ value: address(this).balance }();\\r\\n    }\\r\\n\\r\\n    function allowRefunds() public ownerOnly() active()\\r\\n    {\\r\\n        isActive = false;\\r\\n        refundsAllowedUntil = uint256(-1);\\r\\n    }\\r\\n\\r\\n    function claim() public\\r\\n    {\\r\\n        uint256 amount = contribution[msg.sender];\\r\\n        require (amount \\u003e 0, \\\"Nothing to claim\\\");\\r\\n        contribution[msg.sender] = 0;\\r\\n        if (refundsAllowedUntil \\u003e block.timestamp) {\\r\\n            (bool success,) = msg.sender.call{ value: amount }(\\\"\\\");\\r\\n            require (success, \\\"Transfer failed\\\");\\r\\n        }\\r\\n        else {\\r\\n            rootKitDistribution.claim(msg.sender, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable active()\\r\\n    {\\r\\n        uint256 oldContribution = contribution[msg.sender];\\r\\n        uint256 newContribution = oldContribution + msg.value;\\r\\n        if (oldContribution == 0 \\u0026\\u0026 newContribution \\u003e 0) {\\r\\n            contributors.push(msg.sender);\\r\\n        }\\r\\n        contribution[msg.sender] = newContribution;\\r\\n    }\\r\\n}\"},\"RootKitLiquidityMatching.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./RootKit.sol\\\";\\r\\nimport \\\"./IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./IWrappedERC20.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./KETH.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IWETH.sol\\\";\\r\\n\\r\\n/* ROOTKIT:\\r\\nThis receives RootKit from whereever\\r\\nYou can add ETH or KETH and we\\u0027ll match it with RootKit from here for you\\r\\nThen you get the liquidity tokens back\\r\\nAll in one shot\\r\\nReady for staking\\r\\nCheaper than buying first!\\r\\n*/\\r\\n\\r\\ncontract RootKitLiquidityMatching is TokensRecoverable\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    RootKit immutable rootKit;\\r\\n    IUniswapV2Router02 immutable uniswapV2Router;\\r\\n    IWrappedERC20 immutable liquidityTokenWrapper;\\r\\n    KETH immutable keth;\\r\\n    IWETH immutable weth;\\r\\n\\r\\n    uint16 public liquidityPercentForUser = 5000; // 100% = 10000\\r\\n\\r\\n    constructor(RootKit _rootKit, IUniswapV2Router02 _uniswapV2Router, IWrappedERC20 _liquidityTokenWrapper, KETH _keth)\\r\\n    {\\r\\n        rootKit = _rootKit;\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n        liquidityTokenWrapper = _liquidityTokenWrapper;\\r\\n        keth = _keth;\\r\\n\\r\\n        IWETH _weth = IWETH(_uniswapV2Router.WETH());\\r\\n        weth = _weth;\\r\\n\\r\\n        IERC20 _liquidityToken = _liquidityTokenWrapper.wrappedToken();\\r\\n        _liquidityToken.approve(address(_liquidityTokenWrapper), uint256(-1));\\r\\n        _rootKit.approve(address(_uniswapV2Router), uint256(-1));\\r\\n        _keth.approve(address(_uniswapV2Router), uint256(-1));\\r\\n        _weth.approve(address(_uniswapV2Router), uint256(-1));\\r\\n        _weth.approve(address(_keth), uint256(-1));\\r\\n\\r\\n        require (IUniswapV2Factory(_uniswapV2Router.factory()).getPair(address(_rootKit), address(_keth)) == address(_liquidityToken), \\\"Sanity\\\");\\r\\n    }\\r\\n\\r\\n    receive() external payable\\r\\n    {\\r\\n        require (msg.sender == address(keth));\\r\\n    }\\r\\n\\r\\n    function setLiquidityPercentForUser(uint16 _liquidityPercentForUser) public ownerOnly()\\r\\n    {\\r\\n        require (_liquidityPercentForUser \\u003c= 10000);\\r\\n        \\r\\n        liquidityPercentForUser = _liquidityPercentForUser;\\r\\n    }\\r\\n\\r\\n    function addLiquidityETH() public payable\\r\\n    {\\r\\n        uint256 amount = msg.value;\\r\\n        require (amount \\u003e 0, \\\"Zero amount\\\");\\r\\n        keth.deposit{ value: amount }();\\r\\n\\r\\n        uint256 remainingKeth = addKethToLiquidity(amount);\\r\\n\\r\\n        if (remainingKeth \\u003e 0) {\\r\\n            keth.withdraw(remainingKeth);\\r\\n            (bool success,) = msg.sender.call{ value: remainingKeth }(\\\"\\\");\\r\\n            require (success, \\\"Transfer failed\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addLiquidityWETH(uint256 amount) public\\r\\n    {\\r\\n        require (amount \\u003e 0, \\\"Zero amount\\\");\\r\\n        weth.transferFrom(msg.sender, address(this), amount);\\r\\n        keth.depositTokens(amount);\\r\\n\\r\\n        uint256 remainingKeth = addKethToLiquidity(amount);\\r\\n\\r\\n        if (remainingKeth \\u003e 0) {\\r\\n            keth.withdrawTokens(remainingKeth);\\r\\n            weth.transfer(msg.sender, remainingKeth);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addLiquidityKETH(uint256 amount) public\\r\\n    {\\r\\n        require (amount \\u003e 0, \\\"Zero amount\\\");\\r\\n        keth.transferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n        uint256 remainingKeth = addKethToLiquidity(amount);\\r\\n\\r\\n        if (remainingKeth \\u003e 0) {\\r\\n            keth.transfer(msg.sender, remainingKeth);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addKethToLiquidity(uint256 amount) private returns (uint256 remainingKeth)\\r\\n    {\\r\\n        (,,uint256 liquidity) = uniswapV2Router.addLiquidity(address(rootKit), address(keth), rootKit.balanceOf(address(this)), amount, 0, 0, address(this), block.timestamp);\\r\\n        require (liquidity \\u003e 0, \\\"No liquidity created (no available RootKit?)\\\");\\r\\n        liquidity = liquidity.mul(liquidityPercentForUser) / 10000;\\r\\n        liquidityTokenWrapper.depositTokens(liquidity);\\r\\n        liquidityTokenWrapper.transfer(msg.sender, liquidity);\\r\\n        return keth.balanceOf(address(this));\\r\\n    }\\r\\n}\"},\"RootKitMoneyButton.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/* ROOTKIT:\\r\\n\\r\\nThis is a money button\\r\\n\\r\\nPress it for free money\\r\\n\\r\\nand LOL cus it actually works\\r\\n\\r\\n*/\\r\\n\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./KETH.sol\\\";\\r\\nimport \\\"./IWETH.sol\\\";\\r\\nimport \\\"./UniswapV2Library.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\n\\r\\ncontract RootKitMoneyButton is TokensRecoverable\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    IUniswapV2Router02 immutable uniswapV2Router;\\r\\n    IUniswapV2Factory immutable uniswapV2Factory;\\r\\n    KETH immutable keth;\\r\\n    IWETH immutable weth;\\r\\n    mapping (address =\\u003e bool) approved;\\r\\n\\r\\n    address public vault;\\r\\n    uint16 public percentToVault; // 10000 = 100%;\\r\\n\\r\\n    constructor(IUniswapV2Router02 _uniswapV2Router, KETH _keth)\\r\\n    {\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n        uniswapV2Factory = IUniswapV2Factory(_uniswapV2Router.factory());\\r\\n        keth = _keth;\\r\\n        IWETH _weth = weth = IWETH(address(_keth.wrappedToken()));\\r\\n\\r\\n        _weth.approve(address(_keth), uint256(-1));\\r\\n    }\\r\\n\\r\\n    receive() external payable\\r\\n    {\\r\\n        require (msg.sender == address(weth) || msg.sender == address(keth));\\r\\n    }\\r\\n\\r\\n    function configure(address _vault, uint16 _percentToVault) public ownerOnly() {\\r\\n        require (_vault != address(0) \\u0026\\u0026 _percentToVault \\u003c= 10000);\\r\\n        vault = _vault;\\r\\n        percentToVault = _percentToVault;\\r\\n    }\\r\\n\\r\\n    function estimateProfit(address[] calldata _fullPath, uint256 _amountIn) public view returns (uint256)\\r\\n    {\\r\\n        uint256 amountOut = _amountIn;\\r\\n        address[] memory path = new address[](2);\\r\\n        for (uint256 x=1; x\\u003c=_fullPath.length; ++x) {\\r\\n            path[0] = _fullPath[x-1];\\r\\n            path[1] = _fullPath[x%_fullPath.length];\\r\\n            bool kindaEthIn = path[0] == address(0) || path[0] == address(weth) || path[0] == address(keth);\\r\\n            bool kindaEthOut = path[1] == address(0) || path[1] == address(weth) || path[1] == address(keth);\\r\\n            if (kindaEthIn \\u0026\\u0026 kindaEthOut) { continue; }\\r\\n            (uint256[] memory amountsOut) = UniswapV2Library.getAmountsOut(address(uniswapV2Factory), amountOut, path);\\r\\n            amountOut = amountsOut[1];\\r\\n        }\\r\\n        if (amountOut \\u003c= _amountIn) { return 0; }\\r\\n        return amountOut - _amountIn;\\r\\n    }\\r\\n\\r\\n    function gimmeMoney(address[] calldata _fullPath, uint256 _amountIn, uint256 _minProfit) public payable\\r\\n    {\\r\\n        require ((msg.value == 0) != (_fullPath[0] == address(0)), \\\"Send ETH if and only if the path starts with ETH\\\");\\r\\n        uint256 amountOut = _amountIn;\\r\\n        address[] memory path = new address[](2);\\r\\n        uint256 count = _fullPath.length;\\r\\n        if (_fullPath[0] != address(0)) {\\r\\n            IERC20(_fullPath[0]).safeTransferFrom(msg.sender, address(this), _amountIn);\\r\\n        }\\r\\n        for (uint256 x=1; x\\u003c=count; ++x) {\\r\\n            address tokenIn = _fullPath[x-1];\\r\\n            address tokenOut = _fullPath[x%count];\\r\\n            if (tokenIn == tokenOut) { continue; }\\r\\n            if (tokenIn == address(0)) {\\r\\n                require (x == 1, \\\"Conversion from ETH can only happen first\\\");\\r\\n                amountOut = _amountIn = msg.value;\\r\\n                if (tokenOut == address(weth)) {\\r\\n                    weth.deposit{ value: amountOut }();\\r\\n                }\\r\\n                else if (tokenOut == address(keth)) {\\r\\n                    keth.deposit{ value: amountOut }();\\r\\n                }\\r\\n                else {\\r\\n                    revert(\\\"ETH must convert to WETH or KETH\\\");\\r\\n                }\\r\\n                continue;\\r\\n            }\\r\\n            if (tokenOut == address(0)) {\\r\\n                require (x == _fullPath.length, \\\"Conversion to ETH can only happen last\\\");\\r\\n                if (tokenIn == address(weth)) {\\r\\n                    weth.withdraw(amountOut);\\r\\n                }\\r\\n                else if (tokenIn == address(keth)) {\\r\\n                    keth.withdraw(amountOut);\\r\\n                }\\r\\n                else {\\r\\n                    revert(\\\"ETH must be converted from WETH or KETH\\\");\\r\\n                }\\r\\n                continue;\\r\\n            }\\r\\n            if (tokenIn == address(weth) \\u0026\\u0026 tokenOut == address(keth)) {\\r\\n                keth.depositTokens(amountOut);\\r\\n                continue;\\r\\n            }\\r\\n            if (tokenIn == address(keth) \\u0026\\u0026 tokenOut == address(weth)) {\\r\\n                keth.withdrawTokens(amountOut);\\r\\n                continue;\\r\\n            }            \\r\\n            if (!approved[tokenIn]) {\\r\\n                IERC20(tokenIn).safeApprove(address(uniswapV2Router), uint256(-1));\\r\\n                approved[tokenIn] = true;\\r\\n            }\\r\\n            path[0] = tokenIn;\\r\\n            path[1] = tokenOut;\\r\\n            (uint256[] memory amounts) = uniswapV2Router.swapExactTokensForTokens(amountOut, 0, path, address(this), block.timestamp);\\r\\n            amountOut = amounts[1];\\r\\n        }\\r\\n\\r\\n        amountOut = _fullPath[0] == address(0) ? address(this).balance : IERC20(_fullPath[0]).balanceOf(address(this));\\r\\n\\r\\n        require (amountOut \\u003e= _amountIn.add(_minProfit), \\\"Not enough profit\\\");\\r\\n\\r\\n        uint256 forVault = (amountOut - _amountIn).mul(percentToVault) / 10000;\\r\\n        if (_fullPath[0] == address(0)) {\\r\\n            (bool success,) = msg.sender.call{ value: amountOut - forVault }(\\\"\\\");\\r\\n            require (success, \\\"Transfer failed\\\");\\r\\n            (success,) = vault.call{ value: forVault }(\\\"\\\");\\r\\n            require (success, \\\"Transfer failed\\\");\\r\\n            return;\\r\\n        }\\r\\n        IERC20(_fullPath[0]).safeTransfer(msg.sender, amountOut - forVault);\\r\\n        IERC20(_fullPath[0]).safeTransfer(vault, forVault);\\r\\n    }\\r\\n}\"},\"RootKitRuggableFloorCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nA floor calculator (to use with ERC31337)\\r\\nThis one is for liquidity tokens\\r\\nSo finally\\r\\nWE CAN PLAY JENGA\\r\\n*/\\r\\n\\r\\nimport \\\"./IFloorCalculator.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\n\\r\\ncontract RootKitRuggableFloorCalculator is IFloorCalculator, TokensRecoverable\\r\\n{\\r\\n    uint256 subFloor;\\r\\n\\r\\n    function setSubFloor(uint256 _subFloor) public ownerOnly()\\r\\n    {\\r\\n        subFloor = _subFloor;\\r\\n    }\\r\\n\\r\\n    function calculateSubFloor(IERC20, IERC20) public override view returns (uint256)\\r\\n    {\\r\\n        return subFloor;\\r\\n    }\\r\\n}\"},\"RootKitStaking.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nFrom https://raw.githubusercontent.com/sushiswap/sushiswap/master/contracts/MasterChef.sol\\r\\nExcept a million times better\\r\\n*/\\r\\n\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\n\\r\\ncontract RootKitStaking is TokensRecoverable\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    event Deposit(address indexed user, uint256 indexed poolId, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 indexed poolId, uint256 amount);\\r\\n    event EmergencyWithdraw(address indexed user, uint256 indexed poolId, uint256 amount);\\r\\n    event Emergency();\\r\\n\\r\\n    struct UserInfo \\r\\n    {\\r\\n        uint256 amountStaked;\\r\\n        uint256 rewardDebt;\\r\\n    }\\r\\n\\r\\n    struct PoolInfo \\r\\n    {\\r\\n        IERC20 token;\\r\\n        uint256 allocationPoints;\\r\\n        uint256 lastTotalReward;\\r\\n        uint256 accRewardPerShare;\\r\\n    }\\r\\n\\r\\n    IERC20 public immutable rewardToken;\\r\\n\\r\\n    PoolInfo[] public poolInfo;\\r\\n    mapping (uint256 =\\u003e mapping (address =\\u003e UserInfo)) public userInfo;\\r\\n    uint256 public totalAllocationPoints;\\r\\n\\r\\n    mapping (IERC20 =\\u003e bool) existingPools;\\r\\n    uint256 constant maxPoolCount = 20; // to simplify things and ensure massUpdatePools is safe\\r\\n    uint256 totalReward;\\r\\n    uint256 lastRewardBalance;\\r\\n\\r\\n    uint256 public emergencyRecoveryTimestamp;\\r\\n\\r\\n    constructor(IERC20 _rewardToken)\\r\\n    {\\r\\n        rewardToken = _rewardToken;\\r\\n    }\\r\\n\\r\\n    function poolInfoCount() external view returns (uint256) \\r\\n    {\\r\\n        return poolInfo.length;\\r\\n    }\\r\\n\\r\\n    function addPool(uint256 _allocationPoints, IERC20 _token) public ownerOnly()\\r\\n    {\\r\\n        require (address(_token) != address(0) \\u0026\\u0026 _token != rewardToken \\u0026\\u0026 emergencyRecoveryTimestamp == 0);\\r\\n        require (!existingPools[_token], \\\"Pool exists\\\");\\r\\n        require (poolInfo.length \\u003c maxPoolCount, \\\"Too many pools\\\");\\r\\n        existingPools[_token] = true;\\r\\n        massUpdatePools();\\r\\n        totalAllocationPoints = totalAllocationPoints.add(_allocationPoints);\\r\\n        poolInfo.push(PoolInfo({\\r\\n            token: _token,\\r\\n            allocationPoints: _allocationPoints,\\r\\n            lastTotalReward: totalReward,\\r\\n            accRewardPerShare: 0\\r\\n        }));\\r\\n    }\\r\\n\\r\\n    function setPoolAllocationPoints(uint256 _poolId, uint256 _allocationPoints) public ownerOnly()\\r\\n    {\\r\\n        require (emergencyRecoveryTimestamp == 0);\\r\\n        massUpdatePools();\\r\\n        totalAllocationPoints = totalAllocationPoints.sub(poolInfo[_poolId].allocationPoints).add(_allocationPoints);\\r\\n        poolInfo[_poolId].allocationPoints = _allocationPoints;\\r\\n    }\\r\\n\\r\\n    function pendingReward(uint256 _poolId, address _user) external view returns (uint256) \\r\\n    {\\r\\n        PoolInfo storage pool = poolInfo[_poolId];\\r\\n        UserInfo storage user = userInfo[_poolId][_user];\\r\\n        uint256 accRewardPerShare = pool.accRewardPerShare;\\r\\n        uint256 supply = pool.token.balanceOf(address(this));\\r\\n        uint256 balance = rewardToken.balanceOf(address(this));\\r\\n        uint256 _totalReward = totalReward;\\r\\n        if (balance \\u003e lastRewardBalance) {\\r\\n            _totalReward = _totalReward.add(balance.sub(lastRewardBalance));\\r\\n        }\\r\\n        if (_totalReward \\u003e pool.lastTotalReward \\u0026\\u0026 supply != 0) {\\r\\n            uint256 reward = _totalReward.sub(pool.lastTotalReward).mul(pool.allocationPoints).div(totalAllocationPoints);\\r\\n            accRewardPerShare = accRewardPerShare.add(reward.mul(1e12).div(supply));\\r\\n        }\\r\\n        return user.amountStaked.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt);\\r\\n    }\\r\\n\\r\\n    function massUpdatePools() public \\r\\n    {\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 poolId = 0; poolId \\u003c length; ++poolId) {\\r\\n            updatePool(poolId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updatePool(uint256 _poolId) public \\r\\n    {\\r\\n        PoolInfo storage pool = poolInfo[_poolId];\\r\\n        uint256 rewardBalance = rewardToken.balanceOf(address(this));\\r\\n        if (pool.lastTotalReward == rewardBalance) {\\r\\n            return;\\r\\n        }\\r\\n        uint256 _totalReward = totalReward.add(rewardBalance.sub(lastRewardBalance));\\r\\n        lastRewardBalance = rewardBalance;\\r\\n        totalReward = _totalReward;\\r\\n        uint256 supply = pool.token.balanceOf(address(this));\\r\\n        if (supply == 0) {\\r\\n            pool.lastTotalReward = _totalReward;\\r\\n            return;\\r\\n        }\\r\\n        uint256 reward = _totalReward.sub(pool.lastTotalReward).mul(pool.allocationPoints).div(totalAllocationPoints);\\r\\n        pool.accRewardPerShare = pool.accRewardPerShare.add(reward.mul(1e12).div(supply));\\r\\n        pool.lastTotalReward = _totalReward;\\r\\n    }\\r\\n\\r\\n    function deposit(uint256 _poolId, uint256 _amount) public \\r\\n    {\\r\\n        require (emergencyRecoveryTimestamp == 0, \\\"Withdraw only\\\");\\r\\n        PoolInfo storage pool = poolInfo[_poolId];\\r\\n        UserInfo storage user = userInfo[_poolId][msg.sender];\\r\\n        updatePool(_poolId);\\r\\n        if (user.amountStaked \\u003e 0) {\\r\\n            uint256 pending = user.amountStaked.mul(pool.accRewardPerShare).div(1e12).sub(user.rewardDebt);\\r\\n            if (pending \\u003e 0) {\\r\\n                safeRewardTransfer(msg.sender, pending);                \\r\\n            }\\r\\n        }\\r\\n        if (_amount \\u003e 0) {\\r\\n            pool.token.safeTransferFrom(address(msg.sender), address(this), _amount);\\r\\n            user.amountStaked = user.amountStaked.add(_amount);\\r\\n        }\\r\\n        user.rewardDebt = user.amountStaked.mul(pool.accRewardPerShare).div(1e12);\\r\\n        emit Deposit(msg.sender, _poolId, _amount);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 _poolId, uint256 _amount) public \\r\\n    {\\r\\n        PoolInfo storage pool = poolInfo[_poolId];\\r\\n        UserInfo storage user = userInfo[_poolId][msg.sender];\\r\\n        require(user.amountStaked \\u003e= _amount, \\\"Amount more than staked\\\");\\r\\n        updatePool(_poolId);\\r\\n        uint256 pending = user.amountStaked.mul(pool.accRewardPerShare).div(1e12).sub(user.rewardDebt);\\r\\n        if (pending \\u003e 0) {\\r\\n            safeRewardTransfer(msg.sender, pending);\\r\\n        }\\r\\n        if (_amount \\u003e 0) {\\r\\n            user.amountStaked = user.amountStaked.sub(_amount);\\r\\n            pool.token.safeTransfer(address(msg.sender), _amount);\\r\\n        }\\r\\n        user.rewardDebt = user.amountStaked.mul(pool.accRewardPerShare).div(1e12);\\r\\n        emit Withdraw(msg.sender, _poolId, _amount);\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw(uint256 _poolId) public \\r\\n    {\\r\\n        PoolInfo storage pool = poolInfo[_poolId];\\r\\n        UserInfo storage user = userInfo[_poolId][msg.sender];\\r\\n        uint256 amount = user.amountStaked;\\r\\n        user.amountStaked = 0;\\r\\n        user.rewardDebt = 0;\\r\\n        pool.token.safeTransfer(address(msg.sender), amount);\\r\\n        emit EmergencyWithdraw(msg.sender, _poolId, amount);\\r\\n    }\\r\\n\\r\\n    function safeRewardTransfer(address _to, uint256 _amount) internal \\r\\n    {\\r\\n        uint256 balance = rewardToken.balanceOf(address(this));\\r\\n        rewardToken.safeTransfer(_to, _amount \\u003e balance ? balance : _amount);\\r\\n        lastRewardBalance = rewardToken.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function declareEmergency() public ownerOnly() \\r\\n    {\\r\\n        // Funds will be recoverable 3 days after an emergency is declared\\r\\n        // By then, everyone should have withdrawn whatever they can\\r\\n        // Failing that (which is probably why there\\u0027s an emergency) we can recover for them\\r\\n        emergencyRecoveryTimestamp = block.timestamp + 60*60*24*3;\\r\\n        emit Emergency();\\r\\n    }\\r\\n\\r\\n    function canRecoverTokens(IERC20 token) internal override view returns (bool) \\r\\n    { \\r\\n        if (emergencyRecoveryTimestamp != 0 \\u0026\\u0026 block.timestamp \\u003e emergencyRecoveryTimestamp) {\\r\\n            return true;\\r\\n        }\\r\\n        else {\\r\\n            return token != rewardToken \\u0026\\u0026 !existingPools[token];\\r\\n        }\\r\\n    }\\r\\n}\"},\"RootKitTransferGate.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/* ROOTKIT:\\r\\nA transfer gate (GatedERC20) for use with RootKit tokens\\r\\n\\r\\nIt:\\r\\n    Allows customization of tax and burn rates\\r\\n    Allows transfer to/from approved UniswapV2 pools\\r\\n    Disallows transfer to/from non-approved UniswapV2 pools\\r\\n    Allows transfer to/from anywhere else\\r\\n    Allows for free transfers if permission granted\\r\\n    Allows for unrestricted transfers if permission granted\\r\\n    Provides a safe and tax-free liquidity adding function\\r\\n*/\\r\\n\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./RootKit.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./ITransferGate.sol\\\";\\r\\n\\r\\nstruct RootKitTransferGateParameters\\r\\n{\\r\\n    address dev;\\r\\n    uint16 stakeRate; // 10000 = 100%\\r\\n    uint16 burnRate; // 10000 = 100%\\r\\n    uint16 devRate;  // 10000 = 100%\\r\\n    address stake;\\r\\n}\\r\\n\\r\\ncontract RootKitTransferGate is TokensRecoverable, ITransferGate\\r\\n{   \\r\\n    using Address for address;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    enum AddressState\\r\\n    {\\r\\n        Unknown,\\r\\n        NotPool,\\r\\n        DisallowedPool,\\r\\n        AllowedPool\\r\\n    }\\r\\n\\r\\n    RootKitTransferGateParameters public parameters;\\r\\n    IUniswapV2Router02 public uniswapV2Router;\\r\\n    IUniswapV2Factory public uniswapV2Factory;\\r\\n    RootKit immutable rootKit;\\r\\n\\r\\n    mapping (address =\\u003e AddressState) public addressStates;\\r\\n    IERC20[] public allowedPoolTokens;\\r\\n    \\r\\n    bool public unrestricted;\\r\\n    mapping (address =\\u003e bool) public unrestrictedControllers;\\r\\n    mapping (address =\\u003e bool) public feeControllers;\\r\\n    mapping (address =\\u003e bool) public freeParticipantControllers;\\r\\n    mapping (address =\\u003e bool) public freeParticipant;\\r\\n    mapping (address =\\u003e uint16) public poolsTaxRates;\\r\\n\\r\\n    mapping (address =\\u003e uint256) public liquiditySupply;\\r\\n    address public mustUpdate;\\r\\n\\r\\n    uint16 public dumpTaxStartRate; \\r\\n    uint256 public dumpTaxDurationInSeconds;\\r\\n    uint256 public dumpTaxEndTimestamp;\\r\\n\\r\\n    constructor(RootKit _rootKit, IUniswapV2Router02 _uniswapV2Router)\\r\\n    {\\r\\n        rootKit = _rootKit;\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n        uniswapV2Factory = IUniswapV2Factory(_uniswapV2Router.factory());\\r\\n    }\\r\\n\\r\\n    function setRouterAndFactory(IUniswapV2Router02 _uniswapV2Router) public ownerOnly()\\r\\n    {\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n        uniswapV2Factory = IUniswapV2Factory(_uniswapV2Router.factory());\\r\\n    }\\r\\n\\r\\n    function allowedPoolTokensCount() public view returns (uint256) { return allowedPoolTokens.length; }\\r\\n\\r\\n    function setUnrestrictedController(address unrestrictedController, bool allow) public ownerOnly()\\r\\n    {\\r\\n        unrestrictedControllers[unrestrictedController] = allow;\\r\\n    }\\r\\n\\r\\n    function setFreeParticipantController(address freeParticipantController, bool allow) public ownerOnly()\\r\\n    {\\r\\n        freeParticipantControllers[freeParticipantController] = allow;\\r\\n    }\\r\\n\\r\\n    function setFeeControllers(address feeController, bool allow) public ownerOnly()\\r\\n    {\\r\\n        feeControllers[feeController] = allow;\\r\\n    }\\r\\n    \\r\\n    function setFreeParticipant(address participant, bool free) public\\r\\n    {\\r\\n        require (freeParticipantControllers[msg.sender] || msg.sender == owner, \\\"Not an owner or fee controller\\\");\\r\\n        freeParticipant[participant] = free;\\r\\n    }\\r\\n    \\r\\n    function setUnrestricted(bool _unrestricted) public\\r\\n    {\\r\\n        require (unrestrictedControllers[msg.sender], \\\"Not an unrestricted controller\\\");\\r\\n        unrestricted = _unrestricted;\\r\\n    }\\r\\n\\r\\n    function setParameters(address _dev, address _stake, uint16 _stakeRate, uint16 _burnRate, uint16 _devRate) public ownerOnly()\\r\\n    {\\r\\n        require (_stakeRate \\u003c= 10000 \\u0026\\u0026 _burnRate \\u003c= 10000 \\u0026\\u0026 _devRate \\u003c= 10000 \\u0026\\u0026 _stakeRate + _burnRate + _devRate \\u003c= 10000, \\\"\\u003e 100%\\\");\\r\\n        require (_dev != address(0) \\u0026\\u0026 _stake != address(0));\\r\\n        require (_stakeRate \\u003c= 500 \\u0026\\u0026 _burnRate \\u003c= 500 \\u0026\\u0026 _devRate \\u003c= 10, \\\"Sanity\\\");\\r\\n        \\r\\n        RootKitTransferGateParameters memory _parameters;\\r\\n        _parameters.dev = _dev;\\r\\n        _parameters.stakeRate = _stakeRate;\\r\\n        _parameters.burnRate = _burnRate;\\r\\n        _parameters.devRate = _devRate;\\r\\n        _parameters.stake = _stake;\\r\\n        parameters = _parameters;\\r\\n    }\\r\\n\\r\\n    function setPoolTaxRate(address pool, uint16 taxRate) public\\r\\n    {\\r\\n        require (feeControllers[msg.sender] || msg.sender == owner, \\\"Not an owner or fee controller\\\");\\r\\n        require (taxRate \\u003c= 10000, \\\"Fee rate must be less than or equal to 100%\\\");\\r\\n        poolsTaxRates[pool] = taxRate;\\r\\n    }\\r\\n\\r\\n    function setDumpTax(uint16 startTaxRate, uint256 durationInSeconds) public\\r\\n    {\\r\\n        require (feeControllers[msg.sender] || msg.sender == owner, \\\"Not an owner or fee controller\\\");\\r\\n        require (startTaxRate \\u003c= 2500, \\\"Dump tax rate must be less than or equal to 25%\\\");\\r\\n\\r\\n        dumpTaxStartRate = startTaxRate;\\r\\n        dumpTaxDurationInSeconds = durationInSeconds;\\r\\n        dumpTaxEndTimestamp = block.timestamp + durationInSeconds;\\r\\n    }\\r\\n\\r\\n    function getDumpTax() public view returns (uint256)\\r\\n    {\\r\\n        if (block.timestamp \\u003e= dumpTaxEndTimestamp) \\r\\n        {\\r\\n            return 0;\\r\\n        }       \\r\\n        \\r\\n        return dumpTaxStartRate*(dumpTaxEndTimestamp - block.timestamp)*1e18/dumpTaxDurationInSeconds/1e18;\\r\\n    }\\r\\n\\r\\n    function allowPool(IERC20 token) public ownerOnly()\\r\\n    {\\r\\n        address pool = uniswapV2Factory.getPair(address(rootKit), address(token));\\r\\n        if (pool == address(0)) {\\r\\n            pool = uniswapV2Factory.createPair(address(rootKit), address(token));\\r\\n        }\\r\\n        AddressState state = addressStates[pool];\\r\\n        require (state != AddressState.AllowedPool, \\\"Already allowed\\\");\\r\\n        addressStates[pool] = AddressState.AllowedPool;\\r\\n        allowedPoolTokens.push(token);\\r\\n        liquiditySupply[pool] = IERC20(pool).totalSupply();\\r\\n    }\\r\\n\\r\\n    function safeAddLiquidity(IERC20 token, uint256 tokenAmount, uint256 rootKitAmount, uint256 minTokenAmount, uint256 minRootKitAmount, address to, uint256 deadline) public\\r\\n        returns (uint256 rootKitUsed, uint256 tokenUsed, uint256 liquidity)\\r\\n    {\\r\\n        address pool = uniswapV2Factory.getPair(address(rootKit), address(token));\\r\\n        require (pool != address(0) \\u0026\\u0026 addressStates[pool] == AddressState.AllowedPool, \\\"Pool not approved\\\");\\r\\n        require (!unrestricted);\\r\\n        unrestricted = true;\\r\\n\\r\\n        uint256 tokenBalance = token.balanceOf(address(this));\\r\\n        token.safeTransferFrom(msg.sender, address(this), tokenAmount);\\r\\n        rootKit.transferFrom(msg.sender, address(this), rootKitAmount);\\r\\n        rootKit.approve(address(uniswapV2Router), rootKitAmount);\\r\\n        token.safeApprove(address(uniswapV2Router), tokenAmount);\\r\\n        (rootKitUsed, tokenUsed, liquidity) = uniswapV2Router.addLiquidity(address(rootKit), address(token), rootKitAmount, tokenAmount, minRootKitAmount, minTokenAmount, to, deadline);\\r\\n        liquiditySupply[pool] = IERC20(pool).totalSupply();\\r\\n        if (mustUpdate == pool) {\\r\\n            mustUpdate = address(0);\\r\\n        }\\r\\n\\r\\n        if (rootKitUsed \\u003c rootKitAmount) {\\r\\n            rootKit.transfer(msg.sender, rootKitAmount - rootKitUsed);\\r\\n        }\\r\\n        tokenBalance = token.balanceOf(address(this)).sub(tokenBalance); // we do it this way in case there\\u0027s a burn\\r\\n        if (tokenBalance \\u003e 0) {\\r\\n            token.safeTransfer(msg.sender, tokenBalance);\\r\\n        }\\r\\n        \\r\\n        unrestricted = false;\\r\\n    }\\r\\n\\r\\n    function handleTransfer(address, address from, address to, uint256 amount) external override\\r\\n        returns (uint256 burn, TransferGateTarget[] memory targets)\\r\\n    {\\r\\n        {\\r\\n            address mustUpdateAddress = mustUpdate;\\r\\n            if (mustUpdateAddress != address(0)) {\\r\\n                mustUpdate = address(0);\\r\\n                uint256 newSupply = IERC20(mustUpdateAddress).totalSupply();\\r\\n                uint256 oldSupply = liquiditySupply[mustUpdateAddress];\\r\\n                if (newSupply != oldSupply) {\\r\\n                    liquiditySupply[mustUpdateAddress] = unrestricted ? newSupply : (newSupply \\u003e oldSupply ? newSupply : oldSupply);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        {\\r\\n            AddressState fromState = addressStates[from];\\r\\n            AddressState toState = addressStates[to];\\r\\n            if (fromState != AddressState.AllowedPool \\u0026\\u0026 toState != AddressState.AllowedPool) {\\r\\n                if (fromState == AddressState.Unknown) { fromState = detectState(from); }\\r\\n                if (toState == AddressState.Unknown) { toState = detectState(to); }\\r\\n                require (unrestricted || (fromState != AddressState.DisallowedPool \\u0026\\u0026 toState != AddressState.DisallowedPool), \\\"Pool not approved\\\");\\r\\n            }\\r\\n            if (toState == AddressState.AllowedPool) {\\r\\n                mustUpdate = to;\\r\\n            }\\r\\n            if (fromState == AddressState.AllowedPool) {\\r\\n                if (unrestricted) {\\r\\n                    liquiditySupply[from] = IERC20(from).totalSupply();\\r\\n                }\\r\\n                require (IERC20(from).totalSupply() \\u003e= liquiditySupply[from], \\\"Cannot remove liquidity\\\");            \\r\\n            }\\r\\n        }\\r\\n        if (unrestricted || freeParticipant[from] || freeParticipant[to]) {\\r\\n            return (0, new TransferGateTarget[](0));\\r\\n        }\\r\\n        RootKitTransferGateParameters memory params = parameters;\\r\\n        \\r\\n        burn = amount * (poolsTaxRates[to] \\u003e params.burnRate ? poolsTaxRates[to] + getDumpTax() : params.burnRate) / 10000;\\r\\n\\r\\n        targets = new TransferGateTarget[]((params.devRate \\u003e 0 ? 1 : 0) + (params.stakeRate \\u003e 0 ? 1 : 0));\\r\\n        uint256 index = 0;\\r\\n        if (params.stakeRate \\u003e 0) {\\r\\n            targets[index].destination = params.stake;\\r\\n            targets[index++].amount = amount * params.stakeRate / 10000;\\r\\n        }\\r\\n        if (params.devRate \\u003e 0) {\\r\\n            targets[index].destination = params.dev;\\r\\n            targets[index].amount = amount * params.devRate / 10000;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setAddressState(address a, AddressState state) public ownerOnly()\\r\\n    {\\r\\n        addressStates[a] = state;\\r\\n    }\\r\\n\\r\\n    function detectState(address a) public returns (AddressState state) \\r\\n    {\\r\\n        state = AddressState.NotPool;\\r\\n        if (a.isContract()) {\\r\\n            try this.throwAddressState(a)\\r\\n            {\\r\\n                assert(false);\\r\\n            }\\r\\n            catch Error(string memory result) {\\r\\n                // if (bytes(result).length == 1) {\\r\\n                //     state = AddressState.NotPool;\\r\\n                // }\\r\\n                if (bytes(result).length == 2) {\\r\\n                    state = AddressState.DisallowedPool;\\r\\n                }\\r\\n            }\\r\\n            catch {\\r\\n            }\\r\\n        }\\r\\n        addressStates[a] = state;\\r\\n        return state;\\r\\n    }\\r\\n    \\r\\n    // Not intended for external consumption\\r\\n    // Always throws\\r\\n    // We want to call functions to probe for things, but don\\u0027t want to open ourselves up to\\r\\n    // possible state-changes\\r\\n    // So we return a value by reverting with a message\\r\\n    function throwAddressState(address a) external view\\r\\n    {\\r\\n        try IUniswapV2Pair(a).factory() returns (address factory)\\r\\n        {\\r\\n            // don\\u0027t care if it\\u0027s some crappy alt-amm\\r\\n            if (factory == address(uniswapV2Factory)) {\\r\\n                // these checks for token0/token1 are just for additional\\r\\n                // certainty that we\\u0027re interacting with a uniswap pair\\r\\n                try IUniswapV2Pair(a).token0() returns (address token0)\\r\\n                {\\r\\n                    if (token0 == address(rootKit)) {\\r\\n                        revert(\\\"22\\\");\\r\\n                    }\\r\\n                    try IUniswapV2Pair(a).token1() returns (address token1)\\r\\n                    {\\r\\n                        if (token1 == address(rootKit)) {\\r\\n                            revert(\\\"22\\\");\\r\\n                        }                        \\r\\n                    }\\r\\n                    catch { \\r\\n                    }                    \\r\\n                }\\r\\n                catch { \\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        catch {             \\r\\n        }\\r\\n        revert(\\\"1\\\");\\r\\n    }\\r\\n}\"},\"RootkitTwoPoolCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nA floor calculator (to use with ERC31337) for RootKit uniswap pairs\\r\\nEnsures 100% of accessible funds are backed at all times\\r\\n*/\\r\\n\\r\\nimport \\\"./IFloorCalculator.sol\\\";\\r\\nimport \\\"./RootKit.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./UniswapV2Library.sol\\\";\\r\\nimport \\\"./IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./EnumerableSet.sol\\\";\\r\\n\\r\\ncontract RootKitTwoPoolCalculator is IFloorCalculator, TokensRecoverable\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    IERC20 immutable rootKit;\\r\\n    IERC20 immutable keth;\\r\\n    IERC20 immutable weth;\\r\\n    address public immutable wethPair;\\r\\n    address public immutable kethPair;\\r\\n    IUniswapV2Factory immutable uniswapV2Factory;\\r\\n    IUniswapV2Router02 immutable uniswapV2Router;\\r\\n    EnumerableSet.AddressSet ignoredAddresses;\\r\\n\\r\\n    constructor(IERC20 _rootKit, IERC20 _keth, IERC20 _weth, IUniswapV2Factory _uniswapV2Factory, IUniswapV2Router02 _uniswapV2Router)\\r\\n    {\\r\\n        rootKit = _rootKit;\\r\\n        keth = _keth;\\r\\n        weth = _weth;\\r\\n        uniswapV2Factory = _uniswapV2Factory;\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n\\r\\n        kethPair = _uniswapV2Factory.getPair(address(_keth), address(_rootKit));\\r\\n        wethPair = _uniswapV2Factory.getPair(address(_weth), address(_rootKit));\\r\\n    }    \\r\\n\\r\\n    function setIgnoredAddress(address ignoredAddress, bool add) public ownerOnly()\\r\\n    {\\r\\n        if (add) \\r\\n        { \\r\\n            ignoredAddresses.add(ignoredAddress); \\r\\n        } \\r\\n        else \\r\\n        { \\r\\n            ignoredAddresses.remove(ignoredAddress); \\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isIgnoredAddress(address ignoredAddress) public view returns (bool)\\r\\n    {\\r\\n        return ignoredAddresses.contains(ignoredAddress);\\r\\n    }\\r\\n\\r\\n    function ignoredAddressCount() public view returns (uint256)\\r\\n    {\\r\\n        return ignoredAddresses.length();\\r\\n    }\\r\\n\\r\\n    function ignoredAddressAt(uint256 index) public view returns (address)\\r\\n    {\\r\\n        return ignoredAddresses.at(index);\\r\\n    }\\r\\n\\r\\n    function ignoredAddressesTotalBalance() public view returns (uint256)\\r\\n    {\\r\\n        uint256 total = 0;\\r\\n        for (uint i = 0; i \\u003c ignoredAddresses.length(); i++) {\\r\\n            total = total.add(rootKit.balanceOf(ignoredAddresses.at(i)));\\r\\n        }\\r\\n\\r\\n        return total;\\r\\n    }\\r\\n\\r\\n        // returns the amount currently available to be swept\\r\\n    function calculateSubFloor(IERC20 wrappedToken, IERC20 backingToken) public override view returns (uint256) // backing token = keth\\r\\n    {\\r\\n        uint256 totalRootInPairs = rootKit.balanceOf(kethPair).add(rootKit.balanceOf(wethPair));\\r\\n        uint256 totalBaseAndEliteInPairs = backingToken.balanceOf(kethPair).add(wrappedToken.balanceOf(wethPair));\\r\\n        uint256 rootKitCirculatingSupply = rootKit.totalSupply().sub(totalRootInPairs).sub(ignoredAddressesTotalBalance());\\r\\n\\r\\n        uint256 amountUntilFloor = uniswapV2Router.getAmountOut(rootKitCirculatingSupply, totalRootInPairs, totalBaseAndEliteInPairs) * 100 / 94; //includes burn\\r\\n        uint256 totalExcessInPools = totalBaseAndEliteInPairs.sub(amountUntilFloor);\\r\\n        uint256 previouslySwept = backingToken.totalSupply().sub(wrappedToken.balanceOf(address(backingToken)));\\r\\n\\r\\n        if (previouslySwept \\u003e= totalExcessInPools) { return 0; }\\r\\n\\r\\n        return totalExcessInPools.sub(previouslySwept);\\r\\n    }\\r\\n\\r\\n\\r\\n    function getAbsoluteFloorPrice() public view returns (uint256)\\r\\n    {\\r\\n        uint256 totalRootInPairs = rootKit.balanceOf(kethPair).add(rootKit.balanceOf(wethPair));\\r\\n        uint256 totalBaseAndEliteInPairs = keth.balanceOf(kethPair).add(weth.balanceOf(wethPair));\\r\\n        uint256 rootKitCirculatingSupply = rootKit.totalSupply().sub(totalRootInPairs).sub(ignoredAddressesTotalBalance());\\r\\n\\r\\n        uint256 amountUntilFloor = uniswapV2Router.getAmountOut(rootKitCirculatingSupply, totalRootInPairs, totalBaseAndEliteInPairs) * 100 / 94;\\r\\n        uint256 totalExcessInPools = totalBaseAndEliteInPairs.sub(amountUntilFloor);\\r\\n        uint256 newTotalRootInPairs = totalRootInPairs + rootKitCirculatingSupply * 100 / 94;\\r\\n\\r\\n        uint256 priceForOneRootIfZeroHolders = uniswapV2Router.getAmountIn(1e18, totalExcessInPools, newTotalRootInPairs);\\r\\n\\r\\n        return priceForOneRootIfZeroHolders;\\r\\n    }\\r\\n}\"},\"RootKitVault.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ncontract RootKitVault is Owned\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n    \\r\\n    receive() external payable { }\\r\\n\\r\\n    function sendEther(address payable _to, uint256 _amount) public ownerOnly()\\r\\n    {\\r\\n        (bool success,) = _to.call{ value: _amount }(\\\"\\\");\\r\\n        require (success, \\\"Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    function sendToken(IERC20 _token, address _to, uint256 _amount) public ownerOnly()\\r\\n    {\\r\\n        _token.safeTransfer(_to, _amount);\\r\\n    }\\r\\n}\"},\"RootWethZapper.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./IWETH.sol\\\";\\r\\nimport \\\"./RootKit.sol\\\";\\r\\nimport \\\"./RootKitTransferGate.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\n\\r\\ncontract RootWethZapper is TokensRecoverable\\r\\n{\\r\\n    function go(IWETH weth, RootKit rootKit, uint256 wethAmount, uint256 rootKitAmount, IUniswapV2Router02 uniswapV2Router)\\r\\n        public ownerOnly()\\r\\n    {\\r\\n        RootKitTransferGate gate = RootKitTransferGate(address(rootKit.transferGate()));\\r\\n        gate.setUnrestricted(true);\\r\\n        weth.transferFrom(msg.sender, address(this), wethAmount);\\r\\n        rootKit.transferFrom(msg.sender, address(this), rootKitAmount);\\r\\n        weth.approve(address(uniswapV2Router), wethAmount);\\r\\n        rootKit.approve(address(uniswapV2Router), rootKitAmount);\\r\\n        uniswapV2Router.addLiquidity(address(weth), address(rootKit), wethAmount, rootKitAmount, wethAmount, rootKitAmount, msg.sender, block.timestamp);\\r\\n        gate.setUnrestricted(false);\\r\\n    }\\r\\n}\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nModified to remove some junk\\r\\nAlso modified to remove silly restrictions (traps!) within safeApprove\\r\\n*/\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {        \\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\r\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length \\u003e 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nO wherefore art thou 8 point O\\r\\n*/\\r\\n\\r\\nlibrary SafeMath \\r\\n{\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) \\r\\n    {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \\r\\n    {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \\r\\n    {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) \\r\\n    {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) \\r\\n        {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n    \\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \\r\\n    {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \\r\\n    {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) \\r\\n    {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \\r\\n    {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"},\"Stoneface.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/* ROOTKIT:\\r\\nStoneface will protect you\\r\\nStoneface will hold stuff\\r\\nLike KETH\\r\\nBut it doesn\\u0027t know anything\\r\\nSo it can\\u0027t call setFloorCalculator\\r\\nOr setSweeper\\r\\nOr anything, really\\r\\nIt\\u0027s pretty stupid\\r\\nBut it\\u0027ll give stuff back if we want\\r\\nAnd if we\\u0027re patient enough\\r\\nCus it takes a while\\r\\nUnless we tell it to watch the distribution\\r\\nThen he wont give it back at all\\r\\nUnless the distribution is complete\\r\\nStoneface is slow\\r\\n*/\\r\\n\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./IStoneface.sol\\\";\\r\\nimport \\\"./IRootKitDistribution.sol\\\";\\r\\n\\r\\ncontract Stoneface is TokensRecoverable, IStoneface\\r\\n{\\r\\n    uint256 public immutable override delay;\\r\\n\\r\\n    IRootKitDistribution public override rootKitDistribution;\\r\\n\\r\\n    TransferOwnership[] _pendingTransferOwnership;\\r\\n    function pendingTransferOwnership(uint256 index) public override view returns (TransferOwnership memory) { return _pendingTransferOwnership[index]; }\\r\\n    function pendingTransferOwnershipCount() public override view returns (uint256) { return _pendingTransferOwnership.length; }\\r\\n\\r\\n    constructor(uint256 _delay)\\r\\n    {\\r\\n        delay = _delay;\\r\\n    }\\r\\n\\r\\n    function watchDistribution(IRootKitDistribution _rootKitDistribution) public override ownerOnly()\\r\\n    {\\r\\n        require (address(rootKitDistribution) == address(0), \\\"Can only be set once\\\");\\r\\n        rootKitDistribution = _rootKitDistribution;\\r\\n    }\\r\\n\\r\\n    function callTransferOwnership(IOwned target, address newOwner) public override ownerOnly()\\r\\n    {\\r\\n        TransferOwnership memory pending;\\r\\n        pending.target = target;\\r\\n        pending.newOwner = newOwner;\\r\\n        pending.when = block.timestamp + delay;\\r\\n        _pendingTransferOwnership.push(pending);\\r\\n        emit PendingOwnershipTransfer(target, newOwner, pending.when);\\r\\n    }\\r\\n\\r\\n    function callTransferOwnershipNow(uint256 index) public override ownerOnly()\\r\\n    {\\r\\n        require (_pendingTransferOwnership[index].when \\u003c= block.timestamp, \\\"Too early\\\");\\r\\n        require (address(rootKitDistribution) == address(0) || rootKitDistribution.distributionComplete(), \\\"Distribution not yet complete\\\");\\r\\n        _pendingTransferOwnership[index].target.transferOwnership(_pendingTransferOwnership[index].newOwner);\\r\\n        _pendingTransferOwnership[index] = _pendingTransferOwnership[_pendingTransferOwnership.length - 1];\\r\\n        _pendingTransferOwnership.pop();\\r\\n    }\\r\\n\\r\\n    function callClaimOwnership(IOwned target) public override ownerOnly()\\r\\n    {\\r\\n        target.claimOwnership();\\r\\n    }\\r\\n}\"},\"TokensRecoverable.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nAllows recovery of unexpected tokens (airdrops, etc)\\r\\nInheriters can customize logic by overriding canRecoverTokens\\r\\n*/\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./ITokensRecoverable.sol\\\";\\r\\n\\r\\nabstract contract TokensRecoverable is Owned, ITokensRecoverable\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    function recoverTokens(IERC20 token) public override ownerOnly() \\r\\n    {\\r\\n        require (canRecoverTokens(token));\\r\\n        token.safeTransfer(msg.sender, token.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function canRecoverTokens(IERC20 token) internal virtual view returns (bool) \\r\\n    { \\r\\n        return address(token) != address(this); \\r\\n    }\\r\\n}\"},\"UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\nlibrary UniswapV2Library {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\r\\n        require(tokenA != tokenB, \\u0027UniswapV2Library: IDENTICAL_ADDRESSES\\u0027);\\r\\n        (token0, token1) = tokenA \\u003c tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), \\u0027UniswapV2Library: ZERO_ADDRESS\\u0027);\\r\\n    }\\r\\n\\r\\n    // calculates the CREATE2 address for a pair without making any external calls\\r\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\r\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\r\\n        pair = address(uint(keccak256(abi.encodePacked(\\r\\n                hex\\u0027ff\\u0027,\\r\\n                factory,\\r\\n                keccak256(abi.encodePacked(token0, token1)),\\r\\n                hex\\u002796e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\u0027 // init code hash\\r\\n            ))));\\r\\n    }\\r\\n\\r\\n    // fetches and sorts the reserves for a pair\\r\\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\\r\\n        (address token0,) = sortTokens(tokenA, tokenB);\\r\\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\r\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\r\\n    }\\r\\n\\r\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\\r\\n        require(amountA \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_AMOUNT\\u0027);\\r\\n        require(reserveA \\u003e 0 \\u0026\\u0026 reserveB \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_LIQUIDITY\\u0027);\\r\\n        amountB = amountA.mul(reserveB) / reserveA;\\r\\n    }\\r\\n\\r\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\r\\n        require(amountIn \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\u0027);\\r\\n        require(reserveIn \\u003e 0 \\u0026\\u0026 reserveOut \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_LIQUIDITY\\u0027);\\r\\n        uint amountInWithFee = amountIn.mul(997);\\r\\n        uint numerator = amountInWithFee.mul(reserveOut);\\r\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n\\r\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\\r\\n        require(amountOut \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\u0027);\\r\\n        require(reserveIn \\u003e 0 \\u0026\\u0026 reserveOut \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_LIQUIDITY\\u0027);\\r\\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\\r\\n        uint denominator = reserveOut.sub(amountOut).mul(997);\\r\\n        amountIn = (numerator / denominator).add(1);\\r\\n    }\\r\\n\\r\\n    // performs chained getAmountOut calculations on any number of pairs\\r\\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\\r\\n        require(path.length \\u003e= 2, \\u0027UniswapV2Library: INVALID_PATH\\u0027);\\r\\n        amounts = new uint[](path.length);\\r\\n        amounts[0] = amountIn;\\r\\n        for (uint i; i \\u003c path.length - 1; i++) {\\r\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\\r\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // performs chained getAmountIn calculations on any number of pairs\\r\\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\\r\\n        require(path.length \\u003e= 2, \\u0027UniswapV2Library: INVALID_PATH\\u0027);\\r\\n        amounts = new uint[](path.length);\\r\\n        amounts[amounts.length - 1] = amountOut;\\r\\n        for (uint i = path.length - 1; i \\u003e 0; i--) {\\r\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\\r\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\r\\n        }\\r\\n    }\\r\\n}\"},\"WbtcToWethLiquidityZapper.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./RootKit.sol\\\";\\r\\nimport \\\"./IERC31337.sol\\\";\\r\\nimport \\\"./IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./IWETH.sol\\\";\\r\\nimport \\\"./IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./RootKitTransferGate.sol\\\";\\r\\n\\r\\nimport \\\"./UniswapV2Library.sol\\\";\\r\\n\\r\\ncontract WbtcToWethLiquidityZapper is TokensRecoverable\\r\\n{\\r\\n    IUniswapV2Router02 immutable uniswapV2Router;\\r\\n    IERC31337 immutable wrappedWbtcRootKit;\\r\\n    IUniswapV2Pair wbtcRootKit;\\r\\n    IUniswapV2Pair wethRootKit;\\r\\n    RootKit immutable rootKit;\\r\\n    IWETH immutable weth;\\r\\n    IERC20 immutable wbtc;\\r\\n    \\r\\n    constructor(IUniswapV2Router02 _uniswapV2Router, IERC31337 _wrappedWbtcRootKit, RootKit _rootKit)\\r\\n    {\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n        wrappedWbtcRootKit = _wrappedWbtcRootKit;\\r\\n        rootKit = _rootKit;\\r\\n\\r\\n        IUniswapV2Pair _wbtcRootKit = IUniswapV2Pair(address(_wrappedWbtcRootKit.wrappedToken()));\\r\\n        wbtcRootKit = _wbtcRootKit;\\r\\n\\r\\n        IWETH _weth = IWETH(_uniswapV2Router.WETH());\\r\\n        weth = _weth;\\r\\n        \\r\\n        IERC20 _wbtc = IERC20(_wbtcRootKit.token0() == address(_rootKit) ? _wbtcRootKit.token1() : _wbtcRootKit.token0());\\r\\n        wbtc = _wbtc;\\r\\n\\r\\n        wethRootKit = IUniswapV2Pair(IUniswapV2Factory(_uniswapV2Router.factory()).getPair(address(_weth), address(_rootKit)));\\r\\n\\r\\n        _wbtcRootKit.approve(address(_uniswapV2Router), uint256(-1));\\r\\n        _wbtc.approve(address(_uniswapV2Router), uint256(-1));\\r\\n        _weth.approve(address(_uniswapV2Router), uint256(-1));\\r\\n        _rootKit.approve(address(_uniswapV2Router), uint256(-1));\\r\\n        \\r\\n        require (_wbtcRootKit.token0() == address(_rootKit) || _wbtcRootKit.token1() == address(_rootKit), \\\"Sanity\\\");\\r\\n        require (_wbtcRootKit.token0() != address(_weth) \\u0026\\u0026 _wbtcRootKit.token1() != address(_weth), \\\"Sanity\\\");\\r\\n    }\\r\\n\\r\\n    function go() public ownerOnly()\\r\\n    {\\r\\n        wrappedWbtcRootKit.sweepFloor(address(this));\\r\\n        uint256 liquidity = wbtcRootKit.balanceOf(address(this));\\r\\n        require (liquidity \\u003e 0, \\\"Nothing unwrapped\\\");\\r\\n        RootKitTransferGate gate = RootKitTransferGate(address(rootKit.transferGate()));\\r\\n        gate.setUnrestricted(true);\\r\\n        (uint256 amountRootKit, uint256 amountWbtc) = uniswapV2Router.removeLiquidity(address(rootKit), address(wbtc), liquidity, 0, 0, address(this), block.timestamp);\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(wbtc);\\r\\n        path[1] = address(weth);\\r\\n        (uint256[] memory amounts) = uniswapV2Router.swapExactTokensForTokens(amountWbtc, 0, path, address(this), block.timestamp);\\r\\n        (,,liquidity) = uniswapV2Router.addLiquidity(address(rootKit), address(weth), amountRootKit, amounts[1], 0, 0, address(this), block.timestamp);\\r\\n        require (liquidity \\u003e 0, \\\"Nothing wrapped\\\");\\r\\n        wethRootKit.transfer(msg.sender, liquidity);\\r\\n        uint256 balance = weth.balanceOf(address(this));\\r\\n        if (balance \\u003e 0) { weth.transfer(msg.sender, balance ); }\\r\\n        balance = wbtc.balanceOf(address(this));\\r\\n        if (balance \\u003e 0) { wbtc.transfer(msg.sender, balance ); }\\r\\n        balance = rootKit.balanceOf(address(this));\\r\\n        if (balance \\u003e 0) { rootKit.transfer(msg.sender, balance ); }\\r\\n        gate.setUnrestricted(false);\\r\\n    }\\r\\n}\"},\"WETH9.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IWETH.sol\\\";\\r\\n\\r\\ncontract WETH9 is IWETH\\r\\n{\\r\\n    string public override name     = \\\"Wrapped Ether\\\";\\r\\n    string public override symbol   = \\\"WETH\\\";\\r\\n    uint8  public override decimals = 18;\\r\\n\\r\\n    mapping (address =\\u003e uint)                       public override balanceOf;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint))  public override allowance;\\r\\n\\r\\n    receive() external payable {\\r\\n        deposit();\\r\\n    }\\r\\n    function deposit() public payable override {\\r\\n        balanceOf[msg.sender] += msg.value;\\r\\n        emit Deposit(msg.sender, msg.value);\\r\\n    }\\r\\n    function withdraw(uint wad) public override {\\r\\n        require(balanceOf[msg.sender] \\u003e= wad, \\\"weth a: not enough balance\\\");\\r\\n        balanceOf[msg.sender] -= wad;\\r\\n        msg.sender.transfer(wad);\\r\\n        emit Withdrawal(msg.sender, wad);\\r\\n    }\\r\\n\\r\\n    function totalSupply() public override view returns (uint) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function approve(address guy, uint wad) public override returns (bool) {\\r\\n        allowance[msg.sender][guy] = wad;\\r\\n        emit Approval(msg.sender, guy, wad);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address dst, uint wad) public override returns (bool) {\\r\\n        return transferFrom(msg.sender, dst, wad);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address src, address dst, uint wad)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(balanceOf[src] \\u003e= wad, \\\"weth b: not enough balance\\\");\\r\\n\\r\\n        if (src != msg.sender \\u0026\\u0026 allowance[src][msg.sender] != uint(-1)) {\\r\\n            require(allowance[src][msg.sender] \\u003e= wad, \\\"weth c: not enough allowance\\\");\\r\\n            allowance[src][msg.sender] -= wad;\\r\\n        }\\r\\n\\r\\n        balanceOf[src] -= wad;\\r\\n        balanceOf[dst] += wad;\\r\\n\\r\\n        emit Transfer(src, dst, wad);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n}\"},\"WethToKethLiquidityZapper.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./RootKit.sol\\\";\\r\\nimport \\\"./IERC31337.sol\\\";\\r\\nimport \\\"./IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./IWETH.sol\\\";\\r\\nimport \\\"./IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./RootKitTransferGate.sol\\\";\\r\\nimport \\\"./UniswapV2Library.sol\\\";\\r\\nimport \\\"./KETH.sol\\\";\\r\\n\\r\\ncontract WethToKethLiquidityZapper is TokensRecoverable\\r\\n{\\r\\n    IUniswapV2Router02 immutable uniswapV2Router;\\r\\n    IERC31337 immutable wrappedWethRootKit;\\r\\n    IUniswapV2Pair kethRootKit;\\r\\n    IUniswapV2Pair wethRootKit;\\r\\n    RootKit immutable rootKit;\\r\\n    IWETH immutable weth;\\r\\n    KETH immutable keth;\\r\\n    \\r\\n    constructor(IUniswapV2Router02 _uniswapV2Router, IERC31337 _wrappedWethRootKit, KETH _keth, RootKit _rootKit)\\r\\n    {\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n        wrappedWethRootKit = _wrappedWethRootKit;\\r\\n        keth = _keth;\\r\\n        rootKit = _rootKit;\\r\\n\\r\\n        IUniswapV2Pair _wethRootKit = IUniswapV2Pair(address(_wrappedWethRootKit.wrappedToken()));\\r\\n        wethRootKit = _wethRootKit;\\r\\n\\r\\n        IWETH _weth = IWETH(_uniswapV2Router.WETH());\\r\\n        weth = _weth;       \\r\\n\\r\\n        kethRootKit = IUniswapV2Pair(IUniswapV2Factory(_uniswapV2Router.factory()).getPair(address(_keth), address(_rootKit)));\\r\\n\\r\\n        _wethRootKit.approve(address(_uniswapV2Router), uint256(-1));\\r\\n        _keth.approve(address(_uniswapV2Router), uint256(-1));\\r\\n        _weth.approve(address(_keth), uint256(-1));\\r\\n        _weth.approve(address(_uniswapV2Router), uint256(-1));\\r\\n        _rootKit.approve(address(_uniswapV2Router), uint256(-1));\\r\\n        \\r\\n        require (_wethRootKit.token0() == address(_rootKit) || _wethRootKit.token1() == address(_rootKit), \\\"Sanity\\\");\\r\\n        require (_wethRootKit.token0() == address(_weth) || _wethRootKit.token1() == address(_weth), \\\"Sanity\\\");\\r\\n    }\\r\\n\\r\\n    function WethToKeth() public ownerOnly()\\r\\n    {\\r\\n        wrappedWethRootKit.sweepFloor(address(this));\\r\\n        uint256 liquidity = wethRootKit.balanceOf(address(this));\\r\\n        require (liquidity \\u003e 0, \\\"Nothing unwrapped\\\");       \\r\\n        RootKitTransferGate gate = RootKitTransferGate(address(rootKit.transferGate()));\\r\\n        gate.setUnrestricted(true);\\r\\n        (uint256 amountRootKit, uint256 amountWeth) = uniswapV2Router.removeLiquidity(address(rootKit), address(weth), liquidity, 0, 0, address(this), block.timestamp);\\r\\n        keth.depositTokens(amountWeth);\\r\\n        (,,liquidity) = uniswapV2Router.addLiquidity(address(rootKit), address(keth), amountRootKit, amountWeth, 0, 0, address(this), block.timestamp);\\r\\n        require (liquidity \\u003e 0, \\\"Nothing wrapped\\\");\\r\\n        kethRootKit.transfer(msg.sender, liquidity);        \\r\\n        uint256 balance = weth.balanceOf(address(this));\\r\\n        if (balance \\u003e 0) { weth.transfer(msg.sender, balance ); }\\r\\n        balance = keth.balanceOf(address(this));\\r\\n        if (balance \\u003e 0) { keth.transfer(msg.sender, balance ); }\\r\\n        balance = rootKit.balanceOf(address(this));\\r\\n        if (balance \\u003e 0) { rootKit.transfer(msg.sender, balance ); }\\r\\n        gate.setUnrestricted(false);\\r\\n    }\\r\\n}\"},\"WrappedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nWraps any ERC20\\r\\nSimilar to WETH except for ERC20 tokens instead of ETH\\r\\ndepositTokens/withdrawTokens are like deposit/withdraw in WETH\\r\\nInheriters can hook into depositTokens and withdrawTokens\\r\\nby overriding _beforeDepositTokens and _beforeWithdrawTokens\\r\\n*/\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./IWrappedERC20.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\ncontract WrappedERC20 is ERC20, IWrappedERC20, TokensRecoverable\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    IERC20 public immutable override wrappedToken;\\r\\n\\r\\n    constructor (IERC20 _wrappedToken, string memory _name, string memory _symbol)\\r\\n        ERC20(_name, _symbol)\\r\\n    {        \\r\\n        if (_wrappedToken.decimals() != 18) {\\r\\n            _setupDecimals(_wrappedToken.decimals());\\r\\n        }\\r\\n        wrappedToken = _wrappedToken;\\r\\n    }\\r\\n\\r\\n    function depositTokens(uint256 _amount) public override\\r\\n    {\\r\\n        _beforeDepositTokens(_amount);\\r\\n        uint256 myBalance = wrappedToken.balanceOf(address(this));\\r\\n        wrappedToken.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        uint256 received = wrappedToken.balanceOf(address(this)).sub(myBalance);\\r\\n        _mint(msg.sender, received);\\r\\n        emit Deposit(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function withdrawTokens(uint256 _amount) public override\\r\\n    {\\r\\n        _beforeWithdrawTokens(_amount);\\r\\n        _burn(msg.sender, _amount);\\r\\n        uint256 myBalance = wrappedToken.balanceOf(address(this));\\r\\n        wrappedToken.safeTransfer(msg.sender, _amount);\\r\\n        require (wrappedToken.balanceOf(address(this)) == myBalance.sub(_amount), \\\"Transfer not exact\\\");\\r\\n        emit Withdrawal(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function canRecoverTokens(IERC20 token) internal virtual override view returns (bool) \\r\\n    {\\r\\n        return token != this \\u0026\\u0026 token != wrappedToken;\\r\\n    }\\r\\n\\r\\n    function _beforeDepositTokens(uint256 _amount) internal virtual view { }\\r\\n    function _beforeWithdrawTokens(uint256 _amount) internal virtual view { }\\r\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rootKit\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_keth\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"_uniswapV2Factory\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"backingToken\",\"type\":\"address\"}],\"name\":\"calculateSubFloor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAbsoluteFloorPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ignoredAddressAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ignoredAddressCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ignoredAddressesTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ignoredAddress\",\"type\":\"address\"}],\"name\":\"isIgnoredAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kethPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ignoredAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"setIgnoredAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RootKitTwoPoolCalculator","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000cb5f72d37685c3d5ad0bb5f982443bc8fcdf570e00000000000000000000000093747501f46ae40b8a4b8f1a1529696ae24ea04e000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4fd5e80cb04b12bdfb15aeaff6399276f65465f344d5e05ec4bb29e7b11db014"}]}