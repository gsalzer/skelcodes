{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MeVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./IMeVesting.sol\\\";\\n\\n\\n/// @title ME 3-year vesting contract\\n/// @author @CBobRobison, @carlfarterson, @bunsdev\\n/// @notice vests ME for 3 years to key meTokens stakeholders, claimable upon governance \\\"transferability\\\" vote\\ncontract MeVesting is IMeVesting, ReentrancyGuard, Ownable {\\n\\n    /// @notice check to enable stream withdrawals\\n    bool public withdrawable;\\n\\n    /// @notice Counter for new stream ids.\\n    uint256 public streamId;\\n\\n    struct Stream {\\n        uint256 deposit;\\n        uint256 ratePerSecond;\\n        uint256 remainingBalance;\\n        uint256 startTime;\\n        uint256 stopTime;\\n        address recipient;\\n        address sender;\\n        address tokenAddress;\\n        bool isEntity;\\n    }\\n\\n    // @notice The stream objects identifiable by their unsigned integer ids.\\n    mapping(uint256 => Stream) private streams;\\n\\n    /// @dev Throws if the caller is not the sender of the recipient of the stream.\\n    modifier onlySenderOrRecipient(uint256 _streamId) {\\n        require(\\n            msg.sender == streams[_streamId].sender || msg.sender == streams[_streamId].recipient,\\n            \\\"caller is not the sender or the recipient of the stream\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Throws if the provided id does not point to a valid stream.\\n    modifier streamExists(uint256 _streamId) {\\n        require(streams[_streamId].isEntity, \\\"stream does not exist\\\");\\n        _;\\n    }\\n\\n    /// @inheritdoc IMeVesting\\n    function getStream(uint256 _streamId)\\n        external\\n        view\\n        override\\n        streamExists(_streamId)\\n        returns (\\n            address sender,\\n            address recipient,\\n            uint256 deposit,\\n            address tokenAddress,\\n            uint256 startTime,\\n            uint256 stopTime,\\n            uint256 remainingBalance,\\n            uint256 ratePerSecond\\n        )\\n    {\\n        sender = streams[_streamId].sender;\\n        recipient = streams[_streamId].recipient;\\n        deposit = streams[_streamId].deposit;\\n        tokenAddress = streams[_streamId].tokenAddress;\\n        startTime = streams[_streamId].startTime;\\n        stopTime = streams[_streamId].stopTime;\\n        remainingBalance = streams[_streamId].remainingBalance;\\n        ratePerSecond = streams[_streamId].ratePerSecond;\\n    }\\n\\n\\n    /// @inheritdoc IMeVesting\\n    function deltaOf(uint256 _streamId)\\n        public\\n        view\\n        streamExists(_streamId)\\n        override\\n        returns (uint256 delta)\\n    {\\n        Stream memory stream = streams[_streamId];\\n        if (block.timestamp <= stream.startTime) return 0;\\n        if (block.timestamp < stream.stopTime) return block.timestamp - stream.startTime;\\n        return stream.stopTime - stream.startTime;\\n    }\\n\\n\\n    /// @inheritdoc IMeVesting\\n    function balanceOf(uint256 _streamId, address who)\\n        public\\n        view\\n        override\\n        streamExists(_streamId)\\n        returns (uint256) \\n    {\\n        Stream memory stream = streams[_streamId];\\n\\n        uint256 recipientBalance = deltaOf(_streamId) * stream.ratePerSecond;\\n\\n        /*\\n         * If the stream `balance` does not equal `deposit`, it means there have been withdrawals.\\n         * We have to subtract the total amount withdrawn from the amount of money that has been\\n         * streamed until now.\\n         */\\n        if (stream.deposit > stream.remainingBalance) {\\n            uint256 withdrawalAmount = stream.deposit - stream.remainingBalance;\\n            recipientBalance -= withdrawalAmount;\\n        }\\n\\n        if (who == stream.recipient) {return recipientBalance;}\\n        if (who == stream.sender) {\\n            uint256 senderBalance = stream.remainingBalance - recipientBalance;\\n            return senderBalance;\\n        }\\n        return 0;\\n    }\\n\\n\\n    /// @inheritdoc IMeVesting\\n    function createStream(address recipient,uint256 deposit,address tokenAddress)\\n        public\\n        override\\n        returns (uint256)\\n    {\\n        require(recipient != address(0), \\\"stream to the zero address\\\");\\n        require(recipient != address(this), \\\"stream to the contract itself\\\");\\n        require(recipient != msg.sender, \\\"stream to the caller\\\");\\n        require(deposit > 0, \\\"deposit is zero\\\");\\n\\n        uint256 startTime = block.timestamp - 5392000;\\n        uint256 stopTime = block.timestamp + 1095 days;\\n\\n        require(stopTime > startTime, \\\"stop time before the start time\\\");\\n\\n        uint256 duration = stopTime - startTime;\\n\\n        /* Without this, the rate per second would be zero. */\\n        require(deposit >= duration, \\\"deposit smaller than time delta\\\");\\n\\n        /* This condition avoids dealing with remainders */\\n        require(deposit % duration == 0, \\\"deposit not multiple of time delta\\\");\\n\\n        uint256 ratePerSecond = deposit / duration;\\n\\n        require(IERC20(tokenAddress).transferFrom(msg.sender, address(this), deposit), \\\"token transfer failure\\\");\\n\\n        //  TODO: should streams be mapped to their index, or start at 1?\\n        streams[++streamId] = Stream({\\n            remainingBalance: deposit,\\n            deposit: deposit,\\n            isEntity: true,\\n            ratePerSecond: ratePerSecond,\\n            recipient: recipient,\\n            sender: msg.sender,\\n            startTime: startTime,\\n            stopTime: stopTime,\\n            tokenAddress: tokenAddress\\n        });\\n\\n        emit CreateStream(streamId, msg.sender, recipient, deposit, tokenAddress, startTime, stopTime);\\n\\n        return streamId;\\n    }\\n\\n\\n    /// @inheritdoc IMeVesting\\n    function withdrawFromStream(uint256 _streamId, uint256 amount)\\n        external\\n        nonReentrant\\n        streamExists(_streamId)\\n        onlySenderOrRecipient(_streamId)\\n        override\\n        returns (bool)\\n    {\\n        require(withdrawable, \\\"not withdrawable\\\");\\n        require(amount > 0, \\\"amount is zero\\\");\\n        \\n        Stream storage stream = streams[_streamId];\\n\\n        uint256 balance = balanceOf(_streamId, stream.recipient);\\n        require(balance >= amount, \\\"amount exceeds the available balance\\\");\\n\\n        stream.remainingBalance -= amount;\\n        if (stream.remainingBalance == 0) {delete streams[_streamId];}\\n\\n        require(IERC20(stream.tokenAddress).transfer(stream.recipient, amount), \\\"token transfer failure\\\");\\n\\n        emit WithdrawFromStream(_streamId, stream.recipient, amount);\\n    }\\n\\n\\n    /// @inheritdoc IMeVesting\\n    function cancelStream(uint256 _streamId)\\n        external\\n        override\\n        nonReentrant\\n        streamExists(_streamId)\\n        onlySenderOrRecipient(_streamId)\\n        returns (bool)\\n    {\\n        require(withdrawable, \\\"not withdrawable\\\");\\n\\n        Stream memory stream = streams[_streamId];\\n        uint256 senderBalance = balanceOf(_streamId, stream.sender);\\n        uint256 recipientBalance = balanceOf(_streamId, stream.recipient);\\n\\n        delete streams[_streamId];\\n\\n        IERC20 token = IERC20(stream.tokenAddress);\\n        if (recipientBalance > 0) {\\n            require(token.transfer(stream.recipient, recipientBalance), \\\"recipient token transfer failure\\\");\\n        }\\n        if (senderBalance > 0) {\\n            require(token.transfer(stream.sender, senderBalance), \\\"sender token transfer failure\\\");\\n        }\\n\\n        emit CancelStream(_streamId, stream.sender, stream.recipient, senderBalance, recipientBalance);\\n    }\\n\\n    function turnOnWithdrawals() onlyOwner public {\\n        require(!withdrawable, \\\"withdrawals already enabled\\\");\\n        withdrawable = true;\\n        emit TurnOnWithdrawals();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IMeVesting.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IMeVesting {\\n\\n    /// @notice Emits once withdrawals from streams are enabled by owner.\\n    event TurnOnWithdrawals();\\n\\n    /// @notice Emits when a stream is successfully created.\\n    event CreateStream(\\n        uint256 indexed streamId,\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 deposit,\\n        address tokenAddress,\\n        uint256 startTime,\\n        uint256 stopTime\\n    );\\n\\n    /**\\n     * @notice Emits when the recipient of a stream withdraws a portion or all their pro rata share of the stream.\\n     */\\n    event WithdrawFromStream(\\n        uint256 indexed streamId,\\n        address indexed recipient,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice Emits when a stream is successfully cancelled and tokens are transferred back on a pro rata basis.\\n     */\\n    event CancelStream(\\n        uint256 indexed streamId,\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 senderBalance,\\n        uint256 recipientBalance\\n    );\\n\\n    /**\\n     * @notice Returns the available funds for the given stream id and address.\\n     * @dev Throws if the id does not point to a valid stream.\\n     * @param streamId The id of the stream for which to query the balance.\\n     * @param who The address for which to query the balance.\\n     * @return The total funds allocated to `who` as uint256.\\n     */\\n    function balanceOf(uint256 streamId, address who) external view \\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the compounding stream with all its properties.\\n     * @dev Throws if the id does not point to a valid stream.\\n     * @param streamId The id of the stream to query.\\n     * @return sender\\n     * @return recipient\\n     * @return deposit\\n     * @return token\\n     * @return startTime\\n     * @return stopTime\\n     * @return remainingBalance\\n     * @return ratePerSecond\\n     */\\n    function getStream(uint256 streamId) external view\\n        returns (\\n            address sender,\\n            address recipient,\\n            uint256 deposit,\\n            address token,\\n            uint256 startTime,\\n            uint256 stopTime,\\n            uint256 remainingBalance,\\n            uint256 ratePerSecond\\n        );\\n\\n    /**\\n     * @notice Creates a new stream funded by `msg.sender` and paid towards `recipient`.\\n     * @dev Throws if paused.\\n     *  Throws if the recipient is the zero address, the contract itself or the caller.\\n     *  Throws if the deposit is 0.\\n     *  Throws if the start time is before `block.timestamp`.\\n     *  Throws if the stop time is before the start time.\\n     *  Throws if the duration calculation has a math error.\\n     *  Throws if the deposit is smaller than the duration.\\n     *  Throws if the deposit is not a multiple of the duration.\\n     *  Throws if the rate calculation has a math error.\\n     *  Throws if the next stream id calculation has a math error.\\n     *  Throws if the contract is not allowed to transfer enough tokens.\\n     *  Throws if there is a token transfer failure.\\n     * @param recipient The address towards which the money is streamed.\\n     * @param deposit The amount of money to be streamed.\\n     * @param tokenAddress The ERC20 token to use as streaming currency.\\n     * @return streamId The uint256 id of the newly created stream.\\n     */\\n    function createStream(\\n        address recipient,\\n        uint256 deposit,\\n        address tokenAddress\\n    ) external returns (uint256 streamId);\\n\\n    /**\\n     * @notice Withdraws from the contract to the recipient's account.\\n     * @dev Throws if the id does not point to a valid stream.\\n     *  Throws if the caller is not the sender or the recipient of the stream.\\n     *  Throws if the amount exceeds the available balance.\\n     *  Throws if there is a token transfer failure.\\n     * @param streamId The id of the stream to withdraw tokens from.\\n     * @param amount The amount of tokens to withdraw.\\n     * @return bool true=success, otherwise false.\\n     */\\n    function withdrawFromStream(uint256 streamId, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @notice Cancels the stream and transfers the tokens back on a pro rata basis.\\n     * @dev Throws if the id does not point to a valid stream.\\n     *  Throws if the caller is not the sender or the recipient of the stream.\\n     *  Throws if there is a token transfer failure.\\n     * @param streamId The id of the stream to cancel.\\n     * @return bool true=success, otherwise false.\\n     */\\n    function cancelStream(uint256 streamId) external returns (bool);\\n\\n    /**\\n     * @notice Returns either the delta in seconds between `block.timestamp` and `startTime` or\\n     *  between `stopTime` and `startTime, whichever is smaller. If `block.timestamp` is before\\n     *  `startTime`, it returns 0.\\n     * @dev Throws if the id does not point to a valid stream.\\n     * @param streamId The id of the stream for which to query the delta.\\n     * @return delta The time delta in seconds.\\n     */\\n    function deltaOf(uint256 streamId)\\n        external\\n        view\\n        returns (uint256 delta);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"senderBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recipientBalance\",\"type\":\"uint256\"}],\"name\":\"CancelStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"}],\"name\":\"CreateStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TurnOnWithdrawals\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFromStream\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_streamId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_streamId\",\"type\":\"uint256\"}],\"name\":\"cancelStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"createStream\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_streamId\",\"type\":\"uint256\"}],\"name\":\"deltaOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_streamId\",\"type\":\"uint256\"}],\"name\":\"getStream\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerSecond\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnOnWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_streamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MeVesting","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}