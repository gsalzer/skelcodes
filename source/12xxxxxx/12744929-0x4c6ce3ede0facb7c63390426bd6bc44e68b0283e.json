{"status":"1","message":"OK","result":[{"SourceCode":"// File: USAToken-imports.sol\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {return msg.sender;}\r\n    function _msgData() internal view virtual returns (bytes calldata) {this; return msg.data;}\r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {return a + b;}\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {return a - b;}\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {return a * b;}\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {return a / b;}\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {return a % b;}\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked { require(b <= a, errorMessage); return a - b; }\r\n    }\r\n}\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) { uint256 size; assembly { size := extcodesize(account) } return size > 0;}\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");(bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {return functionCall(target, data, \"Address: low-level call failed\");}\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {return functionCallWithValue(target, data, 0, errorMessage);}\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");}\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) { return returndata; } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {revert(errorMessage);}\r\n        }\r\n    }\r\n}\r\nabstract contract Manageable is Context {\r\n    address private _manager;\r\n    event ManagementTransferred(address indexed previousManager, address indexed newManager);\r\n    constructor(){\r\n        address msgSender = _msgSender();\r\n        _manager = msgSender;\r\n        emit ManagementTransferred(address(0), msgSender);\r\n    }\r\n    function manager() public view returns(address){ return _manager; }\r\n    modifier onlyManager(){\r\n        require(_manager == _msgSender(), \"Manageable: caller is not the manager\");\r\n        _;\r\n    }\r\n    function transferManagement(address newManager) external virtual onlyManager {\r\n        emit ManagementTransferred(_manager, newManager);\r\n        _manager = newManager;\r\n    }\r\n}\r\ncontract Initializable {\r\n  bool private initialized;\r\n  bool private initializing;\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n    _;\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n  function isConstructor() private view returns (bool) {\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n  uint256[50] private ______gap;\r\n}\r\nabstract contract ProxyOwnable is Context, Initializable {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    function ownerInitialize() public initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n// File: USAToken.sol\r\n\r\n/**\r\n * SPDX-License-Identifier: MIT\r\n */\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * Tokenomics:\r\n * \r\n * Redistribution   1.776%%\r\n * Burn             0 or 1.776%\r\n * Charity          to be voted on\r\n\r\n */\r\n\r\n\r\nabstract contract Tokenomics {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    // --------------------- Token Settings ------------------- //\r\n\r\n    string internal constant NAME = \"USA Coin\";\r\n    string internal constant SYMBOL = \"USA\";\r\n    \r\n    uint32 internal constant FEES_DIVISOR = 10**5; //100000\r\n    uint8 internal constant DECIMALS = 13; //USA\r\n    \r\n    uint256 internal constant MAX = ~uint256(0);\r\n    uint256 internal constant TOTAL_SUPPLY = 1776 * 10**DECIMALS * 10**9;\r\n    uint256 internal _reflectedSupply; \r\n\r\n   \r\n    // --------------------- Fees Settings ------------------- //\r\n\r\n    address internal charityAddress;\r\n\r\n    address internal burnAddress;\r\n\r\n    enum FeeType { Burn, Rfi, External }\r\n    struct Fee {\r\n        FeeType name;\r\n        uint256 value;\r\n        address recipient;\r\n        uint256 total;\r\n    }\r\n\r\n    Fee[] internal fees;\r\n    uint256 internal sumOfFees;\r\n\r\n\r\n    function _addFee(FeeType name, uint256 value, address recipient) private {\r\n        fees.push( Fee(name, value, recipient, 0 ) );\r\n        sumOfFees += value;\r\n    }\r\n\r\n    function _addFees() internal {\r\n\r\n        /**\r\n         * The value of fees is given in part per 100000 (based on the value of FEES_DIVISOR),\r\n         * e.g. for 5% use 5000, for 3.5% use 3500, etc. \r\n         */ \r\n        _addFee(FeeType.Rfi, 1776, address(this) ); \r\n\r\n        //_addFee(FeeType.Burn, 1776, burnAddress );\r\n        //_addFee(FeeType.External, 1776, charityAddress );\r\n        //_addFee(FeeType.External, 30, marketingAddress );\r\n    }\r\n\r\n    function _getFeesCount() internal view returns (uint256){ return fees.length; }\r\n\r\n    function _getFeeStruct(uint256 index) private view returns(Fee storage){\r\n        require( index >= 0 && index < fees.length, \"FeesSettings._getFeeStruct: Fee index out of bounds\");\r\n        return fees[index];\r\n    }\r\n    function _getFee(uint256 index) internal view returns (FeeType, uint256, address, uint256){\r\n        Fee memory fee = _getFeeStruct(index);\r\n        return ( fee.name, fee.value, fee.recipient, fee.total );\r\n    }\r\n    function _addFeeCollectedAmount(uint256 index, uint256 amount) internal {\r\n        Fee storage fee = _getFeeStruct(index);\r\n        fee.total = fee.total.add(amount);\r\n    }\r\n\r\n    function getCollectedFeeTotal(uint256 index) internal view returns (uint256){\r\n        Fee memory fee = _getFeeStruct(index);\r\n        return fee.total;\r\n    }\r\n}\r\n\r\nabstract contract BaseRfiToken is IERC20, IERC20Metadata, ProxyOwnable, Tokenomics { \r\n\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) internal _reflectedBalances;\r\n    mapping (address => uint256) internal _balances;\r\n    mapping (address => mapping (address => uint256)) internal _allowances;\r\n    \r\n    mapping (address => bool) internal _isExcludedFromFee;\r\n    mapping (address => bool) internal _isExcludedFromRewards;\r\n    address[] private _excluded;\r\n \r\n    /** Functions required by IERC20Metadat **/\r\n        function name() external pure override returns (string memory) { return NAME; }\r\n        function symbol() external pure override returns (string memory) { return SYMBOL; }\r\n        function decimals() external pure override returns (uint8) { return DECIMALS; }\r\n        \r\n    /** Functions required by IERC20Metadat - END **/\r\n    /** Functions required by IERC20 **/\r\n        function totalSupply() external pure override returns (uint256) {\r\n            return TOTAL_SUPPLY;\r\n        }\r\n        \r\n        function balanceOf(address account) public view override returns (uint256){\r\n            if (_isExcludedFromRewards[account]) return _balances[account];\r\n            return tokenFromReflection(_reflectedBalances[account]);\r\n        }\r\n        \r\n        function transfer(address recipient, uint256 amount) external override returns (bool){\r\n            _transfer(_msgSender(), recipient, amount);\r\n            return true;\r\n        }\r\n        \r\n        function allowance(address owner, address spender) external view override returns (uint256){\r\n            return _allowances[owner][spender];\r\n        }\r\n    \r\n        function approve(address spender, uint256 amount) external override returns (bool) {\r\n            _approve(_msgSender(), spender, amount);\r\n            return true;\r\n        }\r\n        \r\n        function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool){\r\n            _transfer(sender, recipient, amount);\r\n            _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n            return true;\r\n        }\r\n    /** Functions required by IERC20 - END **/\r\n\r\n    /**\r\n     * @dev this is really a \"soft\" burn (total supply is not reduced). RFI holders\r\n     * get two benefits from burning tokens:\r\n     *\r\n     * 1) Tokens in the burn address increase the % of tokens held by holders not\r\n     *    excluded from rewards (assuming the burn address is excluded)\r\n     * 2) Tokens in the burn address cannot be sold \r\n     */\r\n    function burn(uint256 amount) external {\r\n\r\n        address sender = _msgSender();\r\n        require(sender != address(0), \"BaseRfiToken: burn from the zero address\");\r\n        require(sender != address(burnAddress), \"BaseRfiToken: burn from the burn address\");\r\n\r\n        uint256 balance = balanceOf(sender);\r\n        require(balance >= amount, \"BaseRfiToken: burn amount exceeds balance\");\r\n\r\n        uint256 reflectedAmount = amount.mul(_getCurrentRate());\r\n\r\n        // remove the amount from the sender's balance first\r\n        _reflectedBalances[sender] = _reflectedBalances[sender].sub(reflectedAmount);\r\n        if (_isExcludedFromRewards[sender])\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n\r\n        _burnTokens( sender, amount, reflectedAmount );\r\n    }\r\n    \r\n    /**\r\n         Burn.\r\n     */\r\n    function _burnTokens(address sender, uint256 tBurn, uint256 rBurn) internal {\r\n\r\n        /**\r\n         * @dev Do not reduce _totalSupply and/or _reflectedSupply. (soft) burning by sending\r\n         * tokens to the burn address (which should be excluded from rewards) is sufficient\r\n         * in RFI\r\n         */ \r\n        _reflectedBalances[burnAddress] = _reflectedBalances[burnAddress].add(rBurn);\r\n        if (_isExcludedFromRewards[burnAddress])\r\n            _balances[burnAddress] = _balances[burnAddress].add(tBurn);\r\n\r\n        /**\r\n         * @dev Emit the event so that the burn address balance is updated (on ethscan)\r\n         */\r\n        emit Transfer(sender, burnAddress, tBurn);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    \r\n    function isExcludedFromReward(address account) external view returns (bool) {\r\n        return _isExcludedFromRewards[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates and returns the reflected amount for the given amount with or without \r\n     * the transfer fees (deductTransferFee true/false)\r\n     */\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) external view returns(uint256) {\r\n        require(tAmount <= TOTAL_SUPPLY, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,,,) = _getValues(tAmount,0);\r\n            return rAmount;\r\n        } else {\r\n            (,uint256 rTransferAmount,,,) = _getValues(tAmount,_getSumOfFees());\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates and returns the amount of tokens corresponding to the given reflected amount.\r\n     */\r\n    function tokenFromReflection(uint256 rAmount) internal view returns(uint256) {\r\n        require(rAmount <= _reflectedSupply, \"Amount must be less than total reflections\");\r\n        uint256 currentRate = _getCurrentRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n    \r\n    function excludeFromReward(address account) external onlyOwner() {\r\n        require(!_isExcludedFromRewards[account], \"Account is not included\");\r\n        _exclude(account);\r\n    }\r\n    \r\n    function _exclude(address account) internal {\r\n        if(_reflectedBalances[account] > 0) {\r\n            _balances[account] = tokenFromReflection(_reflectedBalances[account]);\r\n        }\r\n        _isExcludedFromRewards[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner() {\r\n        require(_isExcludedFromRewards[account], \"Account is not excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _balances[account] = 0;\r\n                _isExcludedFromRewards[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function setExcludedFromFee(address account, bool value) external onlyOwner { _isExcludedFromFee[account] = value; }\r\n    function isExcludedFromFee(address account) public view returns(bool) { return _isExcludedFromFee[account]; }\r\n    \r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"BaseRfiToken: approve from the zero address\");\r\n        require(spender != address(0), \"BaseRfiToken: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"BaseRfiToken: transfer from the zero address\");\r\n        require(recipient != address(0), \"BaseRfiToken: transfer to the zero address\");\r\n        require(sender != address(burnAddress), \"BaseRfiToken: transfer from the burn address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        \r\n        // indicates whether or not feee should be deducted from the transfer\r\n        bool takeFee = true;\r\n\r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]){ takeFee = false; }\r\n\r\n        _transferTokens(sender, recipient, amount, takeFee);\r\n        \r\n    }\r\n\r\n    function _transferTokens(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n    \r\n        /**\r\n         * We don't need to know anything about the individual fees here \r\n         * All that is required \r\n         * for the transfer is the sum of all fees to calculate the % of the total \r\n         * transaction amount which should be transferred to the recipient. \r\n         *\r\n         * The `_takeFees` call will/should take care of the individual fees\r\n         */\r\n        uint256 sumOfFees = _getSumOfFees();\r\n        if ( !takeFee ){ sumOfFees = 0; }\r\n        \r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 tAmount, uint256 tTransferAmount, uint256 currentRate ) = _getValues(amount, sumOfFees);\r\n        \r\n        /** \r\n         * Sender's and Recipient's reflected balances must be always updated regardless of\r\n         * whether they are excluded from rewards or not.\r\n         */ \r\n        _reflectedBalances[sender] = _reflectedBalances[sender].sub(rAmount);\r\n        _reflectedBalances[recipient] = _reflectedBalances[recipient].add(rTransferAmount);\r\n\r\n        /**\r\n         * Update the true/nominal balances for excluded accounts\r\n         */        \r\n        if (_isExcludedFromRewards[sender]){ _balances[sender] = _balances[sender].sub(tAmount); }\r\n        if (_isExcludedFromRewards[recipient] ){ _balances[recipient] = _balances[recipient].add(tTransferAmount); }\r\n        \r\n        _takeFees( amount, currentRate, sumOfFees );\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    \r\n    function _takeFees(uint256 amount, uint256 currentRate, uint256 sumOfFees ) private {\r\n        if ( sumOfFees > 0){\r\n            _takeTransactionFees(amount, currentRate);\r\n        }\r\n    }\r\n    \r\n    function _getValues(uint256 tAmount, uint256 feesSum) internal view returns (uint256, uint256, uint256, uint256, uint256) {\r\n        \r\n        uint256 tTotalFees = tAmount.mul(feesSum).div(FEES_DIVISOR);\r\n        uint256 tTransferAmount = tAmount.sub(tTotalFees);\r\n        uint256 currentRate = _getCurrentRate();\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rTotalFees = tTotalFees.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rTotalFees);\r\n        \r\n        return (rAmount, rTransferAmount, tAmount, tTransferAmount, currentRate);\r\n    }\r\n    \r\n    function _getCurrentRate() internal view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n    \r\n    function _getCurrentSupply() internal view returns(uint256, uint256) {\r\n        uint256 rSupply = _reflectedSupply;\r\n        uint256 tSupply = TOTAL_SUPPLY;  \r\n\r\n        /**\r\n         * The code below removes balances of addresses excluded from rewards from\r\n         * rSupply and tSupply, which effectively increases the % of transaction fees\r\n         * delivered to non-excluded holders\r\n         */    \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_reflectedBalances[_excluded[i]] > rSupply || _balances[_excluded[i]] > tSupply) return (_reflectedSupply, TOTAL_SUPPLY);\r\n            rSupply = rSupply.sub(_reflectedBalances[_excluded[i]]);\r\n            tSupply = tSupply.sub(_balances[_excluded[i]]);\r\n        }\r\n        if (tSupply == 0 || rSupply < _reflectedSupply.div(TOTAL_SUPPLY)) return (_reflectedSupply, TOTAL_SUPPLY);\r\n        return (rSupply, tSupply);\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the total sum of fees to be processed in each transaction. \r\n     * \r\n     * To separate concerns this contract (class) will take care of ONLY handling RFI, i.e. \r\n     * changing the rates and updating the holder's balance (via `_redistribute`). \r\n     * It is the responsibility of the dev/user to handle all other fees and taxes \r\n     * in the appropriate contracts (classes).\r\n     */ \r\n    function _getSumOfFees() internal view virtual returns (uint256);\r\n\r\n \r\n    /**\r\n     * @dev Redistributes the specified amount among the current holders via the reflect.finance\r\n     * algorithm, i.e. by updating the _reflectedSupply (_rSupply) which ultimately adjusts the\r\n     * current rate used by `tokenFromReflection` and, in turn, the value returns from `balanceOf`. \r\n     * This is the bit of clever math which allows rfi to redistribute the fee without \r\n     * having to iterate through all holders. \r\n     * \r\n     */\r\n    function _redistribute(uint256 amount, uint256 currentRate, uint256 fee, uint256 index) internal {\r\n        uint256 tFee = amount.mul(fee).div(FEES_DIVISOR);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n\r\n        _reflectedSupply = _reflectedSupply.sub(rFee);\r\n        _addFeeCollectedAmount(index, tFee);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before the `Transfer` event is emitted if fees are enabled for the transfer\r\n     */\r\n    function _takeTransactionFees(uint256 amount, uint256 currentRate) internal virtual;\r\n}\r\n\r\n\r\ncontract USAToken is BaseRfiToken {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n\r\n    function initialize() public initializer {\r\n        ownerInitialize();\r\n\r\n        _reflectedSupply = (MAX - (MAX % TOTAL_SUPPLY));\r\n\r\n        burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n        charityAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n        _exclude(burnAddress);\r\n        _addFees();\r\n\r\n        _reflectedBalances[owner()] = _reflectedSupply;\r\n        \r\n        // exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        \r\n        // exclude the owner and this contract from rewards\r\n        _exclude(owner());\r\n        _exclude(address(this));\r\n\r\n        emit Transfer(address(0), owner(), TOTAL_SUPPLY);\r\n        \r\n    }\r\n\r\n    function _getSumOfFees() internal view override returns (uint256){ \r\n        return sumOfFees;\r\n    }\r\n    \r\n    function _takeTransactionFees(uint256 amount, uint256 currentRate) internal override {\r\n        \r\n        uint256 feesCount = _getFeesCount();\r\n        for (uint256 index = 0; index < feesCount; index++ ){\r\n            (FeeType name, uint256 value, address recipient,) = _getFee(index);\r\n            // no need to check value < 0 as the value is uint (i.e. from 0 to 2^256-1)\r\n            if ( value == 0 ) continue;\r\n\r\n            if ( name == FeeType.Rfi ){\r\n                _redistribute( amount, currentRate, value, index );\r\n            }\r\n            else if ( name == FeeType.Burn ){\r\n                _burn( amount, currentRate, value, index );\r\n            }\r\n            else { //it's FeeType.External\r\n                _takeFee( amount, currentRate, value, recipient, index );\r\n            }\r\n        }\r\n    }\r\n\r\n    function _burn(uint256 amount, uint256 currentRate, uint256 fee, uint256 index) private {\r\n        uint256 tBurn = amount.mul(fee).div(FEES_DIVISOR);\r\n        uint256 rBurn = tBurn.mul(currentRate);\r\n\r\n        _burnTokens(address(this), tBurn, rBurn);\r\n        _addFeeCollectedAmount(index, tBurn);\r\n    }\r\n\r\n    function _takeFee(uint256 amount, uint256 currentRate, uint256 fee, address recipient, uint256 index) private {\r\n\r\n        uint256 tAmount = amount.mul(fee).div(FEES_DIVISOR);\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n\r\n        _reflectedBalances[recipient] = _reflectedBalances[recipient].add(rAmount);\r\n        if(_isExcludedFromRewards[recipient])\r\n            _balances[recipient] = _balances[recipient].add(tAmount);\r\n\r\n        _addFeeCollectedAmount(index, tAmount);\r\n    }\r\n    \r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerInitialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"USAToken","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fa8ad4c9c34983bcf0c6a83347cb6734df69df6879ad9bf9200947b96cfa7f07"}]}