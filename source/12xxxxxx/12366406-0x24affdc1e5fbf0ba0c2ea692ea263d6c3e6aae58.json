{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/shengdading/git/BTC-Plus/contracts/Plus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IPlus.sol\\\";\\n\\n/**\\n * @title Plus token base contract.\\n *\\n * Plus token is a value pegged ERC20 token which provides global interest to all holders.\\n * It can be categorized as single plus token and composite plus token:\\n * \\n * Single plus token is backed by one ERC20 token and targeted at yield generation.\\n * Composite plus token is backed by a basket of ERC20 token and targeted at better basket management.\\n */\\nabstract contract Plus is ERC20Upgradeable, IPlus {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using SafeMathUpgradeable for uint256;\\n\\n    /**\\n     * @dev Emitted each time the share of a user is updated.\\n     */\\n    event UserShareUpdated(address indexed account, uint256 oldShare, uint256 newShare, uint256 totalShares);\\n    event Rebased(uint256 oldIndex, uint256 newIndex, uint256 totalUnderlying);\\n    event Donated(address indexed account, uint256 amount, uint256 share);\\n\\n    event GovernanceUpdated(address indexed oldGovernance, address indexed newGovernance);\\n    event StrategistUpdated(address indexed strategist, bool allowed);\\n    event TreasuryUpdated(address indexed oldTreasury, address indexed newTreasury);\\n    event RedeemFeeUpdated(uint256 oldFee, uint256 newFee);\\n    event MintPausedUpdated(address indexed token, bool paused);\\n\\n    uint256 public constant MAX_PERCENT = 10000; // 0.01%\\n    uint256 public constant WAD = 1e18;\\n\\n    /**\\n     * @dev Struct to represent a rebase hook.\\n     */\\n    struct Transaction {\\n        bool enabled;\\n        address destination;\\n        bytes data;\\n    }\\n    // Rebase hooks\\n    Transaction[] public transactions;\\n\\n    uint256 public totalShares;\\n    mapping(address => uint256) public userShare;\\n    // The exchange rate between total shares and BTC+ total supply. Express in WAD.\\n    // It's equal to the amount of plus token per share.\\n    // Note: The index will never decrease!\\n    uint256 public index;\\n\\n    address public override governance;\\n    mapping(address => bool) public override strategists;\\n    address public override treasury;\\n\\n    // Governance parameters\\n    uint256 public redeemFee;\\n\\n    // EIP 2612: Permit\\n    // Credit: https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint) public nonces;\\n\\n    /**\\n     * @dev Initializes the plus token contract.\\n     */\\n    function __PlusToken__init(string memory _name, string memory _symbol) internal initializer {\\n        __ERC20_init(_name, _symbol);\\n        index = WAD;\\n        governance = msg.sender;\\n        treasury = msg.sender;\\n\\n        uint _chainId;\\n        assembly {\\n            _chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                keccak256(bytes(_name)),\\n                keccak256(bytes('1')),\\n                _chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _checkGovernance() internal view {\\n        require(msg.sender == governance, \\\"not governance\\\");\\n    }\\n\\n    modifier onlyGovernance() {\\n        _checkGovernance();\\n        _;\\n    }\\n\\n    function _checkStrategist() internal view {\\n        require(msg.sender == governance || strategists[msg.sender], \\\"not strategist\\\");\\n    }\\n\\n    modifier onlyStrategist {\\n        _checkStrategist();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the total value of the plus token in terms of the peg value in WAD.\\n     * All underlying token amounts have been scaled to 18 decimals, then expressed in WAD.\\n     */\\n    function _totalUnderlyingInWad() internal view virtual returns (uint256);\\n\\n    /**\\n     * @dev Returns the total value of the plus token in terms of the peg value.\\n     * For single plus, it's equal to its total supply.\\n     * For composite plus, it's equal to the total amount of single plus tokens in its basket.\\n     */\\n    function totalUnderlying() external view override returns (uint256) {\\n        return _totalUnderlyingInWad().div(WAD);\\n    }\\n\\n    /**\\n     * @dev Returns the total supply of plus token. See {IERC20Updateable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return totalShares.mul(index).div(WAD);\\n    }\\n\\n    /**\\n     * @dev Returns the balance of plus token for the account. See {IERC20Updateable-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return userShare[account].mul(index).div(WAD);\\n    }\\n\\n    /**\\n     * @dev Returns the current liquidity ratio of the plus token in WAD.\\n     */\\n    function liquidityRatio() public view returns (uint256) {\\n        uint256 _totalSupply = totalSupply();\\n        return _totalSupply == 0 ? WAD : _totalUnderlyingInWad().div(_totalSupply);\\n    }\\n\\n    /**\\n     * @dev Accrues interest to increase index.\\n     */\\n    function rebase() public override {\\n        uint256 _totalShares = totalShares;\\n        if (_totalShares == 0)  return;\\n\\n        // underlying is in WAD, and index is also in WAD\\n        uint256 _underlying = _totalUnderlyingInWad();\\n        uint256 _oldIndex = index;\\n        uint256 _newIndex = _underlying.div(_totalShares);\\n\\n        // _newIndex - oldIndex is the amount of interest generated for each share\\n        // _oldIndex might be larger than _newIndex in a short period of time. In this period, the liquidity ratio is smaller than 1.\\n        if (_newIndex > _oldIndex) {\\n            // Index can never decrease\\n            index = _newIndex;\\n\\n            for (uint256 i = 0; i < transactions.length; i++) {\\n                Transaction storage transaction = transactions[i];\\n                if (transaction.enabled) {\\n                    (bool success, ) = transaction.destination.call(transaction.data);\\n                    require(success, \\\"rebase hook failed\\\");\\n                }\\n            }\\n            \\n            // In this event we are returning underlyiing() which can be used to compute the actual interest generated.\\n            emit Rebased(_oldIndex, _newIndex, _underlying.div(WAD));\\n        }\\n    }\\n\\n    /**\\n     * @dev Allows anyone to donate their plus asset to all other holders.\\n     * @param _amount Amount of plus token to donate.\\n     */\\n    function donate(uint256 _amount) public override {\\n        // Rebase first to make index up-to-date\\n        rebase();\\n        // Special handling of -1 is required here in order to fully donate all shares, since interest\\n        // will be accrued between the donate transaction is signed and mined.\\n        uint256 _share;\\n        if (_amount == uint256(int256(-1))) {\\n            _share = userShare[msg.sender];\\n            _amount = _share.mul(index).div(WAD);\\n        } else {\\n            _share  = _amount.mul(WAD).div(index);\\n        }\\n\\n        uint256 _oldShare = userShare[msg.sender];\\n        uint256 _newShare = _oldShare.sub(_share, \\\"insufficient share\\\");\\n        uint256 _newTotalShares = totalShares.sub(_share);\\n        userShare[msg.sender] = _newShare;\\n        totalShares = _newTotalShares;\\n\\n        emit UserShareUpdated(msg.sender, _oldShare, _newShare, _newTotalShares);\\n        emit Donated(msg.sender, _amount, _share);\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     */\\n    function _transfer(address _sender, address _recipient, uint256 _amount) internal virtual override {\\n        require(_sender != _recipient, \\\"recipient cannot be sender\\\");\\n        // Rebase first to make index up-to-date\\n        rebase();\\n        uint256 _shareToTransfer = _amount.mul(WAD).div(index);\\n\\n        uint256 _oldSenderShare = userShare[_sender];\\n        uint256 _newSenderShare = _oldSenderShare.sub(_shareToTransfer, \\\"insufficient share\\\");\\n        uint256 _oldRecipientShare = userShare[_recipient];\\n        uint256 _newRecipientShare = _oldRecipientShare.add(_shareToTransfer);\\n        uint256 _totalShares = totalShares;\\n\\n        userShare[_sender] = _newSenderShare;\\n        userShare[_recipient] = _newRecipientShare;\\n\\n        emit UserShareUpdated(_sender, _oldSenderShare, _newSenderShare, _totalShares);\\n        emit UserShareUpdated(_recipient, _oldRecipientShare, _newRecipientShare, _totalShares);\\n    }\\n\\n    /**\\n     * @dev Gassless approve.\\n     */\\n    function permit(address _owner, address _spender, uint256 _value, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s) external {\\n        require(_deadline >= block.timestamp, 'expired');\\n        bytes32 _digest = keccak256(\\n            abi.encodePacked(\\n                '\\\\x19\\\\x01',\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, _owner, _spender, _value, nonces[_owner]++, _deadline))\\n            )\\n        );\\n        address _recoveredAddress = ecrecover(_digest, _v, _r, _s);\\n        require(_recoveredAddress != address(0) && _recoveredAddress == _owner, 'invalid signature');\\n        _approve(_owner, _spender, _value);\\n    }\\n\\n    /*********************************************\\n     *\\n     *    Governance methods\\n     *\\n     **********************************************/\\n\\n    /**\\n     * @dev Updates governance. Only governance can update governance.\\n     */\\n    function setGovernance(address _governance) external onlyGovernance {\\n        address _oldGovernance = governance;\\n        governance = _governance;\\n        emit GovernanceUpdated(_oldGovernance, _governance);\\n    }\\n\\n    /**\\n     * @dev Updates strategist. Both governance and strategists can update strategist.\\n     */\\n    function setStrategist(address _strategist, bool _allowed) external onlyStrategist {\\n        require(_strategist != address(0x0), \\\"strategist not set\\\");\\n\\n        strategists[_strategist] = _allowed;\\n        emit StrategistUpdated(_strategist, _allowed);\\n    }\\n\\n    /**\\n     * @dev Updates the treasury. Only governance can update treasury.\\n     */\\n    function setTreasury(address _treasury) external onlyGovernance {\\n        require(_treasury != address(0x0), \\\"treasury not set\\\");\\n\\n        address _oldTreasury = treasury;\\n        treasury = _treasury;\\n        emit TreasuryUpdated(_oldTreasury, _treasury);\\n    }\\n\\n    /**\\n     * @dev Updates the redeem fee. Only governance can update redeem fee.\\n     */\\n    function setRedeemFee(uint256 _redeemFee) external onlyGovernance {\\n        require(_redeemFee <= MAX_PERCENT, \\\"redeem fee too big\\\");\\n        uint256 _oldFee = redeemFee;\\n\\n        redeemFee = _redeemFee;\\n        emit RedeemFeeUpdated(_oldFee, _redeemFee);\\n    }\\n\\n    /**\\n     * @dev Used to salvage any ETH deposited to BTC+ contract by mistake. Only strategist can salvage ETH.\\n     * The salvaged ETH is transferred to treasury for futher operation.\\n     */\\n    function salvage() external onlyStrategist {\\n        uint256 _amount = address(this).balance;\\n        address payable _target = payable(treasury);\\n        (bool _success, ) = _target.call{value: _amount}(new bytes(0));\\n        require(_success, 'ETH salvage failed');\\n    }\\n\\n    /**\\n     * @dev Checks whether a token can be salvaged via salvageToken().\\n     * @param _token Token to check salvageability.\\n     */\\n    function _salvageable(address _token) internal view virtual returns (bool);\\n\\n    /**\\n     * @dev Used to salvage any token deposited to plus contract by mistake. Only strategist can salvage token.\\n     * The salvaged token is transferred to treasury for futhuer operation.\\n     * @param _token Address of the token to salvage.\\n     */\\n    function salvageToken(address _token) external onlyStrategist {\\n        require(_token != address(0x0), \\\"token not set\\\");\\n        require(_salvageable(_token), \\\"cannot salvage\\\");\\n\\n        IERC20Upgradeable _target = IERC20Upgradeable(_token);\\n        _target.safeTransfer(treasury, _target.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @dev Add a new rebase hook.\\n     * @param _destination Destination contract for the reabase hook.\\n     * @param _data Transaction payload for the rebase hook.\\n     */\\n    function addTransaction(address _destination, bytes memory _data) external onlyGovernance {\\n        transactions.push(Transaction({enabled: true, destination: _destination, data: _data}));\\n    }\\n\\n    /**\\n     * @dev Remove a rebase hook.\\n     * @param _index Index of the transaction to remove.\\n     */\\n    function removeTransaction(uint256 _index) external onlyGovernance {\\n        require(_index < transactions.length, \\\"index out of bounds\\\");\\n\\n        if (_index < transactions.length - 1) {\\n            transactions[_index] = transactions[transactions.length - 1];\\n        }\\n\\n        transactions.pop();\\n    }\\n\\n    /**\\n     * @dev Updates an existing rebase hook transaction.\\n     * @param _index Index of transaction. Transaction ordering may have changed since adding.\\n     * @param _enabled True for enabled, false for disabled.\\n     */\\n    function updateTransaction(uint256 _index, bool _enabled) external onlyGovernance {\\n        require(_index < transactions.length, \\\"index must be in range of stored tx list\\\");\\n        transactions[_index].enabled = _enabled;\\n    }\\n\\n    /**\\n     * @dev Returns the number of rebase hook transactions.\\n     */\\n    function transactionSize() external view returns (uint256) {\\n        return transactions.length;\\n    }\\n\\n    uint256[50] private __gap;\\n}\"\r\n    },\r\n    \"/Users/shengdading/git/BTC-Plus/contracts/SinglePlus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/ISinglePlus.sol\\\";\\nimport \\\"./Plus.sol\\\";\\n\\n/**\\n * @title Single plus token.\\n *\\n * A single plus token wraps an LP token, typically not value-pegged, into a value peg token.\\n *\\n * Note: LP token vs underlying token\\n * - LP token is the token wrapped by single plus. It's typically not value peg, and it applies to\\n *   single plus only;\\n * - Underlying token is the peg token. It applies to both single plus and composite plus.\\n * E.g. For renCrv+, the LP token is renCrv and underlying token is BTC.\\n */\\ncontract SinglePlus is ISinglePlus, Plus, ReentrancyGuardUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using SafeMathUpgradeable for uint256;\\n\\n    event Minted(address indexed user, uint256 amount, uint256 mintShare, uint256 mintAmount);\\n    event Redeemed(address indexed user, uint256 amount, uint256 redeemShare, uint256 redeemAmount, uint256 fee);\\n\\n    event Harvested(address indexed token, uint256 amount, uint256 feeAmount);\\n    event PerformanceFeeUpdated(uint256 oldPerformanceFee, uint256 newPerformanceFee);\\n    \\n    // LP token of the single plus toke. Typically a yield token and not value peg.\\n    address public override token;\\n    // Whether minting is paused for the single plus token.\\n    bool public mintPaused;\\n    uint256 public performanceFee;\\n    uint256 public constant PERCENT_MAX = 10000;    // 0.01%\\n\\n    /**\\n     * @dev Initializes the single plus contract.\\n     * @param _token LP token of the single plus.\\n     * @param _nameOverride If empty, the single plus name will be `token_name Plus`\\n     * @param _symbolOverride If empty. the single plus name will be `token_symbol+`\\n     */\\n    function initialize(address _token, string memory _nameOverride, string memory _symbolOverride) public initializer {\\n        token = _token;\\n\\n        string memory _name = _nameOverride;\\n        string memory _symbol = _symbolOverride;\\n        if (bytes(_name).length == 0) {\\n            _name = string(abi.encodePacked(ERC20Upgradeable(_token).name(), \\\" Plus\\\"));\\n        }\\n        if (bytes(_symbol).length == 0) {\\n            _symbol = string(abi.encodePacked(ERC20Upgradeable(_token).symbol(), \\\"+\\\"));\\n        }\\n        __PlusToken__init(_name, _symbol);\\n        __ReentrancyGuard_init();\\n    }\\n\\n    /**\\n     * @dev Returns the amount of single plus tokens minted with the LP token provided.\\n     * @dev _amounts Amount of LP token used to mint the single plus token.\\n     */\\n    function getMintAmount(uint256 _amount) external view returns(uint256) {\\n        // Conversion rate is the amount of single plus token per LP token, in WAD.\\n        return _amount.mul(_conversionRate()).div(WAD);\\n    }\\n\\n    /**\\n     * @dev Mints the single plus token with the LP token.\\n     * @dev _amount Amount of the LP token used to mint single plus token.\\n     */\\n    function mint(uint256 _amount) external override nonReentrant {\\n        require(_amount > 0, \\\"zero amount\\\");\\n        require(!mintPaused, \\\"mint paused\\\");\\n\\n        // Rebase first to make index up-to-date\\n        rebase();\\n\\n        // Transfers the LP token in.\\n        IERC20Upgradeable(token).safeTransferFrom(msg.sender, address(this), _amount);\\n        // Conversion rate is the amount of single plus token per LP token, in WAD.\\n        uint256 _newAmount = _amount.mul(_conversionRate()).div(WAD);\\n        // Index is in WAD\\n        uint256 _share = _amount.mul(_conversionRate()).div(index);\\n\\n        uint256 _oldShare = userShare[msg.sender];\\n        uint256 _newShare = _oldShare.add(_share);\\n        uint256 _totalShares = totalShares.add(_share);\\n        totalShares = _totalShares;\\n        userShare[msg.sender] = _newShare;\\n\\n        emit UserShareUpdated(msg.sender, _oldShare, _newShare, _totalShares);\\n        emit Minted(msg.sender, _amount, _share, _newAmount);\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens received in redeeming the single plus token.\\n     * @param _amount Amounf of single plus to redeem.\\n     * @return Amount of LP token received as well as fee collected.\\n     */\\n    function getRedeemAmount(uint256 _amount) external view returns (uint256, uint256) {\\n        // Withdraw ratio = min(liquidity ratio, 1 - redeem fee)\\n        // Liquidity ratio is in WAD and redeem fee is in 0.01%\\n        uint256 _withdrawAmount1 = _amount.mul(liquidityRatio()).div(WAD);\\n        uint256 _withdrawAmount2 = _amount.mul(MAX_PERCENT - redeemFee).div(MAX_PERCENT);\\n        uint256 _withdrawAmount = MathUpgradeable.min(_withdrawAmount1, _withdrawAmount2);\\n        uint256 _fee = _amount.sub(_withdrawAmount);\\n\\n        // Conversion rate is in WAD\\n        uint256 _underlyingAmount = _withdrawAmount.mul(WAD).div(_conversionRate());\\n\\n        // Note: Fee is in plus token(18 decimals) but the received amount is in LP token!\\n        return (_underlyingAmount, _fee);\\n    }\\n\\n    /**\\n     * @dev Redeems the single plus token.\\n     * @param _amount Amount of single plus token to redeem. -1 means redeeming all shares.\\n     */\\n    function redeem(uint256 _amount) external override nonReentrant {\\n        require(_amount > 0, \\\"zero amount\\\");\\n\\n        // Rebase first to make index up-to-date\\n        rebase();\\n\\n        // Special handling of -1 is required here in order to fully redeem all shares, since interest\\n        // will be accrued between the redeem transaction is signed and mined.\\n        uint256 _share;\\n        if (_amount == uint256(int256(-1))) {\\n            _share = userShare[msg.sender];\\n            _amount = _share.mul(index).div(WAD);\\n        } else {\\n            _share  = _amount.mul(WAD).div(index);\\n        }\\n\\n        // Withdraw ratio = min(liquidity ratio, 1 - redeem fee)\\n        // Liquidity ratio is in WAD and redeem fee is in 0.01%\\n        uint256 _withdrawAmount1 = _amount.mul(liquidityRatio()).div(WAD);\\n        uint256 _withdrawAmount2 = _amount.mul(MAX_PERCENT - redeemFee).div(MAX_PERCENT);\\n        uint256 _withdrawAmount = MathUpgradeable.min(_withdrawAmount1, _withdrawAmount2);\\n        uint256 _fee = _amount.sub(_withdrawAmount);\\n\\n        // Conversion rate is in WAD\\n        uint256 _underlyingAmount = _withdrawAmount.mul(WAD).div(_conversionRate());\\n\\n        _withdraw(msg.sender, _underlyingAmount);\\n\\n        // Updates the balance\\n        uint256 _oldShare = userShare[msg.sender];\\n        uint256 _newShare = _oldShare.sub(_share);\\n        totalShares = totalShares.sub(_share);\\n        userShare[msg.sender] = _newShare;\\n\\n        emit UserShareUpdated(msg.sender, _oldShare, _newShare, totalShares);\\n        emit Redeemed(msg.sender, _underlyingAmount, _share, _amount, _fee);\\n    }\\n\\n    /**\\n     * @dev Updates the mint paused state of the LP token.\\n     * @param _paused Whether minting with that token is paused.\\n     */\\n    function setMintPaused(bool _paused) external onlyStrategist {\\n        require(mintPaused != _paused, \\\"no change\\\");\\n\\n        mintPaused = _paused;\\n        emit MintPausedUpdated(token, _paused);\\n    }\\n\\n    /**\\n     * @dev Updates the performance fee. Only governance can update the performance fee.\\n     */\\n    function setPerformanceFee(uint256 _performanceFee) public onlyGovernance {\\n        require(_performanceFee <= PERCENT_MAX, \\\"overflow\\\");\\n        uint256 oldPerformanceFee = performanceFee;\\n        performanceFee = _performanceFee;\\n\\n        emit PerformanceFeeUpdated(oldPerformanceFee, _performanceFee);\\n    }\\n\\n    /**\\n     * @dev Retrive the LP token from the investment.\\n     */\\n    function divest() public virtual override {}\\n\\n    /**\\n     * @dev Returns the amount that can be invested now. The invested token\\n     * does not have to be the LP token.\\n     * investable > 0 means it's time to call invest.\\n     */\\n    function investable() public view virtual override returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Invest the LP token for additional yield.\\n     */\\n    function invest() public virtual override {}\\n\\n    /**\\n     * @dev Returns the amount of reward that could be harvested now.\\n     * harvestable > 0 means it's time to call harvest.\\n     */\\n    function harvestable() public view virtual override returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Harvest additional yield from the investment.\\n     */\\n    function harvest() public virtual override {}\\n\\n    /**\\n     * @dev Checks whether a token can be salvaged via salvageToken().\\n     * @param _token Token to check salvageability.\\n     */\\n    function _salvageable(address _token) internal view virtual override returns (bool) {\\n        // For single plus, the only token that cannot salvage is the LP token!\\n        return _token != token;\\n    }\\n\\n    /**\\n     * @dev Returns the amount of single plus token is worth for one LP token, expressed in WAD.\\n     * The default implmentation assumes that the single plus and LP tokens are both peg.\\n     */\\n    function _conversionRate() internal view virtual returns (uint256) {\\n        // 36 since the decimals for plus token is always 18, and conversion rate is in WAD.\\n        return uint256(10) ** (36 - ERC20Upgradeable(token).decimals());\\n    }\\n\\n    /**\\n     * @dev Returns the total value of the LP token in terms of the underlying tokens, scaled to 18 decimals\\n     * and expressed in WAD.\\n     */\\n    function _totalUnderlyingInWad() internal view virtual override returns (uint256) {\\n        uint256 _balance = IERC20Upgradeable(token).balanceOf(address(this));\\n        // Conversion rate is the amount of single plus token per LP token, in WAD.\\n        return _balance.mul(_conversionRate());\\n    }\\n\\n    /**\\n     * @dev Withdraws LP tokens.\\n     * @param _receiver Address to receive the token withdraw.\\n     * @param _amount Amount of LP token withdraw.\\n     */\\n    function _withdraw(address _receiver, uint256  _amount) internal virtual {\\n        IERC20Upgradeable(token).safeTransfer(_receiver, _amount);\\n    }\\n\\n    uint256[50] private __gap;\\n}\"\r\n    },\r\n    \"/Users/shengdading/git/BTC-Plus/contracts/interfaces/IConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\n/**\\n * @dev Interfaces for converter.\\n */\\ninterface IConverter {\\n\\n    function convert(address _from, address _to, uint256 _fromAmount, uint256 _toAmount) external;\\n}\"\r\n    },\r\n    \"/Users/shengdading/git/BTC-Plus/contracts/interfaces/IPlus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\n/**\\n * @title Interface for plus token.\\n * Plus token is a value pegged ERC20 token which provides global interest to all holders.\\n */\\ninterface IPlus {\\n    /**\\n     * @dev Returns the governance address.\\n     */\\n    function governance() external view returns (address);\\n\\n    /**\\n     * @dev Returns whether the account is a strategist.\\n     */\\n    function strategists(address _account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the treasury address.\\n     */\\n    function treasury() external view returns (address);\\n\\n    /**\\n     * @dev Accrues interest to increase index.\\n     */\\n    function rebase() external;\\n\\n    /**\\n     * @dev Returns the total value of the plus token in terms of the peg value.\\n     */\\n    function totalUnderlying() external view returns (uint256);\\n\\n    /**\\n     * @dev Allows anyone to donate their plus asset to all other holders.\\n     * @param _amount Amount of plus token to donate.\\n     */\\n    function donate(uint256 _amount) external;\\n}\"\r\n    },\r\n    \"/Users/shengdading/git/BTC-Plus/contracts/interfaces/ISinglePlus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport \\\"./IPlus.sol\\\";\\n\\n/**\\n * @title Interface for single plus token.\\n * Single plus token is backed by one ERC20 token and targeted at yield generation.\\n */\\ninterface ISinglePlus is IPlus {\\n    /**\\n     * @dev Returns the address of the underlying token.\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @dev Retrive the underlying assets from the investment.\\n     */\\n    function divest() external;\\n\\n    /**\\n     * @dev Returns the amount that can be invested now. The invested token\\n     * does not have to be the underlying token.\\n     * investable > 0 means it's time to call invest.\\n     */\\n    function investable() external view returns (uint256);\\n\\n    /**\\n     * @dev Invest the underlying assets for additional yield.\\n     */\\n    function invest() external;\\n\\n    /**\\n     * @dev Returns the amount of reward that could be harvested now.\\n     * harvestable > 0 means it's time to call harvest.\\n     */\\n    function harvestable() external view returns (uint256);\\n\\n    /**\\n     * @dev Harvest additional yield from the investment.\\n     */\\n    function harvest() external;\\n\\n    /**\\n     * @dev Mints the single plus token with the underlying token.\\n     * @dev _amount Amount of the underlying token used to mint single plus token.\\n     */\\n    function mint(uint256 _amount) external;\\n\\n    /**\\n     * @dev Redeems the single plus token.\\n     * @param _amount Amount of single plus token to redeem. -1 means redeeming all shares.\\n     */\\n    function redeem(uint256 _amount) external;\\n}\"\r\n    },\r\n    \"/Users/shengdading/git/BTC-Plus/contracts/interfaces/badger/IBadgerSett.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\n/**\\n * @dev Interface for Badger Sett.\\n */\\ninterface IBadgerSett {\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n\\n}\"\r\n    },\r\n    \"/Users/shengdading/git/BTC-Plus/contracts/interfaces/badger/IBadgerTree.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\n/**\\n * @dev Interface for Badger Tree.\\n */\\ninterface IBadgerTree {\\n\\n    /// @notice Claim accumulated rewards for a set of tokens at a given cycle number\\n    function claim(\\n        address[] calldata tokens,\\n        uint256[] calldata cumulativeAmounts,\\n        uint256 index,\\n        uint256 cycle,\\n        bytes32[] calldata merkleProof,\\n        uint256[] calldata amountsToClaim\\n    ) external;\\n}\"\r\n    },\r\n    \"/Users/shengdading/git/BTC-Plus/contracts/interfaces/curve/ICurveFi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\n/**\\n * @notice Interface for Curve.fi's pool.\\n */\\ninterface ICurveFi {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(uint256 token_amount, int128 iint128, uint256 min_amount) external;\\n\\n    // ren pool/hbtc pool\\n    function add_liquidity(\\n        uint256[2] calldata amounts,\\n        uint256 min_mint_amount\\n    ) external;\\n\\n    function remove_liquidity_imbalance(uint256[2] calldata amounts, uint256 max_burn_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] calldata amounts) external;\\n\\n    // sbtc pool\\n    function add_liquidity(\\n        uint256[3] calldata amounts,\\n        uint256 min_mint_amount\\n    ) external;\\n\\n    function remove_liquidity_imbalance(uint256[3] calldata amounts, uint256 max_burn_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] calldata amounts) external;\\n\\n    // obtc pool/tbtc pool\\n    function add_liquidity(\\n        uint256[4] calldata amounts,\\n        uint256 min_mint_amount\\n    ) external;\\n\\n    function remove_liquidity_imbalance(uint256[4] calldata amounts, uint256 max_burn_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[4] calldata amounts) external;\\n\\n    function exchange(\\n        int128 from,\\n        int128 to,\\n        uint256 _from_amount,\\n        uint256 _min_to_amount\\n    ) external;\\n}\"\r\n    },\r\n    \"/Users/shengdading/git/BTC-Plus/contracts/interfaces/uniswap/IUniswapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\n/**\\n * @notice Interface for Uniswap's router.\\n */\\ninterface IUniswapRouter {\\n    function swapExactTokensForTokens(\\n        uint256,\\n        uint256,\\n        address[] calldata,\\n        address,\\n        uint256\\n    ) external;\\n}\"\r\n    },\r\n    \"/Users/shengdading/git/BTC-Plus/contracts/single/eth/BadgerHrenCrv+.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport \\\"../../SinglePlus.sol\\\";\\nimport \\\"../../interfaces/IConverter.sol\\\";\\nimport \\\"../../interfaces/curve/ICurveFi.sol\\\";\\nimport \\\"../../interfaces/badger/IBadgerSett.sol\\\";\\nimport \\\"../../interfaces/badger/IBadgerTree.sol\\\";\\nimport \\\"../../interfaces/uniswap/IUniswapRouter.sol\\\";\\n\\n/**\\n * @dev Single plus for Badger hrenCrv.\\n */\\ncontract BadgerHrenCrvPlus is SinglePlus {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using SafeMathUpgradeable for uint256;\\n\\n    address public constant BADGER_HRENCRV = address(0xAf5A1DECfa95BAF63E0084a35c62592B774A2A87);\\n    address public constant BADGER_TREE = address(0x660802Fc641b154aBA66a62137e71f331B6d787A);\\n    address public constant WBTC = address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\\n    address public constant WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    address public constant BADGER = address(0x3472A5A71965499acd81997a54BBA8D852C6E53d);\\n    address public constant DIGG = address(0x798D1bE841a82a273720CE31c822C61a67a601C3);\\n    address public constant FARM = address(0xa0246c9032bC3A600820415aE600c6388619A14D);\\n    address public constant RENCRV = address(0x49849C98ae39Fff122806C06791Fa73784FB3675);\\n    address public constant UNISWAP = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);  // Uniswap RouterV2\\n    address public constant REN_SWAP = address(0x93054188d876f558f4a66B2EF1d97d16eDf0895B); // REN swap\\n\\n    /**\\n     * We use a converter to convert renCrv --> bhrenCrv because bhrenCrv has a whitelist.\\n     * Therefore, we use a converter to facilitate testing bhrenCrv+.\\n     * Once bhrenCrv+ is whitelisted, we will upgrade the contract to replace the converter.\\n     */\\n    address public converter;\\n\\n    /**\\n     * @dev Initializes bhrenCrv+.\\n     */\\n    function initialize(address _converter) public initializer {\\n        SinglePlus.initialize(BADGER_HRENCRV, \\\"\\\", \\\"\\\");\\n\\n        converter = _converter;\\n    }\\n\\n    /**\\n     * @dev Harvest additional yield from the investment.\\n     * Only governance or strategist can call this function.\\n     */\\n    function harvest(address[] calldata _tokens, uint256[] calldata _cumulativeAmounts, uint256 _index, uint256 _cycle,\\n        bytes32[] calldata _merkleProof, uint256[] calldata _amountsToClaim) public virtual onlyStrategist {\\n        // 1. Harvest from Badger Tree\\n        IBadgerTree(BADGER_TREE).claim(_tokens, _cumulativeAmounts, _index, _cycle, _merkleProof, _amountsToClaim);\\n\\n        // 2. Badger --> WETH --> WBTC\\n        uint256 _badger = IERC20Upgradeable(BADGER).balanceOf(address(this));\\n        if (_badger > 0) {\\n            IERC20Upgradeable(BADGER).safeApprove(UNISWAP, 0);\\n            IERC20Upgradeable(BADGER).safeApprove(UNISWAP, _badger);\\n\\n            address[] memory _path = new address[](3);\\n            _path[0] = BADGER;\\n            _path[1] = WETH;\\n            _path[2] = WBTC;\\n\\n            IUniswapRouter(UNISWAP).swapExactTokensForTokens(_badger, uint256(0), _path, address(this), block.timestamp.add(1800));\\n        }\\n\\n        // 3: Digg --> WBTC\\n        uint256 _digg = IERC20Upgradeable(DIGG).balanceOf(address(this));\\n        if (_digg > 0) {\\n            IERC20Upgradeable(DIGG).safeApprove(UNISWAP, 0);\\n            IERC20Upgradeable(DIGG).safeApprove(UNISWAP, _digg);\\n\\n            address[] memory _path = new address[](2);\\n            _path[0] = DIGG;\\n            _path[1] = WBTC;\\n\\n            IUniswapRouter(UNISWAP).swapExactTokensForTokens(_digg, uint256(0), _path, address(this), block.timestamp.add(1800));\\n        }\\n\\n        // 4. Farm --> WETH --> WBTC\\n        uint256 _farm = IERC20Upgradeable(FARM).balanceOf(address(this));\\n        if (_farm > 0) {\\n            IERC20Upgradeable(FARM).safeApprove(UNISWAP, 0);\\n            IERC20Upgradeable(FARM).safeApprove(UNISWAP, _farm);\\n\\n            address[] memory _path = new address[](3);\\n            _path[0] = FARM;\\n            _path[1] = WETH;\\n            _path[2] = WBTC;\\n\\n            IUniswapRouter(UNISWAP).swapExactTokensForTokens(_farm, uint256(0), _path, address(this), block.timestamp.add(1800));\\n        }\\n\\n        // 5: WBTC --> renCrv\\n        uint256 _wbtc = IERC20Upgradeable(WBTC).balanceOf(address(this));\\n        if (_wbtc == 0) return;\\n\\n        // If there is performance fee, charged in WBTC\\n        uint256 _fee = 0;\\n        if (performanceFee > 0) {\\n            _fee = _wbtc.mul(performanceFee).div(PERCENT_MAX);\\n            IERC20Upgradeable(WBTC).safeTransfer(treasury, _fee);\\n            _wbtc = _wbtc.sub(_fee);\\n        }\\n\\n        IERC20Upgradeable(WBTC).safeApprove(REN_SWAP, 0);\\n        IERC20Upgradeable(WBTC).safeApprove(REN_SWAP, _wbtc);\\n        ICurveFi(REN_SWAP).add_liquidity([0, _wbtc], 0);\\n\\n        // 5: renCrv --> bhrenCrv\\n        address _converter = converter;\\n        uint256 _hrenCrv = IERC20Upgradeable(RENCRV).balanceOf(address(this));\\n        IERC20Upgradeable(RENCRV).safeApprove(_converter, 0);\\n        IERC20Upgradeable(RENCRV).safeApprove(_converter, _hrenCrv);\\n\\n        uint256 _before = IERC20Upgradeable(BADGER_HRENCRV).balanceOf(address(this));\\n        uint256 _target = _hrenCrv.mul(WAD).div(IBadgerSett(BADGER_HRENCRV).getPricePerFullShare());\\n        IConverter(_converter).convert(RENCRV, BADGER_HRENCRV, _hrenCrv, _target);\\n        uint256 _after = IERC20Upgradeable(BADGER_HRENCRV).balanceOf(address(this));\\n        require(_after >= _before.add(_target), \\\"convert fail\\\");\\n\\n        // Also it's a good time to rebase!\\n        rebase();\\n\\n        emit Harvested(BADGER_HRENCRV, _wbtc, _fee);\\n    }\\n\\n    /**\\n     * @dev Returns the amount of single plus token is worth for one underlying token, expressed in WAD.\\n     */\\n    function _conversionRate() internal view virtual override returns (uint256) {\\n        // Both Badger's share price and Curve's virtual price are in WAD\\n        return IBadgerSett(BADGER_HRENCRV).getPricePerFullShare().mul(ICurveFi(REN_SWAP).get_virtual_price()).div(WAD);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overloaded;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"Donated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldGovernance\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"GovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"MintPausedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPerformanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"PerformanceFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalUnderlying\",\"type\":\"uint256\"}],\"name\":\"Rebased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"RedeemFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"StrategistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTreasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"UserShareUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BADGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BADGER_HRENCRV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BADGER_TREE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DIGG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FARM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RENCRV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REN_SWAP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"addTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"converter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"divest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getRedeemAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_cumulativeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cycle\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountsToClaim\",\"type\":\"uint256[]\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_nameOverride\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbolOverride\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_converter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salvage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"salvageToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setMintPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redeemFee\",\"type\":\"uint256\"}],\"name\":\"setRedeemFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"updateTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BadgerHrenCrvPlus","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}