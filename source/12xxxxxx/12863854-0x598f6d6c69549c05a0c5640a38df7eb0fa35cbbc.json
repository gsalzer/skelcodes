{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-07-20\r\n*/\r\n\r\npragma solidity ^0.6.12;\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    \r\n    \r\n    function mint( address sender, uint256 tAmount) external;\r\n    \r\n    function burn( address sender, uint256 tAmount) external;\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n     /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function geUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    //Locks the contract for owner for the amount of time provided\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = now + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n    \r\n    //Unlocks the contract for owner when _lockTime is exceeds\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n        require(now > _lockTime , \"Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\nabstract contract BorrowLala {\r\n    function payBack( address _token, address _account, uint _borrowID, uint _amount) external virtual;\r\n}\r\n\r\ncontract PredictionLala is Ownable {\r\n    using SafeMath for uint;\r\n    \r\n    event Deposit( address indexed _account, uint _amount, uint _time, uint8 _flag);\r\n    event Withdraw( address indexed _account, uint _amount, uint _time);\r\n    event Prediction(uint _predictionID, uint8 _prediction, uint _predictAmount, uint _predictTime, bool _useBorrow);\r\n    event RewardDistribution(address indexed _user, uint indexed _predictionID, uint _rewards, bool indexed _asPredicted);\r\n    event WinnerReward( address indexed _winner, uint _reward, uint _time);\r\n    event RewardWithdrawn( address indexed _account, uint _amount, uint _time);\r\n    \r\n    struct DepositToPredictStruct {\r\n        uint _pendingRewards;\r\n        uint _depositedFromExchange;\r\n        uint _predictionID;\r\n        uint _availableborrow;\r\n        uint _tokenAvailableToPredict;\r\n        uint _totalTokenDeposit;\r\n        uint _totalTokenBorrowDeposit;\r\n        uint LastClaimedTimeStamp;\r\n        mapping(uint => predictStruct) prediction;\r\n    }\r\n    \r\n    struct predictStruct {\r\n        uint _tokenToPredict;\r\n        uint _predictTime;\r\n        uint8 _prediction;\r\n        uint _predictedTime;\r\n        uint _rewarded;\r\n        bool _isUseBorrow;\r\n        bool _isCompleted;\r\n    }\r\n    \r\n    struct borrowStruct {\r\n       uint _leverage; \r\n       uint _borrowedAmount;\r\n    }\r\n    \r\n    mapping(address => DepositToPredictStruct) public user;\r\n    mapping(address => bool) public authenticate;\r\n    \r\n    address public announcerWallet;\r\n    address public _dead = 0x000000000000000000000000000000000000dEaD;\r\n    \r\n    uint public lalaPrice = 1e18;\r\n    uint public minLalaToPredict = 100;\r\n    uint public maxToClaim = 25;\r\n    uint public claimPeriod = 24 hours;\r\n    \r\n    IERC20 public PredictionToken;\r\n    BorrowLala public borrowLala;\r\n    \r\n    constructor( address _announcer) public {\r\n        announcerWallet = _announcer;\r\n    }\r\n    \r\n    modifier _onlyAnnouncer() {\r\n        require(msg.sender == announcerWallet,\"_onlyAnnouncer\");\r\n        _;\r\n    }\r\n    \r\n    modifier _onlyAuth() {\r\n        require(authenticate[msg.sender],\"_onlyAuth\");\r\n        _;\r\n    }\r\n    \r\n    function authentication( address _auth, bool _status) public onlyOwner {\r\n        authenticate[_auth] = _status;\r\n    }\r\n    \r\n    function setPredictionToken(IERC20 _predictionToken) public onlyOwner {\r\n        PredictionToken = _predictionToken;\r\n    }\r\n    \r\n    function setBorrowLala(BorrowLala _borrowlala) public onlyOwner {\r\n        borrowLala = _borrowlala;\r\n        PredictionToken.approve(address(borrowLala), 2 ** 255);\r\n    }\r\n    \r\n    function setAnnouncer(address _announce) public onlyOwner {\r\n        announcerWallet = _announce;\r\n    }\r\n    \r\n    function setLalaPrice( uint _lalaPrice) public onlyOwner {\r\n        lalaPrice = _lalaPrice;\r\n    }\r\n    \r\n    function setMinLalaToPredict( uint _minLalaToPredict) public onlyOwner {\r\n        minLalaToPredict = _minLalaToPredict;\r\n    }\r\n    \r\n    function setMaxToClaim( uint _maxToClaim) public onlyOwner {\r\n        maxToClaim = _maxToClaim;\r\n    }\r\n    \r\n    function setClaimPeriod( uint _claimPeriod) public onlyOwner {\r\n        claimPeriod = _claimPeriod;\r\n    }\r\n    \r\n    function deposit( uint _amount) public returns (bool) {\r\n        require(_amount > 0, \"prediction :: deposit : amount must greater than zero\");\r\n        require(PredictionToken.balanceOf(msg.sender) >= _amount, \"prediction :: deposit : insufficient balance\");\r\n        require(PredictionToken.allowance(msg.sender, address(this))>= _amount, \"prediction :: deposit : insufficient allowance\");\r\n        \r\n        require(PredictionToken.transferFrom(msg.sender, address(this), _amount), \"prediction :: deposit : transferFrom failed\");\r\n        \r\n        user[msg.sender]._tokenAvailableToPredict = user[msg.sender]._tokenAvailableToPredict.add(_amount);\r\n        user[msg.sender]._totalTokenDeposit = user[msg.sender]._totalTokenDeposit.add(_amount);\r\n        user[msg.sender]._depositedFromExchange = user[msg.sender]._depositedFromExchange.add(_amount);\r\n        \r\n        emit Deposit( msg.sender, _amount, block.timestamp, 1);\r\n        return true;\r\n    }\r\n    \r\n    function depositFor( address _account, uint _amount) public _onlyAuth returns (bool) {\r\n        require(_amount > 0, \"prediction :: depositFor : amount must be greater than zero\");\r\n        \r\n        user[_account]._availableborrow = user[_account]._availableborrow.add(_amount);\r\n        user[_account]._totalTokenBorrowDeposit = user[_account]._totalTokenBorrowDeposit.add(_amount);\r\n        user[_account]._tokenAvailableToPredict = user[_account]._tokenAvailableToPredict.add(_amount);\r\n        emit Deposit( _account, _amount, block.timestamp, 2);\r\n        return true;\r\n    }    \r\n    \r\n    function claimReward( uint _amountToClaim) public {\r\n        require(_amountToClaim <= user[msg.sender]._pendingRewards.mul(maxToClaim).div(100), \"claimReward :: user can claim upto 25% from their reward\");\r\n        require(user[msg.sender].LastClaimedTimeStamp.add(claimPeriod) < block.timestamp, \"claimReward :: user has to wait 24 hr to claim\");\r\n        \r\n        user[msg.sender]._pendingRewards = user[msg.sender]._pendingRewards.sub(_amountToClaim);\r\n        PredictionToken.transfer(msg.sender,_amountToClaim);\r\n        user[msg.sender].LastClaimedTimeStamp = block.timestamp;\r\n        emit RewardWithdrawn( msg.sender, _amountToClaim, block.timestamp);\r\n    }\r\n\r\n    function withdraw( uint _amountOut) public returns (bool) {\r\n        require(_amountOut <= user[msg.sender]._depositedFromExchange, \"insufficent amount to withdraw\");                                                                                                                                                                       \r\n        \r\n        user[msg.sender]._depositedFromExchange = user[msg.sender]._depositedFromExchange.sub(_amountOut);\r\n        PredictionToken.transfer(msg.sender,_amountOut);\r\n        emit Withdraw( msg.sender, _amountOut, block.timestamp);\r\n        return true;\r\n    }    \r\n    \r\n    function paybackBorrow( address _collateral, uint _borrowID, uint _amount) public {\r\n        uint _paybackLala;\r\n        \r\n        if(_amount > user[msg.sender]._availableborrow) {\r\n            _paybackLala =  user[msg.sender]._availableborrow;\r\n            user[msg.sender]._availableborrow = 0;\r\n            \r\n            if((user[msg.sender]._pendingRewards >= _amount.sub(_paybackLala)) && ( _amount != _paybackLala) && (_amount.sub(_paybackLala) > 0)){\r\n               user[msg.sender]._pendingRewards = user[msg.sender]._pendingRewards.sub(_amount.sub(_paybackLala));\r\n               _paybackLala = _paybackLala.add(_amount.sub(_paybackLala));\r\n            } \r\n        }\r\n        else{\r\n            user[msg.sender]._availableborrow =  user[msg.sender]._availableborrow.sub(_amount);\r\n            _paybackLala = _amount;\r\n        }\r\n        \r\n        require(_paybackLala == _amount, \"paybackBorrow :: borrow lala doesnt match\");\r\n        \r\n        BorrowLala(borrowLala).payBack( _collateral, msg.sender, _borrowID, _amount);\r\n    }\r\n    \r\n    function predict( uint8 _prediction, uint _predictAmount, uint _predictTime, bool _useBorrow) public returns (bool) {\r\n        require(_predictAmount >= lalaPrice.mul(minLalaToPredict));\r\n       \r\n        if(_useBorrow){\r\n           require((_predictAmount > 0) && (_predictAmount <= user[msg.sender]._availableborrow), \"prediction :: predict : amount to predict is exceed borrowed amount\");  \r\n        }\r\n        else{ require((_predictAmount > 0) && (_predictAmount <= user[msg.sender]._depositedFromExchange), \"prediction :: predict : amount to predict is exceed deposited amount from exchange\"); }\r\n       \r\n        predictStruct memory _predictStruct = predictStruct({\r\n           _tokenToPredict : _predictAmount,\r\n           _predictTime : _predictTime,\r\n           _prediction : _prediction,\r\n           _predictedTime : block.timestamp,\r\n           _rewarded : 0,\r\n           _isUseBorrow : _useBorrow,\r\n           _isCompleted : false\r\n        });\r\n       \r\n        user[msg.sender]._predictionID++;\r\n        user[msg.sender].prediction[user[msg.sender]._predictionID] = _predictStruct;\r\n       \r\n        if(!_useBorrow)\r\n            user[msg.sender]._depositedFromExchange = user[msg.sender]._depositedFromExchange.sub(_predictAmount);\r\n        else\r\n            user[msg.sender]._availableborrow = user[msg.sender]._availableborrow.sub(_predictAmount);\r\n\r\n        user[msg.sender]._tokenAvailableToPredict = user[msg.sender]._tokenAvailableToPredict.sub(_predictAmount);\r\n        emit Prediction(user[msg.sender]._predictionID , _prediction, _predictAmount, _predictTime,  _useBorrow);\r\n    }\r\n    \r\n    function distributePredictionRewards( address[] memory _user, uint[] memory _predictionID, uint[] memory _rewards, bool[] memory _asPredicted) public _onlyAnnouncer returns (bool) {\r\n        require((_user.length == _rewards.length) && (_rewards.length == _asPredicted.length) && (_rewards.length == _predictionID.length),\"prediction :: distributePredictionRewards : invalid length\");\r\n        \r\n        for(uint i=0;i<_user.length;i++){\r\n            require(_user[i] != address(0),\"prediction :: distributePredictionRewards : address must not be a zero address\");\r\n            require(_predictionID[i] > 0,\"prediction :: distributePredictionRewards : prediction ID must be greater than zero\");\r\n            require(!user[_user[i]].prediction[_predictionID[i]]._isCompleted, \"prediction :: distributePredictionRewards : completed prediction\");\r\n            require(user[_user[i]]._predictionID >= _predictionID[i], \"prediction :: distributePredictionRewards : invalid prediction ID\");\r\n            require(user[_user[i]].prediction[_predictionID[i]]._rewarded == 0,\"prediction :: distributePredictionRewards : reward already received\");\r\n            require(user[_user[i]].prediction[_predictionID[i]]._predictTime <= block.timestamp,\"prediction :: distributePredictionRewards : predict time didnt exceed\");\r\n            \r\n            if(_asPredicted[i])\r\n                require(_rewards[i] > 0,\"prediction :: distributePredictionRewards : _rewards must be greater than zero\");\r\n            \r\n            if(_rewards[i] > 0){\r\n                user[_user[i]].prediction[_predictionID[i]]._rewarded = _rewards[i];\r\n                user[_user[i]]._pendingRewards = user[_user[i]]._pendingRewards.add(_rewards[i]); \r\n                PredictionToken.mint( address(this), _rewards[i]);\r\n            } \r\n            \r\n            if(!_asPredicted[i]){\r\n                PredictionToken.burn( _dead, user[_user[i]].prediction[_predictionID[i]]._tokenToPredict);\r\n            }\r\n            else{    \r\n                user[_user[i]]._tokenAvailableToPredict = user[_user[i]]._tokenAvailableToPredict.add(user[_user[i]].prediction[_predictionID[i]]._tokenToPredict);\r\n                \r\n                if(!user[_user[i]].prediction[_predictionID[i]]._isUseBorrow){\r\n                    user[_user[i]]._depositedFromExchange = user[_user[i]]._depositedFromExchange.add(user[_user[i]].prediction[_predictionID[i]]._tokenToPredict);\r\n                }\r\n                else{\r\n                    user[_user[i]]._availableborrow = user[_user[i]]._availableborrow.add(user[_user[i]].prediction[_predictionID[i]]._tokenToPredict);\r\n                }\r\n            }\r\n            \r\n            user[_user[i]].prediction[_predictionID[i]]._isCompleted = true;\r\n            emit RewardDistribution( _user[i], _predictionID[i], _rewards[i], _asPredicted[i]);\r\n        }\r\n    }\r\n    \r\n    function distributeWinnerReward( address[] memory _winners, uint[] memory _rewards) external _onlyAnnouncer returns (bool) {\r\n        require(_winners.length == _rewards.length,\"distributeWinnerReward :: _rewards length mismatch\");\r\n        for(uint i=0; i< _winners.length; i++){\r\n            user[_winners[i]]._pendingRewards = user[_winners[i]]._pendingRewards.add(_rewards[i]); \r\n            PredictionToken.mint( address(this), _rewards[i]);\r\n            emit WinnerReward( _winners[i],_rewards[i], block.timestamp);\r\n        }\r\n    }\r\n    \r\n    function getPredictionDetails( address _user, uint _predictID) public view returns (predictStruct memory) {\r\n        return user[_user].prediction[_predictID];\r\n    }\r\n    \r\n    function viewBorrowAvailable( address _user) external view returns ( uint) {\r\n        return user[_user]._availableborrow;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_announcer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_predictionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_prediction\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_predictAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_predictTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_useBorrow\",\"type\":\"bool\"}],\"name\":\"Prediction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_predictionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewards\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_asPredicted\",\"type\":\"bool\"}],\"name\":\"RewardDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"RewardWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"WinnerReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PredictionToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dead\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"announcerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authenticate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auth\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"authentication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowLala\",\"outputs\":[{\"internalType\":\"contract BorrowLala\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToClaim\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_user\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_predictionID\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewards\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_asPredicted\",\"type\":\"bool[]\"}],\"name\":\"distributePredictionRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_winners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewards\",\"type\":\"uint256[]\"}],\"name\":\"distributeWinnerReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_predictID\",\"type\":\"uint256\"}],\"name\":\"getPredictionDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_tokenToPredict\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_predictTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_prediction\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_predictedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewarded\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isUseBorrow\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isCompleted\",\"type\":\"bool\"}],\"internalType\":\"struct PredictionLala.predictStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lalaPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLalaToPredict\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_borrowID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"paybackBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_prediction\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_predictAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_predictTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useBorrow\",\"type\":\"bool\"}],\"name\":\"predict\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_announce\",\"type\":\"address\"}],\"name\":\"setAnnouncer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract BorrowLala\",\"name\":\"_borrowlala\",\"type\":\"address\"}],\"name\":\"setBorrowLala\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimPeriod\",\"type\":\"uint256\"}],\"name\":\"setClaimPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lalaPrice\",\"type\":\"uint256\"}],\"name\":\"setLalaPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxToClaim\",\"type\":\"uint256\"}],\"name\":\"setMaxToClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minLalaToPredict\",\"type\":\"uint256\"}],\"name\":\"setMinLalaToPredict\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_predictionToken\",\"type\":\"address\"}],\"name\":\"setPredictionToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositedFromExchange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_predictionID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_availableborrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAvailableToPredict\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalTokenDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalTokenBorrowDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LastClaimedTimeStamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewBorrowAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PredictionLala","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000006cbe53101a526e725c3157f8543096bf684991f","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f6f02d344178e4295eab5ff326a749f9dcfba2b0ca9e3d2b2bf6c43ff5f0c4ef"}]}