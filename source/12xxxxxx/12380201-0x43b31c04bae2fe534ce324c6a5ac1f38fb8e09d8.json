{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.1.2 https://hardhat.org\r\n\r\n// File contracts/libraries/Ownable.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n// File contracts/libraries/ReentrancyGuard.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/token/utils/Context.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/libraries/SafeMath.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\r\n// Subject to the MIT license.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction underflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/token/ERC20/ERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n        _totalSupply = 1000000e18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n// File contracts/token/ERC721/IERC165.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/token/ERC721/IERC721.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n\r\n// File contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\n\r\n// File contracts/tier/RedKiteTiers.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract RedKiteTiers is IERC721Receiver, Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    // Info of each user\r\n    struct UserInfo {\r\n        uint256 staked; // How many tokens the user has provided\r\n        uint256 stakedTime; // Block timestamp when the user provided token\r\n    }\r\n\r\n    // RedKiteTiers allow to stake multi tokens to up your tier. Please\r\n    // visit the website to get token list or use the token contract to\r\n    // check it is supported or not.\r\n\r\n    // Info of each Token\r\n    // Currency Rate with PKF: amount * rate / 10 ** decimals\r\n    // Default PKF: rate=1, decimals=0\r\n    struct ExternalToken {\r\n        address contractAddress;\r\n        uint256 decimals;\r\n        uint256 rate;\r\n        bool isERC721;\r\n        bool canStake;\r\n    }\r\n\r\n    uint256 constant MAX_NUM_TIERS = 10;\r\n    uint8 currentMaxTier = 4;\r\n\r\n    // Address take user's withdraw fee\r\n    address public penaltyWallet;\r\n    // The POLKAFOUNDRY TOKEN!\r\n    address public PKF;\r\n\r\n    // Info of each user that stakes tokens\r\n    mapping(address => mapping(address => UserInfo)) public userInfo;\r\n    // Info of total Non-PKF token staked, converted with rate\r\n    mapping(address => uint256) public userExternalStaked;\r\n    // Minimum PKF need to stake each tier\r\n    uint256[MAX_NUM_TIERS] tierPrice;\r\n    // Percentage of penalties\r\n    uint256[6] public withdrawFeePercent;\r\n    // The maximum number of days of penalties\r\n    uint256[5] public daysLockLevel;\r\n    // Info of each token can stake\r\n    mapping(address => ExternalToken) public externalToken;\r\n\r\n    bool public canEmergencyWithdraw;\r\n\r\n    event StakedERC20(address indexed user, address token, uint256 amount);\r\n    event StakedSingleERC721(\r\n        address indexed user,\r\n        address token,\r\n        uint128 tokenId\r\n    );\r\n    event StakedBatchERC721(\r\n        address indexed user,\r\n        address token,\r\n        uint128[] tokenIds\r\n    );\r\n    event WithdrawnERC20(\r\n        address indexed user,\r\n        address token,\r\n        uint256 indexed amount,\r\n        uint256 fee,\r\n        uint256 lastStakedTime\r\n    );\r\n    event WithdrawnSingleERC721(\r\n        address indexed user,\r\n        address token,\r\n        uint128 tokenId,\r\n        uint256 lastStakedTime\r\n    );\r\n    event WithdrawnBatchERC721(\r\n        address indexed user,\r\n        address token,\r\n        uint128[] tokenIds,\r\n        uint256 lastStakedTime\r\n    );\r\n    event EmergencyWithdrawnERC20(\r\n        address indexed user,\r\n        address token,\r\n        uint256 amount,\r\n        uint256 lastStakedTime\r\n    );\r\n    event EmergencyWithdrawnERC721(\r\n        address indexed user,\r\n        address token,\r\n        uint128[] tokenIds,\r\n        uint256 lastStakedTime\r\n    );\r\n    event AddExternalToken(\r\n        address indexed token,\r\n        uint256 decimals,\r\n        uint256 rate,\r\n        bool isERC721,\r\n        bool canStake\r\n    );\r\n    event ExternalTokenStatsChange(\r\n        address indexed token,\r\n        uint256 decimals,\r\n        uint256 rate,\r\n        bool canStake\r\n    );\r\n    event ChangePenaltyWallet(address indexed penaltyWallet);\r\n\r\n    constructor(address _pkf, address _sPkf, address _uniLp, address _penaltyWallet) {\r\n        owner = msg.sender;\r\n        penaltyWallet = _penaltyWallet;\r\n\r\n        PKF = _pkf;\r\n\r\n        addExternalToken(_pkf, 0, 1 , false, true);\r\n        addExternalToken(_sPkf, 0, 1, false, true);\r\n        addExternalToken(_uniLp, 0, 150, false, true);\r\n\r\n        tierPrice[1] = 500e18;\r\n        tierPrice[2] = 5000e18;\r\n        tierPrice[3] = 20000e18;\r\n        tierPrice[4] = 60000e18;\r\n\r\n        daysLockLevel[0] = 10 days;\r\n        daysLockLevel[1] = 20 days;\r\n        daysLockLevel[2] = 30 days;\r\n        daysLockLevel[3] = 60 days;\r\n        daysLockLevel[4] = 90 days;\r\n    }\r\n\r\n    function depositERC20(address _token, uint256 _amount)\r\n        external\r\n        nonReentrant()\r\n    {\r\n        if (_token == PKF) {\r\n            IERC20(PKF).transferFrom(msg.sender, address(this), _amount);\r\n        } else {\r\n            require(\r\n                externalToken[_token].canStake == true,\r\n                \"TIER::TOKEN_NOT_ACCEPTED\"\r\n            );\r\n            IERC20(_token).transferFrom(msg.sender, address(this), _amount);\r\n\r\n            ExternalToken storage token = externalToken[_token];\r\n            userExternalStaked[msg.sender] = userExternalStaked[msg.sender].add(\r\n                _amount.mul(token.rate).div(10**token.decimals)\r\n            );\r\n        }\r\n\r\n        userInfo[msg.sender][_token].staked = userInfo[msg.sender][_token]\r\n            .staked\r\n            .add(_amount);\r\n        userInfo[msg.sender][_token].stakedTime = block.timestamp;\r\n\r\n        emit StakedERC20(msg.sender, _token, _amount);\r\n    }\r\n\r\n    function depositSingleERC721(address _token, uint128 _tokenId)\r\n        external\r\n        nonReentrant()\r\n    {\r\n        require(\r\n            externalToken[_token].canStake == true,\r\n            \"TIER::TOKEN_NOT_ACCEPTED\"\r\n        );\r\n        IERC721(_token).safeTransferFrom(msg.sender, address(this), _tokenId);\r\n\r\n        ExternalToken storage token = externalToken[_token];\r\n        userExternalStaked[msg.sender] = userExternalStaked[msg.sender].add(\r\n            token.rate\r\n        );\r\n\r\n        userInfo[msg.sender][_token].staked = userInfo[msg.sender][_token]\r\n            .staked\r\n            .add(1);\r\n        userInfo[msg.sender][_token].stakedTime = block.timestamp;\r\n\r\n        emit StakedSingleERC721(msg.sender, _token, _tokenId);\r\n    }\r\n\r\n    function depositBatchERC721(address _token, uint128[] memory _tokenIds)\r\n        external\r\n        nonReentrant()\r\n    {\r\n        require(\r\n            externalToken[_token].canStake == true,\r\n            \"TIER::TOKEN_NOT_ACCEPTED\"\r\n        );\r\n        _batchSafeTransferFrom(_token, msg.sender, address(this), _tokenIds);\r\n\r\n        uint256 amount = _tokenIds.length;\r\n        ExternalToken storage token = externalToken[_token];\r\n        userExternalStaked[msg.sender] = userExternalStaked[msg.sender].add(\r\n            amount.mul(token.rate)\r\n        );\r\n\r\n        userInfo[msg.sender][_token].staked = userInfo[msg.sender][_token]\r\n            .staked\r\n            .add(amount);\r\n        userInfo[msg.sender][_token].stakedTime = block.timestamp;\r\n\r\n        emit StakedBatchERC721(msg.sender, _token, _tokenIds);\r\n    }\r\n\r\n    function withdrawERC20(address _token, uint256 _amount)\r\n        external\r\n        nonReentrant()\r\n    {\r\n        UserInfo storage user = userInfo[msg.sender][_token];\r\n        require(user.staked >= _amount, \"not enough amount to withdraw\");\r\n\r\n        if (_token != PKF) {\r\n            ExternalToken storage token = externalToken[_token];\r\n            userExternalStaked[msg.sender] = userExternalStaked[msg.sender].sub(\r\n                _amount.mul(token.rate).div(10**token.decimals)\r\n            );\r\n        }\r\n\r\n        uint256 toPunish = calculateWithdrawFee(msg.sender, _token, _amount);\r\n        if (toPunish > 0) {\r\n            IERC20(_token).transfer(penaltyWallet, toPunish);\r\n        }\r\n\r\n        user.staked = user.staked.sub(_amount);\r\n\r\n        IERC20(_token).transfer(msg.sender, _amount.sub(toPunish));\r\n        emit WithdrawnERC20(\r\n            msg.sender,\r\n            _token,\r\n            _amount,\r\n            toPunish,\r\n            user.stakedTime\r\n        );\r\n    }\r\n\r\n    function withdrawSingleERC721(address _token, uint128 _tokenId)\r\n        external\r\n        nonReentrant()\r\n    {\r\n        UserInfo storage user = userInfo[msg.sender][_token];\r\n        require(user.staked >= 1, \"not enough amount to withdraw\");\r\n\r\n        user.staked = user.staked.sub(1);\r\n\r\n        ExternalToken storage token = externalToken[_token];\r\n        userExternalStaked[msg.sender] = userExternalStaked[msg.sender].sub(\r\n            token.rate\r\n        );\r\n\r\n        IERC721(_token).safeTransferFrom(address(this), msg.sender, _tokenId);\r\n        emit WithdrawnSingleERC721(\r\n            msg.sender,\r\n            _token,\r\n            _tokenId,\r\n            user.stakedTime\r\n        );\r\n    }\r\n\r\n    function withdrawBatchERC721(address _token, uint128[] memory _tokenIds)\r\n        external\r\n        nonReentrant()\r\n    {\r\n        UserInfo storage user = userInfo[msg.sender][_token];\r\n        uint256 amount = _tokenIds.length;\r\n        require(user.staked >= amount, \"not enough amount to withdraw\");\r\n\r\n        user.staked = user.staked.sub(amount);\r\n\r\n        ExternalToken storage token = externalToken[_token];\r\n        userExternalStaked[msg.sender] = userExternalStaked[msg.sender].sub(\r\n            amount.mul(token.rate)\r\n        );\r\n\r\n        _batchSafeTransferFrom(_token, address(this), msg.sender, _tokenIds);\r\n        emit WithdrawnBatchERC721(\r\n            msg.sender,\r\n            _token,\r\n            _tokenIds,\r\n            user.stakedTime\r\n        );\r\n    }\r\n\r\n    function setPenaltyWallet(address _penaltyWallet) external onlyOwner {\r\n        require(\r\n            penaltyWallet != _penaltyWallet,\r\n            \"TIER::ALREADY_PENALTY_WALLET\"\r\n        );\r\n        penaltyWallet = _penaltyWallet;\r\n\r\n        emit ChangePenaltyWallet(_penaltyWallet);\r\n    }\r\n\r\n    function updateEmergencyWithdrawStatus(bool _status) external onlyOwner {\r\n        canEmergencyWithdraw = _status;\r\n    }\r\n\r\n    function emergencyWithdrawERC20(address _token) external {\r\n        require(canEmergencyWithdraw, \"function disabled\");\r\n        UserInfo storage user = userInfo[msg.sender][_token];\r\n        require(user.staked > 0, \"nothing to withdraw\");\r\n\r\n        uint256 _amount = user.staked;\r\n        user.staked = 0;\r\n\r\n        if (_token != PKF) {\r\n          ExternalToken storage token = externalToken[_token];\r\n          userExternalStaked[msg.sender] = userExternalStaked[msg.sender].sub(\r\n              _amount.mul(token.rate).div(10**token.decimals)\r\n          );\r\n        }\r\n\r\n        IERC20(_token).transfer(msg.sender, _amount);\r\n        emit EmergencyWithdrawnERC20(\r\n            msg.sender,\r\n            _token,\r\n            _amount,\r\n            user.stakedTime\r\n        );\r\n    }\r\n\r\n    function emergencyWithdrawERC721(address _token, uint128[] memory _tokenIds)\r\n        external\r\n    {\r\n        require(canEmergencyWithdraw, \"function disabled\");\r\n        UserInfo storage user = userInfo[msg.sender][_token];\r\n        require(user.staked > 0, \"nothing to withdraw\");\r\n\r\n        uint256 _amount = user.staked;\r\n        user.staked = 0;\r\n\r\n        ExternalToken storage token = externalToken[_token];\r\n        userExternalStaked[msg.sender] = userExternalStaked[msg.sender].sub(\r\n            _amount.mul(token.rate).div(10**token.decimals)\r\n        );\r\n\r\n        if (_amount == 1) {\r\n            IERC721(_token).safeTransferFrom(\r\n                address(this),\r\n                msg.sender,\r\n                _tokenIds[0]\r\n            );\r\n        } else {\r\n            _batchSafeTransferFrom(\r\n                _token,\r\n                address(this),\r\n                msg.sender,\r\n                _tokenIds\r\n            );\r\n        }\r\n        emit EmergencyWithdrawnERC721(\r\n            msg.sender,\r\n            _token,\r\n            _tokenIds,\r\n            user.stakedTime\r\n        );\r\n    }\r\n\r\n    function addExternalToken(\r\n        address _token,\r\n        uint256 _decimals,\r\n        uint256 _rate,\r\n        bool _isERC721,\r\n        bool _canStake\r\n    ) public onlyOwner {\r\n        ExternalToken storage token = externalToken[_token];\r\n\r\n        require(_rate > 0, \"TIER::INVALID_TOKEN_RATE\");\r\n\r\n        token.contractAddress = _token;\r\n        token.decimals = _decimals;\r\n        token.rate = _rate;\r\n        token.isERC721 = _isERC721;\r\n        token.canStake = _canStake;\r\n\r\n        emit AddExternalToken(_token, _decimals, _rate, _isERC721, _canStake);\r\n    }\r\n\r\n    function setExternalToken(\r\n        address _token,\r\n        uint256 _decimals,\r\n        uint256 _rate,\r\n        bool _canStake\r\n    ) external onlyOwner {\r\n        ExternalToken storage token = externalToken[_token];\r\n\r\n        require(token.contractAddress == _token, \"TIER::TOKEN_NOT_EXISTS\");\r\n        require(_rate > 0, \"TIER::INVALID_TOKEN_RATE\");\r\n\r\n        token.decimals = _decimals;\r\n        token.rate = _rate;\r\n        token.canStake = _canStake;\r\n\r\n        emit ExternalTokenStatsChange(_token, _decimals, _rate, _canStake);\r\n    }\r\n\r\n    function updateTier(uint8 _tierId, uint256 _amount) external onlyOwner {\r\n        require(_tierId > 0 && _tierId <= MAX_NUM_TIERS, \"invalid _tierId\");\r\n        tierPrice[_tierId] = _amount;\r\n        if (_tierId > currentMaxTier) {\r\n            currentMaxTier = _tierId;\r\n        }\r\n    }\r\n\r\n    function updateWithdrawFee(uint256 _key, uint256 _percent)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_percent < 100, \"too high percent\");\r\n        withdrawFeePercent[_key] = _percent;\r\n    }\r\n\r\n    function updatePunishTime(uint256 _key, uint256 _days) external onlyOwner {\r\n        require(_days >= 0, \"too short time\");\r\n        daysLockLevel[_key] = _days * 1 days;\r\n    }\r\n\r\n    function getUserTier(address _userAddress)\r\n        external\r\n        view\r\n        returns (uint8 res)\r\n    {\r\n        uint256 totalStaked =\r\n            userInfo[_userAddress][PKF].staked.add(\r\n                userExternalStaked[_userAddress]\r\n            );\r\n\r\n        for (uint8 i = 1; i <= MAX_NUM_TIERS; i++) {\r\n            if (tierPrice[i] == 0 || totalStaked < tierPrice[i]) {\r\n                return res;\r\n            }\r\n\r\n            res = i;\r\n        }\r\n    }\r\n\r\n    function calculateWithdrawFee(\r\n        address _userAddress,\r\n        address _token,\r\n        uint256 _amount\r\n    ) public view returns (uint256) {\r\n        UserInfo storage user = userInfo[_userAddress][_token];\r\n        require(user.staked >= _amount, \"not enough amount to withdraw\");\r\n\r\n        if (block.timestamp < user.stakedTime.add(daysLockLevel[0])) {\r\n            return _amount.mul(withdrawFeePercent[0]).div(100); //30%\r\n        }\r\n\r\n        if (block.timestamp < user.stakedTime.add(daysLockLevel[1])) {\r\n            return _amount.mul(withdrawFeePercent[1]).div(100); //25%\r\n        }\r\n\r\n        if (block.timestamp < user.stakedTime.add(daysLockLevel[2])) {\r\n            return _amount.mul(withdrawFeePercent[2]).div(100); //20%\r\n        }\r\n\r\n        if (block.timestamp < user.stakedTime.add(daysLockLevel[3])) {\r\n            return _amount.mul(withdrawFeePercent[3]).div(100); //10%\r\n        }\r\n\r\n        if (block.timestamp < user.stakedTime.add(daysLockLevel[4])) {\r\n            return _amount.mul(withdrawFeePercent[4]).div(100); //5%\r\n        }\r\n\r\n        return _amount.mul(withdrawFeePercent[5]).div(100);\r\n    }\r\n\r\n    //frontend func\r\n    function getTiers()\r\n        external\r\n        view\r\n        returns (uint256[MAX_NUM_TIERS] memory buf)\r\n    {\r\n        for (uint8 i = 1; i < MAX_NUM_TIERS; i++) {\r\n            if (tierPrice[i] == 0) {\r\n                return buf;\r\n            }\r\n            buf[i - 1] = tierPrice[i];\r\n        }\r\n\r\n        return buf;\r\n    }\r\n\r\n    function userTotalStaked(address _userAddress) external view returns (uint256) {\r\n        return\r\n            userInfo[_userAddress][PKF].staked.add(\r\n                userExternalStaked[_userAddress]\r\n            );\r\n    }\r\n\r\n    function _batchSafeTransferFrom(\r\n        address _token,\r\n        address _from,\r\n        address _recepient,\r\n        uint128[] memory _tokenIds\r\n    ) internal {\r\n        for (uint256 i = 0; i != _tokenIds.length; i++) {\r\n            IERC721(_token).safeTransferFrom(_from, _recepient, _tokenIds[i]);\r\n        }\r\n    }\r\n\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pkf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sPkf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniLp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_penaltyWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isERC721\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"name\":\"AddExternalToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"penaltyWallet\",\"type\":\"address\"}],\"name\":\"ChangePenaltyWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastStakedTime\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdrawnERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128[]\",\"name\":\"tokenIds\",\"type\":\"uint128[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastStakedTime\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdrawnERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"name\":\"ExternalTokenStatsChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128[]\",\"name\":\"tokenIds\",\"type\":\"uint128[]\"}],\"name\":\"StakedBatchERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakedERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"tokenId\",\"type\":\"uint128\"}],\"name\":\"StakedSingleERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128[]\",\"name\":\"tokenIds\",\"type\":\"uint128[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastStakedTime\",\"type\":\"uint256\"}],\"name\":\"WithdrawnBatchERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastStakedTime\",\"type\":\"uint256\"}],\"name\":\"WithdrawnERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"tokenId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastStakedTime\",\"type\":\"uint256\"}],\"name\":\"WithdrawnSingleERC721\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PKF\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isERC721\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_canStake\",\"type\":\"bool\"}],\"name\":\"addExternalToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canEmergencyWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"daysLockLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint128[]\",\"name\":\"_tokenIds\",\"type\":\"uint128[]\"}],\"name\":\"depositBatchERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_tokenId\",\"type\":\"uint128\"}],\"name\":\"depositSingleERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint128[]\",\"name\":\"_tokenIds\",\"type\":\"uint128[]\"}],\"name\":\"emergencyWithdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"externalToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isERC721\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTiers\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"buf\",\"type\":\"uint256[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserTier\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"res\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_canStake\",\"type\":\"bool\"}],\"name\":\"setExternalToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_penaltyWallet\",\"type\":\"address\"}],\"name\":\"setPenaltyWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateEmergencyWithdrawStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"updatePunishTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tierId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userExternalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"userTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint128[]\",\"name\":\"_tokenIds\",\"type\":\"uint128[]\"}],\"name\":\"withdrawBatchERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_tokenId\",\"type\":\"uint128\"}],\"name\":\"withdrawSingleERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RedKiteTiers","CompilerVersion":"v0.7.1+commit.f4a555be","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"0000000000000000000000008b39b70e39aa811b69365398e0aace9bee238aeb0000000000000000000000001dfdb0fb85402dc7f8d72d92ada8fbbb3ffc8633000000000000000000000000fe903a12359496b932e24c5e9b78f1b9060a6342000000000000000000000000d9fa0c2a3501cecc3a6af573328f2869cb3338dd","EVMVersion":"istanbul","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7c6a16484e90caa59208f520322b20c84df8037ba4bdbd1fce11734e0c5e232e"}]}