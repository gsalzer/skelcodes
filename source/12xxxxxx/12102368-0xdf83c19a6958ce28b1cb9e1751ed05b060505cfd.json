{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interface/IBuyoutProposals.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract DelegationStorage {\r\n    address public governance;\r\n    /**\r\n     * @notice Implementation address for this contract\r\n     */\r\n    address public implementation;\r\n}\r\n\r\ncontract IBuyoutProposalsStorge is DelegationStorage {\r\n    address public regulator;\r\n    address public market;\r\n\r\n    uint256 public proposolIdCount;\r\n\r\n    uint256 public voteLenth = 259200;\r\n\r\n    mapping(uint256 => uint256) public proposalIds;\r\n\r\n    mapping(uint256 => uint256[]) internal proposalsHistory;\r\n\r\n    mapping(uint256 => Proposal) public proposals;\r\n\r\n    mapping(uint256 => mapping(address => bool)) public voted;\r\n\r\n    uint256 public passNeeded = 75;\r\n\r\n    // n times higher than the market price to buyout\r\n    uint256 public buyoutTimes = 100;\r\n\r\n    uint256 internal constant max = 100;\r\n\r\n    uint256 public buyoutProportion = 15;\r\n\r\n    mapping(uint256 => uint256) allVotes;\r\n\r\n    struct Proposal {\r\n        uint256 votesReceived;\r\n        uint256 voteTotal;\r\n        bool passed;\r\n        address submitter;\r\n        uint256 voteDeadline;\r\n        uint256 shardAmount;\r\n        uint256 wantTokenAmount;\r\n        uint256 buyoutTimes;\r\n        uint256 price;\r\n        bool isSubmitterWithDraw;\r\n        uint256 shardPoolId;\r\n        bool isFailedConfirmed;\r\n        uint256 blockHeight;\r\n        uint256 createTime;\r\n    }\r\n}\r\n\r\nabstract contract IBuyoutProposals is IBuyoutProposalsStorge {\r\n    function createProposal(\r\n        uint256 _shardPoolId,\r\n        uint256 shardBalance,\r\n        uint256 wantTokenAmount,\r\n        uint256 currentPrice,\r\n        uint256 totalShardSupply,\r\n        address submitter\r\n    ) external virtual returns (uint256 proposalId, uint256 buyoutTimes);\r\n\r\n    function vote(\r\n        uint256 _shardPoolId,\r\n        bool isAgree,\r\n        address shard,\r\n        address voter\r\n    ) external virtual returns (uint256 proposalId, uint256 balance);\r\n\r\n    function voteResultConfirm(uint256 _shardPoolId)\r\n        external\r\n        virtual\r\n        returns (\r\n            uint256 proposalId,\r\n            bool result,\r\n            address submitter,\r\n            uint256 shardAmount,\r\n            uint256 wantTokenAmount\r\n        );\r\n\r\n    function exchangeForWantToken(uint256 _shardPoolId, uint256 shardAmount)\r\n        external\r\n        view\r\n        virtual\r\n        returns (uint256 wantTokenAmount);\r\n\r\n    function redeemForBuyoutFailed(uint256 _proposalId, address submitter)\r\n        external\r\n        virtual\r\n        returns (\r\n            uint256 _shardPoolId,\r\n            uint256 shardTokenAmount,\r\n            uint256 wantTokenAmount\r\n        );\r\n\r\n    function setBuyoutTimes(uint256 _buyoutTimes) external virtual;\r\n\r\n    function setVoteLenth(uint256 _voteLenth) external virtual;\r\n\r\n    function setPassNeeded(uint256 _passNeeded) external virtual;\r\n\r\n    function setBuyoutProportion(uint256 _buyoutProportion) external virtual;\r\n\r\n    function setMarket(address _market) external virtual;\r\n\r\n    function setRegulator(address _regulator) external virtual;\r\n\r\n    function getProposalsForExactPool(uint256 _shardPoolId)\r\n        external\r\n        view\r\n        virtual\r\n        returns (uint256[] memory _proposalsHistory);\r\n}\r\n\r\n// File: contracts/BuyoutProposalsDelegator.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ncontract BuyoutProposalsDelegator is IBuyoutProposals {\r\n    /**\r\n     * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\r\n     */\r\n    event NewImplementation(\r\n        address oldImplementation,\r\n        address newImplementation\r\n    );\r\n\r\n    event NewGovernance(address oldGovernance, address newGovernance);\r\n\r\n    constructor(\r\n        address _governance,\r\n        address _regulator,\r\n        address implementation_\r\n    ) public {\r\n        governance = msg.sender;\r\n        _setImplementation(implementation_);\r\n        delegateTo(\r\n            implementation_,\r\n            abi.encodeWithSignature(\r\n                \"initialize(address,address)\",\r\n                _governance,\r\n                _regulator\r\n            )\r\n        );\r\n    }\r\n\r\n    function _setImplementation(address implementation_) public {\r\n        require(\r\n            msg.sender == governance,\r\n            \"_setImplementation: Caller must be governance\"\r\n        );\r\n\r\n        address oldImplementation = implementation;\r\n        implementation = implementation_;\r\n\r\n        emit NewImplementation(oldImplementation, implementation);\r\n    }\r\n\r\n    function _setGovernance(address newGovernance) public {\r\n        require(msg.sender == governance, \"UNAUTHORIZED\");\r\n\r\n        address oldGovernance = governance;\r\n\r\n        governance = newGovernance;\r\n\r\n        emit NewGovernance(oldGovernance, newGovernance);\r\n    }\r\n\r\n    function createProposal(\r\n        uint256 _shardPoolId,\r\n        uint256 shardBalance,\r\n        uint256 wantTokenAmount,\r\n        uint256 currentPrice,\r\n        uint256 totalShardSupply,\r\n        address submitter\r\n    ) external override returns (uint256 proposalId, uint256 buyoutTimes) {\r\n        bytes memory data =\r\n            delegateToImplementation(\r\n                abi.encodeWithSignature(\r\n                    \"createProposal(uint256,uint256,uint256,uint256,uint256,address)\",\r\n                    _shardPoolId,\r\n                    shardBalance,\r\n                    wantTokenAmount,\r\n                    currentPrice,\r\n                    totalShardSupply,\r\n                    submitter\r\n                )\r\n            );\r\n        return abi.decode(data, (uint256, uint256));\r\n    }\r\n\r\n    function vote(\r\n        uint256 _shardPoolId,\r\n        bool isAgree,\r\n        address shard,\r\n        address voter\r\n    ) external override returns (uint256 proposalId, uint256 balance) {\r\n        bytes memory data =\r\n            delegateToImplementation(\r\n                abi.encodeWithSignature(\r\n                    \"vote(uint256,bool,address,address)\",\r\n                    _shardPoolId,\r\n                    isAgree,\r\n                    shard,\r\n                    voter\r\n                )\r\n            );\r\n        return abi.decode(data, (uint256, uint256));\r\n    }\r\n\r\n    function voteResultConfirm(uint256 _shardPoolId)\r\n        external\r\n        override\r\n        returns (\r\n            uint256 proposalId,\r\n            bool result,\r\n            address submitter,\r\n            uint256 shardAmount,\r\n            uint256 wantTokenAmount\r\n        )\r\n    {\r\n        bytes memory data =\r\n            delegateToImplementation(\r\n                abi.encodeWithSignature(\r\n                    \"voteResultConfirm(uint256)\",\r\n                    _shardPoolId\r\n                )\r\n            );\r\n        return abi.decode(data, (uint256, bool, address, uint256, uint256));\r\n    }\r\n\r\n    function exchangeForWantToken(uint256 _shardPoolId, uint256 shardAmount)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256 wantTokenAmount)\r\n    {\r\n        bytes memory data =\r\n            delegateToViewImplementation(\r\n                abi.encodeWithSignature(\r\n                    \"exchangeForWantToken(uint256,uint256)\",\r\n                    _shardPoolId,\r\n                    shardAmount\r\n                )\r\n            );\r\n        return abi.decode(data, (uint256));\r\n    }\r\n\r\n    function redeemForBuyoutFailed(uint256 _proposalId, address submitter)\r\n        external\r\n        override\r\n        returns (\r\n            uint256 _shardPoolId,\r\n            uint256 shardTokenAmount,\r\n            uint256 wantTokenAmount\r\n        )\r\n    {\r\n        bytes memory data =\r\n            delegateToImplementation(\r\n                abi.encodeWithSignature(\r\n                    \"redeemForBuyoutFailed(uint256,address)\",\r\n                    _proposalId,\r\n                    submitter\r\n                )\r\n            );\r\n        return abi.decode(data, (uint256, uint256, uint256));\r\n    }\r\n\r\n    function setBuyoutTimes(uint256 _buyoutTimes) external override {\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\"setBuyoutTimes(uint256)\", _buyoutTimes)\r\n        );\r\n    }\r\n\r\n    function setVoteLenth(uint256 _voteLenth) external override {\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\"setVoteLenth(uint256)\", _voteLenth)\r\n        );\r\n    }\r\n\r\n    function setPassNeeded(uint256 _passNeeded) external override {\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\"setPassNeeded(uint256)\", _passNeeded)\r\n        );\r\n    }\r\n\r\n    function setBuyoutProportion(uint256 _buyoutProportion) external override {\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\r\n                \"setBuyoutProportion(uint256)\",\r\n                _buyoutProportion\r\n            )\r\n        );\r\n    }\r\n\r\n    function setMarket(address _market) external override {\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\"setMarket(address)\", _market)\r\n        );\r\n    }\r\n\r\n    function setRegulator(address _regulator) external override {\r\n        delegateToImplementation(\r\n            abi.encodeWithSignature(\"setRegulator(address)\", _regulator)\r\n        );\r\n    }\r\n\r\n    function getProposalsForExactPool(uint256 _shardPoolId)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256[] memory _proposalsHistory)\r\n    {\r\n        bytes memory data =\r\n            delegateToViewImplementation(\r\n                abi.encodeWithSignature(\r\n                    \"getProposalsForExactPool(uint256)\",\r\n                    _shardPoolId\r\n                )\r\n            );\r\n        return abi.decode(data, (uint256[]));\r\n    }\r\n\r\n    function delegateTo(address callee, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        (bool success, bytes memory returnData) = callee.delegatecall(data);\r\n        assembly {\r\n            if eq(success, 0) {\r\n                revert(add(returnData, 0x20), returndatasize())\r\n            }\r\n        }\r\n        return returnData;\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates execution to the implementation contract\r\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\r\n     * @param data The raw data to delegatecall\r\n     * @return The returned bytes from the delegatecall\r\n     */\r\n    function delegateToImplementation(bytes memory data)\r\n        public\r\n        returns (bytes memory)\r\n    {\r\n        return delegateTo(implementation, data);\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates execution to an implementation contract\r\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\r\n     *  There are an additional 2 prefix uints from the wrapper returndata, which we ignore since we make an extra hop.\r\n     * @param data The raw data to delegatecall\r\n     * @return The returned bytes from the delegatecall\r\n     */\r\n    function delegateToViewImplementation(bytes memory data)\r\n        public\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        (bool success, bytes memory returnData) =\r\n            address(this).staticcall(\r\n                abi.encodeWithSignature(\"delegateToImplementation(bytes)\", data)\r\n            );\r\n        assembly {\r\n            if eq(success, 0) {\r\n                revert(add(returnData, 0x20), returndatasize())\r\n            }\r\n        }\r\n        return abi.decode(returnData, (bytes));\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * @notice Delegates execution to an implementation contract\r\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\r\n    //  */\r\n    fallback() external payable {\r\n        // delegate all other functions to current implementation\r\n        (bool success, ) = implementation.delegatecall(msg.data);\r\n        assembly {\r\n            let free_mem_ptr := mload(0x40)\r\n            returndatacopy(free_mem_ptr, 0, returndatasize())\r\n            switch success\r\n                case 0 {\r\n                    revert(free_mem_ptr, returndatasize())\r\n                }\r\n                default {\r\n                    return(free_mem_ptr, returndatasize())\r\n                }\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_regulator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGovernance\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"NewGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"NewImplementation\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"_setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"name\":\"_setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyoutProportion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyoutTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shardPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shardBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShardSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"}],\"name\":\"createProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyoutTimes\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"delegateToImplementation\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"delegateToViewImplementation\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shardPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shardAmount\",\"type\":\"uint256\"}],\"name\":\"exchangeForWantToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wantTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shardPoolId\",\"type\":\"uint256\"}],\"name\":\"getProposalsForExactPool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_proposalsHistory\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"passNeeded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"votesReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteTotal\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"voteDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyoutTimes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSubmitterWithDraw\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"shardPoolId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFailedConfirmed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposolIdCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"}],\"name\":\"redeemForBuyoutFailed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_shardPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shardTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"regulator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyoutProportion\",\"type\":\"uint256\"}],\"name\":\"setBuyoutProportion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyoutTimes\",\"type\":\"uint256\"}],\"name\":\"setBuyoutTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"}],\"name\":\"setMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_passNeeded\",\"type\":\"uint256\"}],\"name\":\"setPassNeeded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_regulator\",\"type\":\"address\"}],\"name\":\"setRegulator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteLenth\",\"type\":\"uint256\"}],\"name\":\"setVoteLenth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shardPoolId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAgree\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"shard\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteLenth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shardPoolId\",\"type\":\"uint256\"}],\"name\":\"voteResultConfirm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BuyoutProposalsDelegator","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009522368481c84250fd4b2a4ea03fb875024d9956000000000000000000000000dddf6b2c719d04f5f87230dd02c12ea062799b2900000000000000000000000001da4a4a0ed7757e95848112dbb9f005b55653f2","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"1","Implementation":"0x01da4a4a0ed7757e95848112dbb9f005b55653f2","SwarmSource":"ipfs://d2c2e44b044557150a84d66125ddf1749ba0b409191b5f0e1c9aa5c924dc09e2"}]}