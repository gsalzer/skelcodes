{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n// a library for performing overflow-safe math, updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math)\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a + b) >= b, \"SafeMath: Add Overflow\");}\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a - b) <= a, \"SafeMath: Underflow\");}\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {require(b == 0 || (c = a * b)/b == a, \"SafeMath: Mul Overflow\");}\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // EIP 2612\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\ninterface IMasterChef {\r\n    struct UserInfo {\r\n        uint256 amount;     // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n    }\r\n\r\n    struct PoolInfo {\r\n        IERC20 lpToken;           // Address of LP token contract.\r\n        uint256 allocPoint;       // How many allocation points assigned to this pool. SUSHI to distribute per block.\r\n        uint256 lastRewardBlock;  // Last block number that SUSHI distribution occurs.\r\n        uint256 accSushiPerShare; // Accumulated SUSHI per share, times 1e12. See below.\r\n    }\r\n    \r\n    function userInfo(uint256 pid, address account) external view returns (uint256, uint256);\r\n    function poolInfo(uint256 pid) external view returns (IMasterChef.PoolInfo memory);\r\n    function totalAllocPoint() external view returns (uint256);\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n}\r\n\r\ninterface IBentoBoxV1 {\r\n    function balanceOf(IERC20, address) external view returns (uint256);\r\n\r\n    function deposit(\r\n        IERC20 token_,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 share\r\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\r\n\r\n    function withdraw(\r\n        IERC20 token_,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 share\r\n    ) external returns (uint256 amountOut, uint256 shareOut);\r\n\r\n    function transfer(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 share\r\n    ) external;\r\n\r\n    function transferMultiple(\r\n        IERC20 token,\r\n        address from,\r\n        address[] calldata tos,\r\n        uint256[] calldata shares\r\n    ) external;\r\n\r\n    function toShare(\r\n        IERC20 token,\r\n        uint256 amount,\r\n        bool roundUp\r\n    ) external view returns (uint256 share);\r\n\r\n    function toAmount(\r\n        IERC20 token,\r\n        uint256 share,\r\n        bool roundUp\r\n    ) external view returns (uint256 amount);\r\n\r\n    function registerProtocol() external;\r\n}\r\n\r\ninterface ICreamRate {\r\n    function exchangeRateStored() external view returns (uint256);\r\n}\r\n\r\ncontract SUSHIPOWAH {\r\n    using SafeMath for uint256;\r\n\r\n    IMasterChef chef = IMasterChef(0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd);\r\n    IERC20 pair = IERC20(0x795065dCc9f64b5614C407a6EFDC400DA6221FB0);\r\n    IERC20 bar = IERC20(0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272);\r\n    IERC20 sushi = IERC20(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2);\r\n    IERC20 axSushi = IERC20(0xF256CC7847E919FAc9B808cC216cAc87CCF2f47a);\r\n    IBentoBoxV1 bento = IBentoBoxV1(0xF5BCE5077908a1b7370B9ae04AdC565EBd643966);\r\n    address crxSushi = 0x228619CCa194Fbe3Ebeb2f835eC1eA5080DaFbb2; \r\n\r\n    function name() external pure returns(string memory) { return \"SUSHIPOWAH\"; }\r\n    function symbol() external pure returns(string memory) { return \"SUSHIPOWAH\"; }\r\n    function decimals() external pure returns(uint8) { return 18; }\r\n    function allowance(address, address) external pure returns (uint256) { return 0; }\r\n    function approve(address, uint256) external pure returns (bool) { return false; }\r\n    function transfer(address, uint256) external pure returns (bool) { return false; }\r\n    function transferFrom(address, address, uint256) external pure returns (bool) { return false; }\r\n\r\n    /// @notice Returns the collective SUSHI balance for a given `account` staked among protocols with adjustments for boosts.\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        uint256 lp_totalSushi = sushi.balanceOf(address(pair));\r\n        uint256 lp_total = pair.totalSupply();\r\n        (uint256 lp_stakedBalance, ) = chef.userInfo(12, account);\r\n        uint256 lp_balance = pair.balanceOf(account).add(lp_stakedBalance);\r\n        uint256 lp_powah = lp_totalSushi.mul(lp_balance) / lp_total.mul(2); // calculate voting weight adjusted for LP staking\r\n        uint256 collective_xsushi_balance = collectBalances(account); // calculate xSushi staking balances\r\n        uint256 xsushi_powah = sushi.balanceOf(address(bar)).mul(collective_xsushi_balance) / bar.totalSupply(); // calculate xSushi voting weight\r\n        return lp_powah.add(xsushi_powah); // combine xSushi weight with adjusted LP voting weight for 'powah'\r\n    }\r\n\r\n    /// @dev Internal function to avoid stack 'too deep' errors on calculating {balanceOf}.\r\n    function collectBalances(address account) private view returns (uint256 collective_xsushi_balance) {\r\n        uint256 xsushi_balance = bar.balanceOf(account);\r\n        uint256 axsushi_balance = axSushi.balanceOf(account);\r\n        uint256 bento_balance = bento.toAmount(bar, bento.balanceOf(bar, account), false);\r\n        uint256 crxsushi_balance = IERC20(crxSushi).balanceOf(account).mul(ICreamRate(crxSushi).exchangeRateStored()) / 10**18; // calculate underlying xSushi claim\r\n        collective_xsushi_balance = xsushi_balance.add(axsushi_balance).add(bento_balance).add(crxsushi_balance);\r\n    }\r\n\r\n    /// @notice Returns the adjusted total 'powah' supply for LP & xSushi staking.\r\n    function totalSupply() external view returns (uint256) {\r\n        uint256 lp_totalSushi = sushi.balanceOf(address(pair));\r\n        uint256 xsushi_totalSushi = sushi.balanceOf(address(bar));\r\n        return lp_totalSushi.mul(2).add(xsushi_totalSushi);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"SUSHIPOWAH","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://64148107309acb61b854188bace201acbf2703eb7af6f3ac94245f88216585ac"}]}