{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.5.5;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    constructor () internal { }\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract WhitelistAdminRole is Context {\r\n    using Roles for Roles.Role;\r\n    event WhitelistAdminAdded(address indexed account);\r\n    event WhitelistAdminRemoved(address indexed account);\r\n    Roles.Role private _whitelistAdmins;\r\n    constructor () internal {\r\n        _addWhitelistAdmin(_msgSender());\r\n    }\r\n    modifier onlyWhitelistAdmin() {\r\n        require(isWhitelistAdmin(_msgSender()), \"WhitelistAdminRole: caller does not have the WhitelistAdmin role\");\r\n        _;\r\n    }\r\n    function isWhitelistAdmin(address account) public view returns (bool) {\r\n        return _whitelistAdmins.has(account);\r\n    }\r\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\r\n        _addWhitelistAdmin(account);\r\n    }\r\n    function renounceWhitelistAdmin() public {\r\n        _removeWhitelistAdmin(_msgSender());\r\n    }\r\n    function _addWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.add(account);\r\n        emit WhitelistAdminAdded(account);\r\n    }\r\n    function _removeWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n}\r\n\r\ncontract WhitelistedRole is Context, WhitelistAdminRole {\r\n    using Roles for Roles.Role;\r\n    event WhitelistedAdded(address indexed account);\r\n    event WhitelistedRemoved(address indexed account);\r\n    Roles.Role private _whitelisteds;\r\n    modifier onlyWhitelisted() {\r\n        require(isWhitelisted(_msgSender()), \"WhitelistedRole: caller does not have the Whitelisted role\");\r\n        _;\r\n    }\r\n    function isWhitelisted(address account) public view returns (bool) {\r\n        return _whitelisteds.has(account);\r\n    }\r\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\r\n        _addWhitelisted(account);\r\n    }\r\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\r\n        _removeWhitelisted(account);\r\n    }\r\n    function renounceWhitelisted() public {\r\n        _removeWhitelisted(_msgSender());\r\n    }\r\n    function _addWhitelisted(address account) internal {\r\n        _whitelisteds.add(account);\r\n        emit WhitelistedAdded(account);\r\n    }\r\n    function _removeWhitelisted(address account) internal {\r\n        _whitelisteds.remove(account);\r\n        emit WhitelistedRemoved(account);\r\n    }\r\n}\r\n\r\ncontract AccessWhitelist is WhitelistedRole {\r\n    constructor() public {\r\n        super.addWhitelisted(msg.sender);\r\n    }\r\n}\r\n\r\ncontract AccessControls {\r\n    AccessWhitelist public accessWhitelist;\r\n    constructor(AccessWhitelist _accessWhitelist) internal {\r\n        accessWhitelist = _accessWhitelist;\r\n    }\r\n    modifier onlyWhitelisted() {\r\n        require(accessWhitelist.isWhitelisted(msg.sender), \"Caller not whitelisted\");\r\n        _;\r\n    }\r\n    modifier onlyWhitelistAdmin() {\r\n        require(accessWhitelist.isWhitelistAdmin(msg.sender), \"Caller not whitelist admin\");\r\n        _;\r\n    }\r\n    function updateAccessWhitelist(AccessWhitelist _accessWhitelist) external onlyWhitelistAdmin {\r\n        accessWhitelist = _accessWhitelist;\r\n    }\r\n}\r\n\r\ncontract SuperTokenMultiSender is AccessControls {\r\n    using SafeMath for uint256;\r\n    event Transfer(address indexed _token, address indexed _caller, uint256 _recipientCount, uint256 _totalTokensSent);\r\n    event PricePerTxChanged(address indexed _caller, uint256 _oldPrice, uint256 _newPrice);\r\n    event ReferralPerTxChanged(address indexed _caller, uint256 _oldPrice, uint256 _newPrice);\r\n    event EtherMoved(address indexed _caller, address indexed _to, uint256 _amount);\r\n    event TokensMoved(address indexed _caller, address indexed _to, uint256 _amount);\r\n    event CreditsAdded(address indexed _caller, address indexed _to, uint256 _amount);\r\n    event CreditsRemoved(address indexed _caller, address indexed _to, uint256 _amount);\r\n    mapping(address => uint256) public credits;\r\n    uint256 public pricePerTx = 0.02 ether;\r\n    uint256 public referralPerTx = 0.01 ether;\r\n    address payable public feeSplitter;\r\n    constructor(AccessWhitelist _accessWhitelist, address payable _feeSplitter)\r\n        AccessControls(_accessWhitelist) public {\r\n        feeSplitter = _feeSplitter;\r\n    }\r\n    function () external payable {}\r\n    function transfer(address _token, address payable _referral, address[] calldata _addresses, uint256[] calldata _values) payable external returns (bool) {\r\n        require(_addresses.length == _values.length, \"Address array and values array must be same length\");\r\n        require(credits[msg.sender] > 0 || msg.value >= pricePerTx, \"Must have credit or min value\");\r\n        uint256 totalTokensSent;\r\n        for (uint i = 0; i < _addresses.length; i += 1) {\r\n            require(_addresses[i] != address(0), \"Address invalid\");\r\n            require(_values[i] > 0, \"Value invalid\");\r\n            IERC20(_token).transferFrom(msg.sender, _addresses[i], _values[i]);\r\n            totalTokensSent = totalTokensSent.add(_values[i]);\r\n        }\r\n        if (msg.value == 0 && credits[msg.sender] > 0) {\r\n            credits[msg.sender] = credits[msg.sender].sub(1);\r\n        } else {\r\n            uint256 fee = msg.value;\r\n            if (_referral != address(0)) {\r\n                fee = fee.sub(referralPerTx);\r\n                (bool feeSplitterSuccess,) = _referral.call.value(referralPerTx)(\"\");\r\n                require(feeSplitterSuccess, \"Failed to transfer the referral\");\r\n            }\r\n            (bool feeSplitterSuccess,) = address(feeSplitter).call.value(fee)(\"\");\r\n            require(feeSplitterSuccess, \"Failed to transfer to the fee splitter\");\r\n        }\r\n        emit Transfer(_token, msg.sender, _addresses.length, totalTokensSent);\r\n        return true;\r\n    }\r\n    function moveEther(address payable _account) onlyWhitelistAdmin external returns (bool)  {\r\n        uint256 contractBalance = address(this).balance;\r\n        _account.transfer(contractBalance);\r\n        emit EtherMoved(msg.sender, _account, contractBalance);\r\n        return true;\r\n    }\r\n    function moveTokens(address _token, address _account) external onlyWhitelistAdmin returns (bool) {\r\n        uint256 contractTokenBalance = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).transfer(_account, contractTokenBalance);\r\n        emit TokensMoved(msg.sender, _account, contractTokenBalance);\r\n        return true;\r\n    }\r\n    function addCredit(address _to, uint256 _amount) external onlyWhitelisted returns (bool) {\r\n        credits[_to] = credits[_to].add(_amount);\r\n        emit CreditsAdded(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n    function reduceCredit(address _to, uint256 _amount) external onlyWhitelisted returns (bool) {\r\n        credits[_to] = credits[_to].sub(_amount);\r\n        emit CreditsRemoved(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n    function setPricePerTx(uint256 _pricePerTx) external onlyWhitelisted returns (bool) {\r\n        uint256 oldPrice = pricePerTx;\r\n        pricePerTx = _pricePerTx;\r\n        emit PricePerTxChanged(msg.sender, oldPrice, pricePerTx);\r\n        return true;\r\n    }\r\n    function setReferralPerTx(uint256 _referralPerTx) external onlyWhitelisted returns (bool) {\r\n        uint256 oldPrice = referralPerTx;\r\n        referralPerTx = _referralPerTx;\r\n        emit ReferralPerTxChanged(msg.sender, oldPrice, referralPerTx);\r\n        return true;\r\n    }\r\n    function creditsOfOwner(address _owner) external view returns (uint256) {\r\n        return credits[_owner];\r\n    }\r\n    function updateFeeSplitter(address payable _feeSplitter) external onlyWhitelistAdmin {\r\n        feeSplitter = _feeSplitter;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract AccessWhitelist\",\"name\":\"_accessWhitelist\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_feeSplitter\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CreditsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CreditsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EtherMoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"PricePerTxChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"ReferralPerTxChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensMoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_recipientCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalTokensSent\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessWhitelist\",\"outputs\":[{\"internalType\":\"contract AccessWhitelist\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addCredit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"credits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"creditsOfOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeSplitter\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"moveEther\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"moveTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pricePerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"reduceCredit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralPerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pricePerTx\",\"type\":\"uint256\"}],\"name\":\"setPricePerTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referralPerTx\",\"type\":\"uint256\"}],\"name\":\"setReferralPerTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract AccessWhitelist\",\"name\":\"_accessWhitelist\",\"type\":\"address\"}],\"name\":\"updateAccessWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeSplitter\",\"type\":\"address\"}],\"name\":\"updateFeeSplitter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SuperTokenMultiSender","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000060c7a3b03c67cf3436d71e9fb19e9caee50d57b900000000000000000000000060c7a3b03c67cf3436d71e9fb19e9caee50d57b9","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ad90821b5ba63a53db5263d46f85d6fd1ed46336bf1517cd5b16e2676d888253"}]}