{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.7;\r\n\r\ncontract GebMath {\r\n    uint256 public constant RAY = 10 ** 27;\r\n    uint256 public constant WAD = 10 ** 18;\r\n\r\n    function ray(uint x) public pure returns (uint z) {\r\n        z = multiply(x, 10 ** 9);\r\n    }\r\n    function rad(uint x) public pure returns (uint z) {\r\n        z = multiply(x, 10 ** 27);\r\n    }\r\n    function minimum(uint x, uint y) public pure returns (uint z) {\r\n        z = (x <= y) ? x : y;\r\n    }\r\n    function addition(uint x, uint y) public pure returns (uint z) {\r\n        z = x + y;\r\n        require(z >= x, \"uint-uint-add-overflow\");\r\n    }\r\n    function subtract(uint x, uint y) public pure returns (uint z) {\r\n        z = x - y;\r\n        require(z <= x, \"uint-uint-sub-underflow\");\r\n    }\r\n    function multiply(uint x, uint y) public pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"uint-uint-mul-overflow\");\r\n    }\r\n    function rmultiply(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, y) / RAY;\r\n    }\r\n    function rdivide(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, RAY) / y;\r\n    }\r\n    function wdivide(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, WAD) / y;\r\n    }\r\n    function wmultiply(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, y) / WAD;\r\n    }\r\n    function rpower(uint x, uint n, uint base) public pure returns (uint z) {\r\n        assembly {\r\n            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\r\n            default {\r\n                switch mod(n, 2) case 0 { z := base } default { z := x }\r\n                let half := div(base, 2)  // for rounding.\r\n                for { n := div(n, 2) } n { n := div(n,2) } {\r\n                    let xx := mul(x, x)\r\n                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\r\n                    let xxRound := add(xx, half)\r\n                    if lt(xxRound, xx) { revert(0,0) }\r\n                    x := div(xxRound, base)\r\n                    if mod(n,2) {\r\n                        let zx := mul(z, x)\r\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\r\n                        let zxRound := add(zx, half)\r\n                        if lt(zxRound, zx) { revert(0,0) }\r\n                        z := div(zxRound, base)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract StabilityFeeTreasuryLike {\r\n    function getAllowance(address) virtual external view returns (uint, uint);\r\n    function systemCoin() virtual external view returns (address);\r\n    function pullFunds(address, address, uint) virtual external;\r\n}\r\n\r\ncontract IncreasingTreasuryReimbursement is GebMath {\r\n    // --- Auth ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) virtual external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) virtual external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"IncreasingTreasuryReimbursement/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Variables ---\r\n    // Starting reward for the fee receiver/keeper\r\n    uint256 public baseUpdateCallerReward;          // [wad]\r\n    // Max possible reward for the fee receiver/keeper\r\n    uint256 public maxUpdateCallerReward;           // [wad]\r\n    // Max delay taken into consideration when calculating the adjusted reward\r\n    uint256 public maxRewardIncreaseDelay;          // [seconds]\r\n    // Rate applied to baseUpdateCallerReward every extra second passed beyond a certain point (e.g next time when a specific function needs to be called)\r\n    uint256 public perSecondCallerRewardIncrease;   // [ray]\r\n\r\n    // SF treasury\r\n    StabilityFeeTreasuryLike  public treasury;\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n    event ModifyParameters(\r\n      bytes32 parameter,\r\n      address addr\r\n    );\r\n    event ModifyParameters(\r\n      bytes32 parameter,\r\n      uint256 val\r\n    );\r\n    event FailRewardCaller(bytes revertReason, address feeReceiver, uint256 amount);\r\n\r\n    constructor(\r\n      address treasury_,\r\n      uint256 baseUpdateCallerReward_,\r\n      uint256 maxUpdateCallerReward_,\r\n      uint256 perSecondCallerRewardIncrease_\r\n    ) public {\r\n        if (address(treasury_) != address(0)) {\r\n          require(StabilityFeeTreasuryLike(treasury_).systemCoin() != address(0), \"IncreasingTreasuryReimbursement/treasury-coin-not-set\");\r\n        }\r\n        require(maxUpdateCallerReward_ >= baseUpdateCallerReward_, \"IncreasingTreasuryReimbursement/invalid-max-caller-reward\");\r\n        require(perSecondCallerRewardIncrease_ >= RAY, \"IncreasingTreasuryReimbursement/invalid-per-second-reward-increase\");\r\n        authorizedAccounts[msg.sender] = 1;\r\n\r\n        treasury                        = StabilityFeeTreasuryLike(treasury_);\r\n        baseUpdateCallerReward          = baseUpdateCallerReward_;\r\n        maxUpdateCallerReward           = maxUpdateCallerReward_;\r\n        perSecondCallerRewardIncrease   = perSecondCallerRewardIncrease_;\r\n        maxRewardIncreaseDelay          = uint(-1);\r\n\r\n        emit AddAuthorization(msg.sender);\r\n        emit ModifyParameters(\"treasury\", treasury_);\r\n        emit ModifyParameters(\"baseUpdateCallerReward\", baseUpdateCallerReward);\r\n        emit ModifyParameters(\"maxUpdateCallerReward\", maxUpdateCallerReward);\r\n        emit ModifyParameters(\"perSecondCallerRewardIncrease\", perSecondCallerRewardIncrease);\r\n    }\r\n\r\n    // --- Boolean Logic ---\r\n    function either(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := or(x, y)}\r\n    }\r\n\r\n    // --- Treasury ---\r\n    /**\r\n    * @notice This returns the stability fee treasury allowance for this contract by taking the minimum between the per block and the total allowances\r\n    **/\r\n    function treasuryAllowance() public view returns (uint256) {\r\n        (uint total, uint perBlock) = treasury.getAllowance(address(this));\r\n        return minimum(total, perBlock);\r\n    }\r\n    /*\r\n    * @notice Get the SF reward that can be sent to a function caller right now\r\n    * @param timeOfLastUpdate The last time when the function that the treasury pays for has been updated\r\n    * @param defaultDelayBetweenCalls Enforced delay between calls to the function for which the treasury reimburses callers\r\n    */\r\n    function getCallerReward(uint256 timeOfLastUpdate, uint256 defaultDelayBetweenCalls) public view returns (uint256) {\r\n        // If the rewards are null or if the time of the last update is in the future or present, return 0\r\n        bool nullRewards = (baseUpdateCallerReward == 0 && maxUpdateCallerReward == 0);\r\n        if (either(timeOfLastUpdate >= now, nullRewards)) return 0;\r\n\r\n        // If the time elapsed is smaller than defaultDelayBetweenCalls or if the base reward is zero, return 0\r\n        uint256 timeElapsed = (timeOfLastUpdate == 0) ? defaultDelayBetweenCalls : subtract(now, timeOfLastUpdate);\r\n        if (either(timeElapsed < defaultDelayBetweenCalls, baseUpdateCallerReward == 0)) {\r\n            return 0;\r\n        }\r\n\r\n        // If too much time elapsed, return the max reward\r\n        uint256 adjustedTime      = subtract(timeElapsed, defaultDelayBetweenCalls);\r\n        uint256 maxPossibleReward = minimum(maxUpdateCallerReward, treasuryAllowance() / RAY);\r\n        if (adjustedTime > maxRewardIncreaseDelay) {\r\n            return maxPossibleReward;\r\n        }\r\n\r\n        // Calculate the reward\r\n        uint256 calculatedReward = baseUpdateCallerReward;\r\n        if (adjustedTime > 0) {\r\n            calculatedReward = rmultiply(rpower(perSecondCallerRewardIncrease, adjustedTime, RAY), calculatedReward);\r\n        }\r\n\r\n        // If the reward is higher than max, set it to max\r\n        if (calculatedReward > maxPossibleReward) {\r\n            calculatedReward = maxPossibleReward;\r\n        }\r\n        return calculatedReward;\r\n    }\r\n    /**\r\n    * @notice Send a stability fee reward to an address\r\n    * @param proposedFeeReceiver The SF receiver\r\n    * @param reward The system coin amount to send\r\n    **/\r\n    function rewardCaller(address proposedFeeReceiver, uint256 reward) internal {\r\n        // If the receiver is the treasury itself or if the treasury is null or if the reward is zero, return\r\n        if (address(treasury) == proposedFeeReceiver) return;\r\n        if (either(address(treasury) == address(0), reward == 0)) return;\r\n\r\n        // Determine the actual receiver and send funds\r\n        address finalFeeReceiver = (proposedFeeReceiver == address(0)) ? msg.sender : proposedFeeReceiver;\r\n        try treasury.pullFunds(finalFeeReceiver, treasury.systemCoin(), reward) {}\r\n        catch(bytes memory revertReason) {\r\n            emit FailRewardCaller(revertReason, finalFeeReceiver, reward);\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract OracleLike {\r\n    function getResultWithValidity() virtual external view returns (uint256, bool);\r\n}\r\nabstract contract AccountingEngineLike {\r\n    function modifyParameters(bytes32, uint256) virtual external;\r\n}\r\n\r\ncontract DebtAuctionInitialParameterSetter is IncreasingTreasuryReimbursement {\r\n    // --- Variables ---\r\n    // Delay between updates after which the reward starts to increase\r\n    uint256 public updateDelay;\r\n    // Last timestamp when the median was updated\r\n    uint256 public lastUpdateTime;                                              // [unix timestamp]\r\n    // Min amount of protocol tokens that should be offered in the auction\r\n    uint256 public minProtocolTokenAmountOffered;                               // [wad]\r\n    // Premium subtracted from the new amount of protocol tokens to be offered\r\n    uint256 public protocolTokenPremium;                                        // [thousand]\r\n    // Value of the initial debt bid\r\n    uint256 public bidTargetValue;                                              // [wad]\r\n\r\n    // The protocol token oracle\r\n    OracleLike           public protocolTokenOrcl;\r\n    // The system coin oracle\r\n    OracleLike           public systemCoinOrcl;\r\n    // The accounting engine contract\r\n    AccountingEngineLike public accountingEngine;\r\n\r\n    // --- Events ---\r\n    event SetDebtAuctionInitialParameters(uint256 debtAuctionBidSize, uint256 initialDebtAuctionMintedTokens);\r\n\r\n    constructor(\r\n      address protocolTokenOrcl_,\r\n      address systemCoinOrcl_,\r\n      address accountingEngine_,\r\n      address treasury_,\r\n      uint256 updateDelay_,\r\n      uint256 baseUpdateCallerReward_,\r\n      uint256 maxUpdateCallerReward_,\r\n      uint256 perSecondCallerRewardIncrease_,\r\n      uint256 minProtocolTokenAmountOffered_,\r\n      uint256 protocolTokenPremium_,\r\n      uint256 bidTargetValue_\r\n    ) public IncreasingTreasuryReimbursement(treasury_, baseUpdateCallerReward_, maxUpdateCallerReward_, perSecondCallerRewardIncrease_) {\r\n        require(minProtocolTokenAmountOffered_ > 0, \"DebtAuctionInitialParameterSetter/null-min-prot-amt\");\r\n        require(protocolTokenPremium_ < THOUSAND, \"DebtAuctionInitialParameterSetter/invalid-prot-token-premium\");\r\n        require(both(both(protocolTokenOrcl_ != address(0), systemCoinOrcl_ != address(0)), accountingEngine_ != address(0)), \"DebtAuctionInitialParameterSetter/invalid-contract-address\");\r\n        require(updateDelay_ > 0, \"DebtAuctionInitialParameterSetter/null-update-delay\");\r\n        require(bidTargetValue_ > 0, \"DebtAuctionInitialParameterSetter/invalid-bid-target-value\");\r\n\r\n        protocolTokenOrcl              = OracleLike(protocolTokenOrcl_);\r\n        systemCoinOrcl                 = OracleLike(systemCoinOrcl_);\r\n        accountingEngine               = AccountingEngineLike(accountingEngine_);\r\n\r\n        minProtocolTokenAmountOffered  = minProtocolTokenAmountOffered_;\r\n        protocolTokenPremium           = protocolTokenPremium_;\r\n        updateDelay                    = updateDelay_;\r\n        bidTargetValue                 = bidTargetValue_;\r\n\r\n        emit ModifyParameters(bytes32(\"protocolTokenOrcl\"), protocolTokenOrcl_);\r\n        emit ModifyParameters(bytes32(\"systemCoinOrcl\"), systemCoinOrcl_);\r\n        emit ModifyParameters(bytes32(\"accountingEngine\"), accountingEngine_);\r\n        emit ModifyParameters(bytes32(\"bidTargetValue\"), bidTargetValue);\r\n        emit ModifyParameters(bytes32(\"minProtocolTokenAmountOffered\"), minProtocolTokenAmountOffered);\r\n        emit ModifyParameters(bytes32(\"protocolTokenPremium\"), protocolTokenPremium);\r\n        emit ModifyParameters(bytes32(\"updateDelay\"), updateDelay);\r\n    }\r\n\r\n    // --- Boolean Logic ---\r\n    function both(bool x, bool y) internal pure returns (bool z) {\r\n      assembly{ z := and(x, y)}\r\n    }\r\n\r\n    // --- Math ---\r\n    uint internal constant THOUSAND = 10 ** 3;\r\n    function divide(uint x, uint y) internal pure returns (uint z) {\r\n        require(y > 0, \"divide-null-y\");\r\n        z = x / y;\r\n        require(z <= x);\r\n    }\r\n\r\n    // --- Administration ---\r\n    /*\r\n    * @notice Modify the address of a contract integrated with this setter\r\n    * @param parameter Name of the contract to set a new address for\r\n    * @param addr The new address\r\n    */\r\n    function modifyParameters(bytes32 parameter, address addr) external isAuthorized {\r\n        require(addr != address(0), \"DebtAuctionInitialParameterSetter/null-addr\");\r\n        if (parameter == \"protocolTokenOrcl\") protocolTokenOrcl = OracleLike(addr);\r\n        else if (parameter == \"systemCoinOrcl\") systemCoinOrcl = OracleLike(addr);\r\n        else if (parameter == \"accountingEngine\") accountingEngine = AccountingEngineLike(addr);\r\n        else if (parameter == \"treasury\") {\r\n          require(StabilityFeeTreasuryLike(addr).systemCoin() != address(0), \"DebtAuctionInitialParameterSetter/treasury-coin-not-set\");\r\n      \t  treasury = StabilityFeeTreasuryLike(addr);\r\n        }\r\n        else revert(\"DebtAuctionInitialParameterSetter/modify-unrecognized-param\");\r\n        emit ModifyParameters(parameter, addr);\r\n    }\r\n    /*\r\n    * @notice Modify a uint256 parameter\r\n    * @param parameter Name of the parameter\r\n    * @param addr The new parameter value\r\n    */\r\n    function modifyParameters(bytes32 parameter, uint256 val) external isAuthorized {\r\n        if (parameter == \"minProtocolTokenAmountOffered\") {\r\n          require(val > 0, \"DebtAuctionInitialParameterSetter/null-min-prot-amt\");\r\n          minProtocolTokenAmountOffered = val;\r\n        }\r\n        else if (parameter == \"protocolTokenPremium\") {\r\n          require(val < THOUSAND, \"DebtAuctionInitialParameterSetter/invalid-prot-token-premium\");\r\n          protocolTokenPremium = val;\r\n        }\r\n        else if (parameter == \"baseUpdateCallerReward\") {\r\n            require(val <= maxUpdateCallerReward, \"DebtAuctionInitialParameterSetter/invalid-base-caller-reward\");\r\n            baseUpdateCallerReward = val;\r\n        }\r\n        else if (parameter == \"maxUpdateCallerReward\") {\r\n          require(val >= baseUpdateCallerReward, \"DebtAuctionInitialParameterSetter/invalid-max-reward\");\r\n          maxUpdateCallerReward = val;\r\n        }\r\n        else if (parameter == \"perSecondCallerRewardIncrease\") {\r\n          require(val >= RAY, \"DebtAuctionInitialParameterSetter/invalid-reward-increase\");\r\n          perSecondCallerRewardIncrease = val;\r\n        }\r\n        else if (parameter == \"maxRewardIncreaseDelay\") {\r\n          require(val > 0, \"DebtAuctionInitialParameterSetter/invalid-max-increase-delay\");\r\n          maxRewardIncreaseDelay = val;\r\n        }\r\n        else if (parameter == \"updateDelay\") {\r\n          require(val > 0, \"DebtAuctionInitialParameterSetter/null-update-delay\");\r\n          updateDelay = val;\r\n        }\r\n        else if (parameter == \"bidTargetValue\") {\r\n          require(val > 0, \"DebtAuctionInitialParameterSetter/invalid-bid-target-value\");\r\n          bidTargetValue = val;\r\n        }\r\n        else if (parameter == \"lastUpdateTime\") {\r\n          require(val > now, \"DebtAuctionInitialParameterSetter/\");\r\n          lastUpdateTime = val;\r\n        }\r\n        else revert(\"DebtAuctionInitialParameterSetter/modify-unrecognized-param\");\r\n        emit ModifyParameters(parameter, val);\r\n    }\r\n\r\n    // --- Setter ---\r\n    /*\r\n    * @notify View function that returns the new, initial debt auction bid\r\n    * @returns debtAuctionBidSize The new, initial debt auction bid\r\n    */\r\n    function getNewDebtBid() external view returns (uint256 debtAuctionBidSize) {\r\n        // Get token price\r\n        (uint256 systemCoinPrice, bool validSysCoinPrice)   = systemCoinOrcl.getResultWithValidity();\r\n        require(both(systemCoinPrice > 0, validSysCoinPrice), \"DebtAuctionInitialParameterSetter/invalid-price\");\r\n\r\n        // Compute the bid size\r\n        debtAuctionBidSize = divide(multiply(multiply(bidTargetValue, WAD), RAY), systemCoinPrice);\r\n        if (debtAuctionBidSize < RAY) {\r\n          debtAuctionBidSize = RAY;\r\n        }\r\n    }\r\n    /*\r\n    * @notify View function that returns the initial amount of protocol tokens which should be offered in a debt auction\r\n    * @returns debtAuctionMintedTokens The initial amount of protocol tokens that should be offered in a debt auction\r\n    */\r\n    function getRawProtocolTokenAmount() external view returns (uint256 debtAuctionMintedTokens) {\r\n        // Get token price\r\n        (uint256 protocolTknPrice, bool validProtocolPrice) = protocolTokenOrcl.getResultWithValidity();\r\n        require(both(validProtocolPrice, protocolTknPrice > 0), \"DebtAuctionInitialParameterSetter/invalid-price\");\r\n\r\n        // Compute the amont of protocol tokens without the premium\r\n        debtAuctionMintedTokens = divide(multiply(bidTargetValue, WAD), protocolTknPrice);\r\n\r\n        // Take into account the minimum amount of protocol tokens to offer\r\n        if (debtAuctionMintedTokens < minProtocolTokenAmountOffered) {\r\n          debtAuctionMintedTokens = minProtocolTokenAmountOffered;\r\n        }\r\n    }\r\n    /*\r\n    * @notify View function that returns the initial amount of protocol tokens with a premium added on top\r\n    * @returns debtAuctionMintedTokens The initial amount of protocol tokens with a premium added on top\r\n    */\r\n    function getPremiumAdjustedProtocolTokenAmount() external view returns (uint256 debtAuctionMintedTokens) {\r\n        // Get token price\r\n        (uint256 protocolTknPrice, bool validProtocolPrice) = protocolTokenOrcl.getResultWithValidity();\r\n        require(both(validProtocolPrice, protocolTknPrice > 0), \"DebtAuctionInitialParameterSetter/invalid-price\");\r\n\r\n        // Compute the amont of protocol tokens without the premium and apply it\r\n        debtAuctionMintedTokens = divide(multiply(divide(multiply(bidTargetValue, WAD), protocolTknPrice), protocolTokenPremium), THOUSAND);\r\n\r\n        // Take into account the minimum amount of protocol tokens to offer\r\n        if (debtAuctionMintedTokens < minProtocolTokenAmountOffered) {\r\n          debtAuctionMintedTokens = minProtocolTokenAmountOffered;\r\n        }\r\n    }\r\n    /*\r\n    * @notify Set the new debtAuctionBidSize and initialDebtAuctionMintedTokens inside the AccountingEngine\r\n    * @param feeReceiver The address that will receive the reward for setting new params\r\n    */\r\n    function setDebtAuctionInitialParameters(address feeReceiver) external {\r\n        // Check delay between calls\r\n        require(either(subtract(now, lastUpdateTime) >= updateDelay, lastUpdateTime == 0), \"DebtAuctionInitialParameterSetter/wait-more\");\r\n        // Get the caller's reward\r\n        uint256 callerReward = getCallerReward(lastUpdateTime, updateDelay);\r\n        // Store the timestamp of the update\r\n        lastUpdateTime = now;\r\n\r\n        // Get token prices\r\n        (uint256 protocolTknPrice, bool validProtocolPrice) = protocolTokenOrcl.getResultWithValidity();\r\n        (uint256 systemCoinPrice, bool validSysCoinPrice)   = systemCoinOrcl.getResultWithValidity();\r\n        require(both(validProtocolPrice, validSysCoinPrice), \"DebtAuctionInitialParameterSetter/invalid-prices\");\r\n        require(both(protocolTknPrice > 0, systemCoinPrice > 0), \"DebtAuctionInitialParameterSetter/null-prices\");\r\n\r\n        // Compute the scaled bid target value\r\n        uint256 scaledBidTargetValue = multiply(bidTargetValue, WAD);\r\n\r\n        // Compute the amont of protocol tokens without the premium\r\n        uint256 initialDebtAuctionMintedTokens = divide(scaledBidTargetValue, protocolTknPrice);\r\n\r\n        // Apply the premium\r\n        initialDebtAuctionMintedTokens = divide(multiply(initialDebtAuctionMintedTokens, protocolTokenPremium), THOUSAND);\r\n\r\n        // Take into account the minimum amount of protocol tokens to offer\r\n        if (initialDebtAuctionMintedTokens < minProtocolTokenAmountOffered) {\r\n          initialDebtAuctionMintedTokens = minProtocolTokenAmountOffered;\r\n        }\r\n\r\n        // Compute the debtAuctionBidSize as a RAD taking into account the minimum amount to bid\r\n        uint256 debtAuctionBidSize = divide(multiply(scaledBidTargetValue, RAY), systemCoinPrice);\r\n        if (debtAuctionBidSize < RAY) {\r\n          debtAuctionBidSize = RAY;\r\n        }\r\n\r\n        // Set the debt bid and the associated protocol token amount in the accounting engine\r\n        accountingEngine.modifyParameters(\"debtAuctionBidSize\", debtAuctionBidSize);\r\n        accountingEngine.modifyParameters(\"initialDebtAuctionMintedTokens\", initialDebtAuctionMintedTokens);\r\n\r\n        // Emit an event\r\n        emit SetDebtAuctionInitialParameters(debtAuctionBidSize, initialDebtAuctionMintedTokens);\r\n\r\n        // Pay the caller for updating the rate\r\n        rewardCaller(feeReceiver, callerReward);\r\n    }\r\n    /*\r\n    * @notice Manually set initial debt auction parameters\r\n    * @param debtAuctionBidSize The initial debt auction bid size\r\n    * @param initialDebtAuctionMintedTokens The initial amount of protocol tokens to mint in exchange for debtAuctionBidSize system coins\r\n    */\r\n    function manualSetDebtAuctionParameters(uint256 debtAuctionBidSize, uint256 initialDebtAuctionMintedTokens)\r\n      external isAuthorized {\r\n        accountingEngine.modifyParameters(\"debtAuctionBidSize\", debtAuctionBidSize);\r\n        accountingEngine.modifyParameters(\"initialDebtAuctionMintedTokens\", initialDebtAuctionMintedTokens);\r\n        emit SetDebtAuctionInitialParameters(debtAuctionBidSize, initialDebtAuctionMintedTokens);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocolTokenOrcl_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"systemCoinOrcl_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountingEngine_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"updateDelay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseUpdateCallerReward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxUpdateCallerReward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perSecondCallerRewardIncrease_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minProtocolTokenAmountOffered_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolTokenPremium_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidTargetValue_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"revertReason\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FailRewardCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtAuctionBidSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialDebtAuctionMintedTokens\",\"type\":\"uint256\"}],\"name\":\"SetDebtAuctionInitialParameters\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountingEngine\",\"outputs\":[{\"internalType\":\"contract AccountingEngineLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"addition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseUpdateCallerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidTargetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeOfLastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defaultDelayBetweenCalls\",\"type\":\"uint256\"}],\"name\":\"getCallerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewDebtBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtAuctionBidSize\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPremiumAdjustedProtocolTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtAuctionMintedTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRawProtocolTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtAuctionMintedTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debtAuctionBidSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialDebtAuctionMintedTokens\",\"type\":\"uint256\"}],\"name\":\"manualSetDebtAuctionParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRewardIncreaseDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUpdateCallerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minProtocolTokenAmountOffered\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"minimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"multiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perSecondCallerRewardIncrease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolTokenOrcl\",\"outputs\":[{\"internalType\":\"contract OracleLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolTokenPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"rad\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"ray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"rdivide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"rmultiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"}],\"name\":\"rpower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"name\":\"setDebtAuctionInitialParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"subtract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemCoinOrcl\",\"outputs\":[{\"internalType\":\"contract OracleLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract StabilityFeeTreasuryLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"wdivide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"wmultiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"DebtAuctionInitialParameterSetter","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f0b9a234c273250f8d3ce047d8b9cea773ae3ade000000000000000000000000fbf4849a06f6e6f53ecb31d2f8bd61aa7874b268000000000000000000000000cee6aa1ab47d0fb0f24f51a3072ec16e20f90fce00000000000000000000000083533fdd3285f48204215e9cf38c785371258e76000000000000000000000000000000000000000000000000000000000005622000000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000033b2e3c9fd0803ce80000000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000a968163f0a57b400000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0a733286114bdec0df33c429e33e70dcd53a8ef78b743eda416434580c4fbf46"}]}