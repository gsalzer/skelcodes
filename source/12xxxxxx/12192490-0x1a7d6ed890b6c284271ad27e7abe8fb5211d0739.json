{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/fayexue/projects/nftkey-marketplace/contracts/NFTKEYMarketPlaceV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity =0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interface/INFTKEYMarketPlaceV1.sol\\\";\\n\\n/**\\n * @title NFTKEY MarketPlace contract V1\\n * Note: This marketplace contract is collection based. It serves one ERC721 contract only\\n * Payment tokens usually is the chain native coin's wrapped token, e.g. WETH, WBNB\\n */\\ncontract NFTKEYMarketPlaceV1 is INFTKEYMarketPlaceV1, Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct TokenBid {\\n        EnumerableSet.AddressSet bidders;\\n        mapping(address => Bid) bids;\\n    }\\n\\n    constructor(\\n        string memory erc721Name_,\\n        address _erc721Address,\\n        address _paymentTokenAddress\\n    ) public {\\n        _erc721Name = erc721Name_;\\n        _erc721 = IERC721(_erc721Address);\\n        _paymentToken = IERC20(_paymentTokenAddress);\\n    }\\n\\n    string private _erc721Name;\\n    IERC721 private immutable _erc721;\\n    IERC20 private immutable _paymentToken;\\n\\n    bool private _isListingAndBidEnabled = true;\\n    uint8 private _feeFraction = 1;\\n    uint8 private _feeBase = 100;\\n    uint256 private _actionTimeOutRangeMin = 86400; // 24 hours\\n    uint256 private _actionTimeOutRangeMax = 31536000; // One year - This can extend by owner is contract is working smoothly\\n\\n    mapping(uint256 => Listing) private _tokenListings;\\n    EnumerableSet.UintSet private _tokenIdWithListing;\\n\\n    mapping(uint256 => TokenBid) private _tokenBids;\\n    EnumerableSet.UintSet private _tokenIdWithBid;\\n\\n    EnumerableSet.AddressSet private _emptyBidders; // Help initiate TokenBid struct\\n    uint256[] private _tempTokenIdStorage; // Storage to assist cleaning\\n    address[] private _tempBidderStorage; // Storage to assist cleaning bids\\n\\n    /**\\n     * @dev only if listing and bid is enabled\\n     * This is to help contract migration in case of upgrade or bug\\n     */\\n    modifier onlyMarketplaceOpen() {\\n        require(_isListingAndBidEnabled, \\\"Listing and bid are not enabled\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev only if the entered timestamp is within the allowed range\\n     * This helps to not list or bid for too short or too long period of time\\n     */\\n    modifier onlyAllowedExpireTimestamp(uint256 expireTimestamp) {\\n        require(\\n            expireTimestamp.sub(block.timestamp) >= _actionTimeOutRangeMin,\\n            \\\"Please enter a longer period of time\\\"\\n        );\\n        require(\\n            expireTimestamp.sub(block.timestamp) <= _actionTimeOutRangeMax,\\n            \\\"Please enter a shorter period of time\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev check if the account is the owner of this erc721 token\\n     */\\n    function _isTokenOwner(uint256 tokenId, address account) private view returns (bool) {\\n        return _erc721.ownerOf(tokenId) == account;\\n    }\\n\\n    /**\\n     * @dev check if this contract has approved to transfer this erc721 token\\n     */\\n    function _isTokenApproved(uint256 tokenId) private view returns (bool) {\\n        return _erc721.getApproved(tokenId) == address(this);\\n    }\\n\\n    /**\\n     * @dev check if this contract has approved to all of this owner's erc721 tokens\\n     */\\n    function _isAllTokenApproved(address owner) private view returns (bool) {\\n        return _erc721.isApprovedForAll(owner, address(this));\\n    }\\n\\n    /**\\n     * @dev See {INFTKEYMarketPlaceV1-tokenAddress}.\\n     */\\n    function tokenAddress() external view override returns (address) {\\n        return address(_erc721);\\n    }\\n\\n    /**\\n     * @dev See {INFTKEYMarketPlaceV1-paymentTokenAddress}.\\n     */\\n    function paymentTokenAddress() external view override returns (address) {\\n        return address(_paymentToken);\\n    }\\n\\n    /**\\n     * @dev Check if a listing is valid or not\\n     * The seller must be the owner\\n     * The seller must have give this contract allowance\\n     * The sell price must be more than 0\\n     * The listing mustn't be expired\\n     */\\n    function _isListingValid(Listing memory listing) private view returns (bool) {\\n        if (\\n            _isTokenOwner(listing.tokenId, listing.seller) &&\\n            (_isTokenApproved(listing.tokenId) || _isAllTokenApproved(listing.seller)) &&\\n            listing.listingPrice > 0 &&\\n            listing.expireTimestamp > block.timestamp\\n        ) {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev See {INFTKEYMarketPlaceV1-getTokenListing}.\\n     */\\n    function getTokenListing(uint256 tokenId) public view override returns (Listing memory) {\\n        Listing memory listing = _tokenListings[tokenId];\\n        if (_isListingValid(listing)) {\\n            return listing;\\n        }\\n    }\\n\\n    /**\\n     * @dev See {INFTKEYMarketPlaceV1-getTokenListings}.\\n     */\\n    function getTokenListings(uint256 from, uint256 size)\\n        public\\n        view\\n        override\\n        returns (Listing[] memory)\\n    {\\n        if (from < _tokenIdWithListing.length() && size > 0) {\\n            uint256 querySize = size;\\n            if ((from + size) > _tokenIdWithListing.length()) {\\n                querySize = _tokenIdWithListing.length() - from;\\n            }\\n            Listing[] memory listings = new Listing[](querySize);\\n            for (uint256 i = 0; i < querySize; i++) {\\n                Listing memory listing = _tokenListings[_tokenIdWithListing.at(i + from)];\\n                if (_isListingValid(listing)) {\\n                    listings[i] = listing;\\n                }\\n            }\\n            return listings;\\n        }\\n    }\\n\\n    /**\\n     * @dev See {INFTKEYMarketPlaceV1-getAllTokenListings}.\\n     */\\n    function getAllTokenListings() external view override returns (Listing[] memory) {\\n        return getTokenListings(0, _tokenIdWithListing.length());\\n    }\\n\\n    /**\\n     * @dev Check if an bid is valid or not\\n     * Bidder must not be the owner\\n     * Bidder must give the contract allowance same or more than bid price\\n     * Bid price must > 0\\n     * Bid mustn't been expired\\n     */\\n    function _isBidValid(Bid memory bid) private view returns (bool) {\\n        if (\\n            !_isTokenOwner(bid.tokenId, bid.bidder) &&\\n            _paymentToken.allowance(bid.bidder, address(this)) >= bid.bidPrice &&\\n            bid.bidPrice > 0 &&\\n            bid.expireTimestamp > block.timestamp\\n        ) {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev See {INFTKEYMarketPlaceV1-getBidderTokenBid}.\\n     */\\n    function getBidderTokenBid(uint256 tokenId, address bidder)\\n        public\\n        view\\n        override\\n        returns (Bid memory)\\n    {\\n        Bid memory bid = _tokenBids[tokenId].bids[bidder];\\n        if (_isBidValid(bid)) {\\n            return bid;\\n        }\\n    }\\n\\n    /**\\n     * @dev See {INFTKEYMarketPlaceV1-getTokenBids}.\\n     */\\n    function getTokenBids(uint256 tokenId) external view override returns (Bid[] memory) {\\n        Bid[] memory bids = new Bid[](_tokenBids[tokenId].bidders.length());\\n        for (uint256 i; i < _tokenBids[tokenId].bidders.length(); i++) {\\n            address bidder = _tokenBids[tokenId].bidders.at(i);\\n            Bid memory bid = _tokenBids[tokenId].bids[bidder];\\n            if (_isBidValid(bid)) {\\n                bids[i] = bid;\\n            }\\n        }\\n        return bids;\\n    }\\n\\n    /**\\n     * @dev See {INFTKEYMarketPlaceV1-getTokenHighestBid}.\\n     */\\n    function getTokenHighestBid(uint256 tokenId) public view override returns (Bid memory) {\\n        Bid memory highestBid = Bid(tokenId, 0, address(0), 0);\\n        for (uint256 i; i < _tokenBids[tokenId].bidders.length(); i++) {\\n            address bidder = _tokenBids[tokenId].bidders.at(i);\\n            Bid memory bid = _tokenBids[tokenId].bids[bidder];\\n            if (_isBidValid(bid) && bid.bidPrice > highestBid.bidPrice) {\\n                highestBid = bid;\\n            }\\n        }\\n        return highestBid;\\n    }\\n\\n    /**\\n     * @dev See {INFTKEYMarketPlaceV1-getTokenHighestBids}.\\n     */\\n    function getTokenHighestBids(uint256 from, uint256 size)\\n        public\\n        view\\n        override\\n        returns (Bid[] memory)\\n    {\\n        if (from < _tokenIdWithBid.length() && size > 0) {\\n            uint256 querySize = size;\\n            if ((from + size) > _tokenIdWithBid.length()) {\\n                querySize = _tokenIdWithBid.length() - from;\\n            }\\n            Bid[] memory highestBids = new Bid[](querySize);\\n            for (uint256 i = 0; i < querySize; i++) {\\n                highestBids[i] = getTokenHighestBid(_tokenIdWithBid.at(i + from));\\n            }\\n            return highestBids;\\n        }\\n    }\\n\\n    /**\\n     * @dev See {INFTKEYMarketPlaceV1-getAllTokenHighestBids}.\\n     */\\n    function getAllTokenHighestBids() external view override returns (Bid[] memory) {\\n        return getTokenHighestBids(0, _tokenIdWithBid.length());\\n    }\\n\\n    /**\\n     * @dev delist a token - remove token id record and remove listing from mapping\\n     * @param tokenId erc721 token Id\\n     */\\n    function _delistToken(uint256 tokenId) private {\\n        if (_tokenIdWithListing.contains(tokenId)) {\\n            delete _tokenListings[tokenId];\\n            _tokenIdWithListing.remove(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev remove a bid of a bidder\\n     * @param tokenId erc721 token Id\\n     * @param bidder bidder address\\n     */\\n    function _removeBidOfBidder(uint256 tokenId, address bidder) private {\\n        if (_tokenBids[tokenId].bidders.contains(bidder)) {\\n            // Step 1: delete the bid and the address\\n            delete _tokenBids[tokenId].bids[bidder];\\n            _tokenBids[tokenId].bidders.remove(bidder);\\n\\n            // Step 2: if no bid left\\n            if (_tokenBids[tokenId].bidders.length() == 0) {\\n                _tokenIdWithBid.remove(tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {INFTKEYMarketPlaceV1-listToken}.\\n     * People can only list if listing is allowed\\n     * The timestamp set needs to be in the allowed range\\n     * Only token owner can list token\\n     * Price must be higher than 0\\n     * This contract must be approved to transfer this token\\n     */\\n    function listToken(\\n        uint256 tokenId,\\n        uint256 value,\\n        uint256 expireTimestamp\\n    ) external override onlyMarketplaceOpen onlyAllowedExpireTimestamp(expireTimestamp) {\\n        require(value > 0, \\\"Please list for more than 0 or use the transfer function\\\");\\n        require(_isTokenOwner(tokenId, msg.sender), \\\"Only token owner can list token\\\");\\n        require(\\n            _isTokenApproved(tokenId) || _isAllTokenApproved(msg.sender),\\n            \\\"This token is not allowed to transfer by this contract\\\"\\n        );\\n\\n        _tokenListings[tokenId] = Listing(tokenId, value, msg.sender, expireTimestamp);\\n        _tokenIdWithListing.add(tokenId);\\n\\n        emit TokenListed(tokenId, msg.sender, value);\\n    }\\n\\n    /**\\n     * @dev See {INFTKEYMarketPlaceV1-delistToken}.\\n     * msg.sender must be the seller of the listing record\\n     */\\n    function delistToken(uint256 tokenId) external override {\\n        require(_tokenListings[tokenId].seller == msg.sender, \\\"Only token seller can delist token\\\");\\n        emit TokenDelisted(tokenId, _tokenListings[tokenId].seller);\\n        _delistToken(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {INFTKEYMarketPlaceV1-buyToken}.\\n     * Must have a valid listing\\n     * msg.sender must not the owner of token\\n     * msg.value must be at least sell price plus fees\\n     */\\n    function buyToken(uint256 tokenId) external payable override nonReentrant {\\n        Listing memory listing = getTokenListing(tokenId); // Get valid listing\\n        require(listing.seller != address(0), \\\"Token is not for sale\\\"); // Listing not valid\\n        require(!_isTokenOwner(tokenId, msg.sender), \\\"Token owner can't buy their own token\\\");\\n\\n        uint256 fees = listing.listingPrice.mul(_feeFraction).div(_feeBase);\\n        require(\\n            msg.value >= listing.listingPrice + fees,\\n            \\\"The value send is below sale price plus fees\\\"\\n        );\\n\\n        // Send value to token seller and fees to contract owner\\n        uint256 valueWithoutFees = msg.value.sub(fees);\\n        Address.sendValue(payable(listing.seller), valueWithoutFees);\\n        Address.sendValue(payable(owner()), fees);\\n\\n        // Send token to buyer\\n        emit TokenBought(tokenId, listing.seller, msg.sender, msg.value, valueWithoutFees, fees);\\n        _erc721.safeTransferFrom(listing.seller, msg.sender, tokenId);\\n\\n        // Remove token listing\\n        _delistToken(tokenId);\\n        _removeBidOfBidder(tokenId, msg.sender);\\n    }\\n\\n    /**\\n     * @dev See {INFTKEYMarketPlaceV1-enterBidForToken}.\\n     * People can only enter bid if bid is allowed\\n     * The timestamp set needs to be in the allowed range\\n     * bid price > 0\\n     * must not be token owner\\n     * must allow this contract to spend enough payment token\\n     */\\n    function enterBidForToken(\\n        uint256 tokenId,\\n        uint256 bidPrice,\\n        uint256 expireTimestamp\\n    ) external override onlyMarketplaceOpen onlyAllowedExpireTimestamp(expireTimestamp) {\\n        require(bidPrice > 0, \\\"Please bid for more than 0\\\");\\n        require(!_isTokenOwner(tokenId, msg.sender), \\\"This Token belongs to this address\\\");\\n        require(\\n            _paymentToken.allowance(msg.sender, address(this)) >= bidPrice,\\n            \\\"Need to have enough token holding to bid on this token\\\"\\n        );\\n\\n        Bid memory bid = Bid(tokenId, bidPrice, msg.sender, expireTimestamp);\\n\\n        // if no bids of this token add a entry to both records _tokenIdWithBid and _tokenBids\\n        if (!_tokenIdWithBid.contains(tokenId)) {\\n            _tokenIdWithBid.add(tokenId);\\n            _tokenBids[tokenId] = TokenBid(_emptyBidders);\\n        }\\n\\n        _tokenBids[tokenId].bidders.add(msg.sender);\\n        _tokenBids[tokenId].bids[msg.sender] = bid;\\n\\n        emit TokenBidEntered(tokenId, msg.sender, bidPrice);\\n    }\\n\\n    /**\\n     * @dev See {INFTKEYMarketPlaceV1-withdrawBidForToken}.\\n     * There must be a bid exists\\n     * remove this bid record\\n     */\\n    function withdrawBidForToken(uint256 tokenId) external override {\\n        Bid memory bid = _tokenBids[tokenId].bids[msg.sender];\\n        require(bid.bidder == msg.sender, \\\"This address doesn't have bid on this token\\\");\\n\\n        emit TokenBidWithdrawn(tokenId, bid.bidder, bid.bidPrice);\\n        _removeBidOfBidder(tokenId, msg.sender);\\n    }\\n\\n    /**\\n     * @dev See {INFTKEYMarketPlaceV1-acceptBidForToken}.\\n     * Must be owner of this token\\n     * Must have approved this contract to transfer token\\n     * Must have a valid existing bid that matches the bidder address\\n     */\\n    function acceptBidForToken(uint256 tokenId, address bidder) external override nonReentrant {\\n        require(_isTokenOwner(tokenId, msg.sender), \\\"Only token owner can accept bid of token\\\");\\n        require(\\n            _isTokenApproved(tokenId) || _isAllTokenApproved(msg.sender),\\n            \\\"The token is not approved to transfer by the contract\\\"\\n        );\\n\\n        Bid memory existingBid = getBidderTokenBid(tokenId, bidder);\\n        require(\\n            existingBid.bidPrice > 0 && existingBid.bidder == bidder,\\n            \\\"This token doesn't have a matching bid\\\"\\n        );\\n\\n        uint256 fees = existingBid.bidPrice.mul(_feeFraction).div(_feeBase + _feeFraction);\\n        uint256 tokenValue = existingBid.bidPrice.sub(fees);\\n\\n        SafeERC20.safeTransferFrom(_paymentToken, existingBid.bidder, msg.sender, tokenValue);\\n        SafeERC20.safeTransferFrom(_paymentToken, existingBid.bidder, owner(), fees);\\n\\n        _erc721.safeTransferFrom(msg.sender, existingBid.bidder, tokenId);\\n\\n        emit TokenBidAccepted(\\n            tokenId,\\n            msg.sender,\\n            existingBid.bidder,\\n            existingBid.bidPrice,\\n            tokenValue,\\n            fees\\n        );\\n\\n        // Remove token listing\\n        _delistToken(tokenId);\\n        _removeBidOfBidder(tokenId, existingBid.bidder);\\n    }\\n\\n    /**\\n     * @dev See {INFTKEYMarketPlaceV1-getInvalidListingCount}.\\n     */\\n    function getInvalidListingCount() external view override returns (uint256) {\\n        uint256 count = 0;\\n        for (uint256 i = 0; i < _tokenIdWithListing.length(); i++) {\\n            if (!_isListingValid(_tokenListings[_tokenIdWithListing.at(i)])) {\\n                count = count.add(1);\\n            }\\n        }\\n        return count;\\n    }\\n\\n    /**\\n     * @dev Count how many bid records of a token are invalid now\\n     */\\n    function _getInvalidBidOfTokenCount(uint256 tokenId) private view returns (uint256) {\\n        uint256 count = 0;\\n        for (uint256 i = 0; i < _tokenBids[tokenId].bidders.length(); i++) {\\n            address bidder = _tokenBids[tokenId].bidders.at(i);\\n            Bid memory bid = _tokenBids[tokenId].bids[bidder];\\n            if (!_isBidValid(bid)) {\\n                count = count.add(1);\\n            }\\n        }\\n        return count;\\n    }\\n\\n    /**\\n     * @dev See {INFTKEYMarketPlaceV1-getInvalidBidCount}.\\n     */\\n    function getInvalidBidCount() external view override returns (uint256) {\\n        uint256 count = 0;\\n        for (uint256 i = 0; i < _tokenIdWithBid.length(); i++) {\\n            count = count.add(_getInvalidBidOfTokenCount(_tokenIdWithBid.at(i)));\\n        }\\n        return count;\\n    }\\n\\n    /**\\n     * @dev See {INFTKEYMarketPlaceV1-cleanAllInvalidListings}.\\n     */\\n    function cleanAllInvalidListings() external override {\\n        for (uint256 i = 0; i < _tokenIdWithListing.length(); i++) {\\n            uint256 tokenId = _tokenIdWithListing.at(i);\\n            if (!_isListingValid(_tokenListings[tokenId])) {\\n                _tempTokenIdStorage.push(tokenId);\\n            }\\n        }\\n        for (uint256 i = 0; i < _tempTokenIdStorage.length; i++) {\\n            _delistToken(_tempTokenIdStorage[i]);\\n        }\\n        delete _tempTokenIdStorage;\\n    }\\n\\n    /**\\n     * @dev remove invalid bids of a token\\n     * @param tokenId erc721 token Id\\n     */\\n    function _cleanInvalidBidsOfToken(uint256 tokenId) private {\\n        for (uint256 i = 0; i < _tokenBids[tokenId].bidders.length(); i++) {\\n            address bidder = _tokenBids[tokenId].bidders.at(i);\\n            Bid memory bid = _tokenBids[tokenId].bids[bidder];\\n            if (!_isBidValid(bid)) {\\n                _tempBidderStorage.push(_tokenBids[tokenId].bidders.at(i));\\n            }\\n        }\\n        for (uint256 i = 0; i < _tempBidderStorage.length; i++) {\\n            address bidder = _tempBidderStorage[i];\\n            _removeBidOfBidder(tokenId, bidder);\\n        }\\n        delete _tempBidderStorage;\\n    }\\n\\n    /**\\n     * @dev See {INFTKEYMarketPlaceV1-cleanAllInvalidBids}.\\n     */\\n    function cleanAllInvalidBids() external override {\\n        for (uint256 i = 0; i < _tokenIdWithBid.length(); i++) {\\n            uint256 tokenId = _tokenIdWithBid.at(i);\\n            uint256 invalidCount = _getInvalidBidOfTokenCount(tokenId);\\n            if (invalidCount > 0) {\\n                _tempTokenIdStorage.push(tokenId);\\n            }\\n        }\\n        for (uint256 i = 0; i < _tempTokenIdStorage.length; i++) {\\n            _cleanInvalidBidsOfToken(_tempTokenIdStorage[i]);\\n        }\\n        delete _tempTokenIdStorage;\\n    }\\n\\n    /**\\n     * @dev See {INFTKEYMarketPlaceV1-erc721Name}.\\n     */\\n    function erc721Name() external view override returns (string memory) {\\n        return _erc721Name;\\n    }\\n\\n    /**\\n     * @dev See {INFTKEYMarketPlaceV1-isListingAndBidEnabled}.\\n     */\\n    function isListingAndBidEnabled() external view override returns (bool) {\\n        return _isListingAndBidEnabled;\\n    }\\n\\n    /**\\n     * @dev Enable to disable Bids and Listing\\n     */\\n    function changeMarketplaceStatus(bool enabled) external onlyOwner {\\n        _isListingAndBidEnabled = enabled;\\n    }\\n\\n    /**\\n     * @dev See {INFTKEYMarketPlaceV1-actionTimeOutRangeMin}.\\n     */\\n    function actionTimeOutRangeMin() external view override returns (uint256) {\\n        return _actionTimeOutRangeMin;\\n    }\\n\\n    /**\\n     * @dev See {INFTKEYMarketPlaceV1-actionTimeOutRangeMax}.\\n     */\\n    function actionTimeOutRangeMax() external view override returns (uint256) {\\n        return _actionTimeOutRangeMax;\\n    }\\n\\n    /**\\n     * @dev Change minimum listing and bid time range\\n     */\\n    function changeMinActionTimeLimit(uint256 timeInSec) external onlyOwner {\\n        _actionTimeOutRangeMin = timeInSec;\\n    }\\n\\n    /**\\n     * @dev Change maximum listing and bid time range\\n     */\\n    function changeMaxActionTimeLimit(uint256 timeInSec) external onlyOwner {\\n        _actionTimeOutRangeMax = timeInSec;\\n    }\\n\\n    /**\\n     * @dev See {INFTKEYMarketPlaceV1-serviceFee}.\\n     */\\n    function serviceFee() external view override returns (uint8, uint8) {\\n        return (_feeFraction, _feeBase);\\n    }\\n\\n    /**\\n     * @dev Change withdrawal fee percentage.\\n     * If 1%, then input (1,100)\\n     * If 0.5%, then input (5,1000)\\n     * @param feeFraction_ Fraction of withdrawal fee based on feeBase_\\n     * @param feeBase_ Fraction of withdrawal fee base\\n     */\\n    function changeSeriveFee(uint8 feeFraction_, uint8 feeBase_) external onlyOwner {\\n        require(feeFraction_ <= feeBase_, \\\"Fee fraction exceeded base.\\\");\\n        uint256 percentage = (feeFraction_ * 1000) / feeBase_;\\n        require(percentage <= 25, \\\"Attempt to set percentage higher than 2.5%.\\\");\\n\\n        _feeFraction = feeFraction_;\\n        _feeBase = feeBase_;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/fayexue/projects/nftkey-marketplace/contracts/interface/INFTKEYMarketPlaceV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity =0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface INFTKEYMarketPlaceV1 {\\n    struct Bid {\\n        uint256 tokenId;\\n        uint256 bidPrice;\\n        address bidder;\\n        uint256 expireTimestamp;\\n    }\\n\\n    struct Listing {\\n        uint256 tokenId;\\n        uint256 listingPrice;\\n        address seller;\\n        uint256 expireTimestamp;\\n    }\\n\\n    event TokenListed(uint256 indexed tokenId, address indexed fromAddress, uint256 minValue);\\n    event TokenDelisted(uint256 indexed tokenId, address indexed fromAddress);\\n    event TokenBidEntered(uint256 indexed tokenId, address indexed fromAddress, uint256 value);\\n    event TokenBidWithdrawn(uint256 indexed tokenId, address indexed fromAddress, uint256 value);\\n    event TokenBought(\\n        uint256 indexed tokenId,\\n        address indexed fromAddress,\\n        address indexed toAddress,\\n        uint256 total,\\n        uint256 value,\\n        uint256 fees\\n    );\\n    event TokenBidAccepted(\\n        uint256 indexed tokenId,\\n        address indexed owner,\\n        address indexed bidder,\\n        uint256 total,\\n        uint256 value,\\n        uint256 fees\\n    );\\n\\n    /**\\n     * @dev surface the erc721 token contract address\\n     */\\n    function tokenAddress() external view returns (address);\\n\\n    /**\\n     * @dev surface the erc20 payment token contract address\\n     */\\n    function paymentTokenAddress() external view returns (address);\\n\\n    /**\\n     * @dev get current listing of a token\\n     * @param tokenId erc721 token Id\\n     * @return current valid listing or empty listing struct\\n     */\\n    function getTokenListing(uint256 tokenId) external view returns (Listing memory);\\n\\n    /**\\n     * @dev get current valid listings by size\\n     * @param from index to start\\n     * @param size size to query\\n     * @return current valid listings\\n     * This to help batch query when list gets big\\n     */\\n    function getTokenListings(uint256 from, uint256 size) external view returns (Listing[] memory);\\n\\n    /**\\n     * @dev get all current valid listings\\n     * @return current valid listings\\n     */\\n    function getAllTokenListings() external view returns (Listing[] memory);\\n\\n    /**\\n     * @dev get bidder's bid on a token\\n     * @param tokenId erc721 token Id\\n     * @param bidder address of a bidder\\n     * @return Valid bid or empty bid\\n     */\\n    function getBidderTokenBid(uint256 tokenId, address bidder) external view returns (Bid memory);\\n\\n    /**\\n     * @dev get all valid bids of a token\\n     * @param tokenId erc721 token Id\\n     * @return Valid bids of a token\\n     */\\n    function getTokenBids(uint256 tokenId) external view returns (Bid[] memory);\\n\\n    /**\\n     * @dev get highest bid of a token\\n     * @param tokenId erc721 token Id\\n     * @return Valid highest bid or empty bid\\n     */\\n    function getTokenHighestBid(uint256 tokenId) external view returns (Bid memory);\\n\\n    /**\\n     * @dev get current highest bids\\n     * @param from index to start\\n     * @param size size to query\\n     * @return current highest bids\\n     * This to help batch query when list gets big\\n     */\\n    function getTokenHighestBids(uint256 from, uint256 size) external view returns (Bid[] memory);\\n\\n    /**\\n     * @dev get all highest bids\\n     * @return All valid highest bids\\n     */\\n    function getAllTokenHighestBids() external view returns (Bid[] memory);\\n\\n    /**\\n     * @dev List token for sale\\n     * @param tokenId erc721 token Id\\n     * @param value min price to sell the token\\n     * @param expireTimestamp when would this listing expire\\n     */\\n    function listToken(\\n        uint256 tokenId,\\n        uint256 value,\\n        uint256 expireTimestamp\\n    ) external;\\n\\n    /**\\n     * @dev Delist token for sale\\n     * @param tokenId erc721 token Id\\n     */\\n    function delistToken(uint256 tokenId) external;\\n\\n    /**\\n     * @dev Buy token\\n     * @param tokenId erc721 token Id\\n     */\\n    function buyToken(uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Enter bid for token\\n     * @param tokenId erc721 token Id\\n     * @param bidPrice price in payment token\\n     * @param expireTimestamp when would this bid expire\\n     */\\n    function enterBidForToken(\\n        uint256 tokenId,\\n        uint256 bidPrice,\\n        uint256 expireTimestamp\\n    ) external;\\n\\n    /**\\n     * @dev Withdraw bid for token\\n     * @param tokenId erc721 token Id\\n     */\\n    function withdrawBidForToken(uint256 tokenId) external;\\n\\n    /**\\n     * @dev Accept a bid of token from a bidder\\n     * @param tokenId erc721 token Id\\n     * @param bidder bidder address\\n     */\\n    function acceptBidForToken(uint256 tokenId, address bidder) external;\\n\\n    /**\\n     * @dev Count how many listing records are invalid now\\n     * This is to help admin to decide to do a cleaning or not\\n     */\\n    function getInvalidListingCount() external view returns (uint256);\\n\\n    /**\\n     * @dev Count how many bids records are invalid now\\n     * This is to help admin to decide to do a cleaning or not\\n     */\\n    function getInvalidBidCount() external view returns (uint256);\\n\\n    /**\\n     * @dev Clean all invalid listings\\n     */\\n    function cleanAllInvalidListings() external;\\n\\n    /**\\n     * @dev Clean all invalid bids\\n     */\\n    function cleanAllInvalidBids() external;\\n\\n    /**\\n     * @dev Name of ERC721 token\\n     */\\n    function erc721Name() external view returns (string memory);\\n\\n    /**\\n     * @dev Show if listing and bid are enabled\\n     */\\n    function isListingAndBidEnabled() external view returns (bool);\\n\\n    /**\\n     * @dev Surface minimum listing and bid time range\\n     */\\n    function actionTimeOutRangeMin() external view returns (uint256);\\n\\n    /**\\n     * @dev Surface maximum listing and bid time range\\n     */\\n    function actionTimeOutRangeMax() external view returns (uint256);\\n\\n    /**\\n     * @dev Service fee\\n     * @return fee fraction and fee base\\n     */\\n    function serviceFee() external view returns (uint8, uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"erc721Name_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_erc721Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"TokenBidAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenBidEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenBidWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"TokenBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"}],\"name\":\"TokenDelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"}],\"name\":\"TokenListed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"acceptBidForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actionTimeOutRangeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actionTimeOutRangeMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"changeMarketplaceStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeInSec\",\"type\":\"uint256\"}],\"name\":\"changeMaxActionTimeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeInSec\",\"type\":\"uint256\"}],\"name\":\"changeMinActionTimeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeFraction_\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeBase_\",\"type\":\"uint8\"}],\"name\":\"changeSeriveFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cleanAllInvalidBids\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cleanAllInvalidListings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"delistToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expireTimestamp\",\"type\":\"uint256\"}],\"name\":\"enterBidForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721Name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokenHighestBids\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expireTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct INFTKEYMarketPlaceV1.Bid[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokenListings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expireTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct INFTKEYMarketPlaceV1.Listing[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"getBidderTokenBid\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expireTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct INFTKEYMarketPlaceV1.Bid\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInvalidBidCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInvalidListingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenBids\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expireTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct INFTKEYMarketPlaceV1.Bid[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenHighestBid\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expireTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct INFTKEYMarketPlaceV1.Bid\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"getTokenHighestBids\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expireTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct INFTKEYMarketPlaceV1.Bid[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenListing\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expireTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct INFTKEYMarketPlaceV1.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"getTokenListings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expireTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct INFTKEYMarketPlaceV1.Listing[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isListingAndBidEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expireTimestamp\",\"type\":\"uint256\"}],\"name\":\"listToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawBidForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NFTKEYMarketPlaceV1","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000024de7018b2c73b5437eaf647e914a9042cc6d770000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000044c69666500000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}