{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"erc20-staking-rewards-distribution-contracts/ERC20StakingRewardsDistribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IERC20StakingRewardsDistributionFactory.sol\\\";\\n\\n/**\\n * Errors codes:\\n *\\n * SRD01: invalid starting timestamp\\n * SRD02: invalid time duration\\n * SRD03: inconsistent reward token/amount\\n * SRD04: 0 address as reward token\\n * SRD05: no reward\\n * SRD06: no funding\\n * SRD07: 0 address as stakable token\\n * SRD08: distribution already started\\n * SRD09: tried to stake nothing\\n * SRD10: staking cap hit\\n * SRD11: tried to withdraw nothing\\n * SRD12: funds locked until the distribution ends\\n * SRD13: withdrawn amount greater than current stake\\n * SRD14: inconsistent claimed amounts\\n * SRD15: insufficient claimable amount\\n * SRD16: 0 address owner\\n * SRD17: caller not owner\\n * SRD18: already initialized\\n * SRD19: invalid state for cancel to be called\\n * SRD20: not started\\n * SRD21: already ended\\n * SRD22: no rewards are recoverable\\n * SRD23: no rewards are claimable while claiming all\\n * SRD24: no rewards are claimable while manually claiming an arbitrary amount of rewards\\n * SRD25: staking is currently paused\\n */\\ncontract ERC20StakingRewardsDistribution {\\n    using SafeERC20 for IERC20;\\n\\n    uint224 constant MULTIPLIER = 2**112;\\n\\n    struct Reward {\\n        address token;\\n        uint256 amount;\\n        uint256 perStakedToken;\\n        uint256 recoverableSeconds;\\n        uint256 claimed;\\n    }\\n\\n    struct StakerRewardInfo {\\n        uint256 consolidatedPerStakedToken;\\n        uint256 earned;\\n        uint256 claimed;\\n    }\\n\\n    struct Staker {\\n        uint256 stake;\\n        mapping(address => StakerRewardInfo) rewardInfo;\\n    }\\n\\n    Reward[] public rewards;\\n    mapping(address => Staker) public stakers;\\n    uint64 public startingTimestamp;\\n    uint64 public endingTimestamp;\\n    uint64 public secondsDuration;\\n    uint64 public lastConsolidationTimestamp;\\n    IERC20 public stakableToken;\\n    address public owner;\\n    address public factory;\\n    bool public locked;\\n    bool public canceled;\\n    bool public initialized;\\n    uint256 public totalStakedTokensAmount;\\n    uint256 public stakingCap;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event Initialized(\\n        address[] rewardsTokenAddresses,\\n        address stakableTokenAddress,\\n        uint256[] rewardsAmounts,\\n        uint64 startingTimestamp,\\n        uint64 endingTimestamp,\\n        bool locked,\\n        uint256 stakingCap\\n    );\\n    event Canceled();\\n    event Staked(address indexed staker, uint256 amount);\\n    event Withdrawn(address indexed withdrawer, uint256 amount);\\n    event Claimed(address indexed claimer, uint256[] amounts);\\n    event Recovered(uint256[] amounts);\\n\\n    function initialize(\\n        address[] calldata _rewardTokenAddresses,\\n        address _stakableTokenAddress,\\n        uint256[] calldata _rewardAmounts,\\n        uint64 _startingTimestamp,\\n        uint64 _endingTimestamp,\\n        bool _locked,\\n        uint256 _stakingCap\\n    ) external onlyUninitialized {\\n        require(_startingTimestamp > block.timestamp, \\\"SRD01\\\");\\n        require(_endingTimestamp > _startingTimestamp, \\\"SRD02\\\");\\n        require(_rewardTokenAddresses.length == _rewardAmounts.length, \\\"SRD03\\\");\\n\\n        secondsDuration = _endingTimestamp - _startingTimestamp;\\n        // Initializing reward tokens and amounts\\n        for (uint32 _i = 0; _i < _rewardTokenAddresses.length; _i++) {\\n            address _rewardTokenAddress = _rewardTokenAddresses[_i];\\n            uint256 _rewardAmount = _rewardAmounts[_i];\\n            require(_rewardTokenAddress != address(0), \\\"SRD04\\\");\\n            require(_rewardAmount > 0, \\\"SRD05\\\");\\n            IERC20 _rewardToken = IERC20(_rewardTokenAddress);\\n            require(\\n                _rewardToken.balanceOf(address(this)) >= _rewardAmount,\\n                \\\"SRD06\\\"\\n            );\\n            rewards.push(\\n                Reward({\\n                    token: _rewardTokenAddress,\\n                    amount: _rewardAmount,\\n                    perStakedToken: 0,\\n                    recoverableSeconds: 0,\\n                    claimed: 0\\n                })\\n            );\\n        }\\n\\n        require(_stakableTokenAddress != address(0), \\\"SRD07\\\");\\n        stakableToken = IERC20(_stakableTokenAddress);\\n\\n        owner = msg.sender;\\n        factory = msg.sender;\\n        startingTimestamp = _startingTimestamp;\\n        endingTimestamp = _endingTimestamp;\\n        lastConsolidationTimestamp = _startingTimestamp;\\n        locked = _locked;\\n        stakingCap = _stakingCap;\\n        initialized = true;\\n        canceled = false;\\n\\n        emit Initialized(\\n            _rewardTokenAddresses,\\n            _stakableTokenAddress,\\n            _rewardAmounts,\\n            _startingTimestamp,\\n            _endingTimestamp,\\n            _locked,\\n            _stakingCap\\n        );\\n    }\\n\\n    function cancel() external onlyOwner {\\n        require(initialized && !canceled, \\\"SRD19\\\");\\n        require(block.timestamp < startingTimestamp, \\\"SRD08\\\");\\n        for (uint256 _i; _i < rewards.length; _i++) {\\n            Reward storage _reward = rewards[_i];\\n            IERC20(_reward.token).safeTransfer(\\n                owner,\\n                IERC20(_reward.token).balanceOf(address(this))\\n            );\\n        }\\n        canceled = true;\\n        emit Canceled();\\n    }\\n\\n    function recoverUnassignedRewards() external onlyStarted {\\n        consolidateReward();\\n        uint256[] memory _recoveredUnassignedRewards =\\n            new uint256[](rewards.length);\\n        bool _atLeastOneNonZeroRecovery = false;\\n        for (uint256 _i; _i < rewards.length; _i++) {\\n            Reward storage _reward = rewards[_i];\\n            // recoverable rewards are going to be recovered in this tx (if it does not revert),\\n            // so we add them to the claimed rewards right now\\n            _reward.claimed += ((_reward.recoverableSeconds * _reward.amount) /\\n                (uint256(secondsDuration) * MULTIPLIER));\\n            delete _reward.recoverableSeconds;\\n            uint256 _recoverableRewards =\\n                IERC20(_reward.token).balanceOf(address(this)) -\\n                    (_reward.amount - _reward.claimed);\\n            if (!_atLeastOneNonZeroRecovery && _recoverableRewards > 0)\\n                _atLeastOneNonZeroRecovery = true;\\n            _recoveredUnassignedRewards[_i] = _recoverableRewards;\\n            IERC20(_reward.token).safeTransfer(owner, _recoverableRewards);\\n        }\\n        require(_atLeastOneNonZeroRecovery, \\\"SRD22\\\");\\n        emit Recovered(_recoveredUnassignedRewards);\\n    }\\n\\n    function stake(uint256 _amount) external onlyRunning {\\n        require(\\n            !IERC20StakingRewardsDistributionFactory(factory).stakingPaused(),\\n            \\\"SRD25\\\"\\n        );\\n        require(_amount > 0, \\\"SRD09\\\");\\n        if (stakingCap > 0) {\\n            require(totalStakedTokensAmount + _amount <= stakingCap, \\\"SRD10\\\");\\n        }\\n        consolidateReward();\\n        Staker storage _staker = stakers[msg.sender];\\n        _staker.stake += _amount;\\n        totalStakedTokensAmount += _amount;\\n        stakableToken.safeTransferFrom(msg.sender, address(this), _amount);\\n        emit Staked(msg.sender, _amount);\\n    }\\n\\n    function withdraw(uint256 _amount) public onlyStarted {\\n        require(_amount > 0, \\\"SRD11\\\");\\n        if (locked) {\\n            require(block.timestamp > endingTimestamp, \\\"SRD12\\\");\\n        }\\n        consolidateReward();\\n        Staker storage _staker = stakers[msg.sender];\\n        require(_staker.stake >= _amount, \\\"SRD13\\\");\\n        _staker.stake -= _amount;\\n        totalStakedTokensAmount -= _amount;\\n        stakableToken.safeTransfer(msg.sender, _amount);\\n        emit Withdrawn(msg.sender, _amount);\\n    }\\n\\n    function claim(uint256[] memory _amounts, address _recipient)\\n        external\\n        onlyStarted\\n    {\\n        require(_amounts.length == rewards.length, \\\"SRD14\\\");\\n        consolidateReward();\\n        Staker storage _staker = stakers[msg.sender];\\n        uint256[] memory _claimedRewards = new uint256[](rewards.length);\\n        bool _atLeastOneNonZeroClaim = false;\\n        for (uint256 _i; _i < rewards.length; _i++) {\\n            Reward storage _reward = rewards[_i];\\n            StakerRewardInfo storage _stakerRewardInfo =\\n                _staker.rewardInfo[_reward.token];\\n            uint256 _claimableReward =\\n                _stakerRewardInfo.earned - _stakerRewardInfo.claimed;\\n            uint256 _wantedAmount = _amounts[_i];\\n            require(_claimableReward >= _wantedAmount, \\\"SRD15\\\");\\n            if (!_atLeastOneNonZeroClaim && _wantedAmount > 0)\\n                _atLeastOneNonZeroClaim = true;\\n            _stakerRewardInfo.claimed += _wantedAmount;\\n            _reward.claimed += _wantedAmount;\\n            IERC20(_reward.token).safeTransfer(_recipient, _wantedAmount);\\n            _claimedRewards[_i] = _wantedAmount;\\n        }\\n        require(_atLeastOneNonZeroClaim, \\\"SRD24\\\");\\n        emit Claimed(msg.sender, _claimedRewards);\\n    }\\n\\n    function claimAll(address _recipient) public onlyStarted {\\n        consolidateReward();\\n        Staker storage _staker = stakers[msg.sender];\\n        uint256[] memory _claimedRewards = new uint256[](rewards.length);\\n        bool _atLeastOneNonZeroClaim = false;\\n        for (uint256 _i; _i < rewards.length; _i++) {\\n            Reward storage _reward = rewards[_i];\\n            StakerRewardInfo storage _stakerRewardInfo =\\n                _staker.rewardInfo[_reward.token];\\n            uint256 _claimableReward =\\n                _stakerRewardInfo.earned - _stakerRewardInfo.claimed;\\n            if (!_atLeastOneNonZeroClaim && _claimableReward > 0)\\n                _atLeastOneNonZeroClaim = true;\\n            _stakerRewardInfo.claimed += _claimableReward;\\n            _reward.claimed += _claimableReward;\\n            IERC20(_reward.token).safeTransfer(_recipient, _claimableReward);\\n            _claimedRewards[_i] = _claimableReward;\\n        }\\n        require(_atLeastOneNonZeroClaim, \\\"SRD23\\\");\\n        emit Claimed(msg.sender, _claimedRewards);\\n    }\\n\\n    function exit(address _recipient) external onlyStarted {\\n        claimAll(_recipient);\\n        withdraw(stakers[msg.sender].stake);\\n    }\\n\\n    function consolidateReward() private {\\n        uint64 _consolidationTimestamp =\\n            uint64(Math.min(block.timestamp, endingTimestamp));\\n        uint256 _lastPeriodDuration =\\n            uint256(_consolidationTimestamp - lastConsolidationTimestamp);\\n        Staker storage _staker = stakers[msg.sender];\\n        for (uint256 _i; _i < rewards.length; _i++) {\\n            Reward storage _reward = rewards[_i];\\n            StakerRewardInfo storage _stakerRewardInfo =\\n                _staker.rewardInfo[_reward.token];\\n            if (_lastPeriodDuration > 0) {\\n                if (totalStakedTokensAmount == 0) {\\n                    _reward.recoverableSeconds +=\\n                        _lastPeriodDuration *\\n                        MULTIPLIER;\\n                    // no need to update the reward per staked token since in this period\\n                    // there have been no staked tokens, so no reward has been given out to stakers\\n                } else {\\n                    _reward.perStakedToken += ((_lastPeriodDuration *\\n                        _reward.amount *\\n                        MULTIPLIER) /\\n                        (totalStakedTokensAmount * secondsDuration));\\n                }\\n            }\\n            uint256 _rewardSinceLastConsolidation =\\n                (_staker.stake *\\n                    (_reward.perStakedToken -\\n                        _stakerRewardInfo.consolidatedPerStakedToken)) /\\n                    MULTIPLIER;\\n            if (_rewardSinceLastConsolidation > 0) {\\n                _stakerRewardInfo.earned += _rewardSinceLastConsolidation;\\n            }\\n            _stakerRewardInfo.consolidatedPerStakedToken = _reward\\n                .perStakedToken;\\n        }\\n        lastConsolidationTimestamp = _consolidationTimestamp;\\n    }\\n\\n    function claimableRewards(address _account)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory _outstandingRewards = new uint256[](rewards.length);\\n        if (!initialized || block.timestamp < startingTimestamp) {\\n            for (uint256 _i; _i < rewards.length; _i++) {\\n                _outstandingRewards[_i] = 0;\\n            }\\n            return _outstandingRewards;\\n        }\\n        Staker storage _staker = stakers[_account];\\n        uint64 _consolidationTimestamp =\\n            uint64(Math.min(block.timestamp, endingTimestamp));\\n        uint256 _lastPeriodDuration =\\n            uint256(_consolidationTimestamp - lastConsolidationTimestamp);\\n        for (uint256 _i; _i < rewards.length; _i++) {\\n            Reward storage _reward = rewards[_i];\\n            StakerRewardInfo storage _stakerRewardInfo =\\n                _staker.rewardInfo[_reward.token];\\n            uint256 _localRewardPerStakedToken = _reward.perStakedToken;\\n            if (_lastPeriodDuration > 0 && totalStakedTokensAmount > 0) {\\n                _localRewardPerStakedToken += ((_lastPeriodDuration *\\n                    _reward.amount *\\n                    MULTIPLIER) / (totalStakedTokensAmount * secondsDuration));\\n            }\\n            uint256 _rewardSinceLastConsolidation =\\n                (_staker.stake *\\n                    (_localRewardPerStakedToken -\\n                        _stakerRewardInfo.consolidatedPerStakedToken)) /\\n                    MULTIPLIER;\\n            _outstandingRewards[_i] =\\n                _rewardSinceLastConsolidation +\\n                (_stakerRewardInfo.earned - _stakerRewardInfo.claimed);\\n        }\\n        return _outstandingRewards;\\n    }\\n\\n    function getRewardTokens() external view returns (address[] memory) {\\n        address[] memory _rewardTokens = new address[](rewards.length);\\n        for (uint256 _i = 0; _i < rewards.length; _i++) {\\n            _rewardTokens[_i] = rewards[_i].token;\\n        }\\n        return _rewardTokens;\\n    }\\n\\n    function rewardAmount(address _rewardToken)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        for (uint256 _i = 0; _i < rewards.length; _i++) {\\n            Reward storage _reward = rewards[_i];\\n            if (_rewardToken == _reward.token) return _reward.amount;\\n        }\\n        return 0;\\n    }\\n\\n    function stakedTokensOf(address _staker) external view returns (uint256) {\\n        return stakers[_staker].stake;\\n    }\\n\\n    function earnedRewardsOf(address _staker)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        Staker storage _stakerFromStorage = stakers[_staker];\\n        uint256[] memory _earnedRewards = new uint256[](rewards.length);\\n        for (uint256 _i; _i < rewards.length; _i++) {\\n            _earnedRewards[_i] = _stakerFromStorage.rewardInfo[\\n                rewards[_i].token\\n            ]\\n                .earned;\\n        }\\n        return _earnedRewards;\\n    }\\n\\n    function recoverableUnassignedReward(address _rewardToken)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        for (uint256 _i = 0; _i < rewards.length; _i++) {\\n            Reward storage _reward = rewards[_i];\\n            if (_reward.token == _rewardToken) {\\n                uint256 _nonRequiredFunds =\\n                    _reward.claimed +\\n                        ((_reward.recoverableSeconds * _reward.amount) /\\n                            (uint256(secondsDuration) * MULTIPLIER));\\n                return\\n                    IERC20(_reward.token).balanceOf(address(this)) -\\n                    (_reward.amount - _nonRequiredFunds);\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function getClaimedRewards(address _claimer)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        Staker storage _staker = stakers[_claimer];\\n        uint256[] memory _claimedRewards = new uint256[](rewards.length);\\n        for (uint256 _i = 0; _i < rewards.length; _i++) {\\n            Reward storage _reward = rewards[_i];\\n            _claimedRewards[_i] = _staker.rewardInfo[_reward.token].claimed;\\n        }\\n        return _claimedRewards;\\n    }\\n\\n    function renounceOwnership() public onlyOwner {\\n        owner = address(0);\\n        emit OwnershipTransferred(owner, address(0));\\n    }\\n\\n    function transferOwnership(address _newOwner) public onlyOwner {\\n        require(_newOwner != address(0), \\\"SRD16\\\");\\n        emit OwnershipTransferred(owner, _newOwner);\\n        owner = _newOwner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"SRD17\\\");\\n        _;\\n    }\\n\\n    modifier onlyUninitialized() {\\n        require(!initialized, \\\"SRD18\\\");\\n        _;\\n    }\\n\\n    modifier onlyStarted() {\\n        require(\\n            initialized && !canceled && block.timestamp >= startingTimestamp,\\n            \\\"SRD20\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyRunning() {\\n        require(\\n            initialized &&\\n                !canceled &&\\n                block.timestamp >= startingTimestamp &&\\n                block.timestamp <= endingTimestamp,\\n            \\\"SRD21\\\"\\n        );\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"erc20-staking-rewards-distribution-contracts/interfaces/IERC20StakingRewardsDistributionFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\ninterface IERC20StakingRewardsDistributionFactory {\\n    function createDistribution(\\n        address[] calldata _rewardTokenAddresses,\\n        address _stakableTokenAddress,\\n        uint256[] calldata _rewardAmounts,\\n        uint64 _startingTimestamp,\\n        uint64 _endingTimestamp,\\n        bool _locked,\\n        uint256 _stakingCap\\n    ) external;\\n\\n    function getDistributionsAmount() external view returns (uint256);\\n\\n    function implementation() external view returns (address);\\n\\n    function upgradeTo(address newImplementation) external;\\n\\n    function distributions(uint256 _index) external returns (address);\\n\\n    function stakingPaused() external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[],\"name\":\"Canceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"rewardsTokenAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakableTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewardsAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"startingTimestamp\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"endingTimestamp\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingCap\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canceled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"claimableRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"earnedRewardsOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endingTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"getClaimedRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_stakableTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint64\",\"name\":\"_startingTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_endingTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_stakingCap\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastConsolidationTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverUnassignedRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"recoverableUnassignedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"rewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perStakedToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recoverableSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsDuration\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakableToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"stakedTokensOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedTokensAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ERC20StakingRewardsDistribution","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}