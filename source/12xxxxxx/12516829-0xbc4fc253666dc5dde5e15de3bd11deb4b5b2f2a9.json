{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MultiTokenStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol\\\";\\r\\nimport \\\"@boringcrypto/boring-solidity/contracts/BoringBatchable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./libraries/SignedSafeMath.sol\\\";\\r\\nimport \\\"./interfaces/IRewarder.sol\\\";\\r\\nimport \\\"./interfaces/IRewardsSchedule.sol\\\";\\r\\n\\r\\n/************************************************************************************************\\r\\nOriginally from\\r\\nhttps://github.com/sushiswap/sushiswap/blob/master/contracts/MasterChefV2.sol\\r\\nand\\r\\nhttps://github.com/sushiswap/sushiswap/blob/master/contracts/MasterChef.sol\\r\\n\\r\\nThis source code has been modified from the original, which was copied from the github repository\\r\\nat commit hash 10148a31d9192bc803dac5d24fe0319b52ae99a4.\\r\\n*************************************************************************************************/\\r\\n\\r\\n\\r\\ncontract MultiTokenStaking is Ownable, BoringBatchable {\\r\\n  using BoringMath for uint256;\\r\\n  using BoringMath128 for uint128;\\r\\n  using BoringERC20 for IERC20;\\r\\n  using SignedSafeMath for int256;\\r\\n\\r\\n/** ==========  Constants  ========== */\\r\\n\\r\\n  uint256 private constant ACC_REWARDS_PRECISION = 1e12;\\r\\n\\r\\n  /**\\r\\n   * @dev ERC20 token used to distribute rewards.\\r\\n   */\\r\\n  IERC20 public immutable rewardsToken;\\r\\n\\r\\n  /**\\r\\n   * @dev Contract that determines the amount of rewards distributed per block.\\r\\n   * Note: This contract MUST always return the exact same value for any\\r\\n   * combination of `(from, to)` IF `from` is less than `block.number`.\\r\\n   */\\r\\n  IRewardsSchedule public immutable rewardsSchedule;\\r\\n\\r\\n/** ==========  Structs  ========== */\\r\\n\\r\\n  /**\\r\\n   * @dev Info of each user.\\r\\n   * @param amount LP token amount the user has provided.\\r\\n   * @param rewardDebt The amount of rewards entitled to the user.\\r\\n   */\\r\\n  struct UserInfo {\\r\\n    uint256 amount;\\r\\n    int256 rewardDebt;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Info of each rewards pool.\\r\\n   * @param accRewardsPerShare Total rewards accumulated per staked token.\\r\\n   * @param lastRewardBlock Last time rewards were updated for the pool.\\r\\n   * @param allocPoint The amount of allocation points assigned to the pool.\\r\\n   */\\r\\n  struct PoolInfo {\\r\\n    uint128 accRewardsPerShare;\\r\\n    uint64 lastRewardBlock;\\r\\n    uint64 allocPoint;\\r\\n  }\\r\\n\\r\\n/** ==========  Events  ========== */\\r\\n\\r\\n  event Deposit(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\\r\\n  event Withdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\\r\\n  event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\\r\\n  event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n  event LogPoolAddition(uint256 indexed pid, uint256 allocPoint, IERC20 indexed lpToken, IRewarder indexed rewarder);\\r\\n  event LogSetPool(uint256 indexed pid, uint256 allocPoint, IRewarder indexed rewarder, bool overwrite);\\r\\n  event LogUpdatePool(uint256 indexed pid, uint64 lastRewardBlock, uint256 lpSupply, uint256 accRewardsPerShare);\\r\\n  event RewardsAdded(uint256 amount);\\r\\n  event PointsAllocatorSet(address pointsAllocator);\\r\\n\\r\\n/** ==========  Storage  ========== */\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates whether a staking pool exists for a given staking token.\\r\\n   */\\r\\n  mapping(address => bool) public stakingPoolExists;\\r\\n\\r\\n  /**\\r\\n   * @dev Info of each staking pool.\\r\\n   */\\r\\n  PoolInfo[] public poolInfo;\\r\\n\\r\\n  /**\\r\\n   * @dev Address of the LP token for each staking pool.\\r\\n   */\\r\\n  mapping(uint256 => IERC20) public lpToken;\\r\\n\\r\\n  /**\\r\\n   * @dev Address of each `IRewarder` contract.\\r\\n   */\\r\\n  mapping(uint256 => IRewarder) public rewarder;\\r\\n\\r\\n  /**\\r\\n   * @dev Info of each user that stakes tokens.\\r\\n   */\\r\\n  mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\r\\n\\r\\n  /**\\r\\n   * @dev Total allocation points. Must be the sum of all allocation points in all pools.\\r\\n   */\\r\\n  uint256 public totalAllocPoint = 0;\\r\\n\\r\\n  /**\\r\\n   * @dev Account allowed to allocate points.\\r\\n   */\\r\\n  address public pointsAllocator;\\r\\n\\r\\n  /**\\r\\n   * @dev Total rewards received from governance for distribution.\\r\\n   * Used to return remaining rewards if staking is canceled.\\r\\n   */\\r\\n  uint256 public totalRewardsReceived;\\r\\n\\r\\n  function poolLength() external view returns (uint256) {\\r\\n    return poolInfo.length;\\r\\n  }\\r\\n\\r\\n/** ==========  Modifiers  ========== */\\r\\n\\r\\n  /**\\r\\n   * @dev Ensure the caller is allowed to allocate points.\\r\\n   */\\r\\n  modifier onlyPointsAllocatorOrOwner {\\r\\n    require(\\r\\n      msg.sender == pointsAllocator || msg.sender == owner(),\\r\\n      \\\"MultiTokenStaking: not authorized to allocate points\\\"\\r\\n    );\\r\\n    _;\\r\\n  }\\r\\n\\r\\n/** ==========  Constructor  ========== */\\r\\n\\r\\n  constructor(address _rewardsToken, address _rewardsSchedule) public {\\r\\n    rewardsToken = IERC20(_rewardsToken);\\r\\n    rewardsSchedule = IRewardsSchedule(_rewardsSchedule);\\r\\n  }\\r\\n\\r\\n/** ==========  Governance  ========== */\\r\\n\\r\\n  /**\\r\\n   * @dev Set the address of the points allocator.\\r\\n   * This account will have the ability to set allocation points for LP rewards.\\r\\n   */\\r\\n  function setPointsAllocator(address _pointsAllocator) external onlyOwner {\\r\\n    pointsAllocator = _pointsAllocator;\\r\\n    emit PointsAllocatorSet(_pointsAllocator);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Add rewards to be distributed.\\r\\n   *\\r\\n   * Note: This function must be used to add rewards if the owner\\r\\n   * wants to retain the option to cancel distribution and reclaim\\r\\n   * undistributed tokens.\\r\\n   */\\r\\n  function addRewards(uint256 amount) external onlyPointsAllocatorOrOwner {\\r\\n    rewardsToken.safeTransferFrom(msg.sender, address(this), amount);\\r\\n    totalRewardsReceived = totalRewardsReceived.add(amount);\\r\\n    emit RewardsAdded(amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Set the early end block for rewards on the rewards\\r\\n   * schedule contract and return any tokens which will not\\r\\n   * be distributed by the early end block.\\r\\n   */\\r\\n  function setEarlyEndBlock(uint256 earlyEndBlock) external onlyOwner {\\r\\n    // Rewards schedule contract must assert that an early end block has not\\r\\n    // already been set, otherwise this can be used to drain the staking\\r\\n    // contract, meaning users will not receive earned rewards.\\r\\n    uint256 totalRewards = rewardsSchedule.getRewardsForBlockRange(\\r\\n      rewardsSchedule.startBlock(),\\r\\n      earlyEndBlock\\r\\n    );\\r\\n    uint256 undistributedAmount = totalRewardsReceived.sub(totalRewards);\\r\\n    rewardsSchedule.setEarlyEndBlock(earlyEndBlock);\\r\\n    rewardsToken.safeTransfer(owner(), undistributedAmount);\\r\\n  }\\r\\n\\r\\n/** ==========  Pools  ========== */\\r\\n  /**\\r\\n   * @dev Add a new LP to the pool.\\r\\n   * Can only be called by the owner or the points allocator.\\r\\n   * @param _allocPoint AP of the new pool.\\r\\n   * @param _lpToken Address of the LP ERC-20 token.\\r\\n   * @param _rewarder Address of the rewarder delegate.\\r\\n   */\\r\\n  function add(uint256 _allocPoint, IERC20 _lpToken, IRewarder _rewarder) public onlyPointsAllocatorOrOwner {\\r\\n    require(!stakingPoolExists[address(_lpToken)], \\\"MultiTokenStaking: Staking pool already exists.\\\");\\r\\n    uint256 pid = poolInfo.length;\\r\\n    totalAllocPoint = totalAllocPoint.add(_allocPoint);\\r\\n    lpToken[pid] = _lpToken;\\r\\n    if (address(_rewarder) != address(0)) {\\r\\n      rewarder[pid] = _rewarder;\\r\\n    }\\r\\n    poolInfo.push(PoolInfo({\\r\\n      allocPoint: _allocPoint.to64(),\\r\\n      lastRewardBlock: block.number.to64(),\\r\\n      accRewardsPerShare: 0\\r\\n    }));\\r\\n    stakingPoolExists[address(_lpToken)] = true;\\r\\n\\r\\n    emit LogPoolAddition(pid, _allocPoint, _lpToken, _rewarder);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Update the given pool's allocation points.\\r\\n   * Can only be called by the owner or the points allocator.\\r\\n   * @param _pid The index of the pool. See `poolInfo`.\\r\\n   * @param _allocPoint New AP of the pool.\\r\\n   * @param _rewarder Address of the rewarder delegate.\\r\\n   * @param _overwrite True if _rewarder should be `set`. Otherwise `_rewarder` is ignored.\\r\\n   */\\r\\n  function set(uint256 _pid, uint256 _allocPoint, IRewarder _rewarder, bool _overwrite) public onlyPointsAllocatorOrOwner {\\r\\n    totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\r\\n    poolInfo[_pid].allocPoint = _allocPoint.to64();\\r\\n    if (_overwrite) {\\r\\n      rewarder[_pid] = _rewarder;\\r\\n    }\\r\\n    emit LogSetPool(_pid, _allocPoint, _overwrite ? _rewarder : rewarder[_pid], _overwrite);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Update reward variables for all pools in `pids`.\\r\\n   * Note: This can become very expensive.\\r\\n   * @param pids Pool IDs of all to be updated. Make sure to update all active pools.\\r\\n   */\\r\\n  function massUpdatePools(uint256[] calldata pids) external {\\r\\n    uint256 len = pids.length;\\r\\n    for (uint256 i = 0; i < len; ++i) {\\r\\n      updatePool(pids[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Update reward variables of the given pool.\\r\\n   * @param _pid The index of the pool. See `poolInfo`.\\r\\n   * @return pool Returns the pool that was updated.\\r\\n   */\\r\\n  function updatePool(uint256 _pid) public returns (PoolInfo memory pool) {\\r\\n    pool = poolInfo[_pid];\\r\\n    if (block.number > pool.lastRewardBlock) {\\r\\n      uint256 lpSupply = lpToken[_pid].balanceOf(address(this));\\r\\n      if (lpSupply > 0) {\\r\\n        uint256 rewardsTotal = rewardsSchedule.getRewardsForBlockRange(pool.lastRewardBlock, block.number);\\r\\n        uint256 poolReward = rewardsTotal.mul(pool.allocPoint) / totalAllocPoint;\\r\\n        pool.accRewardsPerShare = pool.accRewardsPerShare.add((poolReward.mul(ACC_REWARDS_PRECISION) / lpSupply).to128());\\r\\n      }\\r\\n      pool.lastRewardBlock = block.number.to64();\\r\\n      poolInfo[_pid] = pool;\\r\\n      emit LogUpdatePool(_pid, pool.lastRewardBlock, lpSupply, pool.accRewardsPerShare);\\r\\n    }\\r\\n  }\\r\\n\\r\\n/** ==========  Users  ========== */\\r\\n\\r\\n  /**\\r\\n   * @dev View function to see pending rewards on frontend.\\r\\n   * @param _pid The index of the pool. See `poolInfo`.\\r\\n   * @param _user Address of user.\\r\\n   * @return pending rewards for a given user.\\r\\n   */\\r\\n  function pendingRewards(uint256 _pid, address _user) external view returns (uint256 pending) {\\r\\n    PoolInfo memory pool = poolInfo[_pid];\\r\\n    UserInfo storage user = userInfo[_pid][_user];\\r\\n    uint256 accRewardsPerShare = pool.accRewardsPerShare;\\r\\n    uint256 lpSupply = lpToken[_pid].balanceOf(address(this));\\r\\n    if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\r\\n      uint256 rewardsTotal = rewardsSchedule.getRewardsForBlockRange(pool.lastRewardBlock, block.number);\\r\\n      uint256 poolReward = rewardsTotal.mul(pool.allocPoint) / totalAllocPoint;\\r\\n      accRewardsPerShare = accRewardsPerShare.add(poolReward.mul(ACC_REWARDS_PRECISION) / lpSupply);\\r\\n    }\\r\\n    pending = int256(user.amount.mul(accRewardsPerShare) / ACC_REWARDS_PRECISION).sub(user.rewardDebt).toUInt256();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Deposit LP tokens to earn rewards.\\r\\n   * @param _pid The index of the pool. See `poolInfo`.\\r\\n   * @param _amount LP token amount to deposit.\\r\\n   * @param _to The receiver of `_amount` deposit benefit.\\r\\n   */\\r\\n  function deposit(uint256 _pid, uint256 _amount, address _to) public {\\r\\n    PoolInfo memory pool = updatePool(_pid);\\r\\n    UserInfo storage user = userInfo[_pid][_to];\\r\\n\\r\\n    // Effects\\r\\n    user.amount = user.amount.add(_amount);\\r\\n    user.rewardDebt = user.rewardDebt.add(int256(_amount.mul(pool.accRewardsPerShare) / ACC_REWARDS_PRECISION));\\r\\n\\r\\n    // Interactions\\r\\n    lpToken[_pid].safeTransferFrom(msg.sender, address(this), _amount);\\r\\n\\r\\n    emit Deposit(msg.sender, _pid, _amount, _to);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Withdraw LP tokens from the staking contract.\\r\\n   * @param _pid The index of the pool. See `poolInfo`.\\r\\n   * @param _amount LP token amount to withdraw.\\r\\n   * @param _to Receiver of the LP tokens.\\r\\n   */\\r\\n  function withdraw(uint256 _pid, uint256 _amount, address _to) public {\\r\\n    PoolInfo memory pool = updatePool(_pid);\\r\\n    UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\r\\n    // Effects\\r\\n    user.rewardDebt = user.rewardDebt.sub(int256(_amount.mul(pool.accRewardsPerShare) / ACC_REWARDS_PRECISION));\\r\\n    user.amount = user.amount.sub(_amount);\\r\\n\\r\\n    // Interactions\\r\\n    lpToken[_pid].safeTransfer(_to, _amount);\\r\\n\\r\\n    emit Withdraw(msg.sender, _pid, _amount, _to);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Harvest proceeds for transaction sender to `_to`.\\r\\n   * @param _pid The index of the pool. See `poolInfo`.\\r\\n   * @param _to Receiver of rewards.\\r\\n   */\\r\\n  function harvest(uint256 _pid, address _to) public {\\r\\n    PoolInfo memory pool = updatePool(_pid);\\r\\n    UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n    int256 accumulatedRewards = int256(user.amount.mul(pool.accRewardsPerShare) / ACC_REWARDS_PRECISION);\\r\\n    uint256 _pendingRewards = accumulatedRewards.sub(user.rewardDebt).toUInt256();\\r\\n\\r\\n    // Effects\\r\\n    user.rewardDebt = accumulatedRewards;\\r\\n\\r\\n    // Interactions\\r\\n    rewardsToken.safeTransfer(_to, _pendingRewards);\\r\\n\\r\\n    address _rewarder = address(rewarder[_pid]);\\r\\n    if (_rewarder != address(0)) {\\r\\n      IRewarder(_rewarder).onStakingReward(_pid, msg.sender, _pendingRewards);\\r\\n    }\\r\\n    emit Harvest(msg.sender, _pid, _pendingRewards);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Withdraw LP tokens and harvest accumulated rewards, sending both to `to`.\\r\\n   * @param _pid The index of the pool. See `poolInfo`.\\r\\n   * @param _amount LP token amount to withdraw.\\r\\n   * @param _to Receiver of the LP tokens and rewards.\\r\\n   */\\r\\n  function withdrawAndHarvest(uint256 _pid, uint256 _amount, address _to) public {\\r\\n    PoolInfo memory pool = updatePool(_pid);\\r\\n    UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n    int256 accumulatedRewards = int256(user.amount.mul(pool.accRewardsPerShare) / ACC_REWARDS_PRECISION);\\r\\n    uint256 _pendingRewards = accumulatedRewards.sub(user.rewardDebt).toUInt256();\\r\\n\\r\\n    // Effects\\r\\n    user.rewardDebt = accumulatedRewards.sub(int256(_amount.mul(pool.accRewardsPerShare) / ACC_REWARDS_PRECISION));\\r\\n    user.amount = user.amount.sub(_amount);\\r\\n\\r\\n    // Interactions\\r\\n    rewardsToken.safeTransfer(_to, _pendingRewards);\\r\\n    lpToken[_pid].safeTransfer(_to, _amount);\\r\\n    address _rewarder = address(rewarder[_pid]);\\r\\n    if (_rewarder != address(0)) {\\r\\n      IRewarder(_rewarder).onStakingReward(_pid, msg.sender, _pendingRewards);\\r\\n    }\\r\\n\\r\\n    emit Harvest(msg.sender, _pid, _pendingRewards);\\r\\n    emit Withdraw(msg.sender, _pid, _amount, _to);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Withdraw without caring about rewards. EMERGENCY ONLY.\\r\\n   * @param _pid The index of the pool. See `poolInfo`.\\r\\n   * @param _to Receiver of the LP tokens.\\r\\n   */\\r\\n  function emergencyWithdraw(uint256 _pid, address _to) public {\\r\\n    UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n    uint256 amount = user.amount;\\r\\n    user.amount = 0;\\r\\n    user.rewardDebt = 0;\\r\\n    // Note: transfer can fail or succeed if `amount` is zero.\\r\\n    lpToken[_pid].safeTransfer(_to, amount);\\r\\n    emit EmergencyWithdraw(msg.sender, _pid, amount, _to);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n// a library for performing overflow-safe math, updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math)\\r\\nlibrary BoringMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");}\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");}\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {require(b == 0 || (c = a * b)/b == a, \\\"BoringMath: Mul Overflow\\\");}\\r\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\r\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\r\\n        c = uint128(a);\\r\\n    }\\r\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\r\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\r\\n        c = uint64(a);\\r\\n    }\\r\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\r\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\r\\n        c = uint32(a);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary BoringMath128 {\\r\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");}\\r\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");}\\r\\n}\\r\\n\\r\\nlibrary BoringMath64 {\\r\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");}\\r\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");}\\r\\n}\\r\\n\\r\\nlibrary BoringMath32 {\\r\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");}\\r\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");}\\r\\n}\"\r\n    },\r\n    \"@boringcrypto/boring-solidity/contracts/BoringBatchable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\r\\n\\r\\n// P1 - P3: OK\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n// solhint-disable avoid-low-level-calls\\r\\n\\r\\nimport \\\"./libraries/BoringERC20.sol\\\";\\r\\n\\r\\n// T1 - T4: OK\\r\\ncontract BaseBoringBatchable {\\r\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\r\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\r\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\r\\n\\r\\n        assembly {\\r\\n            // Slice the sighash.\\r\\n            _returnData := add(_returnData, 0x04)\\r\\n        }\\r\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\r\\n    }    \\r\\n    \\r\\n    // F3 - F9: OK\\r\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\r\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\r\\n    // C1 - C21: OK\\r\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\r\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\r\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns(bool[] memory successes, bytes[] memory results) {\\r\\n        // Interactions\\r\\n        successes = new bool[](calls.length);\\r\\n        results = new bytes[](calls.length);\\r\\n        for (uint256 i = 0; i < calls.length; i++) {\\r\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\r\\n            require(success || !revertOnFail, _getRevertMsg(result));\\r\\n            successes[i] = success;\\r\\n            results[i] = result;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// T1 - T4: OK\\r\\ncontract BoringBatchable is BaseBoringBatchable {\\r\\n    // F1 - F9: OK\\r\\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\r\\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\\r\\n    // C1 - C21: OK\\r\\n    function permitToken(IERC20 token, address from, address to, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\r\\n        // Interactions\\r\\n        // X1 - X5\\r\\n        token.permit(from, to, amount, deadline, v, r, s);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SignedSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nlibrary SignedSafeMath {\\r\\n  int256 constant private _INT256_MIN = -2**255;\\r\\n\\r\\n  /**\\r\\n    * @dev Returns the multiplication of two signed integers, reverting on\\r\\n    * overflow.\\r\\n    *\\r\\n    * Counterpart to Solidity's `*` operator.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - Multiplication cannot overflow.\\r\\n    */\\r\\n  function mul(int256 a, int256 b) internal pure returns (int256) {\\r\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n    // benefit is lost if 'b' is also tested.\\r\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\r\\n\\r\\n    int256 c = a * b;\\r\\n    require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Returns the integer division of two signed integers. Reverts on\\r\\n    * division by zero. The result is rounded towards zero.\\r\\n    *\\r\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - The divisor cannot be zero.\\r\\n    */\\r\\n  function div(int256 a, int256 b) internal pure returns (int256) {\\r\\n    require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\r\\n    require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\r\\n\\r\\n    int256 c = a / b;\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Returns the subtraction of two signed integers, reverting on\\r\\n    * overflow.\\r\\n    *\\r\\n    * Counterpart to Solidity's `-` operator.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - Subtraction cannot overflow.\\r\\n    */\\r\\n  function sub(int256 a, int256 b) internal pure returns (int256) {\\r\\n    int256 c = a - b;\\r\\n    require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Returns the addition of two signed integers, reverting on\\r\\n    * overflow.\\r\\n    *\\r\\n    * Counterpart to Solidity's `+` operator.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - Addition cannot overflow.\\r\\n    */\\r\\n  function add(int256 a, int256 b) internal pure returns (int256) {\\r\\n    int256 c = a + b;\\r\\n    require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function toUInt256(int256 a) internal pure returns (uint256) {\\r\\n    require(a >= 0, \\\"Integer < 0\\\");\\r\\n    return uint256(a);\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRewarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n\\r\\ninterface IRewarder {\\r\\n  function onStakingReward(uint256 pid, address user, uint256 rewardAmount) external;\\r\\n  function pendingTokens(uint256 pid, address user, uint256 rewardAmount) external returns (address[] memory, uint256[] memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardsSchedule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n\\r\\ninterface IRewardsSchedule {\\r\\n  event EarlyEndBlockSet(uint256 earlyEndBlock);\\r\\n\\r\\n  function startBlock() external view returns (uint256);\\r\\n  function endBlock() external view returns (uint256);\\r\\n  function getRewardsForBlockRange(uint256 from, uint256 to) external view returns (uint256);\\r\\n  function setEarlyEndBlock(uint256 earlyEndBlock) external;\\r\\n}\"\r\n    },\r\n    \"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../interfaces/IERC20.sol\\\";\\r\\n\\r\\nlibrary BoringERC20 {\\r\\n    function safeSymbol(IERC20 token) internal view returns(string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41));\\r\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    function safeName(IERC20 token) internal view returns(string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03));\\r\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567));\\r\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\r\\n    }\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 amount) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0xa9059cbb, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0x23b872dd, from, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    // EIP 2612\\r\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsSchedule\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IRewarder\",\"name\":\"rewarder\",\"type\":\"address\"}],\"name\":\"LogPoolAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IRewarder\",\"name\":\"rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"overwrite\",\"type\":\"bool\"}],\"name\":\"LogSetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"lastRewardBlock\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accRewardsPerShare\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pointsAllocator\",\"type\":\"address\"}],\"name\":\"PointsAllocatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"calls\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"revertOnFail\",\"type\":\"bool\"}],\"name\":\"batch\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"successes\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"}],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pointsAllocator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"accRewardsPerShare\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"lastRewardBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"allocPoint\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewarder\",\"outputs\":[{\"internalType\":\"contract IRewarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsSchedule\",\"outputs\":[{\"internalType\":\"contract IRewardsSchedule\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_overwrite\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"earlyEndBlock\",\"type\":\"uint256\"}],\"name\":\"setEarlyEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pointsAllocator\",\"type\":\"address\"}],\"name\":\"setPointsAllocator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingPoolExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"accRewardsPerShare\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"lastRewardBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"allocPoint\",\"type\":\"uint64\"}],\"internalType\":\"struct MultiTokenStaking.PoolInfo\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardDebt\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawAndHarvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MultiTokenStaking","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000a55375002f3cda400383f479e7cd57bad029a900000000000000000000000045a68c45bdc4cccac5e1dc097258dc62cb44d659","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}