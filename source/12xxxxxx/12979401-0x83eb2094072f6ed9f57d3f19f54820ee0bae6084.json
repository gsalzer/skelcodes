{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.8.3;\r\n\r\n/** \r\n @author Tellor Inc.\r\n @title ITellor\r\n @dev  This contract holds the interface for all Tellor functions\r\n**/\r\ninterface ITellor {\r\n    /*Events*/\r\n    event NewTellorAddress(address _newTellor);\r\n    event NewDispute(\r\n        uint256 indexed _disputeId,\r\n        uint256 indexed _requestId,\r\n        uint256 _timestamp,\r\n        address _miner\r\n    );\r\n    event Voted(\r\n        uint256 indexed _disputeID,\r\n        bool _position,\r\n        address indexed _voter,\r\n        uint256 indexed _voteWeight\r\n    );\r\n    event DisputeVoteTallied(\r\n        uint256 indexed _disputeID,\r\n        int256 _result,\r\n        address indexed _reportedMiner,\r\n        address _reportingParty,\r\n        bool _passed\r\n    );\r\n    event TipAdded(\r\n        address indexed _sender,\r\n        uint256 indexed _requestId,\r\n        uint256 _tip,\r\n        uint256 _totalTips\r\n    );\r\n    event NewChallenge(\r\n        bytes32 indexed _currentChallenge,\r\n        uint256[5] _currentRequestId,\r\n        uint256 _difficulty,\r\n        uint256 _totalTips\r\n    );\r\n    event NewValue(\r\n        uint256[5] _requestId,\r\n        uint256 _time,\r\n        uint256[5] _value,\r\n        uint256 _totalTips,\r\n        bytes32 indexed _currentChallenge\r\n    );\r\n    event NonceSubmitted(\r\n        address indexed _miner,\r\n        string _nonce,\r\n        uint256[5] _requestId,\r\n        uint256[5] _value,\r\n        bytes32 indexed _currentChallenge,\r\n        uint256 _slot\r\n    );\r\n    event NewStake(address indexed _sender); //Emits upon new staker\r\n    event StakeWithdrawn(address indexed _sender); //Emits when a staker is now no longer staked\r\n    event StakeWithdrawRequested(address indexed _sender); //Emits when a staker begins the 7 day withdraw period\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); //ERC20 Transfer Event\r\n\r\n    /*Functions -- master*/\r\n    function changeDeity(address _newDeity) external;\r\n\r\n    function changeOwner(address _newOwner) external;\r\n\r\n    function changeTellorContract(address _tellorContract) external;\r\n\r\n    /*Functions -- Extension*/\r\n    function depositStake() external;\r\n\r\n    function requestStakingWithdraw() external;\r\n\r\n    function tallyVotes(uint256 _disputeId) external;\r\n\r\n    function updateMinDisputeFee() external;\r\n\r\n    function updateTellor(uint256 _disputeId) external;\r\n\r\n    function withdrawStake() external;\r\n\r\n    /*Functions -- Tellor*/\r\n    function addTip(uint256 _requestId, uint256 _tip) external;\r\n\r\n    function changeExtension(address _extension) external;\r\n\r\n    function changeMigrator(address _migrator) external;\r\n\r\n    function migrate() external;\r\n\r\n    function migrateFor(\r\n        address _destination,\r\n        uint256 _amount,\r\n        bool _bypass\r\n    ) external;\r\n\r\n    function migrateForBatch(\r\n        address[] calldata _destination,\r\n        uint256[] calldata _amount\r\n    ) external;\r\n\r\n    function migrateFrom(\r\n        address _origin,\r\n        address _destination,\r\n        uint256 _amount,\r\n        bool _bypass\r\n    ) external;\r\n\r\n    function migrateFromBatch(\r\n        address[] calldata _origin,\r\n        address[] calldata _destination,\r\n        uint256[] calldata _amount\r\n    ) external;\r\n\r\n    function submitMiningSolution(\r\n        string calldata _nonce,\r\n        uint256[5] calldata _requestIds,\r\n        uint256[5] calldata _values\r\n    ) external;\r\n\r\n    /*Functions -- TellorGetters*/\r\n    function didMine(bytes32 _challenge, address _miner)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function didVote(uint256 _disputeId, address _address)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function getAddressVars(bytes32 _data) external view returns (address);\r\n\r\n    function getAllDisputeVars(uint256 _disputeId)\r\n        external\r\n        view\r\n        returns (\r\n            bytes32,\r\n            bool,\r\n            bool,\r\n            bool,\r\n            address,\r\n            address,\r\n            address,\r\n            uint256[9] memory,\r\n            int256\r\n        );\r\n\r\n    function getDisputeIdByDisputeHash(bytes32 _hash)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getDisputeUintVars(uint256 _disputeId, bytes32 _data)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getLastNewValue() external view returns (uint256, bool);\r\n\r\n    function getLastNewValueById(uint256 _requestId)\r\n        external\r\n        view\r\n        returns (uint256, bool);\r\n\r\n    function getMinedBlockNum(uint256 _requestId, uint256 _timestamp)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getMinersByRequestIdAndTimestamp(\r\n        uint256 _requestId,\r\n        uint256 _timestamp\r\n    ) external view returns (address[5] memory);\r\n\r\n    function getNewValueCountbyRequestId(uint256 _requestId)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getRequestIdByRequestQIndex(uint256 _index)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getRequestIdByTimestamp(uint256 _timestamp)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getRequestQ() external view returns (uint256[51] memory);\r\n\r\n    function getRequestUintVars(uint256 _requestId, bytes32 _data)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getRequestVars(uint256 _requestId)\r\n        external\r\n        view\r\n        returns (uint256, uint256);\r\n\r\n    function getStakerInfo(address _staker)\r\n        external\r\n        view\r\n        returns (uint256, uint256);\r\n\r\n    function getSubmissionsByTimestamp(uint256 _requestId, uint256 _timestamp)\r\n        external\r\n        view\r\n        returns (uint256[5] memory);\r\n\r\n    function getTimestampbyRequestIDandIndex(uint256 _requestID, uint256 _index)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getUintVar(bytes32 _data) external view returns (uint256);\r\n\r\n    function isInDispute(uint256 _requestId, uint256 _timestamp)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function retrieveData(uint256 _requestId, uint256 _timestamp)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function getNewCurrentVariables()\r\n        external\r\n        view\r\n        returns (\r\n            bytes32 _challenge,\r\n            uint256[5] memory _requestIds,\r\n            uint256 _difficulty,\r\n            uint256 _tip\r\n        );\r\n\r\n    function getNewVariablesOnDeck()\r\n        external\r\n        view\r\n        returns (uint256[5] memory idsOnDeck, uint256[5] memory tipsOnDeck);\r\n\r\n    function getTopRequestIDs()\r\n        external\r\n        view\r\n        returns (uint256[5] memory _requestIds);\r\n\r\n    /*Functions -- TellorStake*/\r\n    function beginDispute(\r\n        uint256 _requestId,\r\n        uint256 _timestamp,\r\n        uint256 _minerIndex\r\n    ) external;\r\n\r\n    function proposeFork(address _propNewTellorAddress) external;\r\n\r\n    function unlockDisputeFee(uint256 _disputeId) external;\r\n\r\n    function verify() external returns (uint256);\r\n\r\n    function vote(uint256 _disputeId, bool _supportsDispute) external;\r\n\r\n    /*Functions -- TellorTransfer*/\r\n    function approve(address _spender, uint256 _amount) external returns (bool);\r\n\r\n    function allowance(address _user, address _spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function allowedToTrade(address _user, uint256 _amount)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function balanceOf(address _user) external view returns (uint256);\r\n\r\n    function balanceOfAt(address _user, uint256 _blockNumber)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) external returns (bool);\r\n\r\n    //Test Functions\r\n    function theLazyCoon(address _address, uint256 _amount) external;\r\n\r\n    function testSubmitMiningSolution(\r\n        string calldata _nonce,\r\n        uint256[5] calldata _requestId,\r\n        uint256[5] calldata _value\r\n    ) external;\r\n\r\n    function manuallySetDifficulty(uint256 _diff) external;\r\n\r\n    function testgetMax5(uint256[51] memory requests)\r\n        external\r\n        view\r\n        returns (uint256[5] memory _max, uint256[5] memory _index);\r\n}\r\n\r\n/**\r\n  @author Tellor Inc.\r\n  @title TellorStorage\r\n  @dev Contains all the variables/structs used by Tellor\r\n*/\r\ncontract TellorStorage {\r\n    //Internal struct for use in proof-of-work submission\r\n    struct Details {\r\n        uint256 value;\r\n        address miner;\r\n    }\r\n    struct Dispute {\r\n        bytes32 hash; //unique hash of dispute: keccak256(_miner,_requestId,_timestamp)\r\n        int256 tally; //current tally of votes for - against measure\r\n        bool executed; //is the dispute settled\r\n        bool disputeVotePassed; //did the vote pass?\r\n        bool isPropFork; //true for fork proposal NEW\r\n        address reportedMiner; //miner who submitted the 'bad value' will get disputeFee if dispute vote fails\r\n        address reportingParty; //miner reporting the 'bad value'-pay disputeFee will get reportedMiner's stake if dispute vote passes\r\n        address proposedForkAddress; //new fork address (if fork proposal)\r\n        mapping(bytes32 => uint256) disputeUintVars;\r\n        mapping(address => bool) voted; //mapping of address to whether or not they voted\r\n    }\r\n    struct StakeInfo {\r\n        uint256 currentStatus; //0-not Staked, 1=Staked, 2=LockedForWithdraw 3= OnDispute 4=ReadyForUnlocking 5=Unlocked\r\n        uint256 startDate; //stake start date\r\n    }\r\n    //Internal struct to allow balances to be queried by blocknumber for voting purposes\r\n    struct Checkpoint {\r\n        uint128 fromBlock; // fromBlock is the block number that the value was generated from\r\n        uint128 value; // value is the amount of tokens at a specific block number\r\n    }\r\n    struct Request {\r\n        uint256[] requestTimestamps; //array of all newValueTimestamps requested\r\n        mapping(bytes32 => uint256) apiUintVars;\r\n        mapping(uint256 => uint256) minedBlockNum; //[apiId][minedTimestamp]=>block.number\r\n        //This the time series of finalValues stored by the contract where uint UNIX timestamp is mapped to value\r\n        mapping(uint256 => uint256) finalValues;\r\n        mapping(uint256 => bool) inDispute; //checks if API id is in dispute or finalized.\r\n        mapping(uint256 => address[5]) minersByValue;\r\n        mapping(uint256 => uint256[5]) valuesByTimestamp;\r\n    }\r\n    uint256[51] requestQ; //uint50 array of the top50 requests by payment amount\r\n    uint256[] public newValueTimestamps; //array of all timestamps requested\r\n    //This is a boolean that tells you if a given challenge has been completed by a given miner\r\n    mapping(uint256 => uint256) requestIdByTimestamp; //minedTimestamp to apiId\r\n    mapping(uint256 => uint256) requestIdByRequestQIndex; //link from payoutPoolIndex (position in payout pool array) to apiId\r\n    mapping(uint256 => Dispute) public disputesById; //disputeId=> Dispute details\r\n    mapping(bytes32 => uint256) public requestIdByQueryHash; // api bytes32 gets an id = to count of requests array\r\n    mapping(bytes32 => uint256) public disputeIdByDisputeHash; //maps a hash to an ID for each dispute\r\n    mapping(bytes32 => mapping(address => bool)) public minersByChallenge;\r\n    Details[5] public currentMiners; //This struct is for organizing the five mined values to find the median\r\n    mapping(address => StakeInfo) stakerDetails; //mapping from a persons address to their staking info\r\n    mapping(uint256 => Request) requestDetails;\r\n    mapping(bytes32 => uint256) public uints;\r\n    mapping(bytes32 => address) public addresses;\r\n    mapping(bytes32 => bytes32) public bytesVars;\r\n    //ERC20 storage\r\n    mapping(address => Checkpoint[]) public balances;\r\n    mapping(address => mapping(address => uint256)) public _allowances;\r\n    //Migration storage\r\n    mapping(address => bool) public migrated;\r\n\r\n}\r\n\r\n\r\n// File contracts/Parachute.sol\r\n\r\n//SPDX-License-Identifier: Unlicense\r\ncontract Parachute is TellorStorage {\r\n  address constant tellorMaster = 0x88dF592F8eb5D7Bd38bFeF7dEb0fBc02cf3778a0;\r\n  address constant multis = 0x39E419bA25196794B595B2a595Ea8E527ddC9856;\r\n  bytes32 challenge;\r\n  uint256 challengeUpdate;\r\n\r\n  /**\r\n   * @dev Use this function to end parachutes ability to reinstate Tellor's admin key\r\n   */\r\n  function killContract() external {\r\n    require(msg.sender == multis,\"only multis wallet can call this\");\r\n    ITellor(tellorMaster).changeDeity(address(0));\r\n  }\r\n\r\n  /**\r\n   * @dev This function allows the Tellor Team to migrate old TRB token to the new one\r\n   * @param _destination is the destination adress to migrate tokens to\r\n   * @param _amount is the amount of tokens to migrate\r\n   */\r\n  function migrateFor(address _destination,uint256 _amount) external {\r\n    require(msg.sender == multis,\"only multis wallet can call this\");\r\n    ITellor(tellorMaster).transfer(_destination, _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev This function allows the Tellor community to reinstate and admin key if an attacker\r\n   * is able to get 51% or more of the total TRB supply.\r\n   * @param _tokenHolder address to check if they hold more than 51% of TRB\r\n   */\r\n  function rescue51PercentAttack(address _tokenHolder) external {\r\n    require(\r\n      ITellor(tellorMaster).balanceOf(_tokenHolder) * 100 / ITellor(tellorMaster).totalSupply() >= 51,\r\n      \"attacker balance is < 51% of total supply\"\r\n    );\r\n    ITellor(tellorMaster).changeDeity(multis);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the TellorTeam to reinstate the admin key if a long time(timeBeforeRescue)\r\n   * has gone by without a value being added on-chain\r\n   */\r\n  function rescueBrokenDataReporting() external {\r\n    bytes32 _newChallenge;\r\n    (_newChallenge,,,) = ITellor(tellorMaster).getNewCurrentVariables();\r\n    if(_newChallenge == challenge){\r\n      if(block.timestamp - challengeUpdate > 7 days){\r\n        ITellor(tellorMaster).changeDeity(multis);\r\n      }\r\n    }\r\n    else{\r\n      challenge = _newChallenge;\r\n      challengeUpdate = block.timestamp;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the Tellor community to reinstate the admin key if tellor is updated\r\n   * to an invalid address.\r\n   */\r\n  function rescueFailedUpdate() external {\r\n    (bool success, bytes memory data) =\r\n        address(tellorMaster).call(\r\n            abi.encodeWithSelector(0xfc735e99, \"\") //verify() signature\r\n        );\r\n    uint _val;\r\n    if(data.length > 0){\r\n      _val = abi.decode(data, (uint256));\r\n    }\r\n    require(!success || _val < 2999,\"new tellor is valid\");\r\n    ITellor(tellorMaster).changeDeity(multis);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"fromBlock\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bytesVars\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"disputeIdByDisputeHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputesById\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"tally\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"disputeVotePassed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPropFork\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"reportedMiner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reportingParty\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposedForkAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"migrateFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minersByChallenge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"newValueTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestIdByQueryHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"rescue51PercentAttack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueBrokenDataReporting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueFailedUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"uints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Parachute","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://84fcfafeca1af1ab99ccb1e35fe3f55d73d7af09028b3abd50c3e84b4663f826"}]}