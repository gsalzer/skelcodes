{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/YearnCrvTwoTokens.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.6;\\n\\nimport \\\"./interfaces/ICurvePool.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/ITrigger.sol\\\";\\nimport \\\"./interfaces/IYVaultV2.sol\\\";\\n\\n/**\\n * @notice Defines a trigger that is toggled if any of the following conditions occur:\\n *   1. The price per share for the V2 yVault significantly decreases between consecutive checks. Under normal\\n *      operation, this value should only increase. A decrease indicates something is wrong with the Yearn vault\\n *   2. Curve Tricrypto token balances are significantly lower than what the pool expects them to be\\n *   3. Curve Tricrypto virtual price drops significantly\\n * @dev This trigger is for Yearn V2 Vaults that use a Curve pool with two underlying tokens\\n */\\ncontract YearnCrvTwoTokens is ITrigger {\\n  // --- Tokens ---\\n  // Token addresses\\n  IERC20 internal immutable token0;\\n  IERC20 internal immutable token1;\\n\\n  // --- Tolerances ---\\n  /// @dev Scale used to define percentages. Percentages are defined as tolerance / scale\\n  uint256 public constant scale = 1000;\\n\\n  /// @dev In Yearn V2 vaults, the pricePerShare decreases immediately after a harvest, and typically ramps up over the\\n  /// next six hours. Therefore we cannot simply check that the pricePerShare increases. Instead, we consider the vault\\n  /// triggered if the pricePerShare drops by more than 50% from it's previous value. This is conservative, but\\n  /// previous Yearn bugs resulted in pricePerShare drops of 0.5% â€“ 10%, and were only temporary drops with users able\\n  /// to be made whole. Therefore this trigger requires a large 50% drop to minimize false positives. The tolerance\\n  /// is defined such that we trigger if: currentPricePerShare < lastPricePerShare * tolerance / 1000. This means\\n  /// if you want to trigger after a 20% drop, you should set the tolerance to 1000 - 200 = 800\\n  uint256 public constant vaultTol = scale - 500; // 50% drop, represented on a scale where 1000 = 100%\\n\\n  /// @dev Consider trigger toggled if Curve virtual price drops by more than this percentage.\\n  uint256 public constant virtualPriceTol = scale - 500; // 50% drop\\n\\n  /// @dev Consider trigger toggled if Curve internal balances are lower than true balances by this percentage\\n  uint256 public constant balanceTol = scale - 500; // 50% drop\\n\\n  // --- Trigger Data ---\\n  /// @notice Yearn vault this trigger is for\\n  IYVaultV2 public immutable vault;\\n\\n  /// @notice Curve tricrypto pool used as a strategy by `vault`\\n  ICurvePool public immutable curve;\\n\\n  /// @notice Last read pricePerShare\\n  uint256 public lastPricePerShare;\\n\\n  /// @notice Last read curve virtual price\\n  uint256 public lastVirtualPrice;\\n\\n  // --- Constructor ---\\n\\n  /**\\n   * @param _vault Address of the Yearn V2 vault this trigger should protect\\n   * @param _curve Address of the Curve Tricrypto pool uses by the above Yearn vault\\n   * @dev For definitions of other constructor parameters, see ITrigger.sol\\n   */\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    string memory _description,\\n    uint256[] memory _platformIds,\\n    address _recipient,\\n    address _vault,\\n    address _curve\\n  ) ITrigger(_name, _symbol, _description, _platformIds, _recipient) {\\n    // Set trigger data\\n    vault = IYVaultV2(_vault);\\n    curve = ICurvePool(_curve);\\n    token0 = IERC20(ICurvePool(_curve).coins(0));\\n    token1 = IERC20(ICurvePool(_curve).coins(1));\\n\\n    // Save current values (immutables can't be read at construction, so we don't use `vault` or `curve` directly)\\n    lastPricePerShare = IYVaultV2(_vault).pricePerShare();\\n    lastVirtualPrice = ICurvePool(_curve).get_virtual_price();\\n  }\\n\\n  // --- Trigger condition ---\\n\\n  /**\\n   * @dev Checks the yVault pricePerShare\\n   */\\n  function checkTriggerCondition() internal override returns (bool) {\\n    // Read this blocks share price and virtual price\\n    uint256 _currentPricePerShare = vault.pricePerShare();\\n    uint256 _currentVirtualPrice = curve.get_virtual_price();\\n\\n    // Check trigger conditions. We could check one at a time and return as soon as one is true, but it is convenient\\n    // to have the data that caused the trigger saved into the state, so we don't do that\\n    bool _statusVault = _currentPricePerShare < ((lastPricePerShare * vaultTol) / scale);\\n    bool _statusVirtualPrice = _currentVirtualPrice < ((lastVirtualPrice * virtualPriceTol) / scale);\\n    bool _statusBalances = checkCurveBalances();\\n\\n    // Save the new data\\n    lastPricePerShare = _currentPricePerShare;\\n    lastVirtualPrice = _currentVirtualPrice;\\n\\n    // Return status\\n    return _statusVault || _statusVirtualPrice || _statusBalances;\\n  }\\n\\n  /**\\n   * @dev Checks if the Curve internal balances are significantly lower than the true balances\\n   * @return True if balances are out of tolerance and trigger should be toggled\\n   */\\n  function checkCurveBalances() internal view returns (bool) {\\n    return\\n      (token0.balanceOf(address(curve)) < ((curve.balances(0) * virtualPriceTol) / scale)) ||\\n      (token1.balanceOf(address(curve)) < ((curve.balances(1) * virtualPriceTol) / scale));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICurvePool.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.5;\\n\\ninterface ICurvePool {\\n  /// @notice Computes current virtual price\\n  function get_virtual_price() external view returns (uint256);\\n\\n  /// @notice Cached virtual price, used internally\\n  function virtual_price() external view returns (uint256);\\n\\n  /// @notice Current full profit\\n  function xcp_profit() external view returns (uint256);\\n\\n  /// @notice Full profit at last claim of admin fees\\n  function xcp_profit_a() external view returns (uint256);\\n\\n  /// @notice Pool admin fee\\n  function admin_fee() external view returns (uint256);\\n\\n  /// @notice Pool admin fee\\n  function balances(uint256 index) external view returns (uint256);\\n\\n  /// @notice Returns the address of the token for the provided index\\n  function coins(uint256 index) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.5;\\n\\ninterface IERC20 {\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITrigger.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.5;\\n\\n/**\\n * @notice Abstract contract for creating or interacting with a Trigger contract\\n * @dev All trigger contracts created must inerit from this contract and conform to this interface\\n */\\nabstract contract ITrigger {\\n  /// @notice Trigger name, analgous to an ERC-20 token's name\\n  string public name;\\n\\n  /// @notice Trigger symbol, analgous to an ERC-20 token's symbol\\n  string public symbol;\\n\\n  /// @notice Trigger description\\n  string public description;\\n\\n  /// @notice Array of IDs of platforms covered by this trigger\\n  uint256[] public platformIds;\\n\\n  /// @notice Returns address of recipient who receives subsidies for creating a protection market using this trigger\\n  address public immutable recipient;\\n\\n  /// @notice Returns true if trigger condition has been met\\n  bool public isTriggered;\\n\\n  /// @notice Emitted when the trigger is activated\\n  event TriggerActivated();\\n\\n  /**\\n   * @notice Returns array of IDs, where each ID corresponds to a platform covered by this trigger\\n   * @dev See documentation for mapping of ID numbers to platforms\\n   */\\n  function getPlatformIds() external view returns (uint256[] memory) {\\n    return platformIds;\\n  }\\n\\n  /**\\n   * @dev Executes trigger-specific logic to check if market has been triggered\\n   * @return True if trigger condition occured, false otherwise\\n   */\\n  function checkTriggerCondition() internal virtual returns (bool);\\n\\n  /**\\n   * @notice Checks trigger condition, sets isTriggered flag to true if condition is met, and returns the trigger status\\n   * @return True if trigger condition occured, false otherwise\\n   */\\n  function checkAndToggleTrigger() external returns (bool) {\\n    // Return true if trigger already toggled\\n    if (isTriggered) return true;\\n\\n    // Return false if market has not been triggered\\n    if (!checkTriggerCondition()) return false;\\n\\n    // Otherwise, market has been triggered\\n    emit TriggerActivated();\\n    isTriggered = true;\\n    return isTriggered;\\n  }\\n\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    string memory _description,\\n    uint256[] memory _platformIds,\\n    address _recipient\\n  ) {\\n    name = _name;\\n    description = _description;\\n    symbol = _symbol;\\n    platformIds = _platformIds;\\n    recipient = _recipient;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IYVaultV2.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.5;\\n\\ninterface IYVaultV2 {\\n  function totalSupply() external view returns (uint256);\\n\\n  function pricePerShare() external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"_platformIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_curve\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TriggerActivated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balanceTol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkAndToggleTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"contract ICurvePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlatformIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTriggered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastVirtualPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"platformIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IYVaultV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultTol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"virtualPriceTol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"YearnCrvTwoTokens","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000d512430b531fc2d7cece8a45e6784c2e36cde4fd00000000000000000000000023d3d0f1c697247d5e0a9efb37d8b0ed0c464f7f000000000000000000000000c25099792e9349c7dd09759744ea681c7de2cb66000000000000000000000000000000000000000000000000000000000000001b596561726e205632204375727665205442544320547269676765720000000000000000000000000000000000000000000000000000000000000000000000000d79437276544254432d545249470000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001225472696767657273207768656e2074686520596561726e207661756c7420736861726520707269636520646563726561736573206279206d6f7265207468616e20353025206265747765656e20636f6e736563757469766520636865636b732c20746865204375727665207442544320706f6f6c2773207669727475616c20707269636520646563726561736573206279206d6f7265207468616e20353025206265747765656e20636f6e736563757469766520636865636b732c206f722074686520696e7465726e616c2062616c616e63657320747261636b656420696e20746865204375727665207442544320706f6f6c20617265206d6f7265207468616e20353025206c6f776572207468616e2074686520747275652062616c616e636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}