{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/senders/aave-v2-migrator/main.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { TokenInterface } from \\\"../../common/interfaces.sol\\\";\\nimport { Helpers } from \\\"./helpers.sol\\\";\\nimport { AaveInterface, ATokenInterface, IndexInterface } from \\\"./interfaces.sol\\\";\\nimport { Events } from \\\"./events.sol\\\";\\n\\ncontract LiquidityResolver is Helpers, Events {\\n    using SafeERC20 for IERC20;\\n\\n    function updateVariables(uint _safeRatioGap, uint _fee) public {\\n        require(msg.sender == instaIndex.master(), \\\"not-master\\\");\\n        safeRatioGap = _safeRatioGap;\\n        fee = _fee;\\n        emit LogVariablesUpdate(safeRatioGap, fee);\\n    }\\n\\n    function addTokenSupport(address[] memory _tokens) public {\\n        require(msg.sender == instaIndex.master(), \\\"not-master\\\");\\n        for (uint i = 0; i < supportedTokens.length; i++) {\\n            delete isSupportedToken[supportedTokens[i]];\\n        }\\n        delete supportedTokens;\\n        for (uint i = 0; i < _tokens.length; i++) {\\n            require(!isSupportedToken[_tokens[i]], \\\"already-added\\\");\\n            isSupportedToken[_tokens[i]] = true;\\n            supportedTokens.push(_tokens[i]);\\n        }\\n        emit LogAddSupportedTokens(_tokens);\\n    }\\n\\n    function spell(address _target, bytes memory _data) external {\\n        require(msg.sender == instaIndex.master(), \\\"not-master\\\");\\n        require(_target != address(0), \\\"target-invalid\\\");\\n        assembly {\\n            let succeeded := delegatecall(gas(), _target, add(_data, 0x20), mload(_data), 0, 0)\\n\\n            switch iszero(succeeded)\\n                case 1 {\\n                    // throw if delegatecall failed\\n                    let size := returndatasize()\\n                    returndatacopy(0x00, 0x00, size)\\n                    revert(0x00, size)\\n                }\\n        }\\n    }\\n\\n    /**\\n     * @param _tokens - array of tokens to transfer to L2 receiver's contract\\n     * @param _amts - array of token amounts to transfer to L2 receiver's contract\\n     */\\n    function settle(address[] calldata _tokens, uint[] calldata _amts) external {\\n        // TODO: Should we use dydx flashloan for easier settlement?\\n        AaveInterface aave = AaveInterface(aaveProvider.getLendingPool());\\n        for (uint i = 0; i < supportedTokens.length; i++) {\\n            address _token = supportedTokens[i];\\n            if (_token == wethAddr) {\\n                if (address(this).balance > 0) {\\n                    TokenInterface(wethAddr).deposit{value: address(this).balance}();\\n                }\\n            }\\n            IERC20 _tokenContract = IERC20(_token);\\n            uint _tokenBal = _tokenContract.balanceOf(address(this));\\n            if (_tokenBal > 0) {\\n                _tokenContract.safeApprove(address(aave), _tokenBal);\\n                aave.deposit(_token, _tokenBal, address(this), 3288);\\n            }\\n            (\\n                uint supplyBal,,\\n                uint borrowBal,\\n                ,,,,,\\n            ) = aaveData.getUserReserveData(_token, address(this));\\n            if (supplyBal != 0 && borrowBal != 0) {\\n                if (supplyBal > borrowBal) {\\n                    aave.withdraw(_token, borrowBal, address(this)); // TODO: fail because of not enough withdrawing capacity?\\n                    IERC20(_token).safeApprove(address(aave), borrowBal);\\n                    aave.repay(_token, borrowBal, 2, address(this));\\n                } else {\\n                    aave.withdraw(_token, supplyBal, address(this)); // TODO: fail because of not enough withdrawing capacity?\\n                    IERC20(_token).safeApprove(address(aave), supplyBal);\\n                    aave.repay(_token, supplyBal, 2, address(this));\\n                }\\n            }\\n        }\\n        for (uint i = 0; i < _tokens.length; i++) {\\n            address _token = _tokens[i] == ethAddr ? wethAddr : _tokens[i];\\n            aave.withdraw(_token, _amts[i], address(this));\\n\\n            if (_token == wethAddr) {\\n                TokenInterface wethContract = TokenInterface(wethAddr);\\n                uint wethBal = wethContract.balanceOf(address(this));\\n                wethContract.approve(wethAddr, wethBal);\\n                wethContract.withdraw(wethBal);\\n                rootChainManager.depositEtherFor{value: _amts[i]}(polygonReceiver);\\n            } else {\\n                IERC20(_token).safeApprove(erc20Predicate, _amts[i]);\\n                rootChainManager.depositFor(polygonReceiver, _tokens[i], abi.encode(_amts[i]));\\n            }\\n\\n\\n            isPositionSafe();\\n        }\\n        emit LogSettle(_tokens, _amts);\\n    }\\n}\\n\\ncontract MigrateResolver is LiquidityResolver {\\n    using SafeERC20 for IERC20;\\n\\n    function _migrate(\\n        AaveInterface aave,\\n        AaveDataRaw memory _data,\\n        address sourceDsa\\n    ) internal {\\n        require(_data.supplyTokens.length > 0, \\\"0-length-not-allowed\\\");\\n        require(_data.targetDsa != address(0), \\\"invalid-address\\\");\\n        require(_data.supplyTokens.length == _data.supplyAmts.length, \\\"invalid-length\\\");\\n        require(\\n            _data.borrowTokens.length == _data.variableBorrowAmts.length &&\\n            _data.borrowTokens.length == _data.stableBorrowAmts.length,\\n            \\\"invalid-length\\\"\\n        );\\n\\n        for (uint i = 0; i < _data.supplyTokens.length; i++) {\\n            address _token = _data.supplyTokens[i];\\n            for (uint j = 0; j < _data.supplyTokens.length; j++) {\\n                if (j != i) {\\n                    require(j != i, \\\"token-repeated\\\");\\n                }\\n            }\\n            require(_token != ethAddr, \\\"should-be-eth-address\\\");\\n        }\\n\\n        for (uint i = 0; i < _data.borrowTokens.length; i++) {\\n            address _token = _data.borrowTokens[i];\\n            for (uint j = 0; j < _data.borrowTokens.length; j++) {\\n                if (j != i) {\\n                    require(j != i, \\\"token-repeated\\\");\\n                }\\n            }\\n            require(_token != ethAddr, \\\"should-be-eth-address\\\");\\n        }\\n\\n        (uint[] memory stableBorrows, uint[] memory variableBorrows, uint[] memory totalBorrows) = _PaybackCalculate(aave, _data, sourceDsa);\\n        _PaybackStable(_data.borrowTokens.length, aave, _data.borrowTokens, stableBorrows, sourceDsa);\\n        _PaybackVariable(_data.borrowTokens.length, aave, _data.borrowTokens, variableBorrows, sourceDsa);\\n\\n        (uint[] memory totalSupplies) = _getAtokens(sourceDsa, _data.supplyTokens, _data.supplyAmts);\\n\\n        // Aave on Polygon doesn't have stable borrowing so we'll borrow all the debt in variable\\n        AaveData memory data;\\n\\n        data.borrowTokens = _data.borrowTokens;\\n        data.supplyAmts = totalSupplies;\\n        data.supplyTokens = _data.supplyTokens;\\n        data.targetDsa = _data.targetDsa;\\n        data.borrowAmts = totalBorrows;\\n\\n        // Checks the amount that user is trying to migrate is 20% below the Liquidation\\n        _checkRatio(data);\\n\\n        isPositionSafe();\\n\\n        stateSender.syncState(polygonReceiver, abi.encode(data));\\n\\n        emit LogAaveV2Migrate(\\n            sourceDsa,\\n            data.targetDsa,\\n            data.supplyTokens,\\n            data.borrowTokens,\\n            totalSupplies,\\n            variableBorrows,\\n            stableBorrows\\n        );\\n    }\\n    function migrateFlashCallback(AaveDataRaw calldata _data, address dsa, uint ethAmt) external {\\n        require(msg.sender == address(flashloanContract), \\\"not-flashloan-contract\\\");\\n        AaveInterface aave = AaveInterface(aaveProvider.getLendingPool());\\n\\n        TokenInterface wethContract = TokenInterface(wethAddr);\\n        wethContract.approve(address(aave), ethAmt);\\n        aave.deposit(wethAddr, ethAmt, address(this), 3288);\\n        _migrate(aave, _data, dsa);\\n        aave.withdraw(wethAddr, ethAmt, address(this));\\n        require(wethContract.transfer(address(flashloanContract), ethAmt), \\\"migrateFlashCallback: weth transfer failed to Instapool\\\");\\n    }\\n}\\n\\ncontract InstaAaveV2MigratorSenderImplementation is MigrateResolver {\\n    function migrate(AaveDataRaw calldata _data) external {\\n        AaveInterface aave = AaveInterface(aaveProvider.getLendingPool());\\n        _migrate(aave, _data, msg.sender);\\n    }\\n\\n    function migrateWithFlash(AaveDataRaw calldata _data, uint ethAmt) external {\\n        bytes memory callbackData = abi.encodeWithSelector(bytes4(this.migrateFlashCallback.selector), _data, msg.sender, ethAmt);\\n        bytes memory data = abi.encode(callbackData, ethAmt);\\n\\n        flashloanContract.initiateFlashLoan(data, ethAmt);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/common/interfaces.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface TokenInterface {\\n    function approve(address, uint256) external;\\n    function transfer(address, uint) external returns (bool);\\n    function transferFrom(address, address, uint) external;\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n    function balanceOf(address) external view returns (uint);\\n    function decimals() external view returns (uint);\\n}\\n\\ninterface MemoryInterface {\\n    function getUint(uint id) external returns (uint num);\\n    function setUint(uint id, uint val) external;\\n}\\n\"\r\n    },\r\n    \"contracts/senders/aave-v2-migrator/helpers.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport { DSMath } from \\\"../../common/math.sol\\\";\\nimport { Stores } from \\\"../../common/stores-mainnet.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { Variables } from \\\"./variables.sol\\\";\\n\\nimport { \\n    AaveLendingPoolProviderInterface,\\n    AaveDataProviderInterface,\\n    AaveInterface,\\n    ATokenInterface,\\n    StateSenderInterface,\\n    AavePriceOracle,\\n    ChainLinkInterface\\n} from \\\"./interfaces.sol\\\";\\n\\nabstract contract Helpers is DSMath, Stores, Variables {\\n    using SafeERC20 for IERC20;\\n\\n    function _paybackBehalfOne(AaveInterface aave, address token, uint amt, uint rateMode, address user) private {\\n        address _token = token == ethAddr ? wethAddr : token;\\n        aave.repay(_token, amt, rateMode, user);\\n    }\\n\\n    function _PaybackStable(\\n        uint _length,\\n        AaveInterface aave,\\n        address[] memory tokens,\\n        uint256[] memory amts,\\n        address user\\n    ) internal {\\n        for (uint i = 0; i < _length; i++) {\\n            if (amts[i] > 0) {\\n                _paybackBehalfOne(aave, tokens[i], amts[i], 1, user);\\n            }\\n        }\\n    }\\n\\n    function _PaybackVariable(\\n        uint _length,\\n        AaveInterface aave,\\n        address[] memory tokens,\\n        uint256[] memory amts,\\n        address user\\n    ) internal {\\n        for (uint i = 0; i < _length; i++) {\\n            if (amts[i] > 0) {\\n                _paybackBehalfOne(aave, tokens[i], amts[i], 2, user);\\n            }\\n        }\\n    }\\n\\n    function _PaybackCalculate(\\n        AaveInterface aave,\\n        AaveDataRaw memory _data,\\n        address sourceDsa\\n    ) internal returns (\\n        uint[] memory stableBorrow,\\n        uint[] memory variableBorrow,\\n        uint[] memory totalBorrow\\n    ) {\\n        uint _len = _data.borrowTokens.length;\\n        stableBorrow = new uint256[](_len);\\n        variableBorrow = new uint256[](_len);\\n        totalBorrow = new uint256[](_len);\\n\\n        for (uint i = 0; i < _len; i++) {\\n            require(isSupportedToken[_data.borrowTokens[i]], \\\"token-not-enabled\\\");\\n            address _token = _data.borrowTokens[i] == ethAddr ? wethAddr : _data.borrowTokens[i];\\n            _data.borrowTokens[i] = _token;\\n\\n            (\\n                ,\\n                uint stableDebt,\\n                uint variableDebt,\\n                ,,,,,\\n            ) = aaveData.getUserReserveData(_token, sourceDsa);\\n\\n\\n            stableBorrow[i] = _data.stableBorrowAmts[i] == uint(-1) ? stableDebt : _data.stableBorrowAmts[i];\\n            variableBorrow[i] = _data.variableBorrowAmts[i] == uint(-1) ? variableDebt : _data.variableBorrowAmts[i];\\n\\n            totalBorrow[i] = add(stableBorrow[i], variableBorrow[i]);\\n\\n            if (totalBorrow[i] > 0) {\\n                IERC20(_token).safeApprove(address(aave), totalBorrow[i]);\\n            }\\n            aave.borrow(_token, totalBorrow[i], 2, 3288, address(this));\\n        }\\n    }\\n\\n    function _getAtokens(\\n        address dsa,\\n        address[] memory supplyTokens,\\n        uint[] memory supplyAmts\\n    ) internal returns (\\n        uint[] memory finalAmts\\n    ) {\\n        finalAmts = new uint256[](supplyTokens.length);\\n        for (uint i = 0; i < supplyTokens.length; i++) {\\n            require(isSupportedToken[supplyTokens[i]], \\\"token-not-enabled\\\");\\n            address _token = supplyTokens[i] == ethAddr ? wethAddr : supplyTokens[i];\\n            (address _aToken, ,) = aaveData.getReserveTokensAddresses(_token);\\n            ATokenInterface aTokenContract = ATokenInterface(_aToken);\\n            uint _finalAmt;\\n            if (supplyAmts[i] == uint(-1)) {\\n                _finalAmt = aTokenContract.balanceOf(dsa);\\n            } else {\\n                _finalAmt = supplyAmts[i];\\n            }\\n            require(aTokenContract.transferFrom(dsa, address(this), _finalAmt), \\\"_getAtokens: atokens transfer failed\\\");\\n\\n            _finalAmt = wmul(_finalAmt, fee);\\n            finalAmts[i] = _finalAmt;\\n\\n        }\\n    }\\n\\n    function isPositionSafe() internal view returns (bool isOk) {\\n        AaveInterface aave = AaveInterface(aaveProvider.getLendingPool());\\n        (,,,,,uint healthFactor) = aave.getUserAccountData(address(this));\\n        uint minLimit = wdiv(1e18, safeRatioGap);\\n        isOk = healthFactor > minLimit;\\n        require(isOk, \\\"position-at-risk\\\");\\n    }\\n\\n    function getTokensPrices(address[] memory tokens) internal view returns(uint[] memory tokenPricesInEth) {\\n        tokenPricesInEth = AavePriceOracle(aaveProvider.getPriceOracle()).getAssetsPrices(tokens);\\n    }\\n    \\n    // Liquidation threshold\\n    function getTokenLt(address[] memory tokens) internal view returns (uint[] memory decimals, uint[] memory tokenLts) {\\n        uint _len = tokens.length;\\n        decimals = new uint[](_len);\\n        tokenLts = new uint[](_len);\\n        for (uint i = 0; i < _len; i++) {\\n            (decimals[i],,tokenLts[i],,,,,,,) = aaveData.getReserveConfigurationData(tokens[i]);\\n        }\\n    }\\n\\n    function convertTo18(uint amount, uint decimal) internal pure returns (uint) {\\n        return amount * (10 ** (18 - decimal));\\n    }\\n\\n    /*\\n     * Checks the position to migrate should have a safe gap from liquidation \\n    */\\n    function _checkRatio(AaveData memory data) public view {\\n        uint[] memory supplyTokenPrices = getTokensPrices(data.supplyTokens);\\n        (uint[] memory supplyDecimals, uint[] memory supplyLts) = getTokenLt(data.supplyTokens);\\n\\n        uint[] memory borrowTokenPrices = getTokensPrices(data.borrowTokens);\\n        (uint[] memory borrowDecimals,) = getTokenLt(data.borrowTokens);\\n        uint netSupply;\\n        uint netBorrow;\\n        uint liquidation;\\n        for (uint i = 0; i < data.supplyTokens.length; i++) {\\n            uint _amt = wmul(convertTo18(data.supplyAmts[i], supplyDecimals[i]), supplyTokenPrices[i]);\\n            netSupply += _amt;\\n            liquidation += (_amt * supplyLts[i]) / 10000; // convert the number 8000 to 0.8\\n        }\\n        for (uint i = 0; i < data.borrowTokens.length; i++) {\\n            uint _amt = wmul(convertTo18(data.borrowAmts[i], borrowDecimals[i]), borrowTokenPrices[i]);\\n            netBorrow += _amt;\\n        }\\n        uint _dif = wmul(netSupply, sub(1e18, safeRatioGap));\\n        require(netBorrow < sub(liquidation, _dif), \\\"position-is-risky-to-migrate\\\");\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/senders/aave-v2-migrator/interfaces.sol\": {\r\n      \"content\": \"pragma solidity >=0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface AaveInterface {\\n    function deposit(address _asset, uint256 _amount, address _onBehalfOf, uint16 _referralCode) external;\\n    function withdraw(address _asset, uint256 _amount, address _to) external;\\n    function borrow(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _interestRateMode,\\n        uint16 _referralCode,\\n        address _onBehalfOf\\n    ) external;\\n    function repay(address _asset, uint256 _amount, uint256 _rateMode, address _onBehalfOf) external;\\n    function setUserUseReserveAsCollateral(address _asset, bool _useAsCollateral) external;\\n    function getUserAccountData(address user) external view returns (\\n        uint256 totalCollateralETH,\\n        uint256 totalDebtETH,\\n        uint256 availableBorrowsETH,\\n        uint256 currentLiquidationThreshold,\\n        uint256 ltv,\\n        uint256 healthFactor\\n    );\\n}\\n\\ninterface AaveLendingPoolProviderInterface {\\n    function getLendingPool() external view returns (address);\\n    function getPriceOracle() external view returns (address);\\n}\\n\\n// Aave Protocol Data Provider\\ninterface AaveDataProviderInterface {\\n    function getReserveTokensAddresses(address _asset) external view returns (\\n        address aTokenAddress,\\n        address stableDebtTokenAddress,\\n        address variableDebtTokenAddress\\n    );\\n    function getUserReserveData(address _asset, address _user) external view returns (\\n        uint256 currentATokenBalance,\\n        uint256 currentStableDebt,\\n        uint256 currentVariableDebt,\\n        uint256 principalStableDebt,\\n        uint256 scaledVariableDebt,\\n        uint256 stableBorrowRate,\\n        uint256 liquidityRate,\\n        uint40 stableRateLastUpdated,\\n        bool usageAsCollateralEnabled\\n    );\\n    function getReserveConfigurationData(address asset) external view returns (\\n        uint256 decimals,\\n        uint256 ltv,\\n        uint256 liquidationThreshold,\\n        uint256 liquidationBonus,\\n        uint256 reserveFactor,\\n        bool usageAsCollateralEnabled,\\n        bool borrowingEnabled,\\n        bool stableBorrowRateEnabled,\\n        bool isActive,\\n        bool isFrozen\\n    );\\n}\\n\\ninterface AaveAddressProviderRegistryInterface {\\n    function getAddressesProvidersList() external view returns (address[] memory);\\n}\\n\\ninterface ATokenInterface {\\n    function scaledBalanceOf(address _user) external view returns (uint256);\\n    function isTransferAllowed(address _user, uint256 _amount) external view returns (bool);\\n    function balanceOf(address _user) external view returns(uint256);\\n    function transferFrom(address, address, uint) external returns (bool);\\n    function approve(address, uint256) external;\\n}\\n\\ninterface AaveOracleInterface {\\n    function getAssetPrice(address _asset) external view returns (uint256);\\n    function getAssetsPrices(address[] calldata _assets) external view returns(uint256[] memory);\\n    function getSourceOfAsset(address _asset) external view returns(address);\\n    function getFallbackOracle() external view returns(address);\\n}\\n\\ninterface StateSenderInterface {\\n    function syncState(address receiver, bytes calldata data) external;\\n    function register(address sender, address receiver) external;\\n}\\n\\ninterface IndexInterface {\\n    function master() external view returns (address);\\n}\\n\\ninterface FlashloanInterface {\\n    function initiateFlashLoan(bytes memory data, uint ethAmt) external;\\n}\\n\\ninterface AavePriceOracle {\\n    function getAssetPrice(address _asset) external view returns(uint256);\\n    function getAssetsPrices(address[] calldata _assets) external view returns(uint256[] memory);\\n    function getSourceOfAsset(address _asset) external view returns(uint256);\\n    function getFallbackOracle() external view returns(uint256);\\n}\\n\\ninterface ChainLinkInterface {\\n    function latestAnswer() external view returns (int256);\\n    function decimals() external view returns (uint256);\\n}\\n\\ninterface RootChainManagerInterface {\\n    function depositFor(address user, address token, bytes calldata depositData) external;\\n    function depositEtherFor(address user) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/senders/aave-v2-migrator/events.sol\": {\r\n      \"content\": \"pragma solidity >=0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ncontract Events {\\n    event LogSettle(\\n        address[] tokens,\\n        uint256[] amts\\n    );\\n\\n    event LogAaveV2Migrate(\\n        address indexed user,\\n        address indexed targetDsa,\\n        address[] supplyTokens,\\n        address[] borrowTokens,\\n        uint256[] supplyAmts,\\n        uint256[] variableBorrowAmts,\\n        uint256[] stableBorrowAmts\\n    );\\n\\n    event LogUpdateVariables(\\n        uint256 oldFee,\\n        uint256 newFee,\\n        uint256 oldSafeRatioGap,\\n        uint256 newSafeRatioGap\\n    );\\n\\n    event LogAddSupportedTokens(\\n        address[] tokens\\n    );\\n\\n    event LogVariablesUpdate(uint _safeRatioGap, uint _fee);\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/math.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract DSMath {\\n    uint constant WAD = 10 ** 18;\\n    uint constant RAY = 10 ** 27;\\n\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        z = SafeMath.add(x, y);\\n    }\\n\\n    function sub(uint x, uint y) internal virtual pure returns (uint z) {\\n        z = SafeMath.sub(x, y);\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        z = SafeMath.mul(x, y);\\n    }\\n\\n    function div(uint x, uint y) internal pure returns (uint z) {\\n        z = SafeMath.div(x, y);\\n    }\\n\\n    function wmul(uint x, uint y) internal pure returns (uint z) {\\n        z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\\n    }\\n\\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\\n    }\\n\\n    function rmul(uint x, uint y) internal pure returns (uint z) {\\n        z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    function toInt(uint x) internal pure returns (int y) {\\n        y = int(x);\\n        require(y >= 0, \\\"int-overflow\\\");\\n    }\\n\\n    function toRad(uint wad) internal pure returns (uint rad) {\\n        rad = mul(wad, 10 ** 27);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/stores-mainnet.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { MemoryInterface } from \\\"./interfaces.sol\\\";\\n\\n\\nabstract contract Stores {\\n\\n    /**\\n    * @dev Return ethereum address\\n    */\\n    address constant internal ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /**\\n    * @dev Return Wrapped ETH address\\n    */\\n    address constant internal wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    /**\\n    * @dev Return memory variable address\\n    */\\n    MemoryInterface constant internal instaMemory = MemoryInterface(0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F);\\n\\n    /**\\n    * @dev Get Uint value from InstaMemory Contract.\\n    */\\n    function getUint(uint getId, uint val) internal returns (uint returnVal) {\\n        returnVal = getId == 0 ? val : instaMemory.getUint(getId);\\n    }\\n\\n    /**\\n    * @dev Set Uint value in InstaMemory Contract.\\n    */\\n    function setUint(uint setId, uint val) virtual internal {\\n        if (setId != 0) instaMemory.setUint(setId, val);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/senders/aave-v2-migrator/variables.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport {\\n    AaveLendingPoolProviderInterface,\\n    AaveDataProviderInterface,\\n    AaveOracleInterface,\\n    StateSenderInterface,\\n    IndexInterface,\\n    FlashloanInterface,\\n    RootChainManagerInterface\\n} from \\\"./interfaces.sol\\\";\\n\\ncontract Variables {\\n\\n    // Structs\\n    struct AaveDataRaw {\\n        address targetDsa;\\n        uint[] supplyAmts;\\n        uint[] variableBorrowAmts;\\n        uint[] stableBorrowAmts;\\n        address[] supplyTokens;\\n        address[] borrowTokens;\\n    }\\n\\n    struct AaveData {\\n        address targetDsa;\\n        uint[] supplyAmts;\\n        uint[] borrowAmts;\\n        address[] supplyTokens;\\n        address[] borrowTokens;\\n    }\\n\\n    // Constant Addresses //\\n\\n    /**\\n    * @dev Aave referal code\\n    */\\n    uint16 constant internal referralCode = 3228;\\n    \\n    /**\\n    * @dev Polygon Receiver contract\\n    */\\n    address constant internal polygonReceiver = 0x4A090897f47993C2504144419751D6A91D79AbF4;\\n    \\n    /**\\n    * @dev Flashloan contract\\n    */\\n    FlashloanInterface constant internal flashloanContract = FlashloanInterface(0xd7e8E6f5deCc5642B77a5dD0e445965B128a585D);\\n    \\n    /**\\n    * @dev ERC20 Predicate address\\n    */\\n    address constant internal erc20Predicate = 0x40ec5B33f54e0E8A33A975908C5BA1c14e5BbbDf;\\n\\n    /**\\n     * @dev Aave Provider\\n     */\\n    AaveLendingPoolProviderInterface constant internal aaveProvider = AaveLendingPoolProviderInterface(0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5);\\n\\n    /**\\n     * @dev Aave Data Provider\\n     */\\n    AaveDataProviderInterface constant internal aaveData = AaveDataProviderInterface(0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d);\\n\\n    /**\\n     * @dev Aave Price Oracle\\n     */\\n    AaveOracleInterface constant internal aaveOracle = AaveOracleInterface(0xA50ba011c48153De246E5192C8f9258A2ba79Ca9);\\n\\n    /**\\n     * @dev Polygon State Sync Contract\\n     */\\n    StateSenderInterface constant internal stateSender = StateSenderInterface(0x28e4F3a7f651294B9564800b2D01f35189A5bFbE);\\n\\n    /**\\n     * @dev InstaIndex Address.\\n     */\\n    IndexInterface public constant instaIndex = IndexInterface(0x2971AdFa57b20E5a416aE5a708A8655A9c74f723);\\n\\n    /**\\n     * @dev Polygon deposit bridge\\n     */\\n    RootChainManagerInterface public constant rootChainManager = RootChainManagerInterface(0xA0c68C638235ee32657e8f720a23ceC1bFc77C77);\\n    \\n    \\n    // Storage variables //\\n    \\n    /**\\n    * @dev This will be used to have debt/collateral ratio always 20% less than liquidation\\n    */\\n    uint public safeRatioGap = 800000000000000000; // 80%\\n\\n    /**\\n    * @dev fee on collateral\\n    */\\n    uint public fee = 998000000000000000; // 0.2% (99.8%) on collateral\\n\\n    /**\\n    * @dev Mapping of supported token\\n    */\\n    mapping(address => bool) public isSupportedToken;\\n\\n    /**\\n    * @dev Array of supported token\\n    */\\n    address[] public supportedTokens; // don't add ethAddr. Only add wethAddr\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetDsa\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"supplyTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"borrowTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"supplyAmts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"variableBorrowAmts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"stableBorrowAmts\",\"type\":\"uint256[]\"}],\"name\":\"LogAaveV2Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"LogAddSupportedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amts\",\"type\":\"uint256[]\"}],\"name\":\"LogSettle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSafeRatioGap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSafeRatioGap\",\"type\":\"uint256\"}],\"name\":\"LogUpdateVariables\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_safeRatioGap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"LogVariablesUpdate\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"targetDsa\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"supplyAmts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowAmts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"supplyTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"borrowTokens\",\"type\":\"address[]\"}],\"internalType\":\"struct Variables.AaveData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"_checkRatio\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"addTokenSupport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instaIndex\",\"outputs\":[{\"internalType\":\"contract IndexInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSupportedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"targetDsa\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"supplyAmts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"variableBorrowAmts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stableBorrowAmts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"supplyTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"borrowTokens\",\"type\":\"address[]\"}],\"internalType\":\"struct Variables.AaveDataRaw\",\"name\":\"_data\",\"type\":\"tuple\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"targetDsa\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"supplyAmts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"variableBorrowAmts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stableBorrowAmts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"supplyTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"borrowTokens\",\"type\":\"address[]\"}],\"internalType\":\"struct Variables.AaveDataRaw\",\"name\":\"_data\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"dsa\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethAmt\",\"type\":\"uint256\"}],\"name\":\"migrateFlashCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"targetDsa\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"supplyAmts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"variableBorrowAmts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stableBorrowAmts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"supplyTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"borrowTokens\",\"type\":\"address[]\"}],\"internalType\":\"struct Variables.AaveDataRaw\",\"name\":\"_data\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"ethAmt\",\"type\":\"uint256\"}],\"name\":\"migrateWithFlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootChainManager\",\"outputs\":[{\"internalType\":\"contract RootChainManagerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeRatioGap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amts\",\"type\":\"uint256[]\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"spell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_safeRatioGap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"updateVariables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"InstaAaveV2MigratorSenderImplementation","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}