{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FAANG/strategyFAANG.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\\" \\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../../interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../../interfaces/ILPPool.sol\\\";\\nimport \\\"../../interfaces/ICurveFi.sol\\\";\\nimport \\\"../../interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"../../interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract FAANGStrategy is Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n\\n    struct Asset {\\n        uint256 weight;\\n        IERC20 mAssetToken;\\n        ILPPool lpPool;\\n        IERC20 lpToken;\\n        uint amountOfATotal;\\n        uint amountOfBTotal;\\n    }\\n\\n    IERC20 public constant ust = IERC20(0xa47c8bf37f92aBed4A126BDA807A7b7498661acD);\\n    IERC20 public constant mir = IERC20(0x09a3EcAFa817268f77BE1283176B946C4ff2E608);\\n    ICurveFi public constant curveFi = ICurveFi(0x890f4e345B1dAED0367A877a1612f86A1f86985f); \\n    IUniswapV2Router02 public constant router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n    IUniswapV2Factory public constant factory = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\\n    \\n    address public vault;\\n    address public treasuryWallet;\\n    address public communityWallet;\\n    address public strategist;\\n    \\n    address public constant DAIToken = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address public constant mirUstPooltoken = 0x87dA823B6fC8EB8575a235A824690fda94674c88;\\n    ILPPool mirustPool;\\n\\n    mapping(address => int128) curveIds;\\n    mapping(IERC20 => uint256) public userTotalLPToken;\\n    Asset[] public mAssets;\\n\\n    uint reInvestedMirUstPooltoken;\\n\\n    event HarvestedMIR(uint _mirHarvested);\\n\\n    modifier onlyVault {\\n        require(msg.sender == vault, \\\"only vault\\\");\\n        _;\\n    }    \\n\\n    constructor(\\n        address _treasuryWallet,\\n        address _communityWallet, \\n        address _strategist,  \\n        address _mirustPool,\\n        uint[] memory weights,\\n        IERC20[] memory mAssetsTokens,\\n        ILPPool[] memory lpPools,\\n        IERC20[] memory lpTokens\\n\\n        ) {\\n        \\n        \\n        curveIds[0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48] = 2;\\n        curveIds[0xdAC17F958D2ee523a2206206994597C13D831ec7] = 3;\\n        curveIds[0x6B175474E89094C44Da98b954EedeAC495271d0F] = 1;\\n\\n        treasuryWallet = _treasuryWallet;\\n        communityWallet = _communityWallet;\\n        strategist = _strategist;\\n        mirustPool = ILPPool(_mirustPool);\\n\\n        IERC20(0x87dA823B6fC8EB8575a235A824690fda94674c88).approve(_mirustPool, type(uint).max); //approve mirUST uniswap LP token to stake on mirror\\n        ust.approve(address(router), type(uint256).max);\\n        ust.approve(address(curveFi), type(uint256).max);\\n        mir.approve(address(router), type(uint256).max);\\n        //DAI\\n        IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F).approve(address(router), type(uint256).max);\\n        IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F).approve(address(curveFi), type(uint256).max);\\n        //USDC\\n        IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48).approve((address(router)), type(uint).max);\\n        IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48).approve((address(curveFi)), type(uint).max);\\n        //USDT\\n        IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7).safeApprove(address(router), type(uint).max);\\n        IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7).safeApprove((address(curveFi)), type(uint).max);\\n\\n        for(uint i=0; i<weights.length; i++) {\\n            mAssets.push(Asset({\\n                weight: weights[i],\\n                mAssetToken : mAssetsTokens[i],\\n                lpPool:lpPools[i],\\n                lpToken:lpTokens[i],\\n                amountOfATotal: 0,\\n                amountOfBTotal: 0\\n            }));\\n\\n            mAssetsTokens[i].approve(address(router), type(uint).max);\\n            lpTokens[i].approve(_mirustPool, type(uint).max);\\n            lpTokens[i].approve(address(lpPools[i]), type(uint).max);\\n            lpTokens[i].approve(address(router), type(uint).max);\\n            IERC20(mirUstPooltoken).approve(address(router), type(uint).max);\\n        }\\n\\n\\n\\n    }\\n    /**\\n        @param _amount Amount of tokens to deposit in original decimals\\n        @param _token Token to deposit\\n     */\\n    function deposit(uint256 _amount, IERC20 _token) external onlyVault {\\n        require(_amount > 0, 'Invalid amount');\\n\\n        _token.safeTransferFrom(address(vault), address(this), _amount);\\n\\n        \\n        address[] memory path = new address[](2);\\n        path[0] = address(_token);\\n        path[1] = address(ust);\\n\\n        uint256 ustAmount = curveFi.exchange_underlying(curveIds[address(_token)], 0, _amount, 0);\\n        \\n        uint256[] memory amounts;        \\n\\n        for (uint256 i = 0; i < mAssets.length; i++) {\\n            address addr_ = address(mAssets[i].mAssetToken);\\n            // UST -> mAsset on Uniswap\\n            path[0] = address(ust);\\n            path[1] = addr_;\\n            uint _ustAmount = ustAmount.mul(mAssets[i].weight).div(10000);\\n            amounts = router.swapExactTokensForTokens(\\n                _ustAmount,\\n                0,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n\\n            (, , uint256 poolTokenAmount) = router.addLiquidity(addr_,  address(ust), amounts[1], _ustAmount, 0, 0, address(this), block.timestamp);\\n\\n            // stake LPToken to LPPool\\n            //no incentives for mFB pool tokens so address(0)\\n            if(address(mAssets[i].lpPool) != address(0)) {  \\n                mAssets[i].lpPool.stake(poolTokenAmount);\\n            }\\n\\n\\n            userTotalLPToken[mAssets[i].lpToken] = userTotalLPToken[mAssets[i].lpToken].add(poolTokenAmount);\\n\\n\\n            (uint mAssetAmount, uint ustAmountFromPool) = updatelpTokenValue(address(mAssets[i].lpToken), userTotalLPToken[mAssets[i].lpToken]);   \\n            mAssets[i].amountOfATotal = mAssetAmount;\\n            mAssets[i].amountOfBTotal = ustAmountFromPool; \\n            \\n        }\\n\\n        \\n    }\\n\\n    /**\\n        @param _amount Amount of tokens to withdraw. Should be scaled to 18 decimals\\n        @param _token Token to withdraw\\n     */\\n    function withdraw(uint256 _amount, IERC20 _token) external onlyVault {\\n        require(_amount > 0, \\\"Invalid Amount\\\");\\n        require(_amount <= getTotalValueInPool(), \\\"Amount cannot be greater than total\\\");\\n        address[] memory path = new address[](2);\\n        path[0] = address(mir);\\n        path[1] = address(ust);\\n\\n        uint valueInPool = getTotalValueInPool();\\n        \\n        for (uint256 i = 0; i < mAssets.length; i++) {\\n            //_amount should be 18 decimals\\n            uint amountOfLpTokenToRemove = getDataFromLPPool(address(mAssets[i].lpToken), _amount, valueInPool);\\n            \\n            //uniswap LPTokens for mFb-UST are not staked. For others, we need to get from mirror pool\\n            if(address(mAssets[i].lpPool) != address(0)) {\\n                mAssets[i].lpPool.withdraw(amountOfLpTokenToRemove);\\n            } \\n\\n            (uint256 mAssetAmount, uint256 ustAmount) =\\n                router.removeLiquidity(\\n                    address(mAssets[i].mAssetToken),\\n                    address(ust),\\n                    amountOfLpTokenToRemove, \\n                    0,\\n                    0,\\n                    address(this),\\n                    block.timestamp\\n                );\\n\\n            // mAsset -> UST on Uniswap\\n            path[0] = address(mAssets[i].mAssetToken);\\n            path[1] = address(ust);\\n            uint256[] memory amounts =\\n                router.swapExactTokensForTokens(\\n                    mAssetAmount,\\n                    0,\\n                    path,\\n                    address(this),\\n                    block.timestamp\\n                );\\n            // UST -> principalToken on Uniswap\\n            curveFi.exchange_underlying(0, curveIds[address(_token)], amounts[1].add(ustAmount), 0);\\n\\n            userTotalLPToken[mAssets[i].lpToken] = userTotalLPToken[mAssets[i].lpToken].sub(amountOfLpTokenToRemove);\\n            \\n\\n            (uint _mAssetAmount, uint _ustAmountFromPool) = updatelpTokenValue(address(mAssets[i].lpToken), userTotalLPToken[mAssets[i].lpToken]);   \\n            mAssets[i].amountOfATotal = _mAssetAmount;\\n            mAssets[i].amountOfBTotal = _ustAmountFromPool; \\n\\n            \\n        }\\n\\n        withdrawFromMirUstPool(_amount, valueInPool, false);\\n        _token.safeTransfer(msg.sender, _token.balanceOf(address(this)));\\n    }\\n\\n    function withdrawFromMirUstPool(uint _amount, uint _valueInPool, bool _withdrawAll) internal {\\n        \\n        if(reInvestedMirUstPooltoken != 0) {  \\n    \\n            address[] memory path = new address[](2);\\n            uint amountToWithdraw;\\n            path[0] = address(mir);\\n            path[1] = address(ust);\\n \\n           \\n            //_withdrawAll is true only during emergencyWIthdraw and migrateFunds.\\n            if(_withdrawAll == true) {\\n                amountToWithdraw = reInvestedMirUstPooltoken;\\n                mirustPool.getReward();\\n            } else {\\n                amountToWithdraw = reInvestedMirUstPooltoken.mul(_amount).div(_valueInPool);\\n                amountToWithdraw = amountToWithdraw > reInvestedMirUstPooltoken ? reInvestedMirUstPooltoken : amountToWithdraw;\\n            }           \\n            \\n            mirustPool.withdraw(amountToWithdraw);\\n            \\n                    router.removeLiquidity(\\n                        address(mir),\\n                        address(ust),\\n                        amountToWithdraw, \\n                        0,\\n                        0,\\n                        address(this),\\n                        block.timestamp\\n                    );\\n\\n            router.swapExactTokensForTokens(\\n                        mir.balanceOf(address(this)),\\n                        0,\\n                        path,\\n                        address(this),\\n                        block.timestamp\\n                    );\\n\\n            reInvestedMirUstPooltoken = reInvestedMirUstPooltoken.sub(amountToWithdraw);\\n        }\\n\\n\\n\\n    }\\n\\n    /** @notice This function reinvests the farmed MIR into varioud pools\\n     */\\n    function yield() external onlyVault{\\n        uint256 totalEarnedMIR;\\n        address[] memory path = new address[](2);\\n        for (uint256 i = 0; i < mAssets.length; i++) {        \\n            \\n            //no incentive on mFB-UST farm\\n            if(address(mAssets[i].lpPool) != address(0)) {\\n                uint earnedMIR = mAssets[i].lpPool.earned(address(this));\\n                if(earnedMIR != 0) {\\n                    path[0] = address(mir);\\n                    path[1] = address(ust);\\n                    mAssets[i].lpPool.getReward();\\n\\n                    totalEarnedMIR = totalEarnedMIR.add(earnedMIR);\\n                    //45% of MIR is used in MIR-UST farm. Convert half of MIR(22.5%) to UST \\n                    //router.swapExactTokensForTokens(earnedMIR.mul(2250).div(10000), 0, path, address(this), block.timestamp);\\n\\n                    //45 - MIRUST farm, 10 - to wallet, remaining 45 (22.5 UST, 22.5 mAsset)\\n\\n                    //22.5(mirUst) + 22.5(mAssetUST)\\n                    uint[] memory amounts = router.swapExactTokensForTokens(earnedMIR.mul(450).div(1000), 0, path, address(this), block.timestamp);\\n                    uint _ustAmount = amounts[1].div(2);\\n                    path[1] = address(mAssets[i].mAssetToken);\\n\\n                    //22.5% mir to mAsset\\n                    uint _mirAmount = earnedMIR.mul(2250).div(10000);\\n\\n                    //pair doesn;t exists for some tokens\\n                    if(factory.getPair(address(mir), address(mAssets[i].mAssetToken)) == address(0)) {\\n                        address[] memory pathTemp = new address[](3);\\n                        uint[] memory amountsTemp ; \\n                        pathTemp[0] = address(mir);\\n                        pathTemp[1] = address(ust);\\n                        pathTemp[2] = address(mAssets[i].mAssetToken);\\n                        amountsTemp = router.swapExactTokensForTokens(_mirAmount, 0, pathTemp, address(this), block.timestamp);  \\n                        amounts[1] = amountsTemp[2];\\n                    } else {\\n                        amounts = router.swapExactTokensForTokens(_mirAmount, 0, path, address(this), block.timestamp);\\n                    }\\n                    \\n\\n                    (,,uint poolTokenAmount) = router.addLiquidity(address(mAssets[i].mAssetToken), address(ust), amounts[1], _ustAmount, 0, 0, address(this), block.timestamp);\\n                    mAssets[i].lpPool.stake(poolTokenAmount);\\n\\n                    userTotalLPToken[mAssets[i].lpToken] = userTotalLPToken[mAssets[i].lpToken].add(poolTokenAmount);\\n                }\\n            }\\n\\n            (uint mAssetAmount, uint ustAmount) = updatelpTokenValue(address(mAssets[i].lpToken), userTotalLPToken[mAssets[i].lpToken]);\\n            mAssets[i].amountOfATotal = mAssetAmount;\\n            mAssets[i].amountOfBTotal = ustAmount; \\n        }\\n\\n        totalEarnedMIR = totalEarnedMIR.add(mirustPool.earned(address(this)));\\n        mirustPool.getReward();\\n        \\n        emit HarvestedMIR(totalEarnedMIR);\\n\\n        if(totalEarnedMIR > 0) {\\n            //total 10% fee. splitted as 4 + 4 + 2\\n            uint _yieldFee = totalEarnedMIR.div(10); //10%\\n            uint _splitFee = _yieldFee.mul(2).div(5);\\n            mir.safeTransfer(treasuryWallet, _splitFee);//4 % \\n            mir.safeTransfer(communityWallet, _splitFee);//4 % \\n            mir.safeTransfer(strategist, _yieldFee.sub(_splitFee).sub(_splitFee));//2 % \\n                \\n            (,, uint poolTokenAmount) = router.addLiquidity(address(mir), address(ust), mir.balanceOf(address(this)), ust.balanceOf(address(this)), 0, 0, address(this), block.timestamp);\\n            mirustPool.stake(poolTokenAmount);\\n\\n            reInvestedMirUstPooltoken = reInvestedMirUstPooltoken.add(poolTokenAmount);\\n        }\\n\\n        \\n    }\\n\\n    /**\\n        @param weights Percentage of mAssets - 750 means 7.5\\n        @dev Used to change the percentage of funds allocated to each pool\\n     */\\n    function reBalance(uint[] memory weights) external onlyOwner{\\n        require(weights.length == mAssets.length, \\\"Weight length mismatch\\\");\\n        uint _weightsSum;\\n        for(uint i=0; i<weights.length; i++) {\\n            Asset memory _masset = mAssets[i];\\n            _masset.weight = weights[i];\\n            mAssets[i] = _masset;      \\n            _weightsSum = _weightsSum.add(weights[i]);\\n        }\\n\\n        require(_weightsSum == 5000, \\\"Invalid weights percentages\\\"); //50% mAssets 50% UST\\n\\n        _rebalance(); // rebalance based n new weights\\n    }\\n\\n    function withdrawAllFunds(IERC20 _tokenToConvert) external onlyVault {\\n\\n        address[] memory path = new address[](2);\\n        path[1] = address(ust);\\n        for(uint i=0; i<mAssets.length; i++) {\\n\\n\\n            if(address(mAssets[i].lpPool) != address(0)) {\\n                mAssets[i].lpPool.getReward(); //withdraw rewards\\n                //tokens are in mirror's lpPool contract\\n                uint amounOfLpTokensStacked = mAssets[i].lpPool.balanceOf(address(this));\\n                if(amounOfLpTokensStacked != 0) {\\n                    mAssets[i].lpPool.withdraw(amounOfLpTokensStacked);\\n                }\\n            }\\n\\n            uint amountOfLpTokenToRemove = mAssets[i].lpToken.balanceOf(address(this));\\n            \\n            if(amountOfLpTokenToRemove != 0) {\\n                (uint256 mAssetAmount, ) = router.removeLiquidity(address(mAssets[i].mAssetToken), address(ust),amountOfLpTokenToRemove, 0, 0, address(this), block.timestamp);\\n                path[0] = address(mAssets[i].mAssetToken);\\n            \\n                router.swapExactTokensForTokens(\\n                    mAssetAmount,\\n                    0,\\n                    path,\\n                    address(this),\\n                    block.timestamp\\n                );    \\n\\n                //setting value to zero , since all amounts are withdrawn\\n                mAssets[i].amountOfATotal = 0;\\n                mAssets[i].amountOfBTotal = 0;\\n                userTotalLPToken[mAssets[i].lpToken] = 0;\\n            }\\n        \\n        }\\n        withdrawFromMirUstPool(0,0, true);\\n\\n        uint mirWithdrawn = mir.balanceOf(address(this));\\n        if(mirWithdrawn > 0) {\\n            path[0] = address(mir);\\n            router.swapExactTokensForTokens(mirWithdrawn, 0, path, address(this), block.timestamp);\\n        }\\n\\n        if(ust.balanceOf(address(this)) != 0) {\\n            curveFi.exchange_underlying(0, curveIds[address(_tokenToConvert)], ust.balanceOf(address(this)), 0);\\n            _tokenToConvert.safeTransfer(address(vault), _tokenToConvert.balanceOf(address(this)));\\n        }\\n        \\n    }\\n\\n    function setVault (address _vault) external onlyOwner{\\n        require(vault == address(0), \\\"Cannot set vault\\\");\\n        vault = _vault;\\n    }\\n\\n\\n    /**\\n        @dev amount of mAsset multiplied by price of mAssetInUst\\n        @return value Returns the value of all funds in all pools (in terms of UST)\\n     */\\n    function getTotalValueInPool() public view returns (uint256 value) {\\n        //get price of mAsset interms of UST\\n        //value = (amountOfmAsset*priceInUst) + amountOfUST\\n        address[] memory path = new address[](2);\\n        for (uint256 i = 0; i < mAssets.length; i++) {\\n            \\n            path[0] = address(mAssets[i].mAssetToken);\\n            path[1] = address(ust);\\n            uint[] memory priceInUst = router.getAmountsOut(1e18, path);\\n            \\n            value = value.add((priceInUst[1].mul(mAssets[i].amountOfATotal)).div(1e18)).add(mAssets[i].amountOfBTotal);\\n            \\n        }\\n        \\n        //get value of tokens in mirust pool\\n        (uint mirAmount, uint ustAmount) = calculateAmountWithdrawable(reInvestedMirUstPooltoken);\\n        \\n        if(mirAmount > 0) {\\n            path[0] = address(mir);\\n            path[1] = address(ust);\\n            value = value.add(router.getAmountsOut(mirAmount, path)[1]).add(ustAmount);\\n            //cacluate amount of mir+ust using reInvestedMirUstPooltoken. add to value\\n        }\\n        \\n\\n    }\\n\\n    /**\\n        @notice Function to calculate the amount of LPTokens needs to be removed from uniswap.\\n        @param _lpToken Address of uniswapPool\\n        @param _amount Amount of tokens needs to be withdrawn\\n        @param _valueInPool TotalValue in Pool\\n        @return amountOfLpTokenToRemove Amount of LPTokens to be removed from pool, to get the targetted amount.\\n       */\\n\\n    function getDataFromLPPool(address _lpToken, uint _amount, uint _valueInPool) internal view returns (uint amountOfLpTokenToRemove){\\n\\n        uint lpTokenBalance = userTotalLPToken[IERC20(_lpToken)];        \\n\\n        amountOfLpTokenToRemove = lpTokenBalance.mul(_amount).div(_valueInPool);\\n        \\n    }\\n\\n    /**\\n        @dev Function to calculate the amount to tokens that will be received from MIRUST pool, when a specific amount of LPTokens are removed \\n        @param _lpTokenAmount Amount of uniswap LPTokens\\n        @return amountMIR amount of MIR that will be received\\n        @return amountUST amount of UST that will be received\\n     */\\n    function calculateAmountWithdrawable(uint _lpTokenAmount) internal view returns(uint amountMIR , uint amountUST) {\\n        //get reserves\\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(mirUstPooltoken).getReserves();\\n        uint totalLpTOkenSupply = IUniswapV2Pair(mirUstPooltoken).totalSupply();\\n        \\n        amountMIR = _lpTokenAmount.mul(reserve0).div(totalLpTOkenSupply);\\n        amountUST = _lpTokenAmount.mul(reserve1).div(totalLpTOkenSupply);\\n\\n    }\\n\\n    /// @notice returns the amount of invidual tokens for the _lpTokenAmount\\n    /// @dev Amount of each tokens(mAsset and ust) for the given lpTokens changes over time based on the uniswap pool.\\n    function updatelpTokenValue(address _lpPairUniswap, uint _lpTokenAmount) internal view returns (uint _mAsset, uint _ust) {\\n        IUniswapV2Pair pair = IUniswapV2Pair(_lpPairUniswap);\\n        (uint reserve0, uint reserve1,) = pair.getReserves();\\n        uint totalLpTokenSupply = pair.totalSupply();\\n        \\n        _mAsset = pair.token0() == address(ust) ? _lpTokenAmount.mul(reserve1).div(totalLpTokenSupply) : _lpTokenAmount.mul(reserve0).div(totalLpTokenSupply);\\n        _ust = pair.token0() == address(ust) ? _lpTokenAmount.mul(reserve0).div(totalLpTokenSupply) : _lpTokenAmount.mul(reserve1).div(totalLpTokenSupply);\\n    }\\n\\n    ///@notice This function rebalances based on the new weights\\n    /// @dev Withdraws tokens from pools and reDeposits based on the new weights\\n    function _rebalance() internal {\\n        address[] memory path = new address[](2);\\n        path[1] = address(ust);\\n\\n        //withdraw from lpPools\\n        for (uint256 i = 0; i < mAssets.length; i++) {\\n\\n\\n            if(address(mAssets[i].lpPool) != address(0)) {\\n                mAssets[i].lpPool.getReward(); //withdraw rewards\\n                //tokens are in mirror's lpPool contract\\n                uint amounOfLpTokensStacked = mAssets[i].lpPool.balanceOf(address(this));\\n                if(amounOfLpTokensStacked != 0) {\\n                    mAssets[i].lpPool.withdraw(amounOfLpTokensStacked);\\n                }\\n            }\\n\\n            uint amountOfLpTokenToRemove = mAssets[i].lpToken.balanceOf(address(this));\\n            \\n            if(amountOfLpTokenToRemove != 0) {\\n                (uint256 mAssetAmount, ) = router.removeLiquidity(address(mAssets[i].mAssetToken), address(ust),amountOfLpTokenToRemove, 0, 0, address(this), block.timestamp);\\n                path[0] = address(mAssets[i].mAssetToken);\\n            \\n                router.swapExactTokensForTokens(\\n                    mAssetAmount,\\n                    0,\\n                    path,\\n                    address(this),\\n                    block.timestamp\\n                );    \\n\\n                //setting value to zero , since all amounts are withdrawn\\n                mAssets[i].amountOfATotal = 0;\\n                mAssets[i].amountOfBTotal = 0;\\n                userTotalLPToken[mAssets[i].lpToken] = 0;\\n            }\\n        }\\n\\n        uint ustAmount = ust.balanceOf(address(this));\\n        //deposits based on new weights\\n        for (uint256 i = 0; i < mAssets.length; i++) {\\n            address addr_ = address(mAssets[i].mAssetToken);\\n            // UST -> mAsset on Uniswap\\n            path[0] = address(ust);\\n            path[1] = addr_;\\n            uint _ustAmount = ustAmount.mul(mAssets[i].weight).div(10000);\\n            uint[] memory amounts = router.swapExactTokensForTokens(\\n                _ustAmount,\\n                0,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n\\n            (, , uint256 poolTokenAmount) = router.addLiquidity(addr_,  address(ust), amounts[1], _ustAmount, 0, 0, address(this), block.timestamp);\\n\\n            // stake LPToken to LPPool\\n            //no incentives for mFB pool tokens so address(0)\\n            if(address(mAssets[i].lpPool) != address(0)) {  \\n                mAssets[i].lpPool.stake(poolTokenAmount);\\n            }       \\n\\n            userTotalLPToken[mAssets[i].lpToken] = userTotalLPToken[mAssets[i].lpToken].add(poolTokenAmount);\\n\\n            (uint mAssetAmount, uint ustAmountFromPool) = updatelpTokenValue(address(mAssets[i].lpToken), userTotalLPToken[mAssets[i].lpToken]);   \\n            mAssets[i].amountOfATotal = mAssetAmount;\\n            mAssets[i].amountOfBTotal = ustAmountFromPool; \\n            \\n        }\\n        \\n    }\\n\\n    function setCommunityWallet(address _communityWallet) external onlyVault {\\n        communityWallet = _communityWallet;\\n    }\\n\\n    function setTreasuryWallet(address _treasuryWallet) external onlyVault {\\n        treasuryWallet = _treasuryWallet;\\n    }\\n\\n    function setStrategist(address _strategist) external onlyVault {\\n        strategist = _strategist;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/ILPPool.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.4;\\n\\n\\ninterface ILPPool {\\n    //================== Callers ==================//\\n    //function mir() external view returns (IERC20);\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function startTime() external view returns (uint256);\\n\\n    function totalReward() external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    //================== Transactors ==================//\\n\\n    function stake(uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function exit() external;\\n\\n    function getReward() external;\\n}\"\r\n    },\r\n    \"interfaces/ICurveFi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.8.0;\\n\\ninterface ICurveFi {\\n\\n  function get_virtual_price() external view returns (uint256);\\n  function get_dy(\\n    int128 i,\\n    int128 j,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function get_dy_underlying(\\n    int128 i,\\n    int128 j,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function coins(int128 arg0) external view returns (address);\\n\\n  function underlying_coins(int128 arg0) external view returns (address);\\n\\n  function balances(int128 arg0) external view returns (uint256);\\n\\n  function add_liquidity(\\n    uint256[2] calldata amounts,\\n    uint256 deadline\\n  ) external;\\n\\n  function exchange(\\n    int128 i,\\n    int128 j,\\n    uint256 dx,\\n    uint256 min_dy\\n    //uint256 deadline\\n  ) external returns (uint256);\\n\\n  function exchange_underlying(\\n    int128 i,\\n    int128 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external returns (uint256);\\n\\n  function remove_liquidity(\\n    uint256 _amount,\\n    uint256 deadline,\\n    uint256[2] calldata min_amounts\\n  ) external;\\n\\n  function remove_liquidity_imbalance(\\n    uint256[2] calldata amounts,\\n    uint256 deadline\\n  ) external;\\n}\"\r\n    },\r\n    \"interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"interface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_communityWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mirustPool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"mAssetsTokens\",\"type\":\"address[]\"},{\"internalType\":\"contract ILPPool[]\",\"name\":\"lpPools\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_mirHarvested\",\"type\":\"uint256\"}],\"name\":\"HarvestedMIR\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAIToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveFi\",\"outputs\":[{\"internalType\":\"contract ICurveFi\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalValueInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"mAssetToken\",\"type\":\"address\"},{\"internalType\":\"contract ILPPool\",\"name\":\"lpPool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOfATotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfBTotal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mir\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mirUstPooltoken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"reBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityWallet\",\"type\":\"address\"}],\"name\":\"setCommunityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTotalLPToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ust\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenToConvert\",\"type\":\"address\"}],\"name\":\"withdrawAllFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FAANGStrategy","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"00000000000000000000000059e83877bd248cbfe392dbb5a8a29959bcb48592000000000000000000000000dd6c35aff646b2fb7d8a8955ccbe0994409348d000000000000000000000000054d003d451c973ad7693f825d5b78adfc0efe9340000000000000000000000005d447fc0f8965ced158bab42414af10139edf0af000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000340000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000002ee00000000000000000000000000000000000000000000000000000000000004e200000000000000000000000000000000000000000000000000000000000005dc00000000000000000000000000000000000000000000000000000000000000fa00000000000000000000000000000000000000000000000000000000000004e200000000000000000000000000000000000000000000000000000000000000050000000000000000000000000e99cc0535bb6251f6679fa6e65d6d3b430e840b0000000000000000000000000cae9e4d663793c2a2a0b211c1cf4bbca2b9caa7000000000000000000000000d36932143f6ebdedd872d5fb0651f4b72fd15a84000000000000000000000000c8d674114bac90148d11d3c1d33c61835a0f9dcd00000000000000000000000059a921db27dd6d4d974745b7ffc5c33932653442000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000000000000000000000000000001fabef2c2dab77f01053e9600f70be1f3f657f51000000000000000000000000735659c8576d88a2eb5c810415ea51cb0693169600000000000000000000000029cf719d134c1c18dab61c2f4c0529c4895ecf440000000000000000000000005b64bb4f69c8c03250ac560aac4c7401d78a1c32000000000000000000000000000000000000000000000000000000000000000500000000000000000000000053c33f5401d69c466de3764181d19c088f21aad60000000000000000000000000ae8cb1f57e3b1b7f4f5048743710084aa69e796000000000000000000000000b022e08adc8ba2de6ba4fecb59c6d502f66e953b000000000000000000000000c99a74145682c4b4a6e9fa55d559eb49a6884f750000000000000000000000004b70ccd1cf9905be1faed025eadbd3ab124efe9a","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}