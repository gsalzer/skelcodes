{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash =\r\n            0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n}\r\n\r\nlibrary Strings {\r\n    // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\r\n    function strConcat(\r\n        string memory _a,\r\n        string memory _b,\r\n        string memory _c,\r\n        string memory _d,\r\n        string memory _e\r\n    ) internal pure returns (string memory) {\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde =\r\n            new string(\r\n                _ba.length + _bb.length + _bc.length + _bd.length + _be.length\r\n            );\r\n        bytes memory babcde = bytes(abcde);\r\n        uint256 k = 0;\r\n        for (uint256 i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n        for (uint256 i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n        for (uint256 i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n        for (uint256 i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n        for (uint256 i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n        return string(babcde);\r\n    }\r\n\r\n    function strConcat(\r\n        string memory _a,\r\n        string memory _b,\r\n        string memory _c,\r\n        string memory _d\r\n    ) internal pure returns (string memory) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n\r\n    function strConcat(\r\n        string memory _a,\r\n        string memory _b,\r\n        string memory _c\r\n    ) internal pure returns (string memory) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n\r\n    function uint2str(uint256 _i)\r\n        internal\r\n        pure\r\n        returns (string memory _uintAsString)\r\n    {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 j = _i;\r\n        uint256 len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint256 k = len - 1;\r\n        while (_i != 0) {\r\n            bstr[k--] = bytes1(uint8(48 + (_i % 10)));\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping(address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nabstract contract AdminRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event AdminAdded(address indexed account);\r\n    event AdminRemoved(address indexed account);\r\n\r\n    Roles.Role private _admins;\r\n\r\n    constructor() internal {\r\n        _addAdmin(_msgSender());\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(\r\n            isAdmin(_msgSender()),\r\n            \"AdminRole: caller does not have the Admin role\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function isAdmin(address account) public view returns (bool) {\r\n        return _admins.has(account);\r\n    }\r\n\r\n    function addAdmin(address account) public onlyAdmin {\r\n        _addAdmin(account);\r\n    }\r\n\r\n    function renounceAdmin() public {\r\n        _removeAdmin(_msgSender());\r\n    }\r\n\r\n    function _addAdmin(address account) internal {\r\n        _admins.add(account);\r\n        emit AdminAdded(account);\r\n    }\r\n\r\n    function _removeAdmin(address account) internal {\r\n        _admins.remove(account);\r\n        emit AdminRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /*\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 _interfaceId)\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(\r\n        address indexed _operator,\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _id,\r\n        uint256 _amount\r\n    );\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed _operator,\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256[] _ids,\r\n        uint256[] _amounts\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed _owner,\r\n        address indexed _operator,\r\n        bool _approved\r\n    );\r\n\r\n    /**\r\n     * @dev MUST emit when the URI is updated for a token ID\r\n     *   URIs are defined in RFC 3986\r\n     *   The URI MUST point a JSON file that conforms to the \"ERC-1155 Metadata JSON Schema\"\r\n     */\r\n    event URI(string _amount, uint256 indexed _id);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Get the balance of an account's Tokens\r\n     * @param _owner  The address of the token holder\r\n     * @param _id     ID of the Token\r\n     * @return        The _owner's balance of the Token type requested\r\n     */\r\n    function balanceOf(address _owner, uint256 _id)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @notice Get the balance of multiple account/token pairs\r\n     * @param _owners The addresses of the token holders\r\n     * @param _ids    ID of the Tokens\r\n     * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\r\n     */\r\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\n\r\n/**\r\n * @dev ERC-1155 interface for accepting safe transfers.\r\n */\r\ninterface IERC1155TokenReceiver {\r\n    /**\r\n     * @notice Handle the receipt of a single ERC1155 token type\r\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\r\n     * This function MAY throw to revert and reject the transfer\r\n     * Return of other amount than the magic value MUST result in the transaction being reverted\r\n     * Note: The token contract address is always the message sender\r\n     * @param _operator  The address which called the `safeTransferFrom` function\r\n     * @param _from      The address which previously owned the token\r\n     * @param _id        The id of the token being transferred\r\n     * @param _amount    The amount of tokens being transferred\r\n     * @param _data      Additional data with no specified format\r\n     * @return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n     */\r\n    function onERC1155Received(\r\n        address _operator,\r\n        address _from,\r\n        uint256 _id,\r\n        uint256 _amount,\r\n        bytes calldata _data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n     * @notice Handle the receipt of multiple ERC1155 token types\r\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\r\n     * This function MAY throw to revert and reject the transfer\r\n     * Return of other amount than the magic value WILL result in the transaction being reverted\r\n     * Note: The token contract address is always the message sender\r\n     * @param _operator  The address which called the `safeBatchTransferFrom` function\r\n     * @param _from      The address which previously owned the token\r\n     * @param _ids       An array containing ids of each token being transferred\r\n     * @param _amounts   An array containing amounts of each token being transferred\r\n     * @param _data      Additional data with no specified format\r\n     * @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n     */\r\n    function onERC1155BatchReceived(\r\n        address _operator,\r\n        address _from,\r\n        uint256[] calldata _ids,\r\n        uint256[] calldata _amounts,\r\n        bytes calldata _data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n     * @notice Indicates whether a contract implements the `ERC1155TokenReceiver` functions and so can accept ERC1155 token types.\r\n     * @param  interfaceID The ERC-165 interface ID that is queried for support.s\r\n     * @dev This function MUST return true if it implements the ERC1155TokenReceiver interface and ERC-165 interface.\r\n     *      This function MUST NOT consume more than 5,000 gas.\r\n     * @return Wheter ERC-165 or ERC1155TokenReceiver interfaces are supported.\r\n     */\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Implementation of Multi-Token Standard contract\r\n */\r\ncontract ERC1155 is IERC165 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    /***********************************|\r\n  |        Variables and Events       |\r\n  |__________________________________*/\r\n\r\n    // onReceive function signatures\r\n    // bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))\r\n    bytes4 internal constant ERC1155_RECEIVED_VALUE = 0xf23a6e61;\r\n    // bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))\r\n    bytes4 internal constant ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\r\n\r\n    // Objects balances\r\n    mapping(address => mapping(uint256 => uint256)) internal balances;\r\n\r\n    // Operator Functions\r\n    mapping(address => mapping(address => bool)) internal operators;\r\n\r\n    // Events\r\n    event TransferSingle(\r\n        address indexed _operator,\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _id,\r\n        uint256 _amount\r\n    );\r\n    event TransferBatch(\r\n        address indexed _operator,\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256[] _ids,\r\n        uint256[] _amounts\r\n    );\r\n    event ApprovalForAll(\r\n        address indexed _owner,\r\n        address indexed _operator,\r\n        bool _approved\r\n    );\r\n    event URI(string _uri, uint256 indexed _id);\r\n\r\n    /***********************************|\r\n  |     Public Transfer Functions     |\r\n  |__________________________________*/\r\n\r\n    /**\r\n     * @notice Transfers amount amount of an _id from the _from address to the _to address specified\r\n     * @param _from    Source address\r\n     * @param _to      Target address\r\n     * @param _id      ID of the token type\r\n     * @param _amount  Transfered amount\r\n     * @param _data    Additional data with no specified format, sent in call to `_to`\r\n     */\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _amount,\r\n        bytes memory _data\r\n    ) public {\r\n        require(\r\n            (msg.sender == _from) || isApprovedForAll(_from, msg.sender),\r\n            \"ERC1155#safeTransferFrom: INVALID_OPERATOR\"\r\n        );\r\n        require(\r\n            _to != address(0),\r\n            \"ERC1155#safeTransferFrom: INVALID_RECIPIENT\"\r\n        );\r\n        // require(_amount >= balances[_from][_id]) is not necessary since checked with safemath operations\r\n\r\n        _safeTransferFrom(_from, _to, _id, _amount);\r\n        _callonERC1155Received(_from, _to, _id, _amount, _data);\r\n    }\r\n\r\n    /**\r\n     * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\r\n     * @param _from     Source addresses\r\n     * @param _to       Target addresses\r\n     * @param _ids      IDs of each token type\r\n     * @param _amounts  Transfer amounts per token type\r\n     * @param _data     Additional data with no specified format, sent in call to `_to`\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256[] memory _ids,\r\n        uint256[] memory _amounts,\r\n        bytes memory _data\r\n    ) public {\r\n        // Requirements\r\n        require(\r\n            (msg.sender == _from) || isApprovedForAll(_from, msg.sender),\r\n            \"ERC1155#safeBatchTransferFrom: INVALID_OPERATOR\"\r\n        );\r\n        require(\r\n            _to != address(0),\r\n            \"ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT\"\r\n        );\r\n\r\n        _safeBatchTransferFrom(_from, _to, _ids, _amounts);\r\n        _callonERC1155BatchReceived(_from, _to, _ids, _amounts, _data);\r\n    }\r\n\r\n    /***********************************|\r\n  |    Internal Transfer Functions    |\r\n  |__________________________________*/\r\n\r\n    /**\r\n     * @notice Transfers amount amount of an _id from the _from address to the _to address specified\r\n     * @param _from    Source address\r\n     * @param _to      Target address\r\n     * @param _id      ID of the token type\r\n     * @param _amount  Transfered amount\r\n     */\r\n    function _safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _amount\r\n    ) internal {\r\n        // Update balances\r\n        balances[_from][_id] = balances[_from][_id].sub(_amount); // Subtract amount\r\n        balances[_to][_id] = balances[_to][_id].add(_amount); // Add amount\r\n\r\n        // Emit event\r\n        emit TransferSingle(msg.sender, _from, _to, _id, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155Received(...)\r\n     */\r\n    function _callonERC1155Received(\r\n        address _from,\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _amount,\r\n        bytes memory _data\r\n    ) internal {\r\n        // Check if recipient is contract\r\n        if (_to.isContract()) {\r\n            bytes4 retval =\r\n                IERC1155TokenReceiver(_to).onERC1155Received(\r\n                    msg.sender,\r\n                    _from,\r\n                    _id,\r\n                    _amount,\r\n                    _data\r\n                );\r\n            require(\r\n                retval == ERC1155_RECEIVED_VALUE,\r\n                \"ERC1155#_callonERC1155Received: INVALID_ON_RECEIVE_MESSAGE\"\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\r\n     * @param _from     Source addresses\r\n     * @param _to       Target addresses\r\n     * @param _ids      IDs of each token type\r\n     * @param _amounts  Transfer amounts per token type\r\n     */\r\n    function _safeBatchTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256[] memory _ids,\r\n        uint256[] memory _amounts\r\n    ) internal {\r\n        require(\r\n            _ids.length == _amounts.length,\r\n            \"ERC1155#_safeBatchTransferFrom: INVALID_ARRAYS_LENGTH\"\r\n        );\r\n\r\n        // Number of transfer to execute\r\n        uint256 nTransfer = _ids.length;\r\n\r\n        // Executing all transfers\r\n        for (uint256 i = 0; i < nTransfer; i++) {\r\n            // Update storage balance of previous bin\r\n            balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(\r\n                _amounts[i]\r\n            );\r\n            balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\r\n        }\r\n\r\n        // Emit event\r\n        emit TransferBatch(msg.sender, _from, _to, _ids, _amounts);\r\n    }\r\n\r\n    /**\r\n     * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155BatchReceived(...)\r\n     */\r\n    function _callonERC1155BatchReceived(\r\n        address _from,\r\n        address _to,\r\n        uint256[] memory _ids,\r\n        uint256[] memory _amounts,\r\n        bytes memory _data\r\n    ) internal {\r\n        // Pass data if recipient is contract\r\n        if (_to.isContract()) {\r\n            bytes4 retval =\r\n                IERC1155TokenReceiver(_to).onERC1155BatchReceived(\r\n                    msg.sender,\r\n                    _from,\r\n                    _ids,\r\n                    _amounts,\r\n                    _data\r\n                );\r\n            require(\r\n                retval == ERC1155_BATCH_RECEIVED_VALUE,\r\n                \"ERC1155#_callonERC1155BatchReceived: INVALID_ON_RECEIVE_MESSAGE\"\r\n            );\r\n        }\r\n    }\r\n\r\n    /***********************************|\r\n  |         Operator Functions        |\r\n  |__________________________________*/\r\n\r\n    /**\r\n     * @notice Enable or disable approval for a third party (\"operator\") to manage all of caller's tokens\r\n     * @param _operator  Address to add to the set of authorized operators\r\n     * @param _approved  True if the operator is approved, false to revoke approval\r\n     */\r\n    function setApprovalForAll(address _operator, bool _approved) external {\r\n        require(\r\n            msg.sender != _operator,\r\n            \"ERC1155: setting approval status for self\"\r\n        );\r\n        // Update operator status\r\n        operators[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator)\r\n        public\r\n        view\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        return operators[account][operator];\r\n    }\r\n\r\n    /***********************************|\r\n  |         Balance Functions         |\r\n  |__________________________________*/\r\n\r\n    /**\r\n     * @notice Get the balance of an account's Tokens\r\n     * @param _owner  The address of the token holder\r\n     * @param _id     ID of the Token\r\n     * @return The _owner's balance of the Token type requested\r\n     */\r\n    function balanceOf(address _owner, uint256 _id)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return balances[_owner][_id];\r\n    }\r\n\r\n    /**\r\n     * @notice Get the balance of multiple account/token pairs\r\n     * @param _owners The addresses of the token holders\r\n     * @param _ids    ID of the Tokens\r\n     * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\r\n     */\r\n    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        require(\r\n            _owners.length == _ids.length,\r\n            \"ERC1155#balanceOfBatch: INVALID_ARRAY_LENGTH\"\r\n        );\r\n\r\n        // Variables\r\n        uint256[] memory batchBalances = new uint256[](_owners.length);\r\n\r\n        // Iterate over each owner and token ID\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            batchBalances[i] = balances[_owners[i]][_ids[i]];\r\n        }\r\n\r\n        return batchBalances;\r\n    }\r\n\r\n    /***********************************|\r\n  |          ERC165 Functions         |\r\n  |__________________________________*/\r\n\r\n    /*\r\n     * INTERFACE_SIGNATURE_ERC165 = bytes4(keccak256(\"supportsInterface(bytes4)\"));\r\n     */\r\n    bytes4 private constant INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\r\n\r\n    /*\r\n     * INTERFACE_SIGNATURE_ERC1155 =\r\n     * bytes4(keccak256(\"safeTransferFrom(address,address,uint256,uint256,bytes)\")) ^\r\n     * bytes4(keccak256(\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\")) ^\r\n     * bytes4(keccak256(\"balanceOf(address,uint256)\")) ^\r\n     * bytes4(keccak256(\"balanceOfBatch(address[],uint256[])\")) ^\r\n     * bytes4(keccak256(\"setApprovalForAll(address,bool)\")) ^\r\n     * bytes4(keccak256(\"isApprovedForAll(address,address)\"));\r\n     */\r\n    bytes4 private constant INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;\r\n\r\n    /**\r\n     * @notice Query if a contract implements an interface\r\n     * @param _interfaceID  The interface identifier, as specified in ERC-165\r\n     * @return `true` if the contract implements `_interfaceID` and\r\n     */\r\n    function supportsInterface(bytes4 _interfaceID)\r\n        external\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        if (\r\n            _interfaceID == INTERFACE_SIGNATURE_ERC165 ||\r\n            _interfaceID == INTERFACE_SIGNATURE_ERC1155\r\n        ) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Multi-Fungible Tokens with minting and burning methods. These methods assume\r\n *      a parent contract to be executed as they are `internal` functions\r\n */\r\ncontract ERC1155MintBurn is ERC1155 {\r\n    using SafeMath for uint256;\r\n\r\n    /****************************************|\r\n  |            Minting Functions           |\r\n  |_______________________________________*/\r\n\r\n    /**\r\n     * @notice Mint _amount of tokens of a given id\r\n     * @param _to      The address to mint tokens to\r\n     * @param _id      Token id to mint\r\n     * @param _amount  The amount to be minted\r\n     * @param _data    Data to pass if receiver is contract\r\n     */\r\n    function _mint(\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _amount,\r\n        bytes memory _data\r\n    ) internal {\r\n        // Add _amount\r\n        balances[_to][_id] = balances[_to][_id].add(_amount);\r\n\r\n        // Emit event\r\n        emit TransferSingle(msg.sender, address(0x0), _to, _id, _amount);\r\n\r\n        // Calling onReceive method if recipient is contract\r\n        _callonERC1155Received(address(0x0), _to, _id, _amount, _data);\r\n    }\r\n\r\n    /**\r\n     * @notice Mint tokens for each ids in _ids\r\n     * @param _to       The address to mint tokens to\r\n     * @param _ids      Array of ids to mint\r\n     * @param _amounts  Array of amount of tokens to mint per id\r\n     * @param _data    Data to pass if receiver is contract\r\n     */\r\n    function _batchMint(\r\n        address _to,\r\n        uint256[] memory _ids,\r\n        uint256[] memory _amounts,\r\n        bytes memory _data\r\n    ) internal {\r\n        require(\r\n            _ids.length == _amounts.length,\r\n            \"ERC1155MintBurn#batchMint: INVALID_ARRAYS_LENGTH\"\r\n        );\r\n\r\n        // Number of mints to execute\r\n        uint256 nMint = _ids.length;\r\n\r\n        // Executing all minting\r\n        for (uint256 i = 0; i < nMint; i++) {\r\n            // Update storage balance\r\n            balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\r\n        }\r\n\r\n        // Emit batch mint event\r\n        emit TransferBatch(msg.sender, address(0x0), _to, _ids, _amounts);\r\n\r\n        // Calling onReceive method if recipient is contract\r\n        _callonERC1155BatchReceived(address(0x0), _to, _ids, _amounts, _data);\r\n    }\r\n\r\n    /****************************************|\r\n  |            Burning Functions           |\r\n  |_______________________________________*/\r\n\r\n    /**\r\n     * @notice Burn _amount of tokens of a given token id\r\n     * @param _from    The address to burn tokens from\r\n     * @param _id      Token id to burn\r\n     * @param _amount  The amount to be burned\r\n     */\r\n    function _burn(\r\n        address _from,\r\n        uint256 _id,\r\n        uint256 _amount\r\n    ) internal {\r\n        //Substract _amount\r\n        balances[_from][_id] = balances[_from][_id].sub(_amount);\r\n\r\n        // Emit event\r\n        emit TransferSingle(msg.sender, _from, address(0x0), _id, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\r\n     * @param _from     The address to burn tokens from\r\n     * @param _ids      Array of token ids to burn\r\n     * @param _amounts  Array of the amount to be burned\r\n     */\r\n    function _batchBurn(\r\n        address _from,\r\n        uint256[] memory _ids,\r\n        uint256[] memory _amounts\r\n    ) internal {\r\n        require(\r\n            _ids.length == _amounts.length,\r\n            \"ERC1155MintBurn#batchBurn: INVALID_ARRAYS_LENGTH\"\r\n        );\r\n\r\n        // Number of mints to execute\r\n        uint256 nBurn = _ids.length;\r\n\r\n        // Executing all minting\r\n        for (uint256 i = 0; i < nBurn; i++) {\r\n            // Update storage balance\r\n            balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(\r\n                _amounts[i]\r\n            );\r\n        }\r\n\r\n        // Emit batch mint event\r\n        emit TransferBatch(msg.sender, _from, address(0x0), _ids, _amounts);\r\n    }\r\n}\r\n\r\n/**\r\n * @notice Contract that handles metadata related methods.\r\n * @dev Methods assume a deterministic generation of URI based on token IDs.\r\n *      Methods also assume that URI uses hex representation of token IDs.\r\n */\r\ncontract ERC1155Metadata {\r\n    // URI's default URI prefix\r\n    string internal baseMetadataURI;\r\n\r\n    /***********************************|\r\n  |     Metadata Public Function s    |\r\n  |__________________________________*/\r\n\r\n    /**\r\n     * @notice A distinct Uniform Resource Identifier (URI) for a given token.\r\n     * @dev URIs are defined in RFC 3986.\r\n     *      URIs are assumed to be deterministically generated based on token ID\r\n     *      Token IDs are assumed to be represented in their hex format in URIs\r\n     * @return URI string\r\n     */\r\n    function uri(uint256 _id) public view virtual returns (string memory) {\r\n        return string(abi.encodePacked(baseMetadataURI, _uint2str(_id)));\r\n    }\r\n\r\n    /**\r\n     * @notice Will update the base URL of token's URI\r\n     * @param _newBaseMetadataURI New base URL of token's URI\r\n     */\r\n    function _setBaseMetadataURI(string memory _newBaseMetadataURI) internal {\r\n        baseMetadataURI = _newBaseMetadataURI;\r\n    }\r\n\r\n    /***********************************|\r\n  |    Utility Internal Functions     |\r\n  |__________________________________*/\r\n\r\n    /**\r\n     * @notice Convert uint256 to string\r\n     * @param _i Unsigned integer to convert to string\r\n     */\r\n    function _uint2str(uint256 _i)\r\n        internal\r\n        pure\r\n        returns (string memory _uintAsString)\r\n    {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n\r\n        uint256 j = _i;\r\n        uint256 ii = _i;\r\n        uint256 len;\r\n\r\n        // Get number of bytes\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n\r\n        bytes memory bstr = new bytes(len);\r\n        uint256 k = len - 1;\r\n\r\n        // Get each individual ASCII\r\n        while (ii != 0) {\r\n            bstr[k--] = bytes1(uint8(48 + (ii % 10)));\r\n            ii /= 10;\r\n        }\r\n\r\n        // Convert to string\r\n        return string(bstr);\r\n    }\r\n}\r\n\r\ncontract FANSINFT is\r\n    ERC1155,\r\n    ERC1155MintBurn,\r\n    ERC1155Metadata,\r\n    Ownable,\r\n    AdminRole,\r\n    Pausable\r\n{\r\n    using Strings for string;\r\n    using SafeMath for uint256;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    string private _contractURI;\r\n    address private _vaultWallet;\r\n    mapping(uint256 => uint256) private tokenSupply;\r\n    mapping(uint256 => string) private tokenHash;\r\n\r\n    struct TokenDetail {\r\n        string name; //artist's name\r\n        uint256 totalEdition; //limit for edition published\r\n    }\r\n\r\n    //  Mapping from token ID to TokenDetail\r\n    mapping(uint256 => TokenDetail) internal tokenIdToTokenDetail;\r\n\r\n    constructor(string memory uri_) public {\r\n        name = \"FANSI 1155\";\r\n        symbol = \"FANSI\";\r\n        _setBaseMetadataURI(uri_);\r\n        _vaultWallet = 0xebB27b23336f62eBdc44bd5faE46a8FcB068E0Ea;\r\n    }\r\n\r\n    /**\r\n     * @dev mintProjectToken a new token and assigns _amount to an address\r\n     * @param _tokenID specific Token ID\r\n     * @param _amount Optional amount to supply the first owner\r\n     * @param _tokenHash hash for token metadata\r\n     * @param _name name for token artist\r\n     * @param _totalEdition ttotalEdition for token\r\n     */\r\n    function mintProjectToken(\r\n        uint256 _tokenID,\r\n        uint256 _amount,\r\n        string memory _tokenHash,\r\n        string memory _name,\r\n        uint256 _totalEdition\r\n    ) public onlyAdmin whenNotPaused {\r\n        require(_amount != 0, \"FansiNFT: amount should be positive\");\r\n        require(bytes(_tokenHash).length > 0, \"FansiNFT: uri should be set\");\r\n        tokenHash[_tokenID] = _tokenHash;\r\n\r\n        emit URI(_tokenHash, _tokenID);\r\n\r\n        tokenIdToTokenDetail[_tokenID] = TokenDetail({\r\n            name: _name,\r\n            totalEdition: _totalEdition\r\n        });\r\n\r\n        _mint(_vaultWallet, _tokenID, _amount, \"\");\r\n\r\n        tokenSupply[_tokenID] = tokenSupply[_tokenID].add(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev mintSingleToken a new token to an address\r\n     * @param _to Address of the future owner of the token\r\n     * @param _tokenID specific Token ID\r\n     * @param _tokenHash hash for token metadata\r\n     * @param _name name for token artist\r\n     * @param _totalEdition ttotalEdition for token\r\n     */\r\n    function mintSingleToken(\r\n        address _to,\r\n        uint256 _tokenID,\r\n        string memory _tokenHash,\r\n        string memory _name,\r\n        uint256 _totalEdition\r\n    ) public onlyAdmin whenNotPaused {\r\n        require(bytes(_tokenHash).length > 0, \"FansiNFT: uri should be set\");\r\n\r\n        tokenHash[_tokenID] = _tokenHash;\r\n\r\n        emit URI(_tokenHash, _tokenID);\r\n\r\n        tokenIdToTokenDetail[_tokenID] = TokenDetail({\r\n            name: _name,\r\n            totalEdition: _totalEdition\r\n        });\r\n\r\n        _mint(_to, _tokenID, 1, \"\");\r\n\r\n        operators[_to][_msgSender()] = true;\r\n        emit ApprovalForAll(_to, _msgSender(), true);\r\n\r\n        tokenSupply[_tokenID] = tokenSupply[_tokenID].add(1);\r\n    }\r\n\r\n    /**\r\n     * @dev mintToken a new token to an address\r\n     * @param _to Address of the future owner of the token\r\n     * @param _tokenID specific Token ID\r\n     * @param _tokenHash hash for token metadata\r\n     * @param _name name for token artist\r\n     * @param _totalEdition ttotalEdition for token\r\n     */\r\n    function mintToken(\r\n        address _to,\r\n        uint256 _tokenID,\r\n        string memory _tokenHash,\r\n        string memory _name,\r\n        uint256 _totalEdition\r\n    ) public onlyAdmin whenNotPaused {\r\n        require(bytes(_tokenHash).length > 0, \"FansiNFT: uri should be set\");\r\n\r\n        tokenHash[_tokenID] = _tokenHash;\r\n\r\n        emit URI(_tokenHash, _tokenID);\r\n\r\n        tokenIdToTokenDetail[_tokenID] = TokenDetail({\r\n            name: _name,\r\n            totalEdition: _totalEdition\r\n        });\r\n\r\n        _mint(_to, _tokenID, 1, \"\");\r\n        tokenSupply[_tokenID] = tokenSupply[_tokenID].add(1);\r\n    }\r\n\r\n    /**\r\n     * @notice burnToken _amount of tokens of a given token id\r\n     * @param _from    The address to burn tokens from\r\n     * @param _id      Token id to burn\r\n     * @param _amount  The amount to be burned\r\n     */\r\n    function burnToken(\r\n        address _from,\r\n        uint256 _id,\r\n        uint256 _amount\r\n    ) public {\r\n        require(\r\n            _from == _msgSender() || isApprovedForAll(_from, _msgSender()),\r\n            \"FansiNFT: caller is not owner nor approved\"\r\n        );\r\n        _burn(_from, _id, _amount);\r\n        tokenSupply[_id] = tokenSupply[_id].sub(_amount);\r\n    }\r\n\r\n    function uri(uint256 _id) public view override returns (string memory) {\r\n        return Strings.strConcat(baseMetadataURI, tokenHash[_id]);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total quantity for a token ID\r\n     * @param _id uint256 ID of the token to query\r\n     * @return amount of token in existence\r\n     */\r\n    function totalSupply(uint256 _id) public view returns (uint256) {\r\n        return tokenSupply[_id];\r\n    }\r\n\r\n    /**\r\n     * @dev Will update the base URL of token's URI\r\n     * @param _newBaseMetadataURI New base URL of token's URI\r\n     */\r\n    function setBaseMetadataURI(string memory _newBaseMetadataURI)\r\n        public\r\n        onlyOwner\r\n        whenNotPaused\r\n    {\r\n        _setBaseMetadataURI(_newBaseMetadataURI);\r\n    }\r\n\r\n    function setTokenHash(uint256 _id, string memory _tokenHash)\r\n        public\r\n        onlyAdmin\r\n        whenNotPaused\r\n    {\r\n        _setTokenHash(_id, _tokenHash);\r\n    }\r\n\r\n    function _setTokenHash(uint256 _id, string memory _tokenHash) internal {\r\n        tokenHash[_id] = _tokenHash;\r\n    }\r\n\r\n    function contractURI() public view returns (string memory) {\r\n        return _contractURI;\r\n    }\r\n\r\n    function setContractURI(string memory contractURI_) public onlyOwner {\r\n        _contractURI = contractURI_;\r\n    }\r\n\r\n    function vaultWallet() public view returns (address) {\r\n        return _vaultWallet;\r\n    }\r\n\r\n    function setVaultWallet(address vaultWallet_) public onlyOwner {\r\n        _vaultWallet = vaultWallet_;\r\n    }\r\n\r\n    function getTokenDetail(uint256 _tokenId)\r\n        public\r\n        view\r\n        returns (string memory _name, uint256 _totalEdition)\r\n    {\r\n        return (\r\n            tokenIdToTokenDetail[_tokenId].name,\r\n            tokenIdToTokenDetail[_tokenId].totalEdition\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Pauses all token transfers.\r\n     *\r\n     * See {ERC1155Pausable} and {Pausable-_pause}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the `PAUSER_ROLE`.\r\n     */\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @dev Unpauses all token transfers.\r\n     *\r\n     * See {ERC1155Pausable} and {Pausable-_unpause}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the `PAUSER_ROLE`.\r\n     */\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenDetail\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalEdition\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalEdition\",\"type\":\"uint256\"}],\"name\":\"mintProjectToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalEdition\",\"type\":\"uint256\"}],\"name\":\"mintSingleToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalEdition\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseMetadataURI\",\"type\":\"string\"}],\"name\":\"setBaseMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenHash\",\"type\":\"string\"}],\"name\":\"setTokenHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultWallet_\",\"type\":\"address\"}],\"name\":\"setVaultWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FANSINFT","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002268747470733a2f2f676174657761792e70696e6174612e636c6f75642f697066732f000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://449e7071d06629622fcc87e3297f00208e04a2442b594dd95e5c3b7514e8fc60"}]}