{"status":"1","message":"OK","result":[{"SourceCode":"{\"Animonkeys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0x00\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 length = 0;\\r\\n        while (temp != 0) {\\r\\n            length++;\\r\\n            temp \\u003e\\u003e= 8;\\r\\n        }\\r\\n        return toHexString(value, length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\r\\n            buffer[i] = alphabet[value \\u0026 0xf];\\r\\n            value \\u003e\\u003e= 4;\\r\\n        }\\r\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721Metadata is IERC721 {\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title ERC721 token receiver interface\\r\\n * @dev Interface for any contract that wants to support safeTransfers\\r\\n * from ERC721 asset contracts.\\r\\n */\\r\\ninterface IERC721Receiver {\\r\\n    /**\\r\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\r\\n     * by `operator` from `from`, this function is called.\\r\\n     *\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\r\\n     *\\r\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721Enumerable is IERC721 {\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total amount of tokens stored by the contract.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\r\\n     * Use along with {balanceOf} to enumerate all of ``owner``\\u0027s tokens.\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\r\\n     * Use along with {totalSupply} to enumerate all tokens.\\r\\n     */\\r\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\r\\n * {ERC721Enumerable}.\\r\\n */\\r\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\r\\n    using Address for address;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Mapping from token ID to owner address\\r\\n    mapping (uint256 =\\u003e address) private _owners;\\r\\n\\r\\n    // Mapping owner address to token count\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n\\r\\n    // Mapping from token ID to approved address\\r\\n    mapping (uint256 =\\u003e address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping (address =\\u003e mapping (address =\\u003e bool)) private _operatorApprovals;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\r\\n     */\\r\\n    constructor (string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\r\\n        return interfaceId == type(IERC721).interfaceId\\r\\n            || interfaceId == type(IERC721Metadata).interfaceId\\r\\n            || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\r\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\r\\n        return _balances[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\r\\n        address owner = _owners[tokenId];\\r\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return bytes(baseURI).length \\u003e 0\\r\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\r\\n            : \\u0027\\u0027;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\r\\n     * in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public virtual override {\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\r\\n\\r\\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\r\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\r\\n\\r\\n        _operatorApprovals[_msgSender()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n    \\r\\n    \\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n        _safeTransfer(from, to, tokenId, _data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\r\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\r\\n        _transfer(from, to, tokenId);\\r\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     * and stop existing when they are burned (`_burn`).\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return _owners[tokenId] != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\r\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\r\\n        _safeMint(to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\r\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\r\\n        _mint(to, tokenId);\\r\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _mint(address to, uint256 tokenId) internal virtual {\\r\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\r\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), to, tokenId);\\r\\n\\r\\n        _balances[to] += 1;\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n\\r\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\r\\n\\r\\n        // Clear approvals\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        _balances[owner] -= 1;\\r\\n        delete _owners[tokenId];\\r\\n\\r\\n        emit Transfer(owner, address(0), tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\r\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\r\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        _balances[from] -= 1;\\r\\n        _balances[to] += 1;\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `to` to operate on `tokenId`\\r\\n     *\\r\\n     * Emits a {Approval} event.\\r\\n     */\\r\\n    function _approve(address to, uint256 tokenId) internal virtual {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n     * The call is not executed if the target address is not a contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\r\\n        private returns (bool)\\r\\n    {\\r\\n        if (to.isContract()) {\\r\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\r\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n                } else {\\r\\n                    // solhint-disable-next-line no-inline-assembly\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any token transfer. This includes minting\\r\\n     * and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``\\u0027s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``\\u0027s `tokenId` will be burned.\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\r\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\r\\n * account.\\r\\n */\\r\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\r\\n    // Mapping from owner to list of owned token IDs\\r\\n    mapping(address =\\u003e mapping(uint256 =\\u003e uint256)) private _ownedTokens;\\r\\n\\r\\n    // Mapping from token ID to index of the owner tokens list\\r\\n    mapping(uint256 =\\u003e uint256) private _ownedTokensIndex;\\r\\n\\r\\n    // Array with all token ids, used for enumeration\\r\\n    uint256[] private _allTokens;\\r\\n\\r\\n    // Mapping from token id to position in the allTokens array\\r\\n    mapping(uint256 =\\u003e uint256) private _allTokensIndex;\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\r\\n        return interfaceId == type(IERC721Enumerable).interfaceId\\r\\n            || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\r\\n        require(index \\u003c ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\r\\n        return _ownedTokens[owner][index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _allTokens.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\r\\n     */\\r\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\r\\n        require(index \\u003c ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\r\\n        return _allTokens[index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any token transfer. This includes minting\\r\\n     * and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``\\u0027s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``\\u0027s `tokenId` will be burned.\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\\r\\n        super._beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        if (from == address(0)) {\\r\\n            _addTokenToAllTokensEnumeration(tokenId);\\r\\n        } else if (from != to) {\\r\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\r\\n        }\\r\\n        if (to == address(0)) {\\r\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\r\\n        } else if (to != from) {\\r\\n            _addTokenToOwnerEnumeration(to, tokenId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to add a token to this extension\\u0027s ownership-tracking data structures.\\r\\n     * @param to address representing the new owner of the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\r\\n     */\\r\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\r\\n        uint256 length = ERC721.balanceOf(to);\\r\\n        _ownedTokens[to][length] = tokenId;\\r\\n        _ownedTokensIndex[tokenId] = length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to add a token to this extension\\u0027s token tracking data structures.\\r\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\r\\n     */\\r\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\r\\n        _allTokensIndex[tokenId] = _allTokens.length;\\r\\n        _allTokens.push(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to remove a token from this extension\\u0027s ownership-tracking data structures. Note that\\r\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\r\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\r\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\r\\n     */\\r\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\r\\n        // To prevent a gap in from\\u0027s tokens array, we store the last token in the index of the token to delete, and\\r\\n        // then delete the last slot (swap and pop).\\r\\n\\r\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\r\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\r\\n\\r\\n        // When the token to delete is the last token, the swap operation is unnecessary\\r\\n        if (tokenIndex != lastTokenIndex) {\\r\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\r\\n\\r\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\r\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token\\u0027s index\\r\\n        }\\r\\n\\r\\n        // This also deletes the contents at the last position of the array\\r\\n        delete _ownedTokensIndex[tokenId];\\r\\n        delete _ownedTokens[from][lastTokenIndex];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to remove a token from this extension\\u0027s token tracking data structures.\\r\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\r\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\r\\n     */\\r\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\r\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\r\\n        // then delete the last slot (swap and pop).\\r\\n\\r\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\r\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\r\\n\\r\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\r\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\r\\n        // an \\u0027if\\u0027 statement (like in _removeTokenFromOwnerEnumeration)\\r\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\r\\n\\r\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\r\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token\\u0027s index\\r\\n\\r\\n        // This also deletes the contents at the last position of the array\\r\\n        delete _allTokensIndex[tokenId];\\r\\n        _allTokens.pop();\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./diesel.sol\\\";\\r\\n\\r\\ncontract Animonkeys is ERC721Enumerable, Ownable, usingProvable {\\r\\n\\r\\n    using Strings for uint256;\\r\\n\\r\\n    string _baseTokenURI;\\r\\n    uint256 private _reserved = 50;\\r\\n    uint256 private _price = 0.02 ether;\\r\\n    bool public _paused = true;\\r\\n    \\r\\n    mapping (bytes32 =\\u003e uint256) requests;\\r\\n    \\r\\n    string public requestStatus;\\r\\n    \\r\\n    // Optional mapping for token URIs\\r\\n    mapping (uint256 =\\u003e string) private _tokenURIs;\\r\\n\\r\\n    event LogNewProvableQuery(string description);\\r\\n    event LogNewRequestStatus(string status);\\r\\n    event PermanentURI(string _value, uint256 indexed _id);\\r\\n\\r\\n    // withdraw addresses\\r\\n    address t1 = 0xA422bfFF5dABa6eeeFAFf84Debf609Edf0868C5f;\\r\\n    address t2 = 0xb5967DE6328290103614f74Da0C7fa5FcD9BF08A;\\r\\n\\r\\n    // 2500 Animonkeys in total\\r\\n    constructor(string memory baseURI) ERC721(\\\"Animonkeys\\\", \\\"ANMK\\\")  {\\r\\n        setBaseURI(baseURI);\\r\\n        //team gets the first 2 Animonkeys\\r\\n        // _safeMint( t1, 0);\\r\\n        // update(0);\\r\\n        // _safeMint( t2, 1);\\r\\n        // update(1);\\r\\n    }\\r\\n    \\r\\n    function mint(uint256 num) public payable {\\r\\n        uint256 supply = totalSupply();\\r\\n        require( !_paused,                              \\\"Sale paused\\\" );\\r\\n        require( num \\u003c 2,                              \\\"You can mint a maximum of 1 Animonkey\\\" );\\r\\n        require( supply + num \\u003c 2501 - _reserved,      \\\"Exceeds maximum Animonkeys supply\\\" );\\r\\n        require( msg.value \\u003e= _price * num,             \\\"Ether sent is not correct\\\" );\\r\\n\\r\\n        for(uint256 i; i \\u003c num; i++){\\r\\n            _safeMint( msg.sender, supply + i);\\r\\n            update(supply + i);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function walletOfOwner(address _owner) public view returns(uint256[] memory) {\\r\\n        uint256 tokenCount = balanceOf(_owner);\\r\\n\\r\\n        uint256[] memory tokensId = new uint256[](tokenCount);\\r\\n        for(uint256 i; i \\u003c tokenCount; i++){\\r\\n            tokensId[i] = tokenOfOwnerByIndex(_owner, i);\\r\\n        }\\r\\n        return tokensId;\\r\\n    }\\r\\n\\r\\n    // Just in case Eth does some crazy stuff\\r\\n    function setPrice(uint256 _newPrice) public onlyOwner() {\\r\\n        _price = _newPrice;\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view virtual override returns (string memory) {\\r\\n        return _baseTokenURI;\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory baseURI) public onlyOwner {\\r\\n        _baseTokenURI = baseURI;\\r\\n    }\\r\\n    \\r\\n    function getPrice() public view returns (uint256){\\r\\n        return _price;\\r\\n    }\\r\\n    \\r\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\r\\n            require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\r\\n            _tokenURIs[tokenId] = _tokenURI;\\r\\n    }\\r\\n    \\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n            require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n\\r\\n            string memory _tokenURI = _tokenURIs[tokenId];\\r\\n            string memory base = _baseURI();\\r\\n            \\r\\n            // If there is no base URI, return the token URI.\\r\\n            if (bytes(base).length == 0) {\\r\\n                return _tokenURI;\\r\\n            }\\r\\n            // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\r\\n            if (bytes(_tokenURI).length \\u003e 0) {\\r\\n                return string(abi.encodePacked(base, _tokenURI));\\r\\n            }\\r\\n            // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\r\\n            return string(abi.encodePacked(base, tokenId.toString()));\\r\\n    }\\r\\n    \\r\\n    function giveAway(address _to, uint256 _amount) external onlyOwner() {\\r\\n        require( _amount \\u003c= _reserved, \\\"Exceeds reserved Animonkeys supply\\\" );\\r\\n\\r\\n        uint256 supply = totalSupply();\\r\\n        for(uint256 i; i \\u003c _amount; i++){\\r\\n            _safeMint( _to, supply + i );\\r\\n            update(supply + i);\\r\\n        }\\r\\n\\r\\n        _reserved -= _amount;\\r\\n    }\\r\\n\\r\\n    function pause(bool val) public onlyOwner {\\r\\n        _paused = val;\\r\\n    }\\r\\n\\r\\n    function withdrawAll() public payable onlyOwner {\\r\\n        uint256 _each = address(this).balance / 2;\\r\\n        require(payable(t1).send(_each));\\r\\n        require(payable(t2).send(_each));\\r\\n    }\\r\\n    \\r\\n    \\r\\n    function __callback(\\r\\n        bytes32 myid, string memory _result\\r\\n    )\\r\\n        public override\\r\\n    {\\r\\n        require(msg.sender == provable_cbAddress());\\r\\n        \\r\\n        _setTokenURI(requests[myid], _result);\\r\\n        \\r\\n        emit PermanentURI(_result, requests[myid]);\\r\\n\\r\\n        // emit LogNewRequestStatus(requestStatus);\\r\\n    }\\r\\n    \\r\\n    function update(uint256 tokenNum)\\r\\n        public\\r\\n        payable\\r\\n    {\\r\\n        \\r\\n        emit LogNewProvableQuery(\\\"Provable query was sent, standing by for the answer...\\\");\\r\\n        // Query not encrypted: provable_query(\\\"URL\\\",\\\"json(https://api.postcodes.io/postcodes).status\\\",\\u0027{\\\"postcodes\\\" : [\\\"OX49 5NU\\\", \\\"M32 0JG\\\", \\\"NE30 1DP\\\"]}\\u0027);\\r\\n        bytes32 queryId = provable_query(\\\"URL\\\", string(abi.encodePacked(\\\"json(https://www.animetas.io/api/metadata/animonkeys/\\\", uint2str(tokenNum), \\\").result\\\")), \\r\\n\\\"BHekVRqr+iX/62X1FVzAToHYGT83vxXfo3KXhoW9AAhjoMLNOxHWLuZJnGbq28FpiGKKTpcfujkdzPRH9KOCcgdgqNdaeMmDpPeVstq84IhzzsMrMbNP673vCU9arETj8kszNGLRALmcty3jVSPggJqFhJ9qF9noiIB8ePOwa7s2E9yT9FUy5t/juxdXGc55PI93tHWLUdopaIKjOAgLr2Tsug3OiGyyH2VBB3Q8vTI6XybPppH6ew+F2vAgVss=\\\");\\r\\n        requests[queryId] = tokenNum;\\r\\n    }\\r\\n}\"},\"diesel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n// \\u003cprovableAPI\\u003e\\r\\n/*\\r\\nCopyright (c) 2015-2016 Oraclize SRL\\r\\nCopyright (c) 2016-2019 Oraclize LTD\\r\\nCopyright (c) 2019-2020 Provable Things Limited\\r\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\r\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\r\\nin the Software without restriction, including without limitation the rights\\r\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\r\\ncopies of the Software, and to permit persons to whom the Software is\\r\\nfurnished to do so, subject to the following conditions:\\r\\nThe above copyright notice and this permission notice shall be included in\\r\\nall copies or substantial portions of the Software.\\r\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\\r\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\r\\nTHE SOFTWARE.\\r\\n*/\\r\\npragma solidity ^0.8.0; // Incompatible compiler version - please select a compiler within the stated pragma range, or use a different version of the provableAPI!\\r\\n\\r\\n// Dummy contract only used to emit to end-user they are using wrong solc\\r\\nabstract contract solcChecker {\\r\\n/* INCOMPATIBLE SOLC: import the following instead: \\\"github.com/oraclize/ethereum-api/oraclizeAPI_0.4.sol\\\" */ function f(bytes calldata x) virtual external;\\r\\n}\\r\\n\\r\\ninterface ProvableI {\\r\\n\\r\\n    function cbAddress() external returns (address _cbAddress);\\r\\n    function setProofType(bytes1 _proofType) external;\\r\\n    function setCustomGasPrice(uint _gasPrice) external;\\r\\n    function getPrice(string calldata _datasource) external returns (uint _dsprice);\\r\\n    function randomDS_getSessionPubKeyHash() external view returns (bytes32 _sessionKeyHash);\\r\\n    function getPrice(string calldata _datasource, uint _gasLimit)  external returns (uint _dsprice);\\r\\n    function queryN(uint _timestamp, string calldata _datasource, bytes calldata _argN) external payable returns (bytes32 _id);\\r\\n    function query(uint _timestamp, string calldata _datasource, string calldata _arg) external payable returns (bytes32 _id);\\r\\n    function query2(uint _timestamp, string calldata _datasource, string calldata _arg1, string calldata _arg2) external payable returns (bytes32 _id);\\r\\n    function query_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg, uint _gasLimit) external payable returns (bytes32 _id);\\r\\n    function queryN_withGasLimit(uint _timestamp, string calldata _datasource, bytes calldata _argN, uint _gasLimit) external payable returns (bytes32 _id);\\r\\n    function query2_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg1, string calldata _arg2, uint _gasLimit) external payable returns (bytes32 _id);\\r\\n}\\r\\n\\r\\ninterface OracleAddrResolverI {\\r\\n    function getAddress() external returns (address _address);\\r\\n}\\r\\n/*\\r\\nBegin solidity-cborutils\\r\\nhttps://github.com/smartcontractkit/solidity-cborutils\\r\\nMIT License\\r\\nCopyright (c) 2018 SmartContract ChainLink, Ltd.\\r\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\r\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\r\\nin the Software without restriction, including without limitation the rights\\r\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\r\\ncopies of the Software, and to permit persons to whom the Software is\\r\\nfurnished to do so, subject to the following conditions:\\r\\nThe above copyright notice and this permission notice shall be included in all\\r\\ncopies or substantial portions of the Software.\\r\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\nSOFTWARE.\\r\\n*/\\r\\nlibrary Buffer {\\r\\n\\r\\n    struct buffer {\\r\\n        bytes buf;\\r\\n        uint capacity;\\r\\n    }\\r\\n\\r\\n    function init(buffer memory _buf, uint _capacity) internal pure {\\r\\n        uint capacity = _capacity;\\r\\n        if (capacity % 32 != 0) {\\r\\n            capacity += 32 - (capacity % 32);\\r\\n        }\\r\\n        _buf.capacity = capacity; // Allocate space for the buffer data\\r\\n        assembly {\\r\\n            let ptr := mload(0x40)\\r\\n            mstore(_buf, ptr)\\r\\n            mstore(ptr, 0)\\r\\n            mstore(0x40, add(ptr, capacity))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function resize(buffer memory _buf, uint _capacity) private pure {\\r\\n        bytes memory oldbuf = _buf.buf;\\r\\n        init(_buf, _capacity);\\r\\n        append(_buf, oldbuf);\\r\\n    }\\r\\n\\r\\n    function max(uint _a, uint _b) private pure returns (uint _max) {\\r\\n        if (_a \\u003e _b) {\\r\\n            return _a;\\r\\n        }\\r\\n        return _b;\\r\\n    }\\r\\n    /**\\r\\n      * @dev Appends a byte array to the end of the buffer. Resizes if doing so\\r\\n      *      would exceed the capacity of the buffer.\\r\\n      * @param _buf The buffer to append to.\\r\\n      * @param _data The data to append.\\r\\n      * @return _buffer The original buffer.\\r\\n      *\\r\\n      */\\r\\n    function append(buffer memory _buf, bytes memory _data) internal pure returns (buffer memory _buffer) {\\r\\n        if (_data.length + _buf.buf.length \\u003e _buf.capacity) {\\r\\n            resize(_buf, max(_buf.capacity, _data.length) * 2);\\r\\n        }\\r\\n        uint dest;\\r\\n        uint src;\\r\\n        uint len = _data.length;\\r\\n        assembly {\\r\\n            let bufptr := mload(_buf) // Memory address of the buffer data\\r\\n            let buflen := mload(bufptr) // Length of existing buffer data\\r\\n            dest := add(add(bufptr, buflen), 32) // Start address = buffer address + buffer length + sizeof(buffer length)\\r\\n            mstore(bufptr, add(buflen, mload(_data))) // Update buffer length\\r\\n            src := add(_data, 32)\\r\\n        }\\r\\n        for(; len \\u003e= 32; len -= 32) { // Copy word-length chunks while possible\\r\\n            assembly {\\r\\n                mstore(dest, mload(src))\\r\\n            }\\r\\n            dest += 32;\\r\\n            src += 32;\\r\\n        }\\r\\n        uint mask = 256 ** (32 - len) - 1; // Copy remaining bytes\\r\\n        assembly {\\r\\n            let srcpart := and(mload(src), not(mask))\\r\\n            let destpart := and(mload(dest), mask)\\r\\n            mstore(dest, or(destpart, srcpart))\\r\\n        }\\r\\n        return _buf;\\r\\n    }\\r\\n    /**\\r\\n      *\\r\\n      * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\r\\n      * exceed the capacity of the buffer.\\r\\n      * @param _buf The buffer to append to.\\r\\n      * @param _data The data to append.\\r\\n      *\\r\\n      */\\r\\n    function append(buffer memory _buf, uint8 _data) internal pure {\\r\\n        if (_buf.buf.length + 1 \\u003e _buf.capacity) {\\r\\n            resize(_buf, _buf.capacity * 2);\\r\\n        }\\r\\n        assembly {\\r\\n            let bufptr := mload(_buf) // Memory address of the buffer data\\r\\n            let buflen := mload(bufptr) // Length of existing buffer data\\r\\n            let dest := add(add(bufptr, buflen), 32) // Address = buffer address + buffer length + sizeof(buffer length)\\r\\n            mstore8(dest, _data)\\r\\n            mstore(bufptr, add(buflen, 1)) // Update buffer length\\r\\n        }\\r\\n    }\\r\\n    /**\\r\\n      *\\r\\n      * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\r\\n      * exceed the capacity of the buffer.\\r\\n      * @param _buf The buffer to append to.\\r\\n      * @param _data The data to append.\\r\\n      * @return _buffer The original buffer.\\r\\n      *\\r\\n      */\\r\\n    function appendInt(buffer memory _buf, uint _data, uint _len) internal pure returns (buffer memory _buffer) {\\r\\n        if (_len + _buf.buf.length \\u003e _buf.capacity) {\\r\\n            resize(_buf, max(_buf.capacity, _len) * 2);\\r\\n        }\\r\\n        uint mask = 256 ** _len - 1;\\r\\n        assembly {\\r\\n            let bufptr := mload(_buf) // Memory address of the buffer data\\r\\n            let buflen := mload(bufptr) // Length of existing buffer data\\r\\n            let dest := add(add(bufptr, buflen), _len) // Address = buffer address + buffer length + sizeof(buffer length) + len\\r\\n            mstore(dest, or(and(mload(dest), not(mask)), _data))\\r\\n            mstore(bufptr, add(buflen, _len)) // Update buffer length\\r\\n        }\\r\\n        return _buf;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary CBOR {\\r\\n\\r\\n    using Buffer for Buffer.buffer;\\r\\n\\r\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\r\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\r\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\r\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\r\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\r\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\r\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\r\\n\\r\\n    function encodeType(Buffer.buffer memory _buf, uint8 _major, uint _value) private pure {\\r\\n        if (_value \\u003c= 23) {\\r\\n            _buf.append(uint8((_major \\u003c\\u003c 5) | _value));\\r\\n        } else if (_value \\u003c= 0xFF) {\\r\\n            _buf.append(uint8((_major \\u003c\\u003c 5) | 24));\\r\\n            _buf.appendInt(_value, 1);\\r\\n        } else if (_value \\u003c= 0xFFFF) {\\r\\n            _buf.append(uint8((_major \\u003c\\u003c 5) | 25));\\r\\n            _buf.appendInt(_value, 2);\\r\\n        } else if (_value \\u003c= 0xFFFFFFFF) {\\r\\n            _buf.append(uint8((_major \\u003c\\u003c 5) | 26));\\r\\n            _buf.appendInt(_value, 4);\\r\\n        } else if (_value \\u003c= 0xFFFFFFFFFFFFFFFF) {\\r\\n            _buf.append(uint8((_major \\u003c\\u003c 5) | 27));\\r\\n            _buf.appendInt(_value, 8);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function encodeIndefiniteLengthType(Buffer.buffer memory _buf, uint8 _major) private pure {\\r\\n        _buf.append(uint8((_major \\u003c\\u003c 5) | 31));\\r\\n    }\\r\\n\\r\\n    function encodeUInt(Buffer.buffer memory _buf, uint _value) internal pure {\\r\\n        encodeType(_buf, MAJOR_TYPE_INT, _value);\\r\\n    }\\r\\n\\r\\n    function encodeInt(Buffer.buffer memory _buf, int _value) internal pure {\\r\\n        if (_value \\u003e= 0) {\\r\\n            encodeType(_buf, MAJOR_TYPE_INT, uint(_value));\\r\\n        } else {\\r\\n            encodeType(_buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - _value));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function encodeBytes(Buffer.buffer memory _buf, bytes memory _value) internal pure {\\r\\n        encodeType(_buf, MAJOR_TYPE_BYTES, _value.length);\\r\\n        _buf.append(_value);\\r\\n    }\\r\\n\\r\\n    function encodeString(Buffer.buffer memory _buf, string memory _value) internal pure {\\r\\n        encodeType(_buf, MAJOR_TYPE_STRING, bytes(_value).length);\\r\\n        _buf.append(bytes(_value));\\r\\n    }\\r\\n\\r\\n    function startArray(Buffer.buffer memory _buf) internal pure {\\r\\n        encodeIndefiniteLengthType(_buf, MAJOR_TYPE_ARRAY);\\r\\n    }\\r\\n\\r\\n    function startMap(Buffer.buffer memory _buf) internal pure {\\r\\n        encodeIndefiniteLengthType(_buf, MAJOR_TYPE_MAP);\\r\\n    }\\r\\n\\r\\n    function endSequence(Buffer.buffer memory _buf) internal pure {\\r\\n        encodeIndefiniteLengthType(_buf, MAJOR_TYPE_CONTENT_FREE);\\r\\n    }\\r\\n}\\r\\n/*\\r\\nEnd solidity-cborutils\\r\\n*/\\r\\ncontract usingProvable {\\r\\n\\r\\n    using CBOR for Buffer.buffer;\\r\\n\\r\\n    ProvableI provable;\\r\\n    OracleAddrResolverI OAR;\\r\\n\\r\\n    uint constant day = 60 * 60 * 24;\\r\\n    uint constant week = 60 * 60 * 24 * 7;\\r\\n    uint constant month = 60 * 60 * 24 * 30;\\r\\n\\r\\n    bytes1 constant proofType_NONE = 0x00;\\r\\n    bytes1 constant proofType_Ledger = 0x30;\\r\\n    bytes1 constant proofType_Native = 0xF0;\\r\\n    bytes1 constant proofStorage_IPFS = 0x01;\\r\\n    bytes1 constant proofType_Android = 0x40;\\r\\n    bytes1 constant proofType_TLSNotary = 0x10;\\r\\n\\r\\n    string provable_network_name;\\r\\n    uint8 constant networkID_auto = 0;\\r\\n    uint8 constant networkID_morden = 2;\\r\\n    uint8 constant networkID_mainnet = 1;\\r\\n    uint8 constant networkID_testnet = 2;\\r\\n    uint8 constant networkID_consensys = 161;\\r\\n\\r\\n    mapping(bytes32 =\\u003e bytes32) provable_randomDS_args;\\r\\n    mapping(bytes32 =\\u003e bool) provable_randomDS_sessionKeysHashVerified;\\r\\n\\r\\n    modifier provableAPI {\\r\\n        if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {\\r\\n            provable_setNetwork(networkID_auto);\\r\\n        }\\r\\n        if (address(provable) != OAR.getAddress()) {\\r\\n            provable = ProvableI(OAR.getAddress());\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier provable_randomDS_proofVerify(bytes32 _queryId, string memory _result, bytes memory _proof) {\\r\\n        // RandomDS Proof Step 1: The prefix has to match \\u0027LP\\\\x01\\u0027 (Ledger Proof version 1)\\r\\n        require((_proof[0] == \\\"L\\\") \\u0026\\u0026 (_proof[1] == \\\"P\\\") \\u0026\\u0026 (uint8(_proof[2]) == uint8(1)));\\r\\n        bool proofVerified = provable_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), provable_getNetworkName());\\r\\n        require(proofVerified);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function provable_setNetwork(uint8 _networkID) internal returns (bool _networkSet) {\\r\\n      _networkID; // NOTE: Silence the warning and remain backwards compatible\\r\\n      return provable_setNetwork();\\r\\n    }\\r\\n\\r\\n    function provable_setNetworkName(string memory _network_name) internal {\\r\\n        provable_network_name = _network_name;\\r\\n    }\\r\\n\\r\\n    function provable_getNetworkName() internal view returns (string memory _networkName) {\\r\\n        return provable_network_name;\\r\\n    }\\r\\n\\r\\n    function provable_setNetwork() internal returns (bool _networkSet) {\\r\\n        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) \\u003e 0) { //mainnet\\r\\n            OAR = OracleAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\\r\\n            provable_setNetworkName(\\\"eth_mainnet\\\");\\r\\n            return true;\\r\\n        }\\r\\n        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) \\u003e 0) { //ropsten testnet\\r\\n            OAR = OracleAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\\r\\n            provable_setNetworkName(\\\"eth_ropsten3\\\");\\r\\n            return true;\\r\\n        }\\r\\n        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) \\u003e 0) { //kovan testnet\\r\\n            OAR = OracleAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\\r\\n            provable_setNetworkName(\\\"eth_kovan\\\");\\r\\n            return true;\\r\\n        }\\r\\n        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) \\u003e 0) { //rinkeby testnet\\r\\n            OAR = OracleAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);\\r\\n            provable_setNetworkName(\\\"eth_rinkeby\\\");\\r\\n            return true;\\r\\n        }\\r\\n        if (getCodeSize(0xa2998EFD205FB9D4B4963aFb70778D6354ad3A41) \\u003e 0) { //goerli testnet\\r\\n            OAR = OracleAddrResolverI(0xa2998EFD205FB9D4B4963aFb70778D6354ad3A41);\\r\\n            provable_setNetworkName(\\\"eth_goerli\\\");\\r\\n            return true;\\r\\n        }\\r\\n        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) \\u003e 0) { //ethereum-bridge\\r\\n            OAR = OracleAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);\\r\\n            return true;\\r\\n        }\\r\\n        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) \\u003e 0) { //ether.camp ide\\r\\n            OAR = OracleAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);\\r\\n            return true;\\r\\n        }\\r\\n        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) \\u003e 0) { //browser-solidity\\r\\n            OAR = OracleAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n    /**\\r\\n     * @dev The following `__callback` functions are just placeholders ideally\\r\\n     *      meant to be defined in child contract when proofs are used.\\r\\n     *      The function bodies simply silence compiler warnings.\\r\\n     */\\r\\n    function __callback(bytes32 _myid, string memory _result) virtual public {\\r\\n        __callback(_myid, _result, new bytes(0));\\r\\n    }\\r\\n\\r\\n    function __callback(bytes32 _myid, string memory _result, bytes memory _proof) virtual public {\\r\\n      _myid; _result; _proof;\\r\\n      provable_randomDS_args[bytes32(0)] = bytes32(0);\\r\\n    }\\r\\n\\r\\n    function provable_getPrice(string memory _datasource) provableAPI internal returns (uint _queryPrice) {\\r\\n        return provable.getPrice(_datasource);\\r\\n    }\\r\\n\\r\\n    function provable_getPrice(string memory _datasource, uint _gasLimit) provableAPI internal returns (uint _queryPrice) {\\r\\n        return provable.getPrice(_datasource, _gasLimit);\\r\\n    }\\r\\n\\r\\n    function provable_query(string memory _datasource, string memory _arg) provableAPI internal returns (bytes32 _id) {\\r\\n        uint price = provable.getPrice(_datasource);\\r\\n        if (price \\u003e 1 ether + tx.gasprice * 200000) {\\r\\n            return 0; // Unexpectedly high price\\r\\n        }\\r\\n        return provable.query{value: price}(0, _datasource, _arg);\\r\\n    }\\r\\n\\r\\n    function provable_query(uint _timestamp, string memory _datasource, string memory _arg) provableAPI internal returns (bytes32 _id) {\\r\\n        uint price = provable.getPrice(_datasource);\\r\\n        if (price \\u003e 1 ether + tx.gasprice * 200000) {\\r\\n            return 0; // Unexpectedly high price\\r\\n        }\\r\\n        return provable.query{value: price}(_timestamp, _datasource, _arg);\\r\\n    }\\r\\n\\r\\n    function provable_query(uint _timestamp, string memory _datasource, string memory _arg, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\r\\n        uint price = provable.getPrice(_datasource,_gasLimit);\\r\\n        if (price \\u003e 1 ether + tx.gasprice * _gasLimit) {\\r\\n            return 0; // Unexpectedly high price\\r\\n        }\\r\\n        return provable.query_withGasLimit{value: price}(_timestamp, _datasource, _arg, _gasLimit);\\r\\n    }\\r\\n\\r\\n    function provable_query(string memory _datasource, string memory _arg, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\r\\n        uint price = provable.getPrice(_datasource, _gasLimit);\\r\\n        if (price \\u003e 1 ether + tx.gasprice * _gasLimit) {\\r\\n           return 0; // Unexpectedly high price\\r\\n        }\\r\\n        return provable.query_withGasLimit{value: price}(0, _datasource, _arg, _gasLimit);\\r\\n    }\\r\\n\\r\\n    function provable_query(string memory _datasource, string memory _arg1, string memory _arg2) provableAPI internal returns (bytes32 _id) {\\r\\n        uint price = provable.getPrice(_datasource);\\r\\n        if (price \\u003e 1 ether + tx.gasprice * 200000) {\\r\\n            return 0; // Unexpectedly high price\\r\\n        }\\r\\n        return provable.query2{value: price}(0, _datasource, _arg1, _arg2);\\r\\n    }\\r\\n\\r\\n    function provable_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2) provableAPI internal returns (bytes32 _id) {\\r\\n        uint price = provable.getPrice(_datasource);\\r\\n        if (price \\u003e 1 ether + tx.gasprice * 200000) {\\r\\n            return 0; // Unexpectedly high price\\r\\n        }\\r\\n        return provable.query2{value: price}(_timestamp, _datasource, _arg1, _arg2);\\r\\n    }\\r\\n\\r\\n    function provable_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\r\\n        uint price = provable.getPrice(_datasource, _gasLimit);\\r\\n        if (price \\u003e 1 ether + tx.gasprice * _gasLimit) {\\r\\n            return 0; // Unexpectedly high price\\r\\n        }\\r\\n        return provable.query2_withGasLimit{value: price}(_timestamp, _datasource, _arg1, _arg2, _gasLimit);\\r\\n    }\\r\\n\\r\\n    function provable_query(string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\r\\n        uint price = provable.getPrice(_datasource, _gasLimit);\\r\\n        if (price \\u003e 1 ether + tx.gasprice * _gasLimit) {\\r\\n            return 0; // Unexpectedly high price\\r\\n        }\\r\\n        return provable.query2_withGasLimit{value: price}(0, _datasource, _arg1, _arg2, _gasLimit);\\r\\n    }\\r\\n\\r\\n    function provable_query(string memory _datasource, string[] memory _argN) provableAPI internal returns (bytes32 _id) {\\r\\n        uint price = provable.getPrice(_datasource);\\r\\n        if (price \\u003e 1 ether + tx.gasprice * 200000) {\\r\\n            return 0; // Unexpectedly high price\\r\\n        }\\r\\n        bytes memory args = stra2cbor(_argN);\\r\\n        return provable.queryN{value: price}(0, _datasource, args);\\r\\n    }\\r\\n\\r\\n    function provable_query(uint _timestamp, string memory _datasource, string[] memory _argN) provableAPI internal returns (bytes32 _id) {\\r\\n        uint price = provable.getPrice(_datasource);\\r\\n        if (price \\u003e 1 ether + tx.gasprice * 200000) {\\r\\n            return 0; // Unexpectedly high price\\r\\n        }\\r\\n        bytes memory args = stra2cbor(_argN);\\r\\n        return provable.queryN{value: price}(_timestamp, _datasource, args);\\r\\n    }\\r\\n\\r\\n    function provable_query(uint _timestamp, string memory _datasource, string[] memory _argN, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\r\\n        uint price = provable.getPrice(_datasource, _gasLimit);\\r\\n        if (price \\u003e 1 ether + tx.gasprice * _gasLimit) {\\r\\n            return 0; // Unexpectedly high price\\r\\n        }\\r\\n        bytes memory args = stra2cbor(_argN);\\r\\n        return provable.queryN_withGasLimit{value: price}(_timestamp, _datasource, args, _gasLimit);\\r\\n    }\\r\\n\\r\\n    function provable_query(string memory _datasource, string[] memory _argN, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\r\\n        uint price = provable.getPrice(_datasource, _gasLimit);\\r\\n        if (price \\u003e 1 ether + tx.gasprice * _gasLimit) {\\r\\n            return 0; // Unexpectedly high price\\r\\n        }\\r\\n        bytes memory args = stra2cbor(_argN);\\r\\n        return provable.queryN_withGasLimit{value: price}(0, _datasource, args, _gasLimit);\\r\\n    }\\r\\n\\r\\n    function provable_query(string memory _datasource, string[1] memory _args) provableAPI internal returns (bytes32 _id) {\\r\\n        string[] memory dynargs = new string[](1);\\r\\n        dynargs[0] = _args[0];\\r\\n        return provable_query(_datasource, dynargs);\\r\\n    }\\r\\n\\r\\n    function provable_query(uint _timestamp, string memory _datasource, string[1] memory _args) provableAPI internal returns (bytes32 _id) {\\r\\n        string[] memory dynargs = new string[](1);\\r\\n        dynargs[0] = _args[0];\\r\\n        return provable_query(_timestamp, _datasource, dynargs);\\r\\n    }\\r\\n\\r\\n    function provable_query(uint _timestamp, string memory _datasource, string[1] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\r\\n        string[] memory dynargs = new string[](1);\\r\\n        dynargs[0] = _args[0];\\r\\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\\r\\n    }\\r\\n\\r\\n    function provable_query(string memory _datasource, string[1] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\r\\n        string[] memory dynargs = new string[](1);\\r\\n        dynargs[0] = _args[0];\\r\\n        return provable_query(_datasource, dynargs, _gasLimit);\\r\\n    }\\r\\n\\r\\n    function provable_query(string memory _datasource, string[2] memory _args) provableAPI internal returns (bytes32 _id) {\\r\\n        string[] memory dynargs = new string[](2);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        return provable_query(_datasource, dynargs);\\r\\n    }\\r\\n\\r\\n    function provable_query(uint _timestamp, string memory _datasource, string[2] memory _args) provableAPI internal returns (bytes32 _id) {\\r\\n        string[] memory dynargs = new string[](2);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        return provable_query(_timestamp, _datasource, dynargs);\\r\\n    }\\r\\n\\r\\n    function provable_query(uint _timestamp, string memory _datasource, string[2] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\r\\n        string[] memory dynargs = new string[](2);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\\r\\n    }\\r\\n\\r\\n    function provable_query(string memory _datasource, string[2] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\r\\n        string[] memory dynargs = new string[](2);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        return provable_query(_datasource, dynargs, _gasLimit);\\r\\n    }\\r\\n\\r\\n    function provable_query(string memory _datasource, string[3] memory _args) provableAPI internal returns (bytes32 _id) {\\r\\n        string[] memory dynargs = new string[](3);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        dynargs[2] = _args[2];\\r\\n        return provable_query(_datasource, dynargs);\\r\\n    }\\r\\n\\r\\n    function provable_query(uint _timestamp, string memory _datasource, string[3] memory _args) provableAPI internal returns (bytes32 _id) {\\r\\n        string[] memory dynargs = new string[](3);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        dynargs[2] = _args[2];\\r\\n        return provable_query(_timestamp, _datasource, dynargs);\\r\\n    }\\r\\n\\r\\n    function provable_query(uint _timestamp, string memory _datasource, string[3] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\r\\n        string[] memory dynargs = new string[](3);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        dynargs[2] = _args[2];\\r\\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\\r\\n    }\\r\\n\\r\\n    function provable_query(string memory _datasource, string[3] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\r\\n        string[] memory dynargs = new string[](3);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        dynargs[2] = _args[2];\\r\\n        return provable_query(_datasource, dynargs, _gasLimit);\\r\\n    }\\r\\n\\r\\n    function provable_query(string memory _datasource, string[4] memory _args) provableAPI internal returns (bytes32 _id) {\\r\\n        string[] memory dynargs = new string[](4);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        dynargs[2] = _args[2];\\r\\n        dynargs[3] = _args[3];\\r\\n        return provable_query(_datasource, dynargs);\\r\\n    }\\r\\n\\r\\n    function provable_query(uint _timestamp, string memory _datasource, string[4] memory _args) provableAPI internal returns (bytes32 _id) {\\r\\n        string[] memory dynargs = new string[](4);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        dynargs[2] = _args[2];\\r\\n        dynargs[3] = _args[3];\\r\\n        return provable_query(_timestamp, _datasource, dynargs);\\r\\n    }\\r\\n\\r\\n    function provable_query(uint _timestamp, string memory _datasource, string[4] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\r\\n        string[] memory dynargs = new string[](4);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        dynargs[2] = _args[2];\\r\\n        dynargs[3] = _args[3];\\r\\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\\r\\n    }\\r\\n\\r\\n    function provable_query(string memory _datasource, string[4] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\r\\n        string[] memory dynargs = new string[](4);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        dynargs[2] = _args[2];\\r\\n        dynargs[3] = _args[3];\\r\\n        return provable_query(_datasource, dynargs, _gasLimit);\\r\\n    }\\r\\n\\r\\n    function provable_query(string memory _datasource, string[5] memory _args) provableAPI internal returns (bytes32 _id) {\\r\\n        string[] memory dynargs = new string[](5);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        dynargs[2] = _args[2];\\r\\n        dynargs[3] = _args[3];\\r\\n        dynargs[4] = _args[4];\\r\\n        return provable_query(_datasource, dynargs);\\r\\n    }\\r\\n\\r\\n    function provable_query(uint _timestamp, string memory _datasource, string[5] memory _args) provableAPI internal returns (bytes32 _id) {\\r\\n        string[] memory dynargs = new string[](5);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        dynargs[2] = _args[2];\\r\\n        dynargs[3] = _args[3];\\r\\n        dynargs[4] = _args[4];\\r\\n        return provable_query(_timestamp, _datasource, dynargs);\\r\\n    }\\r\\n\\r\\n    function provable_query(uint _timestamp, string memory _datasource, string[5] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\r\\n        string[] memory dynargs = new string[](5);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        dynargs[2] = _args[2];\\r\\n        dynargs[3] = _args[3];\\r\\n        dynargs[4] = _args[4];\\r\\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\\r\\n    }\\r\\n\\r\\n    function provable_query(string memory _datasource, string[5] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\r\\n        string[] memory dynargs = new string[](5);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        dynargs[2] = _args[2];\\r\\n        dynargs[3] = _args[3];\\r\\n        dynargs[4] = _args[4];\\r\\n        return provable_query(_datasource, dynargs, _gasLimit);\\r\\n    }\\r\\n\\r\\n    function provable_query(string memory _datasource, bytes[] memory _argN) provableAPI internal returns (bytes32 _id) {\\r\\n        uint price = provable.getPrice(_datasource);\\r\\n        if (price \\u003e 1 ether + tx.gasprice * 200000) {\\r\\n            return 0; // Unexpectedly high price\\r\\n        }\\r\\n        bytes memory args = ba2cbor(_argN);\\r\\n        return provable.queryN{value: price}(0, _datasource, args);\\r\\n    }\\r\\n\\r\\n    function provable_query(uint _timestamp, string memory _datasource, bytes[] memory _argN) provableAPI internal returns (bytes32 _id) {\\r\\n        uint price = provable.getPrice(_datasource);\\r\\n        if (price \\u003e 1 ether + tx.gasprice * 200000) {\\r\\n            return 0; // Unexpectedly high price\\r\\n        }\\r\\n        bytes memory args = ba2cbor(_argN);\\r\\n        return provable.queryN{value: price}(_timestamp, _datasource, args);\\r\\n    }\\r\\n\\r\\n    function provable_query(uint _timestamp, string memory _datasource, bytes[] memory _argN, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\r\\n        uint price = provable.getPrice(_datasource, _gasLimit);\\r\\n        if (price \\u003e 1 ether + tx.gasprice * _gasLimit) {\\r\\n            return 0; // Unexpectedly high price\\r\\n        }\\r\\n        bytes memory args = ba2cbor(_argN);\\r\\n        return provable.queryN_withGasLimit{value: price}(_timestamp, _datasource, args, _gasLimit);\\r\\n    }\\r\\n\\r\\n    function provable_query(string memory _datasource, bytes[] memory _argN, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\r\\n        uint price = provable.getPrice(_datasource, _gasLimit);\\r\\n        if (price \\u003e 1 ether + tx.gasprice * _gasLimit) {\\r\\n            return 0; // Unexpectedly high price\\r\\n        }\\r\\n        bytes memory args = ba2cbor(_argN);\\r\\n        return provable.queryN_withGasLimit{value: price}(0, _datasource, args, _gasLimit);\\r\\n    }\\r\\n\\r\\n    function provable_query(string memory _datasource, bytes[1] memory _args) provableAPI internal returns (bytes32 _id) {\\r\\n        bytes[] memory dynargs = new bytes[](1);\\r\\n        dynargs[0] = _args[0];\\r\\n        return provable_query(_datasource, dynargs);\\r\\n    }\\r\\n\\r\\n    function provable_query(uint _timestamp, string memory _datasource, bytes[1] memory _args) provableAPI internal returns (bytes32 _id) {\\r\\n        bytes[] memory dynargs = new bytes[](1);\\r\\n        dynargs[0] = _args[0];\\r\\n        return provable_query(_timestamp, _datasource, dynargs);\\r\\n    }\\r\\n\\r\\n    function provable_query(uint _timestamp, string memory _datasource, bytes[1] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\r\\n        bytes[] memory dynargs = new bytes[](1);\\r\\n        dynargs[0] = _args[0];\\r\\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\\r\\n    }\\r\\n\\r\\n    function provable_query(string memory _datasource, bytes[1] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\r\\n        bytes[] memory dynargs = new bytes[](1);\\r\\n        dynargs[0] = _args[0];\\r\\n        return provable_query(_datasource, dynargs, _gasLimit);\\r\\n    }\\r\\n\\r\\n    function provable_query(string memory _datasource, bytes[2] memory _args) provableAPI internal returns (bytes32 _id) {\\r\\n        bytes[] memory dynargs = new bytes[](2);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        return provable_query(_datasource, dynargs);\\r\\n    }\\r\\n\\r\\n    function provable_query(uint _timestamp, string memory _datasource, bytes[2] memory _args) provableAPI internal returns (bytes32 _id) {\\r\\n        bytes[] memory dynargs = new bytes[](2);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        return provable_query(_timestamp, _datasource, dynargs);\\r\\n    }\\r\\n\\r\\n    function provable_query(uint _timestamp, string memory _datasource, bytes[2] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\r\\n        bytes[] memory dynargs = new bytes[](2);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\\r\\n    }\\r\\n\\r\\n    function provable_query(string memory _datasource, bytes[2] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\r\\n        bytes[] memory dynargs = new bytes[](2);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        return provable_query(_datasource, dynargs, _gasLimit);\\r\\n    }\\r\\n\\r\\n    function provable_query(string memory _datasource, bytes[3] memory _args) provableAPI internal returns (bytes32 _id) {\\r\\n        bytes[] memory dynargs = new bytes[](3);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        dynargs[2] = _args[2];\\r\\n        return provable_query(_datasource, dynargs);\\r\\n    }\\r\\n\\r\\n    function provable_query(uint _timestamp, string memory _datasource, bytes[3] memory _args) provableAPI internal returns (bytes32 _id) {\\r\\n        bytes[] memory dynargs = new bytes[](3);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        dynargs[2] = _args[2];\\r\\n        return provable_query(_timestamp, _datasource, dynargs);\\r\\n    }\\r\\n\\r\\n    function provable_query(uint _timestamp, string memory _datasource, bytes[3] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\r\\n        bytes[] memory dynargs = new bytes[](3);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        dynargs[2] = _args[2];\\r\\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\\r\\n    }\\r\\n\\r\\n    function provable_query(string memory _datasource, bytes[3] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\r\\n        bytes[] memory dynargs = new bytes[](3);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        dynargs[2] = _args[2];\\r\\n        return provable_query(_datasource, dynargs, _gasLimit);\\r\\n    }\\r\\n\\r\\n    function provable_query(string memory _datasource, bytes[4] memory _args) provableAPI internal returns (bytes32 _id) {\\r\\n        bytes[] memory dynargs = new bytes[](4);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        dynargs[2] = _args[2];\\r\\n        dynargs[3] = _args[3];\\r\\n        return provable_query(_datasource, dynargs);\\r\\n    }\\r\\n\\r\\n    function provable_query(uint _timestamp, string memory _datasource, bytes[4] memory _args) provableAPI internal returns (bytes32 _id) {\\r\\n        bytes[] memory dynargs = new bytes[](4);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        dynargs[2] = _args[2];\\r\\n        dynargs[3] = _args[3];\\r\\n        return provable_query(_timestamp, _datasource, dynargs);\\r\\n    }\\r\\n\\r\\n    function provable_query(uint _timestamp, string memory _datasource, bytes[4] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\r\\n        bytes[] memory dynargs = new bytes[](4);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        dynargs[2] = _args[2];\\r\\n        dynargs[3] = _args[3];\\r\\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\\r\\n    }\\r\\n\\r\\n    function provable_query(string memory _datasource, bytes[4] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\r\\n        bytes[] memory dynargs = new bytes[](4);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        dynargs[2] = _args[2];\\r\\n        dynargs[3] = _args[3];\\r\\n        return provable_query(_datasource, dynargs, _gasLimit);\\r\\n    }\\r\\n\\r\\n    function provable_query(string memory _datasource, bytes[5] memory _args) provableAPI internal returns (bytes32 _id) {\\r\\n        bytes[] memory dynargs = new bytes[](5);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        dynargs[2] = _args[2];\\r\\n        dynargs[3] = _args[3];\\r\\n        dynargs[4] = _args[4];\\r\\n        return provable_query(_datasource, dynargs);\\r\\n    }\\r\\n\\r\\n    function provable_query(uint _timestamp, string memory _datasource, bytes[5] memory _args) provableAPI internal returns (bytes32 _id) {\\r\\n        bytes[] memory dynargs = new bytes[](5);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        dynargs[2] = _args[2];\\r\\n        dynargs[3] = _args[3];\\r\\n        dynargs[4] = _args[4];\\r\\n        return provable_query(_timestamp, _datasource, dynargs);\\r\\n    }\\r\\n\\r\\n    function provable_query(uint _timestamp, string memory _datasource, bytes[5] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\r\\n        bytes[] memory dynargs = new bytes[](5);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        dynargs[2] = _args[2];\\r\\n        dynargs[3] = _args[3];\\r\\n        dynargs[4] = _args[4];\\r\\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\\r\\n    }\\r\\n\\r\\n    function provable_query(string memory _datasource, bytes[5] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\r\\n        bytes[] memory dynargs = new bytes[](5);\\r\\n        dynargs[0] = _args[0];\\r\\n        dynargs[1] = _args[1];\\r\\n        dynargs[2] = _args[2];\\r\\n        dynargs[3] = _args[3];\\r\\n        dynargs[4] = _args[4];\\r\\n        return provable_query(_datasource, dynargs, _gasLimit);\\r\\n    }\\r\\n\\r\\n    function provable_setProof(bytes1 _proofP) provableAPI internal {\\r\\n        return provable.setProofType(_proofP);\\r\\n    }\\r\\n\\r\\n\\r\\n    function provable_cbAddress() provableAPI internal returns (address _callbackAddress) {\\r\\n        return provable.cbAddress();\\r\\n    }\\r\\n\\r\\n    function getCodeSize(address _addr) view internal returns (uint _size) {\\r\\n        assembly {\\r\\n            _size := extcodesize(_addr)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function provable_setCustomGasPrice(uint _gasPrice) provableAPI internal {\\r\\n        return provable.setCustomGasPrice(_gasPrice);\\r\\n    }\\r\\n\\r\\n    function provable_randomDS_getSessionPubKeyHash() provableAPI internal returns (bytes32 _sessionKeyHash) {\\r\\n        return provable.randomDS_getSessionPubKeyHash();\\r\\n    }\\r\\n\\r\\n    function parseAddr(string memory _a) internal pure returns (address _parsedAddress) {\\r\\n        bytes memory tmp = bytes(_a);\\r\\n        uint160 iaddr = 0;\\r\\n        uint160 b1;\\r\\n        uint160 b2;\\r\\n        for (uint i = 2; i \\u003c 2 + 2 * 20; i += 2) {\\r\\n            iaddr *= 256;\\r\\n            b1 = uint160(uint8(tmp[i]));\\r\\n            b2 = uint160(uint8(tmp[i + 1]));\\r\\n            if ((b1 \\u003e= 97) \\u0026\\u0026 (b1 \\u003c= 102)) {\\r\\n                b1 -= 87;\\r\\n            } else if ((b1 \\u003e= 65) \\u0026\\u0026 (b1 \\u003c= 70)) {\\r\\n                b1 -= 55;\\r\\n            } else if ((b1 \\u003e= 48) \\u0026\\u0026 (b1 \\u003c= 57)) {\\r\\n                b1 -= 48;\\r\\n            }\\r\\n            if ((b2 \\u003e= 97) \\u0026\\u0026 (b2 \\u003c= 102)) {\\r\\n                b2 -= 87;\\r\\n            } else if ((b2 \\u003e= 65) \\u0026\\u0026 (b2 \\u003c= 70)) {\\r\\n                b2 -= 55;\\r\\n            } else if ((b2 \\u003e= 48) \\u0026\\u0026 (b2 \\u003c= 57)) {\\r\\n                b2 -= 48;\\r\\n            }\\r\\n            iaddr += (b1 * 16 + b2);\\r\\n        }\\r\\n        return address(iaddr);\\r\\n    }\\r\\n\\r\\n    function strCompare(string memory _a, string memory _b) internal pure returns (int _returnCode) {\\r\\n        bytes memory a = bytes(_a);\\r\\n        bytes memory b = bytes(_b);\\r\\n        uint minLength = a.length;\\r\\n        if (b.length \\u003c minLength) {\\r\\n            minLength = b.length;\\r\\n        }\\r\\n        for (uint i = 0; i \\u003c minLength; i ++) {\\r\\n            if (a[i] \\u003c b[i]) {\\r\\n                return -1;\\r\\n            } else if (a[i] \\u003e b[i]) {\\r\\n                return 1;\\r\\n            }\\r\\n        }\\r\\n        if (a.length \\u003c b.length) {\\r\\n            return -1;\\r\\n        } else if (a.length \\u003e b.length) {\\r\\n            return 1;\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function indexOf(string memory _haystack, string memory _needle) internal pure returns (int _returnCode) {\\r\\n        bytes memory h = bytes(_haystack);\\r\\n        bytes memory n = bytes(_needle);\\r\\n        if (h.length \\u003c 1 || n.length \\u003c 1 || (n.length \\u003e h.length)) {\\r\\n            return -1;\\r\\n        } else if (h.length \\u003e (2 ** 128 - 1)) {\\r\\n            return -1;\\r\\n        } else {\\r\\n            uint subindex = 0;\\r\\n            for (uint i = 0; i \\u003c h.length; i++) {\\r\\n                if (h[i] == n[0]) {\\r\\n                    subindex = 1;\\r\\n                    while(subindex \\u003c n.length \\u0026\\u0026 (i + subindex) \\u003c h.length \\u0026\\u0026 h[i + subindex] == n[subindex]) {\\r\\n                        subindex++;\\r\\n                    }\\r\\n                    if (subindex == n.length) {\\r\\n                        return int(i);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            return -1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function strConcat(string memory _a, string memory _b) internal pure returns (string memory _concatenatedString) {\\r\\n        return strConcat(_a, _b, \\\"\\\", \\\"\\\", \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory _concatenatedString) {\\r\\n        return strConcat(_a, _b, _c, \\\"\\\", \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory _concatenatedString) {\\r\\n        return strConcat(_a, _b, _c, _d, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory _concatenatedString) {\\r\\n        bytes memory _ba = bytes(_a);\\r\\n        bytes memory _bb = bytes(_b);\\r\\n        bytes memory _bc = bytes(_c);\\r\\n        bytes memory _bd = bytes(_d);\\r\\n        bytes memory _be = bytes(_e);\\r\\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\\r\\n        bytes memory babcde = bytes(abcde);\\r\\n        uint k = 0;\\r\\n        uint i = 0;\\r\\n        for (i = 0; i \\u003c _ba.length; i++) {\\r\\n            babcde[k++] = _ba[i];\\r\\n        }\\r\\n        for (i = 0; i \\u003c _bb.length; i++) {\\r\\n            babcde[k++] = _bb[i];\\r\\n        }\\r\\n        for (i = 0; i \\u003c _bc.length; i++) {\\r\\n            babcde[k++] = _bc[i];\\r\\n        }\\r\\n        for (i = 0; i \\u003c _bd.length; i++) {\\r\\n            babcde[k++] = _bd[i];\\r\\n        }\\r\\n        for (i = 0; i \\u003c _be.length; i++) {\\r\\n            babcde[k++] = _be[i];\\r\\n        }\\r\\n        return string(babcde);\\r\\n    }\\r\\n\\r\\n    function safeParseInt(string memory _a) internal pure returns (uint _parsedInt) {\\r\\n        return safeParseInt(_a, 0);\\r\\n    }\\r\\n\\r\\n    function safeParseInt(string memory _a, uint _b) internal pure returns (uint _parsedInt) {\\r\\n        bytes memory bresult = bytes(_a);\\r\\n        uint mint = 0;\\r\\n        bool decimals = false;\\r\\n        for (uint i = 0; i \\u003c bresult.length; i++) {\\r\\n            if ((uint(uint8(bresult[i])) \\u003e= 48) \\u0026\\u0026 (uint(uint8(bresult[i])) \\u003c= 57)) {\\r\\n                if (decimals) {\\r\\n                   if (_b == 0) break;\\r\\n                    else _b--;\\r\\n                }\\r\\n                mint *= 10;\\r\\n                mint += uint(uint8(bresult[i])) - 48;\\r\\n            } else if (uint(uint8(bresult[i])) == 46) {\\r\\n                require(!decimals, \\u0027More than one decimal encountered in string!\\u0027);\\r\\n                decimals = true;\\r\\n            } else {\\r\\n                revert(\\\"Non-numeral character encountered in string!\\\");\\r\\n            }\\r\\n        }\\r\\n        if (_b \\u003e 0) {\\r\\n            mint *= 10 ** _b;\\r\\n        }\\r\\n        return mint;\\r\\n    }\\r\\n\\r\\n    function parseInt(string memory _a) internal pure returns (uint _parsedInt) {\\r\\n        return parseInt(_a, 0);\\r\\n    }\\r\\n\\r\\n    function parseInt(string memory _a, uint _b) internal pure returns (uint _parsedInt) {\\r\\n        bytes memory bresult = bytes(_a);\\r\\n        uint mint = 0;\\r\\n        bool decimals = false;\\r\\n        for (uint i = 0; i \\u003c bresult.length; i++) {\\r\\n            if ((uint(uint8(bresult[i])) \\u003e= 48) \\u0026\\u0026 (uint(uint8(bresult[i])) \\u003c= 57)) {\\r\\n                if (decimals) {\\r\\n                   if (_b == 0) {\\r\\n                       break;\\r\\n                   } else {\\r\\n                       _b--;\\r\\n                   }\\r\\n                }\\r\\n                mint *= 10;\\r\\n                mint += uint(uint8(bresult[i])) - 48;\\r\\n            } else if (uint(uint8(bresult[i])) == 46) {\\r\\n                decimals = true;\\r\\n            }\\r\\n        }\\r\\n        if (_b \\u003e 0) {\\r\\n            mint *= 10 ** _b;\\r\\n        }\\r\\n        return mint;\\r\\n    }\\r\\n\\r\\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\r\\n        if (_i == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint j = _i;\\r\\n        uint len;\\r\\n        while (j != 0) {\\r\\n            len++;\\r\\n            j /= 10;\\r\\n        }\\r\\n        bytes memory bstr = new bytes(len);\\r\\n        uint k = len;\\r\\n        while (_i != 0) {\\r\\n            k = k-1;\\r\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\r\\n            bytes1 b1 = bytes1(temp);\\r\\n            bstr[k] = b1;\\r\\n            _i /= 10;\\r\\n        }\\r\\n        return string(bstr);\\r\\n    }\\r\\n\\r\\n    function stra2cbor(string[] memory _arr) internal pure returns (bytes memory _cborEncoding) {\\r\\n        safeMemoryCleaner();\\r\\n        Buffer.buffer memory buf;\\r\\n        Buffer.init(buf, 1024);\\r\\n        buf.startArray();\\r\\n        for (uint i = 0; i \\u003c _arr.length; i++) {\\r\\n            buf.encodeString(_arr[i]);\\r\\n        }\\r\\n        buf.endSequence();\\r\\n        return buf.buf;\\r\\n    }\\r\\n\\r\\n    function ba2cbor(bytes[] memory _arr) internal pure returns (bytes memory _cborEncoding) {\\r\\n        safeMemoryCleaner();\\r\\n        Buffer.buffer memory buf;\\r\\n        Buffer.init(buf, 1024);\\r\\n        buf.startArray();\\r\\n        for (uint i = 0; i \\u003c _arr.length; i++) {\\r\\n            buf.encodeBytes(_arr[i]);\\r\\n        }\\r\\n        buf.endSequence();\\r\\n        return buf.buf;\\r\\n    }\\r\\n\\r\\n    function provable_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32 _queryId) {\\r\\n        require((_nbytes \\u003e 0) \\u0026\\u0026 (_nbytes \\u003c= 32));\\r\\n        _delay *= 10; // Convert from seconds to ledger timer ticks\\r\\n        bytes memory nbytes = new bytes(1);\\r\\n        nbytes[0] = bytes1(uint8(_nbytes));\\r\\n        bytes memory unonce = new bytes(32);\\r\\n        bytes memory sessionKeyHash = new bytes(32);\\r\\n        bytes32 sessionKeyHash_bytes32 = provable_randomDS_getSessionPubKeyHash();\\r\\n        assembly {\\r\\n            mstore(unonce, 0x20)\\r\\n            /*\\r\\n             The following variables can be relaxed.\\r\\n             Check the relaxed random contract at https://github.com/oraclize/ethereum-examples\\r\\n             for an idea on how to override and replace commit hash variables.\\r\\n            */\\r\\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number(), 1)), xor(coinbase(), timestamp())))\\r\\n            mstore(sessionKeyHash, 0x20)\\r\\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\\r\\n        }\\r\\n        bytes memory delay = new bytes(32);\\r\\n        assembly {\\r\\n            mstore(add(delay, 0x20), _delay)\\r\\n        }\\r\\n        bytes memory delay_bytes8 = new bytes(8);\\r\\n        copyBytes(delay, 24, 8, delay_bytes8, 0);\\r\\n        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];\\r\\n        bytes32 queryId = provable_query(\\\"random\\\", args, _customGasLimit);\\r\\n        bytes memory delay_bytes8_left = new bytes(8);\\r\\n        assembly {\\r\\n            let x := mload(add(delay_bytes8, 0x20))\\r\\n            mstore8(add(delay_bytes8_left, 0x27), div(x, 0x100000000000000000000000000000000000000000000000000000000000000))\\r\\n            mstore8(add(delay_bytes8_left, 0x26), div(x, 0x1000000000000000000000000000000000000000000000000000000000000))\\r\\n            mstore8(add(delay_bytes8_left, 0x25), div(x, 0x10000000000000000000000000000000000000000000000000000000000))\\r\\n            mstore8(add(delay_bytes8_left, 0x24), div(x, 0x100000000000000000000000000000000000000000000000000000000))\\r\\n            mstore8(add(delay_bytes8_left, 0x23), div(x, 0x1000000000000000000000000000000000000000000000000000000))\\r\\n            mstore8(add(delay_bytes8_left, 0x22), div(x, 0x10000000000000000000000000000000000000000000000000000))\\r\\n            mstore8(add(delay_bytes8_left, 0x21), div(x, 0x100000000000000000000000000000000000000000000000000))\\r\\n            mstore8(add(delay_bytes8_left, 0x20), div(x, 0x1000000000000000000000000000000000000000000000000))\\r\\n        }\\r\\n        provable_randomDS_setCommitment(queryId, keccak256(abi.encodePacked(delay_bytes8_left, args[1], sha256(args[0]), args[2])));\\r\\n        return queryId;\\r\\n    }\\r\\n\\r\\n    function provable_randomDS_setCommitment(bytes32 _queryId, bytes32 _commitment) internal {\\r\\n        provable_randomDS_args[_queryId] = _commitment;\\r\\n    }\\r\\n\\r\\n    function verifySig(bytes32 _tosignh, bytes memory _dersig, bytes memory _pubkey) internal returns (bool _sigVerified) {\\r\\n        bool sigok;\\r\\n        address signer;\\r\\n        bytes32 sigr;\\r\\n        bytes32 sigs;\\r\\n        bytes memory sigr_ = new bytes(32);\\r\\n        uint offset = 4 + (uint(uint8(_dersig[3])) - 0x20);\\r\\n        sigr_ = copyBytes(_dersig, offset, 32, sigr_, 0);\\r\\n        bytes memory sigs_ = new bytes(32);\\r\\n        offset += 32 + 2;\\r\\n        sigs_ = copyBytes(_dersig, offset + (uint(uint8(_dersig[offset - 1])) - 0x20), 32, sigs_, 0);\\r\\n        assembly {\\r\\n            sigr := mload(add(sigr_, 32))\\r\\n            sigs := mload(add(sigs_, 32))\\r\\n        }\\r\\n        (sigok, signer) = safer_ecrecover(_tosignh, 27, sigr, sigs);\\r\\n        if (address(uint160(uint256(keccak256(_pubkey)))) == signer) {\\r\\n            return true;\\r\\n        } else {\\r\\n            (sigok, signer) = safer_ecrecover(_tosignh, 28, sigr, sigs);\\r\\n            return (address(uint160(uint256(keccak256(_pubkey)))) == signer);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function provable_randomDS_proofVerify__sessionKeyValidity(bytes memory _proof, uint _sig2offset) internal returns (bool _proofVerified) {\\r\\n        bool sigok;\\r\\n        // Random DS Proof Step 6: Verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)\\r\\n        bytes memory sig2 = new bytes(uint(uint8(_proof[_sig2offset + 1])) + 2);\\r\\n        copyBytes(_proof, _sig2offset, sig2.length, sig2, 0);\\r\\n        bytes memory appkey1_pubkey = new bytes(64);\\r\\n        copyBytes(_proof, 3 + 1, 64, appkey1_pubkey, 0);\\r\\n        bytes memory tosign2 = new bytes(1 + 65 + 32);\\r\\n        tosign2[0] = bytes1(uint8(1)); //role\\r\\n        copyBytes(_proof, _sig2offset - 65, 65, tosign2, 1);\\r\\n        bytes memory CODEHASH = hex\\\"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c\\\";\\r\\n        copyBytes(CODEHASH, 0, 32, tosign2, 1 + 65);\\r\\n        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);\\r\\n        if (!sigok) {\\r\\n            return false;\\r\\n        }\\r\\n        // Random DS Proof Step 7: Verify the APPKEY1 provenance (must be signed by Ledger)\\r\\n        bytes memory LEDGERKEY = hex\\\"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4\\\";\\r\\n        bytes memory tosign3 = new bytes(1 + 65);\\r\\n        tosign3[0] = 0xFE;\\r\\n        copyBytes(_proof, 3, 65, tosign3, 1);\\r\\n        bytes memory sig3 = new bytes(uint(uint8(_proof[3 + 65 + 1])) + 2);\\r\\n        copyBytes(_proof, 3 + 65, sig3.length, sig3, 0);\\r\\n        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);\\r\\n        return sigok;\\r\\n    }\\r\\n\\r\\n    function provable_randomDS_proofVerify__returnCode(bytes32 _queryId, string memory _result, bytes memory _proof) internal returns (uint8 _returnCode) {\\r\\n        // Random DS Proof Step 1: The prefix has to match \\u0027LP\\\\x01\\u0027 (Ledger Proof version 1)\\r\\n        if ((_proof[0] != \\\"L\\\") || (_proof[1] != \\\"P\\\") || (uint8(_proof[2]) != uint8(1))) {\\r\\n            return 1;\\r\\n        }\\r\\n        bool proofVerified = provable_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), provable_getNetworkName());\\r\\n        if (!proofVerified) {\\r\\n            return 2;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function matchBytes32Prefix(bytes32 _content, bytes memory _prefix, uint _nRandomBytes) internal pure returns (bool _matchesPrefix) {\\r\\n        bool match_ = true;\\r\\n        require(_prefix.length == _nRandomBytes);\\r\\n        for (uint256 i = 0; i\\u003c _nRandomBytes; i++) {\\r\\n            if (_content[i] != _prefix[i]) {\\r\\n                match_ = false;\\r\\n            }\\r\\n        }\\r\\n        return match_;\\r\\n    }\\r\\n\\r\\n    function provable_randomDS_proofVerify__main(bytes memory _proof, bytes32 _queryId, bytes memory _result, string memory _contextName) internal returns (bool _proofVerified) {\\r\\n        // Random DS Proof Step 2: The unique keyhash has to match with the sha256 of (context name + _queryId)\\r\\n        uint ledgerProofLength = 3 + 65 + (uint(uint8(_proof[3 + 65 + 1])) + 2) + 32;\\r\\n        bytes memory keyhash = new bytes(32);\\r\\n        copyBytes(_proof, ledgerProofLength, 32, keyhash, 0);\\r\\n        if (!(keccak256(keyhash) == keccak256(abi.encodePacked(sha256(abi.encodePacked(_contextName, _queryId)))))) {\\r\\n            return false;\\r\\n        }\\r\\n        bytes memory sig1 = new bytes(uint(uint8(_proof[ledgerProofLength + (32 + 8 + 1 + 32) + 1])) + 2);\\r\\n        copyBytes(_proof, ledgerProofLength + (32 + 8 + 1 + 32), sig1.length, sig1, 0);\\r\\n        // Random DS Proof Step 3: We assume sig1 is valid (it will be verified during step 5) and we verify if \\u0027_result\\u0027 is the _prefix of sha256(sig1)\\r\\n        if (!matchBytes32Prefix(sha256(sig1), _result, uint(uint8(_proof[ledgerProofLength + 32 + 8])))) {\\r\\n            return false;\\r\\n        }\\r\\n        // Random DS Proof Step 4: Commitment match verification, keccak256(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.\\r\\n        // This is to verify that the computed args match with the ones specified in the query.\\r\\n        bytes memory commitmentSlice1 = new bytes(8 + 1 + 32);\\r\\n        copyBytes(_proof, ledgerProofLength + 32, 8 + 1 + 32, commitmentSlice1, 0);\\r\\n        bytes memory sessionPubkey = new bytes(64);\\r\\n        uint sig2offset = ledgerProofLength + 32 + (8 + 1 + 32) + sig1.length + 65;\\r\\n        copyBytes(_proof, sig2offset - 64, 64, sessionPubkey, 0);\\r\\n        bytes32 sessionPubkeyHash = sha256(sessionPubkey);\\r\\n        if (provable_randomDS_args[_queryId] == keccak256(abi.encodePacked(commitmentSlice1, sessionPubkeyHash))) { //unonce, nbytes and sessionKeyHash match\\r\\n            delete provable_randomDS_args[_queryId];\\r\\n        } else return false;\\r\\n        // Random DS Proof Step 5: Validity verification for sig1 (keyhash and args signed with the sessionKey)\\r\\n        bytes memory tosign1 = new bytes(32 + 8 + 1 + 32);\\r\\n        copyBytes(_proof, ledgerProofLength, 32 + 8 + 1 + 32, tosign1, 0);\\r\\n        if (!verifySig(sha256(tosign1), sig1, sessionPubkey)) {\\r\\n            return false;\\r\\n        }\\r\\n        // Verify if sessionPubkeyHash was verified already, if not.. let\\u0027s do it!\\r\\n        if (!provable_randomDS_sessionKeysHashVerified[sessionPubkeyHash]) {\\r\\n            provable_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = provable_randomDS_proofVerify__sessionKeyValidity(_proof, sig2offset);\\r\\n        }\\r\\n        return provable_randomDS_sessionKeysHashVerified[sessionPubkeyHash];\\r\\n    }\\r\\n    /*\\r\\n     The following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\\r\\n    */\\r\\n    function copyBytes(bytes memory _from, uint _fromOffset, uint _length, bytes memory _to, uint _toOffset) internal pure returns (bytes memory _copiedBytes) {\\r\\n        uint minLength = _length + _toOffset;\\r\\n        require(_to.length \\u003e= minLength); // Buffer too small. Should be a better way?\\r\\n        uint i = 32 + _fromOffset; // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\\r\\n        uint j = 32 + _toOffset;\\r\\n        while (i \\u003c (32 + _fromOffset + _length)) {\\r\\n            assembly {\\r\\n                let tmp := mload(add(_from, i))\\r\\n                mstore(add(_to, j), tmp)\\r\\n            }\\r\\n            i += 32;\\r\\n            j += 32;\\r\\n        }\\r\\n        return _to;\\r\\n    }\\r\\n    /*\\r\\n     The following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\\r\\n     Duplicate Solidity\\u0027s ecrecover, but catching the CALL return value\\r\\n    */\\r\\n    function safer_ecrecover(bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) internal returns (bool _success, address _recoveredAddress) {\\r\\n        /*\\r\\n         We do our own memory management here. Solidity uses memory offset\\r\\n         0x40 to store the current end of memory. We write past it (as\\r\\n         writes are memory extensions), but don\\u0027t update the offset so\\r\\n         Solidity will reuse it. The memory used here is only needed for\\r\\n         this context.\\r\\n         FIXME: inline assembly can\\u0027t access return values\\r\\n        */\\r\\n        bool ret;\\r\\n        address addr;\\r\\n        assembly {\\r\\n            let size := mload(0x40)\\r\\n            mstore(size, _hash)\\r\\n            mstore(add(size, 32), _v)\\r\\n            mstore(add(size, 64), _r)\\r\\n            mstore(add(size, 96), _s)\\r\\n            ret := call(3000, 1, 0, size, 128, size, 32) // NOTE: we can reuse the request memory because we deal with the return code.\\r\\n            addr := mload(size)\\r\\n        }\\r\\n        return (ret, addr);\\r\\n    }\\r\\n    /*\\r\\n     The following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\\r\\n    */\\r\\n    function ecrecovery(bytes32 _hash, bytes memory _sig) internal returns (bool _success, address _recoveredAddress) {\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n        uint8 v;\\r\\n        if (_sig.length != 65) {\\r\\n            return (false, address(0));\\r\\n        }\\r\\n        /*\\r\\n         The signature format is a compact form of:\\r\\n           {bytes32 r}{bytes32 s}{uint8 v}\\r\\n         Compact means, uint8 is not padded to 32 bytes.\\r\\n        */\\r\\n        assembly {\\r\\n            r := mload(add(_sig, 32))\\r\\n            s := mload(add(_sig, 64))\\r\\n            /*\\r\\n             Here we are loading the last 32 bytes. We exploit the fact that\\r\\n             \\u0027mload\\u0027 will pad with zeroes if we overread.\\r\\n             There is no \\u0027mload8\\u0027 to do this, but that would be nicer.\\r\\n            */\\r\\n            v := byte(0, mload(add(_sig, 96)))\\r\\n            /*\\r\\n              Alternative solution:\\r\\n              \\u0027byte\\u0027 is not working due to the Solidity parser, so lets\\r\\n              use the second best option, \\u0027and\\u0027\\r\\n              v := and(mload(add(_sig, 65)), 255)\\r\\n            */\\r\\n        }\\r\\n        /*\\r\\n         albeit non-transactional signatures are not specified by the YP, one would expect it\\r\\n         to match the YP range of [27, 28]\\r\\n         geth uses [0, 1] and some clients have followed. This might change, see:\\r\\n         https://github.com/ethereum/go-ethereum/issues/2053\\r\\n        */\\r\\n        if (v \\u003c 27) {\\r\\n            v += 27;\\r\\n        }\\r\\n        if (v != 27 \\u0026\\u0026 v != 28) {\\r\\n            return (false, address(0));\\r\\n        }\\r\\n        return safer_ecrecover(_hash, v, r, s);\\r\\n    }\\r\\n\\r\\n    function safeMemoryCleaner() internal pure {\\r\\n        assembly {\\r\\n            let fmem := mload(0x40)\\r\\n            codecopy(fmem, codesize(), sub(msize(), fmem))\\r\\n        }\\r\\n    }\\r\\n}\\r\\n// \\u003c/provableAPI\\u003e\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"LogNewProvableQuery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"name\":\"LogNewRequestStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"PermanentURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"myid\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_myid\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_result\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"giveAway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestStatus\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenNum\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"Animonkeys","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2f7f7d1cd343664cc9921277c72a3523ac3f64561f5bb604f82c15469ae91683"}]}