{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Staking/RewardStreamerLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./TokenHelper.sol\\\";\\n\\nlibrary RewardStreamerLib {\\n\\tstruct RewardStreamInfo {\\n\\t\\tRewardStream[] rewardStreams;\\n\\t\\tuint256 deployedAtBlock;\\n\\t\\taddress rewardToken;\\n\\t}\\n\\n\\tstruct RewardStream {\\n\\t\\tuint256[] periodRewards;\\n\\t\\tuint256[] periodEnds;\\n\\t\\tuint256 rewardStreamCursor;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will setup the token to use for reward\\n\\t* @param rewardTokenAddress The reward token address\\n\\t*/\\n\\tfunction setRewardToken(RewardStreamInfo storage rewardStreamInfo, address rewardTokenAddress) public {\\n\\t\\trewardStreamInfo.rewardToken = address(rewardTokenAddress);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will create a new reward stream\\n\\t* @param rewardStreamIndex The reward index\\n\\t* @param rewardPerBlock The amount of tokens rewarded per block\\n\\t* @param rewardLastBlock The last block of the period\\n\\t*/\\n\\tfunction addRewardStream(\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint256 rewardStreamIndex,\\n\\t\\tuint256 rewardPerBlock,\\n\\t\\tuint256 rewardLastBlock\\n\\t)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t// e.g. current length = 0\\n\\t\\trequire(rewardStreamIndex <= rewardStreamInfo.rewardStreams.length, \\\"RewardStreamer: you cannot skip an index\\\");\\n\\n\\t\\tuint256 tokensInReward;\\n\\n\\t\\tif(rewardStreamInfo.rewardStreams.length > rewardStreamIndex) {\\n\\t\\t\\tRewardStream storage rewardStream = rewardStreamInfo.rewardStreams[rewardStreamIndex];\\n\\t\\t\\tuint256[] storage periodEnds = rewardStream.periodEnds;\\n\\n\\t\\t\\tuint periodStart = periodEnds.length == 0\\n\\t\\t\\t\\t? rewardStreamInfo.deployedAtBlock\\n\\t\\t\\t\\t: periodEnds[periodEnds.length - 1];\\n\\n\\t\\t\\trequire(periodStart < rewardLastBlock, \\\"RewardStreamer: periodStart must be smaller than rewardLastBlock\\\");\\n\\n\\t\\t\\trewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds.push(rewardLastBlock);\\n\\t\\t\\trewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards.push(rewardPerBlock);\\n\\n\\t\\t\\ttokensInReward = (rewardLastBlock - periodStart) * rewardPerBlock;\\n\\t\\t} else {\\n\\t\\t\\tRewardStream memory rewardStream;\\n\\n\\t\\t\\tuint periodStart = rewardStreamInfo.deployedAtBlock;\\n\\t\\t\\trequire(periodStart < rewardLastBlock, \\\"RewardStreamer: periodStart must be smaller than rewardLastBlock\\\");\\n\\n\\t\\t\\trewardStreamInfo.rewardStreams.push(rewardStream);\\n\\t\\t\\trewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds.push(rewardLastBlock);\\n\\t\\t\\trewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards.push(rewardPerBlock);\\n\\n\\t\\t\\ttokensInReward = (rewardLastBlock - periodStart) * rewardPerBlock;\\n\\t\\t}\\n\\n\\t\\tTokenHelper.ERC20TransferFrom(address(rewardStreamInfo.rewardToken), msg.sender, address(this), tokensInReward);\\n\\n\\t\\treturn tokensInReward;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Get the rewards for a period\\n\\t* @param fromBlock the block number from which the reward is calculated\\n\\t* @param toBlock the block number till which the reward is calculated\\n\\t* @return (uint256) the total reward\\n\\t*/\\n\\tfunction unsafeGetRewardsFromRange(\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint fromBlock,\\n\\t\\tuint toBlock\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(tx.origin == msg.sender, \\\"StakingReward: unsafe function for contract call\\\");\\n\\n\\t\\tuint256 currentReward;\\n\\n\\t\\tfor(uint256 i; i < rewardStreamInfo.rewardStreams.length; i++) {\\n\\t\\t\\tcurrentReward = currentReward + iterateRewards(\\n\\t\\t\\t\\trewardStreamInfo,\\n\\t\\t\\t\\ti,\\n\\t\\t\\t\\tMath.max(fromBlock, rewardStreamInfo.deployedAtBlock),\\n\\t\\t\\t\\ttoBlock,\\n\\t\\t\\t\\t0\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\treturn currentReward;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Iterate the rewards\\n\\t* @param rewardStreamIndex the index of the reward stream\\n\\t* @param fromBlock the block number from which the reward is calculated\\n\\t* @param toBlock the block number till which the reward is calculated\\n\\t* @param rewardIndex the reward index\\n\\t* @return (uint256) the calculate reward\\n\\t*/\\n\\tfunction iterateRewards(\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint256 rewardStreamIndex,\\n\\t\\tuint fromBlock,\\n\\t\\tuint toBlock,\\n\\t\\tuint256 rewardIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t// the start block is bigger than\\n\\t\\tif(rewardIndex >= rewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards.length) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint currentPeriodEnd = rewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds[rewardIndex];\\n\\t\\tuint currentPeriodReward = rewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards[rewardIndex];\\n\\n\\t\\tuint256 totalReward = 0;\\n\\n\\t\\t// what's the lowest block in current period?\\n\\t\\tuint currentPeriodStart = rewardIndex == 0\\n\\t\\t\\t? rewardStreamInfo.deployedAtBlock\\n\\t\\t\\t: rewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds[rewardIndex - 1];\\n\\t\\t// is the fromBlock included in period?\\n\\t\\tif(fromBlock <= currentPeriodEnd) {\\n\\t\\t\\tuint256 lower = Math.max(fromBlock, currentPeriodStart);\\n\\t\\t\\tuint256 upper = Math.min(toBlock, currentPeriodEnd);\\n\\n\\t\\t\\tuint256 blocksInPeriod = upper - lower;\\n\\t\\t\\ttotalReward = blocksInPeriod * currentPeriodReward;\\n\\t\\t} else {\\n\\t\\t\\treturn iterateRewards(\\n\\t\\t\\t\\trewardStreamInfo,\\n\\t\\t\\t\\trewardStreamIndex,\\n\\t\\t\\t\\tfromBlock,\\n\\t\\t\\t\\ttoBlock,\\n\\t\\t\\t\\trewardIndex + 1\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tif(toBlock > currentPeriodEnd) {\\n\\t\\t\\t// we need to move to next reward period\\n\\t\\t\\ttotalReward += iterateRewards(\\n\\t\\t\\t\\trewardStreamInfo,\\n\\t\\t\\t\\trewardStreamIndex,\\n\\t\\t\\t\\tfromBlock,\\n\\t\\t\\t\\ttoBlock,\\n\\t\\t\\t\\trewardIndex + 1\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\treturn totalReward;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Iterate the rewards and updates the cursor\\n\\t* @notice NOTE: once the cursor is updated, the next call will start from the cursor\\n\\t* @notice making it impossible to calculate twice the reward in a period\\n\\t* @param rewardStreamInfo the struct holding  current reward info\\n\\t* @param fromBlock the block number from which the reward is calculated\\n\\t* @param toBlock the block number till which the reward is calculated\\n\\t* @return (uint256) the calculated reward\\n\\t*/\\n\\tfunction getRewardAndUpdateCursor (\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint256 fromBlock,\\n\\t\\tuint256 toBlock\\n\\t)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 currentReward;\\n\\n\\t\\tfor(uint256 i; i < rewardStreamInfo.rewardStreams.length; i++) {\\n\\t\\t\\tcurrentReward = currentReward + iterateRewardsWithCursor(\\n\\t\\t\\t\\trewardStreamInfo,\\n\\t\\t\\t\\ti,\\n\\t\\t\\t\\tMath.max(fromBlock, rewardStreamInfo.deployedAtBlock),\\n\\t\\t\\t\\ttoBlock,\\n\\t\\t\\t\\trewardStreamInfo.rewardStreams[i].rewardStreamCursor\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\treturn currentReward;\\n\\t}\\n\\n\\tfunction bumpStreamCursor(\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint256 rewardStreamIndex\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\t// this step is important to avoid going out of index\\n\\t\\tif(rewardStreamInfo.rewardStreams[rewardStreamIndex].rewardStreamCursor < rewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards.length) {\\n\\t\\t\\trewardStreamInfo.rewardStreams[rewardStreamIndex].rewardStreamCursor = rewardStreamInfo.rewardStreams[rewardStreamIndex].rewardStreamCursor + 1;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction iterateRewardsWithCursor(\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint256 rewardStreamIndex,\\n\\t\\tuint fromBlock,\\n\\t\\tuint toBlock,\\n\\t\\tuint256 rewardPeriodIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tif(rewardPeriodIndex >= rewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards.length) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint currentPeriodEnd = rewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds[rewardPeriodIndex];\\n\\t\\tuint currentPeriodReward = rewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards[rewardPeriodIndex];\\n\\n\\t\\tuint256 totalReward = 0;\\n\\n\\t\\t// what's the lowest block in current period?\\n\\t\\tuint currentPeriodStart = rewardPeriodIndex == 0\\n\\t\\t\\t? rewardStreamInfo.deployedAtBlock\\n\\t\\t\\t: rewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds[rewardPeriodIndex - 1];\\n\\n\\t\\t// is the fromBlock included in period?\\n\\t\\tif(fromBlock <= currentPeriodEnd) {\\n\\t\\t\\tuint256 lower = Math.max(fromBlock, currentPeriodStart);\\n\\t\\t\\tuint256 upper = Math.min(toBlock, currentPeriodEnd);\\n\\n\\t\\t\\tuint256 blocksInPeriod = upper - lower;\\n\\n\\t\\t\\ttotalReward = blocksInPeriod * currentPeriodReward;\\n\\t\\t} else {\\n\\t\\t\\t// the fromBlock passed this reward period, we can start\\n\\t\\t\\t// skipping it for next reads\\n\\t\\t\\tbumpStreamCursor(rewardStreamInfo, rewardStreamIndex);\\n\\n\\t\\t\\treturn iterateRewards(rewardStreamInfo, rewardStreamIndex, fromBlock, toBlock, rewardPeriodIndex + 1);\\n\\t\\t}\\n\\n\\t\\tif(toBlock > currentPeriodEnd) {\\n\\t\\t\\t// we need to move to next reward period\\n\\t\\t\\ttotalReward += iterateRewards(rewardStreamInfo, rewardStreamIndex, fromBlock, toBlock, rewardPeriodIndex + 1);\\n\\t\\t}\\n\\n\\t\\treturn totalReward;\\n\\t}\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute.\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Staking/TokenHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport \\\"../Raffle/IRaffleTicket.sol\\\";\\n\\nlibrary TokenHelper {\\n\\tfunction ERC20Transfer(\\n\\t\\taddress token,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\t(bool success, bytes memory data) =\\n\\t\\t\\t\\ttoken.call(abi.encodeWithSelector(IERC20.transfer.selector, to, amount));\\n\\t\\trequire(success && (data.length == 0 || abi.decode(data, (bool))), 'ERC20: transfer amount exceeds balance');\\n\\t}\\n\\n    function ERC20TransferFrom(\\n\\t\\t\\taddress token,\\n\\t\\t\\taddress from,\\n\\t\\t\\taddress to,\\n\\t\\t\\tuint256 amount\\n    )\\n\\t\\t\\tpublic\\n\\t\\t{\\n\\t\\t\\t(bool success, bytes memory data) =\\n\\t\\t\\t\\t\\ttoken.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount));\\n\\t\\t\\trequire(success && (data.length == 0 || abi.decode(data, (bool))), 'ERC20: transfer amount exceeds balance or allowance');\\n    }\\n\\n    function transferFrom(\\n        address token,\\n        uint256 tokenId,\\n        address from,\\n        address to\\n    )\\n            public\\n            returns (bool)\\n        {\\n                (bool success,) = token.call(abi.encodeWithSelector(IERC721.transferFrom.selector, from, to, tokenId));\\n\\n                // in the ERC721 the transfer doesn't return a bool. So we need to check explicitly.\\n                return success;\\n    }\\n\\n    function _mintTickets(\\n        address ticket,\\n        address to,\\n        uint256 amount\\n    ) public {\\n        (bool success,) = ticket.call(abi.encodeWithSelector(IRaffleTicket.mint.selector, to, 0, amount));\\n\\n        require(success, 'ERC1155: mint failed');\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Raffle/IRaffleTicket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\n\\n/// @title A mintable NFT ticket for Coinburp Raffle\\n/// @author Valerio Leo @valerioHQ\\ninterface IRaffleTicket is IERC1155 {\\n\\tfunction mint(address to, uint256 tokenId, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/Staking/TokenHelper.sol\": {\r\n        \"TokenHelper\": \"0xaa7aaa0c937c7af76559c30958773f207a7baab5\"\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[]","ContractName":"RewardStreamerLib","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}