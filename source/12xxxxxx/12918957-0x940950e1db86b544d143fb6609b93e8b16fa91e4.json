{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/universe/facets/FuckYousMutation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSE\\npragma solidity ^0.8.0;\\n\\nimport { EternalLib } from \\\"../lib/EternalLib.sol\\\";\\nimport { MutationLib } from \\\"../lib/MutationLib.sol\\\";\\nimport { Modifier } from \\\"../lib/Modifier.sol\\\";\\n\\ncontract FuckYousMutation is Modifier {\\n\\n  // NOTES: we check for 0/\\\"\\\"/[], so if you want to override\\n  // something to 0/\\\"\\\"/[] you have to set it to 0x00...001 or \\\" \\\"\\n\\n  function devMutateName(uint tokenId, string memory name) external onlyOwner {\\n    MutationLib.mutateName(tokenId, name);\\n  }\\n  function devMutateText(uint tokenId, string memory text) external onlyOwner {\\n    MutationLib.mutateText(tokenId, text);\\n  }\\n  function devMutateDesc(uint tokenId, string memory desc) external onlyOwner {\\n    MutationLib.mutateDesc(tokenId, desc);\\n  }\\n  function devMutateFenotype(uint tokenId, uint fenotype) external onlyOwner {\\n    MutationLib.mutateFenotype(tokenId, fenotype);\\n  }\\n  function devMutateTemplate(uint tokenId, bytes16 template) external onlyOwner {\\n    MutationLib.mutateTemplate(tokenId, template);\\n  }\\n\\n\\tfunction setMutationStart(bool start) external onlyOwner {\\n    MutationLib.setMutationStart(start);\\n  }\\n\\tfunction setMutationPrice(uint price) external onlyOwner {\\n    MutationLib.setMutationPrice(price);\\n  }\\n  function getMutationPaid() external payable onlyOwner {\\n\\t\\trequire(payable(msg.sender).send(address(this).balance));\\n\\t}\\n\\n\\tfunction mutateName(uint tokenId, string memory name) external payable canMutate(tokenId) {\\n    MutationLib.mutateName(tokenId, name);\\n    MutationLib.mutateTemplate(tokenId, '~s00-mutation');\\n  }\\n  function mutateText(uint tokenId, string memory text) external payable canMutate(tokenId) {\\n    MutationLib.mutateText(tokenId, text);\\n    MutationLib.mutateTemplate(tokenId, '~s00-mutation');\\n  }\\n  function mutateDesc(uint tokenId, string memory desc) external payable canMutate(tokenId) {\\n    MutationLib.mutateDesc(tokenId, desc);\\n    MutationLib.mutateTemplate(tokenId, '~s00-mutation');\\n  }\\n  function mutateFenotype(uint tokenId, uint fenotype) external payable canMutate(tokenId) {\\n    MutationLib.mutateFenotype(tokenId, fenotype);\\n    MutationLib.mutateTemplate(tokenId, '~s00-mutation');\\n  }\\n\\n}\"\r\n    },\r\n    \"contracts/universe/lib/EternalLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSE\\npragma solidity ^0.8.0;\\n\\nimport { IFuckYous } from \\\"./interfaces/IFuckYous.sol\\\";\\n\\nlibrary EternalLib {\\n\\n\\tbytes32 constant ETERNAL_STORAGE_POSITION = keccak256('wtf.fuckyous.eternal.storage');\\n\\n\\tstruct EternalStorage {\\n\\t\\tmapping(bytes16 => string) variables;\\n\\t\\tmapping(bytes16 => bytes16[]) sequences;\\n\\t\\tmapping(bytes16 => bytes16[]) genotypes;\\n\\t\\tmapping(bytes16 => Template) templates;\\n\\t\\tSeasonal[] seasonals;\\n\\t\\taddress fuckyous;\\n\\t}\\n\\n\\tstruct Template {\\n\\t\\tbytes16 key;\\n\\t\\tbytes16 name; // title of the NFT\\n\\t\\tbytes16 text; // text around the circle\\n\\t\\tbytes16 desc; // description of the NFT (text under image)\\n\\n\\t\\tbytes16 seedhash; // seed the randomness\\n\\t\\tbytes16 genotype; // which attributes are selected\\n\\t\\tbytes16 graphics; // how to assemble the SVG\\n\\t\\tbytes16 metadata; // how to assemble the JSON\\n\\t}\\n\\n\\tstruct Seasonal {\\n\\t\\tbytes16 template;\\n\\t\\tuint boundary;\\n\\t}\\n\\n\\tfunction eternalStorage() internal pure returns (EternalStorage storage es) {\\n\\t\\tbytes32 position = ETERNAL_STORAGE_POSITION;\\n\\t\\tassembly {\\n\\t\\t\\tes.slot := position\\n\\t\\t}\\n\\t}\\n\\n\\tfunction addVariable(bytes16 key, string memory val) internal {\\n\\t\\tEternalStorage storage s = eternalStorage();\\n\\t\\ts.variables[key] = val;\\n\\t}\\n\\n\\tfunction addVariables(bytes16[] memory keys, string[] memory vals) internal {\\n\\t\\tEternalStorage storage s = eternalStorage();\\n\\t\\tfor (uint i; i < keys.length; i++) {\\n\\t\\t\\ts.variables[keys[i]] = vals[i];\\n\\t\\t}\\n\\t}\\n\\n\\tfunction addSequence(bytes16 key, bytes16[] memory vals) internal {\\n\\t\\tEternalStorage storage s = eternalStorage();\\n\\t\\ts.sequences[key] = vals;\\n\\t}\\n\\n\\t// TODO: plural version?\\n\\n\\tfunction addGenotype(bytes16 key, bytes16[] memory vals) internal {\\n\\t\\tEternalStorage storage s = eternalStorage();\\n\\t\\ts.genotypes[key] = vals;\\n\\t}\\n\\n\\tfunction addTemplate(\\n\\t\\tbytes16 _key,\\n\\t\\tbytes16 _name,\\n\\t\\tbytes16 _text,\\n\\t\\tbytes16 _desc,\\n\\t\\tbytes16 _seedhash,\\n\\t\\tbytes16 _genotype,\\n\\t\\tbytes16 _graphics,\\n\\t\\tbytes16 _metadata\\n\\t) internal {\\n\\t\\tEternalStorage storage s = eternalStorage();\\n\\t\\tTemplate memory template = Template({\\n\\t\\t\\tkey: _key,\\n\\t\\t\\tname: _name,\\n\\t\\t\\ttext: _text,\\n\\t\\t\\tdesc: _desc,\\n\\t\\t\\tseedhash: _seedhash,\\n\\t\\t\\tgenotype: _genotype,\\n\\t\\t\\tgraphics: _graphics,\\n\\t\\t\\tmetadata: _metadata\\n\\t\\t});\\n\\n\\t\\ts.templates[_key] = template;\\n\\t}\\n\\n\\tfunction addSeasonal(bytes16 _template, uint _boundary) internal {\\n\\t\\tEternalStorage storage s = eternalStorage();\\n\\t\\tSeasonal memory seasonal = Seasonal({\\n\\t\\t\\ttemplate: _template,\\n\\t\\t\\tboundary: _boundary\\n\\t\\t});\\n\\n\\t\\ts.seasonals.push(seasonal);\\n\\t}\\n\\n\\tfunction setFuckYousAddress(address _address) internal {\\n\\t\\tEternalStorage storage s = eternalStorage();\\n\\t\\ts.fuckyous = _address;\\n\\t}\\n\\n\\tfunction enforceTokenExists(uint tokenId) internal view {\\n\\t\\trequire(\\n\\t\\t\\tIFuckYous(eternalStorage().fuckyous).ownerOf(tokenId) != address(0),\\n\\t\\t\\t'OOPS: non-existent token'\\n\\t\\t);\\n\\t}\\n\\n\\tfunction enforceIsTokenOwner(uint tokenId) internal view {\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == IFuckYous(eternalStorage().fuckyous).ownerOf(tokenId),\\n\\t\\t\\t'OOPS: you are not the owner of this token.'\\n\\t\\t);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/universe/lib/MutationLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSE\\npragma solidity ^0.8.0;\\n\\n\\nlibrary MutationLib {\\n\\n\\tbytes32 constant MUTATION_STORAGE_POSITION = keccak256('wtf.fuckyous.mutation0.storage');\\n\\n\\tstruct MutationStorage {\\n\\t\\tbool mutationStart;\\n\\t\\tuint mutationPrice;\\n\\t\\tmapping(uint => string) mutationName;\\n\\t\\tmapping(uint => string) mutationText;\\n\\t\\tmapping(uint => string) mutationDesc;\\n\\t\\tmapping(uint => uint) mutationFenotype;\\n\\t\\tmapping(uint => bytes16) mutationTemplate;\\n\\t}\\n\\n\\tfunction mutationStorage() internal pure returns (MutationStorage storage ms) {\\n\\t\\tbytes32 position = MUTATION_STORAGE_POSITION;\\n\\t\\tassembly {\\n\\t\\t\\tms.slot := position\\n\\t\\t}\\n\\t}\\n\\n  function mutateName(uint tokenId, string memory name) internal {\\n    MutationStorage storage s = mutationStorage();\\n    s.mutationName[tokenId] = name;\\n  }\\n  function mutateText(uint tokenId, string memory text) internal {\\n    MutationStorage storage s = mutationStorage();\\n    s.mutationText[tokenId] = text;\\n  }\\n  function mutateDesc(uint tokenId, string memory desc) internal {\\n    MutationStorage storage s = mutationStorage();\\n    s.mutationDesc[tokenId] = desc;\\n  }\\n  function mutateFenotype(uint tokenId, uint fenotype) internal {\\n    MutationStorage storage s = mutationStorage();\\n    s.mutationFenotype[tokenId] = fenotype;\\n  }\\n  function mutateTemplate(uint tokenId, bytes16 template) internal {\\n    MutationStorage storage s = mutationStorage();\\n    s.mutationTemplate[tokenId] = template;\\n  }\\n\\n\\tfunction setMutationStart(bool start) internal {\\n    MutationStorage storage s = mutationStorage();\\n    s.mutationStart = start;\\n  }\\n\\tfunction setMutationPrice(uint price) internal {\\n    MutationStorage storage s = mutationStorage();\\n    s.mutationPrice = price;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/universe/lib/Modifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSE\\npragma solidity ^0.8.0;\\n\\nimport { DiamondLib } from \\\"./DiamondLib.sol\\\";\\nimport { EternalLib } from \\\"./EternalLib.sol\\\";\\nimport { MutationLib } from \\\"./MutationLib.sol\\\";\\nimport { IFuckYous } from \\\"./interfaces/IFuckYous.sol\\\";\\n\\ncontract Modifier {\\n\\t\\n\\tmodifier onlyOwner {\\n\\t\\tDiamondLib.enforceIsContractOwner();\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyFucker(uint tokenId) {\\n\\t\\tEternalLib.enforceIsTokenOwner(tokenId);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier canMutate(uint tokenId) {\\n    MutationLib.MutationStorage storage s = MutationLib.mutationStorage();\\n\\t\\tEternalLib.enforceIsTokenOwner(tokenId);\\n\\t\\trequire(\\n\\t\\t\\ts.mutationStart,\\n\\t\\t\\t'OOPS: mutation has not started.'\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tmsg.value >= s.mutationPrice,\\n\\t\\t\\t'OOPS: send moar ether.'\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n}\"\r\n    },\r\n    \"contracts/universe/lib/interfaces/IFuckYous.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSE\\npragma solidity ^0.8.0;\\n\\ninterface IFuckYous {\\n\\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\\n}\"\r\n    },\r\n    \"contracts/universe/lib/DiamondLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport { IDiamondCut } from './interfaces/IDiamondCut.sol';\\n\\n\\nlibrary DiamondLib {\\n\\tbytes32 constant DIAMOND_STORAGE_POSITION = keccak256('diamond.standard.diamond.storage');\\n\\n\\tstruct DiamondStorage {\\n\\t\\t// maps function selectors to the facets that execute the functions.\\n\\t\\t// and maps the selectors to their position in the selectorSlots array.\\n\\t\\t// func selector => address facet, selector position\\n\\t\\tmapping(bytes4 => bytes32) facets;\\n\\t\\t// array of slots of function selectors.\\n\\t\\t// each slot holds 8 function selectors.\\n\\t\\tmapping(uint256 => bytes32) selectorSlots;\\n\\t\\t// The number of function selectors in selectorSlots\\n\\t\\tuint16 selectorCount;\\n\\t\\t// Used to query if a contract implements an interface.\\n\\t\\t// Used to implement ERC-165.\\n\\t\\tmapping(bytes4 => bool) supportedInterfaces;\\n\\t\\t// owner of the contract\\n\\t\\taddress contractOwner;\\n\\t}\\n\\n\\tfunction diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n\\t\\tbytes32 position = DIAMOND_STORAGE_POSITION;\\n\\t\\tassembly {\\n\\t\\t\\tds.slot := position\\n\\t\\t}\\n\\t}\\n\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\tfunction setContractOwner(address _newOwner) internal {\\n\\t\\tDiamondStorage storage ds = diamondStorage();\\n\\t\\taddress previousOwner = ds.contractOwner;\\n\\t\\tds.contractOwner = _newOwner;\\n\\t\\temit OwnershipTransferred(previousOwner, _newOwner);\\n\\t}\\n\\n\\tfunction contractOwner() internal view returns (address contractOwner_) {\\n\\t\\tcontractOwner_ = diamondStorage().contractOwner;\\n\\t}\\n\\n\\tfunction enforceIsContractOwner() internal view {\\n\\t\\trequire(msg.sender == diamondStorage().contractOwner, 'DiamondLib: Must be contract owner');\\n\\t}\\n\\n\\tevent DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n\\tbytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n\\tbytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n\\t// Internal function version of diamondCut\\n\\t// This code is almost the same as the external diamondCut,\\n\\t// except it is using 'Facet[] memory _diamondCut' instead of\\n\\t// 'Facet[] calldata _diamondCut'.\\n\\t// The code is duplicated to prevent copying calldata to memory which\\n\\t// causes an error for a two dimensional array.\\n\\tfunction diamondCut(\\n\\t\\tIDiamondCut.FacetCut[] memory _diamondCut,\\n\\t\\taddress _init,\\n\\t\\tbytes memory _calldata\\n\\t) internal {\\n\\t\\tDiamondStorage storage ds = diamondStorage();\\n\\t\\tuint256 originalSelectorCount = ds.selectorCount;\\n\\t\\tuint256 selectorCount = originalSelectorCount;\\n\\t\\tbytes32 selectorSlot;\\n\\t\\t// Check if last selector slot is not full\\n\\t\\t// 'selectorCount & 7' is a gas efficient modulo by eight 'selectorCount % 8' \\n\\t\\tif (selectorCount & 7 > 0) {\\n\\t\\t\\t// get last selectorSlot\\n\\t\\t\\t// 'selectorSlot >> 3' is a gas efficient division by 8 'selectorSlot / 8'\\n\\t\\t\\tselectorSlot = ds.selectorSlots[selectorCount >> 3];\\n\\t\\t}\\n\\t\\t// loop through diamond cut\\n\\t\\tfor (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n\\t\\t\\t(selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n\\t\\t\\t\\tselectorCount,\\n\\t\\t\\t\\tselectorSlot,\\n\\t\\t\\t\\t_diamondCut[facetIndex].facetAddress,\\n\\t\\t\\t\\t_diamondCut[facetIndex].action,\\n\\t\\t\\t\\t_diamondCut[facetIndex].functionSelectors\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\tif (selectorCount != originalSelectorCount) {\\n\\t\\t\\tds.selectorCount = uint16(selectorCount);\\n\\t\\t}\\n\\t\\t// If last selector slot is not full\\n\\t\\t// 'selectorCount & 7' is a gas efficient modulo by eight 'selectorCount % 8' \\n\\t\\tif (selectorCount & 7 > 0) {\\n\\t\\t\\t// 'selectorSlot >> 3' is a gas efficient division by 8 'selectorSlot / 8'\\n\\t\\t\\tds.selectorSlots[selectorCount >> 3] = selectorSlot;\\n\\t\\t}\\n\\t\\temit DiamondCut(_diamondCut, _init, _calldata);\\n\\t\\tinitializeDiamondCut(_init, _calldata);\\n\\t}\\n\\n\\tfunction addReplaceRemoveFacetSelectors(\\n\\t\\tuint256 _selectorCount,\\n\\t\\tbytes32 _selectorSlot,\\n\\t\\taddress _newFacetAddress,\\n\\t\\tIDiamondCut.FacetCutAction _action,\\n\\t\\tbytes4[] memory _selectors\\n\\t) internal returns (uint256, bytes32) {\\n\\t\\tDiamondStorage storage ds = diamondStorage();\\n\\t\\trequire(_selectors.length > 0, 'DiamondLib.cut: No selectors in facet to cut');\\n\\t\\tif (_action == IDiamondCut.FacetCutAction.Add) {\\n\\t\\t\\tenforceHasContractCode(_newFacetAddress, 'DiamondLib.cut: Add facet has no code');\\n\\t\\t\\tfor (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n\\t\\t\\t\\tbytes4 selector = _selectors[selectorIndex];\\n\\t\\t\\t\\tbytes32 oldFacet = ds.facets[selector];\\n\\t\\t\\t\\trequire(address(bytes20(oldFacet)) == address(0), \\\"DiamondLib.cut: Can't add function that already exists\\\");\\n\\t\\t\\t\\t// add facet for selector\\n\\t\\t\\t\\tds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\n\\t\\t\\t\\t// '_selectorCount & 7' is a gas efficient modulo by eight '_selectorCount % 8' \\n\\t\\t\\t\\tuint256 selectorInSlotPosition = (_selectorCount & 7) << 5;\\n\\t\\t\\t\\t// clear selector position in slot and add selector\\n\\t\\t\\t\\t_selectorSlot = (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\\n\\t\\t\\t\\t// if slot is full then write it to storage\\n\\t\\t\\t\\tif (selectorInSlotPosition == 224) {\\n\\t\\t\\t\\t\\t// '_selectorSlot >> 3' is a gas efficient division by 8 '_selectorSlot / 8'\\n\\t\\t\\t\\t\\tds.selectorSlots[_selectorCount >> 3] = _selectorSlot;\\n\\t\\t\\t\\t\\t_selectorSlot = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t_selectorCount++;\\n\\t\\t\\t}\\n\\t\\t} else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n\\t\\t\\tenforceHasContractCode(_newFacetAddress, 'DiamondLib.cut: Replace facet has no code');\\n\\t\\t\\tfor (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n\\t\\t\\t\\tbytes4 selector = _selectors[selectorIndex];\\n\\t\\t\\t\\tbytes32 oldFacet = ds.facets[selector];\\n\\t\\t\\t\\taddress oldFacetAddress = address(bytes20(oldFacet));\\n\\t\\t\\t\\t// only useful if immutable functions exist\\n\\t\\t\\t\\trequire(oldFacetAddress != address(this), \\\"DiamondLib.cut: Can't replace immutable function\\\");\\n\\t\\t\\t\\trequire(oldFacetAddress != _newFacetAddress, \\\"DiamondLib.cut: Can't replace function with same function\\\");\\n\\t\\t\\t\\trequire(oldFacetAddress != address(0), \\\"DiamondLib.cut: Can't replace function that doesn't exist\\\");\\n\\t\\t\\t\\t// replace old facet address\\n\\t\\t\\t\\tds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\n\\t\\t\\t}\\n\\t\\t} else if (_action == IDiamondCut.FacetCutAction.Remove) {\\n\\t\\t\\trequire(_newFacetAddress == address(0), 'DiamondLib.cut: Remove facet address must be address(0)');\\n\\t\\t\\t// '_selectorCount >> 3' is a gas efficient division by 8 '_selectorCount / 8'\\n\\t\\t\\tuint256 selectorSlotCount = _selectorCount >> 3;\\n\\t\\t\\t// '_selectorCount & 7' is a gas efficient modulo by eight '_selectorCount % 8' \\n\\t\\t\\tuint256 selectorInSlotIndex = _selectorCount & 7;\\n\\t\\t\\tfor (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n\\t\\t\\t\\tif (_selectorSlot == 0) {\\n\\t\\t\\t\\t\\t// get last selectorSlot\\n\\t\\t\\t\\t\\tselectorSlotCount--;\\n\\t\\t\\t\\t\\t_selectorSlot = ds.selectorSlots[selectorSlotCount];\\n\\t\\t\\t\\t\\tselectorInSlotIndex = 7;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tselectorInSlotIndex--;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tbytes4 lastSelector;\\n\\t\\t\\t\\tuint256 oldSelectorsSlotCount;\\n\\t\\t\\t\\tuint256 oldSelectorInSlotPosition;\\n\\t\\t\\t\\t// adding a block here prevents stack too deep error\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tbytes4 selector = _selectors[selectorIndex];\\n\\t\\t\\t\\t\\tbytes32 oldFacet = ds.facets[selector];\\n\\t\\t\\t\\t\\trequire(address(bytes20(oldFacet)) != address(0), \\\"DiamondLib.cut: Can't remove function that doesn't exist\\\");\\n\\t\\t\\t\\t\\t// only useful if immutable functions exist\\n\\t\\t\\t\\t\\trequire(address(bytes20(oldFacet)) != address(this), \\\"DiamondLib.cut: Can't remove immutable function\\\");\\n\\t\\t\\t\\t\\t// replace selector with last selector in ds.facets\\n\\t\\t\\t\\t\\t// gets the last selector\\n\\t\\t\\t\\t\\tlastSelector = bytes4(_selectorSlot << (selectorInSlotIndex << 5));\\n\\t\\t\\t\\t\\tif (lastSelector != selector) {\\n\\t\\t\\t\\t\\t\\t// update last selector slot position info\\n\\t\\t\\t\\t\\t\\tds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tdelete ds.facets[selector];\\n\\t\\t\\t\\t\\tuint256 oldSelectorCount = uint16(uint256(oldFacet));\\n\\t\\t\\t\\t\\t// 'oldSelectorCount >> 3' is a gas efficient division by 8 'oldSelectorCount / 8'\\n\\t\\t\\t\\t\\toldSelectorsSlotCount = oldSelectorCount >> 3;\\n\\t\\t\\t\\t\\t// 'oldSelectorCount & 7' is a gas efficient modulo by eight 'oldSelectorCount % 8' \\n\\t\\t\\t\\t\\toldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (oldSelectorsSlotCount != selectorSlotCount) {\\n\\t\\t\\t\\t\\tbytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\n\\t\\t\\t\\t\\t// clears the selector we are deleting and puts the last selector in its place.\\n\\t\\t\\t\\t\\toldSelectorSlot =\\n\\t\\t\\t\\t\\t\\t(oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n\\t\\t\\t\\t\\t\\t(bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n\\t\\t\\t\\t\\t// update storage with the modified slot\\n\\t\\t\\t\\t\\tds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// clears the selector we are deleting and puts the last selector in its place.\\n\\t\\t\\t\\t\\t_selectorSlot =\\n\\t\\t\\t\\t\\t\\t(_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n\\t\\t\\t\\t\\t\\t(bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (selectorInSlotIndex == 0) {\\n\\t\\t\\t\\t\\tdelete ds.selectorSlots[selectorSlotCount];\\n\\t\\t\\t\\t\\t_selectorSlot = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t_selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;\\n\\t\\t} else {\\n\\t\\t\\trevert('DiamondLib.cut: Incorrect FacetCutAction');\\n\\t\\t}\\n\\t\\treturn (_selectorCount, _selectorSlot);\\n\\t}\\n\\n\\tfunction initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n\\t\\tif (_init == address(0)) {\\n\\t\\t\\trequire(_calldata.length == 0, 'DiamondLib.cut: _init is address(0) but_calldata is not empty');\\n\\t\\t} else {\\n\\t\\t\\trequire(_calldata.length > 0, 'DiamondLib.cut: _calldata is empty but _init is not address(0)');\\n\\t\\t\\tif (_init != address(this)) {\\n\\t\\t\\t\\tenforceHasContractCode(_init, 'DiamondLib.cut: _init address has no code');\\n\\t\\t\\t}\\n\\t\\t\\t(bool success, bytes memory error) = _init.delegatecall(_calldata);\\n\\t\\t\\tif (!success) {\\n\\t\\t\\t\\tif (error.length > 0) {\\n\\t\\t\\t\\t\\t// bubble up the error\\n\\t\\t\\t\\t\\trevert(string(error));\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\trevert('DiamondLib.cut: _init function reverted');\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n\\t\\tuint256 contractSize;\\n\\t\\tassembly {\\n\\t\\t\\tcontractSize := extcodesize(_contract)\\n\\t\\t}\\n\\t\\trequire(contractSize > 0, _errorMessage);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/universe/lib/interfaces/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"}],\"name\":\"devMutateDesc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fenotype\",\"type\":\"uint256\"}],\"name\":\"devMutateFenotype\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"devMutateName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes16\",\"name\":\"template\",\"type\":\"bytes16\"}],\"name\":\"devMutateTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"}],\"name\":\"devMutateText\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMutationPaid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"}],\"name\":\"mutateDesc\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fenotype\",\"type\":\"uint256\"}],\"name\":\"mutateFenotype\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"mutateName\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"}],\"name\":\"mutateText\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setMutationPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"start\",\"type\":\"bool\"}],\"name\":\"setMutationStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FuckYousMutation","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}