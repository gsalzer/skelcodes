{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/dev/repos/coti-cvix-contracts/contracts/v1/utils/SafeMath16.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath16 {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint16 a, uint16 b) internal pure returns (uint16) {\\r\\n        uint16 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint16 a, uint16 b) internal pure returns (uint16) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint16 a, uint16 b, string memory errorMessage) internal pure returns (uint16) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint16 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint16 a, uint16 b) internal pure returns (uint16) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint16 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint16 a, uint16 b) internal pure returns (uint16) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint16 a, uint16 b, string memory errorMessage) internal pure returns (uint16) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint16 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint16 a, uint16 b) internal pure returns (uint16) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint16 a, uint16 b, string memory errorMessage) internal pure returns (uint16) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/C/dev/repos/coti-cvix-contracts/contracts/v1/utils/SafeMath80.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath80 {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint80 a, uint80 b) internal pure returns (uint80) {\\r\\n        uint80 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint80 a, uint80 b) internal pure returns (uint80) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint80 a, uint80 b, string memory errorMessage) internal pure returns (uint80) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint80 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint80 a, uint80 b) internal pure returns (uint80) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint80 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint80 a, uint80 b) internal pure returns (uint80) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint80 a, uint80 b, string memory errorMessage) internal pure returns (uint80) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint80 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint80 a, uint80 b) internal pure returns (uint80) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint80 a, uint80 b, string memory errorMessage) internal pure returns (uint80) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/C/dev/repos/coti-cvix-contracts/contracts/v3/FeesCalculatorV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"../v1/utils/SafeMath80.sol\\\";\\r\\nimport \\\"../v1/utils/SafeMath16.sol\\\";\\r\\nimport \\\"./utils/SafeMath168.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IFeesCalculatorV3.sol\\\";\\r\\n\\r\\ncontract FeesCalculatorV3 is IFeesCalculatorV3, Ownable {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n    using SafeMath16 for uint16;\\r\\n    using SafeMath168 for uint168;\\r\\n\\r\\n    uint256 private constant PRECISION_DECIMALS = 1e10;\\r\\n\\r\\n    uint256 private constant FUNDING_FEE_MIN_RATE = 2000;\\r\\n    uint256 private constant FUNDING_FEE_MAX_RATE = 100000;\\r\\n    uint256 private constant FUNDING_FEE_BASE_PERIOD = 1 days;\\r\\n\\r\\n    uint256 private constant MAX_FUNDING_FEE_PERCENTAGE = 1000000;\\r\\n\\r\\n    uint16 private constant MAX_CVI_VALUE = 20000;\\r\\n    uint16 private constant CVI_DECIMALS = 100;\\r\\n\\r\\n    uint16 private constant MAX_FUNDING_FEE_CVI_THRESHOLD = 55;\\r\\n    uint16 private constant MIN_FUDNING_FEE_CVI_THRESHOLD = 110;\\r\\n    uint16 private constant FUNDING_FEE_DIVISION_FACTOR = 5;\\r\\n\\r\\n    uint16 private constant MAX_PERCENTAGE = 10000;\\r\\n\\r\\n    uint16 public override depositFeePercent = 0;\\r\\n    uint16 public override withdrawFeePercent = 0;\\r\\n    uint16 public override openPositionFeePercent = 30;\\r\\n    uint16 public override buyingPremiumFeeMaxPercent = 1000;\\r\\n    uint16 public override closePositionFeePercent = 30;\\r\\n\\r\\n    uint16 public buyingPremiumThreshold = 8000; // 1.0 is MAX_PERCENTAGE = 10000\\r\\n\\r\\n    uint16 public closePositionMaxFeePercent = 300;\\r\\n\\r\\n    uint16 public maxTurbulenceFeePercentToTrim = 100;\\r\\n    uint16 public turbulenceStepPercent = 1000;\\r\\n    uint16 public override turbulenceIndicatorPercent = 0;\\r\\n\\r\\n    uint256 public oracleHeartbeatPeriod = 55 minutes;\\r\\n    uint256 public closePositionFeeDecayPeriod = 24 hours;\\r\\n\\r\\n    address public turbulenceUpdator;\\r\\n\\r\\n    modifier onlyTurbulenceUpdator {\\r\\n        require(msg.sender == turbulenceUpdator, \\\"Not allowed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function updateTurbulenceIndicatorPercent(uint256 totalTime, uint256 newRounds) external override onlyTurbulenceUpdator returns (uint16) {\\r\\n        uint256 totalHeartbeats = totalTime / oracleHeartbeatPeriod;\\r\\n        uint16 updatedTurbulenceIndicatorPercent = calculateTurbulenceIndicatorPercent(totalHeartbeats, newRounds);\\r\\n\\r\\n        if (updatedTurbulenceIndicatorPercent != turbulenceIndicatorPercent) {\\r\\n            turbulenceIndicatorPercent = updatedTurbulenceIndicatorPercent;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setTurbulenceUpdator(address _newUpdator) external override onlyOwner {\\r\\n        turbulenceUpdator = _newUpdator;\\r\\n    }\\r\\n\\r\\n    function setDepositFee(uint16 _newDepositFeePercentage) external override onlyOwner {\\r\\n        require(_newDepositFeePercentage < MAX_PERCENTAGE, \\\"Fee exceeds maximum\\\");\\r\\n        depositFeePercent = _newDepositFeePercentage;\\r\\n    }\\r\\n\\r\\n    function setWithdrawFee(uint16 _newWithdrawFeePercentage) external override onlyOwner {\\r\\n        require(_newWithdrawFeePercentage < MAX_PERCENTAGE, \\\"Fee exceeds maximum\\\");\\r\\n        withdrawFeePercent = _newWithdrawFeePercentage;\\r\\n    }\\r\\n\\r\\n    function setOpenPositionFee(uint16 _newOpenPositionFeePercentage) external override onlyOwner {\\r\\n        require(_newOpenPositionFeePercentage < MAX_PERCENTAGE, \\\"Fee exceeds maximum\\\");\\r\\n        openPositionFeePercent = _newOpenPositionFeePercentage;\\r\\n    }\\r\\n\\r\\n    function setClosePositionFee(uint16 _newClosePositionFeePercentage) external override onlyOwner {\\r\\n        require(_newClosePositionFeePercentage < MAX_PERCENTAGE, \\\"Fee exceeds maximum\\\");\\r\\n        require(_newClosePositionFeePercentage <= closePositionMaxFeePercent, \\\"Min fee above max fee\\\");\\r\\n        closePositionFeePercent = _newClosePositionFeePercentage;\\r\\n    }\\r\\n\\r\\n    function setClosePositionMaxFee(uint16 _newClosePositionMaxFeePercentage) external override onlyOwner {\\r\\n        require(_newClosePositionMaxFeePercentage < MAX_PERCENTAGE, \\\"Fee exceeds maximum\\\");\\r\\n        require(_newClosePositionMaxFeePercentage >= closePositionFeePercent, \\\"Max fee below min fee\\\");\\r\\n        closePositionMaxFeePercent = _newClosePositionMaxFeePercentage;\\r\\n    }\\r\\n\\r\\n    function setClosePositionFeeDecay(uint256 _newClosePositionFeeDecayPeriod) external override onlyOwner {\\r\\n        require(_newClosePositionFeeDecayPeriod > 0, \\\"Period must be positive\\\");\\r\\n        closePositionFeeDecayPeriod = _newClosePositionFeeDecayPeriod;\\r\\n    }\\r\\n\\r\\n    function setOracleHeartbeatPeriod(uint256 _newOracleHeartbeatPeriod) external override onlyOwner {\\r\\n        require(_newOracleHeartbeatPeriod > 0, \\\"Heartbeat must be positive\\\");\\r\\n        oracleHeartbeatPeriod = _newOracleHeartbeatPeriod;\\r\\n    }\\r\\n\\r\\n    function setBuyingPremiumFeeMax(uint16 _newBuyingPremiumFeeMaxPercentage) external override onlyOwner {\\r\\n        require(_newBuyingPremiumFeeMaxPercentage < MAX_PERCENTAGE, \\\"Fee exceeds maximum\\\");\\r\\n        buyingPremiumFeeMaxPercent = _newBuyingPremiumFeeMaxPercentage;\\r\\n    }\\r\\n\\r\\n    function setBuyingPremiumThreshold(uint16 _newBuyingPremiumThreshold) external override onlyOwner {\\r\\n        require(_newBuyingPremiumThreshold < MAX_PERCENTAGE, \\\"Threshold exceeds maximum\\\");\\r\\n        buyingPremiumThreshold = _newBuyingPremiumThreshold;   \\r\\n    }\\r\\n\\r\\n    function setTurbulenceStep(uint16 _newTurbulenceStepPercentage) external override onlyOwner {\\r\\n        require(_newTurbulenceStepPercentage < MAX_PERCENTAGE, \\\"Step exceeds maximum\\\");\\r\\n        turbulenceStepPercent = _newTurbulenceStepPercentage;\\r\\n    }\\r\\n    \\r\\n    function setMaxTurbulenceFeePercentToTrim(uint16 _newMaxTurbulenceFeePercentToTrim) external override onlyOwner {\\r\\n        require(_newMaxTurbulenceFeePercentToTrim < MAX_PERCENTAGE, \\\"Fee exceeds maximum\\\");\\r\\n        maxTurbulenceFeePercentToTrim = _newMaxTurbulenceFeePercentToTrim;\\r\\n    }\\r\\n\\r\\n    function calculateTurbulenceIndicatorPercent(uint256 totalHeartbeats, uint256 newRounds) public view override returns (uint16) {\\r\\n        uint16 updatedTurbulenceIndicatorPercent = turbulenceIndicatorPercent;\\r\\n\\r\\n        uint256 decayTimes = 0;\\r\\n        uint256 turbulenceTimes = 0;\\r\\n        if (newRounds > totalHeartbeats) {\\r\\n            turbulenceTimes = newRounds - totalHeartbeats;\\r\\n            decayTimes = totalHeartbeats;\\r\\n        } else {\\r\\n            decayTimes = newRounds;\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < decayTimes; i++) {\\r\\n            updatedTurbulenceIndicatorPercent = updatedTurbulenceIndicatorPercent / 2;\\r\\n        }\\r\\n\\r\\n        if (updatedTurbulenceIndicatorPercent < maxTurbulenceFeePercentToTrim) {\\r\\n            updatedTurbulenceIndicatorPercent = 0;\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < turbulenceTimes; i++) {\\r\\n            updatedTurbulenceIndicatorPercent = updatedTurbulenceIndicatorPercent.add(uint16(uint256(buyingPremiumFeeMaxPercent).mul(turbulenceStepPercent) / MAX_PERCENTAGE));\\r\\n        }\\r\\n\\r\\n        if (updatedTurbulenceIndicatorPercent > buyingPremiumFeeMaxPercent) {\\r\\n            updatedTurbulenceIndicatorPercent = buyingPremiumFeeMaxPercent;\\r\\n        }\\r\\n\\r\\n        return updatedTurbulenceIndicatorPercent;\\r\\n    }\\r\\n\\r\\n    function calculateBuyingPremiumFee(uint168 _tokenAmount, uint8 _leverage, uint256 _collateralRatio) external view override returns (uint168 buyingPremiumFee, uint16 combinedPremiumFeePercentage) {\\r\\n        (buyingPremiumFee, combinedPremiumFeePercentage) =  _calculateBuyingPremiumFeeWithTurbulence(_tokenAmount, _leverage, _collateralRatio, turbulenceIndicatorPercent);\\r\\n    }\\r\\n    \\r\\n    function calculateBuyingPremiumFeeWithTurbulence(uint168 _tokenAmount, uint8 _leverage, uint256 _collateralRatio, uint16 _turbulenceIndicatorPercent) external view override returns (uint168 buyingPremiumFee, uint16 combinedPremiumFeePercentage) {\\r\\n        (buyingPremiumFee, combinedPremiumFeePercentage) = _calculateBuyingPremiumFeeWithTurbulence(_tokenAmount, _leverage, _collateralRatio, _turbulenceIndicatorPercent);\\r\\n    }\\r\\n\\r\\n    function calculateSingleUnitFundingFee(CVIValue[] calldata _cviValues) external override pure returns (uint256 fundingFee) {\\r\\n        for (uint8 i = 0; i < _cviValues.length; i++) {\\r\\n            fundingFee = fundingFee.add(calculateSingleUnitPeriodFundingFee(_cviValues[i]));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calculateSingleUnitPeriodFundingFee(CVIValue memory _cviValue) private pure returns (uint256 fundingFee) {\\r\\n        if (_cviValue.cviValue == 0 || _cviValue.period == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 fundingFeeRatePercents = FUNDING_FEE_MAX_RATE;\\r\\n        uint16 integerCVIValue = _cviValue.cviValue / CVI_DECIMALS;\\r\\n        if (integerCVIValue > MAX_FUNDING_FEE_CVI_THRESHOLD) {\\r\\n            if (integerCVIValue >= MIN_FUDNING_FEE_CVI_THRESHOLD) {\\r\\n                fundingFeeRatePercents = FUNDING_FEE_MIN_RATE;\\r\\n            } else {\\r\\n                // Defining as memory to keep function pure and save storage space + reads\\r\\n                uint24[5] memory fundingFeeCoefficients = [100000, 114869, 131950, 151571, 174110];\\r\\n\\r\\n                uint256 exponent = (integerCVIValue - MAX_FUNDING_FEE_CVI_THRESHOLD) / FUNDING_FEE_DIVISION_FACTOR;\\r\\n                uint256 coefficientIndex = (integerCVIValue - MAX_FUNDING_FEE_CVI_THRESHOLD) % FUNDING_FEE_DIVISION_FACTOR;\\r\\n\\r\\n                // Note: overflow is not possible as the exponent can only get larger, and other parts are constants\\r\\n                // However, 2 ** exponent can overflow if cvi value is wrong\\r\\n                require(exponent < 256, \\\"exponent overflow\\\");\\r\\n                fundingFeeRatePercents = (PRECISION_DECIMALS / (2 ** exponent) / fundingFeeCoefficients[coefficientIndex]) + \\r\\n                    FUNDING_FEE_MIN_RATE;\\r\\n\\r\\n                if (fundingFeeRatePercents > FUNDING_FEE_MAX_RATE) {\\r\\n                    fundingFeeRatePercents = FUNDING_FEE_MAX_RATE;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return PRECISION_DECIMALS.mul(uint256(_cviValue.cviValue)).mul(fundingFeeRatePercents).mul(_cviValue.period) /\\r\\n            FUNDING_FEE_BASE_PERIOD / MAX_CVI_VALUE / MAX_FUNDING_FEE_PERCENTAGE;\\r\\n    }\\r\\n\\r\\n    function calculateClosePositionFeePercent(uint256 creationTimestamp) external view override returns (uint16) {\\r\\n        if (block.timestamp.sub(creationTimestamp) >= closePositionFeeDecayPeriod) {\\r\\n            return closePositionFeePercent;\\r\\n        }\\r\\n\\r\\n        uint16 decay = uint16(uint256(closePositionMaxFeePercent - closePositionFeePercent).mul(block.timestamp.sub(creationTimestamp)) / \\r\\n            closePositionFeeDecayPeriod);\\r\\n        return closePositionMaxFeePercent.sub(decay);\\r\\n    }\\r\\n\\r\\n    function calculateWithdrawFeePercent(uint256) external view override returns (uint16) {\\r\\n        return withdrawFeePercent;\\r\\n    }\\r\\n\\r\\n    function openPositionFees() external view override returns (uint16 openPositionFeePercentResult, uint16 buyingPremiumFeeMaxPercentResult) {\\r\\n        openPositionFeePercentResult = openPositionFeePercent;\\r\\n        buyingPremiumFeeMaxPercentResult = buyingPremiumFeeMaxPercent;\\r\\n    }\\r\\n\\r\\n    function _calculateBuyingPremiumFeeWithTurbulence(uint168 _tokenAmount, uint8 _leverage, uint256 _collateralRatio, uint16 _turbulenceIndicatorPercent) private view returns (uint168 buyingPremiumFee, uint16 combinedPremiumFeePercentage) {\\r\\n        uint168 buyingPremiumFeePercentage = 0;\\r\\n        if (_collateralRatio >= PRECISION_DECIMALS) {\\r\\n            buyingPremiumFeePercentage = buyingPremiumFeeMaxPercent;\\r\\n        } else {\\r\\n            if (_collateralRatio >= uint256(buyingPremiumThreshold).mul(PRECISION_DECIMALS) / MAX_PERCENTAGE) {\\r\\n                // NOTE: The collateral ratio can never be bigger than 1.0 (= PERCISION_DECIMALS) in calls from the platform,\\r\\n                // so there is no issue with having a revert always occuring here on specific scenarios\\r\\n                uint168 denominator = uint168(PRECISION_DECIMALS).sub(uint168(_collateralRatio));\\r\\n\\r\\n                // Denominator is multiplied by PRECISION_DECIMALS, but is squared, so need to have a square in numerator as well\\r\\n                buyingPremiumFeePercentage = uint168(PRECISION_DECIMALS * PRECISION_DECIMALS).\\r\\n                    div(denominator.mul(denominator));\\r\\n            }\\r\\n        }\\r\\n\\r\\n        combinedPremiumFeePercentage = uint16(buyingPremiumFeePercentage).add(_turbulenceIndicatorPercent);\\r\\n        if (combinedPremiumFeePercentage > buyingPremiumFeeMaxPercent) {\\r\\n            combinedPremiumFeePercentage = buyingPremiumFeeMaxPercent;\\r\\n        }\\r\\n        \\r\\n        uint256 __buyingPremiumFee = uint256(_tokenAmount.mul(_leverage)).mul(combinedPremiumFeePercentage) / MAX_PERCENTAGE;\\r\\n        buyingPremiumFee = uint168(__buyingPremiumFee);\\r\\n        require(__buyingPremiumFee == buyingPremiumFee, \\\"Too much tokens\\\");\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/dev/repos/coti-cvix-contracts/contracts/v3/interfaces/IFeesCalculatorV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.6.2;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IFeesCalculatorV3 {\\r\\n\\r\\n    struct CVIValue {\\r\\n        uint256 period;\\r\\n        uint16 cviValue;\\r\\n    }\\r\\n\\r\\n    function updateTurbulenceIndicatorPercent(uint256 totalTime, uint256 newRounds) external returns (uint16);\\r\\n\\r\\n    function setTurbulenceUpdator(address newUpdator) external;\\r\\n\\r\\n    function setDepositFee(uint16 newDepositFeePercentage) external;\\r\\n    function setWithdrawFee(uint16 newWithdrawFeePercentage) external;\\r\\n    function setOpenPositionFee(uint16 newOpenPositionFeePercentage) external;\\r\\n    function setClosePositionFee(uint16 newClosePositionFeePercentage) external;\\r\\n    function setClosePositionMaxFee(uint16 newClosePositionMaxFeePercentage) external;\\r\\n    function setClosePositionFeeDecay(uint256 newClosePositionFeeDecayPeriod) external;\\r\\n    \\r\\n    function setOracleHeartbeatPeriod(uint256 newOracleHeartbeatPeriod) external;\\r\\n    function setBuyingPremiumFeeMax(uint16 newBuyingPremiumFeeMaxPercentage) external;\\r\\n    function setBuyingPremiumThreshold(uint16 newBuyingPremiumThreshold) external;\\r\\n    function setTurbulenceStep(uint16 newTurbulenceStepPercentage) external;\\r\\n    function setMaxTurbulenceFeePercentToTrim(uint16 newMaxTurbulenceFeePercentToTrim) external;\\r\\n\\r\\n    function calculateTurbulenceIndicatorPercent(uint256 totalHeartbeats, uint256 newRounds) external view returns (uint16);\\r\\n\\r\\n    function calculateBuyingPremiumFee(uint168 tokenAmount, uint8 leverage, uint256 collateralRatio) external view returns (uint168 buyingPremiumFee, uint16 combinedPremiumFeePercentage);\\r\\n    function calculateBuyingPremiumFeeWithTurbulence(uint168 tokenAmount, uint8 leverage, uint256 collateralRatio, uint16 turbulenceIndicatorPercent) external view returns (uint168 buyingPremiumFee, uint16 combinedPremiumFeePercentage);\\r\\n    \\r\\n    function calculateSingleUnitFundingFee(CVIValue[] calldata cviValues) external pure returns (uint256 fundingFee);\\r\\n    function calculateClosePositionFeePercent(uint256 creationTimestamp) external view returns (uint16);\\r\\n    function calculateWithdrawFeePercent(uint256 lastDepositTimestamp) external view returns (uint16);\\r\\n\\r\\n    function depositFeePercent() external view returns (uint16);\\r\\n    function withdrawFeePercent() external view returns (uint16);\\r\\n    function openPositionFeePercent() external view returns (uint16);\\r\\n    function closePositionFeePercent() external view returns (uint16);\\r\\n    function buyingPremiumFeeMaxPercent() external view returns (uint16);\\r\\n\\r\\n    function openPositionFees() external view returns (uint16 openPositionFeePercentResult, uint16 buyingPremiumFeeMaxPercentResult);\\r\\n\\r\\n    function turbulenceIndicatorPercent() external view returns (uint16);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/dev/repos/coti-cvix-contracts/contracts/v3/utils/SafeMath168.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath168 {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint168 a, uint168 b) internal pure returns (uint168) {\\r\\n        uint168 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint168 a, uint168 b) internal pure returns (uint168) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint168 a, uint168 b, string memory errorMessage) internal pure returns (uint168) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint168 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint168 a, uint168 b) internal pure returns (uint168) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint168 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint168 a, uint168 b) internal pure returns (uint168) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint168 a, uint168 b, string memory errorMessage) internal pure returns (uint168) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint168 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint168 a, uint168 b) internal pure returns (uint168) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint168 a, uint168 b, string memory errorMessage) internal pure returns (uint168) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"buyingPremiumFeeMaxPercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyingPremiumThreshold\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint168\",\"name\":\"_tokenAmount\",\"type\":\"uint168\"},{\"internalType\":\"uint8\",\"name\":\"_leverage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_collateralRatio\",\"type\":\"uint256\"}],\"name\":\"calculateBuyingPremiumFee\",\"outputs\":[{\"internalType\":\"uint168\",\"name\":\"buyingPremiumFee\",\"type\":\"uint168\"},{\"internalType\":\"uint16\",\"name\":\"combinedPremiumFeePercentage\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint168\",\"name\":\"_tokenAmount\",\"type\":\"uint168\"},{\"internalType\":\"uint8\",\"name\":\"_leverage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_turbulenceIndicatorPercent\",\"type\":\"uint16\"}],\"name\":\"calculateBuyingPremiumFeeWithTurbulence\",\"outputs\":[{\"internalType\":\"uint168\",\"name\":\"buyingPremiumFee\",\"type\":\"uint168\"},{\"internalType\":\"uint16\",\"name\":\"combinedPremiumFeePercentage\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"creationTimestamp\",\"type\":\"uint256\"}],\"name\":\"calculateClosePositionFeePercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"cviValue\",\"type\":\"uint16\"}],\"internalType\":\"struct IFeesCalculatorV3.CVIValue[]\",\"name\":\"_cviValues\",\"type\":\"tuple[]\"}],\"name\":\"calculateSingleUnitFundingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fundingFee\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalHeartbeats\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRounds\",\"type\":\"uint256\"}],\"name\":\"calculateTurbulenceIndicatorPercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"calculateWithdrawFeePercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closePositionFeeDecayPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closePositionFeePercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closePositionMaxFeePercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFeePercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTurbulenceFeePercentToTrim\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openPositionFeePercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openPositionFees\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"openPositionFeePercentResult\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"buyingPremiumFeeMaxPercentResult\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleHeartbeatPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newBuyingPremiumFeeMaxPercentage\",\"type\":\"uint16\"}],\"name\":\"setBuyingPremiumFeeMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newBuyingPremiumThreshold\",\"type\":\"uint16\"}],\"name\":\"setBuyingPremiumThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newClosePositionFeePercentage\",\"type\":\"uint16\"}],\"name\":\"setClosePositionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newClosePositionFeeDecayPeriod\",\"type\":\"uint256\"}],\"name\":\"setClosePositionFeeDecay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newClosePositionMaxFeePercentage\",\"type\":\"uint16\"}],\"name\":\"setClosePositionMaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newDepositFeePercentage\",\"type\":\"uint16\"}],\"name\":\"setDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newMaxTurbulenceFeePercentToTrim\",\"type\":\"uint16\"}],\"name\":\"setMaxTurbulenceFeePercentToTrim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newOpenPositionFeePercentage\",\"type\":\"uint16\"}],\"name\":\"setOpenPositionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newOracleHeartbeatPeriod\",\"type\":\"uint256\"}],\"name\":\"setOracleHeartbeatPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newTurbulenceStepPercentage\",\"type\":\"uint16\"}],\"name\":\"setTurbulenceStep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newUpdator\",\"type\":\"address\"}],\"name\":\"setTurbulenceUpdator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newWithdrawFeePercentage\",\"type\":\"uint16\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turbulenceIndicatorPercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turbulenceStepPercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turbulenceUpdator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRounds\",\"type\":\"uint256\"}],\"name\":\"updateTurbulenceIndicatorPercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeePercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FeesCalculatorV3","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}