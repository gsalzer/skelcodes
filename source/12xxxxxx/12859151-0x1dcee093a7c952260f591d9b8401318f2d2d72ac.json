{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.7;\r\n\r\ncontract GebAuth {\r\n    // --- Authorization ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"GebAuth/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n\r\n    constructor () public {\r\n        authorizedAccounts[msg.sender] = 1;\r\n        emit AddAuthorization(msg.sender);\r\n    }\r\n}\r\n\r\nabstract contract IncreasingTreasuryReimbursementLike {\r\n    function modifyParameters(bytes32, uint256) virtual external;\r\n}\r\ncontract MinimalIncreasingTreasuryReimbursementOverlay is GebAuth {\r\n    // --- Variables ---\r\n    mapping(address => uint256) public reimbursers;\r\n\r\n    // --- Events ---\r\n    event ToggleReimburser(address reimburser, uint256 whitelisted);\r\n\r\n    constructor() public GebAuth() {}\r\n\r\n    // --- Boolean Logic ---\r\n    function either(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := or(x, y)}\r\n    }\r\n\r\n    // --- Administration ---\r\n    /*\r\n    * @notice Whitelist/blacklist a reimburser contract\r\n    * @param reimburser The reimburser address\r\n    */\r\n    function toggleReimburser(address reimburser) external isAuthorized {\r\n        if (reimbursers[reimburser] == 0) {\r\n          reimbursers[reimburser] = 1;\r\n        } else {\r\n          reimbursers[reimburser] = 0;\r\n        }\r\n        emit ToggleReimburser(reimburser, reimbursers[reimburser]);\r\n    }\r\n\r\n    /*\r\n    * @notify Modify \"baseUpdateCallerReward\" or \"maxUpdateCallerReward\"\r\n    * @param reimburser The reimburser address\r\n    * @param parameter Must be \"baseUpdateCallerReward\" or \"maxUpdateCallerReward\"\r\n    * @param data The new value for baseUpdateCallerReward or maxUpdateCallerReward\r\n    */\r\n    function modifyParameters(address reimburser, bytes32 parameter, uint256 data) external isAuthorized {\r\n        require(reimbursers[reimburser] == 1, \"MinimalIncreasingTreasuryReimbursementOverlay/not-whitelisted\");\r\n        if (either(parameter == \"baseUpdateCallerReward\", parameter == \"maxUpdateCallerReward\")) {\r\n          IncreasingTreasuryReimbursementLike(reimburser).modifyParameters(parameter, data);\r\n        } else revert(\"MinimalIncreasingTreasuryReimbursementOverlay/modify-forbidden-param\");\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reimburser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"whitelisted\",\"type\":\"uint256\"}],\"name\":\"ToggleReimburser\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reimburser\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reimbursers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reimburser\",\"type\":\"address\"}],\"name\":\"toggleReimburser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MinimalIncreasingTreasuryReimbursementOverlay","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6417a531a35b45b3263c9da49592e23007aa253c43762ad8e1ad4489e6b26289"}]}