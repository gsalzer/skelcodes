{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/devin/gysr/core-private/contracts/OwnerController.sol\": {\r\n      \"content\": \"/*\\nOwnerController\\n\\nhttps://github.com/gysr-io/core\\n\\nSPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title Owner controller\\n *\\n * @notice this base contract implements an owner-controller access model.\\n *\\n * @dev the contract is an adapted version of the OpenZeppelin Ownable contract.\\n * It allows the owner to designate an additional account as the controller to\\n * perform restricted operations.\\n *\\n * Other changes include supporting role verification with a require method\\n * in addition to the modifier option, and removing some unneeded functionality.\\n *\\n * Original contract here:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n */\\ncontract OwnerController {\\n    address private _owner;\\n    address private _controller;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    event ControlTransferred(\\n        address indexed previousController,\\n        address indexed newController\\n    );\\n\\n    constructor() {\\n        _owner = msg.sender;\\n        _controller = msg.sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n        emit ControlTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current controller.\\n     */\\n    function controller() public view returns (address) {\\n        return _controller;\\n    }\\n\\n    /**\\n     * @dev Modifier that throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"oc1\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier that throws if called by any account other than the controller.\\n     */\\n    modifier onlyController() {\\n        require(_controller == msg.sender, \\\"oc2\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    function requireOwner() internal view {\\n        require(_owner == msg.sender, \\\"oc1\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the controller.\\n     */\\n    function requireController() internal view {\\n        require(_controller == msg.sender, \\\"oc2\\\");\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`). This can\\n     * include renouncing ownership by transferring to the zero address.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual {\\n        requireOwner();\\n        require(newOwner != address(0), \\\"oc3\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Transfers control of the contract to a new account (`newController`).\\n     * Can only be called by the owner.\\n     */\\n    function transferControl(address newController) public virtual {\\n        requireOwner();\\n        require(newController != address(0), \\\"oc4\\\");\\n        emit ControlTransferred(_controller, newController);\\n        _controller = newController;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/devin/gysr/core-private/contracts/info/PoolInfo.sol\": {\r\n      \"content\": \"/*\\nPoolInfo\\n\\nhttps://github.com/gysr-io/core\\n\\nSPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"../interfaces/IPool.sol\\\";\\nimport \\\"../interfaces/IStakingModule.sol\\\";\\nimport \\\"../interfaces/IRewardModule.sol\\\";\\n\\n/**\\n * @title Pool info library\\n *\\n * @notice this implements the Pool info library, which provides read-only\\n * convenience functions to query additional information and metadata\\n * about the core Pool contract.\\n */\\nlibrary PoolInfo {\\n    /**\\n     * @notice get information about the underlying staking and reward modules\\n     * @param pool address of Pool contract\\n     * @return staking module address\\n     * @return reward module address\\n     * @return staking module type\\n     * @return reward module type\\n     */\\n    function modules(address pool)\\n        public\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address\\n        )\\n    {\\n        IPool p = IPool(pool);\\n        IStakingModule s = IStakingModule(p.stakingModule());\\n        IRewardModule r = IRewardModule(p.rewardModule());\\n        return (address(s), address(r), s.factory(), r.factory());\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/devin/gysr/core-private/contracts/interfaces/IEvents.sol\": {\r\n      \"content\": \"/*\\nIEvents\\n\\nhttps://github.com/gysr-io/core\\n\\nSPDX-License-Identifier: MIT\\n */\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title GYSR event system\\n *\\n * @notice common interface to define GYSR event system\\n */\\ninterface IEvents {\\n    // staking\\n    event Staked(\\n        address indexed user,\\n        address indexed token,\\n        uint256 amount,\\n        uint256 shares\\n    );\\n    event Unstaked(\\n        address indexed user,\\n        address indexed token,\\n        uint256 amount,\\n        uint256 shares\\n    );\\n    event Claimed(\\n        address indexed user,\\n        address indexed token,\\n        uint256 amount,\\n        uint256 shares\\n    );\\n\\n    // rewards\\n    event RewardsDistributed(\\n        address indexed user,\\n        address indexed token,\\n        uint256 amount,\\n        uint256 shares\\n    );\\n    event RewardsFunded(\\n        address indexed token,\\n        uint256 amount,\\n        uint256 shares,\\n        uint256 timestamp\\n    );\\n    event RewardsUnlocked(address indexed token, uint256 shares);\\n    event RewardsExpired(\\n        address indexed token,\\n        uint256 amount,\\n        uint256 shares,\\n        uint256 timestamp\\n    );\\n\\n    // gysr\\n    event GysrSpent(address indexed user, uint256 amount);\\n    event GysrVested(address indexed user, uint256 amount);\\n    event GysrWithdrawn(uint256 amount);\\n}\\n\"\r\n    },\r\n    \"/home/devin/gysr/core-private/contracts/interfaces/IPool.sol\": {\r\n      \"content\": \"/*\\nIPool\\n\\nhttps://github.com/gysr-io/core\\n\\nSPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title Pool interface\\n *\\n * @notice this defines the core Pool contract interface\\n */\\ninterface IPool {\\n    /**\\n     * @return staking tokens for Pool\\n     */\\n    function stakingTokens() external view returns (address[] memory);\\n\\n    /**\\n     * @return reward tokens for Pool\\n     */\\n    function rewardTokens() external view returns (address[] memory);\\n\\n    /**\\n     * @return staking balances for user\\n     */\\n    function stakingBalances(address user)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @return total staking balances for Pool\\n     */\\n    function stakingTotals() external view returns (uint256[] memory);\\n\\n    /**\\n     * @return reward balances for Pool\\n     */\\n    function rewardBalances() external view returns (uint256[] memory);\\n\\n    /**\\n     * @return GYSR usage ratio for Pool\\n     */\\n    function usage() external view returns (uint256);\\n\\n    /**\\n     * @return address of staking module\\n     */\\n    function stakingModule() external view returns (address);\\n\\n    /**\\n     * @return address of reward module\\n     */\\n    function rewardModule() external view returns (address);\\n\\n    /**\\n     * @notice stake asset and begin earning rewards\\n     * @param amount number of tokens to unstake\\n     * @param stakingdata data passed to staking module\\n     * @param rewarddata data passed to reward module\\n     */\\n    function stake(\\n        uint256 amount,\\n        bytes calldata stakingdata,\\n        bytes calldata rewarddata\\n    ) external;\\n\\n    /**\\n     * @notice unstake asset and claim rewards\\n     * @param amount number of tokens to unstake\\n     * @param stakingdata data passed to staking module\\n     * @param rewarddata data passed to reward module\\n     */\\n    function unstake(\\n        uint256 amount,\\n        bytes calldata stakingdata,\\n        bytes calldata rewarddata\\n    ) external;\\n\\n    /**\\n     * @notice claim rewards without unstaking\\n     * @param amount number of tokens to claim against\\n     * @param stakingdata data passed to staking module\\n     * @param rewarddata data passed to reward module\\n     */\\n    function claim(\\n        uint256 amount,\\n        bytes calldata stakingdata,\\n        bytes calldata rewarddata\\n    ) external;\\n\\n    /**\\n     * @notice method called ad hoc to update user accounting\\n     */\\n    function update() external;\\n\\n    /**\\n     * @notice method called ad hoc to clean up and perform additional accounting\\n     */\\n    function clean() external;\\n\\n    /**\\n     * @return gysr balance available for withdrawal\\n     */\\n    function gysrBalance() external view returns (uint256);\\n\\n    /**\\n     * @notice withdraw GYSR tokens applied during unstaking\\n     * @param amount number of GYSR to withdraw\\n     */\\n    function withdraw(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"/home/devin/gysr/core-private/contracts/interfaces/IRewardModule.sol\": {\r\n      \"content\": \"/*\\nIRewardModule\\n\\nhttps://github.com/gysr-io/core\\n\\nSPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IEvents.sol\\\";\\n\\nimport \\\"../OwnerController.sol\\\";\\n\\n/**\\n * @title Reward module interface\\n *\\n * @notice this contract defines the common interface that any reward module\\n * must implement to be compatible with the modular Pool architecture.\\n */\\nabstract contract IRewardModule is OwnerController, IEvents {\\n    // constants\\n    uint256 public constant DECIMALS = 18;\\n\\n    /**\\n     * @return array of reward tokens\\n     */\\n    function tokens() external view virtual returns (address[] memory);\\n\\n    /**\\n     * @return array of reward token balances\\n     */\\n    function balances() external view virtual returns (uint256[] memory);\\n\\n    /**\\n     * @return GYSR usage ratio for reward module\\n     */\\n    function usage() external view virtual returns (uint256);\\n\\n    /**\\n     * @return address of module factory\\n     */\\n    function factory() external view virtual returns (address);\\n\\n    /**\\n     * @notice perform any necessary accounting for new stake\\n     * @param account address of staking account\\n     * @param user address of user\\n     * @param shares number of new shares minted\\n     * @param data addtional data\\n     * @return amount of gysr spent\\n     * @return amount of gysr vested\\n     */\\n    function stake(\\n        address account,\\n        address user,\\n        uint256 shares,\\n        bytes calldata data\\n    ) external virtual returns (uint256, uint256);\\n\\n    /**\\n     * @notice reward user and perform any necessary accounting for unstake\\n     * @param account address of staking account\\n     * @param user address of user\\n     * @param shares number of shares burned\\n     * @param data additional data\\n     * @return amount of gysr spent\\n     * @return amount of gysr vested\\n     */\\n    function unstake(\\n        address account,\\n        address user,\\n        uint256 shares,\\n        bytes calldata data\\n    ) external virtual returns (uint256, uint256);\\n\\n    /**\\n     * @notice reward user and perform and necessary accounting for existing stake\\n     * @param account address of staking account\\n     * @param user address of user\\n     * @param shares number of shares being claimed against\\n     * @param data addtional data\\n     * @return amount of gysr spent\\n     * @return amount of gysr vested\\n     */\\n    function claim(\\n        address account,\\n        address user,\\n        uint256 shares,\\n        bytes calldata data\\n    ) external virtual returns (uint256, uint256);\\n\\n    /**\\n     * @notice method called by anyone to update accounting\\n     * @param user address of user for update\\n     * @dev will only be called ad hoc and should not contain essential logic\\n     */\\n    function update(address user) external virtual;\\n\\n    /**\\n     * @notice method called by owner to clean up and perform additional accounting\\n     * @dev will only be called ad hoc and should not contain any essential logic\\n     */\\n    function clean() external virtual;\\n}\\n\"\r\n    },\r\n    \"/home/devin/gysr/core-private/contracts/interfaces/IStakingModule.sol\": {\r\n      \"content\": \"/*\\nIStakingModule\\n\\nhttps://github.com/gysr-io/core\\n\\nSPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IEvents.sol\\\";\\n\\nimport \\\"../OwnerController.sol\\\";\\n\\n/**\\n * @title Staking module interface\\n *\\n * @notice this contract defines the common interface that any staking module\\n * must implement to be compatible with the modular Pool architecture.\\n */\\nabstract contract IStakingModule is OwnerController, IEvents {\\n    // constants\\n    uint256 public constant DECIMALS = 18;\\n\\n    /**\\n     * @return array of staking tokens\\n     */\\n    function tokens() external view virtual returns (address[] memory);\\n\\n    /**\\n     * @notice get balance of user\\n     * @param user address of user\\n     * @return balances of each staking token\\n     */\\n    function balances(address user)\\n        external\\n        view\\n        virtual\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @return address of module factory\\n     */\\n    function factory() external view virtual returns (address);\\n\\n    /**\\n     * @notice get total staked amount\\n     * @return totals for each staking token\\n     */\\n    function totals() external view virtual returns (uint256[] memory);\\n\\n    /**\\n     * @notice stake an amount of tokens for user\\n     * @param user address of user\\n     * @param amount number of tokens to stake\\n     * @param data additional data\\n     * @return address of staking account\\n     * @return number of shares minted for stake\\n     */\\n    function stake(\\n        address user,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external virtual returns (address, uint256);\\n\\n    /**\\n     * @notice unstake an amount of tokens for user\\n     * @param user address of user\\n     * @param amount number of tokens to unstake\\n     * @param data additional data\\n     * @return address of staking account\\n     * @return number of shares burned for unstake\\n     */\\n    function unstake(\\n        address user,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external virtual returns (address, uint256);\\n\\n    /**\\n     * @notice quote the share value for an amount of tokens without unstaking\\n     * @param user address of user\\n     * @param amount number of tokens to claim with\\n     * @param data additional data\\n     * @return address of staking account\\n     * @return number of shares that the claim amount is worth\\n     */\\n    function claim(\\n        address user,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external virtual returns (address, uint256);\\n\\n    /**\\n     * @notice method called by anyone to update accounting\\n     * @param user address of user for update\\n     * @dev will only be called ad hoc and should not contain essential logic\\n     */\\n    function update(address user) external virtual;\\n\\n    /**\\n     * @notice method called by owner to clean up and perform additional accounting\\n     * @dev will only be called ad hoc and should not contain any essential logic\\n     */\\n    function clean() external virtual;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"modules\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PoolInfo","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}